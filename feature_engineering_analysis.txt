tps-dec-2021-simple-linear-baseline-with-fe.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'rename', 'rename', 'abs', 'abs', 'abs', 'abs', 'apply', 'apply', 'mean', 'max', 'min', 'transform', 'replace', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'drop', 'items', 'unique', 'where', 'replace', 'head', 'unique', 'to_csv'] ['numpy', 'pandas', 'gc', 'os'] ['LogisticRegression', 'accuracy_score', 'KFold', 'RobustScaler']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'where', 'min', 'unique'], 'pandas': ['unique', 'read_csv'], 'cuml': [], 'sklearn': ['transform'], 'gc': [], 'os': ['rename', 'replace']} axis_0: 0, axis_1: 8
ncaaw2020-lightgbm-k-fold-on-fire-viz.py : ['fillna', 'median', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'mode', 'concat', 'copy', 'transform', 'transform', 'transform', 'concat', 'reset_index', 'mean', 'groupby', 'merge', 'reset_index', 'sort_values', 'items', 'read_csv', 'read_csv', 'keys', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'apply', 'head', 'head', 'head', 'head', 'head', 'head', 'read_csv', 'head', 'drop', 'apply', 'apply', 'apply', 'head', 'head', 'merge', 'merge', 'head', 'merge', 'head', 'merge', 'drop', 'merge', 'drop', 'head', 'merge', 'drop_duplicates', 'drop', 'merge', 'drop_duplicates', 'drop', 'head', 'merge', 'drop_duplicates', 'head', 'merge', 'drop_duplicates', 'head', 'merge', 'drop_duplicates', 'drop', 'merge', 'drop_duplicates', 'drop', 'head', 'merge', 'drop_duplicates', 'drop', 'merge', 'drop_duplicates', 'drop', 'head', 'drop', 'head', 'head', 'reset_index', 'agg', 'groupby', 'join', 'reset_index', 'agg', 'groupby', 'join', 'head', 'head', 'merge', 'merge', 'merge', 'merge', 'drop', 'head', 'merge', 'merge', 'merge', 'merge', 'drop', 'head', 'copy', 'copy', 'head', 'head', 'reset_index', 'concat', 'head', 'fillna', 'transform', 'head', 'read_csv', 'hist', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'copy', 'datetime', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'lightgbm', 'optuna', 'json', 'ast', 'time', 'math', 'warnings', 'os', 'glob', 'gc'] ['StandardScaler', 'MinMaxScaler', 'OneHotEncoder', 'shuffle', 'stats', 'train_test_split', 'StratifiedKFold', 'KFold', 'cross_val_score', 'GridSearchCV', 'RepeatedStratifiedKFold', 'StandardScaler', 'LabelEncoder', 'plot_optimization_history', 'model_selection', 'mean_squared_error', 'mean_absolute_error', 'accuracy_score', 'roc_auc_score', 'log_loss', 'classification_report', 'confusion_matrix', 'linear_model', 'BaseEstimator', 'TransformerMixin', 'LabelEncoder']Dict:{'numpy': ['mean', 'median', 'copy'], 'pandas': ['concat', 'merge', 'read_csv'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': ['transform'], 'copy': ['copy'], 'datetime': [], 'scipy': ['mode'], 'plotly': [], 'lightgbm': [], 'optuna': [], 'json': [], 'ast': [], 'time': [], 'math': [], 'warnings': [], 'os': [], 'glob': [], 'gc': []} axis_0: 0, axis_1: 12
simplest-top-10-titanic-0-80861.py : ['read_csv', 'read_csv', 'astype', 'fillna', 'astype', 'fillna', 'to_csv', 'concat', 'applymap', 'pivot_table', 'fillna', 'fillna', 'astype', 'concat', 'to_csv', 'applymap', 'pivot_table', 'fillna', 'fillna', 'astype', 'concat', 'to_csv', 'applymap', 'sort_values', 'pivot_table', 'fillna', 'fillna', 'astype', 'concat', 'to_csv'] ['pandas', 'catboost'] []Dict:{'pandas': ['concat', 'pivot_table', 'read_csv']} axis_0: 0, axis_1: 4
cmi-feature-engg-with-ensemble-models.py : ['to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'read_csv', 'unique', 'count', 'filter', 'count', 'filter', 'filter', 'filter', 'filter', 'unique', 'abs', 'abs', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'unique', 'filter', 'std', 'filter', 'filter', 'filter', 'filter', 'to_numpy', 'unique', 'std', 'filter', 'std', 'filter', 'diff', 'filter', 'diff', 'mean', 'filter', 'rename', 'reset_index', 'filter', 'filter', 'filter', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'polars', 'datetime', 'optuna', 'plotly.express', 'plotly.graph_objects'] ['tqdm', 'RandomForestClassifier', 'train_test_split', 'f1_score', 'make_subplots', 'score']Dict:{'numpy': ['mean', 'abs', 'unique', 'diff', 'std'], 'pandas': ['to_datetime', 'unique', 'read_csv'], 'matplotlib': [], 'polars': ['mean', 'count', 'std', 'read_csv'], 'datetime': [], '': [], 'tqdm': [], 'optuna': [], 'sklearn': [], 'plotly': [], 'metric': []} axis_0: 0, axis_1: 0
pdata1-features1.py : ['to_pickle'] ['pandas', 'numpy', 'copy', 'sys', 'util', 'joblib', 'os'] ['tqdm', 'glob', 'reload']Dict:{'pandas': ['to_pickle'], 'numpy': [], 'tqdm': [], 'glob': [], 'imp': [], 'copy': [], 'sys': [], 'util': [], 'joblib': [], 'os': []} axis_0: 0, axis_1: 0
nesp-changes-eda-and-baseline.py : ['read_csv', 'count', 'groupby', 'where', 'crosstab', 'mean', 'groupby', 'fillna', 'unstack', 'read_csv', 'head', 'crosstab', 'mean', 'groupby', 'fillna', 'unstack', 'read_csv', 'where', 'value_counts', 'hist', 'crosstab', 'fillna', 'merge', 'fillna', 'merge', 'keys', 'map', 'mean', 'groupby', 'fillna', 'map', 'mean', 'groupby', 'fillna', 'map', 'copy', 'unstack', 'groupby', 'mean', 'groupby', 'first', 'groupby', 'mean', 'groupby', 'map', 'map', 'fillna', 'keys', 'map', 'read_csv', 'fillna', 'set_index', 'hist', 'merge', 'add_suffix', 'merge', 'add_suffix', 'fillna', 'apply', 'transform', 'transform', 'value_counts', 'value_counts', 'value_counts', 'map', 'map', 'map', 'fillna', 'concat', 'corr', 'cumsum', 'corrwith', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'plotly.express', 'os', 'time', 'urllib.request', 'blosum', 'Levenshtein'] ['PandasPdb', 'PCA', 'LinearRegression', 'StandardScaler', 'distance']Dict:{'numpy': ['where', 'mean', 'cumsum', 'copy'], 'matplotlib': ['hist'], 'plotly': [], 'os,': [], 'time': [], 'urllib': [], '': [], 'biopandas': [], 'blosum': [], 'sklearn': ['transform'], 'Levenshtein': []} axis_0: 0, axis_1: 1
rapids-data-augmentation-mnist-0-985.py : ['read_csv', 'read_csv', 'read_csv', 'to_csv', 'head'] ['cudf', 'cuml', 'pandas', 'numpy', 'os', 'matplotlib.pyplot'] ['KNeighborsClassifier', 'ImageDataGenerator']Dict:{'cudf,': [], 'cuml': [], 'pandas': ['read_csv'], 'matplotlib': [], 'keras': []} axis_0: 0, axis_1: 1
ts-eda-pred-on-gpu-orange-visualization.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'head', 'head', 'map', 'unique', 'astype', 'head', 'map', 'unique', 'map', 'join', 'unique', 'astype', 'astype', 'head', 'merge', 'merge', 'merge', 'head', 'merge', 'merge', 'head', 'head', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'sort_values', 'value_counts', 'sort_values', 'value_counts', 'value_counts', 'sort_values', 'value_counts', 'sort_values', 'value_counts', 'sort_values', 'value_counts', 'sort_values', 'value_counts', 'head', 'agg', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'mean', 'rolling', 'std', 'rolling', 'items', 'items', 'sum', 'groupby', 'astype', 'items', 'update', 'update', 'sort_values', 'sort_values', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'array', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'clip', 'fillna', 'head', 'astype', 'astype', 'astype', 'concat', 'fillna', 'info', 'apply', 'apply', 'apply', 'apply', 'merge', 'head', 'merge', 'apply', 'apply', 'keys', 'merge', 'head', 'apply', 'apply', 'apply', 'apply', 'head', 'reset_index', 'min', 'groupby', 'reset_index', 'min', 'groupby', 'merge', 'merge', 'fillna', 'astype', 'drop', 'fillna', 'fillna', 'astype', 'astype', 'head', 'copy', 'merge', 'astype', 'mean', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'astype', 'fillna', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'astype', 'fillna', 'fillna', 'drop', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'astype', 'fillna', 'drop', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'astype', 'fillna', 'drop', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'astype', 'fillna', 'drop', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'astype', 'fillna', 'drop', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'astype', 'fillna', 'drop', 'copy', 'merge', 'astype', 'fillna', 'head', 'drop', 'to_pickle', 'sum', 'groupby', 'shift', 'read_pickle', 'info', 'drop', 'drop', 'drop', 'read_csv', 'clip', 'to_csv', 'head'] ['numpy', 'pandas', 'random', 'datetime', 'calendar', 'os', 'gc', 'matplotlib.pyplot', 'seaborn', 'holoviews', 'statsmodels.formula.api', 'statsmodels.tsa.api', 'statsmodels.api', 'scipy.stats', 'lightgbm', 'warnings'] ['HTML', 'pandarallel', 'opts', 'ARIMA', 'SARIMAX', 'autocorrelation_plot', 'seasonal_decompose', 'adfuller', 'acf', 'pacf', 'arma_order_select_ic', 'kpss', 'StandardScaler', 'LabelEncoder', 'product', 'XGBRegressor', 'LabelEncoder', 'LinearRegression', 'KNeighborsRegressor', 'RandomForestRegressor', 'Series', 'PolyCollection', 'LineCollection', 'lag_plot', 'auto_arima']Dict:{'IPython': [], 'numpy': ['mean', 'sum', 'array', 'min', 'unique', 'clip', 'info', 'std', 'copy'], 'pandas': [], 'random': [], 'datetime': [], 'calendar': [], 'os': ['rename'], 'gc': [], 'pandarallel': [], 'matplotlib': ['update'], 'seaborn': [], 'holoviews': [], 'statsmodels': [], 'scipy': [], 'sklearn': ['apply'], 'itertools': [], 'xgboost': ['apply'], 'lightgbm': [], 'warnings': [], 'pmdarima': []} axis_0: 0, axis_1: 12
ashrae-energy-prediction-using-stratified-kfold.py : ['join', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'reset_index', 'min', 'max', 'array', 'concat', 'reset_index', 'to_datetime', 'set_index', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'reset_index', 'drop', 'sort_values', 'reset_index', 'to_datetime', 'replace', 'replace', 'replace', 'drop', 'merge', 'merge', 'concat', 'clip', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'read_csv', 'drop', 'merge', 'read_csv', 'merge', 'mean', 'read_csv', 'clip', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'lightgbm', 'datetime', 'gc', 'os', 'seaborn'] ['LabelEncoder', 'KFold', 'StratifiedKFold', 'GroupKFold', 'tqdm_notebook', 'feels_like', 'Temp', 'metrics', 'is_datetime64_any_dtype', 'is_categorical_dtype']Dict:{'pandas': [], 'numpy': ['mean', 'max', 'sum', 'min', 'clip', 'isin', 'array'], 'matplotlib': [], 'lightgbm': [], 'sklearn': [], 'tqdm': ['update'], 'datetime': [], 'meteocalc': [], 'gc': [], 'os': ['replace'], 'seaborn': []} axis_0: 2, axis_1: 3
advanced-feature-expansion-lightgbm.py : ['read_parquet', 'read_csv', 'read_csv', 'drop', 'get_dummies', 'get_dummies', 'drop', 'mean', 'apply', 'mean', 'mean', 'mean', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'copy', 'concat', 'reset_index', 'copy', 'concat', 'reset_index', 'copy', 'concat', 'reset_index', 'copy', 'concat', 'reset_index', 'copy', 'copy', 'join', 'join', 'copy', 'join', 'join', 'copy', 'round', 'corr', 'corr', 'copy', 'copy', 'join', 'join', 'copy', 'join', 'join', 'to_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'copy', 'to_csv'] ['warnings', 'os', 'gc', 'glob', 'random', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.figure_factory', 'plotly.express', 'lightgbm'] ['tqdm', 'stats', 'Path', 'groupby', 'LinearSVR', 'KNeighborsRegressor', 'MultiOutputRegressor', 'train_test_split']Dict:{'warnings': [], '': [], '#': [], '🤐': [], 'suppress': [], 'os': [], 'gc': [], 'glob': [], 'random': [], 'numpy': ['mean', 'round', 'copy'], 'pandas': ['concat', 'read_parquet', 'get_dummies', 'read_csv'], 'seaborn': [], 'tqdm': [], 'scipy': [], 'pathlib': [], 'itertools': [], 'matplotlib': [], 'plotly': [], 'lightgbm': [], 'sklearn': [], '=': [], 'pd': [], "index_col='id')": []} axis_0: 0, axis_1: 2
nlp-with-disaster-tweets-eda-cleaning-and-bert.py : ['read_csv', 'read_csv', 'sum', 'memory_usage', 'sum', 'memory_usage', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'nunique', 'nunique', 'nunique', 'nunique', 'transform', 'groupby', 'sort_values', 'sort_values', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'mean', 'apply', 'mean', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'count', 'groupby', 'join', 'items', 'items', 'items', 'items', 'items', 'items', 'apply', 'items', 'sort_values', 'nunique', 'groupby', 'copy', 'nunique', 'count', 'count', 'nunique', 'nunique', '__init__', 'round', 'round', 'array', 'array', 'array', 'read_csv', 'astype', 'round', 'to_csv', 'describe', 'read_csv', 'astype', 'astype', 'drop', 'merge', 'sum', 'memory_usage', 'read_csv', 'to_csv', 'describe', 'to_pickle', 'to_pickle', 'sum', 'memory_usage', 'sum', 'memory_usage'] ['gc', 're', 'string', 'operator', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'tokenization', 'tensorflow', 'tensorflow_hub'] ['defaultdict', 'STOPWORDS', 'StratifiedKFold', 'StratifiedShuffleSplit', 'precision_score', 'recall_score', 'f1_score', 'keras', 'SGD', 'Adam', 'Dense', 'Input', 'Dropout', 'GlobalAveragePooling1D', 'Model', 'Sequential', 'ModelCheckpoint', 'EarlyStopping', 'Callback']Dict:{'gc': [], 're': [], 'string': [], 'operator': [], 'collections': ['items', '__init__', 'copy'], 'numpy': ['mean', 'sum', 'round', 'array', 'copy'], 'pandas': ['to_pickle', 'read_csv', 'isnull', 'array', 'merge'], 'matplotlib': [], 'seaborn': [], 'tokenization': [], 'wordcloud': [], 'sklearn': ['__init__'], 'tensorflow': ['__init__'], 'tensorflow_hub': []} axis_0: 0, axis_1: 0
insightful-eda-modeling-lgbm-hyperopt.py : ['join', 'read_csv', 'read_csv', 'reset_index', 'sum', 'isnull', 'nunique', 'value_counts', 'value_counts', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'reset_index', 'nunique', 'groupby', 'reset_index', 'nunique', 'groupby', 'max', 'value_counts', 'head', 'reset_index', 'count', 'groupby', 'corr', 'astype', 'rename', 'concat', 'sum', 'sample', 'map', 'rename', 'reset_index', 'unstack', 'crosstab', 'boxplot', 'sample', 'map', 'sample', 'map', 'crosstab', 'read_csv', 'read_csv', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'where', 'where', 'where', 'where', 'where', 'where', 'astype', 'astype', 'sample', 'drop_duplicates', 'concat', 'transform', 'transform', 'isna', 'keys', 'apply', 'apply', 'apply', 'apply', 'map', 'map', 'map', 'map', 'astype', 'astype', 'astype', 'astype', 'map', 'map', 'get_dummies', 'get_dummies', 'transform', 'transform', 'drop', 'drop', 'stack', 'stack', 'read_csv', 'stack', 'head', 'to_csv'] ['numpy', 'pandas', 'scipy', 'matplotlib.pyplot', 'seaborn', 'plotly.graph_objs', 'plotly.tools', 'plotly.figure_factory', 'os', 'lightgbm'] ['stats', 'iplot', 'init_notebook_mode', 'PCA', 'KMeans', 'mean_squared_error', 'RandomForestRegressor', 'train_test_split', 'LabelEncoder', 'LinearRegression', 'partial', 'fmin', 'hp', 'tpe', 'Trials', 'space_eval', 'STATUS_OK', 'STATUS_RUNNING', 'minmax_scale', 'StandardScaler', 'KFold']Dict:{'numpy': ['stack', 'max', 'sum', 'where', 'min'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'crosstab'], 'scipy': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'sklearn': [], 'functools': [], 'hyperopt': [], 'os': ['rename'], 'lightgbm': []} axis_0: 0, axis_1: 4
tps-2022-10-fastai.py : ['unique', 'sample', 'to_numpy', 'query', 'to_numpy', 'query', 'to_numpy', 'query', 'to_numpy', 'query', 'sample', 'sample', 'to_numpy', 'read_csv', 'to_csv', 'head'] ['random', 'numpy', 'pandas', 'gc', 'fastai.losses'] ['Path', '*']Dict:{'random': ['sample'], 'numpy': ['unique'], 'pandas': ['unique', 'read_csv'], 'gc': [], 'pathlib': [], 'fastai': []} axis_0: 0, axis_1: 0
be-cautious-on-some-features.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'map', 'map', 'map', 'map', 'map', 'astype', 'to_datetime', 'to_datetime', 'groupby', 'query', 'sum', 'sum', 'copy', 'update', 'copy', 'mean', 'update', 'keys', 'groupby', 'groupby', 'value_counts', 'to_csv', 'value_counts', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'sum', 'transform', 'groupby', 'sum', 'sum', 'hist', 'hist', 'hist', 'hist'] ['numpy', 'pandas', 'os', 'lightgbm', 'gc', 'json'] ['time', 'tqdm_notebook', 'Counter', 'stats', 'cohen_kappa_score', 'KFold', 'StratifiedKFold']Dict:{'numpy': ['mean', 'sum', 'unique', 'copy'], 'pandas': ['to_datetime', 'unique', 'read_csv', 'value_counts'], 'os': [], 'time': [], 'tqdm': ['update'], 'collections': ['keys', 'update', 'copy'], 'scipy': [], 'lightgbm': [], 'sklearn': [], 'gc': [], 'json': []} axis_0: 1, axis_1: 0
stacked-model-mlp-logisticregression-random.py : ['read_csv', 'read_csv', 'read_csv', 'assign', 'transform', 'groupby', 'mean', 'pop', 'concat', 'transform', 'transform', 'copy', 'copy', 'copy', 'astype', 'isnull', 'astype', 'isnull', 'sort_values', 'corr', 'drop', 'round', 'sum', 'reset_index', 'sort_values', 'head', 'unique', 'sort_values', 'corr', 'drop', 'sum', 'isnull', 'unique', 'keys', 'dropna', 'sum', 'isnull', 'isnull', 'sum', 'isnull', 'isnull', 'sum', 'sum', 'isnull', 'mean', 'transform', 'transform', 'to_csv'] ['numpy', 'pandas', 'warnings', 'matplotlib.pyplot', 'seaborn', 'itertools'] ['Fore', 'Back', 'Style', 'StandardScaler', 'defaultdict', 'KNNImputer', 'LogisticRegression', 'HuberRegressor', 'StratifiedKFold', 'GroupKFold', 'make_pipeline', 'MLPClassifier', 'roc_auc_score', 'WoEEncoder', 'spearmanr', 'rankdata', 'StackingEstimator']Dict:{'numpy': ['mean', 'sum', 'round', 'unique', 'copy'], 'pandas': ['concat', 'unique', 'read_csv', 'isnull'], 'warnings': [], 'matplotlib': [], 'seaborn': [], 'colorama': [], 'sklearn': [], 'itertools': ['groupby'], 'collections': ['keys', 'pop', 'copy'], 'feature_engine': [], 'scipy': [], 'tpot': []} axis_0: 0, axis_1: 5
ml-101-beginner-s-stop-xgb-lgbm-blend.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'reset_index', 'concat', 'sum', 'isnull', 'drop', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'median', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'median', 'fillna', 'fillna', 'median', 'fillna', 'median', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'to_csv'] ['os', 'warnings', 'numpy', 'pandas', 'pandas_profiling'] ['Lasso', 'LassoCV', 'train_test_split', 'StandardScaler', 'LabelEncoder', 'XGBRegressor', 'LGBMRegressor', 'ResidualsPlot', 'PredictionError', 'ValidationCurve']Dict:{'os': [], 'warnings': [], 'numpy': ['median', 'sum'], 'pandas': ['concat', 'read_csv', 'isnull'], 'pandas_profiling': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'yellowbrick': []} axis_0: 0, axis_1: 2
wids-datathon-2021-diabetes-detection.py : ['read_csv', 'read_csv', 'read_csv', 'rename', 'rename', 'reset_index', 'sample', 'head', 'value_counts', 'value_counts', 'unique', 'unique', 'drop', 'drop', 'equals', 'drop', 'drop', 'drop', 'drop', 'isna', 'isna', 'isna', 'isna', 'isna', 'isna', 'reset_index', 'isna', 'isna', 'isna', 'replace', 'fillna', 'fillna', 'replace', 'fillna', 'fillna', 'copy', 'copy', 'mean', 'mean', 'mean', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'unique', 'cut', 'cut', 'mean', 'groupby', 'reset_index', 'merge', 'merge', 'where', 'isna', 'where', 'isna', 'where', 'isna', 'where', 'isna', 'drop', 'drop', 'mean', 'groupby', 'reset_index', 'merge', 'merge', 'where', 'isna', 'where', 'isna', 'where', 'isna', 'where', 'isna', 'drop', 'drop', 'mean', 'groupby', 'reset_index', 'merge', 'merge', 'where', 'isna', 'where', 'isna', 'where', 'isna', 'where', 'isna', 'drop', 'drop', 'apply', 'apply', 'round', 'round', 'where', 'isna', 'where', 'isna', 'drop', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'replace', 'replace', 'value_counts', 'groupby', 'reset_index', 'pivot', 'apply', 'apply', 'apply', 'apply', 'drop', 'drop', 'where', 'where', 'drop', 'drop', 'fillna', 'fillna', 'sum', 'sum', 'fillna', 'fillna', 'fillna', 'sum', 'divide', 'apply', 'fillna', 'fillna', 'fillna', 'sum', 'divide', 'apply', 'drop', 'drop', 'astype', 'fillna', 'astype', 'fillna', 'round', 'astype', 'fillna', 'astype', 'fillna', 'round', 'astype', 'fillna', 'astype', 'fillna', 'round', 'astype', 'fillna', 'astype', 'fillna', 'round', 'apply', 'apply', 'apply', 'apply', 'cut', 'reset_index', 'mean', 'groupby', 'pivot', 'drop', 'head', 'transform', 'head', 'concat', 'concat', 'unique', 'unique', 'unique', 'nunique', 'nunique', 'sum', 'isna', 'sum', 'isna', 'nunique', 'nunique', 'where', 'where', 'where', 'where', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'where', 'isna', 'notna', 'where', 'isna', 'notna', 'drop', 'drop', 'where', 'isna', 'notna', 'where', 'isna', 'notna', 'drop', 'drop', 'drop', 'drop', 'where', 'notna', 'notna', 'isna', 'where', 'notna', 'notna', 'isna', 'cut', 'cut', 'cut', 'cut', 'apply', 'apply', 'drop', 'drop', 'drop', 'drop', 'nunique', 'nunique', 'unique', 'unique', 'agg', 'groupby', 'merge', 'merge', 'drop', 'drop', 'sum', 'isna', 'astype', 'astype', 'sum', 'isna', 'astype', 'astype', 'apply', 'apply', 'value_counts', 'groupby', 'reset_index', 'pivot', 'insert', 'head', 'head', 'sample', 'head', 'concat', 'head', 'hist', 'mean', 'max', 'hist', 'mean', 'max', 'unique', 'mean', 'mean', 'head', 'sort_values', 'head', 'sort_values', 'head', 'head', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'astype', 'copy', 'reset_index', 'sample', 'head', 'head', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'set_index', 'tail', 'sort_values', 'set_index', 'head', 'sort_values', 'value_counts', 'value_counts', 'value_counts', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'set_index', 'tail', 'sort_values', 'set_index', 'head', 'sort_values', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'copy', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib.gridspec', 'seaborn', 'warnings', 'category_encoders', 'lightgbm', 'time'] ['StandardScaler', 'tqdm', 'LogisticRegression', 'StratifiedKFold', 'GroupKFold', 'accuracy_score', 'roc_auc_score', 'precision_recall_fscore_support', 'f1_score', 'confusion_matrix']Dict:{'numpy': ['mean', 'max', 'sum', 'where', 'round', 'unique', 'insert', 'divide', 'copy'], 'pandas': ['isna', 'read_csv', 'cut', 'concat', 'value_counts', 'notna', 'unique', 'merge', 'pivot'], 'matplotlib': ['copy'], 'seaborn': [], 'warnings': [], '#': [], 'Supress': [], '': [], 'category_encoders': [], 'sklearn': ['transform'], 'tqdm': [], 'lightgbm': [], 'time': []} axis_0: 3, axis_1: 51
tpsaug22-eda-which-makes-sense.py : ['read_csv', 'read_csv', 'concat', 'value_counts', 'concat', 'rename', 'sum', 'isna', 'rename', 'sum', 'isna', 'sum', 'any', 'isna', 'min', 'min', 'max', 'max', 'hist', 'hist', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'concat', 'rename', 'sum', 'isna', 'rename', 'sum', 'isna', 'agg', 'groupby', 'value_counts', 'concat', 'rename', 'sum', 'isna', 'rename', 'sum', 'isna', 'value_counts', 'value_counts', 'reindex', 'reindex', 'agg', 'groupby', 'reindex', 'set_index', 'drop_duplicates', 'copy', 'transform', 'drop', 'isna', 'isna', 'transform', 'clip', 'array', 'abs', 'mean', 'head', 'reset_index', 'sort_values', 'copy', 'transform', 'drop', 'isna', 'isna', 'transform', 'clip', 'to_csv', 'hist', 'hist', 'unique', 'corr', 'min', 'max', 'unique', 'unique', 'unique'] ['pandas', 'numpy', 'seaborn', 'warnings', 'scipy.stats'] ['pyplot', 'Fore', 'Back', 'Style', 'GroupKFold', 'OneHotEncoder', 'OrdinalEncoder', 'StandardScaler', 'enable_iterative_imputer', 'SimpleImputer', 'IterativeImputer', 'KNNImputer', 'RandomForestClassifier', 'ExtraTreesClassifier', 'make_pipeline', 'LogisticRegression', 'LinearRegression', 'QuadraticDiscriminantAnalysis', 'LinearDiscriminantAnalysis', 'roc_auc_score', 'roc_curve', 'LGBMClassifier', 'early_stopping', 'log_evaluation']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'array'], 'numpy': ['mean', 'any', 'max', 'abs', 'sum', 'min', 'unique', 'clip', 'array', 'copy'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'colorama': [], 'scipy': [], 'sklearn': [], 'lightgbm': [], '=': [], '[]': [], 'pd': [], 'index=features2)': [], 'importance_df': [], 'features2': [], 'ascending=False)': []} axis_0: 0, axis_1: 5
tps-sep-what-am-i-doing.py : ['read_csv', 'set_index', 'head', 'read_csv', 'set_index', 'head', 'sum', 'isna', 'astype', 'std', 'isna', 'median', 'std', 'min', 'abs', 'max', 'abs', 'sem', 'sum', 'isna', 'astype', 'std', 'isna', 'median', 'std', 'min', 'abs', 'max', 'abs', 'sem', 'head', 'get', 'mean', 'get', 'median', 'get', 'mode', 'fillna', 'fillna', 'head', 'transform', 'transform', 'copy', 'copy', 'concat', 'copy', 'copy', 'copy', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'read_csv', 'to_csv', 'head', 'to_csv', 'head', 'to_csv', 'head'] ['warnings', 'gc', 'numpy', 'pandas'] ['tqdm', 'KMeans', 'roc_auc_score', 'StratifiedKFold', 'QuantileTransformer', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'LogisticRegression']Dict:{'warnings': [], 'gc': [], 'numpy': ['mean', 'median', 'std', 'max', 'abs', 'sum', 'min', 'array', 'copy'], 'pandas': ['concat', 'array', 'isna', 'read_csv'], 'tqdm': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 1, axis_1: 16
tps-06-eda-mljar-automl-detailed-optuna.py : ['read_csv', 'read_csv', 'unique', 'describe', 'describe', 'applymap', 'describe', 'describe', 'concat', 'drop', 'reset_index', 'nunique', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'boxplot', 'sample', 'astype', 'drop', 'map', 'sample', 'drop', 'sample', 'to_numpy', 'drop', 'to_numpy', 'drop', 'read_csv', 'to_csv', 'describe', 'drop'] ['numpy', 'pandas', 'matplotlib.pyplot', 'itertools', 'seaborn', 'plotly.express', 'umap'] ['AutoML', 'TSNE', 'StandardScaler', 'LinearDiscriminantAnalysis']Dict:{'numpy': ['mean', 'unique'], 'pandas': ['concat', 'unique', 'read_csv'], 'matplotlib': ['boxplot'], 'itertools': [], 'seaborn': ['boxplot'], 'supervised': [], 'plotly': [], 'sklearn': [], 'umap': []} axis_0: 0, axis_1: 1
ieee-fraud-detection-aggregating-lightgbm-models.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'add', 'read_csv', 'to_csv', 'head', 'info', 'read_csv', 'join', 'concat', 'reset_index', 'head', 'corr', 'describe', 'corr', 'bool', 'corr', 'sum', 'to_csv', 'median', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'glob', 'os', 'warnings', 'warnings'] ['rankdata', 'gmean', 'check_output']Dict:{'scipy': [], 'numpy': ['median', 'info', 'sum', 'add'], 'pandas': ['concat', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'glob': [], 'subprocess': [], 'os': [], 'warnings': []} axis_0: 0, axis_1: 2
feature-engineering-model-tuning.py : ['join', 'read_csv', 'read_csv', 'concat', 'unique', 'apply', 'astype', 'astype', 'replace', 'astype', 'replace', 'astype', 'replace', 'astype', 'astype', 'query', 'astype', 'agg', 'groupby', 'join', 'drop', 'drop', 'drop', 'fillna', 'fillna', 'drop'] ['numpy', 'pandas', 'datetime', 'gc', 'numpy', 'os', 'pandas', 'lightgbm', 'xgboost', 'category_encoders', 'lightgbm', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'os', 'lightgbm'] ['tqdm', 'RandomForestClassifier', 'SVC', 'LabelEncoder', 'f1_score', 'KFold', 'RepeatedKFold', 'GroupKFold', 'compute_sample_weight', 'RandomUnderSampler', 'ADASYN', 'CatBoostClassifier', 'LabelEncoder']Dict:{'numpy': ['unique'], 'pandas': ['concat', 'unique', 'read_csv'], 'datetime': [], 'gc': [], 'os': ['replace'], 'tqdm': [], 'lightgbm': [], 'xgboost': [], 'sklearn': [], 'imblearn': [], 'category_encoders': [], 'catboost': [], 'matplotlib': [], 'seaborn': []} axis_0: 1, axis_1: 4
data-science-in-2021-adaptation-or-adoption.py : ['value_counts', 'replace', 'update', 'to_dict', 'std', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'reset_index', 'agg', 'groupby', 'rename', 'items', 'items', 'merge', 'apply', 'unique', 'items', 'to_dict', 'value_counts', 'merge', 'read_csv', 'isin', 'isin', 'isin', 'isin', 'isna', 'apply', 'reset_index', 'value_counts', 'sort_values', 'apply', 'to_dict', 'value_counts', 'reset_index', 'agg', 'groupby', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'unique', 'max', 'max', 'fillna', 'apply', 'fillna', 'apply', 'read_csv', 'to_dict', 'value_counts', 'reset_index', 'agg', 'groupby', 'apply', 'apply', 'merge', 'sort_values', 'fillna', 'fillna', 'astype', 'astype', 'isin', 'value_counts', 'isna', 'to_dict', 'value_counts', 'reset_index', 'agg', 'groupby', 'apply', 'apply', 'apply', 'sort_values', 'apply', 'read_csv', 'apply', 'reset_index', 'agg', 'groupby', 'isin', 'merge', 'rename', 'reset_index', 'value_counts', 'sort_values', 'rename', 'reset_index', 'agg', 'groupby', 'apply', 'reset_index', 'agg', 'groupby', 'isin', 'merge', 'rename', 'reset_index', 'value_counts', 'sort_values', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'abs', 'head', 'sort_values', 'apply', 'iterrows', 'apply', 'apply', 'apply', 'unique', 'max', 'max', 'fillna', 'apply', 'fillna', 'apply', 'read_csv', 'astype', 'apply', 'reset_index', 'sort_values', 'agg', 'groupby', 'apply', 'merge', 'isna', 'read_csv', 'apply', 'isin', 'apply', 'isin', 'apply'] ['plotly.graph_objects', 'pandas', 'numpy', 'warnings'] ['HTML']Dict:{'IPython': [], 'plotly': [], 'pandas': ['isna', 'read_csv', 'value_counts', 'unique', 'merge'], 'numpy': ['max', 'abs', 'unique', 'isin', 'std'], 'warnings': []} axis_0: 0, axis_1: 0
m5-all-feature-engineering-ready-to-use.py : ['round', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'merge', 'concat', 'update', 'read_csv', 'melt', 'reset_index', 'read_csv', 'read_csv', 'merge', 'merge', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'read_csv', 'drop_duplicates', 'merge', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'mean', 'transform', 'groupby', 'mean', 'head', 'read_csv', 'merge', 'sum', 'isnull', 'info', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'min', 'astype', 'apply', 'astype', 'read_csv', 'info', 'merge', 'sum', 'multiply', 'drop', 'info', 'astype', 'min', 'drop', 'sum', 'isnull', 'astype', 'transform', 'groupby', 'shift', 'astype', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'concat', 'sum', 'isnull', 'sum', 'isnull', 'astype', 'unique', 'info', 'sum', 'isnull', 'to_pickle'] ['sys', 'lightgbm', 'os', 'sys', 'gc', 'time', 'warnings', 'pickle', 'random', 'pandas', 'numpy'] ['datetime', 'timedelta', 'ceil', 'pyplot', 'preprocessing']Dict:{'sys': [], '': [], 'lightgbm': [], 'os,': [], 'sys,': [], 'gc,': [], 'time,': [], 'warnings,': [], 'pickle,': [], 'random': [], 'math': [], 'matplotlib': [], 'pandas': ['to_pickle', 'read_csv', 'isnull', 'melt', 'concat', 'unique', 'merge', 'to_datetime'], 'numpy': ['mean', 'max', 'sum', 'round', 'min', 'unique', 'info', 'multiply'], 'sklearn': []} axis_0: 0, axis_1: 10
creating-new-features-from-imp-features.py : ['read_csv', 'head', 'drop', 'describe', 'nunique', 'select_dtypes', 'select_dtypes', 'apply', 'abs', 'max', 'min', 'apply', 'std', 'median', 'mean', 'isnull', 'round', 'value_counts', 'hist', 'boxplot', 'boxplot', 'corr', 'corr', 'corr', 'corr', 'copy', 'max', 'drop', 'head', 'to_csv', 'describe', 'boxplot', 'quantile', 'quantile', 'copy', 'value_counts', 'copy', 'sum', 'copy', 'concat', 'to_csv', 'read_csv', 'copy', 'isin', 'copy', 'value_counts', 'copy', 'round', 'sum', 'copy', 'value_counts', 'copy', 'round', 'sum', 'isin', 'copy', 'drop', 'copy', 'isin', 'reset_index', 'astype', 'replace', 'sort_values', 'sort_values', 'sort_values', 'copy', 'drop', 'copy', 'copy', 'mean', 'mean', 'mean', 'mean', 'melt', 'read_csv', 'copy', 'drop', 'read_csv', 'isin', 'head', 'read_csv', 'head', 'to_csv'] ['numpy', 'pandas', 'scipy.stats', 'matplotlib.pyplot', 'seaborn', 'xgboost'] ['RandomForestRegressor', 'OrdinalEncoder', 'GridSearchCV', 'KFold', 'cross_validate', 'learning_curve', 'r2_score', 'mean_absolute_error', 'mean_squared_error', 'RFE', 'ColumnTransformer', 'Pipeline', 'variance_inflation_factor']Dict:{'numpy': ['mean', 'median', 'quantile', 'max', 'abs', 'sum', 'round', 'min', 'isin', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'melt', 'concat', 'value_counts'], 'scipy': ['describe'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': [], 'statsmodels': []} axis_0: 2, axis_1: 3
tps-mar21-xgb-catboost-lgbm-optuna-lb-14.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'describe', 'mean', 'mean', 'mean', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'warnings', 'optuna'] ['train_test_split', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'roc_auc_score', 'cross_val_score', 'make_pipeline', 'StandardScaler', 'plot_optimization_history', 'plot_param_importances', 'KFold', 'StratifiedKFold']Dict:{'pandas': ['read_csv'], 'numpy': ['mean'], 'sklearn': [], 'warnings': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'optuna': []} axis_0: 0, axis_1: 0
titanic-lgbm-with-advanced-feature-engineering.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'describe', 'concat', 'median', 'groupby', 'median', 'reset_index', 'apply', 'groupby', 'fillna', 'median', 'fillna', 'median', 'groupby', 'fillna', 'apply', 'notnull', 'transpose', 'rename', 'drop', 'count', 'groupby', 'sum', 'transpose', 'transpose', 'rename', 'drop', 'count', 'groupby', 'sum', 'transpose', 'replace', 'replace', 'replace', 'value_counts', 'drop', 'qcut', 'qcut', 'transform', 'groupby', 'replace', 'map', 'replace', 'replace', 'unique', 'unique', 'unique', 'unique', 'median', 'groupby', 'median', 'groupby', 'mean', 'nunique', 'concat', 'concat', 'concat', 'drop', 'head', 'drop', 'drop', 'astype', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'string', 'warnings', 'os'] ['OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'roc_curve', 'auc', 'accuracy_score', 'StratifiedKFold', 'train_test_split', 'LGBMClassifier']Dict:{'numpy': ['transpose', 'median', 'mean', 'sum', 'unique'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'notnull', 'qcut'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'lightgbm': [], 'string': [], 'warnings': [], 'os': ['rename', 'replace']} axis_0: 2, axis_1: 4
lightgbm-keras-and-4-kfold.py : ['join', 'read_csv', 'reset_index', 'head', 'mean', 'rolling', 'std', 'rolling', 'min', 'rolling', 'max', 'rolling', 'shift', 'mean', 'rolling', 'shift', 'std', 'rolling', 'shift', 'min', 'rolling', 'shift', 'max', 'rolling', 'shift', 'abs', 'min', 'rolling', 'shift', 'shift', 'quantile', 'rolling', 'shift', 'quantile', 'rolling', 'shift', 'quantile', 'rolling', 'shift', 'quantile', 'rolling', 'shift', 'quantile', 'rolling', 'apply', 'mean', 'abs', 'diff', 'fillna', 'mean', 'ewm', 'std', 'ewm', 'fillna', 'concat', 'reset_index', 'copy', 'reset_index', 'copy', 'concat', 'head', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'reset_index', 'head', 'sum', 'read_csv', 'rename', 'read_csv', 'reset_index', 'head', 'array', 'array', 'max', 'to_csv'] ['numpy', 'pandas', 'os', 'random', 'gc', 'matplotlib.pyplot', 'seaborn', 'keras.layers', 'lightgbm', 'xgboost', 'pickle', 'pandas'] ['signal', 'tqdm', 'KFold', 'train_test_split', 'StandardScaler', 'confusion_matrix', 'f1_score', 'plot_confusion_matrix', 'Model', 'Adagrad']Dict:{'numpy': ['mean', 'quantile', 'max', 'abs', 'sum', 'array', 'min', 'diff', 'std', 'copy'], 'pandas': ['concat', 'array', 'read_csv'], 'os': ['rename'], 'random': [], 'gc': [], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'tqdm': [], 'sklearn': [], 'keras': [], 'lightgbm': [], 'xgboost': [], 'pickle': []} axis_0: 2, axis_1: 4
optiver-realized-tabnet-baseline.py : ['read_pickle', 'fillna', 'mean', 'drop', 'transform', 'reset_index', 'sample', 'cut', 'drop', 'any', 'mean', 'reset_index', 'reset_index', 'drop', 'transform', 'drop', 'transform', 'mean', 'drop', 'sort_values', 'diff', 'sum', 'unique', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'read_parquet', 'apply', 'groupby', 'apply', 'groupby', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'apply', 'drop', 'read_parquet', 'apply', 'groupby', 'sum', 'mean', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'add_prefix', 'apply', 'drop', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'drop', 'merge', 'concat', 'mean', 'drop', 'drop', 'astype', 'astype', 'join', 'unique', 'merge', 'drop', 'fillna', 'mean', 'drop', 'transform', 'transform', 'squeeze', 'mean', 'to_csv'] ['os', 'glob', 'pandas', 'numpy', 'scipy', 'lightgbm', 'warnings', 'pickle', 'matplotlib.pyplot', 'seaborn', 'torch', 'torch.nn', 'torch.optim', 'torch.nn.functional', 'random', 'pickle', 'pickle', 'torch', 'pandas', 'numpy', 'os', 'seaborn', 'matplotlib.pyplot'] ['Parallel', 'delayed', 'KFold', 'ReduceLROnPlateau', 'StandardScaler', 'LabelEncoder', 'datasets', 'model_selection', 'TabNetPretrainer', 'TabNetRegressor', 'Metric', 'LabelEncoder', 'mean_squared_error', 'Path']Dict:{'os': [], 'glob': [], 'joblib': [], 'pandas': ['read_csv', 'cut', 'concat', 'read_parquet', 'read_pickle', 'unique', 'merge'], 'numpy': ['mean', 'squeeze', 'any', 'sum', 'unique', 'diff', 'std'], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'warnings': [], 'pickle': [], 'matplotlib': [], 'seaborn': [], 'torch': ['mean', 'squeeze', 'any', 'sum', 'concat', 'unique', 'diff', 'std'], 'random': ['sample'], 'pytorch_tabnet': [], 'pathlib': []} axis_0: 2, axis_1: 2
xgb-baseline-advanced-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'set_index', 'read_csv', 'info', 'info', 'info', 'info', 'info', 'sum', 'isna', 'sum', 'isna', 'boxplot', 'min', 'max', 'boxplot', 'boxplot', 'min', 'max', 'boxplot', 'reset_index', 'unique', 'unique', 'map', 'astype', 'map', 'apply', 'unique', 'sum', 'groupby', 'apply', 'sum', 'groupby', 'head', 'unique', 'unique', 'astype', 'apply', 'apply', 'sum', 'groupby', 'apply', 'map', 'read_csv', 'replace', 'replace', 'fillna', 'items', 'join', 'items', 'join', 'concat', 'reset_index', 'drop_duplicates', 'sub', 'replace', 'apply', 'apply', 'apply', 'apply', 'replace', 'sum', 'groupby', 'apply', 'drop', 'sum', 'groupby', 'head', 'drop', 'head', 'array', 'unique', 'unique', 'astype', 'astype', 'astype', 'sort_values', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'clip', 'fillna', 'astype', 'astype', 'astype', 'concat', 'fillna', 'merge', 'merge', 'merge', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'copy', 'merge', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'apply', 'astype', 'fillna', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'astype', 'drop', 'astype', 'map', 'transform', 'groupby', 'transform', 'groupby', 'any', 'isnull', 'fillna', 'info', 'to_pickle', 'read_pickle', 'set_index', 'read_csv', 'drop', 'drop', 'drop', 'clip', 'clip', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'time', 'sys', 'gc', 'pickle', 'os', 're', 'os', 'gc', 'pickle', 'time', 'pandas', 'numpy', 'matplotlib.pylab'] ['product', 'LabelEncoder', 'XGBRegressor', 'plot_importance', 'Counter', 'itemgetter', 'XGBRegressor', 'rcParams', 'plot_importance']Dict:{'numpy': ['any', 'max', 'sum', 'min', 'unique', 'clip', 'info', 'array', 'copy'], 'pandas': ['to_pickle', 'isna', 'read_csv', 'isnull', 'concat', 'read_pickle', 'unique', 'array', 'merge'], 'itertools': [], 'sklearn': ['transform'], 'seaborn': ['boxplot'], 'matplotlib': ['items', 'copy'], 'xgboost': [], 'time': [], 'sys': [], 'gc': [], 'pickle': [], 'os': ['replace'], 're': ['sub'], 'collections': ['items', 'copy'], 'operator': []} axis_0: 0, axis_1: 20
ps3e16-eda-feature-engineering-ensemble.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'drop', 'concat', 'reset_index', 'head', 'count', 'count', 'mean', 'median', 'mean', 'median', 'hist', 'hist', 'min', 'max', 'std', 'std', 'min', 'max', 'std', 'std', 'nunique', 'max', 'max', 'max', 'min', 'min', 'min', 'astype', 'corr', 'where', 'min', 'where', 'min', 'where', 'where', 'where', 'where', 'where', 'min', 'min', 'min', 'nunique', 'transform', 'transform', 'concat', 'transform', 'min', 'transform', 'transform', 'min', 'transform', 'transform', 'fillna', 'fillna', 'transform', 'reset_index', 'concat', 'concat', 'mean', 'mean', 'mean', 'mean', 'round', 'round', 'round', 'value_counts', 'items', 'abs', 'replace', 'concat', 'get_dummies', 'value_counts', 'idxmin', 'drop', 'concat', 'drop', 'duplicated', 'reset_index', 'drop', 'sort_values', 'mean', 'groupby', 'map', 'map', 'to_dict', 'value_counts', 'map', 'map', 'to_dict', 'value_counts', 'keys', 'replace', 'replace', 'nunique', 'mean', 'mean', 'mean', 'corr', 'drop', 'drop', 'transform', 'array', 'array', 'mean', 'groupby', 'to_dict', 'map', 'map', 'mean', 'mean', 'mean', 'mean', 'corr', 'nunique', 'abs', 'corr', 'transform', 'transform', 'concat', 'concat', 'array', 'array', 'mean', 'groupby', 'to_dict', 'map', 'map', 'mean', 'drop', 'drop', 'transform', 'drop', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'array', 'array', 'keys', 'items', 'round', 'keys', 'round', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'read_csv', 'round', 'to_csv'] ['sys', 'sklearn', 'numpy', 'os', 'pandas', 'matplotlib.pyplot', 'missingno', 'seaborn', 'random', 'gc', 'xgboost', 'statsmodels.api', 'math', 'seaborn', 'optuna', 'xgboost', 'lightgbm', 'warnings', 'numpy', 'matplotlib.pyplot'] ['tqdm', 'tqdm', 'PrettyTable', 'deepcopy', 'partial', 'combinations', 'KMeans', 'KElbowVisualizer', 'uniform', 'f_classif', 'LabelEncoder', 'StandardScaler', 'metrics', 'GridSearchCV', 'RandomizedSearchCV', 'train_test_split', 'mean_squared_error', 'mean_squared_log_error', 'mean_absolute_error', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'FunctionTransformer', 'PCA', 'TruncatedSVD', 'SimpleImputer', 'ColumnTransformer', 'Pipeline', 'stats', 'variance_inflation_factor', 'BaseEstimator', 'TransformerMixin', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StratifiedKFold', 'KFold', 'PassiveAggressiveRegressor', 'ARDRegression', 'RidgeCV', 'ElasticNetCV', 'TheilSenRegressor', 'RANSACRegressor', 'HuberRegressor', 'HistGradientBoostingRegressor', 'ExtraTreesRegressor', 'GradientBoostingRegressor', 'RandomForestRegressor', 'DecisionTreeRegressor', 'LinearRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool', 'KNeighborsRegressor']Dict:{'sys': [], 'sklearn': [], 'numpy': ['mean', 'median', 'max', 'abs', 'array', 'where', 'round', 'min', 'std', 'copy'], 'os': ['replace'], 'pandas': ['read_csv', 'concat', 'value_counts', 'get_dummies', 'array'], 'matplotlib': ['hist'], 'missingno': [], 'tqdm': [], 'prettytable': ['copy'], 'seaborn': [], 'copy': [], 'functools': [], 'itertools': [], 'yellowbrick': [], 'random': [], 'gc': [], 'xgboost': [], 'scipy': [], 'statsmodels': [], 'math': [], 'optuna': [], 'lightgbm': [], 'category_encoders': [], 'imblearn': [], 'catboost': [], 'warnings': []} axis_0: 6, axis_1: 6
tensorflow-1vs1.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'copy', 'drop', 'copy', 'astype', 'copy', 'copy', 'copy', 'keys', 'drop', 'transform', 'drop', 'transform', 'drop', 'transform', 'array', 'drop', 'get_dummies', 'drop', 'transform', 'drop', 'get_dummies', 'drop', 'transform', 'drop', 'get_dummies', 'drop', 'transform', 'astype', 'drop', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'tensorflow', 'itertools', 'os', 'tflearn'] ['pyplot', 'KernelPCA', 'classification_report', 'PolynomialFeatures']Dict:{'numpy': ['array', 'copy'], 'pandas': ['get_dummies', 'array', 'read_csv'], 'seaborn': [], 'tensorflow': [], 'itertools': [], 'os': [], 'tflearn': [], 'matplotlib': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 14
wavenet-with-1-more-feature.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'agg', 'groupby', 'astype', 'mean', 'std', 'fillna', 'shift', 'groupby', 'fillna', 'shift', 'groupby', 'replace', 'replace', 'mean', 'concat', 'fillna', 'fillna', 'unique', 'unique', 'concat', 'get_dummies', 'astype', 'array', 'apply', 'groupby', 'array', 'apply', 'groupby', 'array', 'apply', 'groupby', 'astype', 'to_csv'] ['tensorflow', 'pandas', 'numpy', 'random', 'tensorflow_addons', 'gc', 'warnings', 'os'] ['Conv1D', 'Input', 'Dense', 'Add', 'Multiply', 'Callback', 'LearningRateScheduler', 'categorical_crossentropy', 'Adam', 'backend', 'losses', 'models', 'optimizers', 'GroupKFold', 'f1_score']Dict:{'tensorflow': [], 'pandas': ['read_csv', 'concat', 'get_dummies', 'unique', 'array'], 'numpy': ['mean', 'array', 'unique', 'std'], 'random': [], 'tensorflow_addons': [], 'gc': [], 'sklearn': [], 'warnings': [], 'os': ['replace']} axis_0: 0, axis_1: 1
eda-feat-engineering-with-xgboosting.py : ['read_csv', 'info', 'nunique', 'head', 'min', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'value_counts', 'value_counts', 'mean', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'astype', 'astype', 'astype', 'shift', 'groupby', 'fillna', 'mean', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'unique', 'join', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'select_dtypes', 'drop', 'fillna', 'mean', 'sort_values'] ['subprocess', 'matplotlib.pyplot', 'seaborn', 'numpy', 'pandas', 'gc', 'xgboost'] ['preprocessing']Dict:{'subprocess': [], 'matplotlib': [], 'seaborn': [], 'numpy': ['mean', 'info', 'min', 'unique'], 'pandas': ['merge', 'unique', 'read_csv', 'value_counts'], 'gc': [], 'xgboost': [], 'sklearn': []} axis_0: 0, axis_1: 2
picking-the-best-model-a-whirlwind-tour-of-model.py : ['read_csv', 'read_csv', 'head', 'drop', 'drop', 'drop', 'drop', 'reset_index', 'reset_index', 'drop', 'reset_index', 'concat', 'update', 'mean', 'isnull', 'items', 'apply', 'astype', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'transform', 'groupby', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'update', 'fillna', 'update', 'fillna', 'items', 'sort_values', 'apply', 'head', 'astype', 'astype', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'assign', 'assign', 'reset_index', 'get_dummies', 'head', 'duplicated'] ['numpy', 'pandas', 'datetime', 'random', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'warnings', 'os', 'wandb', 'keras'] ['RandomForestRegressor', 'GradientBoostingRegressor', 'AdaBoostRegressor', 'BaggingRegressor', 'KernelRidge', 'Ridge', 'RidgeCV', 'ElasticNet', 'ElasticNetCV', 'SVR', 'StackingCVRegressor', 'LGBMRegressor', 'XGBRegressor', 'Sequential', 'Dense', 'KerasRegressor', 'skew', 'norm', 'boxcox1p', 'boxcox_normmax', 'GridSearchCV', 'KFold', 'cross_val_score', 'train_test_split', 'mean_squared_error', 'OneHotEncoder', 'LabelEncoder', 'make_pipeline', 'scale', 'StandardScaler', 'RobustScaler', 'PCA', 'WandbCallback', 'cross_val_score', 'svm', 'Ridge', 'RidgeCV', 'XGBRegressor']Dict:{'numpy': ['mean', 'median'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'datetime': [], 'random': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'mlxtend': [], 'lightgbm': [], 'xgboost': ['apply'], 'keras': [], 'scipy': [], 'warnings': [], 'os': [], 'wandb': []} axis_0: 0, axis_1: 4
tps-feb-2021-lightgbm-tuned.py : ['read_csv', 'read_csv', 'transform', 'transform', 'to_csv'] ['pandas', 'numpy'] ['LabelEncoder', 'KFold', 'mean_squared_error', 'LGBMRegressor']Dict:{'pandas': ['read_csv'], 'numpy': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 0
smart-home-s-temperature-evalml.py : ['read_csv', 'read_csv', 'head', 'head', 'info', 'copy', 'to_datetime', 'drop', 'transform', 'reset_index', 'nunique', 'drop', 'replace', 'replace', 'replace', 'drop', 'fillna', 'fillna', 'replace', 'rename', 'sub', 'rename', 'sub', 'head', 'copy', 'pop', 'mean', 'subtract', 'read_csv', 'head', 'to_csv', 'head'] ['numpy', 'pandas', 're', 'math', 'pandas'] ['FeatureEngineering_DateTime', 'train_test_split', 'AutoMLSearch', 'r2_score', 'mean_squared_error', 'mean_absolute_error']Dict:{'numpy': ['mean', 'info', 'subtract', 'copy'], 'pandas': ['to_datetime', 'read_csv'], 'fast_ml': [], 're': ['sub'], 'sklearn': [], 'evalml': [], 'math': []} axis_0: 0, axis_1: 3
global-forecasting-covid-19-random-forest.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'tail', 'apply', 'replace', 'astype', 'head', 'drop', 'dropna', 'sum', 'isnull', 'apply', 'replace', 'astype', 'sum', 'isnull', 'head', 'read_csv', 'concat', 'head', 'astype', 'astype', 'describe', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'pandas'] ['RandomForestClassifier']Dict:{'numpy': ['sum'], 'pandas': ['concat', 'read_csv', 'isnull'], 'os': ['replace'], 'sklearn': ['apply']} axis_0: 0, axis_1: 2
tps-dec-feat-eng-pseudolab-clean-version.py : ['read_csv', 'read_csv', 'head', 'read_csv', 'concat', 'drop', 'reset_index', 'drop', 'clip', 'clip', 'abs', 'abs', 'abs', 'abs', 'astype', 'astype', 'astype', 'astype', 'clip', 'clip', 'sum', 'sum', 'sum', 'sum', 'drop', 'drop', 'drop', 'drop', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'drop', 'transform', 'mean', 'concat', 'sort_values', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'statistics', 'time'] ['combinations', 'StratifiedKFold', 'StandardScaler', 'LabelEncoder', 'accuracy_score', 'keras', 'layers', 'callbacks']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'min', 'clip'], 'pandas': ['concat', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'itertools': [], 'statistics': ['mean'], 'time': [], 'sklearn': [], 'tensorflow': []} axis_0: 3, axis_1: 11
nlp-with-disaster-tweets-using-lstm.py : ['join', 'read_csv', 'head', 'head', 'isnull', 'value_counts', 'nunique', 'value_counts', 'value_counts', 'value_counts', 'head', 'sort_values', 'mean', 'groupby', 'head', 'sort_values', 'mean', 'groupby', 'value_counts', 'apply', 'head', 'describe', 'hist', 'apply', 'hist', 'join', 'apply', 'head', 'sub', 'sub', 'join', 'keys', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'apply', 'head', 'apply', 'head', 'add', 'add', 'add', 'add', 'round', 'round', 'read_csv', 'head', 'apply', 'apply', 'head', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'round', 'read_csv', 'astype', 'round', 'to_csv', 'describe', 'value_counts'] ['numpy', 'pandas', 'os', 'seaborn', 'matplotlib.pyplot', 'string', 're', 'nltk', 'tensorflow', 'warnings'] ['stopwords', 'sent_tokenize', 'word_tokenize', 'WordCloud', 'STOPWORDS', 'train_test_split', 'keras', 'Tokenizer', 'PorterStemmer', 'WordNetLemmatizer', 'pad_sequences', 'optimizers', 'Sequential', 'Dense', 'Embedding', 'LSTM', 'Dropout', 'plot_model', 'metrics', 'reduce', 'confusion_matrix', 'classification_report']Dict:{'numpy': ['mean', 'round', 'add'], 'pandas': ['value_counts', 'read_csv', 'isnull'], 'os': [], 'seaborn': [], 'matplotlib': ['hist'], 'string': [], '': [], 're': ['sub'], 'nltk': [], 'wordcloud': [], 'sklearn': [], 'tensorflow': [], 'functools': [], 'warnings': []} axis_0: 0, axis_1: 0
fast-ai-machine-learning-lesson-1.py : ['read_csv', 'tail', 'describe', 'drop', 'head', 'sort_index', 'sum', 'isnull', 'to_feather', 'read_feather', 'copy', 'copy', 'mean', 'stack', 'mean', 'mean'] [] ['*', '*', 'DataFrameSummary', 'RandomForestRegressor', 'RandomForestClassifier', 'display', 'metrics']Dict:{'fastai': [], 'pandas_summary': [], 'sklearn': [], 'IPython': []} axis_0: 1, axis_1: 1
eda-with-r3-id.py : ['read_csv', 'read_csv', 'head', 'describe', 'sum', 'isnull', 'info', 'nunique', 'hist', 'read_csv', 'corr', 'reset_index', 'value_counts', 'sum', 'reset_index', 'value_counts', 'copy', 'sort_values', 'drop_duplicates', 'head', 'tail', 'map', 'agg', 'groupby', 'read_csv', 'head', 'describe', 'info', 'nunique', 'read_csv', 'head', 'describe', 'dropna', 'equals', 'read_csv', 'head'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'warnings', 'missingno'] []Dict:{'pandas': ['isnull', 'read_csv', 'value_counts'], 'numpy': ['info', 'sum', 'copy'], 'seaborn': [], 'matplotlib': ['hist'], 'warnings': [], 'missingno': []} axis_0: 0, axis_1: 0
openvaccine-eda-feature-engineering-and-modelling.py : ['read_json', 'read_json', 'read_csv', 'nunique', 'head', 'info', 'value_counts', 'value_counts', 'head', 'unique', 'head', 'hist', 'sort_values', 'unique', 'head', 'head', 'reset_index', 'mean', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'head', 'head', 'drop', 'merge', 'head', 'fillna', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'os', 'numpy', 'pandas', 'math', 'random'] ['Counter', 'RepeatedKFold', 'train_test_split', 'mean_squared_error']Dict:{'pandas': ['read_csv', 'read_json', 'value_counts', 'unique', 'merge'], 'matplotlib': ['hist'], 'os': [], 'numpy': ['mean', 'info', 'unique'], 'collections': [], 'sklearn': [], 'math': [], 'random': []} axis_0: 0, axis_1: 1
eda-feature-engineering-ensemble-model.py : ['read_csv', 'set_index', 'head', 'value_counts', 'value_counts', 'sum', 'isna', 'to_dict', 'value_counts', 'map', 'transpose', 'describe', 'value_counts', 'corr', 'head', 'get_dummies', 'get_dummies', 'drop', 'to_dict', 'value_counts', 'map', 'head', 'astype', 'head', 'set_index', 'apply', 'sort_values', 'items', 'drop', 'sort_values', 'sort_values', 'read_csv', 'set_index', 'get_dummies', 'get_dummies', 'drop', 'head', 'drop', 'to_dict', 'value_counts', 'map', 'map', 'fillna', 'astype', 'astype', 'copy', 'copy', 'transform', 'items', 'items', 'items', 'items', 'transform', 'transform', 'transform', 'transform', 'drop', 'drop', 'read_csv', 'set_index', 'get_dummies', 'get_dummies', 'drop', 'drop', 'map', 'fillna', 'transform', 'transform', 'transform', 'transform', 'astype', 'head', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'optuna', 'warnings'] ['MinMaxScaler', 'PowerTransformer', 'RobustScaler', 'StandardScaler', 'variance_inflation_factor', 'HistGradientBoostingClassifier', 'XGBClassifier', 'CatBoostClassifier', 'LGBMClassifier', 'roc_auc_score', 'RepeatedStratifiedKFold', 'train_test_split', 'confusion_matrix', 'ConfusionMatrixDisplay', 'VotingClassifier']Dict:{'pandas': ['isna', 'get_dummies', 'read_csv', 'value_counts'], 'numpy': ['transpose', 'sum', 'copy'], 'matplotlib': [], 'seaborn': [], 'sklearn': ['transform'], 'statsmodels': [], 'xgboost': ['apply'], 'catboost': [], 'lightgbm': [], 'optuna': [], 'warnings': []} axis_0: 0, axis_1: 0
rapids-cuml-svc-baseline-lb-0-27-cv-0-35.py : ['read_csv', 'head', 'map', 'mean', 'std', 'min', 'fillna', 'sample', 'stack', 'clip', 'sum', 'sum', 'where', 'sum', 'where', 'hist', 'read_csv', 'head', 'map', 'fillna', 'copy', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'cudf'] ['SVC', 'KFold']Dict:{'pandas': ['read_csv'], 'matplotlib': ['hist'], 'cudf': [], 'cuml': [], 'sklearn': []} axis_0: 0, axis_1: 1
feedback-prize-feature-engineering.py : ['read_csv', 'read_csv', 'head', 'head', 'count', 'sub', 'apply', 'apply', 'unique', 'unique', 'unique', 'keys', 'fillna', 'fillna', 'apply', 'mean', 'apply', 'apply', 'apply', 'max', 'apply', 'apply', 'apply', 'min', 'apply', 'apply', 'apply', 'median', 'apply', 'apply', 'apply', 'std', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'to_csv', 'to_csv'] ['pandas', 'numpy', 're', 'seaborn', 'matplotlib.pyplot', 'xgboost', 'spacy', 'nltk'] ['MultiOutputRegressor', 'LGBMRegressor', 'CatBoostRegressor', 'TextBlob', 'RegexpTokenizer', 'word_tokenize', 'stopwords', 'Counter', 'Ridge', 'LinearRegression', 'Normalizer', 'tqdm', 'SentimentIntensityAnalyzer', 'punctuation', 'mean_squared_error', 'mean_absolute_error', 'preprocessing', 'Counter']Dict:{'pandas': ['unique', 'read_csv'], 'numpy': ['mean', 'median', 'max', 'min', 'unique', 'std'], 're': ['sub'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'lightgbm': [], 'catboost': [], 'xgboost': [], 'textblob': [], 'spacy': [], 'nltk': [], 'collections': ['keys'], 'tqdm': [], 'string': ['count']} axis_0: 0, axis_1: 0
lb-0-694-tconv-with-4-features-training-part.py : ['sum', 'isna', 'sort_values', 'sum', 'sort_values', 'head', 'copy', 'apply', 'groupby', 'fillna', 'diff', 'fillna', 'diff', 'cumsum', 'groupby', 'cumsum', 'reset_index', 'drop', 'drop', 'map', 'groupby', 'read_parquet', 'read_csv', 'unique', 'apply', 'groupby', 'fillna', 'diff', 'clip', 'map', 'astype', 'apply', 'astype', 'apply', 'reset_index', 'sort_values', 'items', 'map', 'reset_index', 'apply', 'groupby', 'map', 'reset_index', 'sort_values', 'rename', 'drop', 'head', 'reset_index', 'apply', 'groupby', 'array', 'apply', 'drop', 'sort_index', 'set_index', 'head', 'unique', 'pad', 'pad', 'stack', 'stack', 'stack', '__init__', '__init__', 'transpose', 'sum', 'std', 'mean', '__init__', 'items', 'astype', 'items', 'items', '__init__', 'eval', 'unique', 'unique', 'unique', 'isin', 'isin', 'read_csv', 'set_index', 'rename', 'sort_index', 'astype'] ['os', 'gc', 'pickle', 'random', 'warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'torch', 'torch.nn', 'torch.nn.functional', 'json'] ['abstractmethod', 'deepcopy', 'Any', 'Callable', 'Dict', 'List', 'Optional', 'Tuple', 'Type', 'Union', 'tqdm', 'f1_score', 'GroupKFold', 'optim', 'Tensor', 'Module', 'Optimizer', 'lr_scheduler', '_LRScheduler', 'Dataset', 'DataLoader', '_Loss', 'AUROC']Dict:{'os': ['rename'], 'gc': [], 'pickle': [], 'random': [], 'warnings': [], 'abc': ['__init__'], 'copy': ['__init__'], 'typing': ['__init__'], 'tqdm': ['__init__'], 'numpy': ['transpose', 'mean', 'stack', 'sum', 'array', 'pad', 'unique', 'clip', 'isin', 'diff', 'std', 'cumsum', 'copy'], 'pandas': ['isna', 'read_csv', 'eval', 'read_parquet', 'unique', 'array'], 'matplotlib': [], 'torch': ['eval', 'apply', '__init__'], 'sklearn': ['__init__'], 'torchmetrics': []} axis_0: 0, axis_1: 7
ts-windows-feature-engineering-ventilators.py : ['round', 'describe', 'head', 'describe', 'value_counts', 'head', 'describe', 'std', 'groupby', 'head', 'transform', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'first', 'groupby', 'first', 'groupby', 'fillna', 'diff', 'groupby', 'reset_index', 'mean', 'ewm', 'groupby', 'reset_index', 'std', 'ewm', 'groupby', 'reset_index', 'corr', 'ewm', 'groupby', 'reset_index', 'agg', 'rolling', 'groupby', 'reset_index', 'agg', 'rolling', 'groupby', 'reset_index', 'agg', 'rolling', 'groupby', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'div', 'astype', 'astype', 'transform', 'groupby', 'transform', 'groupby', 'drop', 'merge', 'get_dummies', 'drop', 'merge', 'get_dummies', 'drop', 'merge', 'get_dummies', 'cumsum', 'groupby', 'cumsum', 'groupby', 'transform', 'groupby', 'fillna', 'concat', 'mean', 'std', 'to_csv'] ['matplotlib.pyplot', 'seaborn', 'os', 'numpy', 'time', 'lightgbm'] ['StandardScaler', 'GroupKFold', 'KFold', 'metrics']Dict:{'sklearn': [], 'matplotlib': [], 'seaborn': [], 'os': [], 'numpy': ['mean', 'round', 'diff', 'std', 'cumsum'], 'time': [], 'lightgbm': []} axis_0: 1, axis_1: 3
eda-feature-engineering-lgb-xgb-cat.py : ['read_csv', 'info', 'read_csv', 'info', 'head', 'head', 'describe', 'describe', 'sum', 'isna', 'sum', 'isna', 'describe', 'astype', 'replace', 'to_datetime', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'map', 'map', 'join', 'get_dummies', 'concat', 'map', 'map', 'join', 'get_dummies', 'concat', 'sort_values', 'value_counts', 'value_counts', 'isnull', 'sort_values', 'isnull', 'read_csv', 'read_csv', 'merge', 'merge', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'fillna', 'fillna', 'fillna', 'fillna', 'sort_values', 'sort_values', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'corr', 'astype', 'replace', 'to_datetime', 'reset_index', 'mean', 'groupby', 'isna', 'merge', 'reset_index', 'mean', 'groupby', 'isna', 'merge', 'apply', 'apply', 'apply', 'apply', 'fillna', 'transform', 'astype', 'fillna', 'apply', 'apply', 'transform', 'groupby', 'isnull', 'isnull', 'apply', 'apply', 'apply', 'apply', 'apply', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'map', 'map', 'join', 'get_dummies', 'concat', 'drop', 'drop', 'fillna', 'read_csv', 'read_csv', 'merge', 'read_csv', 'merge', 'read_csv', 'read_csv', 'astype', 'replace', 'concat', 'apply', 'apply', 'keys', 'keys', 'reset_index', 'concat', 'array', 'items', 'array', 'mean', 'array', 'mean', 'array', 'mean', 'mean', 'array', 'mean', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'json', 'xgboost', 'lightgbm'] ['tqdm', 'datetime', 'LabelEncoder', 'KFold', 'CatBoostRegressor']Dict:{'numpy': ['mean', 'info', 'array', 'sum'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'array', 'merge', 'to_datetime'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'tqdm': [], 'datetime': ['replace'], 'json': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 5
1st-place-public-2nd-place-solution.py : ['read_csv', 'join', 'read_parquet', 'join', 'reset_index', 'concat', 'sum', 'diff', 'diff', 'join', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'merge', 'apply', 'groupby', 'sum', 'mean', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'merge', 'set_index', 'diff', 'unique', 'map', 'concat', 'concat', 'merge', 'merge', 'concat', 'merge', 'read_feather', 'join', 'to_feather', 'read_csv', 'join', 'copy', 'reset_index', 'concat', 'drop', 'mean', 'reset_index', 'unstack', 'pivot', 'fillna', 'mean', 'head', 'pivot', 'fillna', 'mean', 'copy', 'pivot', 'fillna', 'mean', 'cov', 'transpose', 'pivot', 'fillna', 'mean', 'transpose', 'pivot', 'fillna', 'mean', 'cov', 'pivot', 'fillna', 'mean', 'transpose', 'corr', 'array', 'unique', 'array', 'unique', 'rank', 'groupby', 'rank', 'groupby', 'rank', 'groupby', 'rank', 'groupby', 'rank', 'groupby', 'rank', 'groupby', 'rank', 'groupby', 'rank', 'groupby', 'rank', 'groupby', 'copy', 'mean', 'min', 'max', 'std', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'min', 'max', 'std', 'max', 'mean', 'min', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'astype', 'keys', 'merge', 'keys', 'merge', 'rank', 'groupby', 'to_feather', 'reset_index', 'sort_values', 'reset_index', 'sort_values', 'reset_index', 'mean', 'rolling', 'groupby', 'transpose', 'pivot', 'map', 'copy', 'isnull', 'copy', 'isnull', 'diff', 'unique', 'read_parquet', 'set_index', 'reset_index', 'apply', 'groupby', 'set_index', 'fillna', 'mean', 'reset_index', 'reindex', 'eval', 'concat', 'iterrows', 'pivot', 'reset_index', 'reset_index', 'reindex', 'reset_index', 'reindex', 'read_csv', 'join', 'map', 'set_index', 'reset_index', 'sort_values', 'where', 'where', 'reset_index', 'reset_index', 'mean', 'sort_values', 'mean', 'boxplot', 'sum', 'sum', 'to_feather', 'to_feather', 'mean', 'mean', 'mean', 'mean', 'sum', 'count', 'sum', 'count', 'sum', 'count', 'sum', 'count', '__init__', '__init__', 'squeeze', '__init__', 'squeeze', 'astype', 'isnull', 'astype', 'astype', 'transform', 'update', 'eval', 'update', 'eval', 'copy', 'array', 'mean', 'array', 'copy', 'array', 'mean', 'array', 'astype', 'copy', 'join', 'astype', 'copy', 'join', 'astype', 'astype', 'sum', 'keys', 'items', 'clip', 'read_csv', 'join', 'merge', 'fillna', 'to_csv'] ['gc', 'glob', 'os', 'time', 'traceback', 'seaborn', 'pandas', 'numpy', 'matplotlib.pyplot', 'lightgbm', 'gc', 'os', 'random', 'numpy', 'pandas', 'torch', 'torch.nn'] ['contextmanager', 'Enum', 'Dict', 'List', 'Optional', 'Tuple', 'display', 'delayed', 'Parallel', 'LatentDirichletAllocation', 'TSNE', 'GroupKFold', 'NearestNeighbors', 'minmax_scale', 'tqdm_notebook', 'List', 'Tuple', 'Optional', 'Union', 'StandardScaler', 'Dataset', 'DataLoader', 'tqdm', 'Parallel', 'delayed', 'PCA', 'Metric', 'TabNetRegressor', 'CosineAnnealingWarmRestarts']Dict:{'gc': [], 'glob': [], 'os': [], 'time': [], 'traceback': [], 'contextlib': ['__init__'], 'enum': [], 'typing': ['__init__'], 'seaborn': ['boxplot'], 'pandas': ['read_csv', 'isnull', 'eval', 'concat', 'read_parquet', 'read_feather', 'unique', 'array', 'merge', 'pivot'], 'numpy': ['transpose', 'mean', 'squeeze', 'max', 'cov', 'sum', 'array', 'where', 'min', 'unique', 'clip', 'diff', 'std', 'copy'], 'matplotlib': ['boxplot'], 'lightgbm': [], 'IPython': ['__init__'], 'joblib': ['__init__'], 'sklearn': ['transform', '__init__'], 'tqdm': ['update', '__init__'], 'random': [], 'torch': ['__init__'], 'pytorch_tabnet': []} axis_0: 6, axis_1: 5
top-5-football-prob-prediction-lstm-v01.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'filter', 'to_datetime', 'to_datetime', 'where', 'where', 'where', 'isna', 'where', 'where', 'where', 'isna', 'where', 'where', 'where', 'where', 'copy', 'drop', 'drop', 'filter', 'drop', 'filter', 'drop', 'filter', 'drop', 'drop', 'filter', 'drop', 'filter', 'drop', 'filter', 'head', 'wide_to_long', 'wide_to_long', 'reset_index', 'reset_index', 'fillna', 'get_dummies', 'fillna', 'get_dummies', 'head', 'head', 'drop', 'drop', 'transform', 'transform', 'squeeze', 'squeeze', 'squeeze', 'to_csv', 'head'] ['numpy', 'pandas', 'datetime', 'tensorflow'] ['KFold', 'RobustScaler', 'LabelEncoder', 'accuracy_score', 'log_loss', 'plot_model', 'to_categorical', 'Model', 'load_model', 'EarlyStopping', 'ReduceLROnPlateau', 'LearningRateScheduler', 'ExponentialDecay', 'layers']Dict:{'numpy': ['where', 'squeeze', 'copy'], 'pandas': ['isna', 'read_csv', 'wide_to_long', 'get_dummies', 'to_datetime'], 'datetime': [], 'sklearn': [], 'tensorflow': []} axis_0: 0, axis_1: 11
store-sales-forecasting-exploration.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'merge', 'merge', 'merge', 'merge', 'rename', 'merge', 'merge', 'merge', 'merge', 'rename', 'head', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'sort_values', 'to_datetime', 'head', 'reset_index', 'agg', 'groupby', 'sort_values', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'fillna', 'value_counts', 'reset_index', 'agg', 'groupby', 'sort_values', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'plotly.express', 'plotly.graph_objects'] ['make_subplots']Dict:{'numpy': [], 'pandas': ['merge', 'to_datetime', 'read_csv', 'value_counts'], 'plotly': []} axis_0: 0, axis_1: 0
still-trying-to-do-better-than-magic-numbers.py : ['std', 'std', 'mean', 'read_csv', 'read_csv', 'read_csv', 'to_datetime', 'median', 'groupby', 'to_datetime', 'median', 'groupby', 'join', 'apply', 'div', 'apply', 'to_datetime', 'mean', 'apply', 'merge', 'mean', 'mean', 'apply', 'merge', 'read_csv', 'read_csv', 'read_csv', 'value_counts', 'value_counts', 'describe', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'to_dict', 'value_counts', 'map', 'to_dict', 'value_counts', 'map', 'to_dict', 'value_counts', 'map', 'to_dict', 'value_counts', 'map', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'drop', 'drop', 'transform', 'transform', 'head', 'mean', 'apply', 'head', 'read_csv', 'read_csv', 'drop', 'drop', 'transform', 'transform', 'head', 'mean', 'apply', 'head', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'drop', 'concat', 'join', 'to_dict', 'value_counts', 'map', 'to_dict', 'value_counts', 'map', 'astype', 'astype', 'drop', 'factorize', 'select_dtypes', 'select_dtypes', 'array', 'select_dtypes', 'copy', 'select_dtypes', 'factorize', 'concat', 'head', 'mean', 'apply', 'head', 'merge', 'merge', 'drop', 'head', 'to_csv'] ['statsmodels.api', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'datetime', 'scipy', 'numpy.matlib'] ['model_selection', 'preprocessing']Dict:{'statsmodels': [], 'numpy': [], 'pandas': ['read_csv', 'concat', 'value_counts', 'factorize', 'array', 'merge', 'to_datetime'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'xgboost': [], 'datetime': [], 'scipy': []} axis_0: 0, axis_1: 13
store-sales-competition.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'info', 'describe', 'sum', 'groupby', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'head', 'pivot_table', 'sum', 'pivot_table', 'sum', 'sum', 'pivot_table', 'sum', 'pivot_table', 'sum', 'map', 'head', 'unique', 'quantile', 'drop', 'merge', 'head', 'head', 'unique', 'unique', 'unique', 'unique', 'unique', 'rename', 'head', 'rename', 'rename', 'merge', 'drop', 'merge', 'drop', 'merge', 'drop', 'drop', 'get_dummies', 'reset_index', 'drop', 'head', 'unique', 'max', 'where', 'drop', 'to_datetime', 'map', 'drop', 'get_dummies', 'head', 'unique', 'where', 'reset_index', 'drop', 'concat', 'rename', 'merge', 'head', 'where', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'seaborn', 'matplotlib.pyplot', 'plotly.express', 'plotly.express', 'plotly.express', 'plotly.express', 'plotly.express'] ['LinearRegression', 'XGBRegressor', 'preprocessing']Dict:{'numpy': ['quantile', 'max', 'sum', 'where', 'unique', 'info'], 'pandas': ['read_csv', 'pivot_table', 'concat', 'get_dummies', 'unique', 'merge', 'to_datetime'], 'os': ['rename'], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 8
new-insights-w-umap-optuna-shap-eli5.py : ['fillna', 'drop', 'read_csv', 'fillna', 'drop', 'read_csv', 'read_csv', 'drop', 'sample', 'transform', 'get', 'items', 'transform', 'transform', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'optuna', 'warnings', 'xgboost', 'shap', 'umap', 'umap.plot', 'joblib', 'umap', 'umap.plot', 'joblib', 'shap'] ['cross_validate', 'train_test_split', 'mean_squared_error', 'QuantileTransformer', 'QuantileTransformer', 'plot_optimization_history', 'rcParams', 'plot_param_importances']Dict:{'numpy': [], 'pandas': ['read_csv'], 'matplotlib': ['items', 'get'], 'seaborn': [], 'optuna': [], 'warnings': [], 'xgboost': [], 'sklearn': ['transform'], 'shap': [], 'umap': [], 'joblib': [], 'umap,': []} axis_0: 0, axis_1: 3
tps-jan-2021-gbdts-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'info', 'keys', 'copy', 'copy', 'concat', 'concat', 'reset_index', 'reset_index', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'copy', 'to_csv', 'head'] ['os', 'sys', 'time', 'random', 'logging', 'typing', 'seaborn', 'numpy', 'pandas', 'xgboost', 'lightgbm'] ['Path', 'contextmanager', 'pyplot', 'KFold', 'mean_squared_log_error', 'mean_squared_error', 'CatBoost', 'Pool']Dict:{'os': [], 'sys': [], 'time': [], 'random': [], 'logging': ['info'], 'typing': [], 'pathlib': [], 'contextlib': [], 'matplotlib': [], 'seaborn': [], 'numpy': ['mean', 'info', 'copy'], 'pandas': ['concat', 'read_csv'], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 2
lightgbm-and-cnn-3rd-place-solution.py : ['read_csv', 'read_csv', 'concat', 'astype', 'round', 'astype', 'round', 'min', 'max', 'astype', 'astype', 'concat', 'concat', 'transform', 'transform', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'min', 'max', 'mean', 'to_csv', 'head'] ['numpy', 'pandas', 'lightgbm', 'warnings', 'scipy.ndimage', 'gc', 'matplotlib.pyplot', 'keras'] ['roc_auc_score', 'log_loss', 'mean_squared_error', 'StratifiedKFold', 'KFold', 'norm', 'skew', 'tqdm_notebook', 'copy', 'Pool', 'StandardScaler', 'interp1d', 'gaussian_filter']Dict:{'numpy': ['mean', 'round', 'min', 'max'], 'pandas': ['concat', 'read_csv'], 'lightgbm': [], 'sklearn': ['transform'], 'scipy': [], 'tqdm': [], 'copy': [], 'multiprocessing': [], 'warnings': [], 'gc': [], 'matplotlib': [], 'keras': []} axis_0: 2, axis_1: 20
rmse-3-66-multimodel-ridge-stacking.py : ['astype', 'agg', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'copy', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv', 'to_csv', 'transpose', 'transpose', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings', 'time', 'sys', 'datetime', 'matplotlib.pyplot', 'seaborn', 'gc', 'time', 'datetime'] ['KFold', 'mean_squared_error', 'tqdm_notebook', 'tqdm_pandas', 'LabelEncoder', 'Ridge', 'BayesianRidge', 'RepeatedKFold', 'RepeatedKFold']Dict:{'numpy': ['mean', 'isin', 'transpose', 'copy'], 'pandas': ['concat', 'merge', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'sklearn': [], 'warnings': [], 'time': [], 'sys': [], 'datetime': [], 'tqdm': [], 'gc': []} axis_0: 1, axis_1: 0
answer-why-is-keras-better-than-pytorch.py : ['transpose', 'array', 'applymap', 'array', 'array', 'array', 'read_json', 'read_json', 'max', 'sum', 'sum', '__init__', '__init__', 'transpose', 'array', 'eval', 'mean', 'abs', 'transpose', 'array', 'eval', 'mean', 'abs', 'mean', 'mean', 'iterrows', 'array', 'eval', 'reset_index', 'concat', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'head', 'head', 'mean', 'abs', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'random', 'torch', 'torch.nn', 'torch.nn.functional', 'os', 'copy', 'time', 'datetime', 'tensorflow', 'keras.backend', 'tensorflow.keras.layers'] ['Linear', 'LayerNorm', 'ReLU', 'Dropout', 'StratifiedKFold', 'tqdm', 'KMeans', 'StratifiedKFold', 'KFold', 'GroupKFold', 'Dataset', 'TensorDataset', 'DataLoader', 'RandomSampler', 'KMeans']Dict:{'numpy': ['transpose', 'mean', 'max', 'abs', 'sum', 'array'], 'pandas': ['read_csv', 'eval', 'read_json', 'concat', 'array'], 'matplotlib': [], 'random': [], 'torch': [], 'sklearn': [], 'tqdm': ['__init__'], 'os': [], 'copy': [], 'time,datetime': [], 'tensorflow': [], 'keras': ['transpose', 'mean', 'max', 'eval', 'sum', 'abs']} axis_0: 1, axis_1: 2
xgboost-w-simple-feature-engineering.py : ['read_csv', 'read_csv', 'reset_index', 'concat', 'reset_index', 'sum', 'isnull', 'drop', 'fillna', 'median', 'array', 'head', 'corr', 'corr', 'drop', 'nunique', 'drop', 'fillna', 'mode', 'nunique', 'get_dummies', 'concat', 'nunique', 'drop', 'squeeze', 'array', 'to_csv'] ['matplotlib.pyplot', 'seaborn', 'pandas', 'numpy', 'tensorflow'] ['LabelEncoder', 'MinMaxScaler', 'XGBRegressor', 'XGBRegressor']Dict:{'sklearn': [], 'xgboost': [], 'matplotlib': [], 'seaborn': [], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'array'], 'numpy': ['sum', 'median', 'array', 'squeeze'], 'tensorflow': ['squeeze', 'concat']} axis_0: 0, axis_1: 2
xgboost-rollercoasting-the-rolling-features.py : ['read_csv', 'dropna', 'reset_index', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'info', 'sum', 'memory_usage', 'info', 'info', 'cumsum', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'diff', 'groupby', 'diff', 'groupby', 'agg', 'agg', 'shift', 'groupby', 'pct_change', 'groupby', 'diff', 'groupby', 'replace', 'items', 'map', 'to_dict', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'round', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'diff', 'groupby', 'diff', 'groupby', 'agg', 'agg', 'shift', 'groupby', 'pct_change', 'groupby', 'diff', 'groupby', 'replace', 'items', 'map', 'to_dict', 'join', 'join', 'sum', 'sum', 'concat', 'reset_index', 'tail', 'groupby', 'clip', 'mean', 'mean', 'round'] ['gc', 'os', 'time', 'warnings', 'joblib', 'xgboost', 'numpy', 'pandas', 'numpy', 'gc', 'os', 'lightgbm', 'numpy', 'pandas', 'time', 'optiver2023'] ['combinations', 'simplefilter', 'mean_absolute_error', 'KFold', 'TimeSeriesSplit', 'njit', 'prange', 'XGBRegressor', 'mean_absolute_error', 'mean_absolute_error']Dict:{'gc': [], '': [], '#': [], 'Garbage': [], 'collection': [], 'for': [], 'memory': [], 'management': [], 'os': ['replace'], 'Operating': [], 'system-related': [], 'functions': [], 'time': [], 'Time-related': [], 'warnings': [], 'Handling': [], 'itertools': [], 'joblib': [], 'For': [], 'saving': [], 'and': [], 'loading': [], 'models': [], 'xgboost': [], 'numpy': ['mean', 'median', 'max', 'diff', 'sum', 'round', 'min', 'clip', 'info', 'std', 'cumsum'], 'pandas': ['concat', 'eval', 'read_csv'], 'sklearn': [], 'numba': [], 'lightgbm': []} axis_0: 1, axis_1: 4
optiver-lgbm-feature-engineering-and-optuna.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'median', 'groupby', 'median', 'groupby', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'where', 'where', 'map', 'to_dict', 'where', 'eval', 'eval', 'eval', 'eval', 'div', 'div', 'astype', 'astype', 'eval', 'max', 'min', 'sum', 'drop', 'dropna', 'drop', 'mean', 'sort_values', 'any', 'isna', 'sum', 'sum'] ['sys', 'numpy', 'pickle', 'pandas', 'json', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'optuna', 'gc', 'plotly.express', 'joblib', 'optiver2023'] ['pprint', 'pformat', 'train_test_split', 'TimeSeriesSplit', 'mean_absolute_error', 'LGBMRegressor', 'default_timer', 'clear_output', 'plot_optimization_history', 'plot_param_importances', 'plot_parallel_coordinate', 'combinations']Dict:{'sys': [], 'numpy': ['mean', 'median', 'any', 'max', 'sum', 'where', 'min'], 'pickle': [], 'pprint': [], 'pandas': ['isna', 'eval', 'read_csv'], 'json': [], 'sklearn': [], 'lightgbm': [], 'matplotlib': [], 'seaborn': [], 'timeit': [], 'IPython': [], 'optuna': [], 'itertools': [], 'gc': [], 'plotly': [], 'joblib': [], 'optiver2023': []} axis_0: 0, axis_1: 4
feature-engineering-and-lightgbm-starter-fork.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'fillna', 'fillna', 'mean', 'head', 'agg', 'groupby', 'droplevel', 'rename', 'reset_index', 'merge', 'merge', 'agg', 'groupby', 'droplevel', 'rename', 'reset_index', 'merge', 'merge', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'concat', 'concat', 'sum', 'isnull', 'fillna', 'mean', 'copy', 'concat', 'mean', 'groupby', 'map', 'sort_values', 'to_csv', 'head', 'to_csv', 'head', 'sum', 'array'] ['os', 'gc', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'warnings'] ['mean_squared_error', 'KFold']Dict:{'os': ['rename'], 'gc': [], 'numpy': ['mean', 'array', 'sum', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'array', 'merge'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'lightgbm': [], 'warnings': [], '=': [], 'pd': [], "importances['gain']": [], "importances['feature']": []} axis_0: 2, axis_1: 2
lgbm-nn-fusion-xgb-ensemble.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'head', 'value_counts', 'unique', 'quantile', 'quantile', 'kurt', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'any', 'isna', 'drop', 'drop', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'merge', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'read_csv', 'read_csv', 'read_csv', 'copy', 'value_counts', 'unique', 'merge', 'transform', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'merge', 'merge', 'quantile', 'quantile', 'kurt', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', '__len__', '__len__', 'any', 'isna', 'mode', 'fillna', 'any', 'isna', 'mode', 'fillna', 'any', 'isna', 'any', 'isna', 'mean', 'sort_values', 'mean', 'head', 'mean', 'read_csv', 'sort_values', 'reset_index', 'groupby', 'read_csv', 'read_csv', 'sort_values', 'reset_index', 'groupby', 'to_csv', 'value_counts', 'unique', 'rename', 'reset_index', 'quantile', 'quantile', 'apply', 'explode', 'apply', 'agg', 'groupby', 'join', 'count', 'groupby', 'fillna', 'reset_index', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'count', 'groupby', 'fillna', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'read_csv', 'copy', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'keys', 'nunique', 'drop', 'drop', 'keys', 'drop', 'merge', 'replace', 'mean', 'copy', 'copy', 'copy', 'transform', 'copy', 'transform', 'copy', 'drop', 'replace', 'items', 'copy', 'transform', 'transform', 'mean', 'items', 'unique', 'agg', 'sum', 'join', 'join', 'join', 'join', 'filter', 'agg', 'concat', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'apply', 'median', 'apply', 'drop', 'join', 'agg', 'sum', 'mean', 'std', 'median', 'min', 'max', 'quantile', 'join', 'agg', 'join', 'shift', 'filter', 'agg', 'max', 'median', 'mean', 'std', 'sum', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'join', 'shift', 'filter', 'count', 'agg', 'mean', 'std', 'count', 'median', 'max', 'first', 'last', 'join', 'filter', 'count', 'agg', 'mean', 'std', 'median', 'max', 'first', 'last', 'join', 'apply', 'explode', 'apply', 'agg', 'groupby', 'join', 'reset_index', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'rename', 'reset_index', 'agg', 'groupby', 'isin', 'merge', 'reset_index', 'agg', 'groupby', 'isin', 'reset_index', 'agg', 'groupby', 'merge', 'astype', 'mean', 'read_csv', 'merge', 'merge', 'merge', 'merge', 'merge', 'keys', 'nunique', 'drop', 'read_csv', 'merge', 'drop', 'merge', 'merge', 'merge', 'merge', 'merge', 'drop', 'drop', 'copy', 'copy', 'copy', 'head', 'rename', 'rename', 'rename', 'merge', 'merge', 'to_csv'] ['gc', 'numpy', 'pandas', 'os', 'itertools', 'pickle', 're', 'time', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'torch', 'joblib', 'warnings', 'gc', 'ctypes', 'numpy', 'pandas', 'gc', 'os', 'itertools', 'pickle', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'warnings', 'os', 'gc', 're', 'random', 'pprint', 'time', 'copy', 'seaborn', 'lightgbm', 'xgboost', 'catboost', 'optuna', 'pandas', 'numpy', 'polars', 're', 'gc', 'random', 'warnings'] ['choice', 'choices', 'reduce', 'tqdm', 'cycle', 'Counter', 'reduce', 'cycle', 'stats', 'skew', 'kurtosis', 'metrics', 'model_selection', 'preprocessing', 'linear_model', 'ensemble', 'decomposition', 'tree', 'defaultdict', 'TabularAutoML', 'Task', 'train_test_split', 'TfidfVectorizer', 'LinearRegression', 'mean_absolute_error', 'mean_squared_error', 'CountVectorizer', 'MultinomialNB', 'accuracy_score', 'choice', 'choices', 'reduce', 'tqdm', 'cycle', 'Counter', 'reduce', 'cycle', 'stats', 'skew', 'kurtosis', 'metrics', 'model_selection', 'preprocessing', 'linear_model', 'ensemble', 'decomposition', 'tree', 'BertTokenizer', 'Counter', 'defaultdict', 'tqdm', 'LabelEncoder', 'PowerTransformer', 'RobustScaler', 'FunctionTransformer', 'KFold', 'StratifiedKFold', 'GroupKFold', 'train_test_split', 'TfidfVectorizer', 'TruncatedSVD', 'PCA', 'GradientBoostingRegressor', 'HistGradientBoostingRegressor', 'RandomForestRegressor', 'ExtraTreesRegressor', 'AdaBoostRegressor', 'SVR', 'Pipeline', 'KMeans', 'Lasso', 'Ridge', 'ElasticNet', 'KNeighborsRegressor', 'mean_squared_error', 'SimpleImputer', 'defaultdict', 'LabelEncoder', 'Counter', 'defaultdict', 'skew', 'kurtosis', 'LGBMRegressor', 'CatBoostRegressor', 'SVR', 'KFold', 'StratifiedKFold', 'MinMaxScaler', 'SimpleImputer']Dict:{'gc': [], 'numpy': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'os': ['rename', 'replace'], 'itertools': [], 'pickle': [], 're': [], 'time': [], 'random': [], 'functools': [], 'tqdm': ['__len__'], 'seaborn': [], 'matplotlib': [], 'collections': [], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'torch': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'concat', 'mode', 'min', 'unique', 'isin', 'std'], 'lightautoml': [], 'joblib': [], 'warnings': [], 'ctypes': [], 'transformers': [], 'pprint': [], 'copy': ['copy'], 'xgboost': [], 'catboost': [], 'optuna': [], 'polars': ['mean', 'median', 'quantile', 'read_csv', 'any', 'first', 'max', 'head', 'sum', 'last', 'apply', 'concat', 'min', 'count', 'std'], 're#用于正则表达式提取': [], 'gc#垃圾回收模块': [], 'warnings#避免一些可以忽略的报错': []} axis_0: 3, axis_1: 30
parallel-feature-engineering-no-leak-lgbm.py : ['concat', 'to_datetime', 'sort_values', 'cumprod', 'map', 'sort_values', 'ffill', 'sort_values', 'groupby', 'reset_index', 'set_index', '__init__', 'unique', 'cumsum', 'cumsum', 'sort_values', 'min', 'max', 'sum', 'sort_values', 'mean', 'sum', 'sort_values', 'mean', 'apply', 'groupby', 'mean', 'std', 'head', 'sort_index', 'drop', 'head', 'head', 'sort_values', 'sum', 'isna', 'fillna', 'head', 'sort_values', 'sum', 'isna', 'mean', 'median', 'std', 'std', 'skew', 'kurtosis', 'replace', 'head', 'head', 'sort_values', 'sum', 'isna', 'dropna', 'head', 'sort_values', 'sum', 'isna', 'sort_index', 'head', 'drop', '__init__', 'unique', 'unique', 'unique', 'head', 'sort_values', 'sum', 'isna', 'factorize', 'astype', 'astype', 'astype', 'sort_values', 'apply', 'groupby', 'median', 'std', 'boxplot', 'median', 'mean', 'median', 'std', 'groupby', 'fillna', 'mean', 'sort_values', 'sort_values', 'drop'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'gc', 'multiprocessing', 'warnings', 'numpy', 'numpy', 'jpx_tokyo_market_prediction'] ['mean_squared_error', 'dump', 'Parallel', 'delayed', 'tqdm', 'ROUND_HALF_UP', 'Decimal', 'indexable', '_num_samples', '_BaseKFold', 'get_reusable_executor', 'KFold', '_BaseKFold', 'indexable', '_num_samples', '_deprecate_positional_args', 'LGBMRegressor', 'early_stopping', 'log_evaluation', 'tqdm']Dict:{'numpy': ['mean', 'median', 'max', 'cumsum', 'sum', 'min', 'unique', 'std', 'cumprod'], 'pandas': ['isna', 'concat', 'factorize', 'unique', 'to_datetime'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': ['__init__'], 'gc': [], 'joblib': ['__init__'], 'tqdm': ['__init__'], 'multiprocessing': [], 'warnings': [], 'decimal': ['min', 'max', '__init__'], 'lightgbm': ['__init__'], 'jpx_tokyo_market_prediction': []} axis_0: 1, axis_1: 8
multi-class-cirrhosis-eda-mi-score-feature-eng.py : ['read_csv', 'read_csv', 'head', 'concat', 'value_counts', 'value_counts', 'value_counts', 'crosstab', 'value_counts', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'head', 'drop', 'astype', 'map', 'sort_values', 'drop', 'astype', 'drop', 'drop', 'drop', 'astype', 'mean', 'mean', 'mean', 'mean', 'read_csv', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn'] ['pyplot', 'simplefilter', 'mutual_info_classif', 'train_test_split', 'StratifiedKFold', 'cross_val_score', 'LGBMClassifier', 'XGBClassifier', 'CatBoostClassifier', 'VotingClassifier', 'confusion_matrix', 'log_loss']Dict:{'numpy': ['mean'], 'pandas': ['concat', 'crosstab', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'catboost': []} axis_0: 0, axis_1: 5
my-first-time-series-comp-added-prophet.py : ['mean', 'abs', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'sort_index', 'sort_index', 'sort_index', 'sort_index', 'sum', 'resample', 'sum', 'resample', 'sum', 'resample', 'sum', 'resample', 'copy', 'drop', 'mean', 'resample', 'mean', 'rolling', 'std', 'shift', 'reset_index', 'reset_index', 'to_datetime', 'sub', 'drop', 'pivot_table', 'pivot_table', 'pivot_table', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'concat', 'drop', 'drop', 'head', 'concat', 'mean', 'mean', 'head', 'sort_values', 'get_dummies', 'items', 'reset_index', 'head', 'copy', 'copy', 'copy', 'query', 'head', 'reset_index', 'mean', 'groupby', 'tail', 'tail', 'to_datetime', 'to_datetime', 'concat', 'tail', 'abs', 'join', 'join', 'set_index', 'set_index', 'tail', 'tail', 'copy', 'mean', 'abs', 'items', 'items', 'tail', 'update', 'reset_index', 'tail', 'items', 'product', 'product', 'to_datetime', 'mean', 'head', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'head', 'astype', 'astype', 'copy', 'copy', 'head', 'mean', 'abs', 'abs', 'abs', '__init__', 'astype', 'astype', 'to_csv', 'astype', 'astype', 'to_csv'] ['time', 'lightgbm', 'xgboost', 'seaborn', 'statsmodels.api', 're', 'itertools', 'keras.backend'] ['*', '*', 'Prophet', 'r2_score', 'median_absolute_error', 'mean_absolute_error', 'median_absolute_error', 'mean_squared_error', 'mean_squared_log_error', 'KFold', 'stats', 'init_notebook_mode', 'iplot', 'graph_objs', 'init_notebook_mode', 'iplot', 'graph_objs', 'plot_acf', 'plot_pacf', 'Sequential', 'Dense', 'Activation', 'Reshape', 'merge', 'Embedding', 'Input', 'Concatenate', 'Model']Dict:{'time': [], 'lightgbm': [], 'xgboost': [], 'seaborn': [], 'fastai': [], 'fbprophet': [], 'sklearn': ['__init__'], 'scipy': [], 'plotly': [], 'statsmodels': [], 're': ['sub'], 'ascending=False,': [], 'inplace=True);': [], 'itertools': ['product', 'groupby'], 'keras': ['mean', 'abs', 'sum', 'std', 'update']} axis_0: 1, axis_1: 4
time-series-forecasting-tutorial.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'nunique', 'unique', 'shift', 'mean', 'std', 'mean', 'std', 'corr', 'concat', 'merge', 'merge', 'merge', 'merge', 'rename', 'to_datetime', 'head', 'median', 'rolling', 'to_datetime', 'fillna', 'sum', 'isnull', 'replace', 'replace', 'replace', 'replace', 'sort_values', 'reset_index', 'agg', 'groupby', 'sort_values', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'rename', 'reset_index', 'agg', 'groupby', 'rename', 'reset_index', 'agg', 'groupby', 'rename', 'reset_index', 'agg', 'groupby', 'rename', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'rename', 'merge', 'merge', 'merge', 'merge', 'replace', 'reset_index', 'agg', 'groupby', 'apply', 'astype', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'set_index', 'mean', 'rolling', 'read_csv', 'to_period', 'sort_index', 'set_index', 'squeeze', 'mean', 'groupby', 'dropna', 'items', 'to_string', 'copy', 'set_index', 'to_datetime', 'mean', 'resample', 'diff', 'head', 'unique', 'nunique', 'concat', 'head', 'drop', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'squeeze', 'stack', 'squeeze', 'stack', 'to_period', 'set_index', 'head', 'reset_index', 'set_index', 'drop', 'to_period', 'set_index', 'drop', 'drop', 'to_period', 'set_index', 'drop', 'clip', 'reset_index', 'set_index', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'calendar', 'datetime', 'plotly.express', 'plotly.figure_factory', 'plotly.offline', 'plotly.graph_objs', 'math', 'math'] ['*', 'Path', 'CalendarFourier', 'DeterministicProcess', 'adfuller', 'OrdinalEncoder', 'OneHotEncoder', 'RandomForestRegressor', 'LinearRegression', 'Ridge', 'cross_val_score', 'train_test_split', 'mean_absolute_error', 'XGBRegressor', 'LabelEncoder', 'OneHotEncoder', 'mean_absolute_error', 'KNeighborsRegressor', 'make_subplots', 'periodogram', 'AnchoredText', 'seasonal_decompose', 'TimeSeriesSplit', 'mean_absolute_error', 'mean_squared_error', 'Prophet']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'merge', 'to_datetime'], 'numpy': ['mean', 'median', 'stack', 'squeeze', 'sum', 'unique', 'clip', 'diff', 'std', 'copy'], 'matplotlib': [], 'seaborn': [], 'calendar': [], 'datetime': [], 'learntools': [], 'pathlib': ['rename', 'replace'], 'statsmodels': [], 'sklearn': [], 'xgboost': ['apply'], 'plotly': [], 'math': [], 'fbprophet': []} axis_0: 0, axis_1: 6
titanic-guide-with-sklearn-and-eda.py : ['read_csv', 'read_csv', 'head', 'head', 'keys', 'keys', 'describe', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'drop', 'copy', 'dropna', 'fillna', 'median', 'fillna', 'median', 'fillna', 'fillna', 'median', 'head', 'head', 'sum', 'sum', 'sum', 'sum', 'sum', 'sample', 'sample', 'transform', 'transform', 'transform', 'transform', 'sample', 'sample', 'apply', 'apply', 'head', 'count', 'replace', 'replace', 'transform', 'transform', 'drop', 'drop', 'sample', 'sample', 'array', 'array', 'array', 'array', 'head', 'head', 'drop', 'drop', 'head', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'warnings', 'os'] ['pyplot', 'LabelEncoder', 'StandardScaler', 'SVC', 'LinearSVC', 'RandomForestClassifier', 'LogisticRegression', 'KNeighborsClassifier', 'GaussianNB', 'DecisionTreeClassifier', 'make_scorer', 'accuracy_score', 'GridSearchCV', 'train_test_split', 'XGBClassifier']Dict:{'numpy': ['median', 'array', 'sum', 'copy'], 'pandas': ['array', 'read_csv', 'isnull'], 'seaborn': [], 'matplotlib': [], 'warnings': [], 'os': ['replace'], '': [], 'sklearn': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 2
tps-april-2022-benchmark.py : ['read_csv', 'squeeze', 'read_csv', 'round', 'round', 'round', 'round', 'to_numpy', 'drop_duplicates', 'reset_index', 'reset_index', 'reset_index', 'read_csv', 'read_csv', 'reset_index', 'to_csv'] ['warnings', 'numpy', 'pandas', 'matplotlib.pyplot'] ['Path', 'get_ipython', 'metrics', 'GroupShuffleSplit', 'RandomForestClassifier', 'Pipeline', 'RelevantFeatureAugmenter']Dict:{'warnings': [], 'pathlib': [], 'numpy': ['round', 'squeeze'], 'pandas': ['read_csv'], 'matplotlib': [], 'IPython': [], 'sklearn': [], 'tsfresh': []} axis_0: 0, axis_1: 0
how-to-remove-non-stationarity-from-time-series.py : ['items', 'read_csv', 'read_csv', 'dropna', 'read_csv', 'diff', 'diff', 'diff', 'head', 'dropna', 'dropna', 'diff', 'read_csv', 'diff', 'dropna'] ['warnings', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn', 'seaborn'] ['adfuller']Dict:{'warnings': [], 'matplotlib': [], 'numpy': ['diff'], 'pandas': ['read_csv'], 'seaborn': [], 'statsmodels': []} axis_0: 0, axis_1: 0
magic-parameters.py : ['read_csv', 'read_csv', 'copy', 'copy', 'copy', 'copy', 'head', 'head', 'concat', 'mean', 'to_csv', 'head'] ['numpy', 'pandas', 'lightgbm', 'warnings', 'os'] ['mean_squared_error', 'roc_auc_score', 'StratifiedKFold', 'KFold']Dict:{'numpy': ['mean', 'copy'], 'pandas': ['concat', 'read_csv'], 'lightgbm': [], 'sklearn': [], 'warnings': [], 'os': []} axis_0: 1, axis_1: 1
lightgbm-single-model-and-feature-engineering.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'join', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'where', 'isna', 'concat', 'rename', 'reset_index', 'agg', 'groupby', 'to_dict', 'map', 'map', 'replace', 'replace', 'map', 'map', 'map', 'map', 'map', 'map', 'fillna', 'fillna', 'where', 'apply', 'apply', 'fillna', 'median', 'apply', 'fillna', 'concat', 'to_dict', 'value_counts', 'map', 'map', 'concat', 'to_dict', 'value_counts', 'map', 'map', 'concat', 'astype', 'astype', 'to_dict', 'value_counts', 'map', 'astype', 'astype', 'map', 'astype', 'astype', 'sum', 'isnull', 'value_counts', 'drop', 'drop', 'select_dtypes', 'select_dtypes', 'transform', 'transform', 'fillna', 'fillna', 'max', 'sum', 'isnull', 'max', 'sum', 'isnull', 'head', 'drop', 'drop', 'read_csv', 'head', 'to_csv', 'mean', 'to_csv', 'head', 'sort_values'] ['os', 'numpy', 'pandas', 'gc', 'datetime', 'random', 'lightgbm', 'xgboost', 'matplotlib.pyplot', 'seaborn'] ['preprocessing', 'KFold', 'LabelEncoder', 'roc_auc_score']Dict:{'os': ['rename', 'replace'], 'numpy': ['mean', 'median', 'max', 'sum', 'where', 'min'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts'], 'sklearn': [], 'gc,': [], 'datetime,': [], 'random': [], 'lightgbm': [], 'xgboost': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 6
light-check.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'rename', 'rename', 'concat', 'concat', 'keys', 'rename', 'reset_index', 'map', 'map', 'map', 'map', 'map', 'map', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'all', 'join', 'join', 'sum', 'to_dict', 'add_prefix', 'update', 'add_prefix', 'keys', 'mean', 'mean', 'mean', 'mean', 'keys', 'mean', 'join', 'add_prefix', 'concat', 'unique', 'unique', 'concat', 'concat', 'concat', 'concat', 'mean', 'mean', 'mean', 'groupby', 'apply', 'join', 'fillna', 'join', 'fillna', 'apply', 'mean', 'mean', 'reset_index', 'groupby', 'merge', 'count', 'unique', 'groupby', 'reset_index', 'apply', 'join', 'drop', 'astype', 'agg', 'groupby', 'reset_index', 'unique', 'groupby', 'reset_index', 'apply', 'join', 'drop', 'astype', 'agg', 'groupby', 'reset_index', 'unique', 'groupby', 'reset_index', 'apply', 'join', 'drop', 'astype', 'agg', 'groupby', 'reset_index', 'unique', 'groupby', 'reset_index', 'apply', 'join', 'drop', 'astype', 'agg', 'groupby', 'reset_index', 'copy', 'merge', 'merge', 'merge', 'merge', 'copy', 'merge', 'merge', 'merge', 'merge', 'merge', 'add_prefix', 'merge', 'add_prefix', 'concat', 'merge', 'add_prefix', 'merge', 'add_prefix', 'concat', 'merge', 'merge', 'head', 'concat', 'sum', 'isnull', 'copy', 'reset_index', 'count', 'groupby', 'merge', 'factorize', 'fillna', 'add_prefix', 'add_prefix', 'concat', 'concat', 'drop', 'drop', 'drop', 'all', 'apply', 'head', 'sum', 'isnull', 'array', 'array', 'copy', 'copy', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'mean', 'array', 'copy', 'astype', 'mean', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'astype', 'head', 'to_csv', 'head'] ['numpy', 'pandas', 'tensorflow', 'scipy', 'warnings', 'os', 'gc', 'glob', 'json', 'matplotlib.pyplot', 'pprint', 'numpy', 'random', 'pandas', 'joblib', 'scipy', 'lightgbm'] ['LabelEncoder', 'OneHotEncoder', 'MinMaxScaler', 'train_test_split', 'StratifiedShuffleSplit', 'StratifiedKFold', 'KFold', 'backend', 'Sequential', 'Model', 'BatchNormalization', 'Input', 'Embedding', 'SpatialDropout1D', 'concatenate', 'Conv2D', 'Reshape', 'MaxPool2D', 'PReLU', 'AvgPool2D', 'Flatten', 'Dense', 'Dropout', 'Lambda', 'Adam', 'text', 'sequence', 'KeyedVectors', 'partial', 'Image', 'KFold', 'CatBoostRegressor', 'cohen_kappa_score', 'Parallel', 'delayed', 'tqdm', 'Image', 'RandomForestClassifier', 'roc_auc_score', 'pyplot', '*', '*', 'DataBunch', 'tqdm_notebook', 'TfidfVectorizer', 'SparsePCA', 'TruncatedSVD', 'LatentDirichletAllocation', 'NMF', 'Counter', 'partial', 'sqrt', 'cohen_kappa_score', 'mean_squared_error', 'confusion_matrix', 'StratifiedKFold']Dict:{'numpy': ['mean', 'sum', 'all', 'unique', 'array', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'factorize', 'unique', 'array', 'merge'], 'sklearn': [], 'keras': [], 'gensim': [], 'tensorflow': ['unique', 'concat'], 'functools': [], 'scipy': [], 'PIL': ['merge'], 'catboost': [], 'warnings': [], 'os': ['rename'], 'gc': [], 'glob': [], 'json': [], 'matplotlib': [], 'pprint': [], 'joblib': [], 'tqdm': [], 'random': [], 'fastai': [], 'collections': ['keys', 'update', 'copy'], 'math': [], 'lightgbm': [], '"split"': [], '#': [], '"gain"': [], '=': [], 'model': []} axis_0: 0, axis_1: 24
tensorflow-dnn-coursera-ml-course-tutorial.py : ['abs', 'abs', 'to_datetime', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'apply', 'to_csv', 'read_csv', 'read_csv', 'head', 'transform', 'transform', 'head'] ['numpy', 'pandas', 'tensorflow'] ['datetime', 'preprocessing', 'train_test_split']Dict:{'numpy': ['abs'], 'pandas': ['to_datetime', 'read_csv'], 'tensorflow': ['abs'], 'datetime': [], 'sklearn': []} axis_0: 0, axis_1: 3
housing-feature-engineering-regression.py : ['read_csv', 'info', 'head', 'any', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'value_counts', 'isnull', 'drop', 'sum', 'isnull', 'isnull', 'isnull', 'fillna', 'sum', 'isnull', 'crosstab', 'sum', 'isnull', 'corr', 'select_dtypes', 'to_dict', 'items', 'fillna', 'median', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'sum', 'isnull', 'crosstab', 'sum', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'mode', 'mode', 'sum', 'isnull', 'crosstab', 'sum', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'fillna', 'mode', 'fillna', 'mode', 'sum', 'isnull', 'isnull', 'isnull', 'sum', 'isnull', 'fillna', 'mode', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'info', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'value_counts', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'transpose', 'describe', 'describe', 'median', 'skew', 'skew', 'mean', 'std', 'hist', 'mean', 'std', 'hist', 'drop', 'sort_values', 'drop', 'sort_values', 'corr', 'drop', 'read_csv', 'info', 'any', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'isnull', 'drop', 'sum', 'isnull', 'isnull', 'isnull', 'fillna', 'sum', 'isnull', 'crosstab', 'sum', 'isnull', 'fillna', 'median', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'median', 'median', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'sum', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'mode', 'sum', 'isnull', 'sum', 'isnull', 'mode', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'median', 'sum', 'isnull', 'info', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'transpose', 'describe', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'info', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'sklearn', 'seaborn', 'matplotlib.mlab', 'warnings'] ['train_test_split', 'Lasso', 'metrics', 'SelectPercentile', 'f_regression', 'stats', 'train_test_split', 'RandomForestRegressor', 'metrics', 'RandomForestRegressor']Dict:{'numpy': ['transpose', 'mean', 'median', 'any', 'sum', 'info', 'std'], 'pandas': ['crosstab', 'isnull', 'read_csv', 'value_counts'], 'matplotlib': [], 'sklearn': [], 'seaborn': [], 'warnings': [], 'scipy': ['mode', 'describe', 'skew']} axis_0: 0, axis_1: 1
top-3-eda-feature-engineering-oof.py : ['update', 'mode', 'read_csv', 'read_csv', 'info', 'head', 'round', 'describe', 'describe', 'concat', 'value_counts', 'sum', 'isnull', 'round', 'sum', 'isnull', 'sum', 'isnull', 'notnull', 'sum', 'isnull', 'isnull', 'sort_values', 'isnull', 'notnull', 'isnull', 'notnull', 'isnull', 'notnull', 'isnull', 'notnull', 'isnull', 'notnull', 'isnull', 'notnull', 'isnull', 'notnull', 'median', 'isnull', 'notnull', 'fillna', 'isnull', 'fillna', 'fillna', 'value_counts', 'isnull', 'value_counts', 'groupby', 'isnull', 'isnull', 'value_counts', 'value_counts', 'groupby', 'isnull', 'value_counts', 'isnull', 'value_counts', 'groupby', 'isnull', 'value_counts', 'isnull', 'value_counts', 'fillna', 'value_counts', 'isnull', 'value_counts', 'fillna', 'value_counts', 'fillna', 'value_counts', 'isnull', 'value_counts', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'fillna', 'mode', 'astype', 'copy', 'value_counts', 'unique', 'notnull', 'isnull', 'boxplot', 'corr', 'round', 'notnull', 'isnull', 'boxplot', 'notnull', 'boxplot', 'isnull', 'notnull', 'isnull', 'boxplot', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'fillna', 'isin', 'isin', 'isin', 'isin', 'fillna', 'fillna', 'apply', 'apply', 'drop', 'replace', 'replace', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'apply', 'copy', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'copy', 'value_counts', 'map', 'median', 'groupby', 'rank', 'where', 'apply', 'drop', 'get_dummies', 'drop', 'concat', 'notnull', 'isnull', 'skew', 'skew', 'abs', 'skew', 'skew', 'abs', 'drop', 'drop', 'skew', 'skew', 'transform', 'transform', 'mean', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost'] ['datetime', 'stats', 'KFold', 'cross_val_score', 'Real', 'Integer', 'BayesSearchCV', 'RobustScaler', 'VarianceThreshold', 'Lasso', 'Ridge', 'ElasticNet', 'GradientBoostingRegressor', 'SVR']Dict:{'datetime': ['replace'], 'numpy': ['mean', 'median', 'abs', 'sum', 'where', 'round', 'unique', 'isin', 'info', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull'], 'matplotlib': ['boxplot'], 'scipy': ['mode', 'describe', 'skew'], 'seaborn': ['boxplot'], 'sklearn': [], 'skopt': [], 'lightgbm': [], 'xgboost': []} axis_0: 0, axis_1: 0
lwpwq-feature-engineering-for-beginners-en.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'max', 'value_counts', 'min', 'value_counts', 'sort_values', 'nunique', 'sum', 'isna', 'reset_index', 'sum', 'groupby', 'rename', 'head', 'reset_index', 'min', 'groupby', 'rename', 'merge', 'head', 'reset_index', 'sum', 'groupby', 'merge', 'head', 'reset_index', 'sum', 'groupby', 'merge', 'head', 'reset_index', 'sum', 'groupby', 'merge', 'head', 'reset_index', 'max', 'groupby', 'rename', 'merge', 'head', 'reset_index', 'max', 'groupby', 'merge', 'head', 'reset_index', 'apply', 'groupby', 'mean', 'rename', 'merge', 'head', 'reset_index', 'apply', 'groupby', 'mean', 'rename', 'merge', 'head', 'reset_index', 'apply', 'groupby', 'mean', 'rename', 'merge', 'head', 'reset_index', 'mean', 'groupby', 'rename', 'merge', 'head', 'reset_index', 'groupby', 'merge', 'head', 'reset_index', 'nunique', 'groupby', 'rename', 'merge', 'head', 'reset_index', 'groupby', 'merge', 'head', 'sum', 'isnull', 'fillna', 'fillna', 'head', 'reset_index', 'sum', 'groupby', 'rename', 'reset_index', 'min', 'groupby', 'rename', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'max', 'groupby', 'rename', 'reset_index', 'max', 'groupby', 'reset_index', 'apply', 'groupby', 'mean', 'rename', 'reset_index', 'apply', 'groupby', 'mean', 'rename', 'reset_index', 'apply', 'groupby', 'mean', 'rename', 'reset_index', 'mean', 'groupby', 'rename', 'reset_index', 'groupby', 'reset_index', 'nunique', 'groupby', 'rename', 'reset_index', 'groupby', 'merge', 'fillna', 'fillna', 'head'] ['numpy', 'pandas'] []Dict:{'numpy': ['mean', 'sum', 'max', 'min'], 'pandas': ['isna', 'read_csv', 'isnull', 'value_counts', 'merge']} axis_0: 0, axis_1: 0
titanic-feature-engineering.py : ['read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'crosstab', 'crosstab', 'replace', 'replace', 'replace', 'mean', 'groupby', 'apply', 'groupby', 'fillna', 'median', 'apply', 'groupby', 'fillna', 'median', 'sum', 'isnull', 'sum', 'isnull', 'qcut', 'crosstab', 'crosstab', 'crosstab', 'sum', 'isnull', 'sum', 'isnull', 'mode', 'fillna', 'sum', 'isnull', 'map', 'fillna', 'median', 'sum', 'isnull', 'sum', 'isnull', 'qcut', 'mean', 'groupby', 'mean', 'std', 'concat', 'to_csv'] ['pandas'] ['LabelEncoder', 'SVC', 'cross_val_score']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'qcut', 'crosstab'], 'sklearn': []} axis_0: 0, axis_1: 0
ps3e25-material-hardness-prediction-with-ml.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'copy', 'drop', 'rename', 'copy', 'copy', 'copy', 'concat', 'reset_index', 'head', 'round', 'count', 'round', 'count', 'round', 'count', 'mean', 'median', 'hist', 'min', 'max', 'std', 'std', 'min', 'max', 'nunique', 'max', 'max', 'min', 'min', 'max', 'max', 'min', 'min', 'concat', 'get_dummies', 'value_counts', 'idxmin', 'drop', 'concat', 'duplicated', 'reset_index', 'drop', 'array', 'array', 'array', 'array', 'isnull', 'copy', 'drop', 'concat', 'reset_index', 'sum', 'isna', 'fillna', 'mean', 'copy', 'copy', 'drop', 'drop', 'drop', 'array', 'array', 'nunique', 'copy', 'copy', 'drop', 'concat', 'transform', 'min', 'transform', 'min', 'transform', 'transform', 'reset_index', 'concat', 'concat', 'mean', 'mean', 'mean', 'mean', 'transform', 'array', 'array', 'mean', 'mean', 'mean', 'mean', 'corrwith', 'drop', 'max', 'abs', 'max', 'abs', 'max', 'abs', 'nunique', 'abs', 'corr', 'transform', 'transform', 'concat', 'concat', 'array', 'array', 'mean', 'copy', 'copy', 'transform', 'copy', 'copy', 'drop', 'drop', 'to_csv', 'to_csv', 'drop', 'copy', 'mean', 'mean', 'reset_index', 'reset_index', 'reset_index', 'abs', 'abs', 'abs', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'array', 'array', 'keys', 'items', 'copy', 'astype', 'astype', 'astype', 'astype', 'array', 'array', 'copy', 'astype', 'copy', 'astype', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'read_csv', 'to_csv', 'head', 'drop', 'copy', 'astype', 'astype', 'astype', 'copy', 'astype', 'read_csv', 'read_csv', 'copy', 'to_csv', 'head'] ['sys', 'sklearn', 'numpy', 'os', 'pandas', 'matplotlib.pyplot', 'missingno', 'seaborn', 'folium', 'random', 'gc', 'xgboost', 'statsmodels.api', 'math', 'seaborn', 'optuna', 'cmaes', 'xgboost', 'lightgbm', 'warnings', 'tensorflow', 'keras'] ['tqdm', 'tqdm', 'PrettyTable', 'deepcopy', 'partial', 'combinations', 'KMeans', 'KElbowVisualizer', 'haversine', 'uniform', 'f_classif', 'LabelEncoder', 'StandardScaler', 'metrics', 'GridSearchCV', 'RandomizedSearchCV', 'train_test_split', 'mean_squared_error', 'median_absolute_error', 'mean_absolute_error', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'FunctionTransformer', 'PCA', 'TruncatedSVD', 'SimpleImputer', 'ColumnTransformer', 'Pipeline', 'stats', 'variance_inflation_factor', 'BaseEstimator', 'TransformerMixin', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StratifiedKFold', 'KFold', 'PassiveAggressiveRegressor', 'ARDRegression', 'RidgeCV', 'ElasticNetCV', 'TheilSenRegressor', 'RANSACRegressor', 'HuberRegressor', 'HistGradientBoostingRegressor', 'ExtraTreesRegressor', 'GradientBoostingRegressor', 'RandomForestRegressor', 'DecisionTreeRegressor', 'LinearRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool', 'KNeighborsRegressor', 'stats', 'layers', 'callbacks', 'Sequential', 'Dense', 'Activation', 'LeakyReLU', 'PReLU', 'ELU', 'Dropout', 'backend']Dict:{'sys': [], 'sklearn': [], 'numpy': ['mean', 'median', 'max', 'add', 'abs', 'sum', 'array', 'round', 'min', 'std', 'copy'], 'os': ['rename'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'array'], 'matplotlib': ['hist'], 'missingno': [], 'tqdm': [], 'prettytable': ['copy'], 'seaborn': [], 'copy': [], 'functools': [], 'itertools': [], 'yellowbrick': [], 'folium': [], 'haversine': [], 'random': [], 'gc': [], 'xgboost': [], 'scipy': [], 'statsmodels': [], 'math': [], 'optuna': [], 'cmaes': [], 'lightgbm': [], 'category_encoders': [], 'imblearn': [], 'catboost': [], 'warnings': [], 'tensorflow': [], 'tensorflow_probability': [], 'keras': []} axis_0: 7, axis_1: 6
comparative-study-of-models-geotab-inertsection.py : ['join', 'read_csv', 'read_csv', 'get_dummies', 'get_dummies', 'concat', 'concat', 'get_dummies', 'get_dummies', 'concat', 'concat', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'folium', 'os', 'statsmodels.api'] ['HeatMap', 'Lasso', 'KernelRidge', 'make_pipeline', 'RobustScaler', 'Ridge', 'CatBoostRegressor', 'FileLink']Dict:{'numpy': [], 'pandas': ['concat', 'get_dummies', 'read_csv'], 'matplotlib': [], 'folium': [], 'os': [], 'statsmodels': [], 'sklearn': [], 'catboost': [], 'IPython': []} axis_0: 0, axis_1: 4
the-nuts-and-bolts-of-sound-feature-engineering.py : ['round', 'round', 'abs', 'array', 'abs', 'abs', 'round', 'abs', 'max'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'soundfile', 'librosa', 'librosa.display', 'IPython.display', 'seaborn', 'tensorflow'] ['Audio', 'Audio']Dict:{'numpy': ['round', 'abs', 'max', 'array'], 'pandas': ['array'], 'os': [], 'matplotlib': [], 'soundfile': [], 'librosa': [], 'IPython': [], 'seaborn': [], 'tensorflow': ['round', 'abs']} axis_0: 0, axis_1: 0
amex-basic-feature-engineering-1500-features.py : [] ['pandas', 'numpy', 'cupy', 'cudf', 'matplotlib.pyplot', 'gc', 'os', 'seaborn'] []Dict:{'pandas': [], 'cupy,': [], 'cudf': [], '#': [], 'GPU': [], 'libraries': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 2
amex-lightgbm-quickstart.py : ['array', 'array', 'sum', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'hist', 'hist', 'mean', 'to_csv', 'hist', 'hist'] ['numpy', 'pandas', 'matplotlib.pyplot', 'datetime', 'scipy.stats', 'warnings', 'gc'] ['MaxNLocator', 'ListedColormap', 'cycler', 'display', 'Fore', 'Back', 'Style', 'StratifiedKFold', 'CalibrationDisplay', 'LGBMClassifier', 'log_evaluation']Dict:{'numpy': ['mean', 'array', 'sum', 'cumsum'], 'pandas': ['array'], 'matplotlib': [], 'cycler': [], 'IPython': [], 'datetime': [], 'scipy': [], 'warnings': [], 'colorama': [], 'gc': [], 'sklearn': [], 'lightgbm': []} axis_0: 1, axis_1: 1
3-simple-ideas-lb-0-938.py : ['read_csv', 'read_csv', 'unique', 'unique', 'value_counts', 'unique', 'reset_index', 'median', 'boxplot', 'melt', 'unique', 'reset_index', 'median', 'boxplot', 'melt', 'nunique', 'median', 'nunique', 'median', 'mean', 'std', 'median', 'mean', 'std', 'median', 'astype', 'round', 'clip', 'astype', 'round', 'clip', 'astype', 'round', 'clip', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'copy', 'copy', 'sort_values', 'read_csv', 'array', 'round', 'to_csv', 'head'] ['numpy', 'pandas', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'time', 'datetime'] ['*', 'f1_score', 'KFold']Dict:{'numpy': ['mean', 'median', 'array', 'round', 'unique', 'clip', 'isin', 'std', 'copy'], 'pandas': ['read_csv', 'melt', 'concat', 'value_counts', 'unique', 'array'], 'sklearn': [], 'lightgbm': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'time': [], 'datetime': []} axis_0: 1, axis_1: 1
how-to-handle-outliers.py : ['read_csv', 'read_csv', 'boxplot', 'mean', 'std', 'mean', 'std', 'boxplot', 'boxplot', 'quantile', 'quantile', 'where', 'where', 'boxplot', 'boxplot'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] []Dict:{'numpy': ['mean', 'where', 'quantile', 'std'], 'pandas': ['read_csv'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot']} axis_0: 0, axis_1: 0
best-feature-engineering-techniques-for-ml.py : [] [] []Dict:{} axis_0: 0, axis_1: 0
tpsjan22-03-linear-model.py : ['read_csv', 'read_csv', 'read_csv', 'set_index', 'to_datetime', 'head', 'abs', 'abs', 'apply', 'astype', 'astype', 'transform', 'update', 'mean', 'mean', 'date_range', 'set_index', 'transform', 'transform', 'groupby', 'sum', 'sum', 'sum', 'sum', 'date_range', 'date_range', 'concat', 'concat', 'concat', 'map', 'concat', 'map', 'concat', 'concat', 'apply', 'concat', 'astype', 'astype', 'transform', 'groupby', 'sum', 'sum', 'sum', 'sum', 'hist', 'std', 'mean', 'groupby', 'std', 'date_range', 'abs', 'mean', 'groupby', 'std', 'to_timedelta', 'abs', 'transform', 'copy', 'to_csv', 'hist', 'hist', 'copy', 'round', 'to_csv', 'abs', 'head', 'apply'] ['pandas', 'numpy', 'pickle', 'itertools', 'gc', 'math', 'matplotlib.pyplot', 'dateutil.easter'] ['MaxNLocator', 'FormatStrFormatter', 'PercentFormatter', 'datetime', 'date', 'timedelta', 'StandardScaler', 'GroupKFold', 'LinearRegression', 'HuberRegressor', 'Ridge', 'Lasso', 'norm']Dict:{'pandas': ['read_csv', 'date_range', 'to_timedelta', 'concat', 'to_datetime'], 'numpy': ['mean', 'abs', 'sum', 'round', 'std', 'copy'], 'pickle': [], 'itertools': ['groupby'], 'gc': [], 'math': [], 'matplotlib': [], 'dateutil': [], 'datetime': [], 'sklearn': [], 'scipy': ['mean', 'std']} axis_0: 0, axis_1: 8
riiid-target-encoding-sgd.py : ['join', 'get', 'get', 'agg', 'groupby', 'iterrows', 'get', 'get', 'apply', 'fillna', 'fillna', 'transform', 'concat', 'read_csv'] ['numpy', 'pandas', 'os', 'riiideducation'] ['Counter', 'StandardScaler', 'SGDClassifier', 'roc_auc_score']Dict:{'numpy': [], 'pandas': ['concat', 'read_csv'], 'os': [], 'collections': ['get'], 'sklearn': [], 'riiideducation': []} axis_0: 0, axis_1: 1
feature-0-beyond-feature-0.py : ['read_csv', 'sample', 'fillna', 'astype', 'sample', 'mean', 'mean', 'drop', 'sample', 'mean', 'mean', 'groupby', 'read_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'plotly.express', 'plotly.graph_objects', 'trimap', 'lightgbm', 'lightgbm'] ['List', 'cross_val_score', 'cross_val_score']Dict:{'typing': [], 'numpy': ['mean'], 'pandas': ['read_csv'], 'matplotlib': [], 'plotly': [], 'trimap': [], 'lightgbm': [], 'sklearn': []} axis_0: 2, axis_1: 1
feature-engineering-for-anonymized-data.py : ['clip', 'sum', 'read_csv', 'read_csv', 'drop', 'drop', 'select_dtypes', 'concat', 'transform', 'transform', 'copy', 'drop', 'sort_values', 'corr', 'sort_values', 'nunique', 'map', 'mean', 'groupby', 'map', 'std', 'groupby', 'map', 'median', 'groupby', 'drop', 'mean', 'std', 'drop', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['StratifiedKFold', 'LabelEncoder', 'CatBoostClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'clip', 'std', 'copy'], 'pandas': ['concat', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'sklearn': ['transform'], 'catboost': [], 'warnings': []} axis_0: 0, axis_1: 5
nlp-basic-eda-cleaning-lstm-lb-0-79.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'sum', 'drop', 'head', 'unique', 'value_counts', 'sample', 'concat', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'mean', 'apply', 'apply', 'head', 'describe', 'apply', 'join', 'replace', 'tail', 'drop', 'head', 'head', 'head', 'apply', 'join', 'replace', 'head', 'to_csv'] ['numpy', 'pandas', 'string', 'seaborn', 'matplotlib.pyplot', 'tensorflow', 'warnings'] ['Tokenizer', 'pad_sequences', 'Dense', 'Embedding', 'GlobalAveragePooling1D', 'LSTM', 'Dropout', 'EarlyStopping', 'STOPWORDS', 'train_test_split']Dict:{'numpy': ['mean', 'sum', 'unique'], 'pandas': ['concat', 'unique', 'read_csv', 'value_counts'], 'string': [], 'seaborn': [], 'matplotlib': [], 'tensorflow': [], 'wordcloud': [], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 3
bike-sharing-demand-rmsle-0-3194.py : ['read_csv', 'read_csv', 'copy', 'copy', 'head', 'unique', 'info', 'sum', 'isnull', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'describe', 'boxplot', 'unique', 'hist', 'hist', 'hist', 'hist', 'corr', 'array', 'get_dummies', 'concat', 'head', 'get_dummies', 'concat', 'head', 'get_dummies', 'concat', 'head', 'get_dummies', 'concat', 'head', 'drop', 'head', 'drop', 'head', 'map', 'head', 'map', 'head', 'drop', 'head', 'corr', 'array', 'drop', 'head', 'copy', 'describe', 'unique', 'head', 'groupby', 'drop', 'drop', 'to_csv'] ['warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'missingno'] ['style', 'LogisticRegression', 'LinearSVC', 'SVC', 'KNeighborsClassifier', 'RandomForestClassifier', 'GradientBoostingClassifier', 'DecisionTreeClassifier', 'GaussianNB', 'LinearRegression', 'Ridge', 'Lasso', 'RidgeCV', 'RandomForestRegressor', 'BaggingRegressor', 'GradientBoostingRegressor', 'AdaBoostRegressor', 'SVR', 'KNeighborsRegressor', 'train_test_split', 'cross_validate', 'KFold', 'GridSearchCV', 'mean_squared_log_error', 'mean_squared_error', 'r2_score', 'mean_absolute_error', 'accuracy_score', 'precision_score', 'recall_score', 'f1_score']Dict:{'warnings': [], 'numpy': ['sum', 'unique', 'info', 'array', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'array'], 'matplotlib': [], 'seaborn': ['boxplot'], 'missingno': [], 'sklearn': []} axis_0: 0, axis_1: 10
tps-dec-2021-a-complete-guide-eda-pytorch.py : ['sum', 'memory_usage', 'max', 'max', 'max', 'astype', 'sum', 'memory_usage', 'drop', 'drop', 'head', 'value_counts', 'astype', 'sample', 'sample', 'keys', 'head', 'sum', 'any', 'isna', 'sum', 'any', 'isna', 'sort_values', 'describe', 'sort_values', 'describe', 'drop', 'drop', 'skew', 'nunique', 'nunique', 'corr', 'keys', 'head', 'abs', 'abs', 'abs', 'abs', 'clip', 'clip', 'reset_index', 'keys', 'astype', 'astype', 'astype', 'reset_index', 'drop', 'drop', 'astype', 'astype', 'head', '__init__', 'eq', 'sum', 'join', 'items', 'update', 'update', 'eval', 'update', 'update', 'apply', 'transform', 'transform', 'eval', 'max', 'to_csv', 'sort_values'] ['numpy', 'pandas', 'datatable', 'seaborn', 'matplotlib.pyplot', 'torch', 'torch.nn', 'torch.optim', 'random', 'warnings'] ['KNeighborsClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'GaussianNB', 'XGBClassifier', 'Dataset', 'DataLoader', 'ReduceLROnPlateau', 'StandardScaler', 'KFold', 'StratifiedKFold', 'LabelEncoder', 'tqdm_notebook', 'defaultdict', 'deepcopy', 'TabNetMultiTaskClassifier', 'summary', 'summary']Dict:{'numpy': ['any', 'max', 'abs', 'sum', 'clip'], 'pandas': ['isna', 'eval', 'value_counts'], 'datatable': [], 'seaborn': [], 'matplotlib': [], 'sklearn': ['transform', '__init__'], 'xgboost': ['apply', '__init__'], 'torch': ['__init__'], 'random': ['sample'], 'tqdm': ['update', '__init__'], 'collections': ['items', 'keys', 'update', '__init__'], 'copy': ['__init__'], 'warnings': [], 'pytorch_tabnet': []} axis_0: 0, axis_1: 2
ventilator-pressure-eda-and-simple-submission.py : ['update', 'read_csv', 'read_csv', 'read_csv', 'nunique', 'nunique', 'unique', 'count', 'groupby', 'unique', 'count', 'groupby', 'sum', 'isnull', 'max', 'max', 'query', 'reset_index', 'query', 'nunique', 'value_counts', 'value_counts', 'crosstab', 'crosstab', 'value_counts', 'max', 'array', 'min', 'max', 'median', 'reset_index', 'query', 'array', 'min', 'max', 'median', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'reset_index', 'query', 'mean', 'reset_index', 'query', 'reset_index', 'query', 'min', 'reset_index', 'query', 'reset_index', 'query', 'cumsum', 'groupby', 'cumsum', 'groupby', 'reset_index', 'query', 'fillna', 'shift', 'groupby', 'fillna', 'shift', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'drop', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['enable_hist_gradient_boosting', 'HistGradientBoostingRegressor']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'min', 'unique', 'array', 'cumsum'], '': [], 'pandas': ['read_csv', 'isnull', 'value_counts', 'unique', 'array', 'crosstab'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 1
tpsapr22-bootstrappingensemble-pipeline.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'info', 'info', 'value_counts', 'unique', 'astype', 'astype', 'astype', 'astype', 'transform', 'astype', 'astype', 'info', 'info', 'merge', 'corr', 'drop', 'corr', 'drop', 'pivot_table', 'set_index', 'drop_duplicates', 'sum', 'sort_values', 'query', 'query', 'transpose', 'describe', 'transpose', 'describe', 'agg', 'groupby', 'drop_duplicates', 'transpose', 'describe', 'transpose', 'describe', 'isin', 'transpose', 'describe', 'isin', 'transpose', 'describe', 'pivot_table', 'reset_index', 'nunique', 'groupby', 'drop_duplicates', 'sum', 'transpose', 'describe', 'transpose', 'describe', 'groupby', 'concat', 'add_prefix', 'mean', 'add_prefix', 'std', 'add_prefix', 'clip', 'std', 'abs', 'mean', 'concat', 'add_prefix', 'agg', 'groupby', 'add_prefix', 'agg', 'groupby', 'pivot', 'sum', 'diff', 'sum', 'diff', 'sum', 'clip', 'diff', 'sum', 'clip', 'diff', 'max', 'diff', 'min', 'diff', 'merge', 'drop_duplicates', 'merge', 'agg', 'groupby', 'drop_duplicates', 'set_index', 'clip', 'merge', 'droplevel', 'sort_values', 'sample', 'reset_index', 'mean', 'rolling', 'concat', 'transpose', 'rename', 'describe', 'copy', 'set_index', 'drop_duplicates', 'drop', 'transform', 'to_csv', 'rename', 'reset_index', 'mean'] ['numpy', 'matplotlib.pyplot', 'seaborn', 'modin.pandas'] ['iqr', 'mode', 'kurtosis', 'colored', 'filterwarnings', 'collect', 'DataFrame', 'merge', 'init', 'patch_sklearn', 'gen_features', 'DataFrameMapper', 'TransformerMixin', 'BaseEstimator', 'Pipeline', 'make_pipeline', 'FunctionTransformer', 'RobustScaler', 'StandardScaler', 'SequentialFeatureSelector', 'GroupKFold', 'cross_val_score', 'roc_auc_score', 'roc_curve', 'HistGradientBoostingClassifier']Dict:{'numpy': ['transpose', 'mean', 'max', 'diff', 'abs', 'sum', 'min', 'unique', 'clip', 'isin', 'info', 'std', 'copy'], 'scipy': [], 'termcolor': [], 'warnings': [], 'gc': [], 'matplotlib': [], 'seaborn': [], 'pandas': [], 'modin': [], 'ray': [], 'sklearnex': [], 'sklearn_pandas': [], 'sklearn': []} axis_0: 4, axis_1: 14
wids-boost-starter.py : ['read_csv', 'to_datetime', 'reset_index', 'sort_values', 'read_csv', 'to_datetime', 'reset_index', 'sort_values', 'concat', 'keys', 'groupby', 'groupby', 'concat', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'min', 'max', 'count', 'groupby', 'reset_index', 'apply', 'count', 'groupby', 'reset_index', 'apply', 'groupby', 'unique', 'nunique', 'groupby', 'sum', 'isnull', 'sum', 'isnull', 'concat', 'rename', 'round', 'sort_values', 'drop', 'transform', 'groupby', 'fillna', 'mean', 'transform', 'groupby', 'fillna', 'mode', 'drop', 'read_csv', 'set_index', 'corr', 'sort_values', 'sort_values', 'sort_values', 'apply', 'groupby', 'join', 'reset_index', 'read_csv', 'to_csv', 'join', 'agg', 'groupby', 'reset_index', 'read_csv', 'to_csv', 'join', 'merge', 'merge', 'apply', 'drop', 'shift', 'groupby', 'mean', 'rolling', 'shift', 'groupby', 'qcut', 'to_pickle', 'to_pickle', 'concat', 'to_pickle', 'read_pickle', 'apply', 'apply', 'astype', 'unique', 'unique', 'transform', 'astype', 'astype', 'replace', 'set_index', 'set_index', 'drop', 'drop', 'astype', 'astype', 'astype', 'astype', 'concat', 'astype', '__init__', 'sort_values', 'to_csv', '__init__', 'sort_values', 'to_csv', '__init__', 'astype', 'astype', 'sort_values', 'to_csv', 'to_csv', 'head', 'min', 'max', 'min', 'max', 'min', 'max', 'to_csv', 'min', 'max'] ['numpy', 'pandas', 'os', 'gc', 'sys', 'pickle', 'glob', 'pandas', 'random', 'sys', 'warnings', 'catboost', 'lightgbm', 'joblib', 'pickle', 'uuid', 'logging', 'seaborn', 'matplotlib.pyplot', 'matplotlib.colors', 'plotly.express', 'plotly.graph_objects', 'xgboost'] ['LabelEncoder', 'mean_squared_error', 'tqdm_notebook', 'partial', 'reduce', 'StratifiedKFold', 'KFold', 'roc_auc_score', 'roc_curve', 'auc', 'Pool', 'tqdm_notebook', 'make_subplots', 'init_notebook_mode']Dict:{'numpy': ['mean', 'max', 'sum', 'round', 'min', 'unique'], 'pandas': ['to_pickle', 'read_csv', 'isnull', 'concat', 'read_pickle', 'unique', 'qcut', 'merge', 'to_datetime'], 'os': ['rename', 'replace'], 'gc': [], 'sys': [], 'pickle': [], 'glob': [], 'sklearn': ['__init__'], 'random': [], 'tqdm': [], 'functools': ['__init__'], 'warnings': [], 'catboost': [], 'lightgbm': [], 'joblib': [], 'uuid': [], 'logging': [], 'seaborn': [], 'matplotlib': [], 'plotly': ['__init__'], 'xgboost': []} axis_0: 0, axis_1: 7
votingregressor-7-models-165-features-optuna.py : ['head', 'unique', 'agg', 'sum', 'join', 'join', 'join', 'join', 'filter', 'agg', 'concat', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'apply', 'median', 'apply', 'drop', 'agg', 'sum', 'mean', 'std', 'median', 'min', 'max', 'quantile', 'agg', 'shift', 'filter', 'agg', 'max', 'median', 'mean', 'std', 'sum', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'shift', 'filter', 'count', 'agg', 'mean', 'std', 'count', 'median', 'max', 'first', 'last', 'filter', 'count', 'agg', 'mean', 'std', 'median', 'max', 'first', 'last', 'join', 'join', 'join', 'join', 'join', 'join', 'to_csv', 'quantile', 'quantile', 'apply', 'groupby', 'unique', 'merge', 'rename', 'copy', 'apply', 'explode', 'apply', 'agg', 'groupby', 'join', 'reset_index', 'copy', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'copy', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'copy', 'copy', 'rename', 'reset_index', 'agg', 'groupby', 'isin', 'merge', 'copy', 'reset_index', 'agg', 'groupby', 'isin', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'to_csv', 'read_csv', 'merge', 'any', 'isna', 'drop', 'drop', 'abs', 'astype', 'mean', 'mean', 'update', 'update', 'to_csv'] ['re', 'random', 'torch', 'pickle', 'gc', 'os', 'sklearn', 'optuna', 'lightgbm', 'polars', 'pandas', 'numpy', 'ctypes', 'warnings'] ['Path', 'LGBMRegressor', 'XGBRegressor', 'CatBoostRegressor', 'Lasso', 'Ridge', 'RandomForestRegressor', 'RobustScaler', 'FunctionTransformer', 'Pipeline', 'SimpleImputer', 'VotingRegressor', 'SVR', 'StratifiedKFold', 'train_test_split', 'mean_squared_error', 'skew', 'kurtosis']Dict:{'re,': [], 'random,': [], 'torch,': [], 'pickle,': [], 'gc,': [], 'os,': [], 'sklearn': [], 'optuna': [], 'lightgbm': [], 'polars': ['mean', 'median', 'quantile', 'read_csv', 'any', 'first', 'max', 'head', 'sum', 'last', 'concat', 'apply', 'min', 'count', 'std'], 'pandas': ['isna', 'read_csv', 'concat', 'unique', 'merge'], 'numpy': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'min', 'unique', 'isin', 'std', 'copy'], 'pathlib': ['rename', 'replace'], 'xgboost': ['apply'], 'catboost': [], 'scipy': [], 'ctypes': [], 'warnings': []} axis_0: 0, axis_1: 5
extensive-data-preprocessing-and-modeling.py : ['read_csv', 'read_csv', 'head', 'head', 'concat', 'value_counts', 'select_dtypes', 'head', 'hist', 'astype', 'value_counts', 'corr', 'nlargest', 'drop', 'reset_index', 'drop', 'reset_index', 'drop', 'reset_index', 'drop', 'concat', 'astype', 'value_counts', 'any', 'isnull', 'sum', 'isnull', 'isnull', 'count', 'sum', 'isnull', 'fillna', 'fillna', 'mode', 'fillna', 'median', 'drop', 'apply', 'head', 'reset_index', 'set_index', 'head', 'corr', 'sort_values', 'sort_values', 'transform', 'groupby', 'fillna', 'median', 'any', 'isna', 'skew', 'kurt', 'skew', 'skew', 'select_dtypes', 'sort_values', 'select_dtypes', 'skew', 'skew', 'skew', 'skew', 'concat', 'update', 'transform', 'astype', 'select_dtypes', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'astype', 'select_dtypes', 'select_dtypes', 'get_dummies', 'concat', 'concat', 'head', 'head', 'round', 'round', 'mean', 'round', 'round', 'sort_values', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'warnings'] ['iplot', 'init_notebook_mode', 'LabelEncoder', 'RobustScaler', 'LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'KernelRidge', 'DecisionTreeRegressor', 'SVR', 'KNeighborsRegressor', 'PLSRegression', 'RandomForestRegressor', 'ExtraTreesRegressor', 'AdaBoostRegressor', 'GradientBoostingRegressor', 'XGBRegressor', 'LGBMRegressor', 'train_test_split', 'mean_squared_error', 'cross_val_score', 'GridSearchCV']Dict:{'numpy': ['mean', 'median', 'any', 'sum', 'round'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': ['hist'], 'seaborn': [], 'plotly': [], 'warnings': [], 'sklearn': ['apply'], 'xgboost': ['apply'], 'lightgbm': []} axis_0: 1, axis_1: 3
twosigmarenthop-advanced-feature-engineering.py : ['read_json', 'read_json', 'apply', 'apply', 'apply', 'apply', 'concat', 'to_datetime', 'apply', 'to_datetime', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'sub', 'apply', 'apply', 'sub', 'apply', 'apply', 'apply', 'apply', 'sub', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'reset_index', 'agg', 'groupby', 'min', 'max', 'median', 'mean', 'merge', 'reset_index', 'agg', 'groupby', 'min', 'max', 'median', 'mean', 'merge', 'apply', 'apply', 'astype', 'astype', 'apply', 'join', 'join', 'apply', 'join', 'join', 'transform', 'replace', 'copy', 'copy', 'astype', 'mean', 'agg', 'groupby', 'drop', 'join', 'fillna', 'join', 'copy', 'copy', 'fillna', 'join', 'fillna', 'join', 'transform', 'merge', 'concat', 'transform', 'concat', 'concat', 'min', 'max', 'apply', 'reset_index', 'mean', 'groupby', 'merge', 'astype', 'apply', 'rank', 'groupby', 'apply', 'count', 'apply', 'count', 'apply', 'count', 'apply', 'count', 'apply', 'count', 'apply', 'count', 'apply', 'apply', 'unique', 'max', 'min', 'reset_index', 'agg', 'groupby', 'keys', 'merge', 'rank', 'groupby', 'drop', 'mean', 'min', 'max', 'std', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'mean', 'mean', 'min', 'max', 'std', 'concat', 'concat', 'apply', 'transform', 'apply', 'transform', 'mean', 'array', 'apply', 'groupby', 'head', 'apply', 'array', 'apply', 'groupby', 'apply', 'array', 'apply', 'groupby', 'apply', 'array', 'read_csv', 'merge'] ['numpy', 'pandas', 'xgboost', 're', 'string', 'time', 'seaborn', 'itertools', 'lightgbm', 'matplotlib.pyplot', 'pickle', 'math', 'numpy', 'pandas', 'hashlib', 'spacy'] ['sparse', 'preprocessing', 'pipeline', 'metrics', 'model_selection', 'TfidfVectorizer', 'CountVectorizer', 'StratifiedKFold', 'product', 'CatBoostEncoder', 'PolynomialWrapper', 'skew', 'kurtosis', 'vincenty', 'KMeans', 'FastText']Dict:{'numpy': ['mean', 'median', 'max', 'array', 'min', 'unique', 'std', 'copy'], 'scipy': [], 'pandas': ['read_csv', 'read_json', 'concat', 'unique', 'array', 'merge', 'to_datetime'], 'xgboost': [], 're': ['sub'], 'string': [], 'time': [], 'seaborn': [], 'itertools': [], 'sklearn': [], 'lightgbm': [], 'matplotlib': [], 'pickle': [], 'math': [], 'category_encoders': [], 'hashlib': [], 'geopy': [], 'spacy': [], '##': [], 'Spacy': [], 'is': [], 'the': [], 'de-facto': [], 'NLP': [], 'tool': [], 'used': [], 'by': [], 'industry': [], 'gensim': []} axis_0: 1, axis_1: 45
exploratory-study-on-feature-selection.py : ['read_csv', 'describe', 'skew', 'groupby', 'corr', 'std', 'drop', 'boxplot', 'median', 'to_string'] ['warnings', 'pandas', 'numpy', 'seaborn', 'matplotlib.pyplot'] ['cross_validation', 'Imputer', 'StandardScaler', 'MinMaxScaler', 'Normalizer', 'ExtraTreesClassifier', 'GradientBoostingClassifier', 'RandomForestClassifier', 'XGBClassifier', 'RFE', 'LogisticRegression', 'SelectPercentile', 'f_classif']Dict:{'warnings': [], 'pandas': ['read_csv'], '#provides': [], 'data': [], 'structures': [], 'to': [], 'quickly': [], 'analyze': [], 'numpy': ['median', 'std'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 7
cmi-gradient-boosting.py : ['read_parquet', 'apply', 'to_datetime', 'tz_localize', 'astype', 'fillna', 'diff', 'groupby', 'astype', 'fillna', 'diff', 'groupby', 'astype', 'fillna', 'fillna', 'mean', 'rolling', 'astype', 'fillna', 'fillna', 'mean', 'rolling', 'astype', 'fillna', 'fillna', 'max', 'rolling', 'astype', 'fillna', 'fillna', 'max', 'rolling', 'astype', 'fillna', 'fillna', 'std', 'rolling', 'astype', 'fillna', 'fillna', 'std', 'rolling', 'astype', 'fillna', 'fillna', 'mean', 'rolling', 'astype', 'fillna', 'fillna', 'mean', 'rolling', 'astype', 'fillna', 'fillna', 'max', 'rolling', 'astype', 'fillna', 'fillna', 'max', 'rolling', 'read_parquet', 'fillna', 'fillna', 'mean', 'rolling', 'fillna', 'fillna', 'mean', 'rolling', 'round', 'isnull', 'reset_index', 'reset_index', 'copy', 'to_csv'] ['numpy', 'pandas', 'gc'] ['groupby']Dict:{'numpy': ['mean', 'max', 'round', 'diff', 'std', 'copy'], 'pandas': ['read_parquet', 'to_datetime', 'isnull'], 'itertools': [], 'gc': []} axis_0: 0, axis_1: 0
eda-adversarial-validation-and-simple-xgboost.py : ['read_csv', 'head', 'read_csv', 'head', 'describe', 'sum', 'isna', 'nunique', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'hist', 'nunique', 'boxplot', 'corr', 'drop', 'copy', 'drop', 'concat', 'copy', 'drop', 'head', 'copy', 'copy', 'head', 'sort_values', 'unique', 'unique', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['StratifiedKFold', 'KFold', 'XGBClassifier', 'XGBRegressor', 'roc_auc_score', 'mean_squared_log_error']Dict:{'numpy': ['sum', 'unique', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 1
lightgbm-hyperparameter-optimisation-lb-0-761.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'apply', 'fillna', 'fillna', 'fillna', 'isnull', 'fillna', 'isnull', 'fillna', 'isnull', 'fillna', 'isnull', 'fillna', 'isnull', 'fillna', 'isnull', 'fillna', 'get_dummies', 'get_dummies', 'drop', 'drop', 'sum', 'memory_usage', 'sum', 'memory_usage', 'sum', 'memory_usage', 'sum', 'memory_usage', 'sum', 'memory_usage', 'sum', 'memory_usage', 'factorize', 'sum', 'memory_usage', 'sum', 'memory_usage', 'drop', 'drop', 'nlargest', 'drop', 'to_csv'] ['numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'os', 'lightgbm', 'lightgbm'] ['train_test_split', 'randint', 'uniform', 'RandomizedSearchCV', 'GridSearchCV']Dict:{'numpy': ['sum', 'max', 'min'], 'pandas': ['factorize', 'get_dummies', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'os': [], 'sklearn': [], 'lightgbm': [], 'scipy': []} axis_0: 0, axis_1: 6
pytanic.py : ['read_csv', 'read_csv', 'concat', 'drop', 'head', 'describe', 'sum', 'isnull', 'info', 'dropna', 'dropna', 'dropna', 'dropna', 'median', 'dropna', 'median', 'dropna', 'crosstab', 'dropna', 'dropna', 'head', 'dropna', 'nunique', 'count', 'groupby', 'corr', 'drop', 'dropna', 'dropna', 'dropna', 'dropna', 'dropna', 'crosstab', 'div', 'astype', 'sum', 'crosstab', 'div', 'astype', 'sum', 'crosstab', 'div', 'astype', 'sum', 'crosstab', 'div', 'astype', 'sum', 'crosstab', 'div', 'astype', 'sum', 'dropna', 'dropna', 'max', 'dropna', 'dropna', 'dropna', 'max', 'dropna', 'dropna', 'dropna', 'max', 'dropna', 'boxplot', 'isnull', 'groupby', 'where', 'isnull', 'isnull', 'median', 'dropna', 'concat', 'drop', 'isnull', 'isnull', 'fillna', 'astype', 'isin', 'isin', 'where', 'transform', 'groupby', 'transform', 'groupby', 'where', 'where', 'crosstab', 'crosstab', 'crosstab', 'div', 'astype', 'sum', 'crosstab', 'div', 'astype', 'sum', 'unique', 'unique', 'crosstab', 'crosstab', 'crosstab', 'div', 'astype', 'sum', 'crosstab', 'div', 'astype', 'sum', 'crosstab', 'div', 'astype', 'sum', 'crosstab', 'crosstab', 'crosstab', 'crosstab', 'count', 'groupby', 'mean', 'groupby', 'unique', 'isin', 'hist', 'crosstab', 'crosstab', 'dropna', 'dropna', 'max', 'dropna', 'dropna', 'dropna', 'max', 'dropna', 'dropna', 'dropna', 'max', 'dropna', 'head', 'astype', 'crosstab', 'hist', 'transform', 'groupby', 'sum', 'transform', 'groupby', 'where', 'transform', 'groupby', 'dropna', 'dropna', 'max', 'dropna', 'dropna', 'dropna', 'max', 'dropna', 'dropna', 'dropna', 'max', 'dropna', 'std', 'groupby', 'std', 'groupby', 'boxplot', 'crosstab', 'concat', 'drop', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'corr', 'drop', 'dropna', 'transpose', 'dropna', 'dropna', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'sort_values', 'transpose', 'astype', 'sum', 'max', 'product', 'mean', 'std', 'sort_values', 'transpose', 'transpose', 'transpose', 'transpose', 'transpose', 'transpose', 'transpose', 'median', 'sort_values', 'mean', 'std', 'median', 'head', 'corr', 'mean', 'std', 'fillna', 'to_csv', 'head'] ['warnings', 'pandas', 'numpy', 'sklearn', 'itertools', 'matplotlib.pyplot', 'matplotlib.gridspec', 'seaborn', 'xgboost', 'lightgbm', 'warnings', 'matplotlib.pyplot', 'numpy'] ['stats', 'mosaic', 'LogisticRegression', 'Perceptron', 'tree', 'GaussianNB', 'KNeighborsClassifier', 'RandomForestClassifier', 'ExtraTreesClassifier', 'BaggingClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'VotingClassifier', 'svm', 'StackingClassifier', 'cross_val_score', 'KFold', 'confusion_matrix', 'train_test_split', 'GridSearchCV']Dict:{'warnings': [], 'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'crosstab'], 'numpy': ['transpose', 'mean', 'median', 'product', 'max', 'sum', 'where', 'unique', 'isin', 'info', 'std'], 'scipy': ['describe'], 'sklearn': ['transform'], 'itertools': ['count', 'product', 'groupby'], 'matplotlib': [], 'seaborn': ['boxplot'], 'statsmodels': [], 'xgboost': [], 'lightgbm': [], 'mlxtend': []} axis_0: 12, axis_1: 5
baselines-with-eda-and-feature-engineering.py : ['join', 'read_csv', 'read_csv', 'head', 'describe', 'info', 'mean', 'std', 'abs', 'sum', 'sum', 'reset_index', 'count', 'groupby', 'reset_index', 'count', 'groupby', 'max', 'corr', 'drop', 'drop', 'mean', 'mean', 'mean', 'transform', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'to_csv', 'transform', 'transform', 'to_csv', 'mean'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'scipy.stats', 'os'] ['LocalOutlierFactor', 'KFold', 'mean_squared_error', 'LinearRegression', 'XGBRegressor', 'LGBMRegressor', 'norm', 'Earth', 'OrdinalEncoder', 'OneHotEncoder', 'PCA']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'info', 'std'], 'pandas': ['read_csv'], 'matplotlib': [], 'seaborn': [], 'sklearn': ['transform'], 'xgboost': [], 'lightgbm': [], 'scipy': ['describe'], 'pyearth': [], 'os': []} axis_0: 0, axis_1: 0
openvaccine-gcn.py : ['read_json', 'head', 'stack', 'where', 'read_json', 'isin', 'query', 'query', '__init__', 'stack', 'where', 'sum', 'stack', '__init__', '__init__', 'squeeze', '__init__', 'mean', 'mean', 'sum', 'count', 'sum', 'count', 'sum', 'count', 'update', 'eval', 'update', 'get', 'get', 'array', 'eval', 'read_json', 'query', 'query', 'concat', 'head', 'read_csv', 'merge', 'to_csv', 'head'] ['torch', 'warnings', 'os', 'shutil', 'pandas', 'numpy', 'seaborn', 'math', 'json', 'matplotlib.pyplot', 'matplotlib.colors', 'seaborn', 'colorsys', 'torch.nn', 'forgi.graph.bulge_graph', 'forgi.visual.mplotlib', 'forgi.threedee.utilities.vector', 'forgi', 'RNA', 'torch', 'torch.nn.functional', 'torch.nn.functional', 'gc', 'matplotlib.pyplot', 'gc'] ['cm', 'tqdm', 'train_test_split', 'KFold', 'InMemoryDataset', 'Data', 'DataLoader', 'GCNConv', 'Sequential', 'Linear', 'ReLU', 'GRU', 'NNConv', 'Set2Set', 'MSELoss']Dict:{'torch': ['eval', '__init__'], 'warnings': [], 'os': [], 'shutil': [], 'pandas': ['read_csv', 'eval', 'read_json', 'concat', 'array', 'merge'], 'math,': [], 'json': [], 'matplotlib': ['get'], 'seaborn': [], 'colorsys': [], 'tqdm': ['update', '__init__'], 'sklearn': ['__init__'], 'forgi': [], 'RNA': [], 'torch_geometric': [], 'gc': []} axis_0: 0, axis_1: 1
one-stop-easy-understanding-eda-model-catboost.py : ['read_csv', 'head', 'read_csv', 'head', 'info', 'corr', 'hist', 'drop', 'drop', 'concat', 'sum', 'isna', 'sort_values', 'where', 'apply', 'apply', 'apply', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'sum', 'isna', 'drop', 'select_dtypes', 'select_dtypes', 'any', 'isna', 'isna', 'dropna', 'isna', 'concat', 'update', 'fillna', 'sum', 'isna', 'apply', 'apply', 'apply', 'get_dummies', 'sort_values', 'apply', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib.style', 'matplotlib.gridspec', 'statsmodels.api', 'seaborn', 'plotly', 'plotly.express', 'plotly.graph_objs', 'shap', 'xgboost'] ['stats', 'norm', 'skew', 'init_notebook_mode', 'iplot', 'KNeighborsRegressor', 'Pool', 'SVR', 'CatBoostRegressor', 'LGBMRegressor', 'GaussianNB', 'DecisionTreeRegressor', 'StackingRegressor', 'LinearRegression', 'BayesianRidge', 'RepeatedKFold', 'KFold', 'cross_val_score', 'train_test_split', 'GradientBoostingRegressor', 'RandomForestRegressor', 'GridSearchCV', 'RandomizedSearchCV', 'mean_squared_error', 'mean_absolute_error', 'mean_squared_log_error']Dict:{'numpy': ['mean', 'any', 'sum', 'where', 'info', 'std'], 'pandas': ['concat', 'get_dummies', 'isna', 'read_csv'], 'matplotlib': [], 'statsmodels': [], 'seaborn': [], 'scipy': [], 'plotly': [], 'sklearn': [], 'shap': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'mlxtend': []} axis_0: 1, axis_1: 1
tutorial-time-series-exploration-crypto-price.py : ['read_csv', 'join', 'head', 'astype', 'astype', 'read_csv', 'join', 'head', 'set_index', 'set_index', 'info', 'sum', 'isna', 'head', 'value_counts', 'reindex', 'head', 'value_counts', 'apply', 'astype', 'set_index', 'head', 'head', 'copy', 'head', 'apply', 'head', 'mean', 'groupby', 'reset_index', 'head', 'concat', 'shift', 'head', 'concat', 'shift', 'shift', 'shift', 'head', 'shift', 'rolling', 'mean', 'concat', 'head', 'expanding', 'concat', 'min', 'mean', 'max', 'shift', 'head', 'head', 'diff', 'head', 'groupby', 'hist', 'groupby', 'groupby', 'mean', 'groupby', 'join', 'boxplot', 'dropna', 'min', 'max', 'min', 'dropna', 'groupby', 'join', 'mean', 'groupby', 'mean', 'groupby', 'shift', 'concat', 'mean', 'groupby', 'rolling', 'mean', 'rolling', 'mean', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'mean', 'describe', 'groupby', 'mean', 'groupby', 'join', 'boxplot', 'mean', 'groupby', 'mean', 'groupby', 'items', 'diff', 'concat', 'shift', 'groupby', 'groupby', 'concat', 'shift', 'head', 'describe', 'array'] ['pandas', 'numpy', 'os', 'time', 'matplotlib.pyplot', 'plotly.graph_objects', 'seaborn'] ['datetime', 'lag_plot', 'autocorrelation_plot', 'boxcox', 'seed', 'random', 'autocorrelation_plot', 'adfuller', 'mean_squared_error', 'sqrt', 'seasonal_decompose', 'seasonal_decompose', 'PolynomialFeatures', 'LinearRegression', 'curve_fit', 'mean_squared_error', 'r2_score', 'qqplot']Dict:{'pandas': [], 'numpy': ['mean', 'max', 'diff', 'sum', 'min', 'info', 'array', 'copy'], 'os': [], '': [], 'time': [], 'matplotlib': ['boxplot', 'hist'], 'datetime': ['min', 'max'], 'plotly': [], 'scipy': [], 'random': [], 'statsmodels': [], 'sklearn': [], 'math': [], 'seaborn': ['boxplot']} axis_0: 0, axis_1: 9
using-neural-network.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'sub', 'drop', 'sum', 'sum', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'value_counts', 'value_counts', 'map', 'map', 'map', 'map', 'map', 'astype', 'to_datetime', 'to_datetime', 'groupby', 'query', 'sum', 'sum', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'mean', 'update', 'keys', 'groupby', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'sum', 'transform', 'groupby', 'any', 'notnull', 'head', 'value_counts', 'drop', 'drop', 'drop', 'astype', 'sort_values', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'mean', 'mean', 'astype', 'cut', 'cut', 'transform', 'to_csv', 'value_counts', 'value_counts', 'hist'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 're', 'codecs', 'time', 'datetime', 'gc', 'copy', 'warnings', 'lightgbm', 'keras', 'keras.backend', 'sklearn.metrics', 'scipy'] ['tqdm_notebook', 'jit', 'Counter', 'Any', 'RandomForestClassifier', 'RandomForestRegressor', 'binary_crossentropy', 'categorical_crossentropy', 'to_categorical', 'Dense', 'Input', 'Flatten', 'concatenate', 'Dropout', 'Lambda', 'BatchNormalization', 'Activation', 'Sequential', 'Model', 'Callback', 'EarlyStopping', 'ModelCheckpoint', 'Adam', 'optimizers', 'np_utils', 'preprocessing', 'KFold', 'train_test_split', 'GridSearchCV', 'mean_squared_error', 'confusion_matrix', 'OneHotEncoder', 'LabelEncoder', 'scale', 'MinMaxScaler', 'StandardScaler', 'model_selection', 'class_weight', 'is_datetime64_any_dtype', 'is_categorical_dtype', 'partial']Dict:{'numpy': ['mean', 'any', 'max', 'sum', 'min', 'unique', 'isin', 'copy'], 'pandas': [], 'seaborn': [], 'matplotlib': ['hist'], 'tqdm': ['update'], 're': ['sub'], 'codecs': [], 'time': [], 'datetime': [], 'gc': [], 'numba': [], 'collections': ['keys', 'update', 'copy'], 'copy': ['copy'], 'typing': [], 'warnings': [], 'sklearn': [], 'lightgbm': [], 'keras': [], 'functools': [], 'scipy': []} axis_0: 0, axis_1: 8
featureaggregator-end-to-end-feature-engineering.py : ['copy', 'agg', 'groupby', 'agg', 'groupby', 'reset_index', 'factorize', 'to_pickle', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'drop', 'apply', 'apply'] ['gc', 'glob', 'os', 'time', 'matplotlib.pyplot', 'numpy', 'pandas'] []Dict:{'gc': [], 'glob': [], 'os': [], 'time': [], 'matplotlib': [], 'numpy': ['copy'], 'pandas': ['to_pickle', 'factorize', 'read_csv']} axis_0: 0, axis_1: 4
83-feature-engineering-entropy-mtn-plot.py : ['read_json', 'where', 'where', 'sum', 'sum', 'array', 'array', 'array', 'array'] ['pandas', 'numpy', 'tempfile', 'os', 're', 'subprocess', 'tempfile', 'matplotlib.pyplot'] []Dict:{'pandas': ['array', 'read_json'], 'numpy': ['where', 'array', 'sum'], 'tempfile': [], 'os': [], '': [], 're': [], 'subprocess': [], 'matplotlib': []} axis_0: 1, axis_1: 0
titanic-dicaprio-s-safety-guide-h2o-automl.py : ['join', 'read_csv', 'read_csv', 'head', 'isna', 'isna', 'notnull', 'notnull', 'skew', 'reset_index', 'concat', 'drop', 'sum', 'isna', 'fillna', 'median', 'fillna', 'mode', 'sum', 'isna', 'sum', 'isna', 'isnull', 'median', 'median', 'sum', 'isna', 'head', 'notnull', 'apply', 'isnull', 'sum', 'isna', 'corr', 'bool', 'head', 'apply', 'replace', 'replace', 'head', 'apply', 'value_counts', 'drop', 'replace', 'replace', 'value_counts', 'skew', 'skew', 'map', 'map', 'map', 'select_dtypes', 'select_dtypes', 'drop', 'select_dtypes', 'get_dummies', 'concat', 'drop', 'head', 'drop', 'head', 'drop', 'head', 'read_csv', 'concat', 'head', 'to_csv'] ['plotly.express', 'plotly.graph_objects', 'plotly.figure_factory', 'plotly.figure_factory', 'matplotlib.pyplot', 'seaborn', 'numpy', 'pandas', 'os', 'h2o'] ['make_subplots', 'subplots', 'ProfileReport', 'metrics', 'stats', 'LabelEncoder', 'H2OAutoML']Dict:{'plotly': [], 'matplotlib': [], 'pandas_profiling': [], 'seaborn': [], 'sklearn': [], 'scipy': ['mode', 'skew'], 'numpy': ['median', 'sum'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'notnull'], 'os': ['replace'], 'h2o': []} axis_0: 1, axis_1: 7
s3e13-xgboost-catboost.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'describe', 'mean', 'isna', 'corr', 'drop', 'drop', 'head', 'value_counts', 'value_counts', 'set_index', 'set_index', 'applymap', 'concat', 'mean', 'join', 'mean', 'sub', 'to_csv'] ['warnings', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'os', 'umap.umap_', 'xgboost', 'catboost'] ['preprocessing', 'StandardScaler', 'TSNE', 'defaultdict', 'train_test_split', 'cross_val_score', 'KFold', 'accuracy_score', 'VotingClassifier']Dict:{'warnings': [], 'numpy': ['mean'], 'pandas': ['isna', 'concat', 'read_csv', 'value_counts'], 'seaborn': [], 'matplotlib': [], 'os': [], 'sklearn': [], 'umap': [], 'collections': [], 'xgboost': [], 'catboost': []} axis_0: 0, axis_1: 4
ubiquant-lgbm-training-baseline.py : ['corr', 'mean', 'apply', 'groupby', 'read_pickle', 'reset_index', 'corr', 'reset_index', 'corr', 'reset_index', 'corr', 'concat', 'sort_values', 'to_dict', 'mean', 'groupby', 'map', 'astype', 'array', 'array', 'astype', 'to_csv'] ['pandas', 'numpy', 'os', 'lightgbm', 'random', 'joblib', 'warnings', 'gc'] ['GroupKFold', 'tqdm']Dict:{'pandas': ['array', 'read_pickle', 'concat'], 'numpy': ['mean', 'array'], 'os': [], 'sklearn': [], 'lightgbm': [], 'tqdm': [], 'random': [], 'joblib': [], 'warnings': [], 'gc': []} axis_0: 0, axis_1: 0
lgbm-baseline-with-more-feature-engineering.py : ['diff', 'sum', 'unique', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'read_parquet', 'apply', 'groupby', 'apply', 'groupby', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'apply', 'drop', 'read_parquet', 'apply', 'groupby', 'sum', 'mean', 'std', 'max', 'min', 'mean', 'sum', 'max', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'diff', 'sum', 'unique', 'sum', 'mean', 'sum', 'mean', 'sum', 'diff', 'sum', 'diff', 'median', 'abs', 'mean', 'mean', 'median', 'abs', 'mean', 'sum', 'merge', 'merge', 'merge', 'merge', 'drop', 'add_prefix', 'apply', 'drop', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'drop', 'merge', 'concat', 'mean', 'drop', 'drop', 'astype', 'astype', 'unique', 'merge', 'unique', 'merge', 'to_csv'] ['os', 'glob', 'pandas', 'numpy', 'scipy', 'lightgbm', 'warnings'] ['Parallel', 'delayed', 'KFold']Dict:{'os': [], 'glob': [], 'joblib': [], 'pandas': ['read_csv', 'concat', 'read_parquet', 'unique', 'merge'], 'numpy': ['mean', 'median', 'max', 'abs', 'sum', 'min', 'unique', 'diff', 'std'], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 0
spaceship-titanic-data-science-solutions.py : ['read_csv', 'read_csv', 'head', 'sum', 'duplicated', 'value_counts', 'value_counts', 'nunique', 'sum', 'isna', 'sort_values', 'count', 'groupby', 'apply', 'items', 'count', 'groupby', 'reset_index', 'rename', 'sum', 'value_counts', 'value_counts', 'nunique', 'reset_index', 'count', 'groupby', 'reset_index', 'count', 'groupby', 'describe', 'describe', 'describe', 'describe', 'sort_values', 'count', 'groupby', 'apply', 'items', 'sum', 'concat', 'drop', 'sum', 'isna', 'round', 'fillna', 'mode', 'fillna', 'median', 'any', 'isna', 'transform', 'info', 'transform', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'warnings'] ['train_test_split', 'LabelEncoder', 'GridSearchCV', 'RandomizedSearchCV', 'RandomForestClassifier', 'GradientBoostingClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'accuracy_score', 'StackingClassifier']Dict:{'numpy': ['median', 'any', 'sum', 'round', 'info'], 'pandas': ['concat', 'isna', 'read_csv', 'value_counts'], 'seaborn': [], 'matplotlib': [], 'warnings': [], 'sklearn': ['transform'], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 4
ps-s3-e16-basicapproach-20230601.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'hist', 'copy', 'pop', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'transform', 'transform', 'transform', 'drop', 'drop', 'drop', 'drop', 'drop', 'corr', 'drop', 'corr', 'copy', 'corr', 'drop', 'corr', 'concat', 'drop_duplicates', 'concat', 'describe', 'drop', 'drop', 'describe', 'sort_values', 'reset_index', 'astype', 'drop', 'sort_values', 'reset_index', 'drop', 'concat', 'agg', 'groupby', 'reset_index', 'sort_values', 'mean', 'read_csv', 'info', 'describe', 'to_csv'] ['gc', 'math', 'random', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'optuna', 'warnings'] ['mean_absolute_error', 'mean_squared_error', 'roc_auc_score', 'train_test_split', 'cross_val_predict', 'KFold', 'LabelEncoder', 'StandardScaler', 'RandomForestClassifier', 'RandomForestRegressor', 'CatBoostRegressor', 'Pool']Dict:{'gc': [], 'math': [], 'random': [], 'numpy': ['mean', 'info', 'copy'], 'pandas': ['concat', 'read_csv'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 'catboost': [], 'lightgbm': [], 'xgboost': [], 'optuna': [], 'warnings': []} axis_0: 5, axis_1: 10
1st-and-future-2019-playing-surface-analysis.py : ['read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'rename', 'drop_duplicates', 'replace', 'unique', 'isin', 'mean', 'groupby', 'sort_values', 'count', 'groupby', 'sort_values', 'count', 'groupby', 'query', 'replace', 'sort_values', 'count', 'groupby', 'query', 'copy', 'rename', 'merge', 'query', 'reset_index', 'max', 'groupby', 'isna', 'copy', 'rename', 'merge', 'query', 'unique', 'copy', 'isin', 'mean', 'groupby', 'where', 'drop_duplicates', 'merge', 'merge', 'fillna', 'unique', 'query', 'unique', 'query', 'unique', 'query', 'isin', 'isin', 'where', 'mod', 'shift', 'groupby', 'abs', 'merge', 'merge', 'isin', 'isin', 'unique', 'isin', 'isin', 'unique', 'isin', 'replace', 'round', 'query', 'abs', 'abs', 'abs', 'min', 'drop', 'unstack', 'count', 'groupby', 'query', 'apply', 'sum', 'unstack', 'count', 'groupby', 'query', 'apply', 'sum', 'unstack', 'count', 'groupby', 'query', 'apply', 'sum', 'unstack', 'count', 'groupby', 'apply', 'sum', 'unstack', 'mean', 'groupby', 'query', 'dropna', 'query', 'dropna', 'query', 'dropna', 'query', 'dropna', 'query', 'unstack', 'mean', 'groupby', 'query', 'fillna', 'unstack', 'count', 'groupby', 'isin', 'apply', 'sum', 'reset_index', 'merge', 'concat', 'get_dummies', 'concat', 'get_dummies', 'concat', 'get_dummies', 'fillna', 'mean', 'astype', 'apply', 'apply', 'applymap', 'round', 'drop', 'sort_values', 'drop', 'sort_values', 'astype', 'astype', 'unstack', 'sum', 'groupby', 'reset_index', 'merge', 'get_dummies', 'fillna', 'head', 'head', 'sample', 'map', 'map', 'merge', 'drop_duplicates', 'concat', 'get_dummies', 'astype', 'drop', 'head', 'drop', 'round', 'round', 'drop', 'round', 'round', 'drop', 'round', 'round', 'concat', 'tail', 'sort_values', 'tail', 'sort_values', 'tail', 'sort_values'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pylab', 'os', 'psutil', 'lightgbm', 'random', 'sklearn', 'warnings', 'statsmodels.api'] ['train_test_split', 'cycle', 'islice', 'tqdm', 'ks_2samp', 'LinearRegression', 'train_test_split', 'mean_absolute_error', 'stats']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'get_dummies', 'unique', 'merge'], 'numpy': ['mean', 'max', 'abs', 'sum', 'where', 'round', 'mod', 'unique', 'min', 'isin', 'copy'], 'seaborn': [], 'matplotlib': ['mean', 'max', 'sum', 'where', 'round', 'sample', 'mod', 'unique', 'min', 'isin', 'copy'], 'os': ['rename', 'replace'], 'psutil': [], 'lightgbm': [], 'sklearn': [], 'random': ['sample'], 'itertools': [], 'warnings': [], 'tqdm': [], 'scipy': [], 'statsmodels': []} axis_0: 0, axis_1: 22
ps3e13-eda-decomposition-ensemble-rankpredict.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'reset_index', 'set_index', 'drop', 'replace', 'reset_index', 'concat', 'head', 'head', 'head', 'value_counts', 'unique', 'unique', 'duplicated', 'corr', 'copy', 'transform', 'sum', 'drop', 'concat', 'drop', 'concat', 'drop', 'corr', 'copy', 'items', 'astype', 'replace', 'astype', 'reset_index', 'drop', 'reset_index', 'astype', 'reset_index', 'drop', 'copy', 'copy', 'reset_index', 'reset_index', 'transform', 'reset_index', 'concat', 'reset_index', 'concat', 'head', 'array', 'array', 'array', 'array', 'mean', 'unique', 'fillna', 'keys', 'items', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'astype', 'read_csv', 'join', 'sort_values', 'join', 'to_csv', 'read_csv', 'join', 'apply', 'join', 'nlargest', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'random', 'gc', 'seaborn', 'optuna', 'xgboost', 'lightgbm', 'xgboost', 'lightgbm', 'warnings'] ['deepcopy', 'partial', 'combinations', 'BaseEstimator', 'TransformerMixin', 'train_test_split', 'StratifiedKFold', 'KFold', 'roc_auc_score', 'accuracy_score', 'log_loss', 'StandardScaler', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StandardScaler', 'MinMaxScaler', 'PCA', 'NMF', 'UMAP', 'TSNE', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'BalancedRandomForestClassifier', 'NuSVC', 'SVC', 'KNeighborsClassifier', 'LogisticRegression', 'MLPClassifier', 'GaussianProcessClassifier', 'RBF', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool']Dict:{'numpy': ['mean', 'sum', 'array', 'unique', 'std', 'copy'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'array'], 'matplotlib': [], 'seaborn': [], 'random': [], 'os': ['replace'], 'copy': [], 'functools': [], 'itertools': [], 'gc': [], 'sklearn': [], 'category_encoders': [], 'imblearn': [], 'umap': [], 'optuna': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'warnings': []} axis_0: 8, axis_1: 13
titanic-a-beginner-friendly-approach-to-top-3.py : ['read_csv', 'read_csv', 'concat', 'value_counts', 'head', 'drop', 'info', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'concat', 'head', 'describe', 'hist', 'crosstab', 'dropna', 'dropna', 'dropna', 'dropna', 'dropna', 'dropna', 'mean', 'groupby', 'value_counts', 'boxplot', 'qcut', 'mean', 'groupby', 'apply', 'replace', 'replace', 'value_counts', 'sum', 'notnull', 'nunique', 'fillna', 'median', 'fillna', 'median', 'apply', 'fillna', 'mean', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'qcut', 'apply', 'replace', 'replace', 'drop', 'head', 'drop', 'copy', 'drop', 'transform', 'mean', 'std', 'round', 'mean', 'round', 'mean', 'round', 'set_index', 'sort_values', 'round', 'set_index', 'sort_values', 'round', 'set_index', 'sort_values', 'round', 'mean', 'round', 'mean', 'astype', 'astype', 'read_csv', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv', 'astype'] ['warnings', 'numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'seaborn'] ['OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'cross_val_score', 'cross_val_predict', 'GridSearchCV', 'GaussianNB', 'LogisticRegression', 'KNeighborsClassifier', 'SVC', 'DecisionTreeClassifier', 'RandomForestClassifier', 'AdaBoostClassifier', 'VotingClassifier', 'XGBClassifier', 'accuracy_score', 'confusion_matrix', 'precision_score', 'recall_score', 'f1_score']Dict:{'warnings': [], 'numpy': ['mean', 'median', 'max', 'sum', 'round', 'min', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'notnull', 'qcut', 'crosstab'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': ['apply'], '=': [], 'pd': [], 'X_train': [], 'importances': [], 'ascending': [], 'True)': [], "'steelblue',": [], 'edgecolor': [], "'firebrick',": [], 'legend=False)': [], "'darkgray',": [], 'legend': [], 'False)': [], "'cadetblue',": []} axis_0: 0, axis_1: 0
volcanic-feature-importance-using-boruta-shap.py : ['read_csv', 'drop', 'to_csv', 'read_csv', 'read_csv', 'to_csv'] ['numpy', 'pandas'] ['XGBRegressor', 'BorutaShap', 'RGFRegressor']Dict:{'numpy': [], '': [], 'pandas': ['read_csv'], 'xgboost': [], 'BorutaShap': [], 'rgf': []} axis_0: 0, axis_1: 1
baseline-feature-engineering-geotab-69-5-lb.py : ['join', 'sample', 'read_csv', 'read_csv', 'nunique', 'unique', 'unique', 'nunique', 'groupby', 'sum', 'isna', 'sum', 'isna', 'map', 'map', 'map', 'map', 'head', 'drop_duplicates', 'head', 'astype', 'astype', 'astype', 'astype', 'sample', 'head', 'head', 'drop_duplicates', 'concat', 'drop_duplicates', 'concat', 'transform', 'transform', 'head', 'head', 'get_dummies', 'drop', 'concat', 'get_dummies', 'drop', 'concat', 'get_dummies', 'head', 'head', 'read_csv', 'to_csv', 'explode', 'read_csv', 'head', 'sample', 'to_csv', 'to_csv', 'drop', 'to_csv', 'drop'] ['numpy', 'pandas', 'os'] ['preprocessing', 'LinearRegression', 'LassoLarsCV', 'RandomForestRegressor', 'train_test_split', 'mean_squared_error']Dict:{'numpy': ['sum', 'unique'], 'pandas': ['isna', 'read_csv', 'concat', 'get_dummies', 'unique'], 'sklearn': [], 'os': []} axis_0: 3, axis_1: 5
basic-tutorial-exploratory-data-analysis.py : ['read_csv', 'read_csv', 'describe', 'head', 'tail', 'select_dtypes', 'select_dtypes', 'sample', 'sample', 'skew', 'kurt', 'skew', 'kurt', 'hist', 'skew', 'hist', 'corr', 'sort_values', 'nlargest', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'pivot_table', 'median', 'concat', 'boxplot', 'concat', 'boxplot', 'astype', 'any', 'isnull', 'fillna', 'boxplot', 'melt', 'map', 'concat', 'boxplot', 'concat', 'boxplot', 'median', 'map', 'boxplot', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'reset_index', 'sum', 'isnull', 'sort_values', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'reset_index', 'sum', 'isnull', 'sort_values', 'fillna', 'mode', 'unique', 'fillna', 'mode', 'unique'] ['pandas', 'numpy', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'scipy.stats', 'missingno'] ['ensemble', 'tree', 'linear_model']Dict:{'pandas': ['read_csv', 'isnull', 'melt', 'pivot_table', 'concat', 'unique'], 'numpy': ['median', 'unique', 'sum', 'any'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'scipy': ['mode', 'describe', 'skew'], 'sklearn': [], 'missingno': []} axis_0: 2, axis_1: 6
kaggle-learn-reference-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'dropna', 'copy', 'replace', 'replace', 'replace', 'where', 'copy', 'copy', 'copy', 'transform', 'transform', 'transform', 'transform', 'copy', 'copy', 'copy', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'copy', 'copy', 'copy', 'nunique', 'nunique', 'transform', 'transform', 'transform', 'transform', 'copy', 'copy', 'mean', 'sum', 'mean', 'sort_values', 'drop', 'drop', 'drop', 'drop', 'copy', 'copy', 'copy', 'get_dummies', 'sum', 'gt', 'sum', 'gt', 'sum', 'gt', 'map', 'map', 'map', 'transform', 'groupby', 'map', 'map', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'join', 'join', 'join', 'join', 'join', 'cumsum', 'sort_values', 'head', 'transform', 'transform', 'transform', 'transform', 'join', 'join', 'join', 'join', 'join', 'transform', 'concat', 'transform', 'add', 'transform', 'transform', 'join', 'join', 'join', 'join', 'join', 'transform', 'transform', 'join', 'join', 'join', 'join', 'join', 'sort_values', 'drop', 'drop', 'drop', 'transform', 'transform', 'transform', 'groupby', 'map', 'map', 'transform', 'transform', 'join', 'join', 'join', 'join', 'join', 'transform', 'transform', 'join', 'join', 'join', 'join', 'join', 'copy', 'copy', 'copy', 'mean', 'sum', 'to_csv'] ['os', 'warnings', 'numpy', 'pandas', 'time', 'optuna', 'matplotlib.pyplot', 'seaborn'] ['defaultdict', 'clone', 'XGBRegressor', 'LGBMRegressor', 'CatBoostRegressor', 'KBinsDiscretizer', 'StratifiedKFold', 'KFold', 'mean_absolute_error', 'partial', 'reduce', 'SimpleImputer', 'OrdinalEncoder', 'OneHotEncoder', 'mutual_info_regression', 'StandardScaler', 'KMeans', 'PCA', 'MEstimateEncoder', 'plot_param_importances', 'plot_parallel_coordinate', 'PercentilePruner', 'reduce']Dict:{'os': ['replace'], 'warnings': [], 'numpy': ['mean', 'add', 'sum', 'where', 'cumsum', 'copy'], 'pandas': ['concat', 'get_dummies', 'read_csv'], 'time': [], 'collections': ['copy'], 'sklearn': ['transform'], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'functools': [], 'category_encoders': [], 'optuna': [], 'matplotlib': [], 'seaborn': []} axis_0: 1, axis_1: 3
why-you-should-use-a-framework.py : ['get', 'read_csv', 'map', 'transform', 'groupby', 'map', 'read_csv', 'fillna', 'to_csv', 'mean', 'stack', 'to_csv'] ['os', 'zipfile', 'kaggle'] ['Path', '*']Dict:{'pathlib': [], 'os': [], 'fastai': []} axis_0: 0, axis_1: 0
synthanic-feature-engineering-beware.py : ['read_csv', 'read_csv', 'concat', 'query', 'query', 'query', 'to_csv'] ['pandas', 'numpy'] []Dict:{'pandas': ['read_csv', 'concat'], 'numpy': [], '': []} axis_0: 1, axis_1: 0
eda-feature-engineering.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'merge', 'merge', 'head', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'value_counts', 'value_counts', 'value_counts', 'head', 'mean', 'groupby', 'mean', 'groupby', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'value_counts', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'sort_values', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'transform', 'replace', 'fillna', 'median', 'fillna', 'median', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'drop', 'drop', 'head', 'rank', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'mean', 'groupby', 'abs', 'mean', 'map', 'head', 'to_csv'] ['numpy', 'pandas', 'multiprocessing', 'warnings', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'gc', 'datetime', 'os', 'warnings', 'xgboost', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'altair'] ['time', 'tqdm_notebook', 'LabelEncoder', 'KFold', 'TimeSeriesSplit', 'roc_auc_score', 'preprocessing', 'train_test_split', 'roc_auc_score', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'product', 'v5']Dict:{'numpy': ['mean', 'median', 'max', 'abs', 'sum', 'min', 'isin', 'std'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'merge'], 'multiprocessing': [], 'warnings': [], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'gc': [], 'time': [], 'datetime': [], 'tqdm': [], 'sklearn': [], 'os': ['replace'], 'xgboost': [], 'json': [], 'numba': [], 'catboost': [], 'itertools': [], 'altair': []} axis_0: 1, axis_1: 3
wavenet-pytorch.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'agg', 'groupby', 'astype', 'mean', 'std', 'fillna', 'shift', 'groupby', 'fillna', 'shift', 'groupby', 'replace', 'replace', 'mean', 'concat', 'fillna', 'fillna', 'head', 'unique', 'unique', 'head', 'astype', 'array', 'apply', 'groupby', 'array', 'apply', 'groupby', 'array', 'apply', 'groupby', '__init__', '__init__', 'transform', 'astype', 'astype', 'join', 'eval', 'eval', 'read_csv', 'sum', 'astype', 'to_csv'] ['torch', 'torch.nn', 'torch.nn.functional', 'pandas', 'numpy', 'random', 'gc', 'warnings', 'os'] ['tqdm', 'GroupKFold', 'f1_score', 'Dataset', 'DataLoader']Dict:{'torch': ['__init__'], 'pandas': ['read_csv', 'eval', 'concat', 'unique', 'array'], 'numpy': ['mean', 'sum', 'array', 'unique', 'std'], 'random': [], 'tqdm': ['__init__'], 'gc': [], 'sklearn': ['__init__'], 'warnings': [], 'os': ['replace']} axis_0: 0, axis_1: 2
extract-meta-features-from-training-images.py : ['clip', 'copy', 'min', 'max', 'replace', 'astype', 'astype', 'astype', 'min', 'mean', 'max', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'to_csv', 'head'] ['os', 'numpy', 'pandas', 'pydicom', 'PIL', 'cv2', 'vtk'] ['tqdm', 'Parallel', 'delayed', 'numpy_support']Dict:{'os': ['replace'], 'numpy': ['mean', 'max', 'min', 'clip', 'std', 'copy'], 'pandas': [], 'pydicom': [], 'PIL': [], 'tqdm': [], 'joblib': [], 'cv2': [], 'vtk': []} axis_0: 0, axis_1: 0
autoxgb-xgboost-optuna-score-0-95437-dec.py : ['join', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'read_csv', 'read_csv', 'head', 'describe', 'sum', 'isnull', 'info', 'unique', 'value_counts', 'array', 'array', 'boxplot', 'corr', 'drop', 'concat', 'drop', 'head', 'head', 'to_csv', 'to_csv', 'read_csv', 'info', 'head', 'concat', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'os', 'numpy', 'pandas'] ['AutoXGB']Dict:{'numpy': ['max', 'sum', 'min', 'unique', 'info', 'array'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'array'], 'os': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'autoxgb': []} axis_0: 0, axis_1: 3
location-feature-single-model-improvement.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'head', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'drop', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'tail', 'unique', 'reset_index', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'head', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'reset_index', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'tail', 'to_dict', 'set_index', 'copy', 'map', 'read_csv', 'concat', 'fillna', 'drop', 'fillna', 'read_csv', 'astype', 'head', 'read_csv', 'astype', 'head', 'apply', 'head', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'map', 'map', 'head', 'drop', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'os', 'lightgbm', 'xgboost', 'catboost'] ['tqdm', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'os': [], 'tqdm': []} axis_0: 0, axis_1: 4
binary-classification-smoker-or-not-eda-xgboost.py : ['read_csv', 'copy', 'read_csv', 'read_csv', 'drop', 'sample', 'concat', 'info', 'where', 'where', 'where', 'where', 'where', 'where', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'head', 'describe', 'head', 'nunique', 'drop', 'drop', 'value_counts', 'value_counts', 'corr', 'transform', 'head', 'get_dummies', 'get_dummies', 'head', 'apply', 'reset_index', 'reset_index', 'head', 'reset_index', 'reset_index', 'reset_index', 'concat', 'concat', 'head', 'info', 'info', 'value_counts', 'drop', 'concat', 'value_counts', 'items', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'corr', 'drop', 'head', 'to_csv'] ['numpy', 'pandas', 'plotly.express', 'plotly.graph_objects', 'xgboost', 'matplotlib.pyplot'] ['display', 'Markdown', 'make_subplots', 'PrettyTable', 'combinations', 'RobustScaler', 'TomekLinks', 'StratifiedKFold', 'roc_auc_score', 'tqdm']Dict:{'IPython': [], 'numpy': ['where', 'clip', 'info', 'copy'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'value_counts'], 'plotly': [], 'prettytable': ['copy'], 'itertools': [], 'sklearn': [], 'imblearn': [], 'xgboost': [], 'tqdm': [], 'matplotlib': []} axis_0: 0, axis_1: 1
feature-engineering-regression-machine-learning.py : ['read_csv', 'info', 'head', 'describe', 'skew', 'kurt', 'corr', 'corr', 'bool', 'corr', 'nlargest', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'drop', 'sort_values', 'sum', 'isnull', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'sort_values', 'sum', 'isnull', 'corr', 'nsmallest', 'drop', 'info', 'astype', 'astype', 'quantile', 'head', 'concat', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'sort_values', 'apply', 'dropna', 'head', 'transform', 'get_dummies', 'head'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'warnings', 'os'] ['norm', 'skew', 'kurtosis', 'StandardScaler', 'stats', 'is_numeric_dtype', 'boxcox1p', 'LabelEncoder']Dict:{'pandas': [], 'matplotlib': [], 'seaborn': [], 'numpy': ['median', 'info', 'sum', 'quantile'], 'scipy': [], 'sklearn': ['transform'], 'warnings': [], 'os': []} axis_0: 0, axis_1: 3
lb-0-694-event-aware-tconv-with-only-4-features.py : ['join', '__init__', '__init__', 'transpose', 'sum', 'std', 'mean', '__init__', 'join', 'join', 'join', 'join', 'join', 'apply', 'groupby', 'fillna', 'diff', 'fillna', 'diff', 'cumsum', 'groupby', 'cumsum', 'reset_index', 'drop', 'eval', 'unique', 'clip', 'fillna', 'diff', 'astype', 'map', 'pad', 'pad', 'astype'] ['gc', 'os', 'pickle', 'warnings', 'numpy', 'pandas', 'yaml', 'torch', 'torch.nn', 'torch.nn.functional', 'jo_wilder'] ['Any', 'Dict', 'List', 'Optional', 'Tuple', 'Tensor']Dict:{'gc': [], 'os': [], 'typing': ['__init__'], 'pickle': [], 'warnings': [], 'numpy': ['transpose', 'mean', 'sum', 'unique', 'clip', 'pad', 'diff', 'std', 'cumsum'], 'pandas': ['eval', 'unique'], 'yaml': [], 'torch': ['transpose', 'mean', 'sum', '__init__', 'unique', 'clip', 'diff', 'std', 'cumsum'], 'jo_wilder': []} axis_0: 0, axis_1: 0
nfl-starter-mlp-feature-engg.py : ['read_csv', 'head', 'drop', 'unique', 'unique', 'concat', 'drop', 'get_dummies', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'replace', 'apply', 'apply', 'apply', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'isna', 'apply', 'reset_index', 'sort_values', 'drop', 'drop', 'fillna', 'std', 'array', 'drop', 'drop', 'apply', 'concat', 'drop', 'get_dummies', 'drop', 'array', 'drop', 'sum', 'sum'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'datetime', 'tqdm'] ['nflrush', 'KFold', 'RepeatedKFold', 'Sequential', 'Model', 'Input', 'Dense', 'Embedding', 'Concatenate', 'Flatten', 'BatchNormalization', 'Dropout', 'ModelCheckpoint', 'plot_model']Dict:{'numpy': ['array', 'sum', 'unique', 'std'], 'pandas': ['isna', 'read_csv', 'concat', 'get_dummies', 'unique', 'array'], 'matplotlib': [], 'seaborn': [], 'datetime,': [], 'tqdm': ['std'], 'kaggle': [], 'sklearn': [], 'keras': []} axis_0: 2, axis_1: 12
ps-s3-e14-01-simplebaseline-en-jp-20230502.py : ['read_csv', 'head', 'info', 'describe', 'hist', 'corr', 'astype', 'drop', 'read_csv', 'reset_index', 'concat', 'drop', 'drop', 'read_csv', 'drop', 'drop', 'transform', 'concat', 'array', 'agg', 'groupby', 'reset_index', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'to_csv'] ['gc', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings', 'math'] ['train_test_split', 'KFold', 'mean_absolute_error', 'StandardScaler', 'MinMaxScaler', 'RobustScaler']Dict:{'gc': [], 'os': [], 'numpy': ['mean', 'info', 'std', 'array'], 'pandas': ['concat', 'array', 'read_csv'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': ['transform'], 'lightgbm': [], 'warnings': [], 'math': []} axis_0: 1, axis_1: 3
gold-medal-top-4-8-18-lines-of-code-late-sub.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'to_datetime', 'replace', 'astype', 'eq', 'astype', 'eq', 'merge', 'to_csv'] ['pandas'] ['CatBoostClassifier']Dict:{'pandas': ['merge', 'to_datetime', 'read_csv'], 'catboost': []} axis_0: 0, axis_1: 0
feature-engineering-train-features.py : ['mode', 'read_json'] ['numpy', 'pandas'] ['check_output']Dict:{'numpy': [], 'pandas': ['read_json'], 'subprocess': []} axis_0: 0, axis_1: 0
feature-engineering-and-pre-processing-house-data.py : ['read_csv', 'read_csv', 'reset_index', 'sort_values', 'aggregate', 'groupby', 'any', 'isnull', 'astype', 'count', 'sum', 'isnull', 'unique', 'astype', 'count', 'sum', 'isnull', 'unique', 'std', 'mean', 'std', 'var', 'sort_values', 'hist', 'reset_index', 'reset_index', 'sum', 'isnull', 'reset_index', 'sum', 'isnull', 'merge', 'merge', 'sort_values', 'reset_index', 'sum', 'isnull', 'sort_values', 'head', 'drop', 'fillna', 'mean', 'fillna', 'mode', 'fillna', 'median', 'any', 'isnull', 'any', 'isnull', 'select_dtypes', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn'] []Dict:{'numpy': ['mean', 'median', 'any', 'var', 'sum', 'unique', 'std'], 'pandas': ['merge', 'unique', 'read_csv', 'isnull'], 'os': [], 'matplotlib': ['hist'], 'seaborn': []} axis_0: 3, axis_1: 2
house-prices-advanced-regression-techniques.py : ['join', 'read_csv', 'read_csv', 'info', 'info', 'drop', 'drop', 'select_dtypes', 'head', 'select_dtypes', 'head', 'select_dtypes', 'head', 'hist', 'hist', 'drop', 'drop', 'corr', 'corr', 'sort_values', 'sort_values', 'sort_values', 'drop', 'drop', 'dropna', 'to_numpy', 'cov', 'mean', 'dot', 'dot', 'array', 'where', 'any', 'isnull', 'sum', 'isnull', 'sort_values', 'drop', 'drop', 'head', 'any', 'isnull', 'sum', 'isnull', 'sort_values', 'drop', 'drop', 'boxplot', 'pivot_table', 'dot', 'fillna', 'sum', 'sum', 'crosstab', 'drop', 'drop', 'any', 'isnull', 'sum', 'isnull', 'sort_values', 'sum', 'isna', 'drop', 'mode', 'mode', 'mode', 'mode', 'fillna', 'drop', 'any', 'isnull', 'sum', 'isnull', 'sort_values', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'fillna', 'drop', 'get_dummies', 'head', 'get_dummies', 'head', 'drop', 'concat', 'concat', 'drop', 'drop', 'reset_index', 'max', 'max', 'drop', 'drop', 'max', 'max', 'drop', 'drop', 'head', 'head', 'skew', 'drop', 'copy', 'hist', 'transform', 'transform', 'transform', 'drop', 'reset_index', 'drop', 'reset_index', 'max', 'idxmax', 'round', 'drop', 'drop', 'drop', 'head', 'drop', 'drop', 'mean', 'std', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'warnings', 'statsmodels.api', 'statsmodels.formula.api', 'sklearn', 'sklearn'] ['patches', 'variance_inflation_factor', 'SimpleImputer', 'OrdinalEncoder', 'OneHotEncoder', 'StandardScaler', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'VarianceThreshold', 'norm', 'stats', 'chi2_contingency', 'chi2', 'preprocessing', 'mean_squared_error', 'r2_score', 'LinearRegression', 'Ridge', 'Lasso', 'DecisionTreeRegressor', 'ElasticNet', 'SVR', 'RandomForestRegressor', 'XGBRegressor', 'LGBMRegressor', 'mean_squared_error', 'r2_score']Dict:{'numpy': ['mean', 'any', 'max', 'cov', 'sum', 'array', 'where', 'round', 'dot', 'info', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'pivot_table', 'concat', 'get_dummies', 'array', 'crosstab'], 'os': [], 'matplotlib': [], 'seaborn': ['boxplot'], 'warnings': [], 'statsmodels': [], 'sklearn': [], 'scipy': ['mean', 'std'], 'xgboost': [], 'lightgbm': []} axis_0: 1, axis_1: 26
temporal-convolutional-network-using-keras-tcn.py : ['read_csv', 'read_csv', 'read_csv', 'fillna', 'shift', 'groupby', 'cumsum', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'to_numpy', 'drop', 'drop', 'transform', 'squeeze', 'squeeze', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'tensorflow'] ['TCN', 'tcn_full_summary', 'KFold', 'keras', 'RobustScaler']Dict:{'tcn': [], 'pandas': ['read_csv'], 'numpy': ['squeeze', 'cumsum'], '': [], 'matplotlib': [], 'sklearn': ['transform'], 'tensorflow': ['squeeze', 'cumsum']} axis_0: 0, axis_1: 2
riiid-model-lgbm.py : ['pop', 'pop', 'concat', 'pop', 'read_pickle', 'read_pickle', 'reset_index', 'reset_index', 'astype', 'fillna', 'astype', 'fillna', 'mean', 'dropna', 'fillna', 'fillna', 'read_csv', 'astype', 'astype', 'merge', 'merge', 'sample', 'drop', 'drop', 'sort_values', 'copy', 'reset_index', 'astype', 'fillna', 'fillna', 'merge'] ['pandas', 'numpy', 'gc', 'lightgbm', 'riiideducation', 'matplotlib.pyplot', 'seaborn', 'random', 'os'] ['roc_auc_score', 'defaultdict', 'tqdm']Dict:{'pandas': ['concat', 'merge', 'read_pickle', 'read_csv'], 'numpy': ['mean', 'copy'], 'gc': [], 'sklearn': [], 'collections': ['pop', 'copy'], 'tqdm': [], 'lightgbm': [], 'riiideducation': [], 'matplotlib': [], 'seaborn': [], 'random': ['sample'], 'os': []} axis_0: 0, axis_1: 0
logistic-regression-with-new-features-feather.py : ['read_csv', 'read_csv', 'pop', 'pop', 'pop', 'concat', 'astype', 'mean', 'std', 'astype', 'astype', 'astype', 'mean', 'std', 'to_feather', 'to_feather', 'to_feather', 'astype', 'astype', 'copy', 'copy', 'add_prefix', 'std', 'array', 'read_csv', 'astype', 'to_csv'] ['os', 'gc', 'sys', 'time', 'shutil', 'feather', 'numpy', 'pandas'] ['norm', 'rankdata', 'Pipeline', 'LogisticRegression', 'StratifiedKFold', 'roc_curve', 'auc', 'roc_auc_score']Dict:{'os': [], 'gc': [], 'sys': [], 'time': [], 'shutil': ['copy'], 'feather': [], 'numpy': ['mean', 'array', 'std', 'copy'], 'pandas': ['concat', 'array', 'read_csv'], 'scipy': [], 'sklearn': []} axis_0: 0, axis_1: 0
don-t-mind-me-just-probing-the-lb.py : ['round', 'mean', 'mean'] ['ubiquant', 'numpy'] []Dict:{'ubiquant': [], 'numpy': ['mean', 'round']} axis_0: 0, axis_1: 0
ion-switching-ml-explainability.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'head', 'astype', 'round', 'clip'] ['warnings', 'pandas', 'numpy', 'math', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'scipy', 'time', 'datetime', 'gc', 'shap', 'eli5', 'graphviz'] ['LogisticRegression', 'Ridge', 'SGDRegressor', 'MLPClassifier', 'GridSearchCV', 'KFold', 'train_test_split', 'shuffle', 'preprocessing', 'StandardScaler', 'confusion_matrix', 'f1_score', 'mean_absolute_error', 'make_scorer', 'KalmanFilter', 'partial', 'DecisionTreeClassifier', 'PermutationImportance', 'tree', 'pyplot', 'pdp', 'get_dataset', 'info_plots']Dict:{'warnings': [], 'pandas': ['read_csv'], 'numpy': ['max', 'sum', 'round', 'min', 'clip'], 'math': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'pykalman': [], 'functools': [], 'scipy': [], 'time': [], 'datetime': [], 'gc': [], 'shap': [], 'eli5': [], 'graphviz': [], 'pdpbox': []} axis_0: 0, axis_1: 1
tps-oct-21-the-melling-blend-of-5.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'rename', 'rename', 'rename', 'rename', 'rename', 'head', 'merge', 'merge', 'merge', 'merge', 'merge', 'head', 'head', 'merge', 'merge', 'merge', 'merge', 'merge', 'head', 'reset_index', 'reset_index', 'copy', 'mean', 'std', 'mean', 'to_csv'] ['pandas', 'numpy'] ['train_test_split', 'KFold', 'StratifiedKFold', 'roc_auc_score', 'mean_squared_error', 'Path', 'LinearRegression']Dict:{'pandas': ['merge', 'read_csv'], 'numpy': ['mean', 'std', 'copy'], 'sklearn': [], 'pathlib': ['rename']} axis_0: 0, axis_1: 1
best-time-to-study-anova.py : ['read_csv', 'head', 'read_csv', 'pivot', 'sum', 'rename', 'head', 'unique', 'head', 'astype', 'astype', 'astype', 'astype', 'set_index', 'head', 'fillna', 'map', 'head', 'concat', 'head', 'unique', 'groupby', 'head', 'astype', 'astype', 'head', 'groupby', 'head', 'boxplot', 'fillna', 'transpose', 'groupby', 'head', 'map', 'head', 'mean', 'groupby'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot'] ['ListedColormap', 'ConnectionPatch', 'f_oneway', 'ttest_ind']Dict:{'pandas': ['concat', 'pivot', 'unique', 'read_csv'], 'numpy': ['transpose', 'sum', 'unique', 'mean'], 'seaborn': ['boxplot'], 'matplotlib': [], 'scipy': []} axis_0: 0, axis_1: 2
bike-sharing-demand-top-6-6-solution.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'concat', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'notnull', 'notnull', 'drop', 'drop', 'info', 'array', 'array', 'mean', 'array', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] ['datetime', 'LinearRegression', 'Ridge', 'GridSearchCV', 'metrics', 'Lasso', 'RandomForestRegressor']Dict:{'numpy': ['mean', 'info', 'array'], 'pandas': ['concat', 'notnull', 'array', 'read_csv'], 'datetime': [], 'sklearn': ['apply'], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 2
tf-saint-implement.py : ['read_csv', 'read_csv', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'drop', 'drop', 'value_counts', 'reset_index', 'drop', 'value_counts', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'drop', 'drop', 'drop', 'drop', 'drop', 'transform', '__init__', 'concat', '__init__', 'concat', '__init__', '__init__', 'concat', '__init__', 'read_csv', 'sum', 'array', 'to_csv'] ['os', 'gc', 'numpy', 'pandas', 'tensorflow'] ['StandardScaler', 'StratifiedKFold', 'KFold', 'Layer', 'Dense', 'Dropout', 'Embedding', 'Input', 'LayerNormalization', 'Flatten', 'gelu', 'softmax', 'Sequential', 'ReduceLROnPlateau', 'EarlyStopping', 'ModelCheckpoint', 'LabelEncoder', 'OneHotEncoder']Dict:{'os': [], 'gc': [], 'numpy': ['max', 'abs', 'sum', 'min', 'array'], 'pandas': ['concat', 'array', 'read_csv', 'value_counts'], 'sklearn': ['transform', '__init__'], 'tensorflow': ['__init__']} axis_0: 0, axis_1: 0
tourist-arrivals-feature-engineering.py : ['read_csv', 'to_datetime', 'info', 'max', 'max', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'datetime'] []Dict:{'numpy': ['info', 'max'], 'pandas': ['to_datetime', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'datetime': []} axis_0: 0, axis_1: 0
cis-fraud-detection-visualize-feature-engineering.py : ['join', 'to_json', 'join', 'read_csv', 'head', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'merge', 'merge', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'select_dtypes', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'sum', 'isnull', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'value_counts', 'hist', 'hist', 'head', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'rename', 'reset_index', 'value_counts', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'concat', 'rename', 'reset_index', 'agg', 'groupby', 'to_dict', 'map', 'map', 'replace', 'replace', 'map', 'map', 'map', 'map', 'map', 'map', 'fillna', 'fillna', 'where', 'apply', 'apply', 'fillna', 'median', 'apply', 'where', 'isna', 'where', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'fillna', 'isin', 'value_counts', 'value_counts', 'concat', 'to_dict', 'value_counts', 'map', 'map', 'concat', 'to_dict', 'value_counts', 'map', 'map', 'concat', 'astype', 'astype', 'to_dict', 'value_counts', 'map', 'astype', 'astype', 'map', 'astype', 'astype', 'drop', 'transform', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'drop', 'transform', 'transform', 'drop', 'transform', 'insert', 'to_csv', 'head'] ['numpy', 'pandas', 'seaborn', 'lightgbm', 'matplotlib.pyplot', 'altair', 'gc', 'datetime', 'random', 'os'] ['roc_auc_score', 'v5', 'HTML', 'preprocessing', 'MultiLabelBinarizer', 'LabelEncoder', 'SimpleImputer', 'BaseEstimator', 'TransformerMixin', 'Pipeline', 'FeatureUnion', 'StandardScaler', 'cross_val_score', 'DecisionTreeClassifier', 'LogisticRegression', 'SVC', 'LinearSVC', 'RandomForestClassifier', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit']Dict:{'numpy': ['median', 'max', 'sum', 'where', 'min', 'isin', 'insert'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'merge'], 'seaborn': [], 'lightgbm': [], 'matplotlib': ['hist'], 'sklearn': [], 'altair': [], 'IPython': [], 'gc,': [], 'datetime,': [], 'random': [], 'os': ['rename', 'replace']} axis_0: 0, axis_1: 3
natural-language-processing-theory-and-practice.py : ['read_csv', 'read_csv', 'concat', 'apply', 'replace', 'join', 'keys', 'replace', 'sub', 'sub', 'sub', 'sub', 'replace', 'replace', 'replace', 'replace', 'sub', 'sub', 'sub', 'sub', 'join', 'keys', 'sub', 'count', 'read_csv', 'read_csv', 'apply', 'apply', 'apply', 'apply', 'apply', 'fillna', 'fillna', 'fillna', 'fillna', 'transform', 'transform', 'stack', 'mean', 'std', 'items', 'get', 'stack', 'mean', 'std', 'items', 'get', 'stack', 'mean', 'std', 'items', 'get', 'mean', 'mode', 'mode', 'mode', 'mode', 'abs', '__init__', 'sum', 'sum', '__init__', '__init__', '__init__', 'sum', '__init__', '__init__', 'squeeze', 'mean', 'max', 'array', 'array', 'array', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'eval', 'array', 'copy', 'astype', 'to_csv'] ['time', 'random', 'pandas', 'numpy', 'gc', 're', 'torch', 'spacy', 'torch.nn', 'torch.optim', 'torch.nn.functional', 'torchtext', 'os', 'torch', 'torch.nn', 'torch.nn.functional'] ['data', 'tqdm_notebook', 'tnrange', 'tqdm', 'Counter', 'TextBlob', 'word_tokenize', 'Dataset', 'DataLoader', 'pack_padded_sequence', 'pad_packed_sequence', 'Variable', 'Example', 'f1_score', 'Tokenizer', 'pad_sequences', 'StratifiedKFold', 'f1_score', 'Optimizer', 'unidecode', 'StandardScaler']Dict:{'time': [], 'random': [], 'pandas': ['concat', 'array', 'eval', 'read_csv'], 'numpy': ['mean', 'stack', 'squeeze', 'max', 'abs', 'sum', 'array', 'std', 'copy'], 'gc': [], 're': ['sub'], 'torch': [], 'torchtext': [], 'spacy': [], 'tqdm': ['__init__'], 'collections': ['items', 'get', 'keys', '__init__', 'copy'], 'textblob': [], 'nltk': [], 'sklearn': ['transform', '__init__'], 'os': ['replace'], '': [], 'keras': ['__init__'], 'unidecode': []} axis_0: 1, axis_1: 1
where-do-the-robots-drive.py : ['to_json', 'join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'nunique', 'nunique', 'unique', 'nunique', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'value_counts', 'head', 'hist', 'hist', 'reset_index', 'drop_duplicates', 'transform', 'diff', 'mean', 'array', 'abs', 'cumsum', 'copy', 'mean', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'mean', 'diff', 'quantile', 'quantile', 'quantile', 'min', 'abs', 'max', 'abs', 'mean', 'abs', 'std', 'abs', 'kurtosis', 'skew', 'median', 'mean', 'abs', 'mean', 'mean', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'mean', 'std', 'rolling', 'mean', 'std', 'rolling', 'subtract', 'mean', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'mean', 'diff', 'quantile', 'quantile', 'quantile', 'min', 'abs', 'max', 'abs', 'mean', 'abs', 'std', 'abs', 'kurtosis', 'skew', 'median', 'mean', 'abs', 'mean', 'mean', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'mean', 'std', 'rolling', 'mean', 'std', 'rolling', 'subtract', 'head', 'transform', 'drop', 'drop', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'astype', 'sum', 'max', 'product', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'json', 'ast', 'eli5', 'shap', 'gc', 'seaborn', 'warnings', 'altair', 'itertools'] ['tqdm_notebook', 'StandardScaler', 'NuSVC', 'SVC', 'accuracy_score', 'confusion_matrix', 'PermutationImportance', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'train_test_split', 'GroupKFold', 'GroupShuffleSplit', 'Ridge', 'RidgeCV', 'CatBoostClassifier', 'v3', 'HTML', 'LinearRegression', 'hilbert', 'hann', 'convolve', 'stats', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'median', 'product', 'quantile', 'max', 'abs', 'sum', 'subtract', 'array', 'min', 'unique', 'isin', 'diff', 'std', 'cumsum', 'copy'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'array'], 'os': ['rename'], 'matplotlib': ['hist'], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'json': [], 'ast': [], 'eli5': [], 'shap': [], 'gc': [], 'catboost': [], 'seaborn': [], 'warnings': [], 'altair': [], '': [], 'IPython': [], 'scipy': ['kurtosis', 'skew'], 'itertools': ['product', 'groupby']} axis_0: 1, axis_1: 3
basic-eda-and-model-to-start.py : ['read_csv', 'read_csv', 'read_csv', 'value_counts', 'unique', 'mean', 'groupby', 'set_index', 'std', 'groupby', 'set_index', 'unique', 'set_index', 'set_index', 'mean', 'median', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'max', 'min', 'std', 'skew', 'kurt', 'astype', 'round', 'astype', 'round', 'mean', 'mean', 'sort_values', 'mean', 'median', 'sort_values', 'mode', 'array', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'gc', 'joblib', 're'] ['tqdm', 'factorial', 'ExtraTreesClassifier', 'LabelEncoder', 'accuracy_score', 'roc_auc_score', 'StratifiedKFold', 'cross_validate', 'stats']Dict:{'numpy': ['mean', 'median', 'quantile', 'max', 'array', 'round', 'min', 'unique', 'std'], 'pandas': ['array', 'unique', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'math': [], 'gc': [], 'joblib': [], 'sklearn': [], 're': [], 'scipy': ['mode', 'skew']} axis_0: 1, axis_1: 15
neural-networks-feature-engineering-for-the-win.py : ['read_csv', 'head', 'value_counts', 'describe', 'mean', 'mean', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'map', 'map', 'map', 'unique', 'value_counts', 'concat', 'drop', 'get_dummies', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'value_counts', 'apply', 'isna', 'replace', 'value_counts', 'apply', 'isna', 'apply', 'isna', 'apply', 'value_counts', 'drop', 'value_counts', 'apply', 'apply', 'unique', 'apply', 'isna', 'apply', 'isna', 'replace', 'replace', 'replace', 'apply', 'isna', 'replace', 'apply', 'isna', 'replace', 'replace', 'unique', 'isna', 'isna', 'apply', 'drop', 'describe', 'reset_index', 'sort_values', 'drop', 'drop', 'fillna', 'std', 'array', 'drop', 'apply', 'concat', 'drop', 'get_dummies', 'drop', 'map', 'map', 'map', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'isna', 'replace', 'apply', 'isna', 'apply', 'isna', 'apply', 'apply', 'apply', 'apply', 'isna', 'apply', 'isna', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'apply', 'reset_index', 'sort_values', 'drop', 'drop', 'fillna', 'array', 'drop', 'transform'] ['numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib', 'seaborn', 'datetime', 'tqdm', 'keras', 'tensorflow'] ['nflrush', 'RandomForestRegressor', 'StandardScaler', 'Counter']Dict:{'numpy': ['mean', 'std', 'unique', 'array'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'get_dummies', 'unique', 'array'], 'matplotlib': [], 'seaborn': [], 'datetime': [], 'kaggle': [], 'tqdm': ['std'], 'sklearn': ['transform'], 'keras': [], 'tensorflow': ['unique', 'concat'], 'collections': []} axis_0: 0, axis_1: 20
titanic-top-3-cluster-analysis.py : ['set_index', 'read_csv', 'set_index', 'read_csv', 'concat', 'groupby', 'transform', 'count', 'fillna', 'mask', 'transform', 'sum', 'fillna', 'mask', 'fillna', 'replace', 'replace', 'concat', 'fillna', 'replace', 'astype', 'to_csv', 'reset_index', 'mean', 'std', 'replace', 'replace', 'replace', 'fillna', 'median', 'groupby', 'fillna', 'apply', 'notnull', 'apply', 'groupby', 'fillna', 'median', 'head', 'fillna', 'fillna', 'fillna', 'fillna', 'head', 'drop', 'astype', 'transform', 'astype', 'head', 'concat', 'astype', 'copy', 'update', 'astype', 'get', 'astype', 'array', 'head', 'concat', 'fillna', 'concat', 'fillna', 'join', 'head', 'join', 'head', 'astype', 'mean', 'std', 'astype', 'to_csv', 'reset_index', 'sort_values'] ['pandas', 'numpy', 'time', 'graphviz', 'matplotlib.pyplot', 'warnings'] ['cluster', 'datasets', 'mixture', 'LabelEncoder', 'StandardScaler', 'GridSearchCV', 'DecisionTreeClassifier', 'export_graphviz', 'kneighbors_graph', 'cycle', 'islice', 'cosine']Dict:{'pandas': ['concat', 'notnull', 'array', 'read_csv'], 'numpy': ['mean', 'median', 'sum', 'array', 'std', 'copy'], 'sklearn': [], 'itertools': [], 'scipy': [], 'time': [], 'graphviz': [], 'matplotlib': ['get'], 'warnings': []} axis_0: 3, axis_1: 5
feature-engineering-k-means.py : ['join', 'read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'dropna', 'sum', 'isnull', 'info', 'corr', 'sum', 'groupby', 'drop', 'dropna', 'drop', 'astype'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'seaborn', 'numpy'] ['KMeans', 'KMeans', 'Axes3D']Dict:{'pandas': ['read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'os': [], 'sklearn': [], 'mpl_toolkits': [], 'numpy': ['info', 'sum']} axis_0: 0, axis_1: 4
bid-price-predicition-4th-place-submission.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'rename', 'value_counts', 'rename', 'value_counts', 'rename', 'value_counts', 'to_datetime', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'median', 'groupby', 'std', 'groupby', 'min', 'groupby', 'max', 'groupby', 'mean', 'groupby', 'median', 'groupby', 'std', 'groupby', 'min', 'groupby', 'max', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'to_datetime', 'where', 'map', 'where', 'where', 'where', 'map', 'map', 'map', 'map', 'map', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'where', 'where', 'map', 'map', 'astype', 'astype', 'astype', 'mean', 'concat', 'sort_values', 'sum', 'update', 'mean', 'clip', 'to_csv'] ['pandas', 'numpy', 'time', 'gc', 'matplotlib.pyplot', 'seaborn', 'lightgbm'] ['datetime', 'KFold', 'mean_squared_error', 'sqrt', 'train_test_split']Dict:{'pandas': ['concat', 'to_datetime', 'read_csv', 'value_counts'], 'numpy': ['mean', 'median', 'max', 'sum', 'where', 'min', 'clip', 'std'], 'time': [], 'gc': [], 'datetime': ['min', 'max'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'math': [], 'lightgbm': [], '=': [], '[]': [], 'pd': [], 'axis': [], '1)': [], 'importance': [], "importances_df['0_importance']": [], '+': [], "importances_df['1_importance']": [], "importances_df['2_importance']": [], "importances_df['3_importance']": [], '\\': [], 'importances_df': [], 'ascending': [], 'False)': [], "importances_df['Value']": [], '/': []} axis_0: 0, axis_1: 0
ideas-for-image-features-and-image-quality.py : ['items', 'apply', 'sort_values', 'head', 'iterrows', 'head', 'apply', 'sort_values', 'head', 'iterrows', 'head', 'sum', 'apply', 'head', 'sort_values', 'iterrows', 'head', 'apply', 'head', 'apply', 'apply', 'apply', 'head', 'mean', 'apply', 'head', 'apply', 'apply', 'apply', 'head', 'apply', 'apply', 'apply', 'apply', 'drop', 'head', 'var', 'apply', 'head', 'sort_values', 'iterrows', 'head'] ['matplotlib.pyplot', 'numpy', 'pandas', 'operator', 'cv2', 'os'] ['defaultdict', 'itemfreq', 'ndimage', 'feature', 'Image', 'HTML', 'Image']Dict:{'collections': ['items'], 'scipy': [], 'matplotlib': [], 'skimage': [], 'PIL': [], 'numpy': ['mean', 'var', 'sum'], 'pandas': [], 'operator': [], 'cv2': [], 'os': [], '': [], 'IPython': []} axis_0: 0, axis_1: 1
predict-monthly-sales.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'hist', 'join', 'join', 'join', 'to_datetime', 'drop', 'sum', 'groupby', 'rename', 'mean', 'groupby', 'rename', 'merge', 'rename', 'head', 'fillna', 'merge', 'merge', 'merge', 'merge', 'fillna', 'merge', 'fillna', 'merge', 'merge', 'merge', 'merge'] ['numpy', 'pandas', 'nltk', 'datetime', 'seaborn', 'matplotlib.pyplot', 'os', 'random', 'random', 'random'] ['*', 'WordCloud', 'WordCloud', 'WordCloud']Dict:{'numpy': ['mean', 'sum'], 'pandas': ['merge', 'to_datetime', 'read_csv'], 'sklearn': [], 'nltk,': [], 'datetime': [], 'seaborn': [], 'matplotlib': ['hist'], 'os': ['rename'], 'wordcloud': [], 'random': []} axis_0: 0, axis_1: 1
jpx-solution-of-previous-jpx-competition.py : ['sum', 'read_csv', 'to_datetime', 'pivot_table', 'ffill', 'pivot_table', 'ffill', 'pivot_table', 'ffill', 'pivot_table', 'ffill', 'pivot_table', 'ffill', 'pivot_table', 'rename', 'dropna', 'reset_index', 'melt', 'shift', 'shift', 'rename', 'dropna', 'reset_index', 'melt', 'mean', 'rolling', 'shift', 'shift', 'rename', 'dropna', 'reset_index', 'melt', 'mean', 'rolling', 'max', 'rename', 'dropna', 'reset_index', 'melt', 'mean', 'rolling', 'shift', 'rename', 'dropna', 'reset_index', 'melt', 'mean', 'rolling', 'shift', 'rename', 'dropna', 'reset_index', 'melt', 'mean', 'rolling', 'rename', 'dropna', 'reset_index', 'melt', 'std', 'rolling', 'diff', 'shift', 'rename', 'dropna', 'reset_index', 'melt', 'max', 'rolling', 'min', 'rolling', 'rename', 'dropna', 'reset_index', 'melt', 'mean', 'rolling', 'diff', 'fillna', 'merge', 'merge', 'diff', 'diff', 'fillna', 'astype', 'drop', 'astype', 'drop', 'pivot_table', 'bfill', 'ffill', 'reindex', 'pivot_table', 'mean', 'round', 'mean', 'std', 'round', 'mean', 'std', 'cumsum', 'cumsum', 'ffill', 'pivot_table', 'ffill', 'pivot_table', 'ffill', 'pivot_table', 'ffill', 'pivot_table', 'ffill', 'pivot_table', 'to_datetime', 'pivot_table', 'pivot_table', 'pivot_table', 'pivot_table', 'pivot_table', 'ffill', 'concat', 'ffill', 'concat', 'ffill', 'concat', 'ffill', 'concat', 'ffill', 'concat', 'fillna', 'merge', 'merge', 'diff', 'diff', 'drop', 'reindex', 'set_index'] ['pandas', 'numpy', 'plotly.graph_objects', 'jpx_tokyo_market_prediction'] ['tqdm', 'LGBMRegressor']Dict:{'pandas': ['read_csv', 'melt', 'pivot_table', 'concat', 'merge', 'to_datetime'], 'numpy': ['mean', 'max', 'sum', 'round', 'min', 'diff', 'std', 'cumsum'], 'tqdm': [], 'lightgbm': [], 'plotly': [], 'jpx_tokyo_market_prediction': []} axis_0: 0, axis_1: 5
feature-engineering-for-nlp-classification.py : ['mode', 'read_csv', 'read_csv', 'head', 'tail', 'apply', 'apply', 'apply', 'max', 'apply', 'apply', 'apply', 'apply', 'count', 'apply', 'count', 'apply', 'count', 'apply', 'count', 'apply', 'apply', 'apply', 'count', 'apply', 'count', 'head', 'apply', 'count', 'apply', 'head', 'join', 'apply', 'apply', 'apply', 'mean', 'head', 'corr', 'drop'] ['os', 'json', 'string', 'numpy', 'pandas', 'plotly.offline', 'matplotlib.pyplot', 'seaborn', 'plotly.graph_objs', 'string'] ['json_normalize', 'tools', 'tqdm', 'pos_tag', 'stopwords', 'TweetTokenizer']Dict:{'os': [], 'json': [], 'string': [], 'numpy': ['mean', 'max'], 'pandas': [], 'plotly': [], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'nltk': []} axis_0: 0, axis_1: 2
extract-measurements-feature-engineering.py : ['read_csv', 'to_dict', 'unique', 'groupby', 'apply', 'sample', 'join', 'join', 'apply', 'sum'] ['pandas', 're'] []Dict:{'pandas': ['unique', 'read_csv'], 're': [], '': []} axis_0: 0, axis_1: 0
write-powerful-code-w-custom-sklearn-transformers.py : ['read_csv', 'head', 'sum', 'isnull', 'sum', 'isnull', 'std', 'isnull', 'transform', 'copy', 'copy', 'copy', 'transform', 'transform', 'copy', 'copy', 'transform', 'copy', 'drop'] ['logging', 'time', 'warnings', 'catboost', 'joblib', 'lightgbm', 'matplotlib.pyplot', 'numpy', 'optuna', 'pandas', 'seaborn', 'xgboost'] ['TPESampler', 'ColumnTransformer', 'make_column_selector', 'make_column_transformer', 'SimpleImputer', 'log_loss', 'mean_squared_error', 'KFold', 'StratifiedKFold', 'cross_validate', 'train_test_split', 'Pipeline', 'make_pipeline', 'OneHotEncoder', 'OrdinalEncoder', 'FunctionTransformer', 'BaseEstimator', 'TransformerMixin', 'PowerTransformer', 'roc_auc_score', 'train_test_split', 'make_pipeline']Dict:{'logging': [], 'time': [], 'warnings': [], 'catboost': [], 'joblib': [], 'lightgbm': [], 'matplotlib': [], 'numpy': ['std', 'sum', 'copy'], 'optuna': [], 'pandas': ['read_csv', 'isnull'], 'seaborn': [], 'xgboost': [], 'sklearn': []} axis_0: 0, axis_1: 4
coulomb-interaction-speed-up.py : ['read_csv', 'read_csv', 'sum', 'unique', 'concat', 'set_index', 'set_index', 'unique', 'concat', 'head', 'merge', 'merge', 'head', 'query'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'time'] ['train_test_split', 'MLPRegressor']Dict:{'os': [], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'numpy': ['sum', 'unique'], 'matplotlib': [], 'time': [], 'sklearn': []} axis_0: 0, axis_1: 2
introduction-to-the-regularized-greedy-forest.py : ['read_csv', 'read_csv', 'read_csv', 'get_dummies', 'get_dummies', 'read_csv', 'read_csv', 'read_csv', 'fillna', 'mean', 'fillna', 'mean'] ['pandas', 'numpy'] ['RGFClassifier', 'accuracy_score', 'RGFRegressor', 'mean_squared_log_error']Dict:{'pandas': ['get_dummies', 'read_csv'], '': [], 'numpy': ['mean'], 'rgf': [], 'sklearn': []} axis_0: 0, axis_1: 0
almost-complete-feature-engineering-ieee-data.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'drop', 'rename', 'concat', 'read_csv', 'read_csv', 'concat', 'reset_index', 'reset_index', 'map', 'fillna', 'min', 'fillna', 'min', 'fillna', 'read_csv', 'read_csv', 'read_csv', 'concat', 'reset_index', 'map', 'transform', 'merge', 'fillna', 'apply', 'replace', 'replace', 'map', 'map', 'sort_values', 'apply', 'transform', 'groupby', 'mean', 'rolling', 'transform', 'groupby', 'min', 'rolling', 'transform', 'groupby', 'max', 'rolling', 'transform', 'groupby', 'std', 'rolling', 'fillna', 'fillna', 'fillna', 'fillna', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'map', 'map', 'map', 'map', 'map', 'map', 'mean', 'std', 'mean', 'std', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'fillna', 'astype', 'astype', 'astype', 'astype', 'fillna', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'fillna', 'fillna', 'drop', 'drop', 'abs', 'corr', 'notnull', 'where', 'astype', 'bool', 'drop', 'drop', 'drop', 'sort_values', 'astype', 'sort_values', 'drop', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'scipy', 'matplotlib.pyplot', 'seaborn', 'plotly.graph_objs', 'plotly.tools', 'plotly.figure_factory', 'xgboost', 'os', 'gc', 'datetime', 'gc', 'time', 'time'] ['stats', 'iplot', 'init_notebook_mode', 'preprocessing', 'confusion_matrix', 'roc_auc_score', 'StratifiedKFold', 'cross_val_score', 'KFold', 'XGBClassifier', 'minmax_scale', 'PCA', 'KMeans', 'cdist', 'pdist', 'fmin', 'hp', 'tpe', 'Trials', 'space_eval', 'STATUS_OK', 'STATUS_RUNNING', 'partial', 'KFold', 'roc_auc_score', 'plot_importance', 'make_scorer', 'KFold', 'TimeSeriesSplit', 'roc_auc_score', 'plot_importance', 'make_scorer', 'space_eval']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'where', 'min', 'std'], 'pandas': ['concat', 'notnull', 'merge', 'read_csv'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': [], 'xgboost': [], 'hyperopt': [], 'functools': [], 'os': ['rename', 'replace'], 'gc': [], 'datetime': [], 'time': []} axis_0: 2, axis_1: 11
introduction-to-ensembling-techniques.py : ['read_csv', 'read_csv', 'head', 'nunique', 'isin', 'reset_index', 'concat', 'sum', 'isnull', 'rename', 'reset_index', 'sort_values', 'value_counts', 'rename', 'reset_index', 'max', 'min', 'items', 'reset_index', 'drop', 'sum', 'isnull', 'kurtosis', 'dropna', 'skew', 'dropna', 'mean', 'std', 'value_counts', 'value_counts', 'boxplot', 'map', 'nunique', 'sum', 'isnull', 'rename', 'reset_index', 'value_counts', 'sort_values', 'array', 'value_counts', 'dropna', 'value_counts', 'dropna', 'unique', 'dropna', 'value_counts', 'fillna', 'value_counts', 'sum', 'isnull', 'get_dummies', 'map', 'isnull', 'median', 'median', 'describe', 'isnull', 'get_dummies', 'head', 'replace', 'map', 'astype', 'drop', 'replace', 'replace', 'head', 'get_dummies', 'astype', 'get_dummies', 'drop', 'head', 'drop', 'astype', 'drop', 'to_csv', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'scipy.stats', 'warnings', 'xgboost', 'lightgbm', 'catboost'] ['Counter', 'f1_score', 'confusion_matrix', 'accuracy_score', 'metrics', 'KFold', 'cross_val_score', 'train_test_split', 'shuffle', 'RepeatedStratifiedKFold', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'RandomForestClassifier', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'LogisticRegression', 'MLPClassifier', 'VotingClassifier', 'StackingClassifier']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'array'], 'numpy': ['mean', 'median', 'max', 'sum', 'array', 'min', 'unique', 'isin', 'std'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'collections': ['items'], 'scipy': ['kurtosis', 'describe', 'skew'], 'warnings': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 1, axis_1: 0
ps-s3-ep3-eda-modeling.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'head', 'describe', 'head', 'describe', 'value_counts', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'copy', 'get_dummies', 'drop', 'drop', 'concat', 'where', 'where', 'astype', 'astype', 'astype', 'astype', 'where', 'where', 'astype', 'astype', 'astype', 'astype', 'copy', 'copy', 'get_dummies', 'drop', 'drop', 'concat', 'get_dummies', 'drop', 'drop', 'concat', 'mean', 'sort_values', 'apply', 'mean', 'head', 'apply', 'mean', 'to_csv', 'mean', 'sort_values', 'apply', 'mean', 'head', 'apply', 'mean', 'to_csv', 'mean', 'sort_values', 'apply', 'mean', 'head', 'apply', 'mean', 'to_csv', 'mean', 'sort_values', 'apply', 'mean', 'head', 'apply', 'mean', 'to_csv', 'mean', 'sort_values', 'apply', 'mean', 'head', 'apply', 'mean', 'to_csv', 'apply', 'mean', 'boxplot', 'head', 'to_csv', 'head', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'plotly.express'] ['tqdm', 'DecisionTreeClassifier', 'plot_tree', 'MinMaxScaler', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'roc_auc_score', 'roc_curve', 'RocCurveDisplay', 'KNeighborsClassifier', 'RFE', 'LogisticRegression', 'RandomForestClassifier', 'SVC', 'LGBMClassifier', 'XGBClassifier', 'CatBoostClassifier']Dict:{'pandas': ['concat', 'get_dummies', 'read_csv', 'value_counts'], 'numpy': ['mean', 'info', 'where', 'copy'], 'tqdm': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'xgboost': ['apply'], 'catboost': []} axis_0: 0, axis_1: 0
detailed-eda-understanding-h-m-data.py : ['read_csv', 'read_csv', 'read_csv', 'update', 'value_counts', 'sum', 'isna', 'value_counts', 'mul', 'div', 'sum', 'reset_index', 'reset_index', 'value_counts', 'head', 'drop_duplicates', 'groupby', 'value_counts', 'mul', 'div', 'sum', 'rename', 'cumsum', 'reset_index', 'reset_index', 'reset_index', 'unique', 'groupby', 'drop_duplicates', 'apply', 'dropna', 'join', 'explode', 'update', 'value_counts', 'sum', 'isna', 'copy', 'fillna', 'value_counts', 'value_counts', 'fillna', 'fillna', 'nunique', 'median', 'max', 'nunique', 'mul', 'value_counts', 'groupby', 'reset_index', 'rename', 'astype', 'astype', 'update', 'value_counts', 'head', 'sum', 'isna', 'to_datetime', 'min', 'max', 'count', 'groupby', 'max', 'min', 'min', 'max', 'rename', 'groupby', 'reset_index', 'to_period', 'boxplot', 'groupby', 'value_counts', 'to_period', 'head', 'rename', 'groupby', 'head', 'reset_index', 'merge', 'sum', 'groupby', 'head'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'datetime', 'matplotlib', 'matplotlib.ticker', 'nltk'] ['walk', 'stopwords', 'WordCloud', 'STOPWORDS', 'Image']Dict:{'numpy': ['median', 'max', 'sum', 'min', 'unique', 'cumsum', 'copy'], 'pandas': ['isna', 'read_csv', 'value_counts', 'unique', 'merge', 'to_datetime'], 'seaborn': ['boxplot'], 'matplotlib': [], 'datetime': [], 'os': [], 'nltk': [], 'wordcloud': [], 'PIL': ['merge']} axis_0: 0, axis_1: 0
tps-jan-2022-a-simple-average-model-no-ml.py : ['update', 'abs', 'abs', 'round', 'mean', 'array', 'read_csv', 'copy', 'copy', 'to_dict', 'mean', 'groupby', 'map', 'set_index', 'get', 'to_dict', 'mean', 'groupby', 'map', 'set_index', 'get', 'copy', 'query', 'to_dict', 'mean', 'groupby', 'map', 'set_index', 'get', 'copy', 'query', 'copy', 'query', 'copy', 'query', 'to_dict', 'mean', 'groupby', 'map', 'set_index', 'get', 'update', 'copy', 'query', 'copy', 'query', 'to_dict', 'mean', 'groupby', 'map', 'set_index', 'get', 'update', 'copy', 'query', 'copy', 'query', 'copy', 'query', 'copy', 'query', 'copy', 'query', 'to_dict', 'mean', 'groupby', 'map', 'set_index', 'get', 'update', 'copy', 'query', 'copy', 'query', 'to_dict', 'mean', 'groupby', 'map', 'set_index', 'get', 'update', 'copy', 'query', 'copy', 'query', 'map', 'map', 'to_dict', 'mean', 'groupby', 'map', 'set_index', 'get', 'update', 'pivot_table', 'sum', 'sum', 'copy', 'query', 'copy', 'query', 'read_csv', 'to_dict', 'mean', 'groupby', 'map', 'set_index', 'get', 'copy', 'query', 'copy', 'query', 'to_dict', 'mean', 'groupby', 'map', 'set_index', 'get', 'update', 'copy', 'query', 'copy', 'query', 'to_dict', 'mean', 'groupby', 'map', 'set_index', 'get', 'update', 'copy', 'query', 'copy', 'query', 'map', 'map', 'to_dict', 'mean', 'groupby', 'map', 'set_index', 'get', 'update', 'copy', 'query', 'copy', 'query', 'to_dict', 'mean', 'groupby', 'map', 'set_index', 'get', 'update', 'copy', 'query', 'copy', 'query', 'to_dict', 'mean', 'groupby', 'map', 'set_index', 'get', 'update', 'query', 'query', 'read_csv', 'mean', 'mean', 'mean', 'astype', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['datetime', 'timedelta', 'easter']Dict:{'numpy': ['mean', 'abs', 'sum', 'round', 'array', 'copy'], '': [], 'pandas': ['array', 'pivot_table', 'read_csv'], 'matplotlib': ['get'], 'seaborn': [], 'datetime': [], 'dateutil': []} axis_0: 0, axis_1: 0
race-to-the-top-nycttd.py : ['mode', 'read_csv', 'read_csv', 'head', 'head', 'sum', 'reset_index', 'sum', 'isnull', 'reset_index', 'sum', 'isnull', 'value_counts', 'value_counts', 'map', 'map', 'drop', 'drop', 'items', 'mean', 'to_csv', 'to_csv', 'drop', 'drop', 'mean', 'to_csv', 'to_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'merge', 'merge', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'drop', 'drop', 'mean', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'lightgbm', 'gc'] ['model_selection', 'preprocessing', 'metrics', 'haversine']Dict:{'numpy': ['mean', 'round', 'sum'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'merge'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'haversine': [], 'gc;': [], 'gc': []} axis_0: 2, axis_1: 8
tps-sep22-baseline-gradient-boosted-trees.py : ['to_datetime', 'to_datetime', 'reset_index', 'pivot', 'reset_index', 'sum', 'groupby', 'unique', 'sum', 'unique', 'unique', 'map', 'astype', 'astype', 'head', 'rename', 'rename'] [] []Dict:{} axis_0: 0, axis_1: 0
fork-eda-feature-engineering-lgb-xgb-cat.py : ['read_csv', 'info', 'read_csv', 'info', 'head', 'head', 'describe', 'describe', 'sum', 'isna', 'sum', 'isna', 'describe', 'astype', 'replace', 'to_datetime', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'map', 'map', 'join', 'get_dummies', 'concat', 'map', 'map', 'join', 'get_dummies', 'concat', 'sort_values', 'value_counts', 'value_counts', 'read_csv', 'read_csv', 'merge', 'merge', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'fillna', 'fillna', 'fillna', 'fillna', 'sort_values', 'sort_values', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'corr', 'fillna', 'fillna', 'astype', 'replace', 'to_datetime', 'apply', 'apply', 'apply', 'apply', 'fillna', 'transform', 'astype', 'fillna', 'apply', 'apply', 'transform', 'groupby', 'isnull', 'isnull', 'apply', 'apply', 'apply', 'apply', 'apply', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'aggregate', 'groupby', 'map', 'map', 'join', 'get_dummies', 'concat', 'drop', 'drop', 'fillna', 'read_csv', 'read_csv', 'merge', 'read_csv', 'merge', 'read_csv', 'read_csv', 'astype', 'replace', 'concat', 'apply', 'apply', 'keys', 'keys', 'reset_index', 'concat', 'array', 'items', 'array', 'mean', 'array', 'mean', 'array', 'mean', 'mean', 'array', 'mean', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'json', 'xgboost', 'lightgbm'] ['tqdm', 'datetime', 'LabelEncoder', 'KFold', 'CatBoostRegressor']Dict:{'numpy': ['mean', 'info', 'array', 'sum'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'array', 'merge', 'to_datetime'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'tqdm': [], 'datetime': ['replace'], 'json': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 5
titanic-data-analysis-lgbm-0-82296.py : ['read_csv', 'read_csv', 'head', 'head', 'sum', 'isnull', 'sum', 'isnull', 'round', 'value_counts', 'value_counts', 'value_counts', 'keys', 'value_counts', 'value_counts', 'value_counts', 'keys', 'value_counts', 'value_counts', 'value_counts', 'keys', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'keys', 'value_counts', 'value_counts', 'keys', 'value_counts', 'apply', 'crosstab', 'sum', 'replace', 'map', 'map', 'median', 'groupby', 'isnull', 'unique', 'isnull', 'map', 'dropna', 'update', 'median', 'median', 'fillna', 'median', 'apply', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'drop', 'head', 'keys', 'nunique', 'nunique', 'keys', 'nunique', 'nunique', 'get_dummies', 'copy', 'drop', 'merge', 'drop', 'corr', 'drop', 'array', 'drop', 'drop', 'drop', 'drop', 'merge', 'sort_values', 'get_dummies', 'sum', 'cumsum', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'mean', 'std', 'rename', 'round', 'round', 'round', 'round', 'round', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'plotly.figure_factory', 'squarify', 'lightgbm', 'scipy.stats', 'warnings'] ['download_plotlyjs', 'init_notebook_mode', 'plot', 'iplot', 'StandardScaler', 'LabelEncoder', 'GridSearchCV', 'cross_val_score', 'train_test_split', 'GridSearchCV', 'RandomizedSearchCV', 'precision_score', 'recall_score', 'confusion_matrix', 'roc_curve', 'precision_recall_curve', 'accuracy_score', 'roc_auc_score', 'randint', 'uniform', 'contextmanager', 'DiscriminationThreshold']Dict:{'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'unique', 'array', 'merge', 'crosstab'], 'numpy': ['mean', 'median', 'max', 'sum', 'array', 'round', 'min', 'unique', 'std', 'cumsum', 'copy'], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'squarify': [], 'sklearn': [], 'lightgbm': [], 'scipy': [], 'contextlib': [], 'warnings': [], 'yellowbrick': []} axis_0: 1, axis_1: 0
1-r-3.py : ['to_json', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'groupby', 'abs', 'mean', 'map', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'head', 'head', 'head', 'concat', 'items', 'head', 'where', 'where', 'where', 'where', 'mean', 'median', 'std', 'join', 'head', 'merge', 'rename', 'apply', 'apply', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'merge', 'drop', 'copy', 'copy', 'rename', 'concat', 'transform', 'groupby', 'drop', 'rename', 'rename', 'drop', 'drop', 'describe', 'concat', 'describe', 'drop', 'copy', 'copy', 'copy', 'unique', 'copy', 'copy', 'unique', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'metrics', 'linear_model', 'HTML', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'product', 'tqdm_notebook']Dict:{'numpy': ['mean', 'median', 'max', 'abs', 'sum', 'where', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'os': ['rename'], 'matplotlib': [], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'catboost': [], 'gc': [], 'seaborn': [], 'warnings': [], 'IPython': [], 'json': [], 'altair': [], 'networkx': [], 'numba': [], 'itertools': []} axis_0: 9, axis_1: 12
optiver-lgbm-optuna.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'median', 'groupby', 'median', 'groupby', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'where', 'where', 'map', 'to_dict', 'where', 'eval', 'eval', 'eval', 'eval', 'div', 'div', 'astype', 'astype', 'eval', 'max', 'min', 'sum', 'drop', 'dropna', 'drop', 'mean', 'sort_values', 'any', 'isna', 'sum', 'sum'] ['sys', 'numpy', 'pickle', 'pandas', 'json', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'optuna', 'warnings', 'gc', 'plotly.express', 'joblib', 'optiver2023'] ['pprint', 'pformat', 'train_test_split', 'TimeSeriesSplit', 'mean_absolute_error', 'LGBMRegressor', 'default_timer', 'clear_output', 'plot_optimization_history', 'plot_param_importances', 'plot_parallel_coordinate', 'combinations']Dict:{'sys': [], 'numpy': ['mean', 'median', 'any', 'max', 'sum', 'where', 'min'], 'pickle': [], 'pprint': [], 'pandas': ['isna', 'eval', 'read_csv'], 'json': [], 'sklearn': [], 'lightgbm': [], 'matplotlib': [], 'seaborn': [], 'timeit': [], 'IPython': [], 'optuna': [], 'warnings': [], 'itertools': [], 'gc': [], 'plotly': [], 'joblib': [], 'optiver2023': []} axis_0: 0, axis_1: 3
lgbm-starter.py : ['read_csv', 'merge', 'drop', 'astype', 'fillna', 'apply', 'nunique', 'unique', 'unique', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'nunique', 'concat', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'transform', 'groupby', 'apply', 'to_datetime', 'apply', 'factorize', 'astype', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'copy', 'reset_index', 'sum', 'groupby', 'to_csv'] ['pandas', 'numpy', 'time', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'os', 'json', 'numpy', 'pandas'] ['datetime', 'mean_squared_error', 'KFold', 'json_normalize']Dict:{'pandas': [], 'numpy': ['mean', 'sum', 'unique', 'isin', 'copy'], 'time': [], 'datetime': [], 'lightgbm': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'os': [], 'json': []} axis_0: 1, axis_1: 1
ev-fiyatlar-n-n-tahmini.py : ['read_csv', 'read_csv', 'drop', 'drop', 'info', 'sum', 'isnull', 'sort_values', 'abs', 'corr', 'drop', 'sort_values', 'drop', 'drop', 'concat', 'items', 'fillna', 'fillna', 'fillna', 'mode', 'transform', 'groupby', 'fillna', 'median', 'drop', 'fillna', 'astype', 'transform', 'sort_values', 'apply', 'dropna', 'head', 'get_dummies', 'transform', 'sort_values', 'set_index', 'head', 'transform', 'mean', 'std', 'mean', 'std', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'lightgbm', 'os', 'warnings'] ['stats', 'norm', 'skew', 'LabelEncoder', 'KFold', 'cross_val_score', 'train_test_split', 'mean_squared_error', 'boxcox1p', 'Rank1D', 'MinMaxScaler']Dict:{'numpy': ['mean', 'median', 'abs', 'sum', 'info', 'std'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'sklearn': ['transform'], 'xgboost': [], 'lightgbm': [], 'os': [], 'warnings': [], 'yellowbrick': []} axis_0: 0, axis_1: 3
using-classification-for-predictions.py : ['read_csv', 'read_csv', 'astype', 'fillna', 'fillna', 'mean', 'mean', 'to_datetime', 'to_datetime', 'factorize', 'fillna', 'fillna', 'concat', 'fillna', 'mean', 'groupby', 'map', 'sort_values', 'to_csv', 'reset_index', 'apply', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'to_datetime', 'to_datetime', 'to_datetime', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'to_datetime', 'to_datetime', 'to_datetime', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'to_datetime', 'to_datetime', 'to_datetime'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'matplotlib.dates', 'matplotlib.cbook', 'seaborn', 'gc', 'time', 'warnings', 'lightgbm', 'warnings'] ['mean_squared_error', 'roc_auc_score', 'log_loss', 'SettingWithCopyWarning', 'KFold', 'GroupKFold']Dict:{'os': [], 'pandas': [], 'numpy': ['mean', 'sum'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'gc': [], 'time': [], 'warnings': [], 'lightgbm': [], '=': [], 'pd': [], 'np': [], "importances['feature']": []} axis_0: 1, axis_1: 0
ps3e20-time-series-for-beginners.py : ['read_csv', 'read_csv', 'drop', 'drop', 'head', 'count', 'nunique', 'sum', 'isnull', 'concat', 'drop', 'describe', 'head', 'count', 'nunique', 'sum', 'isnull', 'concat', 'drop', 'describe', 'to_datetime', 'astype', 'astype', 'astype', 'corr', 'corr', 'drop', 'drop_duplicates', 'reset_index', 'drop_duplicates', 'astype', 'astype', 'apply', 'drop', 'reset_index', 'drop_duplicates', 'apply', 'apply', 'apply', 'value_counts', 'value_counts', 'copy', 'pop', 'copy', 'to_datetime', 'astype', 'copy', 'pop', 'mean', 'std', 'mean', 'std', 'reindex', 'sort_values', 'mean', 'drop', 'drop', 'to_csv', 'concat', 'max', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'geopandas', 'folium', 're', 'missingno', 'geopy'] ['OneHotEncoder', 'MEstimateEncoder', 'GLMMEncoder', 'OrdinalEncoder', 'CatBoostEncoder', 'Nominatim', 'RateLimiter', 'RepeatedStratifiedKFold', 'StratifiedKFold', 'KFold', 'TimeSeriesSplit', 'GroupKFold', 'LeaveOneGroupOut', 'KNNImputer', 'SimpleImputer', 'ExtraTreesRegressor', 'RandomForestRegressor', 'GradientBoostingRegressor', 'HistGradientBoostingRegressor', 'VotingRegressor', 'StackingRegressor', 'AdaBoostRegressor', 'KNeighborsRegressor', 'Ridge', 'Lasso', 'HuberRegressor', 'PLSRegression', 'MLPRegressor', 'mean_squared_error', 'roc_auc_score', 'roc_curve', 'euclidean_distances', 'Pipeline', 'make_pipeline', 'BaseEstimator', 'TransformerMixin', 'ClassifierMixin', 'FunctionTransformer', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'ColumnTransformer', 'CalibratedClassifierCV', 'dendrogram', 'linkage', 'squareform', 'XGBRegressor', 'LGBMRegressor', 'CatBoostRegressor']Dict:{'numpy': ['mean', 'max', 'sum', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'to_datetime'], 'matplotlib': [], 'seaborn': [], 'geopandas': [], 'folium': [], 're': [], 'missingno': [], 'geopy': [], 'category_encoders': [], 'sklearn': [], 'scipy': [], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': []} axis_0: 1, axis_1: 0
malware-feature-engineering-full-train-and-test.py : ['items', 'items', 'read_csv', 'nunique', 'nunique', 'reset_index', 'value_counts', 'reset_index', 'set_index', 'max', 'fillna', 'to_dict', 'factorize', 'map', 'get', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'to_csv', 'read_csv', 'map', 'get', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'to_csv', 'head'] ['numpy', 'pandas', 'gc', 'lightgbm', 'warnings', 'gc', 'time', 'sys', 'datetime', 'os'] ['tqdm', 'KFold']Dict:{'numpy': ['sum', 'max', 'min'], 'pandas': ['factorize', 'read_csv', 'value_counts'], 'tqdm': [], 'gc': [], 'lightgbm': [], 'sklearn': [], 'warnings': [], 'time': [], 'sys': [], 'datetime': [], 'os': []} axis_0: 0, axis_1: 0
house-prices-data-visualization-with-plotly.py : ['read_csv', 'read_csv', 'info', 'hist', 'keys', 'boxplot', 'skew', 'kurt', 'where', 'drop', 'corr', 'bool', 'corr', 'isnull', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'count', 'isnull', 'sort_values', 'concat', 'head', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'count', 'isnull', 'sort_values', 'concat', 'head', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'apply', 'apply', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'unique', 'unique', 'transform', 'transform', 'drop', 'drop', 'sort_values', 'apply', 'dropna', 'head', 'sort_values', 'apply', 'dropna', 'head', 'get_dummies', 'get_dummies', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'array', 'array', 'array', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'matplotlib.style', 'matplotlib.gridspec', 'plotly', 'plotly.express', 'plotly.graph_objs', 'xgboost'] ['skew', 'stats', 'init_notebook_mode', 'iplot', 'LabelEncoder', 'train_test_split', 'KFold', 'cross_val_score', 'mean_squared_log_error', 'make_pipeline', 'RobustScaler', 'RidgeCV', 'LassoCV', 'SVR', 'ElasticNetCV', 'GradientBoostingRegressor', 'LGBMRegressor', 'StackingCVRegressor', 'mean_squared_error', 'boxcox1p', 'boxcox1p']Dict:{'numpy': ['mean', 'sum', 'array', 'where', 'unique', 'info', 'std'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'unique', 'array'], 'matplotlib': [], 'seaborn': ['boxplot'], 'scipy': [], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'mlxtend': []} axis_0: 0, axis_1: 4
top-5-solution-with-detailed-explanation.py : ['read_csv', 'read_csv', 'head', 'info', 'describe', 'value_counts', 'any', 'isna', 'sum', 'isna', 'round', 'dropna', 'sum', 'isnull', 'select_dtypes', 'items', 'count', 'groupby', 'items', 'count', 'groupby', 'sum', 'astype', 'sum', 'gt', 'sum', 'sum', 'sum', 'astype', 'sum', 'gt', 'sum', 'sum', 'drop', 'drop', 'head', 'head', 'select_dtypes', 'unique', 'items', 'head', 'unique', 'unique', 'astype', 'apply', 'to_dict', 'value_counts', 'map', 'astype', 'apply', 'to_dict', 'value_counts', 'map', 'apply', 'apply', 'unique', 'fillna', 'fillna', 'apply', 'astype', 'apply', 'apply', 'apply', 'astype', 'apply', 'apply', 'drop', 'drop', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'drop', 'fillna', 'fillna', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'drop', 'drop', 'copy', 'drop', 'copy', 'astype', 'reset_index', 'concat', 'any', 'isna', 'sum', 'isna', 'round', 'crosstab', 'sum', 'isna', 'iterrows', 'isnull', 'mode', 'sum', 'isna', 'crosstab', 'sum', 'isna', 'isnull', 'apply', 'sum', 'isna', 'crosstab', 'sum', 'isna', 'iterrows', 'isnull', 'mode', 'sum', 'isna', 'isnull', 'crosstab', 'isnull', 'sum', 'isna', 'isnull', 'apply', 'sum', 'isna', 'sum', 'isna', 'fillna', 'sum', 'isna', 'crosstab', 'sum', 'isna', 'iterrows', 'isnull', 'mode', 'sum', 'isna', 'fillna', 'map', 'value_counts', 'crosstab', 'crosstab', 'sum', 'isna', 'iterrows', 'isnull', 'mode', 'sum', 'isna', 'sum', 'isna', 'iterrows', 'isnull', 'mode', 'sum', 'isna', 'fillna', 'unstack', 'groupby', 'sum', 'isna', 'isna', 'isna', 'transform', 'groupby', 'fillna', 'mode', 'sum', 'isna', 'sum', 'isna', 'isna', 'isna', 'transform', 'groupby', 'fillna', 'mode', 'sum', 'isna', 'sum', 'isna', 'isna', 'isna', 'isna', 'isna', 'astype', 'sum', 'isna', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'sum', 'isna', 'isna', 'sum', 'isna', 'fillna', 'unstack', 'median', 'groupby', 'sum', 'sum', 'isna', 'isna', 'isna', 'transform', 'groupby', 'fillna', 'median', 'sum', 'isna', 'crosstab', 'sum', 'isna', 'iterrows', 'isnull', 'mode', 'sum', 'isna', 'sum', 'isnull', 'copy', 'isin', 'copy', 'isin', 'drop', 'drop', 'transform', 'read_csv', 'astype', 'to_csv'] ['warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'pickle'] ['LinearRegression', 'train_test_split', 'StandardScaler', 'OneHotEncoder', 'ColumnTransformer', 'Pipeline', 'VotingClassifier', 'accuracy_score']Dict:{'warnings': [], 'numpy': ['median', 'any', 'sum', 'round', 'unique', 'isin', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'crosstab'], 'matplotlib': [], 'seaborn': [], 'pickle': [], 'sklearn': []} axis_0: 1, axis_1: 18
titanic-disaster-survival-prediction-rf.py : ['read_csv', 'head', 'read_csv', 'head', 'copy', 'drop', 'concat', 'info', 'sum', 'isnull', 'round', 'sum', 'isnull', 'count', 'isnull', 'fillna', 'fillna', 'mode', 'insert', 'head', 'value_counts', 'median', 'groupby', 'sort_values', 'groupby', 'fillna', 'median', 'concat', 'boxplot', 'median', 'groupby', 'round', 'round', 'round', 'groupby', 'fillna', 'median', 'concat', 'sum', 'isnull', 'concat', 'sort_index', 'value_counts', 'groupby', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'value_counts', 'groupby', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'value_counts', 'groupby', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'value_counts', 'sample', 'concat', 'sort_index', 'value_counts', 'groupby', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'quantile', 'quantile', 'quantile', 'round', 'round', 'round', 'round', 'round', 'insert', 'sample', 'concat', 'sort_index', 'value_counts', 'groupby', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'concat', 'sort_index', 'head', 'concat', 'sort_index', 'insert', 'sample', 'concat', 'sort_index', 'value_counts', 'groupby', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'round', 'sum', 'concat', 'sort_index', 'drop', 'head', 'select_dtypes', 'get_dummies', 'head', 'drop', 'head', 'drop', 'head', 'concat', 'head', 'sort_index', 'tail', 'concat', 'corr', 'drop', 'get', 'get', 'get', 'get', 'get', 'get', 'concat', 'rename', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['StandardScaler', 'GridSearchCV', 'RandomForestClassifier']Dict:{'numpy': ['median', 'quantile', 'sum', 'round', 'info', 'insert', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': ['boxplot', 'get'], 'seaborn': ['boxplot'], 'sklearn': [], 'os': ['rename'], '#For': [], 'creating': [], 'and': [], 'removing': [], 'submission': [], 'files': []} axis_0: 0, axis_1: 0
keras-cnn-1d-fraud-detector.py : ['read_csv', 'read_csv', 'drop', 'drop', 'drop', 'reset_index', 'sum', 'isna', 'map', 'map', 'map', 'value_counts', 'map', 'value_counts', 'skew', 'min', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'gc', 'time', 'random', 'tensorflow'] ['roc_auc_score', 'StratifiedKFold', 'preprocessing', 'SimpleImputer', 'backend', 'Sequential', 'load_model', 'Adam', 'Nadam', 'glorot_uniform', 'lecun_uniform', 'Dense', 'Conv1D', 'Flatten', 'MaxPool1D', 'Dropout', 'Activation', 'BatchNormalization', 'ModelCheckpoint', 'EarlyStopping']Dict:{'numpy': ['sum', 'add', 'min'], 'pandas': ['isna', 'read_csv', 'value_counts'], 'gc': [], 'time': [], 'random': [], 'tensorflow': ['add'], 'sklearn': [], 'keras': []} axis_0: 0, axis_1: 1
eda-fe-stacking-for-beginner-top-4.py : ['read_csv', 'read_csv', 'head', 'head', 'skew', 'kurt', 'sum', 'isnull', 'drop', 'concat', 'sort_values', 'sum', 'isnull', 'reset_index', 'astype', 'reset_index', 'value_counts', 'sort_values', 'corr', 'corr', 'boxplot', 'sort_values', 'skew', 'sort_values', 'kurt', 'drop', 'drop', 'sort_values', 'concat', 'value_counts', 'drop', 'sort_values', 'reset_index', 'concat', 'drop', 'sum', 'isnull', 'value_counts', 'value_counts', 'value_counts', 'fillna', 'fillna', 'fillna', 'mode', 'transform', 'groupby', 'fillna', 'mode', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'sum', 'sum', 'isnull', 'astype', 'astype', 'sort_values', 'apply', 'dropna', 'sort_values', 'apply', 'dropna', 'transform', 'apply', 'apply', 'apply', 'apply', 'get_dummies', 'drop', 'keys', 'mean', 'array', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'optuna'] ['norm', 'skew', 'probplot', 'boxcox1p', 'StandardScaler', 'RobustScaler', 'PolynomialFeatures', 'OneHotEncoder', 'LabelEncoder', 'train_test_split', 'KFold', 'GridSearchCV', 'cross_val_score', 'SelectKBest', 'f_classif', 'chi2', 'Pipeline', 'mean_squared_error', 'Lasso', 'Ridge', 'ElasticNet', 'KernelRidge', 'SVR', 'RandomForestRegressor', 'GradientBoostingRegressor', 'XGBRegressor', 'LGBMRegressor', 'StackingCVRegressor', 'DBSCAN', 'partial', 'boxcox1p', 'boxcox_normmax']Dict:{'numpy': ['mean', 'median', 'array', 'sum'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'array'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': [], 'warnings': [], 'sklearn': [], 'xgboost': ['apply'], 'lightgbm': [], 'mlxtend': [], 'optuna': [], 'functools': []} axis_0: 2, axis_1: 6
pss3e25-feature-engineering-openfe-featureviz.py : ['read_csv', 'head', 'read_csv', 'head', 'info', 'nunique', 'drop', 'head', 'drop', 'head', 'drop', 'copy', 'head', 'reset_index', 'head', 'reset_index', 'head', 'sort_values', 'sum', 'isnull', 'copy', 'head', 'copy', 'head', 'pop', 'head', 'transform', 'head', 'head', 'head', 'read_csv', 'head', 'to_csv', 'to_csv', 'to_csv'] ['pandas', 'sys', 'featurewiz'] ['OpenFE', 'transform', 'LGBMImputer', 'train_test_split']Dict:{'pandas': ['read_csv', 'isnull'], 'openfe': [], 'sys': [], 'kuma_utils': [], 'featurewiz': [], 'sklearn': []} axis_0: 0, axis_1: 2
g-research-crypto-forecasting-baseline-fe.py : ['read_csv', 'head', 'read_csv', 'copy', 'dropna', 'drop', 'iterrows', 'fillna'] ['os', 'numpy', 'pandas', 'random', 'matplotlib.pyplot', 'seaborn', 'gresearch_crypto', 'warnings'] ['LGBMRegressor']Dict:{'os': [], 'numpy': ['copy'], 'pandas': ['read_csv'], 'random': [], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'gresearch_crypto': [], 'warnings': []} axis_0: 0, axis_1: 1
ps3e16-eda-cluster-ensemble-xg-cat.py : ['read_csv', 'head', 'duplicated', 'unique', 'sum', 'isnull', 'describe', 'copy', 'drop', 'hist', 'boxplot', 'mean', 'select_dtypes', 'head', 'get_dummies', 'concat', 'drop', 'corr', 'corr', 'drop', 'sort_values', 'read_csv', 'copy', 'drop', 'drop', 'get_dummies', 'read_csv', 'drop', 'get_dummies', 'read_csv', 'read_csv', 'drop', 'drop', 'head'] ['warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'plotly.graph_objects', 'xgboost'] ['train_test_split', 'cross_val_score', 'KFold', 'RandomizedSearchCV', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'OneHotEncoder', 'ColumnTransformer', 'RandomForestClassifier', 'VotingRegressor', 'accuracy_score', 'classification_report', 'confusion_matrix', 'mean_absolute_error', 'mean_squared_error', 'r2_score', 'Pipeline', 'PCA', 'TSNE', 'KMeans', 'CatBoostRegressor']Dict:{'warnings': [], 'numpy': ['mean', 'sum', 'unique', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'unique'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'plotly': [], 'xgboost': [], 'sklearn': [], 'catboost': []} axis_0: 0, axis_1: 2
writing-processes-to-quality-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'merge', 'unique', 'sample', 'isin', 'head', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'merge', 'head', 'head', 'drop', 'mean', 'head', 'sort_values', 'clip', 'mean', 'clip', 'to_csv'] ['warnings', 'os', 'gc', 're', 'random', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'optuna'] ['Counter', 'skew', 'kurtosis', 'tqdm', 'Word2Vec', 'LabelEncoder', 'KFold', 'StratifiedKFold', 'GroupKFold', 'train_test_split', 'TfidfVectorizer', 'TruncatedSVD', 'mean_squared_error']Dict:{'warnings': [], 'os': ['rename'], 'gc': [], 're': [], 'random': ['sample'], 'collections': ['items'], 'numpy': ['mean', 'max', 'abs', 'unique', 'clip', 'isin', 'std'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'gensim': [], 'sklearn': [], 'lightgbm': [], 'optuna': []} axis_0: 1, axis_1: 7
bayesian-opt-seed-blending-with-tuning-69.py : ['cut', 'cut', 'unique', 'where', 'where', 'keys', 'keys', 'transform', 'transform', 'transform', 'transform', 'copy', 'copy', 'copy', 'copy', 'concat', 'astype', 'hist', 'hist', 'items', 'transform', 'transform', 'transform', 'drop', 'drop', 'drop', 'items', 'items', 'items', 'mean', 'transform', 'copy', 'items', 'transform', 'drop', 'rank', 'isin', 'astype', 'mean', 'groupby', 'sort_values', 'keys', 'rename', 'reset_index', 'rename', 'melt', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'value_counts', 'value_counts', 'map', 'map', 'map', 'map', 'map', 'astype', 'to_datetime', 'to_datetime', 'groupby', 'query', 'sum', 'sum', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'mean', 'update', 'keys', 'groupby', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'sum', 'transform', 'groupby', 'sum', 'sum', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'where', 'where', 'astype', 'to_csv', 'value_counts'] ['numpy', 'pandas', 'random', 'os', 'copy', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'catboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'eli5', 'shap', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'scipy', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 're'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'defaultdict', 'Counter', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit', 'RepeatedStratifiedKFold', 'metrics', 'classification_report', 'confusion_matrix', 'linear_model', 'BayesianOptimization', 'HTML', 'OrdinalEncoder', 'List', 'jit', 'partial', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'Any', 'product', 'tqdm', 'Parallel', 'delayed', 'BaseEstimator', 'TransformerMixin']Dict:{'numpy': ['mean', 'max', 'sum', 'where', 'unique', 'isin', 'copy'], 'pandas': ['read_csv', 'melt', 'cut', 'concat', 'value_counts', 'unique', 'to_datetime'], 'random': [], 'os': ['rename'], 'copy': ['copy'], 'matplotlib': ['hist'], 'tqdm': ['update'], 'sklearn': [], 'collections': ['items', 'keys', 'update', 'copy'], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'time': [], 'datetime': [], 'gc': [], 'seaborn': [], 'warnings': [], 'bayes_opt': [], 'eli5': [], 'shap': [], 'IPython': [], 'json': [], 'altair': [], 'category_encoders': [], 'networkx': [], 'typing': [], 'numba': [], 'functools': [], 'scipy': [], 'itertools': [], 're': [], 'joblib': []} axis_0: 4, axis_1: 6
simple-eda-model-hyperopt-w-easy-code.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'head', 'to_datetime', 'crosstab', 'quantile', 'crosstab', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'nunique', 'value_counts', 'sum', 'isnull', 'nunique', 'sum', 'isna', 'value_counts', 'sum', 'value_counts', 'map', 'value_counts', 'map', 'value_counts', 'join', 'value_counts', 'value_counts', 'nlargest', 'sum', 'groupby', 'sum', 'sum', 'groupby', 'nlargest', 'sum', 'groupby', 'nlargest', 'sum', 'groupby', 'sum', 'sum', 'groupby', 'nlargest', 'sum', 'groupby', 'head', 'sort_values', 'value_counts', 'isin', 'boxplot', 'isin', 'boxplot', 'isin', 'head', 'sort_values', 'head', 'describe', 'sum', 'sum', 'nlargest', 'value_counts', 'isin', 'isin', 'isin', 'sample', 'sort_values', 'reset_index', 'value_counts', 'rename', 'rename', 'astype', 'reset_index', 'sum', 'groupby', 'astype', 'reset_index', 'sum', 'groupby', 'astype', 'count', 'groupby', 'sum', 'groupby', 'fillna', 'diff', 'groupby', 'hist', 'agg', 'groupby', 'head', 'read_csv', 'read_csv', 'median', 'map', 'map', 'map', 'drop', 'array', 'unique', 'unique', 'astype', 'astype', 'astype', 'sort_values', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'clip', 'fillna', 'head', 'astype', 'astype', 'astype', 'concat', 'fillna', 'merge', 'merge', 'merge', 'astype', 'astype', 'astype', 'astype', 'head', 'copy', 'merge', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'apply', 'astype', 'fillna', 'drop', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'astype', 'drop', 'astype', 'map', 'astype', 'iterrows', 'astype', 'iterrows', 'transform', 'groupby', 'transform', 'groupby', 'any', 'isnull', 'fillna', 'info', 'to_pickle', 'read_pickle', 'drop', 'clip', 'drop', 'isin', 'isin', 'isin', 'isin', 'head', 'transform', 'transform', 'transform', 'transform', 'mean', 'clip', 'clip', 'clip', 'to_csv'] ['pandas', 'seaborn', 'numpy', 'matplotlib.pyplot', 'random', 'plotly.plotly', 'plotly.graph_objs', 'plotly.tools', 'cufflinks', 'cufflinks', 'lightgbm', 'gc', 'warnings', 'squarify', 'time'] ['Counter', 'stats', 'iplot', 'init_notebook_mode', 'partial', 'fmin', 'hp', 'tpe', 'Trials', 'space_eval', 'STATUS_OK', 'STATUS_RUNNING', 'product', 'LabelEncoder', 'SelectFromModel', 'GradientBoostingRegressor']Dict:{'pandas': ['to_pickle', 'isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'read_pickle', 'unique', 'array', 'merge', 'to_datetime', 'crosstab'], 'seaborn': ['boxplot'], 'numpy': ['mean', 'median', 'quantile', 'any', 'max', 'diff', 'sum', 'min', 'unique', 'clip', 'isin', 'info', 'array', 'copy'], 'matplotlib': ['boxplot', 'hist'], 'collections': ['copy'], 'scipy': ['describe'], 'random': ['sample'], 'plotly': [], 'cufflinks': [], 'lightgbm': [], 'functools': [], 'hyperopt': [], 'gc': [], 'warnings': [], 'itertools': [], 'squarify': [], 'sklearn': ['apply'], 'time': []} axis_0: 0, axis_1: 25
using-meta-features-to-improve-model.py : ['to_json', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'max', 'apply', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'groupby', 'abs', 'mean', 'map', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'merge', 'unique', 'merge', 'drop', 'rename', 'apply', 'apply', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'transform', 'copy', 'copy', 'unique', 'min', 'max', 'unique', 'min', 'max', 'unique', 'min', 'max', 'unique', 'min', 'max', 'to_csv', 'head', 'unique', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'altair'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'metrics', 'linear_model', 'HTML', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'product', 'v5', 'HTML']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'os': ['rename'], 'matplotlib': [], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'catboost': [], 'gc': [], 'seaborn': [], 'warnings': [], 'IPython': [], 'json': [], 'altair': [], 'networkx': [], 'numba': [], 'itertools': []} axis_0: 2, axis_1: 3
ps3e26-cirrhosis-survial-prediction-multiclass.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'drop', 'copy', 'copy', 'copy', 'sum', 'isna', 'concat', 'reset_index', 'head', 'round', 'count', 'round', 'count', 'round', 'count', 'value_counts', 'nunique', 'nunique', 'crosstab', 'items', 'where', 'where', 'where', 'sum', 'isna', 'mean', 'isnull', 'mean', 'isnull', 'concat', 'isnull', 'concat', 'drop', 'reset_index', 'fillna', 'copy', 'copy', 'drop', 'drop', 'drop', 'astype', 'array', 'array', 'sum', 'isna', 'mean', 'isnull', 'mean', 'isnull', 'concat', 'copy', 'drop', 'concat', 'reset_index', 'fillna', 'mean', 'copy', 'copy', 'drop', 'drop', 'drop', 'items', 'array', 'array', 'array', 'array', 'items', 'max', 'max', 'min', 'min', 'concat', 'get_dummies', 'value_counts', 'idxmin', 'drop', 'concat', 'duplicated', 'reset_index', 'drop', 'nunique', 'copy', 'copy', 'drop', 'concat', 'transform', 'min', 'transform', 'min', 'transform', 'fillna', 'fillna', 'transform', 'reset_index', 'concat', 'concat', 'mean', 'mean', 'mean', 'mean', 'nunique', 'astype', 'astype', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'astype', 'astype', 'unique', 'unique', 'unique', 'unique', 'replace', 'replace', 'copy', 'copy', 'copy', 'to_dict', 'value_counts', 'map', 'map', 'to_dict', 'value_counts', 'keys', 'astype', 'replace', 'astype', 'replace', 'drop', 'drop', 'nunique', 'astype', 'astype', 'drop', 'drop', 'mean', 'mean', 'mean', 'corr', 'drop', 'drop', 'transform', 'array', 'array', 'mean', 'mean', 'mean', 'any', 'sum', 'isna', 'mean', 'corrwith', 'drop', 'max', 'abs', 'max', 'abs', 'max', 'abs', 'nunique', 'abs', 'corr', 'transform', 'transform', 'concat', 'concat', 'array', 'array', 'mean', 'drop', 'drop', 'copy', 'copy', 'transform', 'drop', 'copy', 'copy', 'drop', 'drop', 'drop', 'copy', 'mean', 'mean', 'unique', 'array', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'array', 'sum', 'array', 'items', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'read_csv', 'div', 'sum', 'to_csv', 'head', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'copy', 'div', 'sum', 'to_csv', 'head'] ['sklearn', 'numpy', 'os', 'datetime', 'pandas', 'matplotlib.pyplot', 'missingno', 'seaborn', 'concurrent.futures', 'random', 'gc', 'xgboost', 'statsmodels.api', 'math', 'optuna', 'cmaes', 'xgboost', 'lightgbm', 're', 'warnings'] ['PrettyTable', 'tqdm', 'tqdm', 'deepcopy', 'partial', 'combinations', 'randint', 'uniform', 'f_classif', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'FunctionTransformer', 'metrics', 'GridSearchCV', 'RandomizedSearchCV', 'combinations', 'SimpleImputer', 'train_test_split', 'cross_val_score', 'mean_squared_error', 'mean_squared_log_error', 'roc_auc_score', 'accuracy_score', 'f1_score', 'precision_recall_curve', 'log_loss', 'KMeans', 'KElbowVisualizer', 'OptimalK', 'stats', 'ttest_ind', 'boxcox', 'variance_inflation_factor', 'BaseEstimator', 'TransformerMixin', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StratifiedKFold', 'KFold', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'AdaBoostClassifier', 'BalancedRandomForestClassifier', 'make_classification', 'GaussianNB', 'enable_hist_gradient_boosting', 'DecisionTreeClassifier', 'LogisticRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'NuSVC', 'SVC', 'KNeighborsClassifier', 'KNNImputer', 'LogisticRegression', 'MLPClassifier', 'Pool', 'TfidfVectorizer', 'PCA', 'TruncatedSVD']Dict:{'sklearn': ['transform'], 'numpy': ['mean', 'any', 'max', 'abs', 'sum', 'array', 'where', 'round', 'min', 'unique', 'std', 'copy'], 'os': ['replace'], 'datetime': [], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'array', 'crosstab'], 'matplotlib': [], 'missingno': [], 'prettytable': ['copy'], 'seaborn': [], 'tqdm': [], 'concurrent': [], 'copy': [], 'functools': [], 'itertools': [], 'random': [], 'gc': [], 'xgboost': [], 'yellowbrick': [], 'gap_statistic': [], 'scipy': [], 'statsmodels': [], 'math': [], 'optuna': [], 'cmaes': [], 'lightgbm': [], 'category_encoders': [], 'imblearn': [], 'catboost': [], 're': [], 'warnings': []} axis_0: 11, axis_1: 10
embeddings-cnn-lstm-models-lb-0-683.py : ['sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'read_csv', 'read_csv', 'fillna', 'fillna', 'mean', 'get', '__init__', 'dot', 'dot', 'squeeze', 'sum', 'sum', 'stack', 'mean', 'std', 'items', 'get', 'stack', 'mean', 'std', 'items', 'get', 'stack', 'mean', 'std', 'items', 'get', 'round', 'astype', 'round', 'astype', 'round', 'astype', 'round', 'astype', 'astype', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'nltk', 're', 'string', 'gc', 'base64', 'pandas'] ['set_random_seed', 'stopwords', 'SnowballStemmer', 'Model', 'Input', 'Dense', 'Embedding', 'concatenate', 'CuDNNGRU', 'Bidirectional', 'GlobalAveragePooling1D', 'GlobalMaxPooling1D', 'Conv1D', 'Add', 'BatchNormalization', 'Activation', 'CuDNNLSTM', 'Dropout', '*', '*', 'text', 'sequence', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau', 'metrics', 'backend', 'Layer', 'InputSpec', 'initializers', 'train_test_split', 'HTML']Dict:{'numpy': ['mean', 'stack', 'squeeze', 'sum', 'round', 'dot', 'std'], 'pandas': ['read_csv'], 'tensorflow': [], 'os': [], 'nltk,': [], 're,': [], 'string': [], 'nltk': [], 'keras': ['get'], 'gc': [], 'sklearn': ['__init__'], 'IPython': ['__init__'], 'base64': [], '': []} axis_0: 0, axis_1: 6
otto-simple-lgb.py : ['read_csv', 'read_csv', 'read_csv', 'replace', 'astype', 'concat', 'to_dict', 'value_counts', 'map', 'max', 'sum', 'sum', 'sum', 'sum', 'sum', 'reset_index', 'isnull', 'reset_index', 'isnull', 'astype', 'astype', 'concat', 'head', 'sort_values', 'mean', 'groupby', 'concat', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'lightgbm', 'matplotlib.pyplot', 'seaborn'] ['StratifiedKFold', 'log_loss', 'preprocessing']Dict:{'numpy': ['mean', 'sum', 'max'], 'pandas': ['concat', 'value_counts', 'read_csv', 'isnull'], 'lightgbm': [], 'sklearn': [], 'matplotlib': [], 'seaborn': []} axis_0: 1, axis_1: 6
ps-s03e05-a-complete-eda.py : ['read_csv', 'read_csv', 'read_csv', 'replace', 'replace', 'replace', 'value_counts', 'value_counts', 'concat', 'drop', 'boxplot', 'apply', 'groupby', 'sum', 'groupby', 'ge', 'abs', 'rename', 'sum', 'isnull', 'rename', 'sum', 'isnull', 'rename', 'sum', 'isnull', 'concat', 'select_dtypes', 'corr', 'select_dtypes', 'corr', 'copy', 'boxplot', 'copy', 'copy', 'concat', 'concat', 'mean', 'copy', 'array', 'copy', 'astype', 'concat', 'concat', 'mean', 'unique', 'set_index', 'astype', 'mode', 'rename', 'to_csv'] ['math', 'matplotlib', 'matplotlib', 'matplotlib.cm', 'matplotlib.colors', 'matplotlib.pyplot', 'matplotlib.ticker', 'lightgbm', 'numpy', 'pandas', 'seaborn', 'scipy', 'warnings', 'scipy'] ['HTML', 'time', 'timedelta', 'Fore', 'Style', 'zscore', 'StratifiedKFold', 'cohen_kappa_score', 'accuracy_score', 'confusion_matrix', 'LGBMClassifier', 'LGBMRegressor', 'partial']Dict:{'IPython': [], 'time': [], 'datetime': [], 'colorama': [], 'math': [], 'matplotlib': [], 'lightgbm': [], 'numpy': ['mean', 'abs', 'sum', 'unique', 'array', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'array'], 'seaborn': ['boxplot'], 'scipy': [], 'warnings': [], 'sklearn': [], 'functools': []} axis_0: 1, axis_1: 2
high-scoring-lgbm-malware-0-702-0-775.py : ['read_csv', 'read_csv', 'astype', 'read_csv', 'read_csv', 'to_dict', 'value_counts', 'map', 'astype', 'concat', 'to_dict', 'value_counts', 'map', 'astype', 'map', 'astype', 'concat', 'factorize', 'where', 'max', 'max', 'astype', 'astype', 'astype', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'value_counts', 'merge', 'fillna', 'fillna', 'apply', 'factorize', 'set_index', 'to_dict', 'map', 'map', 'sum', 'memory_usage', 'sum', 'memory_usage', 'astype', 'astype', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'copy', 'value_counts', 'read_csv', 'map', 'map', 'fillna', 'to_csv', 'hist', 'value_counts', 'to_dict', 'unique', 'isna', 'mean'] ['pandas', 'sys', 'numpy', 'pandas', 'gc', 'random', 'matplotlib.pyplot', 'lightgbm', 'matplotlib.pyplot', 'calendar', 'math'] ['cdll', 'CDLL', 'datetime', 'date', 'timedelta', 'StratifiedKFold', 'datetime']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'factorize', 'unique', 'merge'], 'ctypes': [], 'numpy': ['mean', 'max', 'sum', 'where', 'unique', 'copy'], 'matplotlib': ['hist'], 'datetime': ['max'], 'lightgbm': [], 'sklearn': [], 'calendar,': [], 'math': []} axis_0: 1, axis_1: 3
lightautoml-interpretable-model-autowoe.py : ['read_csv', 'read_csv', 'read_csv', 'mean', 'map', 'map', 'map', 'map', 'map', 'to_dict', 'count', 'groupby', 'drop', 'reset_index', 'concat', 'head', 'astype', 'where', 'astype', 'to_csv', 'mean'] ['pandas', 'numpy'] ['accuracy_score', 'f1_score', 'train_test_split', 'pyplot', 'AutoWoE', 'ReportDeco']Dict:{'pandas': ['concat', 'read_csv'], 'numpy': ['mean', 'where'], 'sklearn': [], 'matplotlib': [], 'autowoe': []} axis_0: 0, axis_1: 0
feature-engineering-smote-lgbm.py : ['join', 'read_csv', 'read_csv', 'head', 'value_counts', 'concat', 'head', 'info', 'describe', 'nunique', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'transform', 'map', 'map', 'map', 'drop', 'drop', 'value_counts', 'copy', 'keys', 'items', 'round', 'mean', 'map', 'to_csv'] ['numpy', 'pandas', 'os', 'time'] ['flatten', 'preprocessing', 'SMOTE', 'LogisticRegression', 'SVC', 'RandomForestClassifier', 'DecisionTreeClassifier', 'train_test_split', 'cross_val_score', 'LGBMClassifier', 'train_test_split', 'GridSearchCV', 'StratifiedKFold']Dict:{'numpy': ['mean', 'round', 'info', 'copy'], 'pandas': ['concat', 'read_csv', 'value_counts'], 'os': [], 'nltk': [], 'sklearn': [], 'imblearn': [], 'lightgbm': [], 'time': []} axis_0: 0, axis_1: 2
a-linear-model-on-apps-and-labels.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'set_index', 'drop_duplicates', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'transform', 'transform', 'transform', 'reset_index', 'merge', 'merge', 'agg', 'groupby', 'merge', 'head', 'dropna', 'dropna', 'isin', 'unique', 'transform', 'transform', 'reset_index', 'merge', 'merge', 'agg', 'groupby', 'merge', 'head', 'dropna', 'dropna', 'transform', 'head', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'os'] ['LabelEncoder', 'csr_matrix', 'hstack', 'LogisticRegression', 'StratifiedKFold', 'log_loss']Dict:{'pandas': ['merge', 'unique', 'read_csv'], 'numpy': ['isin', 'unique'], 'seaborn': [], 'matplotlib': [], 'os': [], 'sklearn': [], 'scipy': []} axis_0: 0, axis_1: 0
cnn-lstm-for-signal-classification-lb-0-513.py : ['max', 'min', 'array', 'array', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'unique', 'unique', 'unique', 'abs', 'abs', 'abs', 'unique', 'abs', 'abs', 'abs', 'unique', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'array', 'array', 'array', 'array', 'array', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add'] ['keras', 'keras.backend', 'tensorflow', 'gc', 'matplotlib.pyplot', 'seaborn', 'sys', 'pyarrow.parquet', 'pandas', 'numpy'] ['LSTM', 'Dropout', 'Dense', 'TimeDistributed', 'Conv1D', 'MaxPooling1D', 'Flatten', 'Sequential', 'jit', 'display', 'clear_output', 'tqdm', '*', 'fftpack', 'signal']Dict:{'keras': ['add'], 'tensorflow': ['unique', 'abs', 'add'], 'gc': [], 'numba': [], 'IPython': [], 'tqdm': [], 'matplotlib': [], 'seaborn': [], 'sys': [], 'pyarrow': [], 'pandas': ['array', 'unique'], 'numpy': [], 'scipy': []} axis_0: 1, axis_1: 0
ps312-8th-place-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'drop', 'drop', 'reset_index', 'items', 'apply', 'apply', 'drop', 'drop', 'clip', 'clip', 'clip', 'clip', 'drop'] ['numpy', 'pandas', 'numpy', 'matplotlib.pyplot', 'plotly.graph_objs'] ['shuffle', 'TSNE', 'load_digits', 'PCA', 'Axes3D']Dict:{'numpy': ['clip'], 'pandas': ['concat', 'read_csv'], 'sklearn': [], 'mpl_toolkits': [], 'matplotlib': [], 'plotly': []} axis_0: 0, axis_1: 2
microsoft-lightgbm-0-795.py : ['read_csv', 'read_csv', 'concat', 'apply', 'apply', 'concat', 'replace', 'items', 'apply', 'apply', 'concat', 'isnull', 'median', 'notnull', 'drop', 'round', 'round', 'round', 'to_csv', 'keys', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 're', 'lightgbm'] ['train_test_split', 'roc_curve', 'auc', 'accuracy_score', 'GridSearchCV']Dict:{'pandas': ['concat', 'notnull', 'read_csv', 'isnull'], 'numpy': ['median', 'round'], 'matplotlib': [], 're': [], 'lightgbm': [], 'sklearn': []} axis_0: 1, axis_1: 3
pca-feature-engineering-with-xgboost.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'to_numpy', 'to_numpy', 'to_numpy', 'array', 'array', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'os', 'warnings'] ['XGBClassifier', 'KFold', 'CountEncoder', 'Pipeline', 'log_loss', 'MultiOutputClassifier']Dict:{'numpy': ['array'], 'pandas': ['array', 'read_csv'], 'os': [], 'xgboost': [], 'sklearn': [], 'category_encoders': [], 'matplotlib': [], 'warnings': []} axis_0: 0, axis_1: 0
word2vec-voting-gpu-k-fold-cv-optuna.py : ['read_csv', 'read_csv', 'read_csv', 'merge', 'drop', 'apply', 'factorize', 'fillna', 'astype', 'mean', 'concat', 'drop', 'mean', 'sort_values', 'reset_index', 'mean', 'groupby', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'optuna', 'gensim'] ['train_test_split', 'KFold', 'RandomForestRegressor', 'GradientBoostingRegressor', 'VotingRegressor', 'mean_squared_error', 'LGBMRegressor', 'XGBRegressor', 'tqdm', 'Word2Vec']Dict:{'pandas': ['concat', 'factorize', 'merge', 'read_csv'], 'numpy': ['mean'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'lightgbm': [], 'xgboost': ['apply'], 'optuna': [], 'tqdm': [], 'gensim': []} axis_0: 1, axis_1: 3
random-forest-baseline-0-664.py : ['read_csv', 'head', 'read_csv', 'apply', 'apply', 'head', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'concat', 'fillna', 'reset_index', 'set_index', 'unique', 'set_index', 'set_index', 'astype', 'astype', 'copy', 'set_index', 'astype', 'astype', 'astype', 'astype', 'read_csv', 'head', 'mean'] ['pandas', 'numpy', 'matplotlib.pyplot', 'jo_wilder'] ['KFold', 'GroupKFold', 'RandomForestClassifier', 'f1_score']Dict:{'pandas': ['concat', 'unique', 'read_csv'], 'sklearn': [], 'matplotlib': [], 'jo_wilder': []} axis_0: 0, axis_1: 1
what-the-features-mean.py : ['read_csv', 'read_csv', 'head', 'pop', 'mean', 'std', 'mean', 'std', 'max', 'min', 'max', 'max', 'drop', 'sum', 'max', 'sum', 'max', 'max', 'max'] ['numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib', 'seaborn', 'os'] []Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'std'], 'pandas': ['read_csv'], 'matplotlib': [], 'seaborn': [], 'os': []} axis_0: 0, axis_1: 0
stock-embedding-ffnn-upgrade-3d.py : ['to_numeric', 'reset_index', 'sort_values', 'update', 'update', 'sort_values', 'sort_values', 'sort_values', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'diff', 'sum', 'unique', 'read_parquet', 'apply', 'groupby', 'apply', 'groupby', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'apply', 'drop', 'read_parquet', 'apply', 'groupby', 'sum', 'mean', 'std', 'max', 'min', 'mean', 'sum', 'max', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'diff', 'sum', 'unique', 'sum', 'mean', 'sum', 'mean', 'sum', 'diff', 'sum', 'diff', 'median', 'abs', 'mean', 'mean', 'median', 'abs', 'mean', 'sum', 'merge', 'merge', 'merge', 'merge', 'drop', 'add_prefix', 'apply', 'drop', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'drop', 'merge', 'concat', 'mean', 'unique', 'merge', 'unique', 'merge', 'read_csv', 'pivot', 'fillna', 'mean', 'head', 'array', 'sum', 'sum', 'mean', 'replace', 'replace', 'transform', 'read_csv', 'pivot', 'corr', 'isin', 'agg', 'groupby', 'isin', 'agg', 'groupby', 'reset_index', 'concat', 'drop', 'reset_index', 'concat', 'concat', 'pivot', 'join', 'reset_index', 'pivot', 'join', 'reset_index', 'merge', 'merge', 'update', 'fillna', 'mean', 'fillna', 'mean', 'astype', 'isin', 'isin', 'isin', 'isin', 'transform', 'transform', 'clip', 'head', 'to_csv'] ['glob', 'os', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'numpy.matlib', 'plotly.express', 'plotly.graph_objects', 'tensorflow', 'warnings'] ['display', 'HTML', 'Parallel', 'delayed', 'preprocessing', 'model_selection', 'MinMaxScaler', 'QuantileTransformer', 'r2_score', 'KMeans', 'seed', 'keras', 'backend', 'sigmoid', 'get_custom_objects', 'Activation']Dict:{'IPython': [], 'glob': [], 'os': ['replace'], 'gc': [], 'numpy': [], 'pandas': ['read_csv', 'concat', 'read_parquet', 'to_numeric', 'unique', 'array', 'merge', 'pivot'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'joblib': [], 'sklearn': [], 'tensorflow': [], 'keras': [], 'warnings': []} axis_0: 4, axis_1: 2
homecredit-default-risk-step-by-step-1st-notebook.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'select_dtypes', 'get_dummies', 'select_dtypes', 'select_dtypes', 'nunique', 'select_dtypes', 'nunique', 'select_dtypes', 'value_counts', 'value_counts', 'isnull', 'value_counts', 'value_counts', 'count', 'groupby', 'mean', 'groupby', 'median', 'groupby', 'std', 'groupby', 'corr', 'corr', 'hist', 'boxplot', 'array', 'corr', 'corr', 'drop', 'sort_values', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'rename', 'reset_index', 'drop', 'quantile', 'value_counts', 'where', 'isin', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'isin', 'unique', 'nunique', 'isin', 'unique', 'nunique', 'isin', 'unique', 'read_csv', 'head', 'sum', 'isnull', 'agg', 'hist', 'value_counts', 'agg', 'groupby', 'sum', 'sum', 'sum', 'sum', 'rename', 'reset_index', 'min', 'groupby', 'abs', 'merge', 'abs', 'head', 'read_csv', 'head', 'merge', 'head', 'hist', 'count', 'groupby', 'agg', 'count', 'groupby', 'describe', 'drop', 'drop', 'where', 'isin', 'where', 'isin', 'agg', 'groupby', 'value_counts', 'count', 'groupby', 'rename', 'reset_index', 'count', 'groupby', 'where', 'where', 'where', 'where', 'merge', 'agg', 'groupby', 'merge', 'agg', 'groupby', 'merge', 'agg', 'groupby', 'merge', 'to_feather', 'head', 'to_feather', 'read_csv', 'head', 'describe', 'drop', 'where', 'isin', 'agg', 'groupby', 'groupby', 'reset_index', 'head', 'to_feather', 'read_csv', 'head', 'describe', 'drop', 'where', 'isin', 'drop', 'agg', 'groupby', 'groupby', 'reset_index', 'head', 'to_feather', 'read_csv', 'head', 'describe', 'drop', 'apply', 'apply', 'agg', 'groupby', 'groupby', 'reset_index', 'head', 'to_feather', 'read_csv', 'head', 'describe', 'drop', 'where', 'isin', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'drop', 'replace', 'replace', 'replace', 'replace', 'replace', 'agg', 'groupby', 'agg', 'groupby', 'merge', 'agg', 'groupby', 'merge', 'reset_index', 'head', 'to_feather', 'read_csv', 'read_csv', 'head', 'describe', 'drop', 'drop', 'sum', 'drop', 'drop', 'where', 'where', 'where', 'where', 'where', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'factorize', 'replace', 'mean', 'head', 'to_feather', 'reset_index'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['LGBMClassifier']Dict:{'numpy': ['mean', 'median', 'quantile', 'max', 'abs', 'sum', 'array', 'where', 'min', 'unique', 'isin', 'std'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'factorize', 'unique', 'array', 'merge'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 4
fork-of-eda-on-basic-data-and-lgb-in-progress.py : ['read_csv', 'read_csv', 'merge', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'to_datetime', 'apply', 'to_datetime', 'apply', 'nunique', 'drop', 'drop', 'info', 'astype', 'drop', 'drop', 'head', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'sum', 'hist', 'isna', 'reset_index', 'sum', 'groupby', 'isna', 'hist', 'value_counts', 'nunique', 'sum', 'sum', 'sum', 'sum', 'head', 'fillna', 'boxplot', 'count', 'groupby', 'count', 'groupby', 'count', 'groupby', 'sum', 'groupby', 'min', 'max', 'min', 'max', 'head', 'sort_values', 'agg', 'groupby', 'mean', 'groupby', 'sum', 'groupby', 'mean', 'groupby', 'sum', 'groupby', 'hist', 'fillna', 'hist', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'fillna', 'fillna', 'astype', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'mean', 'mean', 'mean', 'mean', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'sort_values', 'drop', 'drop', 'reset_index', 'agg', 'groupby', 'apply', 'fillna', 'to_csv'] ['numpy', 'pandas', 'json', 'bq_helper', 'seaborn', 'matplotlib.pyplot', 'lightgbm'] ['json_normalize', 'LabelEncoder', 'TimeSeriesSplit', 'KFold', 'mean_squared_error']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'info'], 'pandas': [], 'json': [], 'bq_helper': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'lightgbm': [], 'sklearn': []} axis_0: 0, axis_1: 9
fb3-why-not-tf-idf-text-vectorization.py : ['join', 'read_csv', 'read_csv', 'concat', 'reset_index', 'reset_index', 'concat', 'drop', 'drop', 'drop', 'drop', 'read_csv', 'read_csv', 'sub', 'join', 'sub', 'reset_index', 'reset_index', 'concat', 'apply', 'apply', 'apply', 'mean', 'apply', 'join', 'apply', 'max', 'max', 'max', 'max', 'concat', 'drop', 'drop', 'drop', 'drop', 'mean', 'mean', 'copy', 'copy', 'copy', 'reset_index', 'read_csv', 'to_csv'] ['numpy', 'pandas', 're', 'string', 'gc', 'os'] ['stopwords', 'word_tokenize', 'Normalizer', 'TfidfVectorizer', 'MultiOutputRegressor', 'CatBoostRegressor', 'mean_squared_error', 'cross_validate', 'train_test_split']Dict:{'numpy': ['mean', 'max', 'copy'], 'pandas': ['concat', 'read_csv'], 're': ['sub'], 'string': [], 'gc': [], 'nltk': [], 'sklearn': [], 'catboost': [], 'os': []} axis_0: 4, axis_1: 2
store-sales-getting-started-with-time-series.py : ['read_csv', 'to_period', 'sort_index', 'set_index', 'head', 'read_csv', 'to_period', 'sort_values', 'set_index', 'head', 'to_period', 'date_range', 'to_period', 'read_csv', 'mean', 'rolling', 'join', 'fillna', 'dropna', 'head', 'to_timestamp', 'shift', 'dropna', 'head', 'corr', 'corr', 'corr', 'to_period', 'read_csv', 'first', 'groupby', 'head', 'join', 'get_dummies', 'get_dummies', 'drop', 'head', 'unstack', 'iterrows', 'head', 'unstack', 'join', 'head', 'join', 'head', 'clip', 'clip', 'clip', 'clip', 'clip', 'mean', 'clip', 'mean', 'stack', 'stack', 'stack', 'stack', 'join', 'shift', 'join', 'join', 'stack', 'clip', 'stack', 'clip', 'stack', 'apply', 'groupby', 'clip', 'head', 'stack', 'head', 'read_csv', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'gc', 'warnings'] ['pyplot', 'rcParams', 'style', 'express', 'graph_objects', 'DeterministicProcess', 'CalendarFourier', 'plot_pacf', 'RobustScaler', 'StandardScaler', 'Normalizer', 'MinMaxScaler', 'train_test_split', 'LinearRegression', 'Ridge', 'RandomForestRegressor', 'ExtraTreesRegressor', 'BaggingRegressor', 'filterwarnings', 'simplefilter', 'Parallel', 'delayed', 'tqdm', 'mean_squared_log_error', 'TimeSeriesSplit', 'SVR', 'MultiOutputRegressor', 'mean_absolute_error', 'Parallel', 'delayed', 'Ridge', 'LinearRegression', 'ElasticNet', 'SVR', 'RandomForestRegressor', 'ExtraTreesRegressor', 'BaggingRegressor', 'VotingRegressor', 'tqdm', 'tqdm', 'mean_squared_log_error']Dict:{'numpy': ['mean', 'stack', 'clip'], 'pandas': ['date_range', 'get_dummies', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'statsmodels': [], 'sklearn': [], 'gc': [], 'warnings': [], 'joblib': [], 'tqdm': []} axis_0: 0, axis_1: 1
xgboost-baseline-0-680.py : ['read_csv', 'agg', 'groupby', 'sum', 'read_csv', 'head', 'read_csv', 'apply', 'apply', 'head', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'astype', 'agg', 'groupby', 'drop', 'concat', 'fillna', 'reset_index', 'set_index', 'unique', 'set_index', 'set_index', 'astype', 'astype', 'astype', 'copy', 'set_index', 'astype', 'astype', 'astype', 'astype', 'read_csv', 'head', 'mean'] ['pandas', 'numpy', 'gc', 'matplotlib.pyplot', 'jo_wilder', 'gc'] ['KFold', 'GroupKFold', 'XGBClassifier', 'f1_score']Dict:{'pandas': ['concat', 'unique', 'read_csv'], 'sklearn': [], 'xgboost': ['apply'], 'matplotlib': [], 'jo_wilder': [], 'gc': []} axis_0: 1, axis_1: 2
houseprices-pipeline-featuretools-tpot.py : ['read_csv', 'read_csv', 'concat', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'fillna', 'select_dtypes', 'unique', 'value_counts', 'boxplot', 'astype', 'fillna', 'replace', 'get_dummies', 'astype', 'get_dummies', 'astype', 'clip', 'concat', 'drop', 'head', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'isnull', 'isnull', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'astype', 'fillna', 'median', 'notnull', 'drop', 'isnull', 'head', 'corr', 'drop', 'drop', 'transform', 'transform', 'transform', 'mean', 'std', 'boxplot', 'reset_index', 'fillna', 'copy', 'copy', 'drop', 'drop', 'transform', 'transform', 'transform', 'mean', 'std', 'boxplot'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 're', 'featuretools'] ['rcParams', 'LabelEncoder', 'train_test_split', 'KFold', 'cross_val_score', 'explained_variance_score', 'median_absolute_error', 'r2_score', 'mean_squared_error', 'accuracy_score', 'confusion_matrix', 'classification_report', 'fbeta_score', 'GridSearchCV', 'SGDRegressor', 'KFold', 'cross_val_score', 'train_test_split', 'LabelEncoder', 'OneHotEncoder', 'StandardScaler', 'Lasso', 'Ridge', 'ElasticNet', 'RANSACRegressor', 'SGDRegressor', 'HuberRegressor', 'BayesianRidge', 'RandomForestRegressor', 'BaggingRegressor', 'AdaBoostRegressor', 'GradientBoostingRegressor', 'ExtraTreesRegressor', 'XGBRegressor', 'plot_importance', 'SVR', 'SVC', 'LinearSVC', 'DecisionTreeRegressor', 'KNeighborsRegressor', 'Pipeline', 'KernelPCA', 'PCA', 'SelectFromModel', 'learning_curve', 'validation_curve', 'GridSearchCV', 'clone', 'mean_squared_error', 'variable_types', 'TPOTRegressor']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull'], 'numpy': ['mean', 'median', 'sum', 'unique', 'clip', 'std', 'copy'], 'matplotlib': ['copy'], 'seaborn': ['boxplot'], 're': [], 'sklearn': [], 'xgboost': [], 'featuretools': [], 'tpot': []} axis_0: 0, axis_1: 8
tabnet-dnn-decisiontree-library-fromscratch.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'info', 'head', 'nunique', 'copy', 'drop', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'copy', 'astype', 'concat', 'drop', 'astype', 'to_numeric', 'astype', 'map', 'head', 'reset_index', 'query', 'reset_index', 'query', 'count', 'groupby', 'sum', 'astype', 'describe', 'describe', 'groupby', 'quantile', 'copy', 'quantile', 'where', 'describe', 'describe', 'groupby', 'corr', 'array', 'array', 'quantile', 'cut', 'copy', 'array', 'cut', 'map', 'fillna', 'mode', 'astype', 'info', 'cut', 'map', 'fillna', 'mode', 'astype', 'info', 'query', 'reset_index', 'query', 'reset_index', 'query', 'fillna', 'fillna', 'transform', 'fillna', 'transform', 'keys', 'sort_values', 'array', 'squeeze', 'where', 'to_csv', 'head', 'keys', 'sort_values', 'array', 'squeeze', 'where', 'to_csv', 'head', 'copy', 'pop', 'items', 'items', 'update', 'mean', 'var', 'unique', 'unique', 'map', 'map', 'take', 'update', 'concat', 'stack', 'concat', '__init__', '__init__', '__init__', '__init__', '__init__', 'stack', '__init__', 'map', 'array', 'array', 'mean', 'keys', 'sort_values', 'array', 'squeeze', 'where', 'to_csv', 'head', '__init__', '__init__', 'where', 'where', '__init__', 'mean', 'keys', 'sort_values', 'array', 'squeeze', 'where', 'to_csv', 'head'] ['numpy', 'pandas', 'scipy', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'plotly.graph_objects', 'os', 'pathlib', 'gc', 'sys', 're', 'math', 'random', 'time', 'datetime', 'sklearn', 'tensorflow', 'tensorflow_addons', 'warnings', 'torch'] ['make_subplots', 'tqdm', 'Optional', 'Union', 'Tuple', 'StratifiedKFold', 'keras', 'layers', 'LabelEncoder', 'TabNetPretrainer', 'TabNetRegressor', 'TabNetClassifier']Dict:{'numpy': ['mean', 'take', 'stack', 'squeeze', 'quantile', 'var', 'sum', 'where', 'unique', 'info', 'array', 'copy'], 'pandas': ['read_csv', 'cut', 'concat', 'to_numeric', 'unique', 'array'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'plotly': ['__init__'], 'os': [], 'pathlib': [], 'gc': [], 'sys': [], 're': [], 'math': [], '': [], 'random': [], 'time': [], 'datetime': [], 'tqdm': ['update', '__init__'], 'typing': ['count', '__init__'], 'sklearn': ['transform', '__init__'], 'tensorflow': [], 'tensorflow_addons': [], 'warnings': [], 'torch': ['mean', 'take', 'stack', 'squeeze', 'quantile', 'var', 'sum', 'concat', 'where', 'mode', 'unique'], 'pytorch_tabnet': [], '=': [], 'model': [], 'pd': [], 'pt_model': [], 'tf': [], '[]': [], 'np': [], 'axis=0)': []} axis_0: 4, axis_1: 6
housing-prices-example-with-video-walkthrough.py : ['read_csv', 'to_html', 'select_dtypes', 'describe', 'select_dtypes', 'describe', 'select_dtypes', 'describe', 'sum', 'isnull', 'sum', 'isnull', 'any', 'isnull', 'head', 'min', 'max', 'array', 'value_counts', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'where', 'where', 'mean', 'groupby', 'mean', 'groupby', 'corr', 'corr', 'mean', 'groupby', 'items', 'select_dtypes', 'select_dtypes', 'drop', 'drop', 'items', 'copy', 'copy', 'cumsum', 'items', 'copy', 'copy', 'keys', 'keys', 'copy', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'select_dtypes', 'select_dtypes', 'drop', 'drop', 'items', 'copy', 'copy', 'keys', 'read_csv', 'transform', 'copy', 'to_csv', 'copy', 'to_csv', 'copy', 'to_csv', 'copy', 'to_csv', 'items', 'items', 'copy', 'to_csv', 'to_csv'] ['pandas', 'numpy', 'plotly.graph_objects', 'plotly.express', 'scipy.stats', 'scipy.stats'] ['display', 'HTML', 'ColumnTransformer', 'Pipeline', 'SimpleImputer', 'StandardScaler', 'OneHotEncoder', 'LinearRegression', 'RandomForestRegressor', 'XGBRegressor', 'GridSearchCV', 'KFold', 'cross_val_score', 'train_test_split', 'MLPRegressor', 'PCA', 'LinearRegression', 'RandomForestRegressor', 'XGBRegressor', 'GridSearchCV', 'KFold', 'cross_val_score', 'train_test_split', 'MLPRegressor', 'mean_squared_error', 'mean_squared_error', 'FunctionTransformer', 'train_test_split', 'MLPRegressor', 'GridSearchCV', 'mean_squared_error', 'StackingRegressor']Dict:{'pandas': ['isnull', 'array', 'read_csv', 'value_counts'], 'numpy': ['mean', 'any', 'max', 'sum', 'where', 'min', 'array', 'cumsum', 'copy'], 'plotly': [], 'scipy': ['describe'], 'IPython': [], 'sklearn': ['transform'], 'xgboost': []} axis_0: 0, axis_1: 3
beginner-wids21-feature-engineering-starter.py : ['read_csv', 'head', 'read_csv', 'isin', 'value_counts', 'map', 'value_counts', 'astype', 'fillna', 'sort_values', 'mean', 'mean', 'mean', 'replace', 'replace', 'where', 'replace', 'head', 'describe', 'where', 'mean', 'groupby', 'apply', 'fillna', 'where', 'isna', 'apply', 'astype', 'fillna', 'round', 'astype', 'where', 'isna', 'astype', 'astype', 'fillna', 'round', 'astype', 'apply', 'fillna', 'fillna', 'fillna', 'divide', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna'] ['numpy', 'pandas', 'os'] []Dict:{'numpy': ['mean', 'where', 'round', 'isin', 'divide'], 'pandas': ['isna', 'read_csv', 'value_counts'], 'os': ['replace']} axis_0: 0, axis_1: 0
transformers4rec-synthetic-data-example.py : ['get', 'clip', 'astype', 'astype', 'cut', 'unique', 'nunique', 'map', 'head', 'transform', 'head', 'to_parquet', 'join', 'get', 'join', 'join', 'read_parquet', 'get', 'get', 'get', 'join', 'keys'] ['os', 'glob', 'numpy', 'pandas', 'cudf', 'cupy', 'nvtabular', 'os', 'rich', 'pkg_resources', 'glob', 'torch'] ['*', 'Tags', 'save_time_based_splits', 'torch', 'NDCGAt', 'AvgPrecisionAt', 'RecallAt', 'wipe_memory', 'Schema', 'T4RecTrainingArguments', 'Trainer']Dict:{'os': [], 'glob': [], 'numpy': ['unique', 'clip'], 'pandas': ['read_parquet', 'cut', 'unique'], 'cudf': [], 'cupy': [], 'nvtabular': [], 'merlin': [], 'transformers4rec': [], 'rich': [], 'pkg_resources': [], 'torch': ['unique', 'clip'], '': [], 'merlin_standard_lib': []} axis_0: 0, axis_1: 0
tps-sep22-latest-model-ideas.py : ['apply', 'get_dummies', 'head'] [] ['StandardScaler', 'make_pipeline', 'Lasso']Dict:{'sklearn': [], '=': [], '[1,': [], '2,': [], '3,': [], '4,': [], '5,': [], '6,': [], '7,': [], '8,': [], '9,': [], '10,': [], '11,': [], '': []} axis_0: 0, axis_1: 0
ps3e14-eda-hp-ensemble-ml.py : ['read_csv', 'drop', 'copy', 'describe', 'corr', 'drop', 'corr', 'astype', 'astype', 'corr', 'drop', 'drop', 'transform', 'transform', 'array', 'mean', 'std', 'read_csv', 'astype', 'astype', 'drop', 'transform', 'transform', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'optuna', 'warnings', 'logging'] ['train_test_split', 'GridSearchCV', 'cross_val_score', 'KFold', 'RandomizedSearchCV', 'StandardScaler', 'SelectKBest', 'f_regression', 'mean_squared_error', 'r2_score', 'XGBRegressor', 'LGBMRegressor', 'CatBoostRegressor', 'VotingRegressor', 'linkage', 'dendrogram', 'TPESampler', 'r2_score']Dict:{'pandas': ['array', 'read_csv'], 'numpy': ['mean', 'std', 'array', 'copy'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'scipy': [], 'optuna': [], 'warnings': [], 'logging': [], '=': [], 'target_correlations[abs(target_correlations)': [], '>=': [], 'correlation_threshold]': [], 'train_data[important_features]': [], 'best_xgb': []} axis_0: 0, axis_1: 3
efficientnetb7-weaving-pattern-pseudolabels.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'merge', 'round', 'concat', 'copy', 'fillna', 'mean', 'copy', 'astype', 'isin', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'round', 'fillna', 'mean', 'rolling', 'round', 'fillna', 'std', 'rolling', 'round', 'fillna', 'max', 'rolling', 'round', 'fillna', 'min', 'rolling', 'round', 'fillna', 'mean', 'rolling', 'dropna', 'concat', 'concat', 'reset_index', 'concat', 'reset_index', 'concat', 'copy', 'copy', 'concat', 'rank', 'max', 'clip', 'drop', 'drop', 'to_numpy', 'drop', 'to_numpy', 'drop', 'drop', 'to_numpy', 'drop', 'to_numpy', 'drop', 'add', 'add', 'add', 'add', 'mean', 'to_csv', 'describe'] ['numpy', 'pandas', 'datetime', 'plotly.graph_objects', 'matplotlib.pyplot', 'seaborn', 'tensorflow', 'warnings', 'gc'] ['make_subplots', 'seasonal_decompose', 'optimizers', 'utils', 'Sequential', 'GlobalMaxPooling2D', 'Dense', 'Flatten', 'Dropout', 'PReLU', 'EfficientNetB1', 'ReduceLROnPlateau', 'LearningRateScheduler', 'erfinv']Dict:{'numpy': ['mean', 'max', 'add', 'round', 'min', 'clip', 'isin', 'std', 'copy'], 'pandas': ['concat', 'merge', 'read_csv'], 'datetime': [], 'plotly': [], 'matplotlib': [], 'seaborn': [], 'statsmodels': [], 'tensorflow': ['round', 'add', 'rank', 'concat'], 'scipy': [], 'warnings': [], 'gc': []} axis_0: 0, axis_1: 2
data-science-glossary-12-eda-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'drop', 'info', 'sort_index', 'value_counts', 'apply', 'sort_index', 'value_counts', 'unique', 'sort_index', 'value_counts', 'items', 'join', 'fillna', 'join', 'fillna', 'value_counts', 'sort_index', 'value_counts', 'fillna', 'fillna', 'fillna', 'sum', 'sum', 'crosstab', 'tail', 'value_counts', 'apply', 'unique', 'apply', 'head', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sum', 'sum', 'apply', 'join', 'apply', 'join', 'apply', 'join', 'apply', 'join', 'apply', 'join', 'apply', 'join', 'join', 'fillna', 'join', 'fillna', 'join', 'fillna', 'join', 'fillna', 'head', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'replace', 'replace', 'replace', 'isin', 'value_counts', 'unique', 'unique', 'value_counts', 'join', 'unique', 'unique', 'value_counts', 'isin', 'join', 'fillna', 'join', 'fillna', 'join', 'fillna', 'join', 'fillna', 'iterrows', 'sample', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'isin', 'value_counts', 'head', 'head', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'head', 'sort_values', 'hist', 'apply', 'join', 'apply', 'join', 'apply', 'join', 'head', 'value_counts', 'isin', 'value_counts', 'head', 'value_counts', 'isin', 'value_counts', 'value_counts', 'max', 'head', 'value_counts', 'isin', 'value_counts', 'hist', 'join', 'fillna', 'fillna', 'transform', 'fillna', 'fillna', 'fillna', 'fillna', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'astype', 'astype', 'drop', 'rank', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'json', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'random', 'warnings', 'os', 'scipy', 'langdetect', 'eli5'] ['Image', 'WordCloud', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'mean_squared_error', 'roc_auc_score', 'LogisticRegression', 'LogisticRegressionCV', 'CatBoostClassifier', 'tqdm_notebook', 'partial', 'sqrt', 'Counter', 'confusion_matrix', 'TfidfVectorizer', 'TweetTokenizer', 'RandomForestClassifier', 'display', 'cohen_kappa_score']Dict:{'numpy': ['mean', 'max', 'sum', 'unique', 'isin', 'info', 'std'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'crosstab'], 'os': ['replace'], 'json': [], 'seaborn': [], 'matplotlib': ['hist'], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'PIL': [], 'wordcloud': [], 'sklearn': [], 'gc': [], 'catboost': [], 'tqdm': [], 'plotly': [], 'random': ['sample'], 'warnings': [], 'functools': [], 'scipy': [], 'math': [], 'collections': ['items'], 'nltk': [], 'langdetect': [], 'eli5': [], 'IPython': []} axis_0: 1, axis_1: 2
xgboost-plays03e02-first-place.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'copy', 'copy', 'copy', 'transform', 'transform', 'transform', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'copy', 'median', 'isna', 'mean', 'query', 'median', 'query', 'apply', 'mean', 'std', 'to_csv', 'to_csv', 'sort_values', 'to_csv', 'copy', 'round', 'mean', 'to_csv'] ['numpy', 'pandas', 'os', 'random'] ['defaultdict', 'mean', 'bisect_left', 'StratifiedKFold', 'OneHotEncoder', 'StandardScaler', 'ColumnTransformer', 'metrics', 'KNeighborsRegressor', 'XGBClassifier']Dict:{'numpy': ['mean', 'median', 'round', 'std', 'copy'], 'pandas': ['isna', 'read_csv'], 'os': [], 'random': [], 'collections': ['copy'], 'statistics': [], 'bisect': [], 'sklearn': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 1
commonlit-a-complete-analysis.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'mean', 'quantile', 'quantile', 'skew', 'quantile', 'mean', 'quantile', 'quantile', 'skew', 'sort_values', 'apply', 'apply', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'apply', 'head', 'join', 'apply', 'head', 'join', 'apply', 'head', 'join', 'join', 'apply', 'head', 'sum', 'items', 'keys', 'array', 'join', 'mean', 'mean', 'mean', 'transform', 'transform', 'mean', 'mean', 'transform', 'items', 'get', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'map'] ['numpy', 'pandas', 'os', 're', 'warnings', 'string', 'numpy', 'random', 'pandas', 'missingno', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'plotly.figure_factory', 'nltk', 'os', 'nltk', 'spacy', 'random', 'tensorflow', 'keras', 'xgboost'] ['stats', 'Counter', 'graph_objs', 'make_subplots', 'Console', 'Theme', 'pretty', 'Image', 'WordCloud', 'STOPWORDS', 'ImageColorGenerator', 'stopwords', 'word_tokenize', 'CountVectorizer', 'TfidfVectorizer', 'make_pipeline', 'LinearRegression', 'tqdm', 'compounding', 'minibatch', 'defaultdict', 'Counter', 'KFold', 'cross_val_score', 'cross_validate', 'mean_squared_error', 'make_scorer', 'accuracy_score', 'confusion_matrix', 'layers', 'backend', 'optimizers', 'losses', 'metrics', 'Model', 'RootMeanSquaredError', 'EarlyStopping', 'ModelCheckpoint', 'LearningRateScheduler', 'Sequential', 'Constant', 'LSTM', 'Embedding', 'BatchNormalization', 'Dense', 'TimeDistributed', 'Dropout', 'Bidirectional', 'Flatten', 'GlobalMaxPool1D', 'TFAutoModelForSequenceClassification', 'TFAutoModel', 'AutoTokenizer', 'train_test_split', 'TfidfTransformer', 'Tokenizer', 'pad_sequences', 'Embedding', 'ModelCheckpoint', 'ReduceLROnPlateau', 'Adam', 'Pipeline']Dict:{'numpy': ['mean', 'add', 'quantile', 'sum', 'array'], 'pandas': ['array', 'read_csv'], 'os': [], 're': ['sub'], 'warnings': [], 'string': [], 'random': [], 'scipy': ['skew'], 'missingno': [], 'collections': ['items', 'keys', 'get'], 'matplotlib': ['get'], 'seaborn': [], 'plotly': [], 'rich': [], 'PIL': [], 'wordcloud': [], 'nltk': [], 'sklearn': [], 'tqdm': [], 'spacy': [], 'tensorflow': [], 'keras': [], 'transformers': [], 'xgboost': []} axis_0: 1, axis_1: 0
titanic-random-forest-82-78.py : ['read_csv', 'join', 'read_csv', 'join', 'info', 'head', 'value_counts', 'mean', 'groupby', 'head', 'apply', 'apply', 'value_counts', 'mean', 'groupby', 'apply', 'mean', 'groupby', 'qcut', 'value_counts', 'qcut', 'value_counts', 'mean', 'groupby', 'mean', 'groupby', 'isnull', 'mean', 'groupby', 'qcut', 'value_counts', 'qcut', 'mean', 'groupby', 'value_counts', 'mean', 'groupby', 'value_counts', 'head', 'apply', 'value_counts', 'apply', 'value_counts', 'mean', 'groupby', 'value_counts', 'qcut', 'mean', 'groupby', 'qcut', 'crosstab', 'qcut', 'apply', 'value_counts', 'mean', 'groupby', 'apply', 'replace', 'apply', 'isnull', 'value_counts', 'qcut', 'mean', 'groupby', 'qcut', 'corr', 'value_counts', 'value_counts', 'mean', 'groupby', 'apply', 'apply', 'apply', 'apply', 'isnull', 'groupby', 'transform', 'fillna', 'mean', 'where', 'where', 'apply', 'apply', 'where', 'isin', 'where', 'isin', 'apply', 'apply', 'apply', 'replace', 'apply', 'isnull', 'qcut', 'concat', 'get_dummies', 'concat', 'get_dummies', 'fillna', 'fillna', 'mean', 'apply', 'apply', 'unique', 'unique', 'concat', 'get_dummies', 'concat', 'get_dummies', 'read_csv', 'join', 'read_csv', 'join', 'fillna', 'mean', 'sort_values', 'concat', 'read_csv', 'join', 'concat', 'to_csv'] ['os', 'pandas', 'numpy', 'seaborn', 'matplotlib.pyplot'] ['RandomForestClassifier']Dict:{'os': ['replace'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'qcut', 'crosstab'], 'numpy': ['mean', 'where', 'unique', 'isin', 'info'], 'seaborn': [], 'matplotlib': [], 'sklearn': ['apply']} axis_0: 0, axis_1: 0
lgbm-and-nn-on-sentences.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'head', 'value_counts', 'unique', 'quantile', 'quantile', 'kurt', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'any', 'isna', 'drop', 'drop', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'merge', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'to_csv'] ['gc', 'os', 'itertools', 'pickle', 're', 'time', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'joblib'] ['choice', 'choices', 'reduce', 'tqdm', 'cycle', 'Counter', 'reduce', 'cycle', 'stats', 'skew', 'kurtosis', 'metrics', 'model_selection', 'preprocessing', 'linear_model', 'ensemble', 'decomposition', 'tree', 'defaultdict', 'TabularAutoML', 'Task']Dict:{'gc': [], 'os': ['rename', 'replace'], 'itertools': [], 'pickle': [], 're': [], 'time': [], 'random': [], 'functools': [], 'tqdm': [], 'numpy': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'min', 'unique', 'std'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'seaborn': [], 'matplotlib': [], 'collections': ['items', 'keys'], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'lightautoml': [], 'joblib': []} axis_0: 0, axis_1: 8
7th-place-solution-wids-2021.py : ['sum', 'isnull', 'drop', 'corr', 'sum', 'isnull', 'sum', 'isnull', 'copy', 'dropna', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'to_dict', 'value_counts', 'map', 'to_dict', 'value_counts', 'map', 'sum', 'isnull', 'where', 'where', 'astype', 'fillna', 'round', 'astype', 'fillna', 'round', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'divide', 'apply', 'fillna', 'astype', 'astype', 'where', 'isna', 'astype', 'where', 'isna', 'apply', 'apply', 'copy', 'apply', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'astype', 'astype', 'subtract', 'astype', 'groupby', 'transform', 'subtract', 'transform', 'div', 'transform', 'transform', 'div', 'transform', 'div', 'div', 'div', 'div', 'isna', 'isna', 'isna', 'fillna', 'sum', 'astype', 'astype', 'astype', 'div', 'div', 'div', 'div', 'div', 'div', 'div', 'div', 'div', 'div', 'div', 'div', 'sum', 'div', 'div', 'div', 'div', 'sum', 'sum', 'max', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'std', 'drop', 'drop', 'read_csv', 'drop', 'read_csv', 'read_csv', 'concat', 'where', 'replace', 'replace', 'replace', 'std', 'std', 'drop', 'drop', 'drop', 'select_dtypes', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'isin', 'isin', 'astype', 'astype', 'concat', 'transform', 'transform', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'isin', 'isin', 'concat', 'transform', 'transform', 'fillna', 'astype', 'fillna', 'astype', 'concat', 'transform', 'transform', 'concat', 'groupby', 'map', 'reset_index', 'astype', 'astype', 'dropna', 'dropna', 'where', 'fillna', 'drop', 'drop', 'drop', 'drop', 'read_csv', 'drop', 'read_csv', 'copy', 'copy', 'rename', 'rename', 'astype', 'astype', 'concat', 'rank', 'rank', 'read_csv', 'concat', 'fillna', 'median', 'fillna', 'median', 'astype', 'astype', 'to_csv', 'read_csv', 'read_csv', 'sort_values', 'sort_values', 'to_csv', 'head', 'sort_values', 'to_csv', 'to_csv', 'astype', 'astype', 'concat', 'fillna', 'median', 'fillna', 'median', 'to_csv', 'transform', 'transform', 'to_numpy', 'to_numpy', 'array', 'astype', '__init__', 'mean', '__init__', '__init__', '__init__', 'concat', 'unique', 'unique', 'eval', 'mean', 'eval', 'mean', 'eval', 'mean', 'read_csv', 'transform', 'to_csv', 'to_csv', 'read_csv', 'read_csv', 'read_csv', 'copy', 'to_csv'] ['pickle', 'pandas', 'numpy', 'os', 'warnings', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'gc', 'torch', 'torch.nn', 'torch.nn.functional', 'torch', 'torch.optim', 'random'] ['LinearRegression', 'LassoCV', 'tqdm', 'stats', 'special', 'StratifiedKFold', 'KFold', 'roc_auc_score', 'Pool', 'CatBoostClassifier', 'MinMaxScaler', 'Variable', '_WeightedLoss', 'Variable']Dict:{'sklearn': ['transform', '__init__'], 'tqdm': ['__init__'], 'pickle': [], 'scipy': ['round'], 'pandas': ['isna', 'read_csv', 'isnull', 'eval', 'concat', 'value_counts', 'unique', 'array'], 'numpy': ['mean', 'median', 'max', 'sum', 'subtract', 'array', 'where', 'round', 'unique', 'isin', 'std', 'divide', 'copy'], 'os': ['rename', 'replace'], 'warnings': [], 'seaborn': [], 'matplotlib': [], 'lightgbm': [], 'gc': [], 'catboost': [], 'torch': ['__init__'], 'random': []} axis_0: 4, axis_1: 34
episode-12.py : ['update', 'join', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'concat', 'corr', 'corr', 'corr', 'quantile', 'quantile', 'drop', 'drop', 'drop', 'concat', 'nlargest', 'agg', 'groupby', 'median', 'merge', 'fillna', 'transform', 'concat', 'transform', 'transform', 'concat', 'concat', 'fillna', 'fillna', 'replace', 'replace', 'replace', 'array', 'min', 'max', 'min', 'min', 'max', 'min', 'product', 'items', 'mean', 'items', 'items', 'duplicated', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'pandas_profiling', 'matplotlib.pyplot', 'seaborn', 'matplotlib', 'warnings', 'os', 'catboost', 'sklearn', 'shap', 'optuna', 'sklearn.model_selection', 'sklearn.svm', 'itertools', 'pickle', 'lightgbm', 'xgboost', 'os'] ['Image', 'SelectKBest', 'chi2', 'train_test_split', '*', 'CatBoostClassifier', 'get_roc_curve', 'metrics', 'get_fpr_curve', 'get_fnr_curve', 'StratifiedKFold', 'KFold', 'StratifiedGroupKFold', 'RepeatedKFold', 'log_loss', 'classification_report', 'accuracy_score', 'LogisticRegression', 'RepeatedStratifiedKFold', 'StackingCVClassifier', 'make_classification', 'cross_val_score', 'pyplot', 'VotingClassifier', 'SVC', 'MLPClassifier', 'RandomForestClassifier', 'AdaBoostClassifier', 'CalibratedClassifierCV', 'BaseEstimator', 'TransformerMixin', 'BaggingClassifier', 'KNeighborsClassifier', 'GaussianProcessClassifier']Dict:{'numpy': ['mean', 'median', 'product', 'quantile', 'max', 'min', 'array'], 'pandas': ['concat', 'array', 'merge', 'read_csv'], 'pandas_profiling': [], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'IPython': [], 'sklearn': [], 'os': ['replace'], 'catboost': [], 'shap': [], 'optuna': [], 'itertools': ['product', 'groupby'], 'pickle': [], 'lightgbm': [], 'xgboost': [], 'mlxtend': []} axis_0: 1, axis_1: 2
lgbm-optuna-predict-machine-failure-probability.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'info', 'drop', 'drop', 'drop', 'transpose', 'describe', 'value_counts', 'value_counts', 'concat', 'drop_duplicates', 'corr', 'drop', 'drop', 'drop', 'drop', 'value_counts', 'value_counts', 'head', 'head', 'nunique', 'drop', 'drop', 'drop', 'drop', 'std', 'max', 'where', 'sum', 'to_numeric', 'apply', 'drop', 'drop', 'head', 'get_dummies', 'get_dummies', 'head', 'drop', 'drop', 'replace', 'drop', 'copy', 'to_csv', 'drop', 'drop', 'drop', 'copy', 'to_csv'] ['numpy', 'pandas', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'math', 'optuna'] ['product', 'HTML', 'display', 'LGBMClassifier', 'early_stopping', 'train_test_split', 'product', 'roc_auc_score', 'plot_importance']Dict:{'numpy': ['transpose', 'max', 'sum', 'where', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'concat', 'value_counts', 'get_dummies', 'to_numeric'], 'matplotlib': [], 'seaborn': [], 'itertools': [], 'math': [], 'IPython': [], 'lightgbm': [], 'sklearn': [], 'optuna': []} axis_0: 0, axis_1: 17
tps-feb-2021-lgb-xgb-combo.py : ['read_csv', 'read_csv', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot'] ['LabelEncoder', 'LeaveOneOutEncoder', 'MEstimateEncoder', 'KFold', 'mean_squared_error', 'LGBMRegressor', 'XGBRegressor']Dict:{'pandas': ['read_csv'], 'numpy': [], 'sklearn': [], 'category_encoders': [], 'lightgbm': [], 'xgboost': [], 'matplotlib': []} axis_0: 0, axis_1: 0
amex-feature-engineering-2-aggreg-functions.py : ['mean', 'groupby', 'agg', 'groupby', 'mean', 'std', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'groupby', 'median', 'mean', 'std', 'var', 'skew', 'kurtosis', 'std', 'max', 'min', 'std', 'max', 'min', 'mean', 'std', 'var', 'sum', 'abs', 'mean', 'std', 'abs', 'mean', 'median', 'max', 'min', 'sum', 'max', 'sum', 'min', 'unique', 'sum', 'max', 'sum', 'min', 'unique', 'sum', 'diff', 'sum', 'abs', 'sum', 'sum', 'abs', 'sum', 'abs', 'sum', 'sum', 'unique', 'max', 'max', 'min', 'max', 'min', 'mean', 'sum', 'sum', 'sum', 'mean', 'abs', 'diff', 'mean', 'sum', 'abs', 'diff', 'max', 'mean', 'max', 'mean', 'mean', 'where', 'mean', 'where', 'unique', 'sum', 'value_counts', 'sum', 'unique', 'sum', 'unique', 'sum', 'unique', 'dot', 'quantile', 'where', 'diff', 'max', 'sum', 'sum', 'diff', 'read_parquet', 'unique', 'isin', 'agg', 'groupby', 'to_pickle', 'astype', 'concat'] ['numpy', 'pandas', 'warnings', 'gc'] []Dict:{'numpy': ['mean', 'median', 'quantile', 'max', 'var', 'abs', 'sum', 'where', 'min', 'unique', 'dot', 'isin', 'diff', 'std'], 'pandas': ['to_pickle', 'concat', 'value_counts', 'read_parquet', 'unique'], 'warnings': [], 'gc': []} axis_0: 2, axis_1: 0
feature-engineering-catboostregressor.py : ['read_csv', 'read_csv', 'concat', 'items', 'astype', 'items', 'astype', 'select_dtypes', 'fillna', 'select_dtypes', 'fillna', 'select_dtypes', 'drop', 'mean', 'round', 'copy', 'pop', 'array', 'sort_values', 'round', 'drop', 'drop', 'drop', 'drop', 'sum', 'sum', 'sum', 'gt', 'transform', 'groupby', 'transform', 'groupby', 'concat', 'sort_values', 'skew', 'select_dtypes', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'optuna'] ['CategoricalDtype', 'cross_val_score', 'mutual_info_regression', 'CatBoostRegressor', 'simplefilter']Dict:{'pandas': [], 'numpy': ['mean', 'sum', 'round', 'array', 'copy'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'catboost': [], 'warnings': [], 'optuna': []} axis_0: 3, axis_1: 9
tokyo-stock-exchange-prediction-with-catboost.py : ['read_csv', 'head', 'read_csv', 'tail', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'to_datetime', 'pop', 'pop', 'head', 'pop', 'fillna', 'head', 'head', 'head', 'head', 'head', 'head', 'unique', 'array'] ['numpy', 'pandas', 'jpx_tokyo_market_prediction'] ['CatBoostRegressor']Dict:{'numpy': ['array', 'unique'], 'pandas': ['to_datetime', 'array', 'unique', 'read_csv'], 'catboost': [], 'jpx_tokyo_market_prediction': []} axis_0: 1, axis_1: 0
proposal-for-a-meaningful-lb-strict-lgbm.py : ['read_csv', 'to_datetime', 'read_csv', 'to_datetime', 'sort_values', 'read_csv', 'copy', 'dropna', 'replace', 'drop', 'iterrows'] ['pandas', 'pandas', 'numpy', 'gresearch_crypto'] ['LGBMRegressor', 'LinearRegression']Dict:{'pandas': ['to_datetime', 'read_csv'], 'numpy': ['copy'], 'lightgbm': [], 'sklearn': [], 'gresearch_crypto': []} axis_0: 0, axis_1: 1
eda-feature-engineering-and-xgb-lgb.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'info', 'sum', 'sum', 'drop', 'apply', 'replace', 'replace', 'replace', 'apply', 'replace', 'replace', 'replace', 'join', 'join', 'apply', 'replace', 'replace', 'replace', 'join', 'join', 'apply', 'replace', 'replace', 'replace', 'join', 'head', 'value_counts', 'value_counts', 'crosstab', 'fillna', 'reset_index', 'sort_values', 'reset_index', 'agg', 'groupby', 'count', 'groupby', 'mean', 'groupby', 'mean', 'rolling', 'mean', 'rolling', 'crosstab', 'mean', 'groupby', 'agg', 'groupby', 'reset_index', 'head', 'boxplot', 'hist', 'hist', 'hist', 'hist', 'head', 'merge', 'merge', 'drop', 'apply', 'replace', 'replace', 'replace', 'apply', 'replace', 'replace', 'replace', 'apply', 'replace', 'replace', 'replace', 'apply', 'replace', 'replace', 'replace', 'fillna', 'drop', 'concat', 'get_dummies', 'get_dummies', 'get_dummies', 'drop', 'concat', 'get_dummies', 'get_dummies', 'get_dummies', 'drop', 'concat', 'agg', 'groupby', 'mean', 'drop', 'fillna', 'rename', 'merge', 'rename', 'reset_index', 'fillna', 'rename', 'merge', 'rename', 'reset_index', 'head', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'drop', 'drop', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'datetime', 'lightgbm', 'pandas_profiling', 'xgboost', 'lightgbm'] ['stats', 'hstack', 'csr_matrix', 'train_test_split', 'WordCloud', 'Counter', 'stopwords', 'ngrams', 'TfidfVectorizer', 'StandardScaler']Dict:{'numpy': ['mean', 'info', 'sum'], 'pandas': ['read_csv', 'concat', 'value_counts', 'get_dummies', 'merge', 'crosstab'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'datetime': [], 'lightgbm': [], 'pandas_profiling': [], 'scipy': ['mean', 'sum'], 'sklearn': ['transform'], 'wordcloud': [], 'collections': [], 'nltk': [], 'xgboost': []} axis_0: 0, axis_1: 13
complete-guide-to-feature-scaling.py : ['read_csv', 'fillna', 'mean'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['StandardScaler', 'MinMaxScaler', 'MaxAbsScaler', 'RobustScaler']Dict:{'numpy': ['mean'], 'pandas': ['read_csv'], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 0
81-models-backward-feature-selection.py : ['join', 'read_csv', 'read_csv', 'head', 'info', 'drop', 'drop', 'replace', 'replace', 'drop', 'drop', 'sum', 'sum', 'sort_values', 'sum', 'isnull', 'astype', 'astype', 'concat', 'astype', 'drop', 'copy', 'pop', 'mean', 'mean', 'replace', 'replace', 'to_csv'] ['numpy', 'pandas', 'os'] ['ProfileReport', 'OrdinalEncoder', 'SimpleImputer', 'ColumnTransformer', 'cross_val_score', 'train_test_split', 'GridSearchCV', 'RandomForestClassifier', 'AdaBoostClassifier', 'LGBMClassifier', 'XGBClassifier', 'accuracy_score', 'CatBoostClassifier', 'SequentialFeatureSelector']Dict:{'numpy': ['mean', 'info', 'sum', 'copy'], 'pandas': ['concat', 'read_csv', 'isnull'], 'os': ['replace'], 'pandas_profiling': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'catboost': []} axis_0: 0, axis_1: 7
xgboost-with-raddar-s-methodology-and-overrides.py : ['read_csv', 'read_csv', 'read_csv', 'unique', 'replace', 'replace', 'replace', 'replace', 'reset_index', 'concat', 'astype', 'mean', 'reset_index', 'agg', 'groupby', 'join', 'head', 'copy', 'copy', 'replace', 'replace', 'replace', 'replace', 'head', 'merge', 'merge', 'head', 'copy', 'astype', 'astype', 'where', 'merge', 'astype', 'astype', 'merge', 'mean', 'std', 'reset_index', 'reset_index', 'astype', 'apply', 'mean', 'std', 'reset_index', 'concat', 'copy', 'copy', 'merge', 'merge', 'head', 'fillna', 'fillna', 'sum', 'isnull', 'head', 'apply', 'head', 'copy', 'copy', 'merge', 'merge', 'describe', 'min', 'copy', 'clip', 'where', 'astype', 'reset_index', 'mean', 'groupby', 'where', 'keys', 'where', 'where', 'astype', 'reset_index', 'mean', 'groupby', 'read_csv', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'head', 'sum', 'isnull', 'fillna', 'fillna', 'sum', 'isnull', 'read_csv', 'merge', 'merge', 'clip', 'clip', 'mean', 'mean', 'clip', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'xgboost', 'statsmodels.api', 'matplotlib.pyplot', 'collections'] ['KFold', 'log_loss', 'UnivariateSpline']Dict:{'numpy': ['mean', 'sum', 'where', 'min', 'unique', 'clip', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'merge'], 'os': ['replace'], 'xgboost': [], 'sklearn': [], 'scipy': [], 'statsmodels': [], 'matplotlib': [], 'collections': []} axis_0: 0, axis_1: 0
step-by-step-tutorial-for-beginners.py : ['read_csv', 'read_csv', 'info', 'info', 'info', 'info', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'fillna', 'fillna', 'sort_values', 'count', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'count', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'count', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'count', 'groupby', 'sort_values', 'mean', 'groupby', 'head', 'unique', 'sort_values', 'count', 'groupby', 'sort_values', 'mean', 'groupby', 'notnull', 'concat', 'drop', 'unique', 'value_counts', 'replace', 'replace', 'value_counts', 'mean', 'groupby', 'get_dummies', 'sum', 'isnull', 'fillna', 'median', 'astype', 'qcut', 'mean', 'groupby', 'drop', 'dropna', 'dropna', 'drop', 'round', 'isnull', 'sum', 'isnull', 'astype', 'cut', 'mean', 'groupby', 'map', 'mean', 'groupby', 'map', 'sort_values', 'mean', 'groupby', 'drop', 'drop', 'map', 'mean', 'groupby', 'value_counts', 'replace', 'mean', 'groupby', 'get_dummies', 'isnull', 'drop', 'drop', 'drop', 'info', 'drop', 'drop', 'drop', 'astype', 'drop', 'mean', 'std', 'concat', 'corr', 'concat', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'warnings'] ['stats', 'norm', 'skew', 'RandomForestRegressor', 'GradientBoostingRegressor', 'SVC', 'Counter', 'DecisionTreeClassifier', 'MLPClassifier', 'KNeighborsClassifier', 'LogisticRegression', 'LinearDiscriminantAnalysis', 'GridSearchCV', 'cross_val_score', 'StratifiedKFold', 'learning_curve', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'VotingClassifier']Dict:{'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull', 'qcut'], 'numpy': ['mean', 'median', 'sum', 'round', 'unique', 'info', 'std'], 'seaborn': [], 'matplotlib': [], 'warnings': [], 'scipy': [], 'sklearn': [], 'collections': []} axis_0: 1, axis_1: 8
a-data-science-framework-to-achieve-99-accuracy.py : ['read_csv', 'read_csv', 'copy', 'info', 'sample', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'median', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'qcut', 'cut', 'astype', 'value_counts', 'apply', 'value_counts', 'info', 'info', 'sample', 'get_dummies', 'head', 'sum', 'isnull', 'info', 'sum', 'isnull', 'info', 'describe', 'head', 'mean', 'groupby', 'crosstab', 'boxplot', 'boxplot', 'boxplot', 'hist', 'hist', 'hist', 'boxplot', 'boxplot', 'map', 'map', 'max', 'map', 'hist', 'corr', 'mean', 'mean', 'mean', 'std', 'sort_values', 'iterrows', 'mean', 'mean', 'groupby', 'mean', 'groupby', 'iterrows', 'astype', 'sum', 'max', 'product', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'info', 'astype', 'to_csv', 'value_counts', 'sample'] ['sys', 'pandas', 'matplotlib', 'numpy', 'scipy', 'IPython', 'sklearn', 'random', 'time', 'warnings', 'matplotlib', 'matplotlib.pyplot', 'matplotlib.pylab', 'seaborn', 'itertools', 'graphviz'] ['display', 'check_output', 'svm', 'tree', 'linear_model', 'neighbors', 'naive_bayes', 'ensemble', 'discriminant_analysis', 'gaussian_process', 'XGBClassifier', 'OneHotEncoder', 'LabelEncoder', 'feature_selection', 'model_selection', 'metrics', 'scatter_matrix']Dict:{'sys': [], '#access': [], 'to': [], 'system': [], 'parameters': [], 'https://docs': [], 'pandas': [], 'matplotlib': ['mean', 'median', 'boxplot', 'product', 'max', 'sum', 'sample', 'hist', 'info', 'std', 'copy'], '#collection': [], 'of': [], 'functions': [], 'for': [], 'scientific': [], 'and': [], 'publication-ready': [], 'visualization': [], 'numpy': ['mean', 'median', 'product', 'max', 'sum', 'info', 'std', 'copy'], 'scipy': [], 'IPython': [], 'sklearn': [], 'machine': [], 'learning': [], 'algorithms': [], 'random': ['sample'], 'time': [], 'warnings': [], 'subprocess': [], 'xgboost': ['apply'], 'seaborn': ['boxplot'], 'itertools': ['product', 'groupby'], 'graphviz': [], '': []} axis_0: 0, axis_1: 2
logistic-regression-series.py : ['read_csv', 'read_csv', 'read_csv', 'value_counts', 'value_counts', 'value_counts', 'corr', 'head', 'copy', 'drop', 'copy', 'drop', 'head', 'sum', 'isna', 'hist', 'boxplot', 'boxplot', 'sum', 'isna', 'mean', 'fillna', 'median', 'fillna', 'idxmax', 'value_counts', 'transform', 'sum', 'isna', 'map', 'map', 'astype', 'astype', 'get_dummies', 'get_dummies', 'head', 'head', 'corr', 'corr', 'corr', 'copy', 'copy', 'copy', 'head', 'head', 'to_csv', 'update', 'mean', 'std', 'mean', 'std', 'reset_index', 'to_csv', 'to_csv'] ['os', 'time', 'pandas', 'numpy', 'matplotlib', 'matplotlib.pylab', 'seaborn'] ['Path', 'train_test_split', 'LogisticRegression', 'RidgeClassifier', 'SimpleImputer', 'KFold', 'StratifiedKFold', 'accuracy_score', 'classification_report', 'confusion_matrix', 'cycle', 'LabelEncoder', 'accuracy_score', 'precision_score', 'recall_score', 'f1_score', 'mode']Dict:{'os': [], 'time': [], 'pathlib': [], 'pandas': ['isna', 'get_dummies', 'read_csv', 'value_counts'], 'numpy': ['mean', 'median', 'sum', 'std', 'copy'], 'sklearn': [], 'matplotlib': ['mean', 'median', 'boxplot', 'sum', 'hist', 'std', 'copy'], 'seaborn': ['boxplot'], 'itertools': [], 'scipy': []} axis_0: 0, axis_1: 4
basic-pytorch-lstm.py : ['to_json', 'join', 'read_csv', 'read_csv', 'transform', 'array', 'groupby', 'array', 'groupby', 'read_csv', '__init__', 'mean', 'max', 'mean', 'max', 'melt', 'round', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'array', 'array', 'array', 'mean', 'std', 'to_csv', 'head'] ['numpy', 'pandas', 'torch', 'torch.nn', 'torch.nn.functional', 'torchvision', 'torchvision.transforms', 'torch.optim', 'time', 'time', 'altair', 'json', 'torch.utils.data'] ['TensorDataset', 'DataLoader', 'Dataset', 'lr_scheduler', 'accuracy_score', 'v3', 'HTML', 'LabelEncoder', 'train_test_split', 'StandardScaler', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'train_test_split', 'GroupKFold', 'GroupShuffleSplit']Dict:{'numpy': ['mean', 'max', 'array', 'round', 'std'], 'pandas': ['array', 'melt', 'read_csv'], 'torch': [], 'torchvision': [], 'time': [], 'sklearn': ['__init__'], 'altair': [], 'IPython': ['__init__'], 'json': []} axis_0: 0, axis_1: 0
sep21-lightautoml-starter.py : ['read_csv', 'head', 'read_csv', 'head', 'head', 'drop', 'sample', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'reset_index', 'concat', 'head', 'to_csv'] ['os', 'time', 'numpy', 'pandas', 'torch'] ['roc_auc_score', 'train_test_split', 'TabularAutoML', 'TabularUtilizedAutoML', 'Task', 'ReportDeco', 'AutoWoE', 'StratifiedKFold', 'rankdata']Dict:{'os': [], 'time': [], 'numpy': ['sum'], 'pandas': ['isna', 'concat', 'read_csv'], 'sklearn': [], 'torch': ['sum', 'concat'], 'lightautoml': [], 'autowoe': [], 'scipy': []} axis_0: 0, axis_1: 3
lgb-and-feature-generation.py : ['read_csv', 'merge', 'drop', 'nunique', 'drop', 'drop', 'drop', 'astype', 'fillna', 'astype', 'fillna', 'fillna', 'to_datetime', 'apply', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'mean', 'mean', 'mean', 'mean', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'sort_values', 'drop', 'drop', 'apply', 'fillna', 'reset_index', 'sum', 'groupby', 'apply', 'fillna', 'reset_index', 'sum', 'groupby', 'concat', 'mean', 'std', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'copy', 'apply', 'fillna', 'reset_index', 'sum', 'groupby', 'to_csv', 'mean', 'std', 'to_csv', 'mean', 'std', 'copy', 'apply', 'fillna', 'reset_index', 'sum', 'groupby', 'to_csv', 'mean', 'std', 'to_csv', 'mean', 'std'] ['numpy', 'pandas', 'json', 'bq_helper', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'time'] ['json_normalize', 'LabelEncoder', 'TimeSeriesSplit', 'KFold', 'mean_squared_error']Dict:{'numpy': ['mean', 'sum', 'isin', 'std', 'copy'], 'pandas': [], 'json': [], 'bq_helper': [], 'seaborn': [], 'matplotlib': [], 'lightgbm': [], 'sklearn': [], 'time': []} axis_0: 1, axis_1: 6
titanic-beginner-s-guide-with-sklearn.py : ['read_csv', 'read_csv', 'head', 'describe', 'keys', 'keys', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'drop', 'copy', 'dropna', 'fillna', 'median', 'fillna', 'median', 'fillna', 'fillna', 'median', 'sum', 'sum', 'sum', 'sum', 'sum', 'sample', 'sample', 'sample', 'apply', 'apply', 'replace', 'replace', 'sample', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'warnings'] ['pyplot', 'SVC', 'LinearSVC', 'RandomForestClassifier', 'LogisticRegression', 'KNeighborsClassifier', 'GaussianNB', 'DecisionTreeClassifier', 'make_scorer', 'accuracy_score', 'GridSearchCV', 'train_test_split', 'XGBClassifier']Dict:{'numpy': ['median', 'sum', 'copy'], 'pandas': ['read_csv', 'isnull'], 'seaborn': [], 'matplotlib': [], 'warnings': [], 'sklearn': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 0
xgboost-men-2023.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'replace', 'replace', 'replace', 'replace', 'reset_index', 'concat', 'astype', 'mean', 'reset_index', 'agg', 'groupby', 'join', 'copy', 'copy', 'replace', 'replace', 'replace', 'replace', 'head', 'merge', 'merge', 'head', 'copy', 'astype', 'astype', 'where', 'merge', 'astype', 'astype', 'merge', 'mean', 'std', 'reset_index', 'reset_index', 'astype', 'apply', 'mean', 'std', 'reset_index', 'concat', 'copy', 'copy', 'merge', 'merge', 'fillna', 'fillna', 'sum', 'isnull', 'apply', 'head', 'copy', 'copy', 'merge', 'merge', 'read_csv', 'unique', 'copy', 'copy', 'merge', 'merge', 'drop', 'describe', 'drop', 'drop', 'drop', 'drop', 'min', 'copy', 'clip', 'where', 'astype', 'reset_index', 'mean', 'groupby', 'where', 'keys', 'where', 'where', 'astype', 'reset_index', 'mean', 'groupby', 'where', 'keys', 'clip', 'where', 'where', 'keys', 'clip', 'where', 'concat', 'where', 'keys', 'clip', 'where', 'where', 'keys', 'clip', 'where', 'where', 'concat', 'apply', 'groupby', 'read_csv', 'head', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'copy', 'copy', 'merge', 'merge', 'head', 'sum', 'isnull', 'fillna', 'fillna', 'sum', 'isnull', 'clip', 'clip', 'mean', 'mean', 'mode', 'mode', 'to_csv'] ['numpy', 'pandas', 'os', 'xgboost', 'statsmodels.api', 'matplotlib.pyplot', 'collections', 'eli5', 'pandas', 'statistics'] ['KFold', 'log_loss', 'UnivariateSpline', 'PermutationImportance']Dict:{'numpy': ['mean', 'sum', 'where', 'min', 'unique', 'clip', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'merge'], 'os': ['replace'], 'xgboost': [], 'sklearn': [], 'scipy': [], 'statsmodels': [], 'matplotlib': [], 'collections': [], 'eli5': [], 'statistics': ['mean', 'mode', 'groupby']} axis_0: 1, axis_1: 0
top-5-titanic-machine-learning-from-disaster.py : ['read_csv', 'read_csv', 'set_index', 'head', 'describe', 'corr', 'sort_values', 'mean', 'groupby', 'isnull', 'map', 'sort_values', 'mean', 'groupby', 'isnull', 'where', 'map', 'hist', 'map', 'sum', 'isnull', 'mean', 'groupby', 'fillna', 'value_counts', 'fillna', 'fillna', 'value_counts', 'groupby', 'where', 'where', 'where', 'where', 'crosstab', 'drop', 'where', 'replace', 'replace', 'replace', 'mean', 'groupby', 'map', 'boxplot', 'map', 'max', 'mean', 'groupby', 'where', 'isnull', 'where', 'isnull', 'where', 'isnull', 'where', 'isnull', 'where', 'isnull', 'where', 'isnull', 'where', 'where', 'drop', 'replace', 'value_counts', 'where', 'drop', 'max', 'cut', 'get_dummies', 'drop', 'isnull', 'isnull', 'crosstab', 'crosstab', 'crosstab', 'crosstab', 'crosstab', 'crosstab', 'drop', 'isnull', 'isnull', 'drop', 'isnull', 'astype', 'reset_index', 'to_csv'] ['warnings', 'pandas', 'numpy', 'datetime', 'matplotlib.pyplot', 'matplotlib', 'seaborn', 'pandas', 'numpy', 'math', 'xgboost', 'statsmodels', 'matplotlib.pyplot', 'string'] ['confusion_matrix', 'skew', 'stats', 'accuracy_score', 'train_test_split', 'f1_score', 'recall_score', 'accuracy_score', 'DecisionTreeClassifier', 'RandomForestClassifier', 'accuracy_score', 'KNeighborsClassifier', 'accuracy_score', 'SVC', 'accuracy_score', 'LogisticRegression', 'accuracy_score', 'XGBClassifier', 'accuracy_score', 'XGBClassifier', 'train_test_split']Dict:{'warnings': [], 'pandas': ['read_csv', 'isnull', 'cut', 'value_counts', 'get_dummies', 'crosstab'], 'numpy': ['where', 'sum', 'max', 'mean'], 'datetime': [], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'sklearn': [], 'math': [], '': [], 'xgboost': [], 'scipy': ['describe'], 'statsmodels': [], 'string': []} axis_0: 0, axis_1: 6
ultimate-titanic-guide-for-beginners.py : ['join', 'read_csv', 'read_csv', 'head', 'describe', 'info', 'value_counts', 'value_counts', 'hist', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'items', 'reset_index', 'drop', 'reset_index', 'concat', 'head', 'any', 'isnull', 'sum', 'isnull', 'isnull', 'boxplot', 'fillna', 'isnull', 'isnull', 'fillna', 'mean', 'isnull', 'corr', 'map', 'map', 'hist', 'map', 'map', 'isnull', 'corr', 'isnull', 'median', 'median', 'isnull', 'head', 'head', 'replace', 'head', 'drop', 'head', 'get_dummies', 'head', 'head', 'head', 'head', 'get_dummies', 'head', 'head', 'get_dummies', 'head', 'head', 'replace', 'replace', 'replace', 'replace', 'head', 'head', 'get_dummies', 'head', 'astype', 'get_dummies', 'head', 'astype', 'get_dummies', 'head', 'drop', 'head', 'drop', 'head', 'drop', 'mean', 'astype', 'concat', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'os'] ['Counter', 'train_test_split', 'StratifiedKFold', 'GridSearchCV', 'LogisticRegression', 'SVC', 'RandomForestClassifier', 'VotingClassifier', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'accuracy_score', 'XGBClassifier', 'accuracy_score', 'cross_val_score', 'GridSearchCV', 'RandomizedSearchCV', 'StackingRegressor', 'mean_squared_error', 'StandardScaler', 'StackingRegressor', 'StackingClassifier', 'LogisticRegression', 'train_test_split', 'KNeighborsClassifier', 'RandomForestClassifier', 'XGBClassifier', 'DecisionTreeClassifier', 'LogisticRegression', 'train_test_split', 'KNeighborsRegressor', 'RandomForestRegressor', 'XGBRegressor', 'DecisionTreeRegressor']Dict:{'numpy': ['mean', 'median', 'any', 'sum', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'collections': ['items'], 'warnings': [], 'os': ['replace'], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 0
eda-feature-engineering-skf-xgboost.py : ['read_csv', 'head', 'duplicated', 'select_dtypes', 'describe', 'sum', 'isna', 'select_dtypes', 'describe', 'sum', 'isna', 'boxplot', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'qcut', 'sort_index', 'value_counts', 'astype', 'value_counts', 'to_csv', 'hist', 'select_dtypes', 'select_dtypes', 'reset_index', 'reset_index', 'transform', 'transform', 'concat', 'concat', 'mean', 'read_csv', 'transform', 'concat', 'mean', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot'] ['StratifiedKFold', 'mean_squared_error', 'OneHotEncoder', 'XGBRegressor']Dict:{'numpy': ['mean', 'sum'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'qcut'], 'matplotlib': ['boxplot', 'hist'], 'sklearn': ['transform'], 'xgboost': []} axis_0: 1, axis_1: 3
ps-s03e02-a-complete-eda.py : ['read_csv', 'read_csv', 'read_csv', 'sum', 'isnull', 'merge', 'rename', 'value_counts', 'mul', 'rename', 'value_counts', 'info', 'cut', 'mean', 'groupby', 'concat', 'isin', 'concat', 'isin', 'value_counts', 'groupby', 'reset_index', 'rename', 'mean', 'groupby', 'astype', 'mean', 'unique', 'eq', 'sum', 'concat', 'reset_index', 'concat', 'value_counts', 'groupby', 'reset_index', 'rename', 'mean', 'groupby', 'astype', 'mean', 'groupby', 'astype', 'select_dtypes', 'select_dtypes', 'copy', 'astype', 'copy', 'copy', 'transform', 'transform', 'mean', 'join', 'copy', 'copy', 'transform', 'transform', 'rename', 'to_csv', 'concat', 'isin', 'copy', 'copy', 'copy', 'transform', 'transform', 'melt', 'reset_index', 'read_csv', 'read_csv', 'read_csv', 'copy', 'copy', 'copy', 'mean', 'fillna', 'astype', 'astype', 'isnull', 'mean', 'copy', 'concat', 'concat', 'copy', 'copy', 'transform', 'transform', 'mean'] ['matplotlib', 'matplotlib', 'matplotlib.cm', 'matplotlib.colors', 'matplotlib.pyplot', 'matplotlib.ticker', 'lightgbm', 'numpy', 'pandas', 'seaborn', 'scipy', 'warnings', 'scipy'] ['HTML', 'Fore', 'Style', 'timedelta', 'OneHotEncoder', 'plugins', 'HeatMap', 'product', 'LinearLocator', 'fetch_california_housing', 'LinearRegression', 'mean_squared_error', 'KFold', 'time', 'cycler', 'associations', 'proportions_ztest', 'StandardScaler', 'OneHotEncoder', 'SklearnTransformerWrapper', 'StratifiedKFold', 'LogisticRegression', 'roc_auc_score', 'average_precision_score', 'ks_2samp', 'XGBClassifier', 'EarlyStopping']Dict:{'IPython': [], 'colorama': [], 'datetime': [], 'feature_engine': [], 'folium': [], 'itertools': [], 'matplotlib': [], 'sklearn': [], 'time': [], 'cycler': [], 'dython': [], 'lightgbm': [], 'numpy': ['mean', 'sum', 'unique', 'isin', 'info', 'copy'], 'pandas': ['read_csv', 'isnull', 'melt', 'cut', 'concat', 'value_counts', 'unique', 'merge'], 'seaborn': [], 'scipy': [], 'warnings': [], 'statsmodels': [], '=': [], '{}': [], 'pd': [], "[f'fold_{x}'": [], 'for': [], 'x': [], 'in': [], 'range(len(pipelines))]': [], 'xgboost': []} axis_0: 2, axis_1: 0
ashrae-start-here-a-gentle-introduction.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'head', 'head', 'head', 'head', 'groupby', 'head', 'set_index', 'reset_index', 'copy', 'to_timedelta', 'astype', 'min', 'max', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'value_counts', 'apply', 'select_dtypes', 'nunique', 'sort_values', 'corr', 'tail', 'head', 'corr', 'nunique', 'hist', 'dropna', 'dropna', 'sum', 'groupby', 'astype', 'mean', 'rolling', 'std', 'rolling', 'mean', 'groupby', 'std', 'rolling', 'std', 'rolling', 'copy', 'sum', 'groupby', 'agg', 'groupby', 'reset_index', 'droplevel', 'droplevel', 'rename_axis', 'head', 'head', 'reset_index', 'value_counts', 'copy', 'value_counts', 'copy', 'value_counts', 'copy', 'value_counts', 'copy', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'astype', 'merge', 'concat', 'merge', 'concat', 'merge', 'concat', 'merge', 'concat', 'to_pickle', 'to_pickle', 'read_pickle', 'read_pickle', 'max', 'max', 'astype', 'astype', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply'] ['warnings', 'numpy', 'pandas', 'gc', 'matplotlib.pyplot', 'seaborn', 'matplotlib.patches', 'plotly.offline', 'plotly.graph_objs', 'plotly.express', 'plotly.graph_objs', 'os', 'random', 'math', 'psutil', 'pickle', 'statsmodels.api', 'lightgbm'] ['HTML', 'tools', 'subplots', 'init_notebook_mode', 'iplot', 'seasonal_decompose', 'LabelEncoder', 'metrics', 'mean_squared_error', 'train_test_split']Dict:{'warnings': [], 'IPython': [], 'numpy': ['mean', 'max', 'sum', 'min', 'std', 'copy'], 'pandas': ['to_pickle', 'isnull', 'to_timedelta', 'concat', 'value_counts', 'read_pickle', 'merge', 'to_datetime'], 'gc': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'os,random,': [], 'math,': [], 'psutil,': [], 'pickle': [], '': [], 'statsmodels': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 9
ashrae-ligthgbm-simple-fe-and-mlops-mlfoundry.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'astype', 'merge', 'concat', 'merge', 'concat', 'merge', 'concat', 'merge', 'concat', 'to_pickle', 'to_pickle', 'read_pickle', 'read_pickle', 'astype', 'astype', 'max', 'max', 'mean', 'groupby', 'isnull', 'apply', 'isnull', 'apply', 'astype', 'astype', 'astype', 'astype', 'apply', 'apply', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'head', 'hist', 'describe', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'value_counts', 'apply', 'select_dtypes', 'nunique', 'head', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'value_counts', 'sort_values', 'sum', 'groupby', 'sort_values', 'max', 'copy', 'set_index', 'sum', 'resample', 'sort_values', 'sum', 'groupby', 'mean', 'groupby', 'std', 'rolling', 'sum', 'groupby', 'agg', 'groupby', 'reset_index', 'droplevel', 'droplevel', 'rename_axis', 'head', 'agg', 'groupby', 'reset_index', 'droplevel', 'droplevel', 'rename_axis', 'head', 'head', 'drop', 'to_csv', 'head'] ['warnings', 'numpy', 'pandas', 'warnings', 'gc', 'matplotlib.pyplot', 'seaborn', 'matplotlib.patches', 'plotly.offline', 'plotly.graph_objs', 'plotly.express', 'plotly.graph_objs', 'os', 'random', 'math', 'psutil', 'pickle', 'missingno', 'getpass', 'urllib.parse', 'mlfoundry', 'gc'] ['HTML', 'stats', 'skew', 'tools', 'subplots', 'init_notebook_mode', 'iplot', 'LabelEncoder', 'mean_squared_error', 'KFold', 'StratifiedKFold', 'tqdm']Dict:{'warnings': [], 'IPython': [], 'numpy': ['mean', 'max', 'sum', 'min', 'std', 'copy'], 'pandas': ['to_pickle', 'isnull', 'concat', 'value_counts', 'read_pickle', 'merge', 'to_datetime'], 'gc': [], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'plotly': [], 'os,random,': [], 'math,': [], 'psutil,': [], 'pickle': [], 'sklearn': [], 'tqdm': [], 'missingno': [], 'getpass': [], 'urllib': [], 'mlfoundry': []} axis_0: 0, axis_1: 7
wik-workshop-on-light-gbm-with-exercises.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'astype', 'to_datetime', 'astype', 'to_datetime', 'astype', 'shift', 'groupby', 'rename', 'reset_index', 'count', 'groupby', 'merge', 'sort_values', 'sum', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'gc', 'time', 'matplotlib.pyplot', 'lightgbm', 'warnings'] ['Series', 'DataFrame', 'train_test_split']Dict:{'numpy': ['sum'], 'pandas': [], 'gc': [], '#': [], 'To': [], 'collect': [], 'RAM': [], 'garbage': [], 'time': [], 'get': [], 'current': [], 'time,': [], 'used': [], 'to': [], 'calculate': [], 'model': [], 'training': [], 'sklearn': [], 'matplotlib': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 0
day-and-time-powerful-predictive-feature.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'hist', 'mean', 'groupby', 'mean', 'groupby', 'hist'] ['numpy', 'pandas', 'matplotlib.pyplot', 'os'] []Dict:{'numpy': ['mean'], 'pandas': ['merge', 'read_csv'], 'matplotlib': ['hist'], 'os': []} axis_0: 0, axis_1: 0
clrp-feature-engineering-baseline-prediction.py : ['join', 'read_csv', 'join', 'head', 'read_csv', 'join', 'head', 'reset_index', 'round', 'mean', 'apply', 'join', 'apply', 'apply', 'explode', 'apply', 'map', 'agg', 'groupby', 'set_index', 'drop_duplicates', 'head', 'head', 'concat', 'transform', 'concat', 'transform', 'to_csv'] ['numpy', 'pandas', 'numpy', 'os', 'spacy', 'timeit', 're'] ['mean_squared_error', 'r2_score', 'MinMaxScaler', 'cross_val_score', 'GridSearchCV', 'stopwords', 'datetime', 'TfidfVectorizer', 'RandomForestRegressor']Dict:{'numpy': ['mean', 'round'], 'pandas': ['concat', 'read_csv'], 'sklearn': ['apply'], 'os': [], 'nltk': [], 'spacy': [], 'timeit': [], 're': [], 'datetime': []} axis_0: 0, axis_1: 0
icr-lgbm-baseline-with-optuna-cv-0-19-lb-0-23.py : ['astype', 'map', 'array', 'sum', 'isnull', 'read_csv', 'read_csv', 'merge', 'read_csv', 'map', 'astype', 'max', 'astype', 'concat', 'isnull', 'read_csv', 'read_csv', 'merge', 'merge', 'map', 'map', 'copy', 'isnull', 'astype', 'map', 'to_csv', 'read_csv', 'merge', 'head', 'head'] ['os', 'json', 'numpy', 'pandas', 'optuna.integration.lightgbm', 'datetime'] ['Path', 'pprint', 'dataclass', 'asdict', 'RandomOverSampler', 'StratifiedKFold', 'log_loss']Dict:{'os': [], 'json': [], 'pathlib': [], 'pprint': [], 'dataclasses': [], 'numpy': ['array', 'sum', 'max', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'array', 'merge'], 'optuna': [], 'sklearn': []} axis_0: 1, axis_1: 1
how-to-make-a-submission-to-august-tps-using-tf-df.py : ['join', 'drop', 'read_csv', 'drop', 'read_csv', 'head', 'describe', 'value_counts', 'head', 'isnull', 'keys', 'keys', 'read_csv', 'to_csv', 'head', 'read_csv', 'to_csv', 'head'] ['os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'tensorflow', 'tensorflow_decision_forests'] ['ProfileReport']Dict:{'os': [], 'numpy': [], 'pandas': ['value_counts', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'tensorflow': [], 'tensorflow_decision_forests': [], 'pandas_profiling': []} axis_0: 0, axis_1: 2
end-to-end-classification-with-titanic-data.py : ['read_csv', 'read_csv', 'head', 'drop', 'sum', 'isna', 'fillna', 'mean', 'value_counts', 'fillna', 'sum', 'isna', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'crosstab', 'crosstab', 'crosstab', 'crosstab', 'value_counts', 'corr', 'head', 'head', 'drop', 'head', 'head', 'drop', 'head', 'head', 'head', 'drop', 'head', 'sum', 'isna', 'fillna', 'mean', 'fillna', 'mean', 'sum', 'isna', 'head', 'drop', 'head', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['OneHotEncoder', 'ColumnTransformer', 'train_test_split', 'LogisticRegression', 'GridSearchCV', 'RandomizedSearchCV', 'classification_report', 'plot_roc_curve', 'svm', 'plot_roc_curve', 'KNeighborsClassifier', 'plot_roc_curve', 'RandomForestClassifier', 'plot_roc_curve', 'GradientBoostingClassifier', 'plot_roc_curve', 'CatBoostClassifier', 'plot_roc_curve', 'LGBMClassifier', 'plot_roc_curve']Dict:{'numpy': ['mean', 'sum'], 'pandas': ['isna', 'crosstab', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'catboost': [], 'lightgbm': []} axis_0: 0, axis_1: 0
eda-feature-engineering-selection-explained.py : ['read_csv', 'head', 'info', 'isnull', 'sum', 'isnull', 'any', 'isnull', 'copy', 'where', 'isnull', 'median', 'groupby', 'median', 'groupby', 'head', 'head', 'copy', 'median', 'groupby', 'unique', 'head', 'copy', 'median', 'groupby', 'head', 'copy', 'hist', 'copy', 'copy', 'boxplot', 'head', 'copy', 'median', 'groupby', 'head', 'head', 'sum', 'isnull', 'drop', 'any', 'sum', 'isnull', 'sum', 'isnull', 'head', 'drop', 'concat', 'concat', 'any', 'isnull', 'head', 'sum', 'isnull', 'fillna', 'median', 'sum', 'isnull', 'head', 'head', 'sum', 'isnull', 'head', 'head', 'head', 'sum', 'isnull', 'mode', 'fillna', 'sum', 'isnull', 'sort_values', 'mean', 'groupby', 'map', 'head', 'sum', 'isnull', 'any', 'isnull', 'sum', 'isnull', 'fillna', 'median', 'sum', 'isnull', 'head', 'head', 'head', 'mode', 'fillna', 'sum', 'isnull', 'sort_values', 'mean', 'groupby', 'map', 'head', 'sum', 'isnull', 'transform', 'concat', 'reset_index', 'head', 'sum', 'isnull', 'concat', 'reset_index', 'head', 'sum', 'isnull', 'drop', 'head', 'head', 'sum', 'isnull', 'read_csv', 'head', 'any', 'isnull', 'sum', 'isnull', 'fillna', 'median', 'sum', 'isnull', 'head', 'sum', 'isnull', 'drop', 'head', 'any', 'sum', 'isnull', 'mode', 'fillna', 'sum', 'isnull', 'head', 'head', 'transform', 'head', 'head', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot'] ['train_test_split', 'StandardScaler', 'Lasso', 'SelectFromModel', 'RandomForestRegressor', 'mean_absolute_error', 'mean_squared_error', 'LabelEncoder']Dict:{'pandas': ['concat', 'unique', 'read_csv', 'isnull'], 'numpy': ['mean', 'median', 'any', 'sum', 'where', 'unique', 'info', 'copy'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'sklearn': ['transform']} axis_0: 0, axis_1: 8
my-titanic-competition-attempt.py : ['join', 'read_csv', 'read_csv', 'head', 'describe', 'info', 'value_counts', 'value_counts', 'hist', 'corr', 'corr', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'items', 'reset_index', 'drop', 'reset_index', 'concat', 'any', 'isnull', 'sum', 'isnull', 'isnull', 'isnull', 'boxplot', 'fillna', 'isnull', 'isnull', 'fillna', 'mean', 'isnull', 'corr', 'map', 'map', 'hist', 'map', 'map', 'isnull', 'corr', 'corr', 'isnull', 'median', 'median', 'isnull', 'head', 'head', 'unique', 'replace', 'drop', 'head', 'get_dummies', 'head', 'head', 'head', 'get_dummies', 'head', 'head', 'get_dummies', 'head', 'head', 'replace', 'replace', 'get_dummies', 'head', 'astype', 'get_dummies', 'head', 'astype', 'get_dummies', 'head', 'drop', 'drop', 'head', 'drop', 'astype', 'concat', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'warnings'] ['Counter', 'train_test_split', 'StratifiedKFold', 'GridSearchCV', 'LogisticRegression', 'SVC', 'RandomForestClassifier', 'VotingClassifier', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'accuracy_score']Dict:{'numpy': ['mean', 'median', 'any', 'sum', 'unique', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'collections': ['items'], 'os': ['replace'], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 0
strength-of-visualization-python-visuals-tutorial.py : ['read_csv', 'read_csv', 'concat', 'read_csv', 'merge', 'copy', 'head', 'copy', 'nunique', 'sum', 'sum', 'isnull', 'copy', 'copy', 'to_datetime', 'head', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'count', 'groupby', 'reset_index', 'head', 'unique', 'copy', 'to_datetime', 'count', 'groupby', 'reset_index', 'head', 'unique', 'to_datetime', 'copy', 'mean', 'groupby', 'reset_index', 'copy', 'boxplot', 'max', 'mean', 'groupby', 'reset_index', 'array', 'merge', 'merge', 'head', 'mean', 'groupby', 'reset_index', 'count', 'groupby', 'reset_index', 'idxmax', 'groupby', 'merge', 'rename', 'count', 'groupby', 'reset_index', 'sample', 'isin', 'reset_index', 'count', 'groupby', 'reset_index', 'sample', 'read_csv', 'read_csv', 'merge', 'head', 'copy', 'to_datetime', 'merge', 'merge', 'head', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'where', 'where', 'read_csv', 'head', 'to_datetime', 'unique', 'where', 'where', 'where', 'update', 'keys', 'keys', 'keys', 'map', 'merge', 'to_datetime', 'head', 'to_datetime', 'merge', 'dropna', 'sum', 'isnull', 'copy', 'sample', 'agg', 'groupby', 'max', 'rename', 'reset_index', 'sample', 'unique', 'sample', 'rename', 'groupby', 'copy', 'corr', 'bool', 'map', 'merge', 'to_datetime', 'to_datetime', 'merge', 'to_csv', 'replace', 'reset_index', 'rename', 'head', 'merge', 'head', 'isin', 'mean', 'mean', 'reset_index', 'head', 'count', 'groupby', 'head', 'isin', 'mean', 'mean', 'isin', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'head', 'keys', 'keys'] ['pandas', 'numpy', 'urllib', 're', 'datetime', 'calendar', 'time', 'scipy', 'math', 'seaborn', 'matplotlib.pyplot', 'os', 'plotly.plotly', 'plotly.graph_objs', 'plotly', 'io', 'base64', 'math', 'seaborn', 'folium', 'xgboost', 'warnings', 'matplotlib.pyplot', 'plotly.plotly', 'plotly.graph_objs', 'plotly', 'holoviews', 'bokeh'] ['KMeans', 'haversine', 'imread', 'imresize', 'imsave', 'Spectral4', 'figure', 'output_notebook', 'show', 'HTML', '*', 'cm', 'animation', 'Spectral4', 'figure', 'output_notebook', 'show', 'parallel_coordinates', 'train_test_split', 'PCA', 'MiniBatchKMeans', '*', 'Counter', 'gridmatrix', 'IFrame', 'HTML', 'display', 'IFrame', 'IFrame', 'IFrame']Dict:{'pandas': [], 'numpy': ['mean', 'max', 'sum', 'where', 'unique', 'isin', 'array', 'copy'], 'urllib': [], '': [], '#for': [], 'url': [], 'stuff': [], 're': [], 'processing': [], 'regular': [], 'expressions': [], 'datetime': [], 'operations': [], 'calendar': [], 'for': [], 'time': [], '#to': [], 'get': [], 'the': [], 'system': [], 'scipy': [], 'other': [], 'dependancies': [], 'sklearn': [], 'haversine': [], 'math': [], 'basic': [], 'maths': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'os': ['rename', 'replace'], '#': [], 'commands': [], 'plotly': [], 'bokeh': [], 'IPython': [], 'io': [], 'base64': [], 'folium': [], 'xgboost': [], 'warnings': [], 'ggplot': []} axis_0: 0, axis_1: 1
submarineering-size-matters-0-75-lb.py : ['read_json', 'read_json', 'array', 'mean', 'array', 'std', 'array', 'array', 'sum', 'apply', 'apply', 'apply', 'apply', 'mean', 'groupby', 'hist', 'groupby', 'mean', 'groupby', 'hist', 'groupby', 'mean', 'groupby', 'hist', 'groupby', 'where', 'where'] ['numpy', 'pandas', 'matplotlib.pyplot'] ['check_output']Dict:{'numpy': ['mean', 'sum', 'array', 'where', 'std'], 'pandas': ['array', 'read_json'], 'matplotlib': ['hist'], 'subprocess': []} axis_0: 0, axis_1: 0
ridge-lightgbm-feature-engineering-bayesian.py : ['hist', 'hist', 'read_csv', 'read_csv', 'map', 'read_csv', 'to_datetime', 'get_dummies', 'get_dummies', 'astype', 'agg', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'groupby', 'agg', 'join', 'reset_index', 'agg', 'groupby', 'join', 'reset_index', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'to_csv', 'to_csv', 'concat', 'transpose', 'transpose', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings', 'datetime', 'gc', 'xgboost', 'os'] ['Ridge', 'preprocessing', 'describe', 'KFold', 'mean_squared_error']Dict:{'numpy': ['transpose'], 'pandas': ['read_csv', 'concat', 'get_dummies', 'merge', 'to_datetime'], 'matplotlib': ['hist'], 'seaborn': [], 'lightgbm': [], 'sklearn': [], 'warnings': [], 'datetime': [], 'gc': [], 'scipy': [], 'xgboost': [], 'os': []} axis_0: 1, axis_1: 0
toxicity-bias-logistic-regression-tfidfvectorizer.py : ['read_csv', 'read_csv', 'read_csv', 'copy', 'head', 'dropna', 'transform', 'where', 'mean', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['TfidfVectorizer', 'LogisticRegression', 'train_test_split', 'cross_val_score', 'accuracy_score', 'classification_report', 'confusion_matrix', 'roc_curve', 'auc', 'roc_auc_score']Dict:{'numpy': ['mean', 'where', 'copy'], 'pandas': ['read_csv'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'os': []} axis_0: 0, axis_1: 1
ps6e7-xgboost-leak.py : ['read_csv', 'read_csv', 'read_csv', 'reset_index', 'drop', 'concat', 'sum', 'duplicated', 'sum', 'duplicated', 'reset_index', 'drop_duplicates', 'drop', 'rename', 'reset_index', 'merge', 'reset_index', 'drop', 'copy', 'to_datetime', 'astype', 'astype', 'drop', 'to_datetime', 'astype', 'astype', 'astype', 'max', 'max', 'get_dummies', 'get_dummies', 'drop', 'drop', 'assign', 'unique', 'mean', 'to_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'rename', 'merge', 'merge', 'rename', 'merge', 'rename', 'max', 'min', 'isna', 'apply', 'to_csv'] ['pandas', 'numpy', 'xgboost', 'seaborn', 'shap', 'umap'] ['pyplot', 'StratifiedKFold', 'roc_auc_score', 'tqdm']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'get_dummies', 'unique', 'merge', 'to_datetime'], 'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'copy'], 'xgboost': [], 'matplotlib': [], 'sklearn': [], 'seaborn': [], 'shap': [], 'tqdm': [], 'umap': []} axis_0: 0, axis_1: 8
adding-location-features.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'head', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'drop', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'tail', 'unique', 'reset_index', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'head', 'unique', 'apply', 'transform', 'transform', 'transform', 'transform', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'reset_index', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'tail', 'to_dict', 'set_index', 'copy', 'map', 'read_csv', 'concat', 'fillna', 'drop', 'fillna', 'read_csv', 'astype', 'head', 'read_csv', 'astype', 'head', 'apply', 'head', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'map', 'map', 'head', 'drop', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'os', 'reverse_geocoder', 'lightgbm', 'xgboost', 'catboost'] ['tqdm', 'LabelEncoder', 'PCA', 'KMeans', 'haversine', 'UMAP', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'os': [], 'tqdm': [], 'sklearn': [], 'haversine': [], 'umap': [], 'reverse_geocoder': []} axis_0: 0, axis_1: 5
feature-engineering-h2o-auto-ml.py : ['read_csv', 'read_csv', 'head', 'insert', 'isna', 'isna', 'mean', 'isna', 'reset_index', 'median', 'groupby', 'boxplot', 'median', 'isnull', 'astype', 'isnull', 'drop', 'median', 'dropna', 'fillna', 'apply', 'drop', 'mode', 'fillna', 'value_counts', 'value_counts', 'apply', 'astype', 'drop', 'apply', 'apply', 'apply', 'replace', 'replace', 'replace', 'replace', 'drop', 'astype', 'map', 'map', 'fillna', 'astype', 'map', 'astype', 'head', 'astype', 'copy', 'corr', 'head', 'apply', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 're', 'warnings', 'h2o'] ['StratifiedKFold', 'RandomizedSearchCV', 'train_test_split', 'accuracy_score', 'StandardScaler', 'H2OAutoML']Dict:{'pandas': ['isna', 'isnull', 'read_csv', 'value_counts'], 'numpy': ['mean', 'median', 'insert', 'copy'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 're': [], 'sklearn': [], 'warnings': [], 'h2o': []} axis_0: 0, axis_1: 4
gru-lstm-with-48k-augmentation.py : ['transpose', 'array', 'applymap', 'array', 'array', 'array', 'read_json', 'read_json', 'max', 'sum', 'sum', 'read_csv', 'head', 'copy', 'isin', 'merge', 'map', 'to_dict', 'set_index', 'copy', 'query', 'copy', 'query', 'transpose', 'array', 'transpose', 'array', 'reset_index', 'mean', 'groupby', 'concat', 'reset_index', 'mean', 'groupby', 'concat', 'to_csv', 'read_json', 'unique', 'merge', 'mean', 'mean', 'mean', 'mean'] ['pandas', 'numpy', 'json', 'tensorflow.keras.layers', 'keras.backend', 'tensorflow', 'plotly.express', 'os'] ['StratifiedKFold', 'KFold', 'GroupKFold', 'KMeans']Dict:{'pandas': ['read_csv', 'read_json', 'concat', 'unique', 'array', 'merge'], 'numpy': ['transpose', 'mean', 'max', 'sum', 'unique', 'isin', 'array', 'copy'], 'json': [], 'tensorflow': ['transpose', 'unique', 'concat'], 'keras': ['transpose', 'sum', 'max', 'mean'], 'plotly': [], 'sklearn': [], 'os': []} axis_0: 1, axis_1: 2
pred-ventilator-lstm-model-0-149.py : ['read_csv', 'drop', 'transform', 'squeeze', 'squeeze', 'min', 'max', 'unique', 'read_csv', 'median', 'round', 'clip', 'to_csv'] ['numpy', 'pandas', 'tensorflow', 'gc', 'matplotlib.pyplot', 'json'] ['keras', '*', '*', 'LearningRateScheduler', 'ExponentialDecay', 'RobustScaler', 'normalize', 'train_test_split', 'KFold', 'mean_absolute_error', 'load', 'add_features']Dict:{'numpy': ['median', 'squeeze', 'max', 'round', 'min', 'unique', 'clip'], 'pandas': ['unique', 'read_csv'], 'tensorflow': [], 'gc': [], 'matplotlib': [], 'sklearn': [], 'pickle': [], 'json': [], 'VFE': []} axis_0: 1, axis_1: 1
tps-oct-2021-xgboost-cv-feature-engineering.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'std', 'min', 'max', 'std', 'min', 'max', 'drop', 'drop', 'head', 'update', 'mean', 'std', 'reset_index', 'to_csv', 'mean', 'mean', 'to_csv', 'to_csv'] ['pandas', 'numpy'] ['train_test_split', 'KFold', 'StratifiedKFold', 'roc_auc_score', 'XGBClassifier', 'Path', 'StandardScaler']Dict:{'pandas': [], 'numpy': ['mean', 'max', 'sum', 'min', 'std'], 'sklearn': [], 'xgboost': [], 'pathlib': []} axis_0: 0, axis_1: 16
ultimate-eda-model-selection-pse3e5.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'head', 'unique', 'info', 'describe', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'duplicated', 'sum', 'duplicated', 'value_counts', 'duplicated', 'unique', 'select_dtypes', 'select_dtypes', 'sort_values', 'skew', 'concat', 'drop', 'sort_values', 'kurtosis', 'concat', 'drop', 'corr', 'concat', 'drop', 'get_dummies', 'drop', 'transform', 'transform', 'sort_values', 'boxplot', 'concat', 'drop', 'apply', 'concat', 'drop', 'head', 'boxplot', 'copy', 'copy', 'drop_duplicates', 'sum', 'duplicated', 'get_dummies', 'get_dummies', 'head', 'map', 'drop', 'corr', 'concat', 'drop', 'drop', 'unique', 'drop', 'copy', 'copy', 'copy', 'copy', 'copy', 'sort_values', 'unique', 'mean', 'abs', 'where', 'round', 'mean', 'array', 'where', 'round', 'copy', 'copy', 'copy', 'copy', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'copy', 'sort_index', 'value_counts', 'astype', 'to_dict', 'items', 'transform', 'copy', 'transform', 'transform', 'copy', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'to_csv', 'head', 'copy', 'to_csv', 'head', 'keys', 'keys', 'copy', 'mode', 'astype', 'round', 'mode', 'astype', 'round', 'to_csv', 'copy', 'idxmax', 'astype', 'idxmax', 'astype', 'to_csv', 'max', 'max', 'to_csv', 'copy', 'astype', 'round', 'astype', 'round', 'to_csv', 'head', 'astype', 'round', 'to_csv', 'head', 'to_csv', 'head', 'astype', 'sum', 'groupby', 'sum', 'groupby', 'crosstab', 'sum', 'sum', 'reset_index', 'idxmax', 'copy', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'shap', 'lightgbm', 'catboost', 'xgboost'] ['log_loss', 'cohen_kappa_score', 'train_test_split', 'KFold', 'RepeatedStratifiedKFold', 'StratifiedKFold', 'boxcox', 'median_abs_deviation', 'StandardScaler', 'RobustScaler', 'QuantileTransformer', 'VarianceThreshold', 'mutual_info_classif', 'RFECV', 'SelectKBest', 'PCA', 'RidgeClassifier', 'LogisticRegression', 'ExtraTreesClassifier', 'RandomForestClassifier', 'SVC', 'SMOTE', 'zscore', 'pdp', 'get_dataset', 'info_plots']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'array', 'crosstab'], 'numpy': ['mean', 'max', 'abs', 'sum', 'where', 'round', 'unique', 'info', 'array', 'copy'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'scipy': [], 'shap': [], '': [], 'lightgbm': [], 'catboost': [], 'xgboost': [], 'imblearn': [], 'pdpbox': [], '=': [], 'pd': [], 'model': [], 'index': [], 'False': [], ',': [], 'by': [], '=0)': []} axis_0: 4, axis_1: 5
tps-september-in-depth-eda-score-6-20.py : ['read_csv', 'read_csv', 'head', 'nunique', 'drop', 'drop', 'info', 'to_datetime', 'to_datetime', 'sum', 'isna', 'rename', 'unstack', 'sum', 'groupby', 'sum', 'sort_values', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'transpose', 'pivot', 'reset_index', 'cumsum', 'head', 'head', 'sort_values', 'reset_index', 'sum', 'groupby', 'sort_values', 'reset_index', 'sum', 'groupby', 'sort_values', 'reset_index', 'sum', 'groupby', 'head', 'boxplot', 'boxplot', 'pivot', 'reset_index', 'sum', 'groupby', 'pivot', 'reset_index', 'sum', 'groupby', 'cumsum', 'pivot', 'reset_index', 'sum', 'groupby', 'cumsum', 'sum', 'groupby', 'astype', 'isin', 'isin', 'astype', 'isin', 'isin', 'get_dummies', 'get_dummies', 'head', 'drop', 'drop', 'drop', 'transform', 'items', 'items', 'items', 'sort_values', 'rename', 'items', 'head', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'pylab', 'optuna'] ['probplot', 'boxcox', 'inv_boxcox', 'StandardScaler', 'Ridge', 'Lasso', 'BayesianRidge', 'KNeighborsRegressor', 'SVR', 'RandomForestRegressor', 'GradientBoostingRegressor', 'HistGradientBoostingRegressor', 'LGBMRegressor', 'CatBoostRegressor', 'XGBRegressor', 'mean_squared_error']Dict:{'pandas': ['isna', 'read_csv', 'get_dummies', 'pivot', 'to_datetime'], 'numpy': ['transpose', 'sum', 'isin', 'info', 'cumsum'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'scipy': [], 'pylab': ['transpose', 'boxplot', 'sum', 'isin', 'info', 'cumsum'], 'sklearn': [], 'lightgbm': [], 'catboost': [], 'xgboost': [], 'optuna': []} axis_0: 0, axis_1: 6
titanic-eda-feature-engineering-models-ensemble.py : ['join', 'read_csv', 'head', 'tail', 'info', 'describe', 'hist', 'dropna', 'unstack', 'value_counts', 'groupby', 'sum', 'isnull', 'drop', 'head', 'nunique', 'drop', 'nunique', 'count', 'drop', 'corr', 'mean', 'groupby', 'boxplot', 'mean', 'groupby', 'cut', 'cut', 'drop', 'concat', 'drop', 'head', 'info', 'drop', 'mean', 'mean', 'mean', 'get', 'get', 'mean', 'read_csv', 'info', 'cut', 'cut', 'drop', 'sum', 'isnull', 'info', 'concat', 'drop', 'insert', 'head', 'drop', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'pandas', 'seaborn', 'matplotlib.pyplot', 'xgboost', 'lightgbm', 'warnings'] ['train_test_split', 'SimpleImputer', 'OneHotEncoder', 'accuracy_score', 'cross_val_score', 'LogisticRegression', 'RandomForestClassifier', 'GradientBoostingClassifier', 'SVC', 'MLPClassifier', 'VotingClassifier', 'CatBoostClassifier']Dict:{'numpy': ['mean', 'info', 'insert', 'sum'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts'], 'os': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'get', 'hist'], 'sklearn': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 11
stacked-classifier-top-10-on-lb.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'describe', 'value_counts', 'value_counts', 'groupby', 'head', 'value_counts', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'groupby', 'hist', 'hist', 'map', 'hist', 'corr', 'corr', 'notnull', 'isnull', 'boxplot', 'fillna', 'describe', 'isnull', 'median', 'fillna', 'unique', 'notnull', 'sort_values', 'assign', 'astype', 'map', 'boxplot', 'fillna', 'fillna', 'unique', 'value_counts', 'unique', 'value_counts', 'apply', 'apply', 'cut', 'cut', 'unique', 'apply', 'value_counts', 'apply', 'value_counts', 'value_counts', 'tail', 'apply', 'to_numeric', 'apply', 'to_numeric', 'isnull', 'fillna', 'median', 'fillna', 'median', 'head', 'dropna', 'notnull', 'isnull', 'isnull', 'transform', 'transform', 'corr', 'drop', 'astype', 'to_csv'] ['warnings', 'numpy', 'pandas', 're', 'matplotlib.pyplot', 'seaborn', 'missingno', 'os', 're'] ['LogisticRegression', 'NuSVC', 'SVC', 'DecisionTreeClassifier', 'RandomForestClassifier', 'StackingClassifier', 'MLPClassifier', 'StandardScaler', 'LabelEncoder', 'OneHotEncoder', 'train_test_split', 'GridSearchCV', 'KFold', 'cross_val_score', 'accuracy_score', 'RandomForestRegressor', 'preprocessing']Dict:{'warnings': [], '': [], 'numpy': ['median', 'info', 'sum', 'unique'], 'pandas': ['read_csv', 'isnull', 'cut', 'value_counts', 'to_numeric', 'unique', 'notnull'], 're': [], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'missingno': [], 'sklearn': [], 'os': []} axis_0: 0, axis_1: 0
santander-customer-transaction-eda-fe-lgb.py : ['read_csv', 'read_csv', 'info', 'sample', 'info', 'sample', 'value_counts', 'value_counts', 'reset_index', 'sort_values', 'unstack', 'abs', 'corr', 'rename', 'drop', 'drop', 'reset_index', 'sort_values', 'unstack', 'abs', 'corr', 'rename', 'drop', 'drop', 'tail', 'tail', 'tail', 'sort_values', 'transpose', 'agg', 'sort_values', 'transpose', 'agg', 'merge', 'reset_index', 'drop', 'reset_index', 'drop', 'head', 'head', 'tail', 'tail', 'value_counts', 'quantile', 'quantile', 'sort_values', 'join', 'round', 'head', 'count', 'max', 'min', 'drop', 'unique', 'sum', 'sum', 'concat', 'value_counts', 'astype', 'map', 'map', 'astype', 'map', 'map', 'astype', 'mean', 'map', 'astype', 'mean', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'copy', 'copy', 'mean', 'agg', 'groupby', 'map', 'array', 'transform', 'transform', 'round', 'array', 'add_prefix', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'mean', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings'] ['StratifiedKFold', 'roc_auc_score', 'OneHotEncoder', 'MinMaxScaler', 'StandardScaler', 'KMeans']Dict:{'numpy': ['transpose', 'mean', 'quantile', 'max', 'abs', 'sum', 'array', 'round', 'min', 'unique', 'isin', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'array', 'merge'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'lightgbm': [], 'warnings': []} axis_0: 1, axis_1: 6
amex-lightautoml-starter.py : ['read_pickle', 'head', 'astype', 'round', 'astype', 'set_index', 'read_csv', 'set_index', 'read_csv', 'map', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'read_pickle', 'astype', 'round', 'astype', 'sample', 'sample', 'read_pickle', 'map', 'astype', 'round', 'astype', 'read_csv', 'head', 'to_csv'] ['os', 'time', 'numpy', 'pandas', 'torch', 'gc'] ['display', 'HTML', 'Javascript', 'TabularAutoML', 'Task']Dict:{'IPython': [], 'os': [], 'time': [], 'numpy': ['transpose', 'sum', 'where', 'round', 'array', 'cumsum'], 'pandas': ['array', 'read_pickle', 'read_csv'], 'torch': ['transpose', 'sum', 'where', 'round', 'cumsum'], 'lightautoml': [], 'gc': []} axis_0: 0, axis_1: 0
pubg-eda-feature-engineering-0-0243-top-5.py : ['read_csv', 'head', 'sample', 'corr', 'sort_values', 'value_counts', 'apply', 'apply', 'sort_values', 'value_counts', 'transform', 'groupby', 'merge', 'head', 'copy', 'sort_values', 'astype', 'apply', 'apply', 'sample', 'fillna', 'sample', 'apply', 'sample', 'sample', 'fillna', 'replace', 'sample', 'fillna', 'replace', 'sample', 'fillna', 'replace', 'sample', 'sample', 'corr'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] []Dict:{'numpy': ['copy'], 'pandas': ['merge', 'read_csv', 'value_counts'], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 0
feature-engineering-lstm-score-0-1878.py : ['join', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'head', 'sum', 'isnull', 'info', 'describe', 'corr', 'count', 'value_counts', 'boxplot', 'copy', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'diff', 'groupby', 'cumsum', 'groupby', 'cumsum', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'diff', 'groupby', 'diff', 'groupby', 'diff', 'groupby', 'diff', 'groupby', 'diff', 'groupby', 'diff', 'groupby', 'diff', 'groupby', 'diff', 'groupby', 'fillna', 'min', 'head', 'read_csv', 'head', 'fillna', 'min', 'head', 'to_numpy', 'drop', 'drop', 'transform', 'read_csv', 'squeeze', 'squeeze', 'quantile', 'quantile', 'apply', 'apply', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['keras', 'EarlyStopping', 'ModelCheckpoint', 'LearningRateScheduler', 'ReduceLROnPlateau', 'mean_absolute_error', 'RobustScaler']Dict:{'numpy': ['squeeze', 'quantile', 'max', 'diff', 'sum', 'min', 'info', 'cumsum', 'copy'], 'pandas': ['get_dummies', 'isnull', 'read_csv', 'value_counts'], 'os': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'warnings': [], 'tensorflow': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 2
ps3e15-iterative-catboost-imputer-ensemble.py : ['read_csv', 'head', 'read_csv', 'notnull', 'notnull', 'isnull', 'drop', 'drop', 'drop', 'concat', 'reset_index', 'count', 'count', 'mean', 'median', 'mean', 'median', 'hist', 'hist', 'min', 'max', 'std', 'std', 'min', 'max', 'std', 'std', 'nunique', 'max', 'max', 'min', 'min', 'nunique', 'boxplot', 'sum', 'isna', 'mean', 'isnull', 'mean', 'isnull', 'concat', 'isnull', 'concat', 'drop', 'drop', 'reset_index', 'fillna', 'copy', 'copy', 'drop', 'drop', 'drop', 'array', 'array', 'sum', 'isna', 'mean', 'isnull', 'mean', 'isnull', 'concat', 'concat', 'drop', 'drop', 'reset_index', 'fillna', 'median', 'copy', 'copy', 'drop', 'drop', 'drop', 'items', 'array', 'array', 'mean', 'isnull', 'mean', 'isnull', 'concat', 'nunique', 'transform', 'transform', 'concat', 'transform', 'min', 'transform', 'transform', 'min', 'transform', 'transform', 'fillna', 'fillna', 'transform', 'reset_index', 'concat', 'concat', 'mean', 'mean', 'concat', 'get_dummies', 'value_counts', 'idxmin', 'drop', 'concat', 'drop', 'duplicated', 'reset_index', 'drop', 'sort_values', 'mean', 'groupby', 'map', 'map', 'to_dict', 'value_counts', 'map', 'map', 'to_dict', 'value_counts', 'keys', 'replace', 'replace', 'mean', 'corr', 'drop', 'drop', 'transform', 'array', 'array', 'array', 'mean', 'groupby', 'to_dict', 'map', 'map', 'mean', 'astype', 'astype', 'corr', 'nunique', 'abs', 'corr', 'transform', 'transform', 'concat', 'concat', 'array', 'array', 'array', 'mean', 'groupby', 'to_dict', 'map', 'map', 'mean', 'drop', 'drop', 'drop', 'copy', 'copy', 'copy', 'array', 'array', 'keys', 'items', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'read_csv', 'to_csv'] ['sys', 'sklearn', 'numpy', 'os', 'pandas', 'matplotlib.pyplot', 'missingno', 'seaborn', 'random', 'gc', 'xgboost', 'statsmodels.api', 'math', 'seaborn', 'optuna', 'xgboost', 'lightgbm', 'warnings', 'numpy', 'matplotlib.pyplot'] ['tqdm', 'tqdm', 'PrettyTable', 'deepcopy', 'partial', 'combinations', 'KMeans', 'KElbowVisualizer', 'uniform', 'f_classif', 'LabelEncoder', 'StandardScaler', 'metrics', 'GridSearchCV', 'RandomizedSearchCV', 'train_test_split', 'mean_squared_error', 'mean_squared_log_error', 'mean_absolute_error', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'FunctionTransformer', 'PCA', 'TruncatedSVD', 'SimpleImputer', 'ColumnTransformer', 'Pipeline', 'stats', 'variance_inflation_factor', 'BaseEstimator', 'TransformerMixin', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StratifiedKFold', 'KFold', 'PassiveAggressiveRegressor', 'ARDRegression', 'RidgeCV', 'ElasticNetCV', 'TheilSenRegressor', 'RANSACRegressor', 'HuberRegressor', 'HistGradientBoostingRegressor', 'ExtraTreesRegressor', 'GradientBoostingRegressor', 'RandomForestRegressor', 'DecisionTreeRegressor', 'LinearRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool', 'KNeighborsRegressor']Dict:{'sys': [], 'sklearn': [], 'numpy': ['mean', 'median', 'std', 'max', 'abs', 'sum', 'min', 'array', 'copy'], 'os': ['replace'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'notnull', 'array'], 'matplotlib': ['boxplot', 'hist'], 'missingno': [], 'tqdm': [], 'prettytable': ['copy'], 'seaborn': ['boxplot'], 'copy': [], 'functools': [], 'itertools': [], 'yellowbrick': [], 'random': [], 'gc': [], 'xgboost': [], 'scipy': [], 'statsmodels': [], 'math': [], 'optuna': [], 'lightgbm': [], 'category_encoders': [], 'imblearn': [], 'catboost': [], 'warnings': []} axis_0: 6, axis_1: 9
feature-engineering-tips.py : ['read_csv', 'head', 'read_csv', 'head', 'boxplot', 'quantile', 'quantile', 'head', 'any', 'any', 'quantile', 'quantile', 'head', 'any', 'nunique', 'nunique', 'head', 'select_dtypes', 'dropna', 'head', 'describe', 'drop', 'read_csv', 'any', 'isnull', 'sum', 'isnull', 'any', 'isnull', 'all', 'notnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'concat', 'round', 'dropna', 'sum', 'isnull', 'fillna', 'mean', 'sum', 'isnull', 'fillna', 'median', 'sum', 'isnull', 'fillna', 'head', 'apply', 'fillna', 'mean', 'apply', 'fillna', 'mean', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'mode', 'fillna', 'sum', 'isnull', 'apply', 'unique', 'fillna', 'mode', 'mean', 'groupby', 'mean', 'fillna', 'transform', 'groupby', 'isnull', 'mean', 'groupby', 'isnull', 'mean', 'groupby', 'get_dummies', 'head', 'head', 'isnull', 'isnull', 'copy', 'where', 'isnull', 'mean', 'groupby', 'count', 'groupby', 'nunique', 'value_counts', 'nunique', 'unique', 'value_counts', 'head', 'get_dummies', 'head', 'get_dummies', 'head', 'get_dummies', 'head', 'get_dummies', 'get_dummies', 'nunique', 'head', 'value_counts', 'value_counts', 'value_counts', 'mean', 'groupby', 'value_counts', 'value_counts', 'value_counts', 'mean', 'groupby', 'copy', 'any', 'value_counts', 'value_counts', 'where', 'isin', 'head', 'describe', 'describe', 'describe', 'hist', 'qcut', 'read_csv', 'astype', 'notnull', 'agg', 'groupby', 'sum', 'sum', 'agg', 'groupby', 'sum', 'sum', 'apply', 'apply', 'agg', 'groupby', 'agg', 'groupby', 'read_csv', 'head', 'to_datetime', 'head', 'read_csv', 'mean', 'groupby'] ['numpy', 'pandas', 'seaborn', 'missingno'] ['pyplot', 'date', 'accuracy_score', 'train_test_split', 'LocalOutlierFactor', 'MinMaxScaler', 'LabelEncoder', 'StandardScaler', 'RobustScaler', 'KNNImputer', 'proportions_ztest']Dict:{'numpy': ['mean', 'median', 'any', 'quantile', 'sum', 'all', 'where', 'round', 'unique', 'isin', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull', 'qcut', 'to_datetime'], 'seaborn': ['boxplot'], 'matplotlib': [], 'missingno': [], 'datetime': [], 'sklearn': [], 'statsmodels': []} axis_0: 5, axis_1: 3
visualize-predictions-of-top-kernels.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'astype', 'reset_index', 'sort_values', 'astype', 'reset_index', 'sort_values', 'astype', 'reset_index', 'sort_values', 'astype', 'reset_index', 'sort_values', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby'] ['pandas', 'matplotlib.pyplot'] []Dict:{'pandas': ['read_csv'], 'matplotlib': []} axis_0: 0, axis_1: 0
feature-engineering-models-comparison-cv-kfold.py : ['join', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'info', 'merge', 'head', 'reset_index', 'agg', 'groupby', 'head', 'drop', 'round', 'mean', 'round', 'mean', 'round', 'mean', 'round', 'mean', 'round', 'mean', 'mean', 'reset_index', 'agg', 'groupby', 'drop', 'to_csv'] ['numpy', 'pandas', 'os', 'xgboost'] ['train_test_split', 'mean_squared_error', 'mean_absolute_error', 'r2_score', 'LinearRegression', 'RandomForestRegressor', 'cross_val_score', 'RandomizedSearchCV']Dict:{'numpy': ['mean', 'round', 'info'], 'pandas': ['merge', 'read_csv'], 'os': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 3
catboost-regressor-10-groupkfold-ion-switch.py : ['read_csv', 'read_csv', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'rolling', 'var', 'rolling', 'min', 'rolling', 'max', 'rolling', 'replace', 'fillna', 'mean', 'rolling', 'var', 'rolling', 'min', 'rolling', 'max', 'rolling', 'replace', 'fillna', 'cumsum', 'sum', 'cumsum', 'sum', 'head', 'head', 'drop', 'head', 'head', 'drop', 'drop', 'array', 'mean', 'sort_values', 'read_csv', 'round', 'astype', 'to_csv', 'tail'] ['gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['sqrt', 'CatBoostRegressor', 'KFold', 'StratifiedKFold', 'GroupKFold', 'mean_squared_error', 'mean_absolute_error']Dict:{'gc': [], 'numpy': ['mean', 'max', 'var', 'sum', 'round', 'min', 'array', 'cumsum'], 'pandas': ['array', 'read_csv'], 'math': [], 'catboost': [], 'sklearn': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 1
jane-street-market-prediction-eda-pca-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'value_counts', 'value_counts', 'value_counts', 'sum', 'any', 'isna', 'sum', 'any', 'isna', 'sum', 'any', 'isna', 'sort_values', 'sum', 'isna', 'sum', 'isna', 'sort_values', 'sum', 'isna', 'sum', 'isna', 'nunique', 'astype', 'sort_values', 'apply', 'count', 'dropna', 'set_index', 'head', 'dropna', 'set_index', 'head', 'astype', 'fillna', 'astype'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'gc', 'warnings', 'janestreet'] ['sample', 'XGBClassifier', 'roc_auc_score', 'train_test_split', 'cluster', 'PCA', 'StandardScaler']Dict:{'numpy': ['sum', 'any'], 'pandas': ['isna', 'read_csv', 'value_counts'], 'seaborn': [], 'matplotlib': [], 'random': [], 'gc': [], 'xgboost': ['apply'], 'sklearn': [], 'bioinfokit': [], 'warnings': [], 'janestreet': []} axis_0: 0, axis_1: 0
house-prices-prediction-cat-lgbm-xgb.py : ['drop', 'read_csv', 'drop', 'read_csv', 'read_csv', 'copy', 'copy', 'concat', 'head', 'select_dtypes', 'select_dtypes', 'nunique', 'sum', 'duplicated', 'quantile', 'cut', 'array', 'value_counts', 'value_counts', 'nunique', 'keys', 'to_dict', 'value_counts', 'to_dict', 'value_counts', 'sort_values', 'reset_index', 'mean', 'groupby', 'boxplot', 'corr', 'copy', 'quantile', 'quantile', 'min', 'mean', 'median', 'max', 'max', 'min', 'max', 'min', 'get_dummies', 'copy', 'isna', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'fillna', 'fillna', 'value_counts', 'copy', 'sort_values', 'value_counts', 'drop', 'value_counts', 'copy', 'sort_values', 'value_counts', 'isin', 'value_counts', 'head', 'get_dummies', 'drop', 'drop', 'replace', 'replace', 'drop', 'concat', 'reset_index', 'sort_values', 'drop', 'tail', 'drop', 'tail', 'drop', 'tail', 'to_csv'] ['warnings', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'optuna', 'optuna', 'optuna'] ['enable_iterative_imputer', 'IterativeImputer', 'train_test_split', 'mean_squared_error', 'MinMaxScaler', 'CatBoostRegressor', 'LGBMRegressor', 'XGBRegressor', 'LADRegression', 'VotingRegressor']Dict:{'warnings': [], 'numpy': ['mean', 'median', 'quantile', 'max', 'sum', 'min', 'isin', 'array', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'get_dummies', 'array'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'sklearn': [], 'lightgbm': [], 'xgboost': [], '=': [], 'pd': [], 'min_max': [], '*': [], 'catboost': [], 'optuna': [], 'sklego': []} axis_0: 1, axis_1: 8
lightgbm-with-aggregated-features-v-2-0.py : ['read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'head', 'fillna', 'fillna', 'to_datetime', 'apply', 'apply', 'apply', 'fillna', 'fillna', 'fillna', 'astype', 'transform', 'astype', 'transform', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'read_csv', 'clip', 'to_csv'] ['pandas', 'numpy', 'gc', 'matplotlib.pyplot', 'seaborn', 'string', 'nltk', 'scipy', 'lightgbm'] ['tqdm', 'venn2', 'venn2_circles', 'train_test_split', 'mean_squared_error', 'LabelEncoder', 'CountVectorizer', 'TfidfVectorizer', 'stopwords', 'mean_squared_error', 'sqrt', 'Ridge', 'KFold']Dict:{'pandas': ['merge', 'to_datetime', 'read_csv'], 'numpy': ['clip'], 'gc': [], 'tqdm': [], 'matplotlib': [], 'seaborn': [], 'matplotlib_venn': [], 'string': [], 'sklearn': [], 'nltk': [], 'scipy': [], 'lightgbm': [], 'math': []} axis_0: 0, axis_1: 0
gpu-xgb-baseline-using-rapids-cudf-inference.py : ['shift', 'groupby', 'agg', 'groupby', 'reset_index', 'set_index', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'astype', 'agg', 'groupby', 'drop', 'mean', 'groupby', 'min', 'groupby', 'max', 'groupby', 'astype', 'agg', 'groupby', 'drop', 'mean', 'groupby', 'min', 'groupby', 'max', 'groupby', 'astype', 'read_csv', 'head', 'mean'] ['pandas', 'numpy', 'matplotlib.pyplot', 'gc', 'pickle', 'warnings', 'jo_wilder'] ['KFold', 'GroupKFold', 'XGBClassifier', 'f1_score', 'tqdm', 'defaultdict', 'combinations']Dict:{'pandas': ['read_csv'], 'numpy': ['mean', 'min', 'max'], 'matplotlib': [], 'gc': [], 'pickle': [], 'sklearn': [], 'xgboost': [], 'tqdm': [], 'collections': [], 'warnings': [], 'itertools': [], '=': [], 'jo_wilder': []} axis_0: 0, axis_1: 2
let-s-use-keras-tensorflow.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'info', 'info', 'sum', 'isna', 'sort_values', 'describe', 'describe', 'groupby', 'value_counts', 'applymap', 'where', 'replace', 'mean', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'median', 'fillna', 'fillna', 'head', 'copy', 'pop', 'items', 'take', 'keys', 'map', 'map', 'items', 'items', 'where', 'to_csv', 'head'] ['numpy', 'pandas', 'tensorflow', 'seaborn', 'matplotlib.pyplot'] ['train_test_split', 'LabelEncoder', 'layers']Dict:{'numpy': ['mean', 'median', 'take', 'sum', 'where', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'value_counts'], 'tensorflow': [], 'sklearn': [], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 0
titanic-eda-model-pipeline-keras-nn.py : ['read_csv', 'read_csv', 'info', 'info', 'describe', 'head', 'head', 'apply', 'apply', 'map', 'map', 'mean', 'groupby', 'groupby', 'median', 'isnull', 'transform', 'groupby', 'sum', 'isnull', 'map', 'cut', 'head', 'cut', 'crosstab', 'crosstab', 'fillna', 'cut', 'crosstab', 'fillna', 'cut', 'head', 'count', 'groupby', 'crosstab', 'crosstab', 'fillna', 'crosstab', 'crosstab', 'crosstab', 'head', 'get_dummies', 'get_dummies', 'corr', 'astype', 'drop', 'drop', 'astype', 'add', 'add', 'add', 'add', 'add', 'read_csv', 'astype', 'to_csv', 'keys', 'mean', 'std', 'boxplot'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 're', 'keras', 'graphviz'] ['rcParams', 'StandardScaler', 'Sequential', 'Dense', 'Activation', 'Dropout', 'SGD', 'accuracy_score', 'confusion_matrix', 'classification_report', 'cross_val_score', 'LabelEncoder', 'StandardScaler', 'Pipeline', 'train_test_split', 'KFold', 'cross_validate', 'accuracy_score', 'KMeans', 'PCA', 'SVC', 'RidgeClassifier', 'SGDClassifier', 'LogisticRegression', 'SVC', 'LinearSVC', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'XGBClassifier', 'MultinomialNB', 'SelectFromModel', 'RandomForestClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'BaggingClassifier', 'VotingClassifier', 'RandomTreesEmbedding']Dict:{'pandas': ['read_csv', 'isnull', 'cut', 'get_dummies', 'crosstab'], 'numpy': ['mean', 'median', 'add', 'sum', 'info', 'std'], 'seaborn': ['boxplot'], 'matplotlib': ['keys'], 're': [], 'sklearn': ['transform', 'apply'], 'keras': [], 'graphviz': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 2
feature-engineering-stacking-titanic-dataset.py : ['read_csv', 'read_csv', 'info', 'head', 'head', 'describe', 'sum', 'isnull', 'drop', 'crosstab', 'replace', 'replace', 'replace', 'replace', 'map', 'fillna', 'head', 'drop', 'drop', 'mode', 'dropna', 'fillna', 'sort_values', 'mean', 'groupby', 'mean', 'std', 'sum', 'isnull', 'copy', 'astype', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'median', 'dropna', 'sum', 'isnull', 'astype', 'map', 'astype', 'map', 'head', 'sort_values', 'mean', 'groupby', 'head', 'head', 'qcut', 'qcut', 'sort_values', 'mean', 'groupby', 'head', 'astype', 'drop', 'drop', 'head', 'head', 'drop', 'copy', 'drop', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm'] ['train_test_split', 'LogisticRegression', 'accuracy_score', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'SVC', 'XGBClassifier', 'VotingClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'info', 'std', 'copy'], 'pandas': ['qcut', 'crosstab', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'xgboost': [], 'lightgbm': []} axis_0: 0, axis_1: 3
getting-started-with-time-series-features.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'to_datetime', 'set_index', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'sum', 'shift', 'transform', 'groupby', 'sum', 'shift', 'transform', 'groupby', 'mean', 'shift', 'transform', 'groupby', 'mean', 'shift', 'tail', 'isna', 'isna', 'items', 'to_csv'] ['pandas', 'datetime', 'xgboost', 'os'] ['train_test_split', 'TimeSeriesSplit']Dict:{'pandas': ['isna', 'concat', 'to_datetime', 'read_csv'], 'datetime': [], 'xgboost': [], 'sklearn': [], 'os': []} axis_0: 0, axis_1: 0
ensemble-model-xgboost-catboost-lgbm.py : ['boxplot', 'read_csv', 'read_csv', 'head', 'info', 'describe', 'isnull', 'corr', 'drop', 'nunique', 'drop', 'nunique', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'sum', 'isnull', 'concat', 'fillna', 'astype', 'head', '_repr_html_', '_repr_html_', '_repr_html_', 'drop', 'cut', 'fillna', 'fillna', 'fillna', 'sum', 'isnull', 'astype', 'astype', 'apply', 'head', 'sum', 'sum', 'isnull', 'get_dummies', 'get_dummies', 'get_dummies', 'concat', 'drop', 'head', 'map', 'map', 'map', 'head', 'to_csv', 'head', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'concat', 'fillna', 'astype', 'drop', 'cut', 'fillna', 'fillna', 'fillna', 'astype', 'astype', 'apply', 'get_dummies', 'get_dummies', 'get_dummies', 'concat', 'drop', 'map', 'map', 'drop', 'head', 'to_csv', 'drop', 'round', 'round', 'round', 'round', 'round', 'round', 'read_csv', 'head', 'astype', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'optuna', 'xgboost', 'lightgbm', 'catboost', 'random'] ['display', 'display_html', 'LabelEncoder', 'train_test_split', 'StratifiedKFold', 'accuracy_score', 'tqdm', 'confusion_matrix']Dict:{'numpy': ['mean', 'round', 'info', 'sum'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'get_dummies'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'warnings': [], 'IPython': [], 'sklearn': [], 'tqdm': [], 'optuna': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 12
naive-multiclass-classification-approach-h2oauto.py : ['value_counts', 'mean', 'fillna', 'read_csv', 'read_csv', 'value_counts', 'value_counts', 'read_csv', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'drop', 'max', 'sum', 'isnull', 'describe', 'groupby', 'drop', 'describe', 'drop', 'drop', 'head', 'groupby', 'groupby', 'groupby', 'drop', 'boxplot', 'copy', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'drop', 'concat', 'map', 'drop', 'transform', 'transform', 'value_counts', 'value_counts', 'value_counts', 'unique', 'min', 'min', 'drop', 'apply', 'apply', 'notnull', 'unique', 'apply', 'notnull', 'unique', 'apply', 'notnull', 'unique', 'apply', 'apply', 'apply', 'copy', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'drop', 'concat', 'map', 'map', 'map', 'map', 'drop', 'copy', 'drop', 'astype', 'astype', 'max', 'sum', 'isnull', 'astype', 'astype', 'astype', 'astype', 'drop', 'drop', 'transform', 'read_csv', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'copy', 'map', 'map', 'map', 'drop', 'drop', 'drop', 'max', 'sum', 'isnull', 'concat', 'astype', 'map', 'to_csv', 'drop', 'concat', 'astype', 'map', 'to_csv', 'copy', 'copy', 'concat', 'concat', 'head', 'concat', 'astype', 'map', 'to_csv'] ['pandas', 'seaborn', 'numpy', 'warnings', 'lightgbm', 're', 'lightgbm', 'h2o'] ['XGBClassifier', 'LogisticRegression', 'RandomForestClassifier', 'VotingClassifier', 'pyplot', 'cross_val_score', 'LabelEncoder', 'OneHotEncoder', 'StandardScaler', 'confusion_matrix', 'classification_report', 'train_test_split', 'accuracy_score', 'f1_score', 'confusion_matrix', 'SelectFromModel', 'loadtxt', 'sort', 'TransformerMixin', 'display', 'f1_score', 'f1_score', 'f1_score', 'f1_score', 'plot_importance', 'LGBMClassifier', 'f1_score', 'f1_score', 'StandardScaler', 'confusion_matrix', 'roc_auc_score', 'H2OAutoML']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull'], 'seaborn': ['boxplot'], 'numpy': [], 'xgboost': [], 'sklearn': [], 'matplotlib': ['boxplot'], 'warnings': [], 'IPython': [], 'lightgbm': [], 're': [], 'h2o': []} axis_0: 0, axis_1: 6
house-prices-top10-for-beginner-kor-eng.py : ['read_csv', 'read_csv', 'head', 'info', 'describe', 'skew', 'kurt', 'corr', 'corr', 'corr', 'sort_values', 'concat', 'drop', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'drop', 'max', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'head', 'fillna', 'fillna', 'mode', 'fillna', 'drop', 'max', 'sum', 'isnull', 'sort_values', 'apply', 'get_dummies', 'head', 'to_csv'] ['numpy', 'pandas', 'sklearn.metrics', 'seaborn', 'matplotlib.pyplot', 'warnings', 'xgboost'] ['norm', 'skew', 'preprocessing', 'XGBRegressor', 'make_scorer', 'KFold', 'cross_val_score', 'mean_squared_error']Dict:{'numpy': ['info', 'sum', 'max'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'scipy': [], 'sklearn': [], 'xgboost': [], 'seaborn': [], 'matplotlib': [], 'warnings': []} axis_0: 0, axis_1: 1
nlp-feature-engineering-beginners.py : ['join', 'read_csv', 'read_csv', 'head', 'count', 'value_counts', 'value_counts', 'value_counts', 'count', 'value_counts', 'count', 'value_counts', 'sum', 'isna', 'isna', 'apply', 'isna', 'nunique', 'isna', 'head', 'isna', 'isna', 'apply', 'isna', 'count', 'apply', 'tail', 'count', 'apply', 'count', 'apply', 'head', 'replace', 'replace', 'replace', 'join', 'join', 'apply'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'geopy', 'numpy', 'pycountry', 're', 'string', 'nltk', 'spacy'] ['Nominatim', 'get_stop_words', 'stopwords', 'Word2Vec']Dict:{'numpy': ['sum'], 'pandas': ['isna', 'read_csv', 'value_counts'], 'os': ['replace'], 'matplotlib': [], 'seaborn': [], 'geopy': [], 'pycountry': [], 're': [], 'string': [], 'nltk': [], 'stop_words': [], 'spacy': [], 'gensim': []} axis_0: 0, axis_1: 2
store-sales-eda-prediction-with-ts.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'info', 'head', 'info', 'sum', 'isnull', 'merge', 'head', 'nunique', 'items', 'unique', 'sort_values', 'reset_index', 'agg', 'groupby', 'sort_values', 'reset_index', 'agg', 'groupby', 'sort_values', 'reset_index', 'agg', 'groupby', 'sort_values', 'reset_index', 'agg', 'groupby', 'sort_values', 'reset_index', 'agg', 'groupby', 'head', 'sum', 'isnull', 'merge', 'head', 'sort_values', 'value_counts', 'value_counts', 'value_counts', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sort_values', 'reset_index', 'sum', 'groupby', 'sort_values', 'reset_index', 'sum', 'groupby', 'sort_values', 'reset_index', 'read_csv', 'read_csv', 'read_csv', 'head', 'reset_index', 'sort_index', 'rename', 'head', 'set_index', 'head', 'groupby', 'unique', 'unique', 'to_datetime', 'head', 'tail', 'tail', 'rename', 'max', 'read_csv', 'read_csv', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'plotly.figure_factory', 'plotly.offline', 'plotly.graph_objs', 'matplotlib.pyplot', 'random'] ['HTML', 'display', 'HTML', 'Javascript', 'datetime', 'make_subplots', 'ECDF', 'seasonal_decompose', 'plot_acf', 'plot_pacf', 'Prophet', 'ScalarFormatter', 'FormatStrFormatter', 'ScalarFormatter', 'FormatStrFormatter', 'ScalarFormatter', 'FormatStrFormatter', '*', 'mean_squared_log_error']Dict:{'numpy': ['info', 'sum', 'unique', 'max'], 'pandas': [], 'os': ['rename'], 'IPython': [], 'warnings': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'statsmodels': [], 'fbprophet': [], 'random': [], 'fastai': [], 'sklearn': []} axis_0: 0, axis_1: 0
feature-engineering-handling-missing-values.py : ['read_csv', 'sum', 'isna', 'sum', 'isna', 'copy', 'dropna', 'sum', 'isna', 'copy', 'drop', 'sum', 'isna', 'fillna', 'mean', 'isna', 'fillna', 'median', 'isna', 'fillna', 'mode', 'isna', 'mode', 'notna', 'fillna', 'mode', 'notna', 'isna', 'sum', 'isna', 'mode', 'fillna', 'sum', 'isna', 'sample', 'fillna', 'isna', 'sample', 'fillna', 'isna', 'sample', 'notna', 'fillna', 'isna', 'boxplot', 'mean', 'std', 'fillna', 'isna', 'fillna', 'fillna', 'isna', 'fillna', 'isna', 'where', 'isnull', 'where', 'isnull', 'mode', 'fillna', 'mode', 'where', 'isnull', 'transform', 'isna', 'head', 'notna', 'isnull', 'drop', 'drop', 'head', 'isna', 'isna', 'isna'] ['pandas', 'seaborn', 'matplotlib.pyplot', 'missingno', 'numpy', 'numpy'] ['KNNImputer', 'LinearRegression', 'mice']Dict:{'pandas': ['isna', 'notna', 'read_csv', 'isnull'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'missingno': [], 'numpy': ['mean', 'median', 'sum', 'where', 'std', 'copy'], 'sklearn': [], 'impyute': []} axis_0: 1, axis_1: 3
predicting-future-sales.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'sample', 'head', 'head', 'describe', 'info', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'nunique', 'nunique', 'nunique', 'boxplot', 'boxplot', 'reset_index', 'sum', 'groupby', 'apply', 'reset_index', 'pivot_table', 'merge', 'fillna', 'head', 'drop', 'drop', 'head', 'head', 'clip', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['WordCloud', 'STOPWORDS', 'WordCloud', 'STOPWORDS', 'WordCloud', 'STOPWORDS', 'train_test_split', 'LGBMRegressor']Dict:{'numpy': ['info', 'sum', 'clip'], 'pandas': ['merge', 'pivot_table', 'read_csv', 'isnull'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'wordcloud': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 0
foursquare-location-matching-baseline-modeling.py : ['read_csv', 'to_string', 'sum', 'memory_usage', 'head', 'read_csv', 'to_string', 'sum', 'memory_usage', 'head', 'read_csv', 'to_string', 'sum', 'memory_usage', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'read_json', 'replace', 'replace', 'replace', 'replace', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'sort_values', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'drop', 'drop', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'to_string', 'skew', 'skew', 'apply', 'apply', 'drop', 'drop', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'to_string', 'sum', 'memory_usage', 'head', 'to_string', 'sum', 'memory_usage', 'head', 'drop', 'drop', 'items', 'sort_values', 'to_string'] ['time', 'psutil', 'os', 'gc', 'math', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly', 'plotly.express', 'plotly.graph_objects', 'operator'] ['cos', 'asin', 'sqrt', 'pi', 'make_subplots', 'init_notebook_mode', 'iplot', 'train_test_split', 'KFold', 'cross_val_score', 'GridSearchCV', 'RepeatedStratifiedKFold', 'LogisticRegression', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'svm', 'GaussianNB', 'RandomForestClassifier', 'LinearDiscriminantAnalysis', 'SGDClassifier', 'RidgeClassifier', 'XGBClassifier', 'AdaBoostClassifier', 'reduce', 'lru_cache']Dict:{'time,': [], 'psutil,': [], 'os,': [], 'gc': [], 'math': [], 'numpy': ['sum'], 'pandas': ['isna', 'read_json', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': [], 'xgboost': ['apply'], 'operator': [], 'functools': []} axis_0: 0, axis_1: 0
ultimate-eda-fe-neural-network-model-top-2.py : ['read_csv', 'read_csv', 'head', 'astype', 'astype', 'info', 'unique', 'unique', 'reset_index', 'concat', 'astype', 'replace', 'replace', 'get_dummies', 'astype', 'map', 'map', 'astype', 'map', 'mean', 'groupby', 'sum', 'isnull', 'iterrows', 'mean', 'groupby', 'iterrows', 'sum', 'isnull', 'mean', 'astype', 'fillna', 'astype', 'map', 'sub', 'apply', 'transform', 'groupby', 'get_dummies', 'astype', 'apply', 'astype', 'std', 'drop', 'transform', 'head', 'isnull', 'isnull', 'head', 'map', 'map', 'to_pickle', 'to_pickle', 'to_pickle', 'transform', 'transform', 'describe', 'corr', 'astype', 'sort_values', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'keys', 'read_csv', 'astype', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'matplotlib.ticker', 'plotly.graph_objects', 'plotly.express', 're', 'tensorflow'] ['rcParams', 'download_plotlyjs', 'init_notebook_mode', 'plot', 'iplot', 'Scene', 'KNNImputer', 'StandardScaler', 'cross_val_predict', 'cross_val_score', 'cross_validate', 'StratifiedKFold', 'StratifiedShuffleSplit', 'confusion_matrix', 'roc_curve', 'precision_score', 'recall_score', 'f1_score', 'keras', 'KerasClassifier', 'Sequential', 'plot_model', 'Input', 'Dense', 'Dropout', 'AlphaDropout', 'BatchNormalization', 'Concatenate', 'concatenate', 'SGD', 'RMSprop', 'Adamax', 'Adagrad', 'Adam', 'Nadam', 'SGD', 'l2', 'ReduceLROnPlateau', 'EarlyStopping', '*']Dict:{'numpy': ['mean', 'add', 'sum', 'unique', 'info', 'std'], 'pandas': ['to_pickle', 'read_csv', 'isnull', 'concat', 'get_dummies', 'unique'], 'os': ['replace'], 'matplotlib': ['keys'], 'seaborn': [], 'plotly': [], 're': ['sub'], 'sklearn': [], 'tensorflow': []} axis_0: 0, axis_1: 1
ps3e12-eda-rfc-lr-lgbm-xgb-kidney-stone-pred.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'info', 'drop', 'drop', 'describe', 'value_counts', 'value_counts', 'concat', 'corr', 'head', 'head', 'head', 'head', 'drop', 'drop', 'drop', 'copy', 'to_csv', 'astype', 'keys', 'drop', 'copy', 'to_csv', 'drop', 'copy', 'to_csv', 'drop', 'copy', 'to_csv', 'drop', 'copy', 'to_csv', 'drop', 'copy', 'to_csv', 'sort_values'] ['numpy', 'pandas', 'pandas', 'numpy', 'matplotlib.pyplot', 'plotly.express', 'seaborn', 'lightgbm'] ['product', 'StandardScaler', 'LabelEncoder', 'LazyClassifier', 'LazyRegressor', 'train_test_split', 'XGBClassifier', 'product', 'roc_auc_score', 'train_test_split', 'AdaBoostClassifier', 'RandomForestClassifier', 'RandomizedSearchCV', 'GridSearchCV', 'LogisticRegression', 'GridSearchCV', 'GaussianNB']Dict:{'numpy': ['info', 'copy'], 'pandas': ['concat', 'read_csv', 'value_counts'], 'matplotlib': [], 'plotly': [], 'seaborn': [], 'itertools': [], 'sklearn': [], 'lazypredict': [], 'lightgbm': [], 'xgboost': []} axis_0: 0, axis_1: 10
advanced-feature-engineering-feature-encoding.py : ['read_csv', 'read_csv', 'head', 'describe', 'drop', 'drop', 'fillna', 'fillna', 'sum', 'isnull', 'fillna', 'median', 'fillna', 'replace', 'replace', 'get_dummies', 'head', 'apply', 'head', 'reset_index', 'groupby', 'head', 'merge', 'head', 'reset_index', 'sum', 'groupby', 'rename', 'reset_index', 'count', 'groupby', 'rename', 'merge', 'head', 'merge', 'head', 'reset_index', 'mean', 'groupby', 'rename', 'head', 'merge', 'head', 'map', 'mean', 'groupby', 'rename', 'head'] ['numpy', 'pandas', 'sklearn'] ['LabelEncoder', 'StratifiedKFold']Dict:{'numpy': ['mean', 'median', 'sum'], 'pandas': ['get_dummies', 'merge', 'read_csv', 'isnull'], 'sklearn': []} axis_0: 0, axis_1: 0
absolute-beginner-titanic-machine-learning.py : ['read_csv', 'read_csv', 'sum', 'isnull', 'head', 'sum', 'isnull', 'head', 'sum', 'isnull', 'sum', 'isnull', 'dropna', 'dropna', 'corr', 'info', 'drop', 'value_counts', 'value_counts', 'map', 'drop', 'mean', 'median', 'std', 'fillna', 'transform', 'groupby', 'drop', 'drop', 'fillna', 'mean', 'value_counts', 'map', 'fillna', 'transform', 'groupby', 'fillna', 'mode', 'isnull', 'isnull', 'drop', 'head', 'copy', 'drop', 'head', 'mean', 'mean', 'mean', 'mean', 'mean', 'to_csv', 'read_csv', 'head'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'missingno'] ['LabelEncoder', 'SimpleImputer', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'GaussianNB', 'SVC', 'KFold', 'cross_val_score']Dict:{'pandas': ['isnull', 'read_csv', 'value_counts'], 'numpy': ['mean', 'median', 'sum', 'info', 'std', 'copy'], 'seaborn': [], 'matplotlib': [], 'missingno': [], 'sklearn': []} axis_0: 0, axis_1: 6
1st-step-in-machine-learning-titanic-problem.py : ['read_csv', 'head', 'describe', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'boxplot', 'boxplot', 'sum', 'isna', 'drop', 'mean', 'fillna', 'sum', 'isna', 'value_counts', 'fillna', 'sum', 'isna', 'head', 'apply', 'head', 'apply', 'head', 'head', 'value_counts', 'apply', 'value_counts', 'head', 'drop', 'head', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'warnings'] ['preprocessing', 'LogisticRegression', 'train_test_split', 'accuracy_score']Dict:{'pandas': ['isna', 'read_csv', 'value_counts'], 'numpy': ['mean', 'sum'], 'sklearn': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'random,': [], 'os': [], 'warnings': []} axis_0: 0, axis_1: 2
a-pyspark-tutorial-with-titanic.py : ['join', 'describe', 'count', 'head', 'head', 'head', 'filter', 'filter', 'filter', 'filter', 'filter', 'filter', 'filter', 'filter', 'filter', 'filter', 'isin', 'mean', 'mean', 'mean', 'agg', 'agg', 'agg', 'count', 'filter', 'tail', 'drop', 'where', 'filter', 'where', 'where', 'where', 'where', 'mean', 'filter', 'filter', 'filter', 'filter', 'unique', 'unique', 'drop', 'drop', 'transform', 'transform', 'head', 'transform', 'transform', 'head', 'agg', 'agg', 'min', 'max', 'drop_duplicates', 'drop', 'drop', 'count', 'dropna', 'count', 'drop', 'fillna', 'agg', 'fillna', 'first', 'count', 'count', 'count', 'count', 'replace', 'replace', 'count', 'count'] ['numpy', 'pandas', 'os'] ['SparkSession', 'mean', 'mean', 'format_number', 'Callable', 'Column', 'udf', 'col', 'StringType', 'IntegerType', 'ArrayType', 'DataType', 'expr', 'col', 'when', 'coalesce', 'lit', 'Binarizer', 'Bucketizer', 'OneHotEncoder', 'StringIndexer', 'functions']Dict:{'numpy': ['mean', 'max', 'where', 'min', 'unique', 'isin'], 'pandas': ['unique'], 'os': ['replace'], 'pyspark': [], 'typing': []} axis_0: 0, axis_1: 0
feature-engineering-idea.py : ['read_parquet', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'hist', 'hist', 'median', 'head', 'tail', 'sort_values'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'warnings', 'lightgbm', 'warnings', 'numpy', 'lightgbm', 'matplotlib.pyplot'] ['train_test_split', '*', 'KFold', 'train_test_split', 'pearsonr']Dict:{'os': [], 'pandas': ['read_parquet'], 'numpy': ['median', 'sum', 'max', 'min'], 'sklearn': [], 'matplotlib': ['hist'], 'warnings': [], 'lightgbm': [], 'scipy': []} axis_0: 0, axis_1: 0
trying-feature-engineering.py : ['read_json', 'read_json', 'head', 'info', 'value_counts', 'value_counts', 'astype', 'astype', 'value_counts', 'value_counts', 'to_datetime', 'to_datetime', 'count', 'groupby', 'hist', 'transform', 'transform', 'astype', 'round', 'astype', 'round', 'astype', 'round', 'astype', 'round', 'concat', 'head', 'median', 'groupby', 'map', 'median', 'groupby', 'map', 'unique', 'count', 'groupby', 'count', 'groupby', 'concat', 'head', 'sort_values', 'head', 'sort_values', 'isin', 'get_dummies', 'drop', 'concat', 'head', 'concat', 'mean', 'groupby', 'count', 'groupby', 'head', 'sort_values', 'head', 'merge', 'fillna', 'head', 'keys', 'head', 'head', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'join', 'join', 'apply', 'join', 'join', 'transform'] ['numpy', 'pandas', 'xgboost', 'random', 'matplotlib.pyplot', 'seaborn'] ['sparse', 'LabelEncoder', 'log_loss', 'CountVectorizer', 'check_output', 'LabelEncoder', 'Birch']Dict:{'numpy': ['mean', 'median', 'round', 'unique', 'isin', 'info'], 'pandas': ['read_json', 'concat', 'value_counts', 'get_dummies', 'unique', 'merge', 'to_datetime'], 'scipy': [], 'xgboost': [], 'random': [], 'sklearn': [], 'subprocess': [], 'matplotlib': ['hist'], 'seaborn': []} axis_0: 0, axis_1: 1
titanic-advanced-feature-engineering-walk-through.py : ['join', 'read_csv', 'read_csv', 'concat', 'info', 'describe', 'hist', 'count', 'groupby', 'hist', 'unstack', 'count', 'groupby', 'hist', 'unstack', 'count', 'groupby', 'unstack', 'count', 'groupby', 'hist', 'hist', 'isnull', 'copy', 'hist', 'copy', 'unstack', 'count', 'groupby', 'describe', 'describe', 'apply', 'max', 'value_counts', 'value_counts', 'transform', 'groupby', 'isnull', 'isnull', 'drop', 'apply', 'count', 'groupby', 'unstack', 'count', 'groupby', 'unstack', 'count', 'groupby', 'count', 'groupby', 'unstack', 'count', 'groupby', 'unstack', 'count', 'groupby', 'count', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'apply', 'hist', 'hist', 'hist', 'hist', 'count', 'groupby', 'map', 'hist', 'isnull', 'median', 'isnull', 'median', 'hist', 'hist', 'mean', 'isnull', 'max', 'copy', 'astype', 'get_dummies', 'copy', 'drop', 'copy', 'drop', 'astype', 'to_csv', 'astype', 'to_csv', 'copy', 'copy', 'value_counts', 'value_counts', 'apply', 'map', 'mean', 'groupby', 'fillna', 'apply', 'copy', 'copy', 'value_counts', 'value_counts', 'apply', 'map', 'mean', 'groupby', 'fillna', 'corr', 'astype', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot'] ['StandardScaler', 'LogisticRegression', 'GridSearchCV', 'metrics', 'RandomForestClassifier', 'svm']Dict:{'numpy': ['mean', 'median', 'max', 'info', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'os': [], 'matplotlib': ['hist'], 'sklearn': []} axis_0: 0, axis_1: 0
eda-is-fun.py : ['read_csv', 'info', 'head', 'mean', 'quantile', 'max', 'copy', 'quantile', 'sort_values', 'astype', 'copy', 'copy', 'copy', 'cut', 'boxplot', 'mean', 'quantile', 'max', 'copy', 'quantile', 'mean', 'quantile', 'max', 'copy', 'quantile', 'mean', 'quantile', 'max', 'copy', 'quantile', 'copy', 'cut', 'boxplot', 'mean', 'quantile', 'max', 'mean', 'quantile', 'max', 'copy', 'quantile', 'quantile', 'corr', 'nlargest', 'corr', 'transform', 'groupby', 'copy', 'fillna', 'fillna', 'fillna', 'fillna', 'tail', 'sort_values', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] []Dict:{'numpy': ['mean', 'quantile', 'max', 'info', 'copy'], 'pandas': ['cut', 'read_csv'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'warnings': []} axis_0: 0, axis_1: 0
detect-sleep-states-baseline-solution.py : ['to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'read_csv', 'unique', 'count', 'filter', 'count', 'filter', 'filter', 'filter', 'filter', 'unique', 'abs', 'abs', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'unique', 'filter', 'std', 'filter', 'filter', 'filter', 'filter', 'to_numpy', 'unique', 'std', 'filter', 'std', 'filter', 'diff', 'filter', 'diff', 'mean', 'filter', 'rename', 'reset_index', 'sample', 'filter', 'to_csv'] ['numpy', 'pandas', 'plotly.express', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'gc', 'polars', 'datetime', 'optuna', 'xgboost', 'lightgbm', 'warnings'] ['deepcopy', 'partial', 'combinations', 'groupby', 'tqdm', 'train_test_split', 'StratifiedKFold', 'KFold', 'roc_auc_score', 'accuracy_score', 'log_loss', 'cross_validate', 'RocCurveDisplay', 'confusion_matrix', 'ConfusionMatrixDisplay', 'precision_score', 'average_precision_score', 'LogisticRegression', 'RandomForestClassifier', 'GradientBoostingClassifier', 'Pipeline', 'Pool', 'score']Dict:{'numpy': ['mean', 'abs', 'unique', 'diff', 'std'], 'pandas': ['to_datetime', 'unique', 'read_csv'], 'plotly': [], 'matplotlib': [], 'seaborn': [], 'random': ['sample'], 'os': ['rename'], 'gc': [], 'copy': [], 'functools': [], 'itertools': [], 'tqdm': [], 'polars': ['mean', 'count', 'std', 'read_csv'], 'datetime': [], 'sklearn': [], 'optuna': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'metric': [], 'warnings': []} axis_0: 0, axis_1: 0
graph-transfomer.py : ['read_csv', 'join', 'fillna', 'fillna', 'mod', 'mod', 'fillna', 'fillna', 'mean', 'copy', 'merge', 'mod', 'drop', 'apply', 'reset_index', 'sort_values', 'copy', 'merge', 'copy', 'clip', 'clip', 'clip', 'clip', 'copy', 'concat', 'head', 'astype', 'sum', 'hist', '__init__', 'get', 'get', 'get', 'get', 'get', 'get', 'items', 'items', 'mean', 'mean', 'median', 'mean', 'astype', 'astype', '__init__', 'subtract', 'where', 'divide', 'divide', 'mean', 'astype', 'mean', 'copy', 'astype', 'transform', 'sum', 'transform', 'mean'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'matplotlib', 'datetime', 'os', 're', 'keras', 'random', 'tensorflow', 'numpy', 'tensorflow'] ['tqdm', 'StandardScaler', 'KFold', 'RepeatedKFold', 'IsotonicRegression', 'jit', 'nflrush', 'backend', 'backend', 'Model', 'load_model', 'Input', 'BatchNormalization', 'Activation', 'Add', 'Multiply', 'Dot', 'Embedding', 'Permute', 'Reshape', 'Dropout', 'Lambda', 'Dense', 'Flatten', 'Conv1D', 'Conv2D', 'GlobalMaxPooling1D', 'GlobalAveragePooling1D', 'Concatenate', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau', 'Adam', 'SGD', 'Nadam', 'backend', 'Layer', 'tqdm']Dict:{'numpy': ['mean', 'median', 'sum', 'subtract', 'where', 'mod', 'clip', 'divide', 'copy'], 'pandas': ['concat', 'merge', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'datetime': [], 'tqdm': ['__init__'], 'sklearn': [], 'os': [], 're': [], 'keras': [], 'numba': [], 'kaggle': [], 'random': [], 'tensorflow': ['concat', 'where', 'subtract', 'divide']} axis_0: 2, axis_1: 2
no-ram-fast-feature-engineering-with-big-query.py : ['join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'replace', 'join', 'join', 'join', 'join'] [] []Dict:{} axis_0: 0, axis_1: 0
starter-great-energy-predictor.py : ['sum', 'memory_usage', 'max', 'min', 'all', 'fillna', 'astype', 'fillna', 'sum', 'astype', 'astype', 'astype', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'merge', 'merge', 'to_datetime', 'head', 'head', 'unique', 'sum', 'isna', 'sum', 'isna', 'nunique', 'nunique', 'unique', 'nunique', 'unique', 'nunique', 'nunique', 'sort_values', 'mean', 'groupby', 'mean', 'rolling', 'unique', 'nunique', 'nunique', 'nunique', 'nunique', 'corr', 'describe', 'groupby', 'unique', 'unique', 'hist', 'corr', 'head', 'unique', 'head', 'head', 'head', 'unique', 'unique', 'unique', 'head', 'head', 'to_csv', 'drop', 'head', 'drop', 'head', 'head', 'min', 'max', 'min', 'max', 'sort_values', 'read_csv', 'read_csv', 'merge', 'read_csv', 'drop', 'merge', 'head', 'transform', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'read_csv', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'seaborn', 'matplotlib.pyplot', 'matplotlib.pyplot', 'gc', 'lightgbm', 'math', 'warnings', 'matplotlib.pyplot'] ['LabelEncoder', 'KFold', 'mean_squared_error', 'mean_squared_log_error', 'tqdm_notebook', 'tqdm']Dict:{'numpy': ['mean', 'max', 'sum', 'all', 'min', 'unique'], 'pandas': ['isna', 'read_csv', 'unique', 'merge', 'to_datetime'], 'os': [], 'seaborn': [], 'matplotlib': ['hist'], 'gc': [], 'sklearn': [], 'lightgbm': [], 'math': [], 'tqdm': [], 'warnings': []} axis_0: 0, axis_1: 0
skopt-for-lightgbm.py : ['read_csv', 'read_csv', 'drop', 'drop', 'select_dtypes', 'astype', 'astype', 'rename', 'concat', 'apply', 'unique', 'apply', 'unique', 'unique', 'unique', 'rename', 'concat', 'sum', 'isna', 'sum', 'isna', 'hist', 'astype', 'unique', 'astype', 'map', 'astype', 'map', 'rename', 'concat', 'sum', 'isna', 'sum', 'isna', 'to_csv'] ['numpy', 'pandas', 'pprint', 'joblib', 'warnings', 'lightgbm', 'seaborn'] ['time', 'StratifiedKFold', 'roc_auc_score', 'make_scorer', 'BayesSearchCV', 'DeadlineStopper', 'DeltaYStopper', 'Real', 'Categorical', 'Integer', 'pyplot']Dict:{'numpy': ['sum', 'unique'], 'pandas': ['isna', 'concat', 'unique', 'read_csv'], 'time': [], 'pprint': [], 'joblib': [], 'warnings': [], 'lightgbm': [], 'sklearn': [], 'skopt': [], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 0
spaceship-titanic.py : ['join', 'read_csv', 'join', 'head', 'read_csv', 'join', 'head', 'info', 'describe', 'any', 'isna', 'sort_values', 'sum', 'isna', 'count', 'isna', 'sort_values', 'sum', 'isna', 'concat', 'any', 'isna', 'sum', 'isna', 'melt', 'isna', 'any', 'isna', 'sum', 'isna', 'melt', 'isna', 'apply', 'astype', 'mode', 'to_numpy', 'isin', 'value_counts', 'value_counts', 'unique', 'apply', 'astype', 'mode', 'to_numpy', 'isin', 'value_counts', 'value_counts', 'unique', 'head', 'head', 'head', 'apply', 'all', 'notnull', 'apply', 'all', 'notnull', 'apply', 'all', 'notnull', 'apply', 'all', 'notnull', 'apply', 'all', 'notnull', 'apply', 'all', 'notnull', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'head', 'head', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'fillna', 'median', 'fillna', 'median', 'fillna', 'value_counts', 'fillna', 'value_counts', 'select_dtypes', 'unique', 'corr', 'head', 'head', 'transform', 'astype', 'astype', 'astype', 'transform', 'transform', 'head', 'head', 'head', 'corr', 'sort_values', 'map', 'head', 'to_csv'] ['os', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.express', 'warnings'] ['colored', 'train_test_split', 'GridSearchCV', 'accuracy_score', 'LabelEncoder', 'MinMaxScaler', 'StandardScaler', 'LinearSVC', 'SVC', 'DecisionTreeClassifier', 'KNeighborsClassifier', 'CatBoostClassifier', 'RidgeClassifier', 'LogisticRegression', 'XGBClassifier', 'LGBMClassifier', 'RandomForestClassifier', 'VotingClassifier', 'BaggingClassifier', 'GradientBoostingClassifier']Dict:{'os': [], 'numpy': ['median', 'any', 'sum', 'all', 'unique', 'isin', 'info'], 'pandas': ['isna', 'read_csv', 'melt', 'concat', 'value_counts', 'unique', 'notnull'], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'termcolor': [], 'warnings': [], 'sklearn': ['apply'], 'catboost': [], 'xgboost': ['apply'], 'lightgbm': []} axis_0: 0, axis_1: 13
commonlit-summary-eda.py : ['join', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'apply', 'apply', 'apply', 'apply', 'sub', 'transform', 'transform', 'transform', 'apply', 'sub', 'transform', 'to_csv'] ['numpy', 'pandas', 'os', 'seaborn', 'matplotlib.pyplot', 'nltk', 're'] ['word_tokenize', 'CountVectorizer', 'train_test_split', 'RobustScaler', 'LinearRegression', 'mean_squared_error']Dict:{'numpy': [], 'pandas': ['read_csv'], 'os': [], 'seaborn': [], 'matplotlib': [], 'nltk': [], '#': [], 'Natural': [], 'Language': [], 'Toolkit': [], 're': ['sub'], '#Regular': [], 'expressions': [], 'for': [], 'filtering': [], 'sklearn': []} axis_0: 0, axis_1: 2
mutual-information-feature-selection.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'head', 'copy', 'reset_index', 'drop', 'concat', 'pivot_table', 'reset_index', 'median', 'groupby', 'fillna', 'reset_index', 'fillna', 'merge', 'fillna', 'merge', 'merge', 'drop', 'head', 'concat', 'where', 'fillna', 'shift', 'groupby', 'fillna', 'shift', 'groupby', 'fillna', 'shift', 'groupby', 'fillna', 'shift', 'groupby', 'cumsum', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'fillna', 'mean', 'rolling', 'fillna', 'mean', 'rolling', 'fillna', 'mean', 'rolling', 'copy', 'drop', 'pop', 'sum', 'isna', 'sum', 'isna', 'sort_values', 'head', 'sort_values'] ['pandas', 'numpy', 'glob', 'matplotlib.pyplot', 'seaborn'] ['KMeans', 'mutual_info_classif']Dict:{'pandas': ['isna', 'read_csv', 'pivot_table', 'concat', 'merge'], 'numpy': ['mean', 'median', 'sum', 'where', 'cumsum', 'copy'], 'glob': [], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 3
house-prices-plotly-pipelines-and-ensembles.py : ['unique', 'read_csv', 'read_csv', 'info', 'head', 'drop', 'drop', 'transpose', 'describe', 'transpose', 'describe', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'drop', 'select_dtypes', 'skew', 'kurtosis', 'skew', 'kurtosis', 'sort_values', 'abs', 'corrwith', 'drop', 'drop', 'corr', 'corr', 'update', 'corr', 'corr', 'corr', 'corr', 'corr', 'drop', 'sort_values', 'abs', 'corr', 'groupby', 'concat', 'drop', 'sort_values', 'abs', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'select_dtypes', 'groupby', 'keys', 'sort_values', 'median', 'drop', 'drop', 'select_dtypes', 'select_dtypes', 'mean', 'std', 'min', 'mean', 'std', 'min', 'mean', 'std', 'min', 'mean', 'std', 'min', 'items', 'to_csv', 'to_csv', 'head', 'to_csv', 'head', 'to_csv', 'head', 'items', 'to_csv', 'corr', 'to_csv', 'head', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.plotly', 'plotly.graph_objs', 'xgboost', 'lightgbm', 'warnings'] ['stats', 'skew', 'sqrt', 'tools', 'init_notebook_mode', 'iplot', 'LabelEncoder', 'OneHotEncoder', 'StandardScaler', 'RobustScaler', 'QuantileTransformer', 'SimpleImputer', 'mean_squared_error', 'GridSearchCV', 'cross_val_score', 'LinearRegression', 'Ridge', 'HuberRegressor', 'Lasso', 'ElasticNet', 'BayesianRidge', 'KernelRidge', 'DecisionTreeRegressor', 'RandomForestRegressor', 'AdaBoostRegressor', 'GradientBoostingRegressor', 'MLPRegressor', 'XGBRegressor', 'LGBMRegressor', 'StackingRegressor', 'check_output', 'skew', 'kurtosis', 'make_pipeline', 'Pipeline', 'ColumnTransformer']Dict:{'numpy': ['transpose', 'mean', 'median', 'abs', 'sum', 'min', 'unique', 'info', 'std'], 'pandas': ['concat', 'unique', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'math': [], 'plotly': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'mlxtend': [], 'warnings': [], 'subprocess': []} axis_0: 0, axis_1: 7
pubg-feature-engineering-lightgbm-explained.py : ['read_csv', 'read_csv', 'dropna', 'value_counts', 'map', 'value_counts', 'map', 'value_counts', 'map', 'value_counts', 'map', 'value_counts', 'agg', 'groupby', 'sum', 'rename', 'join', 'agg', 'groupby', 'sum', 'rename', 'join', 'fillna', 'replace', 'fillna', 'replace', 'count', 'drop', 'drop', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'array', 'agg', 'groupby', 'agg', 'groupby', 'reset_index', 'rank', 'groupby', 'reset_index', 'merge', 'reset_index', 'merge', 'agg', 'groupby', 'reset_index', 'rank', 'groupby', 'merge', 'reset_index', 'merge', 'agg', 'groupby', 'reset_index', 'rank', 'groupby', 'merge', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'copy', 'drop', 'drop', 'drop', 'drop', 'set_index', 'read_csv', 'merge', 'reset_index', 'first', 'groupby', 'rank', 'groupby', 'merge', 'fillna', 'set_index', 'read_csv', 'merge', 'reset_index', 'first', 'groupby', 'rank', 'groupby', 'merge', 'fillna', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'gc'] ['train_test_split', 'LabelEncoder', 'GridSearchCV', 'mean_absolute_error']Dict:{'pandas': ['array', 'merge', 'read_csv', 'value_counts'], 'numpy': ['max', 'sum', 'min', 'array', 'copy'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'lightgbm': [], 'gc': []} axis_0: 0, axis_1: 4
chirrrrrp-welcome-to-my-world.py : ['read_csv', 'read_csv', 'head', 'value_counts', 'value_counts', 'agg', 'groupby', 'boxplot', 'boxplot', 'boxplot', 'unique', 'unique', 'value_counts', 'round', 'astype'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'soundfile', 'librosa', 'librosa.display', 'IPython.display', 'seaborn'] ['Audio']Dict:{'numpy': ['round', 'unique'], 'pandas': ['unique', 'read_csv', 'value_counts'], 'os': [], 'matplotlib': ['boxplot'], 'soundfile': [], 'librosa': [], 'IPython': [], 'seaborn': ['boxplot']} axis_0: 0, axis_1: 0
train-ventilator-lstm-model-part-i.py : [] ['numpy', 'pandas', 'tensorflow', 'gc', 'matplotlib.pyplot', 'matplotlib.pyplot', 'json'] ['keras', '*', '*', 'EarlyStopping', 'ModelCheckpoint', 'LearningRateScheduler', 'ReduceLROnPlateau', 'ExponentialDecay', 'RobustScaler', 'normalize', 'train_test_split', 'KFold', 'mean_absolute_error', 'load']Dict:{'numpy': [], 'pandas': [], 'tensorflow': [], 'gc': [], 'matplotlib': [], 'sklearn': [], 'pickle': [], 'json': []} axis_0: 0, axis_1: 0
tps-mar-22-fe-model-selection.py : ['read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'transform', 'drop', 'drop', 'to_datetime', 'to_datetime', 'unique', 'min', 'max', 'concat', 'reset_index', 'mean', 'groupby', 'drop', 'astype', 'round', 'drop_duplicates', 'concat', 'sort_values', 'drop', 'reset_index', 'astype', 'median', 'groupby', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'min', 'groupby', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'max', 'groupby', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'median', 'groupby', 'rename', 'merge', 'merge', 'copy', 'copy', 'pop', 'transform', 'concat', 'concat', 'drop', 'drop', 'to_datetime', 'to_datetime', 'pop', 'copy', 'copy', 'drop', 'drop', 'drop', 'copy', 'apply', 'groupby', 'astype', 'round', 'merge', 'copy', 'unique', 'median', 'groupby', 'copy', 'unique', 'apply', 'concat', 'rename', 'apply', 'mean', 'copy', 'drop', 'drop', 'drop', 'read_csv', 'read_csv', 'rename', 'copy', 'merge', 'astype', 'round', 'fillna', 'rename', 'drop', 'to_csv', 'copy', 'merge', 'astype', 'round', 'fillna', 'rename', 'drop', 'to_csv', 'read_csv', 'copy', 'quantile', 'groupby', 'quantile', 'groupby', 'copy', 'clip', 'sum', 'sum', 'astype', 'round', 'to_csv'] ['numpy', 'pandas', 'math', 'datetime', 'matplotlib.pyplot', 'matplotlib.ticker', 'seaborn', 'plotly.express', 'plotly', 'plotly.graph_objs', 'random', 'os'] ['init_notebook_mode', 'iplot', 'plot', 'MultiOutputRegressor', 'mean_absolute_error', 'simplefilter', 'LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'LarsCV', 'BayesianRidge', 'KNeighborsRegressor', 'MLPRegressor', 'AdaBoostRegressor', 'BaggingRegressor', 'ExtraTreesRegressor', 'GradientBoostingRegressor', 'HistGradientBoostingRegressor', 'RandomForestRegressor', 'XGBRegressor', 'CatBoostRegressor', 'Pool', 'LGBMRegressor', 'VotingRegressor', 'LabelEncoder', 'gmean', 'hmean', 'mean', 'median', 'PCA', 'FunctionTransformer']Dict:{'numpy': [], 'pandas': ['read_csv', 'concat', 'unique', 'merge', 'to_datetime'], 'math': [], 'datetime': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': ['transform'], 'warnings': [], 'random': [], 'os': ['rename'], 'xgboost': ['apply'], 'catboost': [], 'lightgbm': [], 'scipy': [], '=': [], "['moment',": [], "'median',": [], "'min',": [], "'max',": [], "'morning_avg']": []} axis_0: 2, axis_1: 21
house-price-calculation-methods-for-beginners.py : ['read_csv', 'read_csv', 'describe', 'head', 'head', 'drop', 'corr', 'corr', 'corr', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'corr', 'sort_values', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'drop', 'sum', 'isnull', 'fillna', 'median', 'sum', 'isnull', 'apply', 'sort_values', 'get_dummies', 'head', 'sum', 'isnull', 'concat', 'head', 'mean', 'mean', 'mean', 'mean'] ['numpy', 'pandas', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['check_output', 'ensemble', 'tree', 'linear_model', 'train_test_split', 'cross_val_score', 'r2_score', 'mean_squared_error', 'shuffle', 'stats', 'norm', 'skew', 'skew', 'cross_val_score', 'train_test_split', 'StandardScaler', 'LinearRegression', 'RidgeCV', 'LassoCV', 'ElasticNetCV', 'mean_squared_error', 'make_scorer', 'make_scorer', 'KFold']Dict:{'numpy': ['mean', 'median', 'sum'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'subprocess': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'warnings': [], 'scipy': []} axis_0: 0, axis_1: 1
gpu-xgb-baseline-using-rapids-cudf-train.py : ['read_csv', 'head', 'read_csv', 'to_numeric', 'get', 'to_numeric', 'get', 'head', 'clip', 'shift', 'groupby', 'agg', 'groupby', 'reset_index', 'set_index', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'astype', 'agg', 'groupby', 'drop', 'mean', 'groupby', 'min', 'groupby', 'max', 'groupby', 'astype', 'agg', 'groupby', 'drop', 'mean', 'groupby', 'min', 'groupby', 'max', 'groupby', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'nunique', 'nunique', 'nunique', 'unique', 'copy', 'set_index', 'astype', 'astype', 'astype'] ['cudf', 'numpy', 'matplotlib.pyplot', 'warnings', 'gc', 'pickle'] ['KFold', 'GroupKFold', 'XGBClassifier', 'f1_score', 'tqdm', 'defaultdict', 'combinations']Dict:{'cudf': [], 'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'clip', 'copy'], 'sklearn': [], 'xgboost': [], 'matplotlib': ['get'], 'tqdm': [], 'collections': ['get', 'copy'], 'warnings': [], 'itertools': [], 'gc': [], 'pickle': [], '=': [], '{}': []} axis_0: 1, axis_1: 2
beginner-feature-engineering-modelling.py : ['join', 'read_csv', 'read_csv', 'head', 'info', 'info', 'count', 'count', 'count', 'count', 'describe', 'describe', 'describe', 'describe', 'astype', 'astype', 'astype', 'astype', 'boxplot', 'boxplot', 'boxplot', 'astype', 'astype', 'reset_index', 'groupby', 'astype', 'astype', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'cut', 'astype', 'map', 'corr', 'cut', 'unique', 'map', 'reset_index', 'concat', 'reset_index', 'apply', 'groupby', 'idxmax', 'value_counts', 'sort_values', 'value_counts', 'isna', 'reset_index', 'merge', 'tail', 'isna', 'sum', 'isna', 'sum', 'isna', 'merge', 'fillna', 'merge', 'fillna', 'sum', 'isna', 'sum', 'isna', 'drop', 'drop', 'isna', 'reset_index', 'concat', 'reset_index', 'mean', 'groupby', 'fillna', 'sum', 'isna', 'rename', 'astype', 'round', 'qcut', 'unique', 'qcut', 'qcut', 'unique', 'qcut', 'astype', 'astype', 'drop', 'map', 'map', 'corr', 'unique', 'unique', 'replace', 'replace', 'replace', 'drop', 'drop', 'reset_index', 'apply', 'astype', 'apply', 'apply', 'apply', 'join', 'reset_index', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'sum', 'sort_values', 'corr', 'corr', 'drop', 'drop', 'apply', 'astype', 'apply', 'astype', 'replace', 'replace', 'reset_index', 'concat', 'mode', 'fillna', 'map', 'get_dummies', 'get_dummies', 'drop', 'drop', 'drop', 'sort_values', 'round', 'mean', 'corr', 'astype', 'drop', 'astype', 'astype', 'copy', 'drop', 'transform', 'transform', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'sort_values', 'reset_index', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['f_classif', 'StandardScaler', 'LogisticRegression', 'RandomForestClassifier', 'SVC', 'DecisionTreeClassifier', 'GradientBoostingClassifier', 'classification_report', 'confusion_matrix', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'XGBClassifier', 'LGBMClassifier', 'MLPClassifier', 'accuracy_score']Dict:{'numpy': ['mean', 'sum', 'round', 'unique', 'info', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'cut', 'concat', 'value_counts', 'get_dummies', 'unique', 'qcut', 'merge'], 'os': ['rename', 'replace'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'warnings': [], 'sklearn': [], 'xgboost': ['apply'], 'lightgbm': []} axis_0: 0, axis_1: 3
12th-place-solution.py : ['sum', 'abs', 'abs', 'abs', 'join', 'join', 'join', 'read_csv', 'read_csv', 'concat', 'rename', 'rename', 'rename', 'rename', 'astype', 'apply', 'set_index', 'copy', 'reset_index', 'sub', 'sub', 'count', 'count', 'read_csv', 'read_csv', 'reset_index', 'concat', 'reset_index', 'agg', 'groupby', 'reset_index', 'abs', 'reset_index', 'concat', 'drop', 'round', 'reset_index', 'drop', 'abs', 'reset_index', 'drop', 'keys', 'array', 'keys', 'reset_index', 'merge', 'reset_index', 'set_index', 'fillna', 'concat', 'array', 'keys', 'nunique', 'concat', 'array', 'keys', 'reset_index', 'merge', 'reset_index', 'set_index', 'fillna', 'concat', 'array', 'keys', 'nunique', 'concat', 'keys', 'pivot_table', 'concat', 'fillna', 'max', 'reset_index', 'drop', 'items', 'clip', 'items', 'clip', 'items', 'clip', 'concat', 'reset_index', 'concat', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'astype', 'apply', 'unique', 'unique', 'fillna', 'keys', 'update', 'reset_index', 'concat', 'to_csv', 'head', 'read_csv', 'fillna', 'reset_index', 'iterrows', 'concat', 'read_csv', 'merge', 'rename', 'value_counts', 'drop_duplicates', 'read_csv', 'min', 'groupby', 'reset_index', 'iterrows', 'merge', 'head', 'copy', 'isnull', 'fillna', 'copy', 'copy', 'mean', 'read_csv', 'head', 'copy', 'copy', 'copy', 'mean', 'astype', 'apply', 'groupby', 'fillna', 'max', 'rank', 'reset_index', 'nunique', 'groupby', 'items', 'concat', 'reset_index', 'agg', 'groupby', 'pivot', 'reset_index', 'astype', 'drop', 'set_index', 'to_csv', 'unique', 'reset_index', 'agg', 'groupby', 'sort_values', 'astype', 'astype', 'cut', 'mean', 'groupby', 'sum', 'read_csv', 'read_csv', 'fillna', 'fillna', 'concat', 'read_csv', 'merge', 'rename', 'abs', 'abs', 'abs', 'clip', 'round', 'copy', 'copy', 'rename', 'rename', 'merge', 'rename', 'rename', 'round', 'astype', 'round', 'astype', 'copy', 'copy', 'copy', 'copy', 'isnull', 'copy', 'copy', 'rename', 'round', 'apply', 'astype', 'apply', 'copy', 'isin', 'astype', 'apply', 'astype', 'apply', 'astype', 'astype', 'apply', 'unique', 'unique', 'fillna', 'keys', 'update', 'iterrows', 'keys', 'concat', 'mean', 'mean', 'fillna', 'apply', 'round', 'mean', 'concat', 'rank', 'set_index', 'items', 'concat', 'head', 'read_csv', 'head'] ['os', 'sys', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'amp_pd_peptide', 'pickle', 're', 'warnings', 'lightgbm', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['Path', 'tqdm', 'dataclass', 'Optional', 'Dict', 'List', 'Sequence', 'Tuple', 'Counter', 'molecular_weight', 'Dict', 'StratifiedGroupKFold', 'GroupKFold', 'accuracy_score', 'compute_sample_weight', 'minimize']Dict:{'os': ['rename'], 'sys': [], 'pathlib': ['rename'], 'numpy': ['mean', 'max', 'abs', 'sum', 'round', 'min', 'unique', 'clip', 'isin', 'array', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'pivot_table', 'concat', 'value_counts', 'unique', 'array', 'merge', 'pivot'], 'matplotlib': [], 'seaborn': [], 'amp_pd_peptide': [], 'pickle': [], 'tqdm': ['update'], 'dataclasses': [], 'typing': ['items', 'keys', 'update', 'copy'], 're': ['sub'], 'collections': ['items', 'keys', 'update', 'copy'], 'Bio': [], 'warnings': [], 'sklearn': [], 'lightgbm': [], '=': [], 'pd': [], '"target",': [], '"feature",': [], '"importance"])': [], 'scipy': []} axis_0: 3, axis_1: 16
advanced-feature-engineering.py : ['join', 'read_csv', 'head', 'quantile', 'quantile', 'any', 'quantile', 'quantile', 'any', 'nunique', 'nunique', 'head', 'boxplot', 'boxplot', 'select_dtypes', 'dropna', 'head', 'describe', 'drop', 'array', 'array', 'array', 'array', 'any', 'isnull', 'sum', 'isnull', 'sum', 'notnull', 'sum', 'sum', 'isnull', 'any', 'isnull', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'concat', 'round', 'read_csv', 'any', 'isnull', 'dropna', 'fillna', 'fillna', 'mean', 'fillna', 'median', 'head', 'apply', 'fillna', 'mean', 'apply', 'fillna', 'mean', 'sort_values', 'sum', 'isnull', 'fillna', 'mode', 'sum', 'isnull', 'fillna', 'mode', 'fillna', 'apply', 'unique', 'fillna', 'mode', 'sum', 'isnull', 'apply', 'unique', 'fillna', 'mode', 'transform', 'read_csv', 'sum', 'isnull', 'fillna', 'transform', 'groupby', 'read_csv', 'get_dummies', 'head', 'head', 'head', 'head', 'isnull', 'copy', 'where', 'isnull', 'mean', 'groupby', 'count', 'groupby', 'read_csv', 'head', 'sum', 'isnull', 'fillna', 'transform', 'groupby', 'nunique', 'head', 'get_dummies', 'nunique', 'head', 'read_csv', 'value_counts', 'value_counts', 'value_counts', 'mean', 'groupby', 'head', 'copy', 'any', 'value_counts', 'value_counts', 'where', 'isin', 'read_csv', 'head', 'head', 'head', 'head', 'astype', 'notnull', 'agg', 'groupby', 'sum', 'sum', 'head', 'agg', 'groupby', 'sum', 'sum', 'apply', 'agg', 'groupby', 'agg', 'groupby', 'head', 'read_csv', 'astype', 'notnull', 'apply', 'apply', 'head', 'head', 'drop', 'drop', 'head', 'fillna', 'transform', 'groupby', 'apply', 'unique', 'fillna', 'mode', 'nunique', 'value_counts', 'nunique', 'head', 'head', 'any', 'value_counts', 'any', 'value_counts', 'nunique', 'any', 'value_counts', 'head', 'head', 'tail', 'drop'] ['numpy', 'pandas', 'seaborn', 'missingno', 'os', 'os'] ['pyplot', 'accuracy_score', 'train_test_split', 'LocalOutlierFactor', 'MinMaxScaler', 'LabelEncoder', 'StandardScaler', 'RobustScaler', 'SimpleImputer', 'KNNImputer', 'proportions_ztest', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'median', 'quantile', 'any', 'sum', 'where', 'round', 'unique', 'isin', 'array', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull', 'array'], 'seaborn': ['boxplot'], 'matplotlib': [], 'missingno': [], 'os': [], 'sklearn': ['apply'], 'statsmodels': []} axis_0: 7, axis_1: 5
imaterialist-furniture-data-image-exploration.py : ['read_json', 'read_json', 'read_json', 'map', 'map', 'map', 'drop', 'head', 'reset_index', 'value_counts', 'astype', 'join', 'head'] ['matplotlib.pyplot', 'seaborn', 'pandas'] ['HTML', 'Image']Dict:{'IPython': [], 'matplotlib': [], 'seaborn': [], 'pandas': ['read_json', 'value_counts']} axis_0: 0, axis_1: 0
the-mediocre-man-teaming-up-chatgpt.py : ['join', 'read_csv', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'os'] []Dict:{'numpy': [], 'pandas': ['read_csv'], 'os': []} axis_0: 0, axis_1: 0
spaceship-titanic-eda-xgboost-80.py : ['read_csv', 'read_csv', 'head', 'head', 'rename', 'replace', 'astype', 'replace', 'astype', 'replace', 'info', 'describe', 'round', 'mean', 'describe', 'sum', 'isnull', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'fillna', 'median', 'fillna', 'median', 'fillna', 'value_counts', 'fillna', 'value_counts', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'select_dtypes', 'select_dtypes', 'value_counts', 'value_counts', 'corr', 'hist', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'corr', 'crosstab', 'crosstab', 'crosstab', 'select_dtypes', 'groupby', 'head', 'items', 'select_dtypes', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'duplicated', 'duplicated', 'apply', 'apply', 'drop', 'get_dummies', 'head', 'head', 'transform', 'transform', 'head', 'astype', 'replace', 'astype', 'replace', 'head', 'drop', 'get_dummies', 'map', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib', 'matplotlib.pyplot', 'missingno', 'random', 'nltk', 'warnings'] ['stats', 'names', 'NaiveBayesClassifier', 'train_test_split', 'GridSearchCV', 'cross_val_score', 'confusion_matrix', 'accuracy_score', 'classification_report', 'roc_auc_score', 'roc_curve', 'plot_confusion_matrix', 'StandardScaler', 'MinMaxScaler', 'LabelEncoder', 'Counter', 'DecisionTreeClassifier', 'RandomForestClassifier', 'KNeighborsClassifier', 'SVC', 'MLPClassifier', 'XGBClassifier', 'set_config', 'AutoViz_Class']Dict:{'numpy': ['mean', 'median', 'sum', 'round', 'info'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'crosstab'], 'seaborn': [], 'scipy': ['describe'], 'matplotlib': ['hist'], 'missingno': [], 'random': [], 'nltk': [], 'sklearn': [], 'collections': ['items'], 'xgboost': ['apply'], 'warnings': [], 'autoviz': []} axis_0: 0, axis_1: 0
avoid-overfitting-adversarial-validation.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'concat', 'fillna', 'add_prefix', 'concat', 'drop', 'head', 'pop', 'pop', 'array', 'sum', 'mean', 'std', 'sort_values', 'value_counts', 'value_counts'] ['numpy', 'pandas', 'scipy', 'lightgbm', 'os', 'glob', 'json', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['KFold', 'StratifiedKFold', 'Counter', 'partial', 'sqrt', 'cohen_kappa_score', 'mean_squared_error', 'confusion_matrix', 'combinations', 'LabelEncoder', 'TfidfVectorizer', 'TruncatedSVD', 'mean_squared_error', 'tqdm']Dict:{'sklearn': [], 'numpy': ['mean', 'std', 'sum', 'array'], 'pandas': ['concat', 'array', 'read_csv', 'value_counts'], 'scipy': [], 'collections': ['pop'], 'functools': [], 'math': [], 'lightgbm': [], 'os': [], 'itertools': [], 'glob': [], 'json': [], 'tqdm': [], 'matplotlib': [], 'seaborn': [], 'warnings': [], '=': [], '[]': [], 'np': [], 'pd': [], 'ascending=False,': [], 'inplace=True)': []} axis_0: 3, axis_1: 1
stanza-inltk-indic-nlp.py : ['join', 'read_csv', 'head', 'join', 'to_dict'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'sys', 'stanza', 'stanza', 'stanza', 'stanza', 'stanza'] ['Counter', 'STOP_WORDS', 'Tamil', 'WordCloud', 'STOP_WORDS', 'setup', 'tokenize', 'get_similar_sentences', 'get_embedding_vectors', 'get_sentence_similarity', 'common', 'sentence_tokenize', 'UnicodeIndicTransliterator', '*', 'Document']Dict:{'numpy': [], 'pandas': ['read_csv'], 'os': [], 'collections': [], 'spacy': [], 'wordcloud': [], 'matplotlib': [], 'inltk': [], 'sys': [], 'indicnlp': [], 'stanza': []} axis_0: 0, axis_1: 0
microsoft-malware-detection-eda-xgboost.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'items', 'info', 'describe', 'nunique', 'sum', 'isnull', 'value_counts', 'sort_values', 'sum', 'isnull', 'value_counts', 'sum', 'memory_usage', 'head', 'value_counts', 'value_counts', 'nunique', 'transpose', 'sample', 'sample', 'sample', 'head', 'value_counts', 'head', 'value_counts', 'head', 'sort_values', 'unstack', 'count', 'groupby', 'isnull', 'isnull', 'head', 'value_counts', 'min', 'max', 'sum', 'isnull', 'nunique', 'nunique', 'mean', 'var', 'nunique', 'dropna', 'astype', 'dropna', 'astype', 'dropna', 'dropna', 'dropna', 'corr', 'bool', 'drop_duplicates', 'unstack', 'sort_values', 'sort_values', 'items', 'read_csv', 'head', 'drop', 'drop', 'reset_index', 'mode', 'where', 'isnull', 'mode', 'where', 'isnull', 'concat', 'head', 'tail', 'drop', 'drop', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'time', 'gc', 'warnings', 'scikitplot', 'warnings', 'time', 'xgboost', 'scikitplot'] ['accuracy_score', 'precision_score', 'recall_score', 'f1_score', 'r2_score', 'LogisticRegression', 'classification_report', 'LabelEncoder', 'OneHotEncoder', 'train_test_split', 'accuracy_score', 'precision_score', 'recall_score', 'f1_score', 'classification_report', 'roc_auc_score', 'confusion_matrix']Dict:{'numpy': ['transpose', 'mean', 'max', 'var', 'sum', 'where', 'min', 'info'], 'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'os': [], 'matplotlib': [], 'seaborn': [], 'time': [], 'gc': [], 'sklearn': [], 'xgboost': [], 'scikitplot': []} axis_0: 1, axis_1: 3
complete-baseline-code-with-various-ml-model.py : ['read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'head', 'to_datetime', 'drop', 'set_index', 'set_index', 'pivot', 'mean', 'mean', 'rolling', 'join', 'mean', 'ewm', 'join', 'shift', 'pct_change', 'head', 'shift', 'groupby', 'bfill', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'head', 'shift', 'groupby', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'fillna', 'array', 'astype', 'join', 'sum', 'abs', 'abs', 'abs', 'mean', 'mean'] ['pandas', 'matplotlib.pyplot', 'numpy', 'plotly.figure_factory', 'geopandas', 'shapely', 'warnings', 'pandas', 'numpy', 'seaborn', 'xgboost', 'lightgbm', 'matplotlib.pyplot'] ['tqdm', 'LinearRegression', 'ElasticNet', 'Lasso', 'Ridge', 'DecisionTreeRegressor', 'RandomForestRegressor', 'LabelEncoder', 'TimeSeriesSplit', 'mean_squared_error', 'TimeSeriesSplit', 'Patch', 'KFold', 'ShuffleSplit', 'StratifiedKFold', 'StratifiedShuffleSplit', 'TimeSeriesSplit', 'TimeSeriesSplit']Dict:{'pandas': ['to_datetime', 'read_csv', 'isnull', 'concat', 'array', 'merge', 'pivot'], 'matplotlib': [], 'numpy': ['transpose', 'mean', 'abs', 'sum', 'array'], 'plotly': [], 'geopandas': [], 'shapely': [], 'warnings': [], 'seaborn': [], 'tqdm': [], 'sklearn': [], 'xgboost': [], 'lightgbm': []} axis_0: 1, axis_1: 1
6-ways-for-feature-selection.py : ['read_csv', 'sample', 'sample', 'sort_values', 'concat', 'get_dummies', 'drop', 'abs', 'sum', 'sort_values', 'head'] ['pandas', 'numpy', 'gc', 'warnings'] ['Imputer', 'SelectKBest', 'chi2', 'MinMaxScaler', 'RFE', 'LogisticRegression', 'SelectFromModel', 'LogisticRegression', 'SelectFromModel', 'RandomForestClassifier', 'SelectFromModel', 'LGBMClassifier']Dict:{'pandas': ['concat', 'get_dummies', 'read_csv'], 'numpy': ['abs', 'sum'], 'gc': [], 'warnings': [], 'sklearn': [], 'lightgbm': []} axis_0: 1, axis_1: 2
dsb-2019-simple-lgbm-using-aggregated-data.py : ['copy', 'copy', 'pivot', 'reset_index', 'agg', 'groupby', 'mean', 'sum', 'std', 'isin', 'unique', 'reset_index', 'max', 'groupby', 'drop', 'sum', 'groupby', 'get_dummies', 'drop', 'agg', 'groupby', 'sum', 'mean', 'std', 'min', 'max', 'fillna', 'join', 'join', 'join', 'unique', 'value_counts', 'apply', 'get_dummies', 'join', 'drop', 'set_index', 'drop', 'apply', 'groupby', 'reset_index', 'get_dummies', 'join', 'set_index', 'head', 'head', 'get', 'mean', 'drop', 'drop', 'to_csv', 'hist'] ['os', 'numpy', 'matplotlib.pyplot', 'pandas', 'lightgbm', 'scipy'] ['pad_sequences', 'train_test_split', 'LogisticRegression', 'LinearSVC', 'classification_report', 'KFold', 'tqdm']Dict:{'os': [], 'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'isin', 'std', 'copy'], 'matplotlib': ['get', 'hist'], 'pandas': ['get_dummies', 'pivot', 'unique', 'value_counts'], 'lightgbm': [], 'scipy': [], 'tensorflow': [], 'sklearn': [], 'tqdm': []} axis_0: 1, axis_1: 1
beginner-eda-with-feature-eng-and-blending-models.py : ['read_csv', 'read_csv', 'head', 'head', 'describe', 'describe', 'drop', 'drop', 'reset_index', 'drop', 'corr', 'corr', 'reset_index', 'concat', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'concat', 'replace', 'replace', 'replace', 'mode', 'apply', 'groupby', 'fillna', 'mode', 'apply', 'groupby', 'fillna', 'median', 'astype', 'astype', 'astype', 'isin', 'value_counts', 'value_counts', 'select_dtypes', 'sort_values', 'median', 'groupby', 'boxplot', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'select_dtypes', 'join', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'dropna', 'drop', 'join', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'abs', 'sort_values', 'apply', 'drop', 'get_dummies', 'sum', 'sum', 'isna', 'sample', 'describe', 'corrwith', 'join', 'join', 'abs', 'sort_values', 'fillna', 'mean', 'boxplot', 'join', 'join', 'mean', 'mean', 'std', 'mean', 'sort_values', 'read_csv', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'matplotlib.gridspec', 'warnings'] ['datetime', 'stats', 'skew', 'boxcox_normmax', 'norm', 'boxcox1p', 'MaxNLocator', 'cross_val_score', 'KFold', 'cross_validate', 'RobustScaler', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'TweedieRegressor', 'enable_hist_gradient_boosting', 'GradientBoostingRegressor', 'HistGradientBoostingRegressor', 'SVR', 'make_pipeline', 'mean_squared_error', 'XGBRegressor', 'LGBMRegressor', 'StackingCVRegressor']Dict:{'numpy': ['mean', 'median', 'abs', 'sum', 'isin', 'std'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': [], 'seaborn': ['boxplot'], 'datetime': ['replace'], 'scipy': [], 'warnings': [], 'sklearn': [], 'xgboost': ['apply'], 'lightgbm': [], 'mlxtend': []} axis_0: 0, axis_1: 5
ensemble-voting-on-titanic.py : ['fillna', 'mode', 'fillna', 'mean', 'fillna', 'min', 'drop', 'astype', 'cut', 'replace', 'transform', 'apply', 'replace', 'apply', 'replace', 'drop', 'read_csv', 'read_csv', 'info', 'hist', 'corr', 'drop', 'to_csv'] ['re', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'numpy'] ['train_test_split', 'preprocessing', 'VotingClassifier', 'LogisticRegression', 'RandomForestClassifier', 'KNeighborsClassifier', 'StandardScaler', 'train_test_split', 'XGBClassifier', 'classification_report', 'metrics']Dict:{'re': [], 'pandas': ['cut', 'read_csv'], 'numpy': ['mean', 'info', 'min'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 3
tps-2022-10-fastai-with-multistart-and-tta.py : ['unique', 'sample', 'to_numpy', 'query', 'to_numpy', 'query', 'to_numpy', 'query', 'to_numpy', 'query', 'sample', 'sample', 'to_numpy', 'to_numpy', 'to_numpy', 'read_csv', 'sum', 'array', 'to_csv', 'head'] ['random', 'numpy', 'pandas', 'gc', 'fastai.losses'] ['Path', '*']Dict:{'random': ['sample'], 'numpy': ['array', 'sum', 'unique'], 'pandas': ['array', 'unique', 'read_csv'], 'gc': [], 'pathlib': [], 'fastai': []} axis_0: 0, axis_1: 0
g2net-searching-the-sky-pytorch-effnet-w-meta.py : ['update', 'read_csv', 'sum', 'isna', 'head', 'value_counts', 'merge', 'head', 'mean', 'boxplot', 'mean', 'boxplot', 'astype', 'transpose', 'sample', 'sample', 'max', 'squeeze', 'sample', 'sample', 'mean', 'std', 'var', 'min', 'max', 'mode', 'read_csv', 'head', 'mean', 'boxplot', 'reset_index', 'sort_values', 'reset_index', 'sort_values', 'reset_index', 'concat', 'sort_values', 'read_csv', 'test', 'max', 'squeeze', 'transpose', 'array', 'test', '__init__', 'update', 'sample', 'sample', 'update', 'mean', 'eval', 'mean', 'sample', 'read_csv', 'head', 'eval', 'squeeze', 'squeeze', 'squeeze', 'head', 'read_csv', 'head', 'read_csv', 'to_csv'] ['os', 're', 'gc', 'wandb', 'time', 'glob', 'pickle', 'warnings', 'pandas', 'numpy', 'seaborn', 'matplotlib', 'matplotlib.patches', 'matplotlib.pyplot', 'matplotlib.image', 'matplotlib.gridspec', 'torch', 'librosa', 'librosa.display', 'random', 'torch', 'torch.nn.functional'] ['HTML', 'tqdm', 'AnnotationBbox', 'OffsetImage', 'text', 'CQT1992v2', 'melspectrogram', 'UserSecretsClient', 'make_classification', 'RandomForestClassifier', 'train_test_split', 'roc_curve', 'roc_auc_score', 'nn', 'Dataset', 'DataLoader', 'Adam', 'Variable', 'GradScaler', 'autocast', 'ReduceLROnPlateau', 'EfficientNet', 'StratifiedKFold', 'train_test_split', 'model_selection']Dict:{'IPython': ['__init__'], 'os': [], 're': [], 'gc': [], 'wandb': [], 'time': [], 'tqdm': ['update', '__init__'], 'glob': [], 'pickle': [], 'warnings': [], 'pandas': ['isna', 'read_csv', 'eval', 'concat', 'value_counts', 'test', 'array', 'merge'], 'numpy': ['transpose', 'mean', 'squeeze', 'max', 'var', 'sum', 'array', 'test', 'min', 'std'], 'seaborn': ['boxplot'], 'matplotlib': ['update', '__init__'], 'pylab': ['__init__'], 'torch': ['__init__'], 'nnAudio': [], 'librosa': [], 'kaggle_secrets': [], 'sklearn': [], 'random': ['sample'], 'efficientnet_pytorch': []} axis_0: 0, axis_1: 0
complete-research-for-icr.py : ['rename', 'reset_index', 'rename', 'reset_index', 'sum', 'isnull', 'fillna', 'sum', 'duplicated', 'replace', 'rename', 'reset_index', 'nunique', 'rename', 'reset_index', 'transpose', 'describe', 'concat', 'head', 'describe', 'copy', 'pop', 'select_dtypes', 'factorize', 'mean', 'sort_values', 'mean', 'sort_values', 'drop', 'drop', 'drop', 'assign', 'max', 'join', 'sort_values', 'sort_values', 'mean', 'mean', 'apply', 'apply', 'apply', 'sort_values', 'copy', 'applymap', 'drop_duplicates', 'read_csv', 'read_csv', 'read_csv', 'merge', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'unique', 'unique', 'replace', 'duplicated', 'sum', 'duplicated', 'sum', 'select_dtypes', 'boxplot', 'to_datetime', 'min', 'max', 'select_dtypes', 'value_counts', 'select_dtypes', 'hist', 'nunique', 'mode', 'head', 'join', 'transform', 'groupby', 'select_dtypes', 'info', 'info', 'dropna', 'reset_index', 'info', 'to_csv', 'head', 'drop', 'drop', 'select_dtypes', 'drop', 'reset_index', 'info', 'info'] ['pandas', 'numpy', 'os', 'json', 'warnings', 'joblib', 'tensorflow_decision_forests', 'matplotlib.pyplot', 'seaborn', 'plotly.graph_objects', 'plotly.io', 'phik', 'optuna'] ['date', 'time', 'datetime', 'time', 'tqdm', 'combinations', 'LinearSegmentedColormap', 'BaseEstimator', 'TransformerMixin', 'mutual_info_classif', 'mutual_info_regression', 'SequentialFeatureSelector', 'SelectKBest', 'f_regression', 'ColumnTransformer', 'make_column_transformer', 'make_column_selector', 'TransformedTargetRegressor', 'StandardScaler', 'OrdinalEncoder', 'OneHotEncoder', 'QuantileTransformer', 'enable_iterative_imputer', 'IterativeImputer', 'train_test_split', 'cross_val_score', 'StratifiedKFold', 'Pipeline', 'make_pipeline', 'Ridge', 'DummyRegressor', 'DummyClassifier', 'XGBRegressor', 'XGBClassifier', 'LinearSVR', 'RandomForestRegressor', 'RandomForestClassifier', 'LGBMRegressor', 'LGBMClassifier', 'CatBoostRegressor', 'CatBoostClassifier', 'mean_squared_error', 'log_loss', 'permutation_importance']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'factorize', 'unique', 'merge', 'to_datetime'], 'numpy': ['transpose', 'mean', 'median', 'max', 'sum', 'min', 'unique', 'info', 'copy'], 'os': ['rename', 'replace'], 'json': [], 'warnings': [], 'joblib': [], 'datetime': ['min', 'max', 'replace'], 'time': [], 'tqdm': [], 'itertools': [], 'tensorflow_decision_forests': [], 'matplotlib': ['copy'], 'seaborn': ['boxplot'], 'plotly': [], 'phik': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'optuna': []} axis_0: 3, axis_1: 9
practicum-feature-engineering-ver-2.py : ['max', 'head', 'count', 'pipe', 'head', 'value_counts', 'join', 'sum', 'groupby', 'join', 'sum', 'groupby', 'join', 'concat', 'head', 'head', 'head'] ['numpy', 'os', 'pandas', 'polars'] ['tqdm']Dict:{'numpy': ['sum', 'max'], 'os': ['pipe'], 'pandas': ['concat', 'value_counts'], 'polars': ['max', 'head', 'sum', 'concat', 'count'], 'tqdm': []} axis_0: 0, axis_1: 0
2nd-place-catboost-simple-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'apply', 'apply', 'apply', 'drop', 'merge', 'transform', 'groupby', 'read_csv', 'read_csv', 'merge', 'merge', 'concat', 'factorize', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'drop', 'drop', 'reset_index', 'drop', 'reset_index', 'drop', 'copy', 'pop', 'to_csv', 'head'] ['optuna', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['XGBRegressor', 'LGBMRegressor', 'CatBoostRegressor', 'train_test_split', 'cross_val_score', 'mean_squared_error', 'PolynomialFeatures', 'mutual_info_regression', 'KNNImputer']Dict:{'optuna': [], 'pandas': ['concat', 'factorize', 'merge', 'read_csv'], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': [], 'sklearn': [], 'matplotlib': [], 'seaborn': []} axis_0: 1, axis_1: 3
eda-and-model-f1-optimization.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'unique', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'keys', 'astype', 'keys', 'transform', 'transform', 'transform', 'transform', 'copy', 'copy', 'copy', 'copy', 'concat', 'astype', 'hist', 'hist', 'items', 'transform', 'transform', 'transform', 'drop', 'drop', 'drop', 'items', 'items', 'items', 'mean', 'std', 'mean', 'transform', 'copy', 'items', 'transform', 'drop', 'rank', 'isin', 'astype', 'mean', 'groupby', 'sort_values', 'keys', 'rename', 'reset_index', 'rename', 'melt', 'transform', 'transform', 'copy', 'copy', 'copy', 'copy', 'concat', 'astype', 'hist', 'items', 'transform', 'transform', 'transform', 'drop', 'drop', 'drop', 'items', 'items', 'items', 'mean', 'std', 'mean', 'transform', 'copy', 'items', 'transform', 'drop', 'rank', 'isin', 'astype', 'mean', 'groupby', 'sort_values', 'keys', 'rename', 'reset_index', 'rename', 'melt', 'abs', 'cut', 'cut', 'cut', 'cut', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'round', 'value_counts', 'unique', 'value_counts', 'astype', 'astype', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'reset_index', 'std', 'rolling', 'groupby', 'ewm', 'apply', 'groupby', 'mean', 'ewm', 'fillna', 'astype', 'astype', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'reset_index', 'std', 'rolling', 'groupby', 'ewm', 'apply', 'groupby', 'mean', 'ewm', 'fillna', 'head', 'hist', 'to_csv', 'astype', 'to_csv'] ['numpy', 'pandas', 'os', 'copy', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'catboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'shap', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 're', 'scipy'] ['hilbert', 'hann', 'convolve', 'tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'f1_score', 'defaultdict', 'Counter', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit', 'RepeatedStratifiedKFold', 'metrics', 'classification_report', 'confusion_matrix', 'linear_model', 'BayesianOptimization', 'HTML', 'OrdinalEncoder', 'List', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'Any', 'product', 'tqdm', 'Parallel', 'delayed', 'BaseEstimator', 'TransformerMixin', 'partial']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'where', 'round', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': ['read_csv', 'melt', 'cut', 'concat', 'value_counts', 'unique'], 'os': ['rename'], 'scipy': [], 'copy': ['copy'], 'matplotlib': ['hist'], 'tqdm': [], 'sklearn': [], 'collections': ['items', 'keys', 'copy'], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'time': [], 'datetime': [], 'gc': [], 'seaborn': [], 'warnings': [], 'bayes_opt': [], 'shap': [], 'IPython': [], 'json': [], 'altair': [], 'category_encoders': [], 'networkx': [], 'typing': [], 'numba': [], 'itertools': [], 're': [], 'joblib': [], 'functools': []} axis_0: 4, axis_1: 9
easy-blending.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'to_csv'] ['numpy', 'pandas', 'os'] []Dict:{'numpy': [], 'pandas': ['read_csv'], 'os': []} axis_0: 0, axis_1: 0
simple-xgboost-model-to-predict-probability.py : ['join', 'read_csv', 'read_csv', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'transform', 'groupby', 'transform', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'reset_index', 'mean', 'rolling', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'reset_index', 'mean', 'rolling', 'groupby', 'get_dummies', 'drop', 'concat', 'drop', 'get_dummies', 'drop', 'concat', 'drop', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'pandas', 'xgboost'] ['train_test_split', 'GridSearchCV', 'LogisticRegression', 'accuracy_score', 'precision_score', 'recall_score', 'f1_score']Dict:{'numpy': ['mean'], 'pandas': ['concat', 'get_dummies', 'read_csv'], 'os': ['replace'], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 2
titanic-survival-prediction-end-to-end-ml-pipeline.py : ['read_csv', 'head', 'read_csv', 'head', 'describe', 'info', 'any', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'array', 'hist', 'map', 'hist', 'map', 'map', 'value_counts', 'boxplot', 'corr', 'corr', 'notnull', 'isnull', 'boxplot', 'fillna', 'describe', 'isnull', 'median', 'fillna', 'unique', 'notnull', 'assign', 'astype', 'map', 'boxplot', 'fillna', 'fillna', 'unique', 'value_counts', 'unique', 'value_counts', 'apply', 'apply', 'cut', 'cut', 'unique', 'apply', 'value_counts', 'value_counts', 'apply', 'value_counts', 'value_counts', 'tail', 'apply', 'to_numeric', 'apply', 'to_numeric', 'isnull', 'fillna', 'median', 'fillna', 'median', 'head', 'dropna', 'notnull', 'isnull', 'isnull', 'dropna', 'transform', 'transform', 'corr', 'mean', 'mean', 'mean', 'std', 'mean', 'mean', 'astype', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 're', 'numpy', 'numpy', 'matplotlib.pyplot'] ['LabelEncoder', 'OneHotEncoder', 'RandomForestRegressor', 'preprocessing', 'LinearRegression', 'KFold', 'cross_validation', 'LogisticRegression', 'cross_val_score', 'ShuffleSplit', 'cross_validation', 'RandomForestClassifier', 'KFold', 'cross_val_predict', 'GradientBoostingClassifier', 'SelectKBest', 'f_classif', 'KFold', 'cross_validation', 'LogisticRegression', 'AdaBoostClassifier', 'VotingClassifier']Dict:{'pandas': ['read_csv', 'isnull', 'cut', 'value_counts', 'to_numeric', 'unique', 'notnull', 'array'], 'numpy': ['mean', 'median', 'any', 'std', 'sum', 'unique', 'info', 'array'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 're': [], 'sklearn': ['transform']} axis_0: 2, axis_1: 0
44-3-spacy-classifier-no-matching.py : ['read_csv', 'read_csv', 'sub', 'join', 'sub', 'to_csv', 'sample', 'iterrows', 'update', 'read_csv', 'drop_duplicates', 'astype', 'iterrows', 'replace', 'replace', 'replace', 'join', 'to_csv'] ['os', 'glob', 'numpy', 'pandas', 're', 'simplejson', 'time', 'spacy', 'random'] ['Parallel', 'delayed', '*', 'displacy', 'minibatch', 'compounding', 'remove_stopwords', 'sent_tokenize']Dict:{'os': ['replace'], 'glob': [], 'numpy': [], 'pandas': ['read_csv'], 're': ['sub'], 'simplejson': [], 'joblib': [], 'typing': [], 'time': [], 'spacy': [], 'random': ['sample'], 'gensim': [], 'nltk': []} axis_0: 0, axis_1: 0
amex-woe-baseline.py : ['astype', 'qcut', 'cut', 'fillna', 'sum', 'groupby', 'count', 'groupby', 'sum', 'groupby', 'sum', 'copy', 'astype', 'cut', 'array', 'replace', 'transform', 'transform', 'reset_index', 'sort_values', 'sort_values', 'concat', 'apply', 'sum', 'cumsum', 'sum', 'sum', 'sort_values', 'concat', 'apply', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'rename', 'mean', 'rename', 'read_csv', 'mean', 'to_csv', 'set_index'] ['numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot'] ['Path', 'BaseEstimator', 'TransformerMixin', 'tqdm_notebook']Dict:{'numpy': ['mean', 'sum', 'array', 'cumsum', 'copy'], 'pandas': ['read_csv', 'cut', 'concat', 'qcut', 'array'], 'pathlib': ['rename', 'replace'], 'matplotlib': [], 'sklearn': [], 'tqdm': []} axis_0: 0, axis_1: 2
titanic-dl-vs-ml-what-is-your-choice.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'concat', 'notnull', 'copy', 'astype', 'isnull', 'fillna', 'get', 'apply', 'replace', 'replace', 'replace', 'replace', 'astype', 'isnull', 'drop', 'qcut', 'replace', 'mean', 'std', 'where', 'transform', 'copy', 'pop', 'melt', 'where', 'get_dummies', 'drop', 'round', 'corr', 'sort_values', 'round', 'corr', 'notnull', 'drop', 'drop', 'astype', 'concat', 'astype', 'to_csv', 'drop', 'astype', 'apply', 'get_dummies', 'drop', 'to_numpy', 'astype', 'to_numpy', 'drop', 'to_numpy', '__init__', 'mean', 'mean', 'mean', 'std', 'mean', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'torch', 'matplotlib', 'matplotlib.pyplot', 'pandas', 're', 'seaborn', 'umap', 'umap.plot', 'warnings', 'plotly.express', 'plotly.express', 'torch', 'torch.nn'] ['IntegratedGradients', 'LayerConductance', 'NeuronConductance', 'stats', 'rcParams', 'accuracy_score', 'precision_score', 'recall_score', 'roc_auc_score', 'f1_score', 'confusion_matrix', 'precision_recall_curve', 'roc_curve', 'ConfusionMatrixDisplay', 'preprocessing', 'RobustScaler', 'KNNImputer', 'QuantileTransformer', 'SimpleImputer', 'PCA', 'UMAP', '*', 'MinMaxScaler']Dict:{'numpy': ['mean', 'where', 'round', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'melt', 'concat', 'get_dummies', 'notnull', 'qcut'], 'os': ['replace'], 'torch': [], 'captum': [], 'matplotlib': ['pop', 'get', '__init__', 'copy'], 'scipy': [], 're': [], 'seaborn': [], 'sklearn': ['transform', '__init__'], 'umap': [], 'warnings': [], 'plotly': [], 'pycaret': []} axis_0: 3, axis_1: 10
moa-prediction-complete-walkthrough-eda-ensemble.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'copy', 'copy', 'head', 'describe', 'head', 'describe', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'hist', 'hist', 'corr', 'corr', 'unstack', 'sort_values', 'reset_index', 'rename', 'reset_index', 'drop', 'drop', 'head', 'corr', 'sum', 'sort_values', 'sum', 'sort_values', 'sum', 'corr', 'sort_values', 'sum', 'sort_values', 'sum', 'corr', 'merge', 'corr', 'corr', 'corr', 'corr', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'concat', 'reset_index', 'concat', 'mean', 'std', 'sum', 'sort_values', 'hist', 'hist', 'transform', 'hist', 'hist', 'transform', 'transform', 'concat', 'concat', 'transform', 'transform', 'concat', 'concat', 'var', 'concat', 'concat', 'copy', 'copy', 'get_dummies', 'get_dummies', 'copy', 'copy', 'get_dummies', 'get_dummies', 'concat', 'concat', 'get_dummies', 'get_dummies', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'concat', 'concat', 'nunique', 'rename', 'drop', 'merge', 'reset_index', 'reset_index', 'drop', 'drop', 'drop', 'drop', 'get_dummies', 'get_dummies', 'eval', '__init__', 'merge', 'drop', '__init__', 'stack', 'mean', 'stack', 'mean', 'read_csv', 'to_csv'] ['sys', 'os', 'copy', 'tqdm', 'pickle', 'random', 'warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'torch', 'torch.optim'] ['MultilabelStratifiedKFold', 'load', 'dump', 'roc_auc_score', 'log_loss', 'PCA', 'StratifiedKFold', 'QuantileTransformer', 'KMeans', 'nn', 'functional', '_WeightedLoss', 'DataLoader', 'Dataset', 'Metric', 'TabNetRegressor', 'KMeans']Dict:{'sys': [], 'iterstrat': [], 'os': ['rename'], 'copy': ['copy'], 'tqdm': ['std'], 'pickle': [], 'random': [], 'warnings': [], 'numpy': ['mean', 'stack', 'var', 'sum', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'eval', 'concat', 'value_counts', 'get_dummies', 'merge'], 'matplotlib': ['hist'], 'seaborn': [], 'lightgbm': [], 'sklearn': [], 'torch': ['__init__'], 'pytorch_tabnet': []} axis_0: 6, axis_1: 18
m5-forecasting-eda-lstm-pytorch-modeling.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'melt', 'merge', 'merge', 'apply', 'head', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'count', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'sort_values', 'sort_values', 'reset_index', 'agg', 'groupby', 'join', 'reset_index', 'agg', 'groupby', 'join', 'isna', 'reset_index', 'agg', 'groupby', 'join', 'nunique', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'join', 'nunique', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'join', 'unique', 'unique', 'unique', 'unique', 'head', 'fillna', 'head', 'to_datetime', 'drop', 'fillna', 'transform', 'shift', 'transform', 'mean', 'rolling', 'shift', 'transform', 'mean', 'rolling', 'shift', 'transform', 'mean', 'rolling', 'shift', 'transform', 'mean', 'rolling', 'shift', 'transform', 'mean', 'rolling', 'shift', 'transform', 'std', 'rolling', 'shift', 'transform', 'std', 'rolling', 'shift', 'fillna', 'unique', 'transform', 'transform', '__getitem__', '__init__', 'eval', 'mean'] ['os', 'gc', 'time', 'math', 'datetime', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.express', 'plotly.graph_objects', 'plotly.figure_factory', 'pywt', 'scipy', 'statsmodels', 'statsmodels.api', 'joblib', 'torch', 'torch.nn', 'torch.nn.functional', 'sklearn', 'warnings'] ['log', 'floor', 'KDTree', 'Path', 'shuffle', 'tqdm', 'colors', 'Normalize', 'make_subplots', 'mad', 'signal', 'Prophet', 'butter', 'deconvolve', 'ARIMA', 'ExponentialSmoothing', 'SimpleExpSmoothing', 'Holt', 'tqdm_notebook', 'preprocessing']Dict:{'os': [], 'gc': [], 'time': [], 'math': ['__init__'], 'datetime': [], 'sklearn': [], 'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'std'], 'pandas': ['isna', 'read_csv', 'eval', 'melt', 'unique', 'merge', 'to_datetime'], 'pathlib': ['__init__'], 'tqdm': ['__init__'], 'seaborn': [], 'matplotlib': ['__init__'], 'plotly': ['__init__'], 'pywt': [], 'statsmodels': [], 'scipy': [], 'fbprophet': [], 'joblib': [], 'torch': [], 'warnings': []} axis_0: 0, axis_1: 0
micro-business-catboost.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'drop', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'transform', 'groupby', 'agg', 'groupby', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'read_csv', 'merge', 'head', 'fillna', 'clip', 'clip', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isnull', 'clip', 'clip', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'read_csv', 'read_csv', 'astype', 'astype', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'set_index', 'join', 'drop', 'copy', 'to_csv', 'read_csv', 'iterrows', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'os', 'lightgbm', 'xgboost', 'catboost', 'lightgbm', 'xgboost', 'catboost'] ['tqdm', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'os': [], 'tqdm': []} axis_0: 0, axis_1: 1
quickstart-simple-feature-engineering-80-acc.py : ['read_csv', 'read_csv', 'head', 'info', 'info', 'count', 'count', 'count', 'count', 'dropna', 'dropna', 'reset_index', 'concat', 'drop', 'describe', 'describe', 'describe', 'describe', 'cut', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'map', 'cut', 'astype', 'map', 'astype', 'apply', 'transform', 'groupby', 'astype', 'apply', 'astype', 'apply', 'astype', 'transform', 'groupby', 'astype', 'idxmax', 'transpose', 'reset_index', 'concat', 'drop', 'mode', 'mode', 'median', 'median', 'median', 'median', 'median', 'median', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'idxmax', 'transpose', 'cut', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'cut', 'astype', 'astype', 'apply', 'transform', 'groupby', 'fillna', 'apply', 'astype', 'apply', 'astype', 'transform', 'groupby', 'head', 'map', 'map', 'drop', 'drop', 'astype', 'get_dummies', 'astype', 'get_dummies', 'drop', 'sort_values', 'round', 'mean', 'corr', 'astype', 'drop', 'astype', 'astype', 'copy', 'transform', 'transform', 'sort_values', 'reset_index', 'sort_values', 'astype', 'to_csv'] ['matplotlib.pyplot', 'numpy', 'pandas', 'seaborn', 'warnings'] ['f_classif', 'StandardScaler', 'LogisticRegression', 'RandomForestClassifier', 'SVC', 'DecisionTreeClassifier', 'GradientBoostingClassifier', 'GridSearchCV', 'classification_report', 'confusion_matrix', 'train_test_split', 'cross_val_score']Dict:{'matplotlib': [], 'numpy': ['transpose', 'mean', 'median', 'round', 'info', 'copy'], 'pandas': ['concat', 'get_dummies', 'cut', 'read_csv'], 'seaborn': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 3
cluster-feature-engineering-tps3e6.py : ['read_csv', 'read_csv', 'read_csv', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'corr', 'corr', 'get_dummies', 'get_dummies', 'corr', 'corr', 'head', 'read_csv', 'read_csv', 'read_csv', 'quantile', 'quantile', 'keys', 'sort_values', 'quantile', 'quantile', 'drop', 'drop', 'apply', 'corr', 'corr'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['KMeans', 'itemgetter']Dict:{'numpy': ['quantile'], 'pandas': ['get_dummies', 'read_csv'], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'operator': []} axis_0: 0, axis_1: 8
deep-learning-keras-ga-revenue-prediction.py : ['to_datetime', 'apply', 'apply', 'apply', 'apply', 'read_csv', 'join', 'apply', 'pop', 'head', 'astype', 'astype', 'astype', 'astype', 'astype', 'agg', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'join', 'drop', 'agg', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'join', 'drop', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'drop', 'drop', 'drop', 'fillna', 'drop', 'drop', 'nunique', 'drop', 'drop', 'count', 'drop', 'drop', 'head', 'get_dummies', 'get_dummies', 'align', 'replace', 'replace', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'head', 'transform', 'transform', 'head', 'add', 'add', 'add', 'reset_index', 'sum', 'groupby', 'to_csv', 'head'] ['os', 'json', 'datetime', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] ['json_normalize', 'mean_squared_error', 'preprocessing', 'train_test_split', 'Sequential', 'Dense', 'Dropout', 'BatchNormalization', 'Activation', 'Dropout', 'optimizers']Dict:{'os': ['replace'], 'json': [], 'datetime': [], 'numpy': ['sum', 'add'], 'pandas': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'keras': []} axis_0: 0, axis_1: 18
openvaccine-eda-feature-engineering-modeling.py : ['join', 'read_json', 'read_json', 'read_csv', 'head', 'head', 'info', 'describe', 'value_counts', 'reset_index', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'pop', 'pop', 'pop', 'astype', 'concat', 'unique', 'pop', 'concat', 'unique', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'drop', 'concat', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'drop', 'concat', 'drop', 'drop', 'drop', 'drop', 'mean', 'mean', 'copy', 'mean', 'drop', 'merge', 'fillna', 'to_csv'] ['numpy', 'pandas', 'os', 'plotly.express', 'tensorflow', 'tensorflow.keras.backend', 'math'] ['Counter', 'Input', 'Dense', 'KFold', 'mean_squared_error']Dict:{'numpy': ['mean', 'info', 'unique', 'copy'], 'pandas': ['read_csv', 'read_json', 'concat', 'value_counts', 'get_dummies', 'unique', 'merge'], 'os': [], 'plotly': [], 'collections': [], 'tensorflow': [], 'sklearn': [], 'math': []} axis_0: 0, axis_1: 11
embeddings-network-malware-0-697-0-773.py : ['read_csv', 'keys', 'read_csv', 'keys', 'sample', 'reset_index', 'read_csv', 'keys', 'read_csv', 'keys', 'concat', 'factorize', 'where', 'max', 'max', 'max', 'max', 'astype', 'astype', 'astype', 'nunique', 'to_dict', 'map', 'value_counts', 'map', 'min', 'max', 'astype', 'reset_index', 'value_counts', 'rename', 'reset_index', 'mean', 'groupby', 'unique', 'merge', 'isna', 'isna', 'mean', 'isna', 'sum', 'map', 'unique', 'isin', 'nunique', 'isin', 'nunique', 'astype', 'apply', 'map', 'map', 'map', 'astype', 'fillna', 'map', 'astype', 'fillna', 'astype', 'std', 'fillna', 'mean', 'nunique', 'unique', 'sum', 'memory_usage', 'sum', 'memory_usage', '__init__', 'keys', 'keys', 'sample', 'sample', 'map', 'map', 'fillna', 'read_csv', 'read_csv', 'to_csv', 'hist', 'value_counts', 'to_dict', 'unique', 'isna', 'mean'] ['pandas', 'numpy', 'os', 'gc', 'math', 'matplotlib.pyplot', 'calendar', 'math'] ['datetime', 'date', 'timedelta', 'callbacks', 'roc_auc_score', 'Model', 'Dense', 'Input', 'concatenate', 'BatchNormalization', 'Activation', 'Dropout', 'Embedding', 'Reshape', 'LearningRateScheduler', 'Adam', 'load_model', 'datetime']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'factorize', 'unique', 'merge'], 'math': [], 'keras': ['__init__'], 'sklearn': ['__init__'], 'datetime': ['min', 'max', '__init__'], 'matplotlib': ['hist'], 'calendar,': []} axis_0: 1, axis_1: 1
riiid-bigquery-xgboost-end-to-end.py : ['get', 'get', 'get', 'astype', 'query', 'join', 'read_csv', 'read_json', 'concat', 'join', 'items', 'items', 'items', 'items', 'items', 'read_csv', 'fillna', 'apply', 'concat', 'to_json', 'items', 'update', 'copy', 'head', 'keys', 'unique', 'items', 'items', 'items', 'head', 'groupby', 'set_index', 'tail', 'groupby', 'set_index', 'isin', 'value_counts', 'count', 'groupby', 'reset_index', 'head', 'groupby', 'count', 'groupby', 'cut', 'reset_index', 'count', 'groupby', 'reset_index', 'apply', 'map', 'items', 'reset_index', 'apply', 'items', 'items', 'unstack', 'set_index', 'reset_index', 'items', 'sort_values', 'set_index', 'set_index', 'reset_index', 'sort_values', 'sort_values', 'items', 'to_pickle', 'update', 'pop'] ['gc', 'json', 'os', 're', 'subprocess', 'sys', 'time', 'ipywidgets', 'numpy', 'pandas', 'plotly', 'plotly.express', 'xgboost', 'pytz', 'sys', 'pandas', 'sys', 'os', 'subprocess'] ['HTML', 'datetime', 'Path', 'storage', 'bigquery', 'SchemaField', 'tqdm', 'drive', 'check_packages', 'Git', 'BQHelper', 'Queries', 'Experiment', 'KaggleApi', 'roc_auc_score', 'MultiLabelBinarizer', 'Path', 'ExtractJobConfig', 'LoadJobConfig', 'SchemaField', 'SourceFormat', 'tqdm']Dict:{'datetime': [], 'gc': [], 'json': [], 'os': [], 'pathlib': [], 're': [], 'subprocess': [], 'sys': [], 'time': [], 'ipywidgets': [], 'google': [], 'numpy': ['isin', 'unique', 'copy'], 'pandas': ['to_pickle', 'read_csv', 'cut', 'read_json', 'concat', 'value_counts', 'unique'], 'tqdm': ['update'], 'plotly': [], 'sklearn': [], 'xgboost': [], 'pytz': []} axis_0: 0, axis_1: 1
ps-s3e23-explore-data-stacking-ensemble.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'any', 'any', 'isnull', 'any', 'any', 'isnull', 'any', 'any', 'isnull', 'head', 'value_counts', 'max', 'value_counts', 'max', 'value_counts', 'boxplot', 'copy', 'corr', 'concat', 'drop_duplicates', 'drop', 'astype', 'drop', 'astype', 'reset_index', 'drop', 'reset_index', 'drop', 'drop', 'reset_index', 'astype', 'drop', 'reset_index', 'head', 'keys', 'array', 'array', 'mean', 'std', 'mean', 'std', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'mean', 'std', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'gc', 'warnings', 'optuna', 'xgboost', 'lightgbm'] ['HTML', 'deepcopy', 'partial', 'RocCurveDisplay', 'confusion_matrix', 'ConfusionMatrixDisplay', 'train_test_split', 'StratifiedKFold', 'KFold', 'roc_auc_score', 'accuracy_score', 'log_loss', 'f1_score', 'precision_score', 'recall_score', 'StandardScaler', 'MinMaxScaler', 'LabelEncoder', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'RandomUnderSampler', 'preprocessing', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'VotingClassifier', 'BalancedRandomForestClassifier', 'KNNImputer', 'Pipeline', 'NuSVC', 'SVC', 'KNeighborsClassifier', 'LogisticRegressionCV', 'LogisticRegression', 'MLPClassifier', 'GaussianProcessClassifier', 'RBF', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool']Dict:{'IPython': [], 'numpy': ['mean', 'any', 'max', 'array', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'array'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'random': [], 'os': [], 'copy': [], 'functools': [], 'gc': [], 'warnings': [], 'sklearn': [], 'category_encoders': [], 'imblearn': [], 'optuna': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 5, axis_1: 4
qc-the-notebook-with-four-lines-of-code.py : ['read_csv', 'read_csv', 'to_datetime', 'astype', 'astype', 'drop', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'to_dict', 'median', 'groupby', 'map', 'map', 'head', 'head', 'round', 'quantile', 'groupby', 'quantile', 'groupby', 'clip', 'value_counts', 'map', 'rename', 'to_csv', 'head', 'join', 'read_csv', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'unique', 'date_range', 'describe', 'merge', 'unique', 'rename', 'to_datetime', 'isna', 'sum', 'sum', 'isna', 'copy', 'merge', 'head', 'copy', 'interpolate', 'isna', 'sum', 'sum', 'isna', 'drop'] ['numpy', 'pandas', 'os', 'plotly.graph_objects', 'seaborn', 'plotly.express', 'matplotlib.pyplot', 'tensorflow', 'tensorboard', 'pytorch_lightning'] ['full_suite', 'Dataset', 'venn2_unweighted', 'make_subplots', 'LabelEncoder', 'TimeSeries', 'ExponentialSmoothing', 'TimeSeries', 'ExponentialSmoothing', 'NBEATSModel', 'mape', 'r2_score']Dict:{'deepchecks': [], 'numpy': ['median', 'quantile', 'sum', 'round', 'unique', 'clip', 'copy'], 'pandas': ['isna', 'read_csv', 'date_range', 'value_counts', 'unique', 'merge', 'to_datetime'], 'os': ['rename'], 'matplotlib_venn': [], 'plotly': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'tensorflow': ['round', 'unique'], 'tensorboard': [], 'pytorch_lightning': [], 'darts': []} axis_0: 0, axis_1: 2
gpyopt-hyperparameter-optimisation-gpu-lgbm.py : ['isin', 'value_counts', 'value_counts', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'copy', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'map', 'value_counts', 'map', 'map', 'map', 'map', 'map', 'map', 'concat', 'drop', 'assign', 'astype', 'astype', 'map', 'value_counts', 'apply', 'assign', 'sum', 'isnull', 'sum', 'astype', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'mean', 'sum', 'astype', 'astype', 'astype', 'map', 'notnull', 'value_counts', 'value_counts', 'count', 'resample', 'set_index', 'mean', 'resample', 'set_index', 'mean', 'resample', 'set_index', 'mean', 'resample', 'set_index', 'mean', 'resample', 'set_index', 'mean', 'resample', 'set_index', 'value_counts', 'array', 'value_counts', 'to_csv', 'rename', 'reset_index', 'concat', 'reset_index', 'drop', 'reset_index', 'head', 'mean', 'min', 'max', 'min', 'max', 'corr', 'mean', 'pop', 'pop', 'concat', 'round', 'round', 'round', 'round', 'round', 'mean', 'mean', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'max', 'product', 'round', 'round', 'std', 'sort_values', 'mean', 'groupby', 'cumsum', 'reset_index', 'sort_values', 'sum', 'corr', 'mean', 'concat', 'to_csv'] ['lightgbm', 'pandas', 'GPyOpt', 'time', 'os', 'gc', 'pprint', 'datetime', 'csv', 'random', 'numpy', 'matplotlib.pyplot', 'seaborn', 'itertools', 'warnings'] ['BayesianOptimization', 'contextmanager', 'json_normalize', 'combinations', 'KFold', 'train_test_split', 'TimeSeriesSplit', 'preprocessing', 'metrics', 'precision_score', 'recall_score', 'confusion_matrix', 'accuracy_score', 'roc_auc_score', 'f1_score', 'roc_curve', 'auc', 'precision_recall_curve', 'interp']Dict:{'lightgbm': [], 'pandas': [], 'GPyOpt': [], 'time': [], 'os': ['rename'], 'contextlib': [], 'gc;': [], 'gc': [], 'pprint': [], 'datetime': [], 'csv': [], 'random': [], 'numpy': ['mean', 'product', 'max', 'sum', 'array', 'round', 'min', 'isin', 'std', 'cumsum', 'copy'], 'itertools': ['count', 'product', 'groupby'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'scipy': [], 'warnings': [], '=': [], '': []} axis_0: 4, axis_1: 8
using-keras-oov-tokens.py : ['read_csv', 'replace', 'apply'] ['numpy', 'pandas', 'os'] ['Tokenizer']Dict:{'numpy': [], 'pandas': ['read_csv'], 'os': ['replace'], 'keras': []} axis_0: 0, axis_1: 0
models-ensemble-feature-engineering.py : ['read_csv', 'read_csv', 'dropna', 'reset_index', 'drop', 'reset_index', 'concat', 'sum', 'isnull', 'sort_values', 'fillna', 'fillna', 'fillna', 'mode', 'apply', 'fillna', 'transform', 'groupby', 'fillna', 'mode', 'transform', 'groupby', 'fillna', 'median', 'astype', 'fillna', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'sum', 'isnull', 'sort_values', 'apply', 'sort_values', 'reset_index', 'get_dummies', 'array', 'read_csv', 'to_csv'] ['sys', 'warnings', 'lightgbm', 'numpy', 'pandas'] ['StackingCVRegressor', 'skew', 'GradientBoostingRegressor', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'mean_squared_error', 'GridSearchCV', 'KFold', 'cross_val_score', 'make_pipeline', 'RobustScaler', 'SVR', 'XGBRegressor']Dict:{'sys': [], 'warnings': [], 'lightgbm': [], 'numpy': ['median', 'array', 'sum'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'array'], 'mlxtend': [], 'scipy': [], 'sklearn': [], 'xgboost': ['apply']} axis_0: 1, axis_1: 1
train-ventilator-lstm-model-part-iv.py : [] ['numpy', 'pandas', 'tensorflow', 'gc', 'matplotlib.pyplot', 'json'] ['keras', '*', '*', 'EarlyStopping', 'ModelCheckpoint', 'LearningRateScheduler', 'ReduceLROnPlateau', 'RobustScaler', 'normalize', 'train_test_split', 'KFold', 'mean_absolute_error', 'load']Dict:{'numpy': [], 'pandas': [], 'tensorflow': [], 'gc': [], 'matplotlib': [], 'sklearn': [], 'pickle': [], 'json': []} axis_0: 0, axis_1: 0
uber-s-ludwig-auto-ml.py : ['read_csv', 'read_csv', 'head', 'head', 'concat', 'apply', 'skew', 'dropna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'apply', 'astype', 'astype', 'astype', 'fillna', 'mean', 'hist', 'head', 'keys', 'keys', 'head', 'head', 'head', 'head', 'head', 'hist', 'head', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'ludwig', 'scipy', 'matplotlib.pyplot'] ['LudwigModel']Dict:{'numpy': ['mean'], 'pandas': ['concat', 'read_csv'], 'os': [], 'ludwig': [], 'scipy': [], 'matplotlib': ['hist']} axis_0: 0, axis_1: 0
tps-dec-2021-tensorflow-nn-tpu-and-w-b.py : ['astype', 'astype', 'astype', 'astype', 'describe', 'astype', 'astype', 'copy', 'copy', 'transform', 'copy', 'copy', 'transform', 'concat', 'concat', 'head', 'map', 'map', 'astype', 'astype', 'transform', 'astype', 'astype', 'astype', 'astype', 'to_csv', 'head'] ['os', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'tensorflow', 'wandb'] ['layers', 'MinMaxScaler', 'StandardScaler', 'RobustScaler', 'mutual_info_regression', 'MiniBatchKMeans', 'IsolationForest', 'PCA', 'WandbCallback', 'UserSecretsClient']Dict:{'os': [], 'gc': [], 'numpy': ['copy'], 'pandas': ['concat'], 'matplotlib': [], 'seaborn': [], 'tensorflow': [], 'sklearn': ['transform'], 'wandb': []} axis_0: 1, axis_1: 3
fathers-day-specials-just-the-features.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'info', 'agg', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'read_csv', 'map', 'map', 'to_datetime', 'astype', 'fillna', 'fillna', 'fillna', 'agg', 'groupby', 'apply', 'to_datetime', 'apply', 'to_datetime', 'apply', 'to_datetime', 'apply', 'to_datetime', 'apply', 'to_datetime', 'apply', 'to_datetime', 'merge', 'merge', 'head', 'to_datetime', 'to_datetime', 'astype', 'to_datetime', 'to_datetime', 'astype', 'agg', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'read_csv', 'map', 'map', 'to_datetime', 'astype', 'fillna', 'fillna', 'fillna', 'apply', 'to_datetime', 'apply', 'to_datetime', 'apply', 'to_datetime', 'apply', 'to_datetime', 'apply', 'to_datetime', 'apply', 'to_datetime', 'agg', 'groupby', 'merge', 'merge', 'to_datetime', 'to_datetime', 'astype', 'to_datetime', 'to_datetime', 'astype', 'head', 'sum', 'isnull', 'sort_values', 'concat', 'sum', 'isnull', 'sort_values', 'concat', 'value_counts', 'mean', 'groupby', 'map', 'map', 'head', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'time', 'warnings', 'gc', 'os', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'datetime'] ['urllib', 'norm', 'skew', 'StandardScaler', 'shuffle', 'Pipeline', 'FeatureUnion', 'Lasso', 'mean_squared_log_error', 'mean_squared_error', 'r2_score', 'mean_absolute_error', 'train_test_split', 'metrics', 'confusion_matrix', 'reciprocal', 'uniform', 'StratifiedKFold', 'KFold', 'cross_val_score', 'cross_val_predict', 'cross_validate', 'GridSearchCV', 'RandomizedSearchCV', 'OneHotEncoder', 'LabelEncoder', 'feature_selection', 'model_selection', 'metrics', 'BaseEstimator', 'TransformerMixin', 'check_array', 'sparse']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'merge', 'to_datetime'], 'os': [], 'time': [], 'warnings': [], 'gc': [], 'six': [], 'matplotlib': [], 'seaborn': [], 'datetime': [], 'scipy': [], 'sklearn': []} axis_0: 0, axis_1: 2
fe-ensemble-added-period-3600.py : ['min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'apply', 'to_datetime', 'tz_localize', 'sort_values', 'set_index', 'agg', 'rolling', 'astype', 'agg', 'rolling', 'astype', 'astype', 'astype', 'abs', 'diff', 'astype', 'agg', 'rolling', 'astype', 'median', 'rolling', 'abs', 'astype', 'min', 'rolling', 'astype', 'max', 'rolling', 'abs', 'diff', 'astype', 'mean', 'rolling', 'abs', 'diff', 'reset_index', 'dropna', 'read_parquet', 'astype', 'read_parquet', 'unique', 'drop', 'stack', 'mean', 'stack', 'mean', 'round', 'sort_values', 'sort_values', 'sort_values', 'mean', 'concat', 'head', 'sort_values', 'read_parquet', 'drop', 'median', 'rolling', 'ffill', 'bfill', 'mean', 'rolling', 'diff', 'replace', 'agg', 'groupby', 'agg', 'groupby', 'sort_values', 'concat', 'read_parquet', 'unique', 'reset_index', 'concat', 'to_csv'] ['numpy', 'pandas', 'lightgbm', 'gc', 'plotly.express', 'warnings', 'xgboost'] ['groupby', 'train_test_split', 'is_datetime64_ns_dtype', 'RandomForestClassifier', 'GradientBoostingClassifier', 'RandomUnderSampler', 'Parallel', 'delayed', 'score', 'simplefilter']Dict:{'numpy': ['mean', 'median', 'stack', 'max', 'abs', 'round', 'min', 'unique', 'diff'], 'pandas': [], 'itertools': [], 'sklearn': ['apply'], 'lightgbm': [], 'imblearn': [], 'joblib': [], 'gc': [], 'plotly': [], 'warnings': [], 'metric': [], 'xgboost': []} axis_0: 2, axis_1: 1
xgboost.py : ['astype', 'astype', 'query', 'astype', 'agg', 'groupby', 'join', 'drop', 'copy', 'unique', 'sum', 'astype', 'sum', 'unique', 'sum', 'idxmax', 'astype', 'drop', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'max', 'max', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'isnull', 'isnull', 'isnull', 'isnull', 'concat', 'drop', 'concat', 'get_dummies', 'astype', 'mean', 'groupby', 'mean', 'groupby', 'join', 'transform', 'groupby', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'fillna', 'drop', 'drop', 'copy', 'isin', 'query', 'drop', 'copy', 'unique', 'isin', 'max', 'sum', 'transform', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'copy', 'drop', 'copy', 'drop', 'copy', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'warnings'] ['f1_score', 'Parallel', 'delayed', 'clone', 'VotingClassifier', 'ExtraTreesClassifier', 'RandomForestClassifier', 'class_weight', 'LabelEncoder', 'datetime']Dict:{'numpy': ['mean', 'max', 'sum', 'unique', 'isin', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'unique'], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'xgboost': [], 'sklearn': ['transform'], 'warnings': [], 'datetime': ['max']} axis_0: 0, axis_1: 31
on-line-feature-engineering.py : ['join', 'isin', 'array', 'read_csv', 'array', 'where', 'astype', 'where', 'array', 'array', 'mean', 'mean', 'mean', 'mean', 'sum', 'where', 'read_csv', 'read_csv', 'to_datetime', 'unique', 'isin', 'to_parquet', 'read_parquet', 'unique', 'unique', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'describe', 'pivot', 'min', 'quantile', 'max', 'quantile'] ['gresearch_crypto', 'numpy', 'pandas', 'os', 'collections', 'os', 'pickle', 'collections', 'math', 'matplotlib.pyplot'] ['tqdm', 'datetime', 'deque', 'division']Dict:{'gresearch_crypto': [], 'numpy': ['mean', 'quantile', 'max', 'sum', 'where', 'min', 'unique', 'isin', 'array'], 'pandas': ['to_datetime', 'read_csv', 'read_parquet', 'unique', 'array', 'pivot'], 'tqdm': [], 'datetime': ['min', 'max'], 'os': [], 'collections': [], 'pickle': [], '__future__': [], 'math': [], 'matplotlib': []} axis_0: 3, axis_1: 3
catboost-optuna-optimisation.py : ['sum', 'abs', 'abs', 'abs', 'select_dtypes', 'head', 'select_dtypes', 'head', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'reset_index', 'sort_values', 'concat', 'head', 'info', 'head', 'groupby', 'unique', 'tail', 'tail', 'replace', 'diff', 'groupby', 'dropna', 'head', 'items', 'unique', 'reset_index', 'sort_values', 'concat', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'tail', 'shift', 'groupby', 'tail', 'read_csv', 'merge', 'drop', 'read_csv', 'merge', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'transform', 'groupby', 'drop', 'unique', 'tail', 'reset_index', 'unique', 'reset_index', 'head', 'groupby', 'unique', 'update', 'add', 'merge', 'drop', 'fillna', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'numpy', 'optuna', 'shap', 'plotly.graph_objects', 'warnings'] ['tqdm', 'CatBoostRegressor', 'Pool', 'CatBoostError', 'cv', 'eval_metric', 'Trial', 'visualization', 'TPESampler', 'boxcox', 'inv_boxcox', 'adfuller', 'make_subplots', 'List']Dict:{'pandas': ['read_csv', 'concat', 'unique', 'merge', 'to_datetime'], 'matplotlib': [], 'tqdm': ['update'], 'numpy': ['mean', 'add', 'diff', 'abs', 'sum', 'unique', 'info', 'copy'], 'catboost': [], 'optuna': [], 'shap': [], 'scipy': [], 'statsmodels': [], 'plotly': [], 'typing': ['copy'], 'warnings': []} axis_0: 0, axis_1: 0
mercedes-benz-data-exploration.py : ['mode', 'read_csv', 'read_csv', 'head', 'describe', 'sum', 'isnull', 'sum', 'isnull', 'select_dtypes', 'transform', 'drop', 'corr', 'describe', 'value_counts', 'reset_index', 'aggregate', 'groupby', 'mean', 'sort_values', 'reset_index', 'aggregate', 'groupby', 'mean', 'sort_values', 'reset_index', 'aggregate', 'groupby', 'mean', 'sort_values', 'reset_index', 'aggregate', 'groupby', 'mean', 'sort_values', 'reset_index', 'aggregate', 'groupby', 'mean', 'sort_values', 'reset_index', 'aggregate', 'groupby', 'mean', 'sort_values', 'reset_index', 'aggregate', 'groupby', 'mean', 'sort_values', 'select_dtypes', 'keys', 'sort_values', 'hist', 'hist', 'keys', 'sort_values', 'head'] ['seaborn', 'matplotlib.pyplot', 'numpy', 'pandas', 'math', 'xgboost', 'warnings'] ['LabelEncoder']Dict:{'seaborn': [], 'matplotlib': ['hist'], 'numpy': ['mean', 'sum'], 'pandas': ['value_counts', 'read_csv', 'isnull'], 'math': [], 'sklearn': ['transform'], 'xgboost': [], 'warnings': []} axis_0: 0, axis_1: 0
tps-aug-22-failure-prediction.py : ['read_csv', 'read_csv', 'head', 'sum', 'isna', 'round', 'sum', 'isna', 'round', 'isna', 'sum', 'isna', 'round', 'sum', 'value_counts', 'value_counts', 'value_counts', 'drop', 'sum', 'duplicated', 'round', 'sum', 'duplicated', 'sum', 'duplicated', 'round', 'sum', 'duplicated', 'nunique', 'value_counts', 'set_index', 'drop_duplicates', 'concat', 'concat', 'min', 'min', 'max', 'max', 'hist', 'hist', 'agg', 'groupby', 'value_counts', 'value_counts', 'value_counts', 'reindex', 'reindex', 'agg', 'groupby', 'reindex', 'corr', 'get_dummies', 'merge', 'drop', 'drop', 'astype', 'isna', 'astype', 'isna', 'mean', 'std', 'mean', 'copy', 'copy', 'copy', 'copy', 'transform', 'unique', 'abs', 'mean', 'mean', 'var', 'var', 'drop', 'drop', 'reset_index', 'sort_values', 'head', 'mean', 'mean', 'array', 'abs', 'mean', 'head', 'reset_index', 'sort_values', 'read_csv', 'isin', 'rank', 'isin', 'max', 'rank', 'isin', 'isin', 'rank', 'isin', 'max', 'rank', 'isin', 'concat', 'isin', 'isin', 'to_csv', 'head'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'math', 'statistics', 'time', 'matplotlib.dates', 'plotly.express', 'warnings', 'sklearn', 'umap', 'umap.plot', 'sys'] ['combinations', 'stats', 'pearsonr', 'shapiro', 'chi2', 'poisson', 'datetime', 'colored', 'PCA', 'TSNE', 'LinearDiscriminantAnalysis', 'KMeans', 'train_test_split', 'StratifiedKFold', 'GridSearchCV', 'TimeSeriesSplit', 'GroupKFold', 'cross_validate', 'StandardScaler', 'RobustScaler', 'PowerTransformer', 'OneHotEncoder', 'LabelEncoder', 'SimpleImputer', 'KNNImputer', 'enable_iterative_imputer', 'IterativeImputer', 'make_pipeline', 'make_column_transformer', 'confusion_matrix', 'ConfusionMatrixDisplay', 'accuracy_score', 'roc_auc_score', 'RandomForestClassifier', 'LinearRegression', 'Ridge', 'GaussianMixture', 'BayesianGaussianMixture', 'LinearRegression', 'LogisticRegression', 'KNeighborsClassifier', 'SVC', 'DecisionTreeClassifier', 'RandomForestClassifier', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'GaussianNB', 'LGBMImputer']Dict:{'numpy': ['mean', 'max', 'var', 'abs', 'sum', 'array', 'round', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'get_dummies', 'unique', 'array', 'merge'], 'seaborn': [], 'matplotlib': [], 'itertools': [], 'math': [], 'statistics': ['mean', 'groupby'], 'scipy': ['mean', 'var', 'std'], 'time': [], 'datetime': ['min', 'max'], 'plotly': [], 'termcolor': [], 'warnings': [], 'sklearn': [], 'umap': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'sys;': [], 'sys': [], 'kuma_utils': [], '=': [], 'pd': [], 'index=train_final': [], 'importance_df': [], 'train_final': [], 'ascending=False)': []} axis_0: 1, axis_1: 9
convert-to-regression.py : ['join', 'hist', 'array', 'astype', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'value_counts', 'value_counts', 'map', 'map', 'map', 'map', 'map', 'astype', 'to_datetime', 'to_datetime', 'groupby', 'query', 'sum', 'sum', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'array', 'mean', 'std', 'update', 'keys', 'groupby', 'groupby', 'copy', 'transform', 'concat', 'concat', 'transform', '__init__', 'copy', 'transform', 'concat', 'concat', 'transform', '__init__', 'mask', 'pop', 'mask', 'mask', 'mask', 'mask', 'mask', 'mean', 'mean', 'clip', 'clip', 'sum', 'sum', 'copy', 'mean', 'mean', 'hist', 'array', 'astype', 'to_csv', 'value_counts'] ['numpy', 'pandas', 'matplotlib.pyplot', 'xgboost', 'shap', 'os', 'lightgbm', 'gc', 'json', 'tensorflow'] ['XGBClassifier', 'XGBRegressor', 'plot_importance', 'CatBoostRegressor', 'pyplot', 'time', 'tqdm_notebook', 'Counter', 'stats', 'cohen_kappa_score', 'mean_squared_error', 'KFold', 'StratifiedKFold', 'StandardScaler', 'MinMaxScaler', 'OneHotEncoder', 'choice']Dict:{'numpy': ['mean', 'sum', 'array', 'unique', 'clip', 'std', 'copy'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'array', 'to_datetime'], 'matplotlib': ['hist'], 'xgboost': ['__init__'], 'catboost': [], 'shap': [], 'os': [], 'time': ['__init__'], 'tqdm': ['update', '__init__'], 'collections': ['pop', 'keys', 'update', '__init__', 'copy'], 'scipy': [], 'lightgbm': [], 'sklearn': ['transform', '__init__'], 'gc': [], 'json': [], 'tensorflow': ['unique', 'concat'], 'random': ['__init__']} axis_0: 1, axis_1: 5
pyramid-on-statement-dates-notebook.py : ['read_parquet', 'read_parquet', 'astype', 'to_datetime', 'isin', 'sum', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'sort_values', 'concat', 'apply', 'sum', 'cumsum', 'sum', 'sum', 'sort_values', 'concat', 'apply', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'rename', 'drop', 'diff', 'groupby', 'fillna', 'concat', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'rename', 'isnull', 'isnull', 'drop', 'concat', 'read_csv', 'astype', 'set_index', 'merge', 'astype', 'reset_index', 'sort_index', 'copy', 'merge', 'mean', 'sort_values', 'sort_index', 'drop_duplicates', 'unique', 'cumsum', 'astype', 'unique', 'cumsum', 'unique', 'unique', 'read_csv', 'astype', 'set_index', 'merge', 'reset_index', 'to_csv'] ['pandas', 'numpy', 'sklearn', 'matplotlib.pyplot', 'gc', 'os', 'seaborn', 'cupy', 'cudf', 'pandas', 'matplotlib.pyplot'] []Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'read_parquet', 'unique', 'merge', 'to_datetime'], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'cupy,': [], 'cudf': []} axis_0: 1, axis_1: 5
titanic-logistic-regression-with-python.py : ['read_csv', 'read_csv', 'head', 'head', 'sum', 'isnull', 'sum', 'isnull', 'hist', 'mean', 'median', 'sum', 'isnull', 'sum', 'isnull', 'value_counts', 'idxmax', 'value_counts', 'copy', 'fillna', 'median', 'fillna', 'idxmax', 'value_counts', 'drop', 'sum', 'isnull', 'head', 'hist', 'hist', 'where', 'drop', 'drop', 'get_dummies', 'drop', 'drop', 'drop', 'drop', 'head', 'sum', 'isnull', 'copy', 'fillna', 'median', 'fillna', 'median', 'drop', 'where', 'drop', 'drop', 'get_dummies', 'drop', 'drop', 'drop', 'drop', 'head', 'mean', 'groupby', 'where', 'where', 'corr', 'min', 'where', 'array', 'mean', 'mean', 'mean', 'keys', 'mean', 'mean', 'std', 'keys', 'mean', 'mean', 'std', 'max', 'array', 'keys', 'max', 'array', 'keys', 'to_csv', 'tail'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['preprocessing', 'LogisticRegression', 'RFE', 'RFECV', 'train_test_split', 'cross_val_score', 'accuracy_score', 'classification_report', 'precision_score', 'recall_score', 'confusion_matrix', 'precision_recall_curve', 'roc_curve', 'auc', 'log_loss', 'cross_validate', 'GridSearchCV', 'StandardScaler', 'RepeatedStratifiedKFold', 'Pipeline']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'array', 'where', 'min', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'array'], 'sklearn': [], 'matplotlib': ['hist'], 'seaborn': [], 'warnings': []} axis_0: 0, axis_1: 14
nesp-feature-engineering-pipeline-modeling.py : ['read_csv', 'read_csv', 'read_csv', 'isin', 'reset_index', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'count', 'concat', 'array', 'array', 'transform', 'isin', 'isin', 'sort_values', '__init__', 'drop', 'sum', 'read_csv', 'to_csv', 'head'] ['os', 'time', 'string', 'random', 'torch', 'numpy', 'pandas', 'torch.nn', 'seaborn', 'matplotlib.pyplot'] ['spearmanr', 'LGBMRegressor', 'KFold', 'ProteinAnalysis', 'XGBRegressor', 'Pipeline', 'OrdinalEncoder', 'Pipeline']Dict:{'os': [], 'time': [], 'string': [], 'random': [], 'torch': [], 'numpy': ['isin', 'array', 'sum'], 'pandas': ['concat', 'array', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'scipy': ['__init__'], 'lightgbm': ['__init__'], 'sklearn': [], 'Bio': [], 'xgboost': ['apply', '__init__']} axis_0: 1, axis_1: 1
reinforcement-learning-baseline-in-python.py : ['insert', 'join', 'insert', 'join', 'mean'] ['os', 'sys', 'numpy'] ['PPO', 'evaluate_policy', 'Monitor', 'KoreGymEnv']Dict:{'os': [], 'sys': [], 'stable_baselines3': [], 'environment': [], 'numpy': ['mean', 'insert']} axis_0: 0, axis_1: 0
random-forest-k-fold-cross-validation.py : ['update', 'read_csv', 'sum', 'memory_usage', 'merge', 'rename', 'max', 'groupby', 'sample', 'merge', 'min', 'groupby', 'agg', 'groupby', 'merge', 'fillna', 'mean', 'transpose', 'mean', 'std', 'std'] ['pandas', 'numpy', 'matplotlib.pyplot', 'matplotlib'] ['RandomForestClassifier', 'StratifiedKFold', 'roc_curve', 'auc']Dict:{'pandas': ['merge', 'read_csv'], 'numpy': ['mean', 'transpose', 'max', 'sum', 'min', 'std'], 'matplotlib': [], 'sklearn': []} axis_0: 2, axis_1: 0
titanic-machine-learning-problem.py : ['read_csv', 'read_csv', 'head', 'head', 'describe', 'sum', 'isnull', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'mean', 'fillna', 'mode', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'drop', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'apply', 'replace', 'replace', 'replace', 'replace', 'cut', 'cut', 'drop', 'drop', 'head', 'get_dummies', 'get_dummies', 'head', 'corr', 'drop', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'sort_values', 'drop', 'copy', 'drop', 'sort_values', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'missingno', 'missingno', 'missingno', 're'] ['Image', 'train_test_split', 'accuracy_score', 'KFold', 'cross_val_score', 'cross_val_predict', 'confusion_matrix', 'LogisticRegression', 'RandomForestClassifier', 'SVC', 'LinearSVC', 'KNeighborsClassifier', 'GaussianNB', 'DecisionTreeClassifier', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'LinearDiscriminantAnalysis', 'GridSearchCV', 'RandomForestClassifier']Dict:{'IPython': [], 'numpy': ['mean', 'median', 'sum', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'get_dummies'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'missingno': [], 're': [], 'sklearn': ['apply']} axis_0: 0, axis_1: 8
tps-2021-eda-baseline-using-pyspark.py : ['count', 'groupby', 'describe', 'dropna', 'replace', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'transform', 'transform', 'count', 'count', 'transform', 'transform', 'transform', 'head', 'to_csv', 'read_csv', 'head', 'read_csv', 'drop', 'head', 'concat', 'to_csv'] ['pandas', 'numpy'] ['SparkSession', 'isnull', 'when', 'count', 'col', 'VectorAssembler', 'StringIndexer', 'scatter_matrix', 'RandomForestClassifier', 'DecisionTreeClassifier', 'GBTClassifier', 'MulticlassClassificationEvaluator']Dict:{'pyspark': [], 'pandas': ['concat', 'read_csv'], 'numpy': []} axis_0: 0, axis_1: 1
earthquakes-over-feature-engineering-lightgbm.py : ['read_csv', 'array', 'abs', 'mean', 'std', 'var', 'max', 'min', 'mean', 'std', 'mean', 'std', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'kurtosis', 'skew', 'median', 'mean', 'abs', 'mean', 'mean', 'mean', 'rolling', 'dropna', 'std', 'rolling', 'dropna', 'mean', 'rolling', 'mean', 'std', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'head', 'sort_values', 'abs', 'corrwith', 'any', 'isnull', 'mean', 'fillna', 'transform', 'read_csv', 'read_csv', 'any', 'isnull', 'fillna', 'transform', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'abs', 'corrwith', 'head', 'sort_values', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'eli5', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'PermutationImportance', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'mean_absolute_error', 'LinearRegression', 'hilbert', 'hann', 'convolve', 'stats', 'KernelRidge']Dict:{'numpy': ['mean', 'median', 'any', 'max', 'var', 'abs', 'array', 'min', 'isin', 'diff', 'std'], 'pandas': ['concat', 'array', 'read_csv', 'isnull'], 'os': [], 'matplotlib': [], 'tqdm': [], 'sklearn': [], 'eli5': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'catboost': [], 'gc': [], 'seaborn': [], 'warnings': [], 'scipy': ['kurtosis', 'skew']} axis_0: 1, axis_1: 0
foursquare-gpu-accelerated-lofo-feature-importance.py : ['read_csv', 'head', 'value_counts', 'fillna', 'astype', 'fillna', 'copy', 'sum', 'multiply', 'get', 'sum', 'multiply', 'get', 'get', 'isnull', 'isnull', 'get', 'isnull', 'isnull', 'get', 'get', 'concat', 'where', 'get', 'where', 'get'] ['cudf', 'cuml', 'cupy', 'numpy', 'pandas', 'lofo', 'xgboost'] ['NearestNeighbors', 'TfidfVectorizer']Dict:{'cudf': [], 'cuml': [], 'cupy': [], 'sklearn': [], 'numpy': ['where', 'sum', 'multiply', 'copy'], 'pandas': ['concat', 'value_counts', 'read_csv', 'isnull'], 'lofo': [], 'xgboost': []} axis_0: 0, axis_1: 2
transformer-baseline-0-672-lb.py : ['round', 'clip', 'round', 'clip', 'sum', 'sum', 'sum', 'sum', 'read_csv', 'set_index', 'head', 'mean', 'std', 'unique', '__init__', 'mean', 'std', 'mode', 'mode', 'transpose', 'transpose', 'mode', 'array', 'cumsum', 'cumsum', 'astype', 'set_index', 'head', 'read_csv', 'head', 'astype', 'squeeze', 'mean', 'to_csv', 'head'] ['pandas', 'pyarrow.parquet', 'os', 'numpy', 'random', 'os', 'sys', 'numpy', 'tensorflow'] ['*', 'Model', 'tqdm', 'train_test_split', 'backend', 'optimizers', 'GridSearchCV', 'StratifiedKFold', '*', '*', '*', '*', '*', 'Layer', 'TokenList', 'pad_to_longest']Dict:{'pandas': ['array', 'unique', 'read_csv'], 'pyarrow': [], 'os': [], '': [], 'numpy': ['mean', 'transpose', 'squeeze', 'std', 'sum', 'round', 'unique', 'clip', 'array', 'cumsum'], 'keras': [], 'tqdm': [], 'sklearn': [], 'random,': [], 'os,': [], 'sys': [], 'tensorflow': ['transpose', 'squeeze', 'round', 'unique', 'cumsum']} axis_0: 1, axis_1: 1
spaceshiptitanic-models-v2.py : ['read_parquet', 'join', 'test', 'read_parquet', 'join', 'squeeze', 'read_csv', 'join', 'read_csv', 'join', 'drop', 'test', 'test', 'replace', 'head', 'head', 'test', 'test', 'items', 'test', 'drop', 'drop', 'transpose', 'describe', 'info', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'concat', 'nunique', 'nunique', 'test', 'sum', 'isna', 'sum', 'isna', 'test', 'test', 'test'] [] []Dict:{} axis_0: 5, axis_1: 3
eda-feature-engineering-baseline-lightgbm.py : ['read_csv', 'read_csv', 'head', 'sum', 'isnull', 'sum', 'isnull', 'info', 'value_counts', 'hist', 'round', 'corr', 'bool', 'astype', 'apply', 'astype', 'apply', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'fillna', 'fillna', 'apply', 'astype', 'apply', 'apply', 'apply', 'astype', 'apply', 'apply', 'value_counts', 'fillna', 'fillna', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'value_counts', 'sum', 'sum', 'apply', 'apply', 'hist', 'drop', 'drop', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'astype', 'astype', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings'] ['train_test_split', 'RandomizedSearchCV', 'accuracy_score', 'classification_report', 'confusion_matrix']Dict:{'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'numpy': ['round', 'info', 'sum', 'median'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 2
lightgbm-starter-with-feature-engineering-idea.py : ['diff', 'sum', 'unique', 'read_parquet', 'head', 'read_parquet', 'apply', 'groupby', 'apply', 'groupby', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'reset_index', 'agg', 'groupby', 'join', 'reset_index', 'agg', 'groupby', 'query', 'join', 'add_suffix', 'merge', 'drop', 'apply', 'drop', 'read_parquet', 'head', 'read_parquet', 'apply', 'groupby', 'sum', 'mean', 'agg', 'groupby', 'reset_index', 'join', 'agg', 'groupby', 'query', 'reset_index', 'join', 'add_suffix', 'merge', 'drop', 'add_prefix', 'apply', 'drop', 'merge', 'concat', 'concat', 'read_csv', 'unique', 'astype', 'astype', 'merge', 'head', 'read_csv', 'unique', 'merge', 'apply', 'apply', 'mean', 'groupby', 'map', 'mean', 'groupby', 'map', 'head', 'head', 'sort_values', 'astype', 'astype', 'drop', 'mean', 'mean', 'array', 'copy', 'rename', 'reset_index', 'to_csv', 'rename', 'reset_index', 'to_csv', 'drop', 'assign', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'os', 'glob', 'lightgbm'] ['Parallel', 'delayed', 'KFold', 'KFold']Dict:{'numpy': ['mean', 'sum', 'unique', 'diff', 'array', 'copy'], 'pandas': ['read_csv', 'concat', 'read_parquet', 'unique', 'array', 'merge'], 'matplotlib': [], 'os': ['rename'], 'glob': [], 'sklearn': [], 'lightgbm': []} axis_0: 1, axis_1: 5
answer-correctness-rapids-xgb-lgbm.py : ['astype', 'astype', 'to_numpy', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'fillna', 'fillna', 'head', 'value_counts', 'mean', 'median', 'max', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'isin', 'reset_index', 'agg', 'groupby', 'applymap', 'to_parquet', 'read_csv', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'fillna', 'head', 'value_counts', 'nunique', 'to_parquet', 'read_csv', 'factorize', 'head', 'value_counts', 'value_counts', 'to_parquet', 'to_parquet', 'to_parquet', 'copy', 'merge', 'merge', 'applymap', 'applymap', 'fillna', 'astype'] ['os', 'pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'matplotlib.image', 'gc', 'tqdm', 'copy', 're', 'warnings', 'cudf', 'cupy', 'cudf', 'numpy', 'pandas', 'pickle', 'time', 'xgboost', 'pickle', 'shap', 'lightgbm', 'gc', 'pickle', 'riiideducation'] ['HTML', 'display_html', 'Image', 'pearsonr', 'Client', 'wait', 'LocalCUDACluster', 'RandomForestClassifier', 'accuracy_score', 'RandomForestClassifier', 'make_classification', 'train_test_split', 'StandardScaler', 'roc_auc_score', 'train_test_split', 'StratifiedKFold', 'train_test_split', 'metrics', 'metrics']Dict:{'IPython': [], 'os': [], 'pandas': ['isna', 'read_csv', 'value_counts', 'factorize', 'merge'], 'numpy': ['mean', 'median', 'max', 'sum', 'isin', 'copy'], 'seaborn': [], 'matplotlib': [], 'PIL': ['merge'], 'gc': [], 'scipy': [], 'tqdm': [], 'copy': ['copy'], 're': [], 'warnings': [], 'cudf': [], 'cupy': [], '#': [], 'CuPy': [], 'is': [], 'an': [], 'open-source': [], 'array': [], 'library': [], 'accelerated': [], 'with': [], 'NVIDIA': [], 'CUDA': [], 'dask': [], 'dask_cuda': [], 'pickle': [], 'cuml': [], 'sklearn': [], 'time': [], 'xgboost': [], 'shap': [], 'lightgbm': [], 'riiideducation': []} axis_0: 0, axis_1: 1
machine-failure-xgb-with-feature-engineering.py : ['read_csv', 'head', 'info', 'drop', 'head', 'describe', 'groupby', 'unique', 'sum', 'transform', 'groupby', 'head', 'drop', 'read_csv', 'drop', 'head', 'head', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'seaborn'] ['train_test_split', 'Pipeline', 'ColumnTransformer', 'OneHotEncoder', 'StandardScaler', 'RandomForestClassifier', 'XGBClassifier', 'roc_auc_score']Dict:{'pandas': ['unique', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 4
quick-eda-feature-engineering-lightgbm.py : ['read_csv', 'read_csv', 'info', 'info', 'describe', 'describe', 'drop', 'drop', 'boxplot', 'value_counts', 'hist', 'boxplot', 'round', 'corr', 'bool', 'round', 'corr', 'bool', 'get_dummies', 'get_dummies', 'drop', 'round', 'round', 'astype', 'round', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings'] ['mean_absolute_error', 'mean_squared_error', 'train_test_split', 'RandomizedSearchCV']Dict:{'pandas': ['get_dummies', 'read_csv', 'value_counts'], 'numpy': ['round', 'info'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'sklearn': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 0
titanic-survivor-prediction-top-7.py : ['read_csv', 'read_csv', 'copy', 'copy', 'head', 'head', 'info', 'info', 'get', 'get', 'dropna', 'dropna', 'dropna', 'dropna', 'corr', 'value_counts', 'fillna', 'value_counts', 'fillna', 'insert', 'info', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'dropna', 'drop', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'head', 'reset_index', 'concat', 'iterrows', 'quantile', 'quantile', 'quantile', 'quantile', 'head', 'head', 'transform', 'transform', 'transform', 'transform', 'transform', 'head', 'head', 'head', 'drop', 'drop', 'mean', 'std', 'astype', 'value_counts', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'statsmodels', 'seaborn'] ['LabelEncoder', 'OneHotEncoder', 'StandardScaler', 'KNeighborsClassifier', 'cross_val_score']Dict:{'numpy': ['mean', 'median', 'quantile', 'std', 'sum', 'info', 'insert', 'copy'], 'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'matplotlib': ['get'], 'seaborn': [], 'statsmodels': [], 'sklearn': []} axis_0: 0, axis_1: 0
kor-tuning-automated-feature-engineering.py : ['drop', 'reset_index', 'sort_values', 'read_csv', 'drop', 'reset_index', 'sort_values', 'read_csv', 'drop', 'reset_index', 'sort_values', 'read_csv', 'drop', 'reset_index', 'sort_values', 'read_csv', 'drop', 'reset_index', 'sort_values', 'read_csv', 'drop', 'reset_index', 'sort_values', 'read_csv', 'drop', 'reset_index', 'sort_values', 'read_csv', 'drop', 'reset_index', 'sort_values', 'read_csv', 'unique', 'copy', 'replace', 'head', 'to_timedelta', 'head', 'drop', 'dropna', 'to_timedelta', 'drop', 'to_timedelta', 'to_timedelta', 'to_timedelta', 'drop', 'drop', 'to_timedelta', 'to_timedelta', 'drop', 'drop', 'items', 'head', 'value_counts', 'head', 'rename', 'head', 'dropna', 'sample', 'align', 'to_csv', 'to_csv'] ['pandas', 'numpy', 'featuretools', 'warnings', 'woodwork.logical_types', 'matplotlib.pyplot', 'seaborn', 'random'] ['selection']Dict:{'pandas': ['to_timedelta', 'unique', 'read_csv', 'value_counts'], 'numpy': ['unique', 'copy'], 'featuretools': [], 'warnings': [], 'woodwork': [], 'matplotlib': [], 'seaborn': [], 'random': ['sample']} axis_0: 0, axis_1: 1
predicting-house-price-90-accuracy.py : ['read_csv', 'read_csv', 'head', 'info', 'describe', 'describe', 'sample', 'drop', 'drop', 'rename', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'drop', 'reset_index', 'drop', 'reset_index', 'concat', 'rename', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'mode', 'transform', 'groupby', 'fillna', 'median', 'transform', 'groupby', 'fillna', 'median', 'transform', 'groupby', 'fillna', 'median', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'median', 'sum', 'sum', 'isnull', 'concat', 'describe', 'boxplot', 'sort_values', 'skew', 'sort_values', 'corr', 'select_dtypes', 'boxplot', 'drop', 'drop', 'drop', 'drop', 'boxplot', 'mean', 'groupby', 'astype', 'astype', 'drop', 'drop', 'mean', 'groupby', 'boxplot', 'mean', 'groupby', 'corr', 'drop', 'drop', 'corr', 'drop', 'drop', 'replace', 'astype', 'drop', 'drop', 'drop', 'drop', 'replace', 'astype', 'astype', 'astype', 'astype', 'boxplot', 'rename', 'sort_values', 'skew', 'rename', 'sort_values', 'skew', 'drop', 'drop', 'mean', 'groupby', 'replace', 'replace', 'apply', 'apply', 'select_dtypes', 'get_dummies', 'get_dummies', 'drop', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'warnings'] ['stats', 'skew', 'boxcox1p', 'boxcox_normmax', 'SVR', 'LinearRegression', 'GradientBoostingRegressor', 'RandomForestRegressor', 'AdaBoostRegressor', 'XGBRegressor', 'LGBMRegressor', 'CatBoostRegressor', 'StackingCVRegressor', 'SimpleImputer', 'mean_squared_error', 'r2_score', 'mean_absolute_error', 'train_test_split', 'GridSearchCV', 'RobustScaler', 'StandardScaler', 'LabelEncoder']Dict:{'numpy': ['mean', 'median', 'info', 'sum'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'warnings': [], 'scipy': [], 'sklearn': ['transform'], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': [], 'mlxtend': []} axis_0: 0, axis_1: 1
titanic-dataset-prediction.py : ['read_csv', 'read_csv', 'head', 'sum', 'isnull', 'isnull', 'mean', 'mean', 'mean', 'apply', 'map', 'map', 'drop', 'dropna', 'drop', 'head', 'drop', 'head', 'sum', 'isnull', 'apply', 'fillna', 'median', 'map', 'map', 'drop', 'head', 'read_csv', 'to_csv', 'read_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'seaborn'] ['train_test_split', 'LogisticRegression', 'classification_report', 'accuracy_score', 'confusion_matrix']Dict:{'pandas': ['read_csv', 'isnull'], 'numpy': ['mean', 'median', 'sum'], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 5
feature-engineering-and-ensemble.py : ['min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'apply', 'to_datetime', 'tz_localize', 'sort_values', 'set_index', 'agg', 'rolling', 'astype', 'agg', 'rolling', 'astype', 'astype', 'astype', 'abs', 'diff', 'astype', 'agg', 'rolling', 'astype', 'median', 'rolling', 'abs', 'astype', 'min', 'rolling', 'astype', 'max', 'rolling', 'abs', 'diff', 'astype', 'mean', 'rolling', 'abs', 'diff', 'reset_index', 'dropna', 'read_parquet', 'astype', 'read_parquet', 'unique', 'drop', 'stack', 'mean', 'stack', 'mean', 'round', 'sort_values', 'sort_values', 'sort_values', 'mean', 'concat', 'head', 'sort_values', 'read_parquet', 'drop', 'median', 'rolling', 'ffill', 'bfill', 'mean', 'rolling', 'diff', 'replace', 'agg', 'groupby', 'agg', 'groupby', 'sort_values', 'concat', 'read_parquet', 'unique', 'reset_index', 'concat', 'to_csv'] ['numpy', 'pandas', 'lightgbm', 'gc', 'plotly.express', 'warnings', 'xgboost'] ['groupby', 'train_test_split', 'is_datetime64_ns_dtype', 'RandomForestClassifier', 'GradientBoostingClassifier', 'RandomUnderSampler', 'Parallel', 'delayed', 'score', 'simplefilter']Dict:{'numpy': ['mean', 'median', 'stack', 'max', 'abs', 'round', 'min', 'unique', 'diff'], 'pandas': [], 'itertools': [], 'sklearn': ['apply'], 'lightgbm': [], 'imblearn': [], 'joblib': [], 'gc': [], 'plotly': [], 'warnings': [], 'metric': [], 'xgboost': []} axis_0: 2, axis_1: 1
tps-feb-2021-eda-dataviz-fe.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'copy', 'head', 'head', 'describe', 'pop', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'nunique', 'nunique', 'sort_values', 'nunique', 'sort_values', 'merge', 'boxplot', 'corr', 'corr', 'apply', 'concat', 'factorize', 'round', 'array', 'corr', 'copy', 'copy', 'transform', 'sort_values', 'sort_values'] ['os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'random', 'pylab', 'warnings', 'ptitprince'] ['kurtosis', 'skew', 'AnchoredText', 'MaxNLocator', 'LabelEncoder', 'mutual_info_regression']Dict:{'os': [], 'numpy': ['round', 'array', 'sum', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'factorize', 'array', 'merge'], 'matplotlib': [], 'seaborn': ['boxplot'], 'scipy': [], 'random': [], 'pylab': ['boxplot', 'sum', 'round', 'array', 'copy'], 'warnings': [], 'ptitprince': [], 'sklearn': []} axis_0: 0, axis_1: 1
eda-missing-values-tsne-clustering-class-imb.py : ['join', 'read_csv', 'read_csv', 'head', 'info', 'describe', 'sum', 'isna', 'corr', 'keys', 'unique', 'corr', 'astype', 'pivot_table', 'value_counts', 'value_counts', 'dot', 'sum', 'sum', 'sum', 'isna', 'sum', 'sum', 'notna', 'notna', 'notna', 'notna', 'isna', 'notna', 'isna', 'notna', 'isna', 'notna', 'isna', 'notna', 'sum', 'isna', 'sum', 'sum', 'fillna', 'mean', 'astype', 'pivot_table', 'value_counts', 'value_counts', 'dot', 'sum', 'sum', 'astype', 'read_csv', 'head', 'info', 'set_index', 'astype', 'keys', 'max', 'keys', 'reset_index', 'query', 'mean', 'sample', 'sample', 'sample', 'sample', 'sample', 'sum', 'mean', 'stack', 'astype', 'where'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.express', 'matplotlib.gridspec', 'os', 'gc', 'pickle', 'lightgbm', 'janestreet'] ['defaultdict', 'LinearRegression', 'TSNE', 'KMeans', 'silhouette_score', 'train_test_split', 'tqdm', 'roc_curve', 'auc', 'roc_auc_score', 'KFold']Dict:{'numpy': ['mean', 'stack', 'max', 'sum', 'where', 'unique', 'dot', 'info'], 'pandas': ['isna', 'read_csv', 'pivot_table', 'value_counts', 'notna', 'unique'], 'seaborn': [], 'matplotlib': [], 'plotly': [], '': [], 'sklearn': [], 'os': [], 'gc': [], 'pickle': [], 'lightgbm': [], 'tqdm': [], 'janestreet': []} axis_0: 2, axis_1: 0
tps-march-automl-pycaret-and-feature-engineering.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'to_datetime', 'drop', 'map', 'map', 'map', 'head', 'to_csv', 'round', 'to_csv'] ['numpy', 'pandas', 'os'] ['*', 'datetime', 'sin', 'cos', 'pi']Dict:{'numpy': ['round', 'sum', 'max', 'min'], 'pandas': ['to_datetime', 'read_csv'], 'os': [], 'pycaret': [], 'datetime': ['min', 'max'], 'math': []} axis_0: 0, axis_1: 1
simple-but-out-of-the-box-approach.py : ['read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'describe', 'reset_index', 'sum', 'isnull', 'sort_values', 'head', 'head', 'drop', 'drop', 'transform', 'read_csv', 'head', 'to_csv'] ['pandas', 'numpy', 'plotly.graph_objs', 'os', 'matplotlib.pyplot', 'seaborn'] ['init_notebook_mode', 'iplot', 'MaxAbsScaler', 'IsolationForest', 'SelectKBest', 'mutual_info_regression', 'f_regression', 'Lasso']Dict:{'pandas': ['read_csv', 'isnull'], 'numpy': ['info', 'sum'], 'plotly': [], 'os': [], 'sklearn': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 1
vsb-power-line-faults-eda-feature-engineering.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'head', 'head', 'head', 'rename', 'head', 'astype', 'merge', 'head'] ['numpy', 'pandas', 'pyarrow.parquet', 'matplotlib.pyplot', 'seaborn', 'gc', 'lightgbm', 'os'] ['*', 'f_classif', 'RandomizedSearchCV', 'expon', 'uniform', 'norm', 'randint', 'poisson', 'confusion_matrix', 'make_scorer']Dict:{'numpy': ['sum', 'max', 'min'], 'pandas': ['merge'], 'pyarrow': [], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'gc': [], 'sklearn': [], 'lightgbm': [], 'os': ['rename']} axis_0: 0, axis_1: 0
ps-s3-ep7-eda-modeling.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'info', 'head', 'describe', 'head', 'describe', 'value_counts', 'boxplot', 'boxplot', 'copy', 'copy', 'drop', 'drop', 'mean', 'mean', 'mean', 'head', 'apply', 'mean', 'head', 'to_csv', 'copy', 'copy', 'drop', 'drop', 'mean', 'mean', 'head', 'apply', 'mean', 'head', 'to_csv', 'value_counts', 'where', 'where', 'copy', 'copy', 'drop', 'drop', 'mean', 'mean', 'apply', 'mean', 'head', 'to_csv', 'to_datetime', 'astype', 'astype', 'to_datetime', 'astype', 'astype', 'drop', 'drop', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'drop', 'apply', 'sum', 'mean', 'mean', 'mean', 'apply', 'mean', 'head', 'to_csv', 'drop', 'copy', 'merge', 'drop', 'merge', 'head', 'where', 'drop', 'head', 'to_csv', 'copy', 'copy', 'merge', 'reset_index', 'isin', 'reset_index', 'isin', 'reset_index', 'isin', 'reset_index', 'isin', 'drop', 'apply', 'sum', 'mean', 'mean', 'mean', 'apply', 'mean', 'merge', 'drop', 'merge', 'where', 'drop', 'head', 'to_csv'] ['pandas', 'numpy', 'scipy', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'optuna'] ['tqdm', 'partial', 'DecisionTreeClassifier', 'plot_tree', 'OneVsRestClassifier', 'MinMaxScaler', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'roc_auc_score', 'roc_curve', 'RocCurveDisplay', 'cohen_kappa_score', 'KNeighborsClassifier', 'RFE', 'RFECV', 'LogisticRegression', 'RandomForestClassifier', 'SVC', 'LGBMClassifier', 'XGBClassifier', 'XGBRegressor', 'CatBoostClassifier']Dict:{'pandas': ['merge', 'to_datetime', 'read_csv', 'value_counts'], 'numpy': ['mean', 'sum', 'where', 'isin', 'info', 'copy'], 'tqdm': [], 'functools': [], 'scipy': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'xgboost': ['apply'], 'catboost': [], 'optuna': []} axis_0: 0, axis_1: 0
blending-models.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'read_feather', 'head', 'value_counts', 'notna', 'isna', 'drop', 'drop', 'transpose', 'array', 'clip', 'transpose', 'array', 'clip', 'mean', 'mean', 'sort_values', 'head', 'head', 'mean', 'to_csv', 'mean', 'clip', 'to_csv'] ['os', 'numpy', 'pandas', 'joblib', 'matplotlib.pyplot', 'seaborn'] ['Path', 'log_loss', 'LogisticRegression', 'Ridge', 'cross_val_score', 'GridSearchCV', 'RandomizedSearchCV', 'StratifiedKFold', 'KNeighborsClassifier', 'SVC', 'MLPClassifier', 'LGBMClassifier', 'spearmanr', 'loguniform', 'randint', 'uniform', 'logit', 'AutoML']Dict:{'os': [], 'pathlib': [], 'numpy': ['transpose', 'clip', 'array', 'mean'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'notna', 'read_feather', 'array'], 'joblib': [], 'sklearn': [], 'lightgbm': [], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'flaml': []} axis_0: 0, axis_1: 2
simple-lgbmregressor-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'to_datetime', 'replace', 'isin', 'unique', 'apply', 'agg', 'groupby', 'apply', 'fillna', 'median', 'map', 'map', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'astype', 'astype', 'astype', 'drop', 'concat', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'clip', 'fillna', 'drop', 'agg', 'groupby', 'reset_index', 'rename', 'merge', 'drop', 'drop', 'drop', 'sort_values', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'warnings', 'seaborn', 'sys', 'itertools', 'gc', 'csv', 'datetime'] ['train_test_split', 'LGBMRegressor', 'OrderedDict', 'LabelEncoder', 'OneHotEncoder']Dict:{'pandas': ['read_csv', 'concat', 'unique', 'merge', 'to_datetime'], 'numpy': ['isin', 'median', 'unique', 'clip'], 'matplotlib': [], 'warnings': [], 'seaborn': [], 'sys': [], 'itertools': ['groupby'], 'gc': [], 'sklearn': [], 'lightgbm': [], 'csv': [], 'collections': [], 'datetime': []} axis_0: 1, axis_1: 1
final-small.py : ['array', 'array', 'cumsum', 'sum', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'cut', 'cut', '__init__', '__init__', 'transpose', '__getitem__', '__len__', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'concat', 'astype', 'astype', 'astype', 'astype', 'astype', 'factorize', 'factorize', 'factorize', 'astype', 'astype', 'astype', 'astype', 'astype', 'factorize', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'astype', 'astype', 'isnull', 'fillna', 'apply', 'astype', 'apply', 'apply', 'apply', 'read_csv', 'rename', 'merge', 'drop', 'merge', 'drop', 'fillna', 'astype', 'isnull', 'fillna', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'keys', 'keys', 'rename', 'merge', 'fillna', 'join', 'join', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'eval', 'eval', 'eval', 'eval', 'reset_index', 'agg', 'groupby', 'drop', 'drop', 'merge', 'merge', 'fillna', 'reset_index', 'agg', 'groupby', 'drop', 'drop', 'merge', 'merge', 'fillna', 'reset_index', 'agg', 'groupby', 'drop', 'drop', 'merge', 'merge', 'fillna', 'reset_index', 'agg', 'groupby', 'drop', 'drop', 'merge', 'merge', 'fillna', '__init__', 'astype', 'min', 'max', 'eval', 'mean', 'std', 'mean', 'std', 'mean', 'drop', 'drop', 'drop', 'drop', 'add_prefix', 'add_prefix', 'add_prefix', 'add_prefix', 'add_prefix', 'drop', 'add_prefix', 'head', 'sum', 'sum', 'mean', 'mean', 'max', 'max', 'min', 'min', 'std', 'std', 'join', 'keys', 'sum', 'mean', 'max', 'min', 'mean', 'mean', 'mean', 'mean', 'mean', 'std', 'std', 'std', 'mean', 'keys', 'mean', 'mean', 'sum', 'std', 'join', 'unique', 'unique', 'reset_index', 'concat', 'reset_index', 'concat', 'reset_index', 'unique', 'groupby', 'apply', 'join', 'drop', 'apply', 'join', 'fillna', 'apply', 'apply', 'replace', 'apply', 'replace', 'factorize', 'drop', 'astype', 'agg', 'groupby', 'reset_index', 'merge', 'fillna', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'agg', 'groupby', 'reset_index', 'merge', 'agg', 'groupby', 'reset_index', 'merge', 'agg', 'groupby', 'reset_index', 'merge', 'agg', 'groupby', 'reset_index', 'merge', 'agg', 'groupby', 'reset_index', 'merge', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'agg', 'groupby', 'reset_index', 'merge', 'agg', 'groupby', 'reset_index', 'merge', 'drop', 'merge', 'merge', 'merge', 'fillna', 'fillna', 'fillna', 'add_prefix', 'fillna', 'merge', 'fillna', 'add_prefix', 'concat', 'agg', 'groupby', 'apply', 'fillna', 'copy', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'drop', 'all', 'fillna', 'astype', 'unique', 'transform', 'fillna', '__init__', 'mode', '__len__', '__getitem__', '__len__', 'mode', 'max', '__init__', '__init__', 'sum', 'sum', 'sum', '__init__', 'astype', 'min', 'max', 'eval', 'mean', 'std', 'mean', 'std', 'mean', 'astype', 'min', 'max', 'mean', 'mean', 'std', 'mean', 'std', 'mean', 'count', 'groupby', 'mean', 'groupby', 'map', 'sample', 'cumsum', 'groupby', 'groupby', 'fillna', 'count', 'groupby', 'mean', 'groupby', 'map', 'concat', 'fillna', 'map', 'concat', 'isnull', 'concat', 'mean', 'std', 'astype', 'min', 'max', 'mode', 'mean', 'mode', 'mean', 'mean', 'astype', 'min', 'max', 'mean', 'mean', 'std', 'mean', 'std', 'astype', 'min', 'max', 'astype', 'to_csv'] ['gc', 'glob', 'os', 'json', 'matplotlib.pyplot', 'pprint', 're', 'numpy', 'pandas', 'cv2', 'scipy', 'lightgbm', 'xgboost', 'time', 'itertools', 'nltk', 'jieba', 'torch', 'json'] ['Parallel', 'delayed', 'tqdm_notebook', 'Image', 'TfidfVectorizer', 'SparsePCA', 'TruncatedSVD', 'LatentDirichletAllocation', 'NMF', 'StratifiedKFold', 'KFold', 'GroupKFold', 'cohen_kappa_score', 'mean_squared_error', 'confusion_matrix', 'StandardScaler', 'RobustScaler', 'Counter', 'partial', 'sqrt', 'LdaTransformer', 'LdaMulticore', 'corpora', 'Ridge', 'TSNE', 'TweetTokenizer', 'PorterStemmer', 'LancasterStemmer', 'SnowballStemmer', 'nn', 'functional', 'resnet50', 'resnet34', 'densenet201', 'densenet121', 'StepLR', 'Variable', 'TensorDataset', 'Dataset', 'DataLoader', 'DBSCAN', 'FeatureAgglomeration', 'KMeans', 'LabelEncoder']Dict:{'gc': [], 'glob': [], 'os': ['rename', 'replace'], 'json': [], 'matplotlib': ['get'], 'pprint': [], 're': [], 'numpy': ['transpose', 'mean', 'max', 'sum', 'array', 'all', 'min', 'unique', 'std', 'cumsum', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'eval', 'concat', 'factorize', 'unique', 'array', 'merge'], 'joblib': ['__init__'], 'tqdm': ['__len__', '__init__'], 'PIL': ['eval', 'merge'], 'cv2': [], 'sklearn': ['transform', '__init__'], 'scipy': [], 'collections': ['get', '__len__', 'keys', '__getitem__', '__init__', 'copy'], 'functools': ['__init__'], 'math': ['__init__'], 'lightgbm': [], 'xgboost': [], 'time': [], 'gensim': [], 'itertools': ['count', 'groupby'], 'nltk': [], 'jieba': [], 'torch': ['__len__', '__init__'], 'torchvision': []} axis_0: 9, axis_1: 28
feature-engineering-monthly-rate-0-002-cv-lb.py : ['read_csv', 'agg', 'groupby', 'join', 'reset_index', 'reset_index', 'merge', 'merge', 'sum', 'to_csv'] ['pandas', 'numpy', 'datetime', 'gc', 'sys', 'os'] []Dict:{'pandas': ['merge', 'read_csv'], 'numpy': ['sum'], 'datetime': [], 'gc': [], 'sys': [], 'os': []} axis_0: 0, axis_1: 0
xgboost-tutorial-with-efficient-memory-management.py : ['read_parquet', 'astype', 'to_datetime', 'sum', 'isna', 'info', 'fillna', 'sum', 'isna', 'read_parquet', 'read_parquet', 'astype', 'to_datetime', 'fillna', 'read_parquet', 'astype', 'apply', 'to_datetime', 'fillna', 'head', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'concat', 'read_csv', 'astype', 'set_index', 'merge', 'astype', 'reset_index', '__init__', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'keys', 'copy', 'set_index', 'concat', 'drop_duplicates', 'read_parquet', 'astype', 'apply', 'set_index', 'merge', 'reset_index', 'sort_index', 'to_csv', 'head', 'hist', 'copy', 'merge', 'mean', 'sort_values', 'to_csv', 'sort_index', 'drop_duplicates', 'isin', 'concat', 'read_csv', 'astype', 'set_index', 'merge', 'reset_index', 'to_csv', 'head', 'hist'] ['pandas', 'numpy', 'cupy', 'cudf', 'matplotlib.pyplot', 'gc', 'os', 'xgboost', 'gc', 'matplotlib.pyplot'] ['ParquetFile', 'KFold']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'read_parquet', 'array', 'merge', 'to_datetime'], 'numpy': ['transpose', 'mean', 'sum', 'where', 'isin', 'info', 'array', 'cumsum', 'copy'], 'cupy': [], 'cudf': [], 'matplotlib': ['hist'], 'pyarrow': [], 'sklearn': ['__init__'], 'xgboost': [], 'gc': [], '=': [], '[]': []} axis_0: 1, axis_1: 2
handmade-features.py : ['astype', 'astype', 'mean', 'abs', 'max', 'mean', 'max', 'sum', 'astype', 'astype', 'mean', 'std', 'astype', 'mean', 'sum', 'sum'] ['numpy', 'pandas', 'pyarrow.parquet', 'matplotlib.pyplot', 'tensorflow', 'sklearn.model_selection', 'sklearn.metrics'] ['tqdm_notebook', 'CatBoostClassifier']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'std'], 'pandas': [], 'pyarrow': [], 'tqdm': [], 'matplotlib': [], 'tensorflow': ['abs'], 'sklearn': [], 'catboost': []} axis_0: 4, axis_1: 5
1-smart-robots-most-complete-notebook.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'value_counts', 'describe', 'describe', 'describe', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'tail', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'tail', 'describe', 'tail', 'max', 'nunique', 'groupby', 'nunique', 'value_counts', 'reset_index', 'count', 'groupby', 'pivot', 'value_counts', 'head', 'head', 'describe', 'head', 'unique', 'corr', 'corr', 'read_csv', 'read_csv', 'sort_values', 'apply', 'groupby', 'merge', 'rename', 'array', 'apply', 'groupby', 'droplevel', 'items', 'apply', 'groupby', 'droplevel', 'value_counts', 'merge', 'head', 'head', 'head', 'mean', 'diff', 'abs', 'diff', 'mean', 'groupby', 'median', 'groupby', 'max', 'groupby', 'min', 'groupby', 'std', 'groupby', 'apply', 'groupby', 'mean', 'abs', 'diff', 'apply', 'groupby', 'apply', 'groupby', 'max', 'abs', 'apply', 'groupby', 'min', 'abs', 'head', 'std', 'array', 'array', 'array', 'skew', 'groupby', 'groupby', 'quantile', 'groupby', 'quantile', 'groupby', 'quantile', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'nunique', 'round', 'nunique', 'round', 'idxmax', 'value_counts', 'max', 'min', 'sum', 'abs', 'corr', 'corr', 'sort_values', 'stack', 'where', 'astype', 'bool', 'reset_index', 'head', 'fillna', 'fillna', 'replace', 'replace', 'replace', 'replace', 'head', 'value_counts', 'head', 'astype', 'sum', 'max', 'product', 'to_csv', 'head', 'read_csv', 'to_csv', 'head', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'rename', 'rename', 'rename', 'rename', 'rename', 'head', 'concat', 'head', 'head', 'nunique', 'transform', 'groupby', 'sort_values', 'drop', 'drop_duplicates', 'head', 'tail', 'read_csv', 'read_csv', 'read_csv', 'unique', 'copy', 'copy', 'apply', 'groupby', 'apply', 'groupby', 'unique', 'head', 'head', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'itertools', 'matplotlib.style', 'warnings', 'gc', 'math', 'matplotlib.pyplot', 'math', 'matplotlib.pyplot', 'matplotlib.style'] ['time', 'preprocessing', 'accuracy_score', 'stats', 'norm', 'StandardScaler', 'rcParams', 'jit', 'countplot', 'lineplot', 'barplot', 'jit', 'SelectKBest', 'chi2', 'preprocessing', 'randint', 'LabelEncoder', 'KFold', 'RandomForestClassifier', 'KFold', 'StratifiedKFold', 'accuracy_score', 'confusion_matrix', 'confusion_matrix', 'LeaveOneGroupOut', 'GroupKFold', 'GridSearchCV', 'RandomizedSearchCV', 'kurtosis', 'skew', '*']Dict:{'numpy': [], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'array', 'merge', 'pivot'], 'os': ['rename', 'replace'], 'time': [], 'sklearn': ['transform'], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'numba': [], 'itertools': ['count', 'product', 'groupby'], 'warnings': [], 'gc': [], 'math': []} axis_0: 1, axis_1: 6
nesp-ml-deep-feature-engineering-with-esm-pdb.py : ['abs', 'set_index', 'read_csv', 'keys', 'keys', 'mean', 'mean', 'read_csv', 'update', 'items', 'keys', 'min', 'max', 'abs', 'min', 'max', 'abs', 'min', 'max', 'abs', 'min', 'max', 'abs', 'min', 'max', 'abs', 'min', 'max', 'abs', 'min', 'max', 'abs', 'to_numpy', 'transform', 'transform', 'transform', 'astype', 'keys', 'unique', 'reset_index', 'mean', 'std', 'copy', 'reset_index', 'mean', 'groupby', 'astype', 'clip', 'round', 'map', 'items', 'array', 'array', 'array', 'array', 'iterrows', 'mean', 'std', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'isin', 'array', 'mean', 'mean', 'mean', 'isin', 'array', 'mean', 'mean', 'mean', 'isin', 'array', 'mean', 'mean', 'mean', 'dot', 'dot', 'dot', 'isin', 'array', 'mean', 'mean', 'mean', 'dot', 'dot', 'dot', 'max', 'min', 'reset_index', 'mean', 'groupby', 'map', 'items', 'get', 'get', 'get', 'get', 'update', 'to_dict', 'std', 'array', 'mean', 'mean', 'std', 'std', 'update', 'keys', 'update', 'read_csv', 'transform', 'transform', 'drop', 'reset_index', 'sample', 'head', 'info', 'lt', 'gt', 'reset_index', 'reset_index', 'transform', 'transform', 'astype', 'astype', 'drop', 'astype', 'keys', 'mean', 'items', 'keys', 'sum', 'stack', 'items', 'mean', 'stack', 'max', 'mean', 'stack', 'max', 'sort_values', 'read_csv', 'reset_index', 'transform', 'transform', 'drop', 'astype', 'keys', 'copy', 'transform', 'sum', 'stack', 'items', 'read_csv', 'isna', 'isna', 'describe', 'min', 'abs', 'mean', 'isna', 'std', 'read_csv', 'to_csv', 'head'] ['os', 'sys', 'random', 'gc', 'copy', 'pandas', 'numpy', 'pickle', 'seaborn', 'sklearn', 'optuna', 'lightgbm', 'xgboost', 'catboost', 'cuml', 'cupy', 'warnings', 'operator'] ['time', 'PandasPdb', 'random', 'tqdm', 'pyplot', 'linear_model', 'model_selection', 'cosine_similarity', 'permutations', 'combinations', 'StandardScaler', 'MinMaxScaler', 'LabelEncoder', 'OneHotEncoder', 'metrics', 'model_selection', 'MLPRegressor', 'Trial', 'create_study', 'TPESampler', 'PDBParser', 'ResidueDepth', 'ShrakeRupley', 'ProteinAnalysis', 'softmax', 'entropy', 'expit', 'distance', 'PCA', 'TruncatedSVD', 'PCA', 'TruncatedSVD', 'MatrixInfo', 'rankdata', 'spearmanr']Dict:{'os': [], 'sys': [], 'random': ['sample'], 'gc': [], 'time': [], 'copy': ['copy'], 'pandas': ['isna', 'array', 'unique', 'read_csv'], 'biopandas': [], 'numpy': [], 'pickle': [], 'tqdm': ['update'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'itertools': [], 'optuna': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'Bio': [], 'scipy': [], 'warnings': [], 'operator': ['lt', 'abs', 'gt']} axis_0: 7, axis_1: 5
titanic-voting-pipeline-stack-and-guide.py : ['read_csv', 'read_csv', 'copy', 'copy', 'drop', 'concat', 'apply', 'replace', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'drop', 'fillna', 'mode', 'fillna', 'mean', 'astype', 'map', 'map', 'fillna', 'mode', 'astype', 'astype', 'map', 'drop', 'head', 'hist', 'concat', 'corr', 'concat', 'transform', 'drop', 'value_counts', 'value_counts', 'value_counts', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'keys', 'mean', 'crosstab', 'mean', 'keys', 'keys', 'keys', 'keys', 'mean', 'astype', 'astype', 'astype', 'to_csv', 'astype', 'astype', 'astype', 'to_csv', 'head', 'mode', 'to_csv', 'head', 'array', 'mean', 'astype', 'to_csv', 'head', 'keys', 'astype', 'astype', 'astype', 'keys', 'keys', 'sort_values', 'query', 'query', 'query', 'mean', 'std', 'concat', 'concat', 'concat', 'to_csv', 'mean', 'std', 'concat', 'concat', 'concat', 'concat', 'concat', 'to_csv', 'get', 'get', 'mean', 'std', 'mean', 'std', 'to_csv', 'concat', 'concat', 'concat', 'concat', 'get', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'get', 'get', 'mean', 'std', 'mean', 'std', 'to_csv', 'set_index', 'concat', 'set_index', 'concat', 'set_index', 'concat', 'set_index', 'concat', 'set_index', 'set_index', 'set_index', 'set_index', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'sort_values', 'to_csv', 'head', 'sort_values', 'sort_values', 'max', 'array', 'min', 'array', 'mean', 'array', 'median', 'array', 'std', 'array', 'concat', 'concat', 'concat', 'mean', 'to_csv', 'sort_values', 'idxmin', 'idxmin', 'idxmin', 'idxmin', 'astype', 'astype', 'concat', 'astype', 'to_csv', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values'] ['pandas', 'numpy', 'random', 'os', 're', 'itertools', 'seaborn', 'matplotlib.pyplot', 'scikitplot', 'xgboost', 'hyperopt', 'lightgbm', 'statsmodels.api', 'scipy.stats', 'warnings', 'time', 'datetime', 'platform', 'time'] ['LogisticRegression', 'GaussianNB', 'SVC', 'LinearSVC', 'RandomForestClassifier', 'AdaBoostClassifier', 'BaggingClassifier', 'GradientBoostingClassifier', 'DecisionTreeClassifier', 'KNeighborsClassifier', 'GaussianNB', 'Perceptron', 'SGDClassifier', 'StratifiedKFold', 'MLPClassifier', 'feature_selection', 'XGBClassifier', 'Pool', 'CatBoostClassifier', 'PCA', 'train_test_split', 'metrics', 'cross_val_score', 'confusion_matrix', 'roc_curve', 'auc', 'accuracy_score', 'StandardScaler', 'StratifiedShuffleSplit', 'RFE', 'GridSearchCV', 'RandomizedSearchCV', 'make_pipeline', 'Pipeline', 'EnsembleVoteClassifier', 'metrics', 'classification_report', 'accuracy_score', 'StandardScaler', 'metrics', 'ListedColormap', 'preprocessing', 'cross_val_score', 'LogisticRegression']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'array', 'crosstab'], 'numpy': ['mean', 'median', 'max', 'array', 'min', 'isin', 'std', 'copy'], 'random': [], 'os': ['replace'], 're': [], 'itertools': ['groupby'], 'seaborn': [], 'matplotlib': ['copy'], 'scikitplot': [], 'sklearn': [], 'xgboost': [], 'hyperopt': [], '#CatBoost': [], 'catboost': [], 'lightgbm': [], 'statsmodels': [], 'scipy': ['mode'], 'mlxtend': [], 'warnings': [], 'time': [], 'datetime': [], 'platform': []} axis_0: 7, axis_1: 29
ps-s3e24-smoker-status-predictions.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'any', 'any', 'isnull', 'any', 'any', 'isnull', 'any', 'any', 'isnull', 'head', 'value_counts', 'copy', 'corr', 'concat', 'drop_duplicates', 'where', 'where', 'where', 'where', 'where', 'where', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'drop', 'reset_index', 'reset_index', 'keys', 'array', 'array', 'items', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'gc', 'warnings', 'optuna', 'xgboost', 'lightgbm'] ['deepcopy', 'partial', 'RocCurveDisplay', 'confusion_matrix', 'ConfusionMatrixDisplay', 'train_test_split', 'StratifiedKFold', 'KFold', 'roc_auc_score', 'accuracy_score', 'log_loss', 'f1_score', 'precision_score', 'recall_score', 'StandardScaler', 'MinMaxScaler', 'LabelEncoder', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'RandomUnderSampler', 'preprocessing', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'VotingClassifier', 'BalancedRandomForestClassifier', 'KNNImputer', 'Pipeline', 'NuSVC', 'SVC', 'KNeighborsClassifier', 'LogisticRegressionCV', 'LogisticRegression', 'MLPClassifier', 'GaussianProcessClassifier', 'RBF', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool']Dict:{'numpy': ['mean', 'any', 'array', 'where', 'clip', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'array'], 'matplotlib': [], 'seaborn': [], 'random': [], 'os': [], 'copy': [], 'functools': [], 'gc': [], 'warnings': [], 'sklearn': [], 'category_encoders': [], 'imblearn': [], 'optuna': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 2, axis_1: 4
feature-engineering-xgboost-lgbm-baseline.py : ['read_csv', 'head', 'unique', 'read_csv', 'head', 'groupby', 'unique', 'groupby', 'read_parquet', 'read_parquet', 'diff', 'sum', 'mean', 'read_parquet', 'apply', 'groupby', 'apply', 'groupby', 'isnull', 'reset_index', 'agg', 'groupby', 'apply', 'reset_index', 'agg', 'groupby', 'sort_values', 'min', 'max', 'pct_change', 'pct_change', 'pct_change', 'pct_change', 'fillna', 'reset_index', 'apply', 'groupby', 'fillna', 'reset_index', 'apply', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'mean', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'concat', 'mean', 'head', 'head', 'merge', 'head', 'info', 'merge', 'fillna', 'to_pickle', 'to_pickle', 'drop', 'drop', 'drop', 'assign', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'os', 'glob', 'gc'] ['r2_score', 'tqdm', 'Parallel', 'delayed', 'train_test_split', 'KFold', 'LGBMRegressor', 'XGBRegressor']Dict:{'pandas': ['to_pickle', 'read_csv', 'isnull', 'concat', 'read_parquet', 'unique', 'merge'], 'numpy': ['mean', 'max', 'diff', 'sum', 'min', 'unique', 'info'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'os': [], 'glob': [], 'tqdm': [], 'joblib': [], 'gc': [], 'lightgbm': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 0
house-prices-eda-linear-regression.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'to_csv', 'astype', 'astype', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'select_dtypes', 'select_dtypes', 'nunique', 'mean', 'sort_values', 'sum', 'isna', 'duplicated', 'sum', 'select_dtypes', 'select_dtypes', 'nunique', 'unique', 'concat', 'head', 'sort_values', 'crosstab', 'nunique', 'unique', 'dropna', 'select_dtypes', 'select_dtypes', 'describe', 'var', 'skew', 'kurtosis', 'transpose', 'sort_values', 'skew', 'sample', 'sort_values', 'skew', 'sort_values', 'kurtosis', 'sum', 'isna', 'corr', 'dropna', 'corr', 'select_dtypes', 'nunique', 'nunique', 'sort_values', 'skew', 'select_dtypes', 'rename', 'copy', 'rename', 'concat', 'skew', 'head', 'transform', 'transform', 'copy', 'reset_index', 'reset_index', 'copy', 'head', 'update'] ['os', 'time', 'pandas', 'numpy', 'matplotlib', 'matplotlib.pylab', 'seaborn', 'missingno'] ['List', 'Set', 'Dict', 'Tuple', 'Optional', 'Path', 'train_test_split', 'LinearRegression', 'Lasso', 'Ridge', 'SimpleImputer', 'KFold', 'StratifiedKFold', 'impute', 'preprocessing', 'linear_model', 'accuracy_score', 'model_selection', 'metrics', 'boxcox1p', 'boxcox_normmax', 'cycle', 'mode', 'SimpleImputer']Dict:{'typing': [], 'os': ['rename'], 'time': [], 'pathlib': ['rename'], 'pandas': ['isna', 'read_csv', 'concat', 'unique', 'crosstab'], 'numpy': ['transpose', 'mean', 'var', 'sum', 'unique', 'std', 'copy'], 'sklearn': [], 'scipy': [], 'matplotlib': ['transpose', 'mean', 'var', 'sum', 'sample', 'unique', 'std', 'copy'], 'seaborn': [], 'missingno': [], 'itertools': []} axis_0: 0, axis_1: 4
jane-day-242-feature-generation-and-selection.py : ['info', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'info', 'sum', 'sum', 'isnull', 'max', 'min', 'min', 'fillna', 'info', 'sum', 'sum', 'isnull', 'astype', 'mean', 'query', 'astype', 'min', 'astype', 'astype', 'info', 'drop', 'info', 'reset_index', 'sort_values', 'unstack', 'abs', 'corr', 'rename', 'dropna', 'head', 'head', 'copy', 'value_counts', 'astype', 'value_counts', 'reset_index', 'sort_values', 'unstack', 'abs', 'corr', 'rename', 'dropna', 'head', 'head', 'reset_index', 'sort_values', 'unstack', 'abs', 'corr', 'rename', 'dropna', 'reset_index', 'astype', 'min', 'astype', 'astype', 'drop', 'query', 'query', 'drop', 'var'] ['numpy', 'pandas', 'datatable', 'seaborn', 'graphviz', 'shap', 'gc', 'warnings'] ['pyplot', 'RandomForestClassifier', 'SelectKBest', 'f_classif', 'tree']Dict:{'numpy': ['mean', 'max', 'var', 'abs', 'sum', 'min', 'info', 'copy'], 'pandas': ['isnull', 'value_counts'], 'datatable': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'graphviz': [], 'shap': [], 'gc': [], 'warnings': []} axis_0: 0, axis_1: 3
feature-engineering-ensembles.py : ['read_csv', 'read_csv', 'info', 'sample', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'median', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'sample', 'qcut', 'cut', 'astype', 'value_counts', 'value_counts', 'value_counts', 'apply', 'info', 'info', 'sample', 'sum', 'isnull', 'info', 'sum', 'isnull', 'info', 'describe', 'mean', 'mean', 'mean', 'mean', 'mean', 'std', 'sort_values', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'to_csv'] ['random', 'time', 'numpy', 'pandas', 'os', 'warnings', 'matplotlib', 'matplotlib.pyplot', 'matplotlib.pylab', 'seaborn'] ['accuracy_score', 'roc_auc_score', 'train_test_split', 'LabelEncoder', 'svm', 'tree', 'linear_model', 'neighbors', 'naive_bayes', 'ensemble', 'discriminant_analysis', 'gaussian_process', 'XGBClassifier', 'OneHotEncoder', 'LabelEncoder', 'feature_selection', 'model_selection', 'metrics', 'scatter_matrix']Dict:{'random': ['sample'], 'time': [], 'numpy': ['mean', 'median', 'sum', 'info', 'std'], 'pandas': [], 'os': [], 'sklearn': [], 'xgboost': ['apply'], 'warnings': [], 'matplotlib': ['mean', 'median', 'sum', 'sample', 'info', 'std'], 'seaborn': []} axis_0: 0, axis_1: 0
a-reference-guide-to-feature-engineering-methods.py : ['join', 'read_csv', 'copy', 'mean', 'isnull', 'dropna', 'dropna', 'copy', 'mean', 'isnull', 'hist', 'median', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'copy', 'mean', 'isnull', 'fillna', 'fillna', 'sample', 'dropna', 'sum', 'isnull', 'isnull', 'isnull', 'fillna', 'copy', 'fillna', 'fillna', 'copy', 'hist', 'mean', 'std', 'boxplot', 'fillna', 'fillna', 'median', 'mean', 'std', 'median', 'mean', 'std', 'copy', 'where', 'isnull', 'where', 'isnull', 'head', 'mean', 'median', 'fillna', 'median', 'fillna', 'median', 'head', 'copy', 'head', 'head', 'get_dummies', 'head', 'concat', 'get_dummies', 'head', 'get_dummies', 'head', 'unique', 'head', 'get_dummies', 'head', 'get_dummies', 'read_csv', 'read_csv', 'head', 'unique', 'to_dict', 'value_counts', 'head', 'to_dict', 'value_counts', 'map', 'map', 'head', 'read_csv', 'head', 'fillna', 'head', 'unique', 'astype', 'head', 'unique', 'mean', 'groupby', 'to_dict', 'mean', 'groupby', 'map', 'map', 'head', 'mean', 'groupby', 'mean', 'groupby', 'head', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'to_dict', 'to_dict', 'map', 'map', 'head', 'mean', 'groupby', 'mean', 'groupby', 'read_csv', 'head', 'copy', 'sample', 'dropna', 'sum', 'isnull', 'isnull', 'isnull', 'hist', 'array', 'value_counts', 'cut', 'array', 'value_counts', 'qcut', 'read_csv', 'head', 'copy', 'sample', 'dropna', 'sum', 'isnull', 'isnull', 'isnull', 'sum', 'isnull', 'value_counts', 'cut', 'cut', 'cut', 'head', 'tail', 'count', 'groupby', 'read_csv', 'head', 'boxplot', 'boxplot', 'hist', 'hist', 'mean', 'std', 'mean', 'std', 'quantile', 'quantile', 'quantile', 'quantile', 'describe', 'mean', 'std', 'max', 'max', 'describe', 'quantile', 'quantile', 'quantile', 'max', 'max', 'read_csv', 'head', 'to_datetime', 'to_datetime', 'head', 'head', 'tail', 'head', 'tail', 'where', 'isin', 'head', 'head', 'head', 'tail', 'head', 'tail', 'where', 'isin', 'head', 'head', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'pylab', 'scipy.stats', 'datetime', 'os', 'warnings'] ['train_test_split']Dict:{'numpy': ['mean', 'median', 'quantile', 'max', 'sum', 'array', 'where', 'unique', 'isin', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'get_dummies', 'unique', 'qcut', 'array', 'to_datetime'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'pylab': ['mean', 'median', 'boxplot', 'quantile', 'max', 'sum', 'array', 'where', 'sample', 'unique', 'hist', 'isin', 'std', 'copy'], '': [], 'scipy': ['describe'], 'datetime': [], 'os': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 1
amex-hyperparameter-tuning-with-weights-biases.py : ['read_csv', 'astype', 'apply', 'set_axis', 'drop', 'read_pickle', 'read_pickle', 'astype', 'drop', 'info', 'info', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'astype', 'keys', 'sort_values', 'to_pickle'] ['os', 'gc', 'glob', 'tqdm', 'numpy', 'pandas', 'wandb', 'xgboost', 'pprint'] ['UserSecretsClient', 'train_test_split']Dict:{'os': [], 'gc': [], 'glob': [], 'tqdm': [], 'numpy': ['transpose', 'sum', 'where', 'info', 'array', 'cumsum'], 'pandas': ['to_pickle', 'array', 'read_pickle', 'read_csv'], 'wandb': [], 'kaggle_secrets': [], 'sklearn': [], 'xgboost': [], 'pprint': []} axis_0: 0, axis_1: 2
feature-engineering-and-several-ml-algos.py : ['read_csv', 'drop', 'head', 'boxplot', 'boxplot', 'boxplot', 'groupby', 'boxplot', 'mean', 'groupby', 'boxplot', 'merge', 'count', 'groupby', 'mean', 'groupby', 'merge', 'count', 'groupby', 'sum', 'groupby', 'merge', 'count', 'groupby', 'mean', 'groupby', 'merge', 'count', 'groupby', 'mean', 'groupby', 'merge', 'count', 'groupby', 'sum', 'groupby', 'drop', 'apply', 'head', 'merge', 'count', 'groupby', 'mean', 'groupby', 'drop', 'head', 'fillna', 'head', 'apply', 'apply', 'head', 'merge', 'count', 'groupby', 'mean', 'groupby', 'merge', 'count', 'groupby', 'mean', 'groupby', 'apply', 'head', 'merge', 'count', 'groupby', 'mean', 'groupby', 'drop', 'head', 'drop', 'head', 'merge', 'count', 'groupby', 'mean', 'groupby', 'apply', 'drop', 'head', 'fillna', 'mean', 'get_dummies', 'head', 'drop', 'drop', 'head', 'mean', 'mean', 'mean', 'mean'] ['pandas', 'numpy', 'matplotlib.pyplot'] ['train_test_split', 'KNeighborsClassifier', 'GaussianNB', 'MultinomialNB', 'BernoulliNB', 'cross_val_score', 'DecisionTreeClassifier']Dict:{'pandas': ['get_dummies', 'merge', 'read_csv'], 'numpy': ['mean', 'sum'], 'matplotlib': ['boxplot'], 'sklearn': []} axis_0: 0, axis_1: 0
go-daddy-time-series-model-techniques.py : ['join', 'abs', 'abs', 'abs', 'mean', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'info', 'info', 'info', 'hist', 'hist', 'hist', 'describe', 'describe', 'describe', 'nunique', 'nunique', 'nunique', 'value_counts', 'isin', 'value_counts', 'isin', 'head', 'mean', 'mean', 'sort_values', 'mean', 'merge', 'merge', 'merge', 'drop', 'drop', 'drop', 'mean', 'sort_values', 'mean', 'to_csv', 'describe'] ['numpy', 'pandas', 'os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'matplotlib'] ['KMeans', 'GroupKFold', 'metrics', 'KFold', 'TimeSeriesSplit', 'CatBoostRegressor', 'LGBMRegressor', 'XGBRegressor']Dict:{'numpy': ['mean', 'isin', 'info', 'abs'], 'pandas': ['merge', 'read_csv', 'value_counts'], 'os': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'catboost': [], 'lightgbm': [], 'xgboost': []} axis_0: 0, axis_1: 3
feature-engineering-by-x-means.py : ['read_csv', 'read_csv', 'info', 'sum', 'isnull', 'sum', 'isnull', 'head', 'head', 'value_counts', 'value_counts', 'value_counts', 'fillna', 'median', 'fillna', 'median', 'drop', 'drop', 'fillna', 'fillna', 'median', 'head', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'drop', 'drop', 'drop', 'drop', 'join', 'get_dummies', 'join', 'get_dummies', 'join', 'get_dummies', 'join', 'get_dummies', 'drop', 'drop', 'concat', 'drop', 'drop', 'array', 'array', 'mean', 'drop', 'drop', 'head', 'drop', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'numpy'] ['StratifiedKFold', 'KMeans', 'xmeans', 'kmeans_plusplus_initializer', 'draw_clusters', 'AdaBoostClassifier', 'BaggingClassifier', 'ExtraTreesClassifier', 'GradientBoostingClassifier', 'RandomForestClassifier', 'VotingClassifier']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'array'], 'matplotlib': [], 'numpy': ['mean', 'median', 'sum', 'info', 'array'], 'sklearn': [], 'pyclustering': []} axis_0: 1, axis_1: 12
fastai-nn-baseline-with-feature-engineering.py : ['read_csv', 'dropna', 'fillna', 'reset_index', 'sort_values', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'max', 'groupby', 'min', 'groupby', 'min', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'first', 'groupby', 'first', 'groupby', 'last', 'groupby', 'last', 'groupby', 'copy', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'where', 'astype', 'eval', 'max', 'min', 'sum', 'replace', 'fillna', 'unique', 'max', 'unique', 'replace', 'fillna'] ['pandas', 'numpy', 'gc', 'optiver2023'] ['combinations', '*']Dict:{'pandas': ['eval', 'unique', 'read_csv'], 'numpy': ['mean', 'median', 'max', 'sum', 'where', 'min', 'unique', 'std', 'copy'], 'itertools': [], 'gc': [], 'fastai': [], 'optiver2023': []} axis_0: 0, axis_1: 3
initial-eda.py : ['read_csv', 'read_csv', 'apply', 'to_datetime', 'apply', 'to_datetime', 'sort_values', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'keys', 'head', 'sort_values', 'value_counts', 'fillna', 'head', 'sort_values', 'value_counts', 'fillna', 'min', 'max', 'min', 'max', 'concat', 'drop', 'head', 'head', 'unique', 'pop', 'head', 'unique', 'astype', 'head', 'notnull', 'isnull', 'apply', 'astype', 'astype', 'head', 'copy', 'reset_index', 'value_counts', 'value_counts', 'value_counts', 'corr', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'boxplot', 'apply', 'apply', 'apply', 'apply', 'where', 'get_dummies', 'drop', 'get_dummies', 'transform', 'astype', 'join', 'mean', 'to_csv', 'where'] ['warnings', 'seaborn', 'xgboost', 'pickle', 'numpy', 'pandas'] ['division', 'print_function', 'pyplot', 'train_test_split', 'cross_val_predict', 'TimeSeriesSplit', 'validation_curve', 'learning_curve', 'confusion_matrix', 'csr_matrix', 'hstack', 'StandardScaler', 'roc_auc_score', 'TfidfVectorizer', 'TfidfTransformer', 'LogisticRegressionCV', 'LogisticRegression', 'cross_val_score', 'StratifiedKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit', 'accuracy_score', 'roc_curve', 'auc', 'RandomForestRegressor', 'RandomForestClassifier', 'cluster', 'pyplot']Dict:{'__future__': [], 'warnings': [], 'matplotlib': [], 'seaborn': ['boxplot'], 'xgboost': [], 'sklearn': ['apply'], 'pickle': [], 'numpy': ['mean', 'max', 'where', 'min', 'unique', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull', 'to_datetime'], 'scipy': []} axis_0: 0, axis_1: 5
eda-to-prediction-dietanic.py : ['read_csv', 'head', 'sum', 'isnull', 'value_counts', 'count', 'groupby', 'mean', 'groupby', 'crosstab', 'value_counts', 'crosstab', 'max', 'min', 'mean', 'crosstab', 'replace', 'mean', 'groupby', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'any', 'isnull', 'hist', 'hist', 'crosstab', 'fillna', 'any', 'isnull', 'crosstab', 'crosstab', 'crosstab', 'max', 'min', 'mean', 'corr', 'head', 'value_counts', 'qcut', 'mean', 'groupby', 'replace', 'replace', 'replace', 'drop', 'corr', 'max', 'mean', 'std', 'boxplot', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'sort_values', 'sort_values', 'sort_values', 'sort_values'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'xgboost'] ['LogisticRegression', 'svm', 'RandomForestClassifier', 'KNeighborsClassifier', 'GaussianNB', 'DecisionTreeClassifier', 'train_test_split', 'metrics', 'confusion_matrix', 'KFold', 'cross_val_score', 'cross_val_predict', 'GridSearchCV', 'VotingClassifier', 'BaggingClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier']Dict:{'numpy': ['mean', 'any', 'max', 'sum', 'min', 'std'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'qcut', 'crosstab'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'warnings': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 1
xtreme-boost-and-feature-engineering.py : ['join', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'head', 'drop', 'drop', 'sum', 'isna', 'sum', 'isna', 'map', 'map', 'map', 'map', 'map', 'map', 'reset_index', 'map', 'map', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'map', 'value_counts', 'map', 'value_counts', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'copy', 'drop', 'copy', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'fillna', 'transform', 'transform', 'copy', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'seaborn', 'matplotlib.pyplot', 'xgboost', 'matplotlib.pyplot', 'gc'] ['preprocessing', 'KFold', 'roc_auc_score', 'preprocessing', 'XGBClassifier']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'merge'], 'os': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'xgboost': [], 'gc': []} axis_0: 0, axis_1: 5
fast-feature-importance-using-scikit-learn-intelex.py : ['read_csv', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'info', 'drop'] ['pandas', 'numpy', 'warnings', 'matplotlib.pyplot', 'gc', 'logging', 'eli5', 'eli5'] ['HTML', 'patch_sklearn', 'train_test_split', 'default_timer', 'permutation_importance', 'RandomForestClassifier', 'figure_factory', 'PermutationImportance', 'default_timer', 'KFold', 'roc_auc_score', 'KFold', 'roc_auc_score', 'unpatch_sklearn', 'permutation_importance', 'RandomForestClassifier', 'PermutationImportance', 'default_timer', 'RandomForestClassifier']Dict:{'pandas': ['read_csv'], 'numpy': ['info'], 'IPython': [], 'warnings': [], 'matplotlib': [], 'gc': [], 'sklearnex': [], 'logging': ['info'], 'sklearn': [], 'timeit': [], 'plotly': [], 'eli5': []} axis_0: 0, axis_1: 0
score-1-3818.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'drop', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'shift', 'groupby', 'transform', 'groupby', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'read_csv', 'merge', 'fillna', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isnull', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'read_csv', 'read_csv', 'astype', 'astype', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'set_index', 'join', 'drop', 'copy', 'to_csv'] ['gc', 'numpy', 'pandas', 'os', 'lightgbm', 'xgboost', 'catboost'] ['HTML', 'tqdm', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'IPython': [], 'gc': [], 'numpy': ['mean', 'abs', 'sum', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'os': [], 'tqdm': []} axis_0: 0, axis_1: 1
feature-engineering-xgb.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'head', 'head', 'head', 'apply', 'apply', 'apply', 'apply', 'apply', 'head', 'head', 'mean', 'mean', 'mean', 'reset_index', 'sort_values', 'mean', 'to_csv'] ['re', 'string', 'numpy', 'pandas'] ['XGBRegressor', 'stopwords', 'mean_squared_error', 'GroupKFold']Dict:{'re': [], 'string': [], 'numpy': ['mean'], 'pandas': ['merge', 'read_csv'], 'xgboost': ['apply'], 'nltk': [], 'sklearn': []} axis_0: 0, axis_1: 1
qa-prediction-question-not-really-a-question.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'info', 'sum', 'sum', 'head', 'head', 'fillna', 'fillna', 'drop', 'drop', 'head', 'head', 'head', 'info', 'info', 'insert', 'insert', 'insert', 'insert', 'insert', 'insert', 'insert', 'insert', 'insert', 'insert', 'insert', 'insert', 'sort_values', 'mean', 'sort_values', 'sort_values', 'sort_values'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'eli5', 'pandas_profiling', 'sklearn.model_selection', 'xgboost', 'lightgbm', 'warnings'] ['show_prediction', 'preprocessing', 'LabelEncoder', 'StandardScaler', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'StratifiedKFold', 'LinearRegression', 'SGDRegressor', 'RidgeCV', 'SVR', 'LinearSVR', 'RandomForestRegressor', 'GradientBoostingRegressor', 'ExtraTreesRegressor', 'BaggingRegressor', 'AdaBoostRegressor', 'VotingRegressor', 'MLPRegressor', 'DecisionTreeRegressor', 'cross_val_predict', 'metrics', 'r2_score', 'mean_absolute_error', 'mean_squared_error', 'STATUS_OK', 'Trials', 'fmin', 'hp', 'tpe', 'space_eval']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'info', 'insert'], 'pandas': ['read_csv'], 'matplotlib': [], 'seaborn': [], 'eli5': [], 'sklearn': [], 'pandas_profiling': [], 'xgboost': [], 'lightgbm': [], 'hyperopt': [], 'warnings': []} axis_0: 0, axis_1: 2
xgboost-model-with-minimalistic-features.py : ['read_csv', 'astype', 'drop', 'read_csv', 'head', 'boxplot', 'sum', 'isnull', 'apply', 'rename', 'replace', 'fillna', 'transform', 'groupby', 'value_counts', 'value_counts', 'apply', 'max', 'astype', 'copy', 'head', 'corr', 'tail', 'copy', 'concat', 'copy', 'astype', 'corr', 'to_csv'] ['pandas', 'numpy', 're', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'warnings'] ['XGBClassifier', 'GradientBoostingClassifier', 'partial_dependence', 'plot_partial_dependence']Dict:{'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'numpy': ['sum', 'max', 'copy'], 're': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'xgboost': ['apply'], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 2
ps3e17-eda-feature-engineering-ensemble.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'drop', 'concat', 'reset_index', 'head', 'count', 'count', 'nunique', 'value_counts', 'nunique', 'max', 'max', 'max', 'min', 'min', 'min', 'boxplot', 'corr', 'astype', 'astype', 'astype', 'round', 'astype', 'astype', 'round', 'nunique', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'fillna', 'fillna', 'fillna', 'transform', 'transform', 'concat', 'concat', 'concat', 'mean', 'mean', 'mean', 'mean', 'unique', 'unique', 'replace', 'replace', 'concat', 'get_dummies', 'value_counts', 'idxmin', 'drop', 'concat', 'drop', 'duplicated', 'reset_index', 'drop', 'to_dict', 'value_counts', 'map', 'map', 'map', 'to_dict', 'value_counts', 'keys', 'replace', 'replace', 'replace', 'nunique', 'drop', 'drop', 'transform', 'transform', 'array', 'array', 'array', 'mean', 'corr', 'transform', 'transform', 'array', 'array', 'array', 'mean', 'groupby', 'to_dict', 'map', 'map', 'map', 'mean', 'mean', 'mean', 'mean', 'corrwith', 'drop', 'max', 'abs', 'max', 'abs', 'nunique', 'nunique', 'abs', 'corr', 'transform', 'transform', 'concat', 'concat', 'array', 'array', 'mean', 'groupby', 'to_dict', 'map', 'map', 'mean', 'drop', 'drop', 'nunique', 'transform', 'sub', 'drop', 'copy', 'nunique', 'nunique', 'update', 'copy', 'copy', 'array', 'array', 'array', 'array', 'array', 'astype', 'mean', 'sort_values', 'where', 'items', 'array', 'array', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'read_csv', 'to_csv', 'head'] ['sklearn', 'numpy', 'os', 'datetime', 'pandas', 'matplotlib.pyplot', 'missingno', 'seaborn', 'concurrent.futures', 'random', 'gc', 'xgboost', 'statsmodels.api', 'math', 'optuna', 'xgboost', 'lightgbm', 're', 'warnings', 'matplotlib.colors'] ['PrettyTable', 'tqdm', 'tqdm', 'deepcopy', 'partial', 'combinations', 'randint', 'uniform', 'f_classif', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'FunctionTransformer', 'metrics', 'GridSearchCV', 'RandomizedSearchCV', 'combinations', 'SimpleImputer', 'train_test_split', 'cross_val_score', 'mean_squared_error', 'mean_squared_log_error', 'roc_auc_score', 'accuracy_score', 'f1_score', 'precision_recall_curve', 'log_loss', 'KMeans', 'KElbowVisualizer', 'OptimalK', 'stats', 'ttest_ind', 'boxcox', 'variance_inflation_factor', 'BaseEstimator', 'TransformerMixin', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StratifiedKFold', 'KFold', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'AdaBoostClassifier', 'GaussianNB', 'DecisionTreeClassifier', 'LogisticRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'NuSVC', 'SVC', 'KNeighborsClassifier', 'KNNImputer', 'LogisticRegression', 'MLPClassifier', 'Pool', 'TfidfVectorizer', 'PCA', 'TruncatedSVD']Dict:{'sklearn': ['transform'], 'numpy': ['mean', 'max', 'abs', 'array', 'where', 'round', 'min', 'unique', 'std', 'copy'], 'os': ['replace'], 'datetime': [], 'pandas': ['read_csv', 'concat', 'value_counts', 'get_dummies', 'unique', 'array'], 'matplotlib': [], 'missingno': [], 'prettytable': ['copy'], 'seaborn': ['boxplot'], 'tqdm': ['update'], 'concurrent': [], 'copy': [], 'functools': [], 'itertools': [], 'random': [], 'gc': [], 'xgboost': [], 'yellowbrick': [], 'gap_statistic': [], 'scipy': [], 'statsmodels': [], 'math': [], 'optuna': [], 'lightgbm': [], 'category_encoders': [], 'imblearn': [], 'catboost': [], 're': ['sub'], 'warnings': []} axis_0: 5, axis_1: 8
shap-on-titanic-why-is-rose-alive-but-jack-not.py : ['join', 'read_csv', 'read_csv', 'info', 'head', 'mean', 'groupby', 'count', 'groupby', 'sum', 'merge', 'unique', 'qcut', 'fillna', 'median', 'unique', 'qcut', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'astype', 'map', 'apply', 'apply', 'replace', 'replace', 'replace', 'replace', 'mean', 'copy', 'unique', 'mean', 'mean', 'mean', 'sum', 'mean', 'mean', 'array', 'copy'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 're', 'matplotlib.pyplot', 'seaborn', 'shap', 'seaborn', 'chart_studio.plotly', 'plotly.graph_objs'] ['XGBRegressor', 'XGBClassifier', 'cross_val_score', 'fmin', 'tpe', 'hp', 'STATUS_OK', 'Trials', 'space_eval', 'hclust_ordering', 'TSNE', 'MDS', 'tools', 'init_notebook_mode', 'iplot', 'StandardScaler', 'RobustScaler', 'MinMaxScaler']Dict:{'numpy': ['mean', 'median', 'sum', 'unique', 'info', 'array', 'copy'], 'pandas': ['read_csv', 'unique', 'qcut', 'array', 'merge'], 'os': ['replace'], 're': [], 'matplotlib': [], 'seaborn': [], 'xgboost': ['apply'], 'shap': [], 'sklearn': [], 'hyperopt': [], 'plotly': [], 'chart_studio': []} axis_0: 2, axis_1: 0
keras-model-tuning-with-optuna.py : ['read_csv', 'drop', 'transform', 'items'] ['numpy', 'pandas', 'optuna', 'matplotlib.pyplot', 'tensorflow'] ['TFKerasPruningCallback', 'TrialState', 'plot_intermediate_values', 'plot_optimization_history', 'plot_param_importances', 'plot_contour', 'keras', '*', '*', 'EarlyStopping', 'LearningRateScheduler', 'ExponentialDecay', 'RobustScaler', 'normalize', 'train_test_split', 'load', 'add_features']Dict:{'numpy': [], 'pandas': ['read_csv'], 'optuna': [], 'matplotlib': [], 'tensorflow': [], 'sklearn': [], 'pickle': [], 'VFE': []} axis_0: 0, axis_1: 1
mljar-automl-tps-apr-21.py : ['read_csv', 'read_csv', 'head', 'to_csv'] ['numpy', 'pandas'] ['AutoML']Dict:{'numpy': [], 'pandas': ['read_csv'], 'supervised': []} axis_0: 0, axis_1: 0
permutation-importance-for-feature-selection-part1.py : ['sum', 'sum', 'sum', 'join', 'reset_index', 'sort_values', 'apply', 'join', 'rolling', 'groupby', 'min', 'max', 'std', 'mean', 'apply', 'mean', 'abs', 'diff', 'apply', 'max', 'abs', 'apply', 'min', 'abs', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'replace', 'sum', 'sum', 'isna', 'fillna', 'read_feather', 'sort_values', 'round', 'clip', 'astype', 'astype', 'sort_values', 'update', 'round', 'clip', 'to_csv', 'mean', 'to_csv', 'mean', 'array', 'copy', 'rename', 'reset_index', 'to_csv', 'rename', 'reset_index', 'to_csv', 'rename', 'reset_index', 'to_csv', 'round', 'clip', 'round', 'clip', 'astype', 'to_csv'] ['gc', 'os', 'random', 'sys', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'plotly.express', 'plotly.figure_factory', 'lightgbm', 'xgboost', 'catboost', 'numba'] ['Path', 'tqdm', 'display', 'HTML', 'tools', 'subplots', 'preprocessing', 'KFold', 'contextmanager', 'perf_counter', 'signal', 'PermutationImportance', 'KFold', 'GroupKFold']Dict:{'gc': [], 'os': ['rename', 'replace'], 'pathlib': ['rename', 'replace'], 'random': [], 'sys': [], 'tqdm': ['update'], 'numpy': ['mean', 'max', 'abs', 'sum', 'array', 'round', 'min', 'clip', 'diff', 'std', 'copy'], 'pandas': ['isna', 'array', 'read_feather'], 'matplotlib': [], 'seaborn': [], 'IPython': [], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'contextlib': [], 'time': [], 'numba': [], 'scipy': [], 'eli5': []} axis_0: 2, axis_1: 1
ps-s3e13-2023-eda-and-submission.py : ['read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'replace', 'any', 'any', 'isna', 'any', 'any', 'isna', 'any', 'any', 'isna', 'describe', 'head', 'to_dict', 'round', 'value_counts', 'to_dict', 'round', 'value_counts', 'rename', 'nunique', 'rename', 'nunique', 'join', 'add_suffix', 'describe', 'add_suffix', 'describe', 'concat', 'value_counts', 'sum', 'value_counts', 'query', 'query', 'corr', 'sum', 'sum', 'concat', 'reset_index', 'drop_duplicates', 'apply', 'apply', 'mean', 'mean', 'sort_values', 'sort_values', 'array', 'array', 'keys', 'keys', 'array', 'array', 'astype', 'eq', 'astype', 'eq', 'astype', 'eq', 'astype', 'eq', 'sum', 'sum', 'groupby', 'keys', 'replace', 'items', 'apply', 'join', 'read_csv', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'math', 'warnings', 'xgboost'] ['HTML', 'tqdm', 'Styler', 'Style', 'Fore', 'EarlyStopping', 'model_selection', 'metrics', 'confusion_matrix', 'ConfusionMatrixDisplay', 'RocCurveDisplay']Dict:{'IPython': [], 'pandas': [], 'numpy': ['mean', 'any', 'sum', 'round', 'array'], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'math': [], 'warnings': [], 'colorama': [], 'xgboost': [], 'sklearn': []} axis_0: 0, axis_1: 9
feature-engineering-and-k-means.py : ['join', 'read_csv', 'read_csv', 'dropna', 'sum', 'isnull', 'info', 'corr', 'sum', 'groupby', 'drop', 'dropna', 'drop', 'astype'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'seaborn', 'numpy'] ['KMeans', 'KMeans', 'Axes3D']Dict:{'pandas': ['read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'os': [], 'sklearn': [], 'mpl_toolkits': [], 'numpy': ['info', 'sum']} axis_0: 0, axis_1: 4
ts-forecasting-a-beginner-s-handbook.py : ['join', 'read_csv', 'to_period', 'sort_index', 'set_index', 'read_csv', 'to_period', 'set_index', 'read_csv', 'to_period', 'sort_index', 'set_index', 'head', 'min', 'max', 'min', 'max', 'unique', 'unique', 'unique', 'unique', 'mean', 'groupby', 'head', 'mean', 'rolling', 'copy', 'head', 'head', 'clip', 'clip', 'head', 'clip', 'clip', 'unstack', 'head', 'head', 'clip', 'clip', 'head', 'head', 'stack', 'reindex', 'join', 'to_csv', 'head', 'unstack', 'head', 'head', 'clip', 'clip', 'head', 'head', 'stack', 'reindex', 'join', 'to_csv', 'head', 'unstack', 'clip', 'clip', 'head', 'head', 'stack', 'reindex', 'join', 'to_csv', 'head', 'mean', 'groupby', 'stack', 'mean', 'groupby', 'stack', 'info', 'head', 'assign', 'query', 'get_dummies', 'head', 'fillna', 'join', 'head', 'clip', 'clip', 'head', 'head', 'fillna', 'join', 'stack', 'reindex', 'join', 'to_csv', 'head', 'read_csv', 'to_period', 'sort_index', 'set_index', 'unstack', 'mean', 'groupby', 'head', 'squeeze', 'concat', 'rename', 'squeeze', 'unstack', 'mean', 'groupby', 'stack', 'mean', 'rolling', 'dropna', 'concat', 'align', 'clip', 'clip', 'squeeze', 'concat', 'dropna', 'concat', 'align', 'clip', 'clip', 'clip', 'clip', 'unstack', 'clip', 'clip', 'clip', 'clip', 'unstack', 'clip', 'stack', 'reindex', 'join', 'to_csv', 'read_csv', 'to_period', 'sort_index', 'set_index', 'unstack', 'unstack', 'squeeze', 'stack', 'squeeze', 'stack', 'unstack', 'fillna', 'join', 'stack', 'drop', 'unstack', 'concat', 'shift', 'reset_index', 'stack', 'sort_values', 'set_index', 'squeeze', 'mean', 'rolling', 'fillna', 'median', 'rolling', 'fillna', 'median', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'fillna', 'median', 'rolling', 'fillna', 'median', 'rolling', 'reset_index', 'transform', 'groupby', 'transform', 'groupby', 'merge', 'merge', 'squeeze', 'mean', 'rolling', 'fillna', 'median', 'rolling', 'fillna', 'median', 'rolling', 'mean', 'rolling', 'fillna', 'median', 'rolling', 'fillna', 'median', 'rolling', 'reset_index', 'transform', 'groupby', 'transform', 'groupby', 'merge', 'merge', 'stack', 'drop', 'clip', 'copy', 'concat', 'fillna', 'join', 'concat', 'stack', 'drop', 'concat', 'clip', 'concat', 'clip', 'clip', 'reset_index', 'stack', 'copy', 'reset_index', 'stack', 'rename', 'clip', 'astype', 'apply', 'groupby', 'apply', 'groupby', 'sort_values', 'head', 'drop', 'unstack', 'head', 'read_csv', 'to_period', 'sort_index', 'set_index', 'unstack', 'fillna', 'join', 'stack', 'drop', 'clip', 'concat', 'fillna', 'join', 'concat', 'stack', 'drop', 'concat', 'clip', 'concat', 'clip', 'stack', 'reindex', 'join', 'to_csv'] ['numpy', 'pandas', 'os', 'datetime', 'pandas', 'matplotlib.pyplot', 'numpy', 'seaborn'] ['binder', '*', 'Path', '*', 'seasonal_plot', 'plot_periodogram', 'make_lags', 'make_leads', 'plot_lags', 'make_multistep_target', 'plot_multistep', 'mean_squared_log_error', 'plot_pacf', 'CalendarFourier', 'DeterministicProcess', 'train_test_split', 'mean_squared_log_error', 'LabelEncoder', 'Earth', 'LinearRegression', 'ElasticNet', 'Lasso', 'Ridge', 'ExtraTreesRegressor', 'RandomForestRegressor', 'KNeighborsRegressor', 'MLPRegressor', 'XGBRegressor']Dict:{'numpy': ['mean', 'median', 'stack', 'squeeze', 'max', 'min', 'unique', 'clip', 'info', 'copy'], 'pandas': ['read_csv', 'concat', 'get_dummies', 'unique', 'merge'], 'os': ['rename'], 'learntools': [], 'datetime': [], 'pathlib': ['rename'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'statsmodels': [], 'pyearth': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 15
bayesian-optimization-of-xgboost-lb-0-9769.py : ['read_csv', 'drop', 'round', 'to_csv'] ['pandas', 'numpy', 'xgboost', 'lightgbm'] ['BayesSearchCV', 'StratifiedKFold', 'PredefinedSplit', 'TimeSeriesSplit']Dict:{'pandas': ['read_csv'], 'numpy': ['round'], 'xgboost': [], 'lightgbm': [], 'skopt': [], 'sklearn': []} axis_0: 0, axis_1: 1
gmean-of-light-gbm-models-lb-0-951x.py : ['read_csv', 'concat', 'corr', 'bool', 'sum', 'sum', 'min', 'max', 'min', 'to_csv'] ['warnings', 'numpy', 'pandas', 'glob', 'seaborn', 'matplotlib.pyplot'] ['describe']Dict:{'warnings': [], 'numpy': ['sum', 'max', 'min'], 'pandas': ['concat', 'read_csv'], 'glob': [], 'scipy': [], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 1
eda-fe-lgbm-model.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'rename', 'sub', 'replace', 'apply', 'unique', 'apply', 'unique', 'apply', 'unique', 'apply', 'apply', 'unique', 'apply', 'apply', 'unique', 'unique', 'merge', 'rename', 'merge', 'merge', 'merge', 'mean', 'sum', 'groupby', 'rename', 'reset_index', 'copy', 'pivot', 'reset_index', 'agg', 'groupby', 'sum', 'sum', 'groupby', 'rename', 'reset_index', 'mean', 'groupby', 'rename', 'reset_index', 'sum', 'groupby', 'mean', 'groupby', 'sort_values', 'rename', 'rename', 'tail', 'merge', 'sum', 'groupby', 'mean', 'groupby', 'sort_values', 'rename', 'rename', 'sum', 'groupby', 'head', 'sort_values', 'merge', 'rename', 'sort_values', 'sum', 'groupby', 'head', 'sort_values', 'merge', 'sum', 'groupby', 'head', 'sort_values', 'merge', 'head', 'unique', 'unique', 'groupby', 'apply', 'unique', 'unique', 'concat', 'head', 'copy', 'copy', 'concat', 'groupby', 'sum', 'head', 'rename', 'head', 'clip', 'reset_index', 'fillna', 'merge', 'head', 'merge', 'merge', 'head', 'reset_index', 'mean', 'groupby', 'head', 'merge', 'copy', 'merge', 'groupby', 'mean', 'rename', 'drop', 'count', 'reset_index', 'head', 'mean', 'groupby', 'rename', 'fillna', 'merge', 'merge', 'head', 'merge', 'mean', 'mean', 'drop', 'groupby', 'merge', 'count', 'drop_duplicates', 'rename', 'copy', 'merge', 'drop', 'merge', 'groupby', 'mean', 'reset_index', 'drop_duplicates', 'merge', 'copy', 'merge', 'drop', 'astype', 'fillna', 'merge', 'groupby', 'groupby', 'mean', 'reset_index', 'drop_duplicates', 'merge', 'copy', 'merge', 'drop', 'astype', 'fillna', 'merge', 'groupby', 'mean', 'reset_index', 'drop_duplicates', 'merge', 'astype', 'fillna', 'drop', 'merge', 'mean', 'reset_index', 'drop_duplicates', 'merge', 'cumsum', 'groupby', 'cumsum', 'groupby', 'copy', 'merge', 'copy', 'merge', 'merge', 'mean', 'reset_index', 'merge', 'fillna', 'fillna', 'cumsum', 'groupby', 'cumsum', 'groupby', 'merge', 'head', 'groupby', 'mean', 'reset_index', 'rename', 'copy', 'merge', 'merge', 'groupby', 'mean', 'reset_index', 'rename', 'copy', 'merge', 'merge', 'groupby', 'mean', 'reset_index', 'rename', 'copy', 'merge', 'merge', 'merge', 'groupby', 'mean', 'reset_index', 'rename', 'copy', 'merge', 'merge', 'groupby', 'mean', 'reset_index', 'rename', 'copy', 'merge', 'merge', 'groupby', 'mean', 'reset_index', 'rename', 'merge', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'read_pickle', 'drop', 'apply', 'read_pickle', 'fillna', 'drop', 'drop', 'drop', 'apply', 'read_pickle', 'sort_values', 'read_csv', 'to_csv', 'read_pickle', 'groupby', 'fillna', 'drop', 'drop', 'drop', 'apply', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'dateutil', 'datetime', 'matplotlib.pyplot', 'seaborn', 're', 'gc', 'pickle', 'statsmodels.api', 'lightgbm', 'warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'gc', 'pickle', 'lightgbm', 'warnings'] ['date', 'pandarallel', 'tqdm', 'rcParams', 'permutations', 'product', 'LGBMRegressor', 'LOFOImportance', 'FLOFOImportance', 'Dataset', 'plot_importance', 'mean_squared_log_error', 'mean_squared_error', 'mean_absolute_error', 'LabelEncoder', 'OneHotEncoder', 'train_test_split', 'KFold', 'tqdm', 'LGBMRegressor', 'LOFOImportance', 'FLOFOImportance', 'Dataset', 'plot_importance', 'mean_squared_log_error', 'mean_squared_error', 'mean_absolute_error', 'LabelEncoder', 'OneHotEncoder', 'train_test_split', 'KFold']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'clip', 'cumsum', 'copy'], 'pandas': ['read_csv', 'concat', 'read_pickle', 'unique', 'merge', 'pivot'], 'dateutil': [], 'datetime': ['min', 'max', 'replace'], 'pandarallel': [], 'matplotlib': [], 'seaborn': [], 're': ['sub'], 'gc': [], 'tqdm': [], 'pickle': [], 'statsmodels': [], 'pylab': ['copy'], 'itertools': [], 'lightgbm': [], 'lofo': [], 'sklearn': [], 'warnings': [], '=': [], 'pd': []} axis_0: 4, axis_1: 14
lets-play-with-quick-draw.py : ['items', 'get', 'items', 'astype', 'items', 'astype'] ['numpy', 'pandas', 'matplotlib.pyplot', 'keras', 'pickle', 'requests'] ['RandomForestClassifier', 'KNeighborsClassifier', 'SVC', 'LinearSVC', 'SGDClassifier', 'MLPClassifier', 'accuracy_score', 'confusion_matrix', 'roc_curve', 'roc_auc_score', 'train_test_split', 'GridSearchCV', 'backend', 'np_utils', 'Sequential', 'Dense', 'Dropout', 'Flatten', 'Conv2D', 'MaxPooling2D', 'SVG', 'model_to_dot', 'BytesIO']Dict:{'numpy': [], 'pandas': [], 'matplotlib': ['get'], 'sklearn': [], 'keras': [], 'IPython': [], 'pickle': [], '#': [], 'Read/Write': [], 'with': [], 'Serialization': [], 'requests': ['get'], 'Makes': [], 'HTTP': [], 'io': []} axis_0: 0, axis_1: 0
gb-vpp-pulp-fiction-abb651.py : ['read_csv', 'head', 'read_csv', 'head', 'cumsum', 'groupby', 'cumsum', 'groupby', 'cumsum', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'cumsum', 'groupby', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'diff', 'groupby', 'reset_index', 'mean', 'ewm', 'groupby', 'reset_index', 'agg', 'rolling', 'groupby', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'to_numpy', 'drop', 'drop', 'transform', 'astype', 'squeeze', 'min', 'max', 'unique', 'squeeze', 'squeeze', 'squeeze', 'squeeze', 'read_csv', 'to_csv', 'median', 'round', 'clip', 'to_csv'] ['gc', 'numpy', 'pandas', 'tensorflow'] ['KFold', 'RobustScaler', 'mean_absolute_error', 'plot_model', 'Model', 'load_model', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau', 'BatchNormalization', 'Dense', 'Dropout', 'Input', 'Concatenate', 'LSTM', 'GRU', 'Bidirectional', 'Multiply']Dict:{'gc': [], 'numpy': ['mean', 'median', 'squeeze', 'max', 'round', 'min', 'unique', 'clip', 'diff', 'cumsum'], 'pandas': ['get_dummies', 'unique', 'read_csv'], 'sklearn': [], 'tensorflow': []} axis_0: 1, axis_1: 2
validation-feature-selection-interpretation-etc.py : ['to_json', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'max', 'apply', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'groupby', 'abs', 'mean', 'map', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'rename', 'reset_index', 'value_counts', 'merge', 'drop', 'rename', 'apply', 'apply', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'transform', 'copy', 'copy', 'concat', 'keys', 'sort_values', 'mean', 'groupby', 'items', 'keys', 'rename', 'reset_index', 'unstack', 'boxplot', 'fillna', 'fillna', 'fillna', 'fillna', 'boxplot', 'unique', 'to_csv', 'head', 'fillna', 'fillna', 'std'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'eli5', 'shap', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'altair'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'metrics', 'linear_model', 'HTML', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'product', 'v5', 'HTML', 'ExtraTreesRegressor', 'AdaBoostRegressor', 'RandomForestRegressor', 'KernelRidge', 'NearestNeighbors']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'os': ['rename'], 'matplotlib': ['boxplot'], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'catboost': [], 'gc': [], 'seaborn': ['boxplot'], 'warnings': [], 'eli5': [], 'shap': [], 'IPython': [], 'json': [], 'altair': [], 'networkx': [], 'numba': [], 'itertools': []} axis_0: 3, axis_1: 3
tabular-playground-series-0-8181-auc.py : ['read_csv', 'read_csv', 'describe', 'describe', 'pop', 'pop', 'pop', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'std', 'std', 'var', 'var', 'mean', 'mean', 'median', 'median', 'pow', 'sum', 'pow', 'sum', 'sum', 'abs', 'sum', 'abs', 'max', 'max', 'min', 'min', 'transform', 'get', 'mean', 'get', 'median', 'get', 'mode', 'fillna', 'fillna', 'read_csv', 'to_csv'] ['tensorflow.compat.v1', 'numpy', 'os', 'pandas', 'matplotlib.pyplot', 'scipy', 'tqdm', 'matplotlib.pyplot', 'seaborn', 'sklearn'] ['confusion_matrix', 'loadmat', 'wavedec', 'reduce', 'signal', 'entropy', 'fft', 'ifft', 'train_test_split', 'StratifiedKFold', 'StandardScaler', 'RobustScaler', 'keras', 'metrics', 'RandomForestClassifier', 'KNeighborsClassifier', 'SVC', 'accuracy_score', 'KFold', 'cross_validate', 'Dense', 'Activation', 'Flatten', 'Embedding', 'concatenate', 'Input', 'Dropout', 'LSTM', 'Bidirectional', 'BatchNormalization', 'PReLU', 'ReLU', 'Reshape', 'WeightNormalization', 'RMSprop', 'classification_report', 'Sequential', 'Model', 'load_model', 'EarlyStopping', 'ModelCheckpoint', 'PCA', 'keras', 'Conv1D', 'Conv2D', 'Add', 'MaxPool1D', 'MaxPooling2D', 'LGBMClassifier']Dict:{'tensorflow': [], 'sklearn': [], 'numpy': ['mean', 'median', 'max', 'var', 'sum', 'abs', 'min', 'std'], 'scipy': [], 'os': [], 'pywt': [], 'functools': [], 'pandas': ['isna', 'read_csv'], 'matplotlib': ['get'], 'tqdm': ['std'], 'tensorflow_addons': [], 'seaborn': [], 'optuna': [], 'lightgbm': []} axis_0: 0, axis_1: 1
eda-lgbm-for-starter-lb-1-6878.py : ['read_csv', 'merge', 'drop', 'astype', 'fillna', 'apply', 'nunique', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'drop', 'drop', 'fillna', 'fillna', 'join', 'apply', 'apply', 'sort_values', 'value_counts', 'fillna', 'fillna', 'astype', 'astype', 'hist', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'astype', 'astype', 'value_counts', 'drop', 'drop', 'value_counts', 'value_counts', 'apply', 'apply', 'sort_values', 'value_counts', 'astype', 'astype', 'concat', 'to_datetime', 'apply', 'drop', 'drop', 'drop', 'head', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'reset_index', 'sum', 'groupby', 'to_csv'] ['pandas', 'numpy', 'time', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'warnings', 'os', 'json', 'numpy', 'pandas'] ['mean_squared_error', 'KFold', 'json_normalize', 'LabelEncoder']Dict:{'pandas': [], 'numpy': ['mean', 'isin', 'sum'], 'time': [], 'lightgbm': [], 'sklearn': [], 'matplotlib': ['hist'], 'seaborn': [], 'warnings': [], '': [], 'os': [], 'json': []} axis_0: 1, axis_1: 8
ps3e24-eda-feature-engineering-ensemble.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'copy', 'copy', 'copy', 'concat', 'reset_index', 'head', 'round', 'count', 'round', 'count', 'round', 'count', 'value_counts', 'nunique', 'nunique', 'where', 'where', 'where', 'where', 'where', 'where', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'max', 'max', 'min', 'min', 'concat', 'get_dummies', 'value_counts', 'idxmin', 'drop', 'concat', 'duplicated', 'reset_index', 'drop', 'array', 'array', 'isnull', 'copy', 'drop', 'concat', 'reset_index', 'sum', 'isna', 'fillna', 'mean', 'copy', 'copy', 'drop', 'drop', 'drop', 'array', 'array', 'nunique', 'nunique', 'copy', 'copy', 'drop', 'concat', 'transform', 'min', 'transform', 'min', 'transform', 'transform', 'reset_index', 'concat', 'concat', 'mean', 'mean', 'mean', 'mean', 'copy', 'copy', 'to_dict', 'value_counts', 'items', 'keys', 'replace', 'replace', 'nunique', 'drop', 'drop', 'copy', 'copy', 'copy', 'sort_values', 'mean', 'groupby', 'map', 'map', 'to_dict', 'value_counts', 'map', 'map', 'to_dict', 'value_counts', 'keys', 'astype', 'replace', 'astype', 'replace', 'drop', 'drop', 'nunique', 'astype', 'astype', 'drop', 'drop', 'astype', 'mean', 'mean', 'mean', 'corr', 'drop', 'drop', 'transform', 'array', 'array', 'astype', 'mean', 'mean', 'mean', 'astype', 'astype', 'mean', 'corrwith', 'drop', 'max', 'abs', 'max', 'abs', 'max', 'abs', 'drop', 'drop', 'nunique', 'abs', 'corr', 'transform', 'transform', 'concat', 'concat', 'array', 'array', 'astype', 'mean', 'copy', 'copy', 'transform', 'copy', 'copy', 'drop', 'drop', 'to_csv', 'to_csv', 'drop', 'astype', 'copy', 'mean', 'mean', 'reset_index', 'reset_index', 'reset_index', 'unique', 'array', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'array', 'array', 'items', 'array', 'array', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'read_csv', 'to_csv', 'head', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'min', 'max', 'min', 'copy', 'to_csv'] ['sklearn', 'numpy', 'os', 'datetime', 'pandas', 'matplotlib.pyplot', 'missingno', 'seaborn', 'concurrent.futures', 'random', 'gc', 'xgboost', 'statsmodels.api', 'math', 'optuna', 'xgboost', 'lightgbm', 're', 'warnings', 'tensorflow', 'keras'] ['PrettyTable', 'tqdm', 'tqdm', 'deepcopy', 'partial', 'combinations', 'randint', 'uniform', 'f_classif', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'FunctionTransformer', 'metrics', 'GridSearchCV', 'RandomizedSearchCV', 'combinations', 'SimpleImputer', 'train_test_split', 'cross_val_score', 'mean_squared_error', 'mean_squared_log_error', 'roc_auc_score', 'accuracy_score', 'f1_score', 'precision_recall_curve', 'log_loss', 'KMeans', 'KElbowVisualizer', 'OptimalK', 'stats', 'ttest_ind', 'boxcox', 'variance_inflation_factor', 'BaseEstimator', 'TransformerMixin', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StratifiedKFold', 'KFold', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'AdaBoostClassifier', 'BalancedRandomForestClassifier', 'make_classification', 'GaussianNB', 'enable_hist_gradient_boosting', 'DecisionTreeClassifier', 'LogisticRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'NuSVC', 'SVC', 'KNeighborsClassifier', 'KNNImputer', 'LogisticRegression', 'MLPClassifier', 'Pool', 'TfidfVectorizer', 'PCA', 'TruncatedSVD', 'Sequential', 'Dense', 'Activation', 'LeakyReLU', 'PReLU', 'ELU', 'Dropout']Dict:{'sklearn': ['transform'], 'numpy': ['mean', 'max', 'add', 'abs', 'sum', 'array', 'where', 'round', 'min', 'unique', 'clip', 'std', 'copy'], 'os': ['replace'], 'datetime': [], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'array'], 'matplotlib': [], 'missingno': [], 'prettytable': ['copy'], 'seaborn': [], 'tqdm': [], 'concurrent': [], 'copy': [], 'functools': [], 'itertools': [], 'random': [], 'gc': [], 'xgboost': [], 'yellowbrick': [], 'gap_statistic': [], 'scipy': [], 'statsmodels': [], 'math': [], 'optuna': [], 'lightgbm': [], 'category_encoders': [], 'imblearn': [], 'catboost': [], 're': [], 'warnings': [], 'tensorflow': ['add', 'abs', 'concat', 'where', 'round', 'unique'], 'keras': []} axis_0: 7, axis_1: 5
how-to-be-in-top-10-for-beginner.py : ['read_csv', 'read_csv', 'head', 'info', 'describe', 'skew', 'kurt', 'corr', 'corr', 'corr', 'sort_values', 'concat', 'drop', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'drop', 'max', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'head', 'fillna', 'fillna', 'mode', 'fillna', 'drop', 'max', 'sum', 'isnull', 'sort_values', 'apply', 'get_dummies', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'sklearn.metrics', 'math', 'seaborn', 'warnings', 'xgboost'] ['preprocessing', 'XGBRegressor', 'norm', 'skew', 'make_scorer', 'KFold', 'cross_val_score', 'mean_squared_error']Dict:{'numpy': ['info', 'sum', 'max'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'matplotlib': [], 'sklearn': [], 'xgboost': [], 'math': [], 'scipy': [], 'seaborn': [], 'warnings': []} axis_0: 1, axis_1: 4
icr-iarc-2023-eda-and-submission.py : ['drop', 'read_csv', 'drop', 'read_csv', 'map', 'map', 'any', 'any', 'isna', 'any', 'any', 'isna', 'reset_index', 'sum', 'isna', 'sort_values', 'describe', 'head', 'to_dict', 'round', 'value_counts', 'to_dict', 'round', 'value_counts', 'rename', 'nunique', 'rename', 'nunique', 'join', 'add_suffix', 'describe', 'add_suffix', 'describe', 'concat', 'sort_values', 'apply', 'std', 'dropna', 'abs', 'sort_values', 'apply', 'abs', 'dropna', 'abs', 'sort_values', 'apply', 'abs', 'value_counts', 'corr', 'corr', 'concat', 'where', 'sum', 'apply', 'apply', 'mean', 'mean', 'sort_values', 'sort_values', 'concat', 'query', 'query', 'read_csv', 'head', 'drop', 'fillna', 'fillna', 'fillna', 'corr', 'fillna', 'fillna', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'math', 'warnings', 'xgboost', 'lightgbm', 'catboost'] ['HTML', 'stats', 'norm', 'skew', 'kurtosis', 'expit', 'tqdm', 'Styler', 'Style', 'Fore', 'EarlyStopping', 'log_evaluation', 'early_stopping', 'record_evaluation', 'Pool', 'HistGradientBoostingClassifier', 'RandomForestClassifier', 'ExtraTreesClassifier', 'model_selection', 'metrics', 'confusion_matrix', 'RocCurveDisplay', 'calibration_curve', 'IsotonicRegression', 'LogisticRegression', 'hierarchy', 'linkage', 'dendrogram', 'squareform']Dict:{'IPython': [], 'pandas': [], 'numpy': ['mean', 'any', 'abs', 'sum', 'where', 'round', 'std'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'math': [], 'warnings': [], 'colorama': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'sklearn': []} axis_0: 0, axis_1: 5
tps-nov-eda-deeptables.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'sum', 'isna', 'describe', 'reset_index', 'var', 'sort_values', 'corr', 'reset_index', 'corrwith', 'sort_values', 'head', 'sum', 'isna', 'describe', 'mean', 'mean', 'mean', 'mean', 'std', 'std', 'std', 'std', 'sum', 'skew', 'sum', 'skew', 'transform', 'sort_values', 'to_csv', 'head'] ['os', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'warnings', 'tensorflow'] ['StandardScaler', 'RobustScaler', 'train_test_split', 'roc_auc_score', 'test', 'DeepTable', 'ModelConfig', 'AutoInt', 'xDeepFM', 'FGCNN', 'DeepFM', 'DeepTablesExplainer', 'plot_model']Dict:{'os': [], '': [], 'numpy': ['mean', 'var', 'sum', 'std'], 'pandas': ['isna', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'warnings': [], 'deeptables': [], 'tensorflow': []} axis_0: 4, axis_1: 8
playgrounds3e11-simple-eda-regressionmodeling.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'info', 'unique', 'max', 'min', 'median', 'mean', 'mode', 'boxplot', 'corr', 'corr', 'concat', 'drop', 'replace', 'replace', 'tail', 'replace', 'fillna', 'replace', 'replace', 'replace', 'replace', 'replace', 'astype', 'any', 'replace', 'replace', 'fillna', 'replace', 'fillna', 'sum', 'isna', 'sum', 'get_dummies', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['StandardScaler', 'MinMaxScaler', 'make_scorer', 'mean_squared_log_error', 'LinearRegression', 'Ridge', 'Lasso', 'RandomForestRegressor', 'XGBRegressor', 'plot_importance', 'LGBMRegressor', 'CatBoostRegressor', 'ExtraTreesRegressor', 'GridSearchCV', 'train_test_split']Dict:{'numpy': ['mean', 'median', 'any', 'max', 'sum', 'min', 'unique', 'info'], 'pandas': ['isna', 'read_csv', 'concat', 'get_dummies', 'unique'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 1, axis_1: 1
predict-house-price-with-feature-engine.py : ['read_csv', 'read_csv', 'drop', 'drop', 'copy', 'copy', 'copy', 'reset_index', 'reset_index', 'reset_index', 'concat', 'reset_index', 'hist', 'hist', 'hist', 'hist', 'where', 'where', 'where', 'where', 'isnull', 'where', 'isnull', 'where', 'isnull', 'concat', 'reset_index', 'reset_index', 'map', 'where', 'where', 'where', 'value_counts', 'where', 'where', 'where', 'value_counts', 'astype', 'astype', 'astype', 'mean', 'isnull', 'mean', 'isnull', 'sort_values', 'concat', 'reset_index', 'reset_index', 'where', 'isnull', 'map', 'transform', 'transform', 'transform', 'transform', 'transform', 'sum', 'isnull', 'unstack', 'value_counts', 'groupby', 'transform', 'transform', 'transform', 'unstack', 'value_counts', 'groupby', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'sort_values', 'nunique', 'unstack', 'value_counts', 'groupby', 'concat', 'reset_index', 'value_counts', 'merge', 'reset_index', 'mean', 'groupby', 'head', 'describe', 'unique', 'unique', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'value_counts', 'transform', 'transform', 'transform', 'unstack', 'value_counts', 'groupby', 'sort_values', 'transform', 'transform', 'transform', 'astype', 'astype', 'astype', 'transform', 'transform', 'transform', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'transform', 'transform', 'transform', 'head', 'transform', 'transform', 'transform', 'head', 'transform', 'transform', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'unique', 'transform', 'transform', 'mean', 'isnull', 'mean', 'isnull', 'sort_values', 'sort_values', 'hist', 'concat', 'mean', 'isnull', 'mean', 'isnull', 'sort_values', 'keys', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'head', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'transform', 'transform', 'transform', 'transform', 'reset_index', 'reset_index', 'mean', 'std', 'sort_values', 'reset_index', 'sort_values', 'reset_index', 'to_csv', 'sort_values', 'mean', 'mean', 'sort_values', 'mean', 'sort_values', 'mean', 'transform', 'transform', 'transform', 'head', 'sort_values', 'reset_index', 'to_csv', 'sort_values', 'reset_index', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['GradientBoostingRegressor', 'RandomForestRegressor', 'Lasso', 'mean_squared_error', 'r2_score', 'train_test_split', 'GridSearchCV', 'KFold', 'Pipeline', 'DecisionTreeRegressor', 'LGBMRegressor', 'creation', 'discretisation', 'encoding', 'imputation', 'selection']Dict:{'numpy': ['mean', 'sum', 'where', 'unique', 'isin', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'merge'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 'lightgbm': [], 'feature_engine': []} axis_0: 1, axis_1: 6
top-5-xgboost-tunning-first-competition.py : ['read_csv', 'read_csv', 'sample', 'crosstab', 'iterrows', 'iterrows', 'iterrows', 'sample', 'iterrows', 'iterrows', 'sub', 'join', 'get_dummies', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'crosstab', 'iterrows', 'crosstab', 'dropna', 'drop', 'crosstab', 'iterrows', 'crosstab', 'drop', 'cut', 'cut', 'cut', 'crosstab', 'drop', 'drop', 'sample', 'drop', 'array', 'array', 'mean', 'std', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'xgboost', 're'] ['division', 'train_test_split', 'KFold', 'cross_val_score', 'GridSearchCV', 'plot_importance']Dict:{'__future__': [], 'pandas': ['read_csv', 'cut', 'get_dummies', 'array', 'crosstab'], 'numpy': ['mean', 'std', 'array'], 'sklearn': [], 'matplotlib': [], 'xgboost': [], 're': ['sub']} axis_0: 0, axis_1: 0
dls-petfinder.py : ['read_csv', 'head', 'info', 'astype', 'unique', 'array', 'array', 'sum', 'sum', 'array', 'array', 'abs', 'abs', 'abs', 'std', 'abs', 'mean', 'read_csv', 'astype', 'array', 'array', 'transform', 'read_csv', 'astype', 'transform', 'read_csv', 'head', 'to_csv'] ['os', 'tqdm', 'torch', 'numpy', 'pandas', 'os', 'torchvision.models'] ['train_test_split', 'cohen_kappa_score', 'KNeighborsClassifier', 'RandomForestClassifier', 'Image', 'transforms', 'TruncatedSVD', 'CatBoostClassifier']Dict:{'os': [], 'tqdm': ['std'], 'torch': ['mean', 'abs', 'sum', 'unique', 'std'], 'numpy': ['mean', 'abs', 'sum', 'array', 'unique', 'info', 'std'], 'pandas': ['array', 'unique', 'read_csv'], 'sklearn': ['transform'], 'PIL': [], 'torchvision': [], 'catboost': []} axis_0: 1, axis_1: 0
top-1-approach.py : ['read_csv', 'read_csv', 'tail', 'head', 'unique', 'describe', 'select_dtypes', 'describe', 'select_dtypes', 'copy', 'describe', 'select_dtypes', 'select_dtypes', 'drop', 'select_dtypes', 'select_dtypes', 'equals', 'drop', 'select_dtypes', 'select_dtypes', 'boxplot', 'select_dtypes', 'drop', 'select_dtypes', 'sort_values', 'median', 'groupby', 'boxplot', 'drop', 'corr', 'sort_values', 'corr', 'nlargest', 'drop', 'sort_values', 'nunique', 'select_dtypes', 'concat', 'sort_values', 'nunique', 'select_dtypes', 'copy', 'drop', 'copy', 'concat', 'concat', 'sort_values', 'sum', 'isnull', 'apply', 'sort_values', 'sum', 'isnull', 'fillna', 'fillna', 'replace', 'mode', 'apply', 'groupby', 'fillna', 'mode', 'fillna', 'fillna', 'replace', 'mode', 'max', 'sum', 'isnull', 'max', 'sum', 'isnull', 'astype', 'map', 'astype', 'map', 'apply', 'apply', 'apply', 'apply', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'sort_values', 'nunique', 'select_dtypes', 'mean', 'std', 'mean', 'std', 'count', 'concat', 'drop', 'copy', 'drop', 'concat', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'copy', 'xs', 'concat', 'boxplot', 'sort_values', 'abs', 'apply', 'copy', 'xs', 'sort_values', 'abs', 'apply', 'concat', 'get_dummies', 'xs', 'xs', 'mean', 'mean', 'mean', 'mean', 'mean', 'std', 'mean', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['stats', 'skew', 'boxcox_normmax', 'boxcox1p', 'LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'ElasticNetCV', 'GradientBoostingRegressor', 'XGBRegressor', 'LGBMRegressor', 'CatBoostRegressor', 'SVR', 'mean_absolute_error', 'cross_val_score', 'make_scorer', 'make_pipeline', 'StandardScaler', 'RandomizedSearchCV', 'GridSearchCV', 'cross_validate', 'literal_eval', 'StackingRegressor']Dict:{'numpy': ['mean', 'median', 'max', 'abs', 'sum', 'unique', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'unique'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': [], 'sklearn': [], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': [], 'ast': []} axis_0: 0, axis_1: 0
titanic-best-working-classifier.py : ['read_csv', 'read_csv', 'info', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'fillna', 'mean', 'groupby', 'fillna', 'median', 'qcut', 'mean', 'groupby', 'mean', 'std', 'sum', 'isnull', 'astype', 'cut', 'mean', 'groupby', 'apply', 'crosstab', 'replace', 'replace', 'replace', 'replace', 'mean', 'groupby', 'astype', 'map', 'map', 'fillna', 'astype', 'map', 'astype', 'drop', 'drop', 'drop', 'head'] ['numpy', 'pandas', 're', 'matplotlib.pyplot', 'seaborn'] ['StratifiedShuffleSplit', 'accuracy_score', 'log_loss', 'KNeighborsClassifier', 'SVC', 'DecisionTreeClassifier', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'GaussianNB', 'LinearDiscriminantAnalysis', 'QuadraticDiscriminantAnalysis', 'LogisticRegression']Dict:{'numpy': ['mean', 'median', 'sum', 'info', 'std'], 'pandas': ['read_csv', 'isnull', 'cut', 'qcut', 'crosstab'], 're': [], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 0
ai-generated-text-detection-quick-baselin-sgd.py : ['read_csv', 'rename', 'replace', 'read_csv', 'concat', 'read_csv', 'concat', 'value_counts', 'to_csv'] ['numpy', 'pandas', 'xgboost'] ['LogisticRegression', 'XGBClassifier', 'TfidfVectorizer', 'VotingClassifier', 'SGDClassifier']Dict:{'numpy': [], 'pandas': ['concat', 'read_csv', 'value_counts'], 'sklearn': [], 'xgboost': []} axis_0: 1, axis_1: 0
eda-feature-engineering-model-error-analysis.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'mean', 'groupby', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'mean', 'groupby', 'reset_index', 'reindex', 'merge', 'groupby', 'reset_index', 'mean', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'fillna', 'drop', 'merge', 'reset_index', 'mean', 'groupby', 'drop', 'drop_duplicates', 'sort_values', 'rename', 'to_datetime', 'set_index', 'rename', 'mean', 'rolling', 'merge', 'astype', 'date_range', 'fillna', 'shift', 'fillna', 'to_datetime', 'set_index', 'date_range', 'rename', 'rename', 'date_range', 'merge', 'merge', 'merge', 'fillna', 'to_datetime', 'to_datetime', 'to_datetime', 'astype', 'isin', 'to_datetime', 'isin', 'drop', 'get_dummies', 'drop', 'unstack', 'sort_index', 'set_index', 'stack', 'stack', 'clip', 'stack', 'apply', 'groupby', 'stack', 'clip', 'stack', 'rename', 'reset_index', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'concat', 'stack', 'clip', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'plotly.express', 'plotly.graph_objs', 'sklearn', 'optuna', 'lightgbm', 'warnings'] ['make_subplots', 'ProfileReport', 'mean_squared_log_error', 'cross_val_score', 'learning_curve', 'ShuffleSplit', 'StandardScaler', 'LabelEncoder', 'CalendarFourier', 'DeterministicProcess', 'Fourier', 'plot_pacf', 'MultiOutputRegressor', 'Ridge', 'RandomForestRegressor', 'Parallel', 'delayed']Dict:{'pandas': ['read_csv', 'date_range', 'concat', 'get_dummies', 'merge', 'to_datetime'], 'numpy': ['mean', 'isin', 'stack', 'clip'], 'matplotlib': [], 'plotly': [], 'sklearn': ['apply'], 'optuna': [], 'pandas_profiling': [], 'statsmodels': [], 'lightgbm': [], 'joblib': [], 'warnings': []} axis_0: 1, axis_1: 1
tpsapr22-optuna-lgbm-blend.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'merge', 'astype', 'aggregate', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'merge', 'merge', 'merge', 'round', 'rename', 'concat', 'reset_index', 'to_csv'] ['pandas', 'numpy', 'warnings', 'optuna'] ['LGBMClassifier', 'StratifiedKFold', 'roc_auc_score']Dict:{'pandas': ['concat', 'merge', 'read_csv'], 'numpy': ['round'], 'warnings': [], '': [], 'lightgbm': [], 'sklearn': [], 'optuna': []} axis_0: 0, axis_1: 0
commonlit-feature-engineering-age-range-bert.py : ['mean', 'read_csv', 'read_csv', 'concat', 'read_csv', 'apply', 'join', 'sub', 'apply', 'join', 'sub', 'apply', 'join', 'sub', 'apply', 'join', 'sub', 'head', 'apply', 'apply', 'concat', 'transform', 'transform', 'transform', 'transform', 'transform', 'concat', 'transform', 'transform', 'astype', 'add', 'add', 'add', 'add', 'add', 'add', 'round', 'squeeze', 'head', 'astype', 'add', 'add', 'add', 'add', 'add', 'add', 'round', 'squeeze', 'head', 'astype', 'astype', 'round', 'squeeze', 'round', 'squeeze', 'read_csv', 'read_csv', 'map', 'map', 'take', 'take', 'boxplot', 'boxplot', 'corr', 'to_csv', 'to_csv'] ['scipy', 're', 'string', 'nltk', 'random', 'os', 'tensorflow', 'numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib.cm', 'seaborn', 'plotly.express', 'plotly.graph_objs', 'plotly.offline', 'spacy'] ['make_subplots', 'TruncatedSVD', 'PCA', 'Isomap', 'CountVectorizer', 'TfidfVectorizer', 'KMeans', 'tqdm', 'backend', 'Sequential', 'Dense', 'LSTM', 'Input', 'Dropout', 'SimpleRNN', 'train_test_split', 'distance_matrix', 'cosine_similarity', 'TFAutoModel', 'BertTokenizer', 'TqdmCallback']Dict:{'scipy': [], 're': ['sub'], 'string': [], 'nltk': [], 'random': [], 'os': [], 'tensorflow': ['round', 'squeeze', 'add', 'concat'], '': [], 'numpy': ['mean', 'take', 'squeeze', 'add', 'round'], 'pandas': ['concat', 'read_csv'], 'matplotlib': [], 'seaborn': ['boxplot'], 'plotly': [], 'spacy': [], 'sklearn': [], 'tqdm': [], 'keras': [], 'transformers': []} axis_0: 0, axis_1: 0
baseline-lb-0-0648950.py : ['read_csv', 'read_csv', 'read_csv', 'rename', 'astype', 'astype', 'astype', 'astype', 'merge', 'merge', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'isnull', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'isnull', 'isnull', 'isnull', 'fillna', 'transform', 'fillna', 'transform', 'drop', 'drop', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'xgboost', 'random', 'datetime', 'gc', 'seaborn'] ['LabelEncoder', 'train_test_split']Dict:{'numpy': ['sum'], 'pandas': ['merge', 'value_counts', 'read_csv', 'isnull'], 'xgboost': [], 'random': [], 'datetime': [], 'gc': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 1
amex-lgbm-dart-cv-0-7977.py : ['groupby', 'astype', 'diff', 'read_parquet', 'drop', 'agg', 'groupby', 'join', 'reset_index', 'agg', 'groupby', 'join', 'reset_index', 'read_csv', 'astype', 'astype', 'merge', 'merge', 'merge', 'read_parquet', 'agg', 'groupby', 'join', 'reset_index', 'agg', 'groupby', 'join', 'reset_index', 'astype', 'astype', 'merge', 'merge', 'to_parquet', 'to_parquet', 'read_parquet', 'read_parquet', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'transform', 'round', 'round', 'astype', 'astype', 'to_csv', 'to_csv', 'read_csv', 'to_csv'] ['gc', 'warnings', 'scipy', 'numpy', 'pandas', 'itertools', 'os', 'gc', 'warnings', 'random', 'scipy', 'numpy', 'pandas', 'joblib', 'itertools', 'lightgbm'] ['tqdm', 'tqdm', 'StratifiedKFold', 'train_test_split', 'LabelEncoder', 'combinations']Dict:{'gc': [], 'warnings': [], 'scipy': [], 'numpy': ['transpose', 'sum', 'where', 'round', 'diff', 'array', 'cumsum'], 'pandas': ['read_parquet', 'array', 'merge', 'read_csv'], 'tqdm': [], 'itertools': [], 'os': [], 'random': [], 'joblib': [], 'sklearn': ['transform'], 'lightgbm': []} axis_0: 0, axis_1: 0
optiver-realized-ensemble-tabnet-and-lgbm.py : ['read_pickle', 'fillna', 'mean', 'drop', 'transform', 'reset_index', 'sample', 'cut', 'drop', 'any', 'mean', 'diff', 'sum', 'unique', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'read_parquet', 'apply', 'groupby', 'apply', 'groupby', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'apply', 'drop', 'read_parquet', 'apply', 'groupby', 'sum', 'mean', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'add_prefix', 'apply', 'drop', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'drop', 'merge', 'concat', 'mean', 'drop', 'drop', 'astype', 'astype', 'join', 'unique', 'merge', 'drop', 'fillna', 'mean', 'drop', 'transform', 'transform', 'squeeze', 'mean', 'join', 'unique', 'merge', 'drop', 'astype', 'mean', 'to_csv'] ['os', 'glob', 'pandas', 'numpy', 'scipy', 'lightgbm', 'warnings', 'pickle', 'matplotlib.pyplot', 'seaborn', 'torch', 'torch.nn', 'torch.optim', 'torch.nn.functional', 'random', 'pickle', 'pickle', 'torch', 'pandas', 'numpy', 'os'] ['Parallel', 'delayed', 'KFold', 'ReduceLROnPlateau', 'StandardScaler', 'LabelEncoder', 'datasets', 'model_selection', 'TabNetPretrainer', 'TabNetRegressor', 'Metric', 'LabelEncoder', 'mean_squared_error', 'Path']Dict:{'os': [], 'glob': [], 'joblib': [], 'pandas': ['read_csv', 'cut', 'concat', 'read_parquet', 'read_pickle', 'unique', 'merge'], 'numpy': ['mean', 'squeeze', 'any', 'sum', 'unique', 'diff', 'std'], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'warnings': [], 'pickle': [], 'matplotlib': [], 'seaborn': [], 'torch': ['mean', 'squeeze', 'any', 'sum', 'concat', 'unique', 'diff', 'std'], 'random': ['sample'], 'pytorch_tabnet': [], 'pathlib': []} axis_0: 4, axis_1: 2
feature-engineering-pipeline-and-hyperparam-tuning.py : ['read_csv', 'head', 'head', 'astype', 'drop', 'head', 'nunique', 'drop', 'head', 'sort_values', 'reset_index', 'drop', 'sort_values'] ['pandas', 'numpy', 'matplotlib.pyplot'] ['train_test_split', 'GridSearchCV', 'GradientBoostingClassifier', 'roc_auc_score', 'Pipeline', 'imputation', 'encoding']Dict:{'pandas': ['read_csv'], 'numpy': [], 'matplotlib': [], 'sklearn': [], 'feature_engine': [], '=': [], 'pd': [], 'data': [], 'axis=1)': [], 'ascending=False)': []} axis_0: 0, axis_1: 3
shopee-challenge-eda-nlp-on-title-ocr.py : ['read_csv', 'head', 'unique', 'unique', 'keys', 'join', 'keys', 'keys', 'keys', 'head', 'sort_values', 'join', 'join', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'head', 'join', 'read_csv', 'drop', 'map', 'map', 'drop', 'to_csv', 'head', 'join', 'apply', 'apply', 'apply', 'apply'] ['pandas', 'numpy', 'cv2', 'seaborn', 'sklearn', 'matplotlib.pyplot', 'pytesseract', 're', 'string', 'nltk'] ['wrap', 'WordCloud', 'STOPWORDS', 'tqdm', 'dump', 'load', 'stopwords']Dict:{'pandas': ['unique', 'read_csv'], 'numpy': ['unique'], 'cv2': [], 'seaborn': [], 'sklearn': [], 'matplotlib': [], 'textwrap': [], 'pytesseract': [], 're,string': [], 'wordcloud': [], 'tqdm': [], 'joblib': [], 'nltk': []} axis_0: 0, axis_1: 2
simple-feature-engineering.py : ['read_csv', 'read_csv', 'replace', 'replace', 'fillna', 'median', 'items', 'keys', 'items', 'get_dummies', 'concat', 'get_dummies', 'concat', 'get_dummies', 'concat', 'to_csv'] ['pandas', 'numpy', 'itertools', 'random', 'warnings'] ['LogisticRegression']Dict:{'pandas': ['concat', 'get_dummies', 'read_csv'], 'numpy': ['median'], 'itertools': [], 'random': [], '': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 2
gradientboosting-and-early-stopping.py : ['read_csv', 'info', 'read_csv', 'info', 'copy', 'copy', 'concat', 'describe', 'copy', 'reset_index', 'value_counts', 'qcut', 'value_counts', 'sort_index', 'value_counts', 'value_counts', 'count', 'groupby', 'sum', 'mean', 'std', 'mean', 'mean', 'std', 'std', 'crosstab', 'div', 'sum', 'crosstab', 'div', 'sum', 'crosstab', 'div', 'sum', 'crosstab', 'div', 'sum', 'query', 'unique', 'astype', 'round', 'unique', 'unique', 'query', 'reset_index', 'min', 'max', 'copy', 'reset_index', 'drop', 'fillna', 'mean', 'astype', 'var', 'sum', 'isnull', 'sum', 'isnull', 'reset_index', 'where', 'replace', 'apply', 'astype', 'duplicated', 'map', 'cut', 'unique', 'sum', 'groupby', 'drop', 'replace', 'fillna', 'astype', 'replace', 'get', 'get', 'isin', 'get_dummies', 'reset_index', 'get_dummies', 'join', 'drop', 'sum', 'fillna', 'mean', 'fillna', 'mean', 'astype', 'round', 'astype', 'where', 'abs', 'quantile', 'drop', 'drop', 'drop', 'drop', 'to_numpy', 'drop', 'transform'] ['matplotlib', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn', 'datetime', 'warnings'] ['FixedLocator', 'FixedFormatter', 'ConnectionPatch', 'expon', 'reciprocal', 'randint', 'stats', 'scatter_matrix', 'TSNE', 'LocallyLinearEmbedding', 'PCA', 'KernelPCA', 'KMeans', 'SpectralClustering', 'DBSCAN', 'AgglomerativeClustering', 'FeatureAgglomeration', 'AffinityPropagation', 'BayesianGaussianMixture', 'GaussianMixture', 'silhouette_score', 'silhouette_samples', 'mean_squared_error', 'accuracy_score', 'r2_score', 'classification_report', 'ConfusionMatrixDisplay', 'confusion_matrix', 'precision_score', 'recall_score', 'precision_recall_curve', 'f1_score', 'roc_curve', 'roc_auc_score', 'XGBClassifier', 'LinearDiscriminantAnalysis', 'RandomizedSearchCV', 'GridSearchCV', 'StratifiedShuffleSplit', 'cross_val_score', 'cross_val_predict', 'train_test_split', 'StratifiedKFold', 'permutation_test_score', 'RepeatedStratifiedKFold', 'LogisticRegression', 'RidgeClassifier', 'Pipeline', 'ColumnTransformer', 'StandardScaler', 'OneHotEncoder', 'PolynomialFeatures', 'QuantileTransformer', 'LabelEncoder', 'DecisionTreeClassifier', 'RandomForestClassifier', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'ExtraTreesClassifier', 'VotingClassifier', 'SVC', 'KNeighborsClassifier', 'BaseEstimator', 'TransformerMixin', 'ConvergenceWarning', 'KElbowVisualizer', 'simplefilter', 'linkage', 'dendrogram', 'leaves_list']Dict:{'matplotlib': [], 'numpy': ['mean', 'quantile', 'max', 'var', 'abs', 'sum', 'where', 'round', 'min', 'unique', 'isin', 'info', 'std', 'copy'], 'pandas': [], 'seaborn': [], 'datetime': [], 'warnings': [], 'scipy': [], 'sklearn': [], 'xgboost': ['apply'], 'yellowbrick': [], '': []} axis_0: 6, axis_1: 8
denoised-autoencoder-for-feature-engineering.py : ['read_csv', 'read_csv', 'head', 'reset_index', 'concat', 'reset_index', 'head', 'drop', 'head', 'items', 'drop', 'unique', 'sort_values', 'drop', '__init__', 'add', 'items', '__init__', 'astype', 'get', '__init__', 'eval'] ['pandas', 'numpy', 'matplotlib.pyplot', 'torch', 'torch.utils.data', 'gc', 'joblib'] ['erfinv', '*', '*', '*', '*', '*', 'tqdm_notebook']Dict:{'pandas': ['concat', 'eval', 'unique', 'read_csv'], 'numpy': ['unique', 'add'], 'scipy': ['__init__'], 'matplotlib': ['get'], 'torch': [], 'fastai': [], 'tqdm': ['__init__'], 'gc': [], 'joblib': []} axis_0: 0, axis_1: 4
auto-keras-example7-89-with-no-feature-engineering.py : ['read_csv', 'drop', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'tqdm', 'tensorflow', 'autokeras'] ['classification_report']Dict:{'numpy': [], 'pandas': ['read_csv'], 'tqdm': [], 'sklearn': [], 'tensorflow': [], 'autokeras': []} axis_0: 0, axis_1: 0
feature-engineering-for-house-prices.py : ['read_csv', 'read_csv', 'concat', 'read_csv', 'unique', 'replace', 'where', 'rename', 'items', 'astype', 'items', 'astype', 'select_dtypes', 'sum', 'isnull', 'fillna', 'isnull', 'select_dtypes', 'sum', 'isnull', 'fillna', 'isnull', 'info', 'info', 'select_dtypes', 'mean', 'copy', 'pop', 'copy', 'select_dtypes', 'factorize', 'sort_values', 'sort_values', 'copy', 'pop', 'copy', 'pop', 'select_dtypes', 'copy', 'select_dtypes', 'get_dummies', 'mul', 'sum', 'gt', 'transform', 'groupby', 'factorize', 'factorize', 'copy', 'mean', 'std', 'copy', 'mean', 'std', 'mean', 'std', 'cumsum', 'transform', 'concat', 'transform', 'add', 'copy', 'pop', 'copy', 'pop', 'concat', 'join', 'join', 'join', 'join', 'join', 'join', 'drop', 'join', 'join', 'transform', 'to_csv'] ['os', 'warnings', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn', 'optuna'] ['Path', 'display', 'CategoricalDtype', 'MEstimateEncoder', 'CatBoostEncoder', 'KMeans', 'PCA', 'mutual_info_regression', 'KFold', 'cross_val_score', 'XGBRegressor', 'reduce']Dict:{'os': ['rename', 'replace'], 'warnings': [], 'pathlib': ['rename', 'replace'], 'matplotlib': [], 'numpy': ['mean', 'add', 'sum', 'where', 'unique', 'info', 'std', 'cumsum', 'copy'], 'pandas': [], 'seaborn': [], 'IPython': [], 'category_encoders': [], 'sklearn': [], 'xgboost': [], 'optuna': []} axis_0: 4, axis_1: 1
ny-racing-association-anai-ml.py : ['join', 'head', 'sum', 'isna', 'head'] ['numpy', 'pandas', 'os', 'anai', 'plotly.express'] ['Preprocessor']Dict:{'numpy': ['sum'], 'pandas': ['isna'], 'os': [], 'anai': [], 'plotly': []} axis_0: 0, axis_1: 0
eda-security-master-analysis.py : ['astype', 'notnull', 'agg', 'groupby', 'min', 'max', 'droplevel', 'rename', 'astype', 'astype', 'astype', 'head', 'sort_values', 'query', 'set_index', 'head', 'sort_values', 'nunique', 'groupby', 'unique', 'cumprod', 'set_index', 'head', 'sort_values', 'nunique', 'groupby', 'unique', 'set_index', 'sort_values', 'reset_index', 'groupby', 'reset_index', 'apply', 'mean', 'rolling', 'query', 'set_index', 'reset_index', 'reset_index', 'sort_values', 'reset_index', 'reset_index', 'mean', 'rolling', 'groupby', 'query', 'set_index', 'reset_index'] ['matplotlib.pyplot', 'numpy', 'pandas', 'plotly.plotly', 'plotly.graph_objs', 'cufflinks'] ['init_notebook_mode', 'iplot', 'twosigmanews']Dict:{'matplotlib': [], 'numpy': ['mean', 'max', 'min', 'unique', 'cumprod'], 'pandas': ['notnull', 'unique'], 'plotly': [], 'cufflinks': [], 'kaggle': []} axis_0: 0, axis_1: 0
pyspark-for-data-science.py : ['transform', 'transform', 'filter', 'join', 'where', 'transform', 'transform', 'drop', 'replace', 'groupby', 'count', 'transform', 'drop', 'transform', 'transform', 'transform'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'sklearn', 'random', 'os'] ['SparkSession', 'Pipeline', 'SQLContext', 'mean', 'col', 'split', 'col', 'regexp_extract', 'when', 'lit', 'StringIndexer', 'VectorAssembler', 'MulticlassClassificationEvaluator', 'QuantileDiscretizer', 'StringIndexer', 'IndexToString', 'ALS', 'RegressionEvaluator', 'isnan', 'when', 'count', 'col', 'LogisticRegression', 'ParamGridBuilder', 'TrainValidationSplit', 'Pipeline', 'BinaryClassificationEvaluator', 'CrossValidator', 'ParamGridBuilder', 'roc_curve', 'auc', 'BinaryClassificationMetrics', 'SparkContext', 'roc_curve', 'auc', 'RandomForestClassifier', 'ParamGridBuilder', 'TrainValidationSplit']Dict:{'numpy': ['where'], 'pandas': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'random': [], 'os': ['replace'], 'pyspark': []} axis_0: 0, axis_1: 0
titanic-project-example.py : ['join', 'read_csv', 'read_csv', 'concat', 'info', 'describe', 'describe', 'hist', 'corr', 'corr', 'pivot_table', 'value_counts', 'value_counts', 'pivot_table', 'pivot_table', 'pivot_table', 'apply', 'isna', 'value_counts', 'pivot_table', 'apply', 'value_counts', 'pivot_table', 'apply', 'apply', 'replace', 'replace', 'join', 'value_counts', 'value_counts', 'pivot_table', 'pivot_table', 'head', 'apply', 'value_counts', 'apply', 'isna', 'apply', 'apply', 'apply', 'replace', 'replace', 'join', 'apply', 'fillna', 'median', 'fillna', 'median', 'dropna', 'hist', 'hist', 'astype', 'get_dummies', 'drop', 'drop', 'copy', 'drop', 'drop', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'astype', 'to_csv', 'nlargest', 'astype', 'to_csv', 'mean', 'mean', 'mean', 'mean', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'apply', 'apply', 'value_counts', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'os'] ['StandardScaler', 'cross_val_score', 'GaussianNB', 'LogisticRegression', 'tree', 'KNeighborsClassifier', 'RandomForestClassifier', 'SVC', 'XGBClassifier', 'VotingClassifier', 'GridSearchCV', 'RandomizedSearchCV']Dict:{'numpy': ['mean', 'median', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'pivot_table', 'concat', 'value_counts', 'get_dummies'], 'seaborn': [], 'matplotlib': ['hist'], 'os': ['replace'], 'sklearn': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 0
explained-baseline-solution.py : ['to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'read_csv', 'unique', 'count', 'filter', 'count', 'filter', 'filter', 'filter', 'filter', 'unique', 'abs', 'abs', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'unique', 'filter', 'std', 'filter', 'filter', 'filter', 'filter', 'to_numpy', 'unique', 'std', 'filter', 'std', 'filter', 'diff', 'filter', 'diff', 'mean', 'filter', 'rename', 'reset_index', 'sample', 'filter', 'to_csv'] ['numpy', 'pandas', 'plotly.express', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'gc', 'polars', 'datetime', 'optuna', 'xgboost', 'lightgbm', 'warnings'] ['deepcopy', 'partial', 'combinations', 'groupby', 'tqdm', 'train_test_split', 'StratifiedKFold', 'KFold', 'roc_auc_score', 'accuracy_score', 'log_loss', 'cross_validate', 'RocCurveDisplay', 'confusion_matrix', 'ConfusionMatrixDisplay', 'precision_score', 'average_precision_score', 'LogisticRegression', 'RandomForestClassifier', 'GradientBoostingClassifier', 'Pipeline', 'Pool', 'score']Dict:{'numpy': ['mean', 'abs', 'unique', 'diff', 'std'], 'pandas': ['to_datetime', 'unique', 'read_csv'], 'plotly': [], 'matplotlib': [], 'seaborn': [], 'random': ['sample'], '': [], '#': [], 'Random': [], 'for': [], 'generating': [], 'numbers': [], 'os': ['rename'], 'OS': [], 'interacting': [], 'with': [], 'the': [], 'operating': [], 'system': [], 'gc': [], 'Garbage': [], 'collector': [], 'memory': [], 'management': [], 'copy': [], 'functools': [], 'itertools': [], 'tqdm': [], 'polars': ['mean', 'count', 'std', 'read_csv'], 'datetime': [], 'Datetime': [], 'date': [], 'and': [], 'time': [], 'operations': [], 'sklearn': [], 'optuna': [], 'Library': [], 'hyperparameter': [], 'tuning': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'metric': [], 'warnings': []} axis_0: 0, axis_1: 0
ps3e24-predicting-smokers-for-starters.py : ['mode', 'read_csv', 'read_csv', 'read_csv', 'head', 'count', 'nunique', 'sum', 'isnull', 'min', 'max', 'head', 'count', 'nunique', 'sum', 'isnull', 'min', 'max', 'head', 'count', 'nunique', 'sum', 'isnull', 'min', 'max', 'drop', 'drop', 'copy', 'concat', 'sample', 'drop', 'mean', 'value_counts', 'nunique', 'value_counts', 'value_counts', 'nunique', 'value_counts', 'corr', 'corr', 'concat', 'pop', 'copy', 'copy', 'copy', 'pop', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'concat', 'drop', 'reset_index', 'concat', 'mean', 'std', 'mean', 'std', 'reindex', 'sort_values', 'mean', 'copy', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['OneHotEncoder', 'MEstimateEncoder', 'CatBoostEncoder', 'set_config', 'StratifiedKFold', 'RandomForestRegressor', 'roc_auc_score', 'roc_curve', 'make_pipeline', 'clone', 'FunctionTransformer', 'StandardScaler', 'PowerTransformer', 'ColumnTransformer', 'LogisticRegression', 'RidgeClassifier', 'GaussianNB', 'BernoulliNB', 'RandomForestClassifier', 'ExtraTreesClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'VotingClassifier', 'LinearDiscriminantAnalysis', 'dendrogram', 'linkage', 'squareform', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'std', 'copy'], 'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'category_encoders': [], 'sklearn': [], 'scipy': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 0
ps-s3e2-stroke-prediction-tensorflow.py : ['read_csv', 'read_csv', 'head', 'sum', 'isna', 'sum', 'isna', 'corr', 'drop', 'apply', 'get_dummies', 'get_dummies', 'transform', 'transform', 'update', 'add', 'add', 'add', 'add', 'add', 'add', 'astype', 'astype', 'round', 'read_csv', 'to_csv', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'statistics', 'time', 'os', 'matplotlib.dates', 'plotly.express', 'math', 'wandb', 'warnings', 'tensorflow', 'os'] ['combinations', 'stats', 'pearsonr', 'shapiro', 'chi2', 'poisson', 'datetime', 'colored', 'train_test_split', 'StratifiedKFold', 'WandbCallback', 'StandardScaler', 'LabelEncoder', 'log_loss', 'accuracy_score', 'roc_auc_score', 'logit', 'keras', 'backend', 'layers', 'plot_model', 'Activation', 'get_custom_objects', 'UserSecretsClient']Dict:{'numpy': ['round', 'sum', 'add'], 'pandas': ['isna', 'get_dummies', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'itertools': [], 'statistics': [], 'scipy': [], 'time': [], 'os': [], 'datetime': [], 'plotly': [], 'termcolor': [], 'sklearn': [], 'math': [], 'wandb': [], 'warnings': [], 'tensorflow': [], 'keras': [], 'kaggle_secrets': []} axis_0: 0, axis_1: 2
ashrae-kfold-lightgbm-without-leak-1-08.py : ['read_csv', 'query', 'read_csv', 'read_csv', 'min', 'max', 'array', 'concat', 'reset_index', 'to_datetime', 'set_index', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'reset_index', 'drop', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'sort_values', 'reset_index', 'to_datetime', 'drop', 'merge', 'merge', 'head', 'drop', 'read_csv', 'drop', 'merge', 'read_csv', 'merge', 'head', 'clip', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'lightgbm', 'datetime', 'gc'] ['LabelEncoder', 'KFold', 'is_datetime64_any_dtype', 'is_categorical_dtype']Dict:{'pandas': [], 'numpy': ['mean', 'max', 'sum', 'min', 'clip', 'array'], 'matplotlib': [], 'lightgbm': [], 'sklearn': [], 'datetime': [], 'gc': []} axis_0: 0, axis_1: 3
ell-nlp-feature-engineering-textacy-textstat.py : ['read_csv', 'drop', 'round', 'mean', 'select_dtypes', 'sample', 'read_csv', 'apply', 'apply', 'corr', 'mean', 'max', 'mean', 'max', 'corr', 'sort_values', 'corrwith', 'mean', 'mean', 'mean', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'to_parquet'] ['numpy', 'pandas', 'seaborn', 'language_tool_python', 'textacy', 'textstat', 'matplotlib.pyplot', 'spacy', 're', 'seaborn'] ['text_stats', 'Counter']Dict:{'numpy': ['mean', 'round', 'max'], 'pandas': ['read_csv'], 'seaborn': [], 'language_tool_python': [], 'textacy': [], 'textstat': [], 'matplotlib': [], 'spacy': [], 're': [], 'collections': []} axis_0: 0, axis_1: 4
thoughtful-eda-feature-engineering-and-lightgbm.py : ['read_csv', 'read_csv', 'head', 'head', 'reset_index', 'sum', 'isnull', 'nunique', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'reset_index', 'count', 'groupby', 'reset_index', 'count', 'groupby', 'reset_index', 'count', 'groupby', 'reset_index', 'count', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'astype', 'astype', 'sample', 'drop_duplicates', 'concat', 'transform', 'transform', 'sample', 'isna', 'keys', 'apply', 'apply', 'apply', 'apply', 'sample', 'astype', 'astype', 'map', 'map', 'map', 'map', 'head', 'drop_duplicates', 'concat', 'get_dummies', 'concat', 'get_dummies', 'astype', 'astype', 'map', 'map', 'map', 'map', 'drop', 'drop', 'corr', 'head', 'head', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'drop', 'min', 'max', 'max', 'read_csv', 'stack', 'head', 'to_csv'] ['warnings', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'mplleaflet', 'lightgbm'] ['stats', 'iplot', 'init_notebook_mode', 'Markdown', 'LabelEncoder', 'StandardScaler', 'BayesianOptimization', 'train_test_split']Dict:{'warnings': [], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'numpy': ['mean', 'stack', 'max', 'sum', 'min'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'IPython': [], 'mplleaflet': [], 'sklearn': [], 'lightgbm': [], 'bayes_opt': []} axis_0: 0, axis_1: 6
basic-feature-engineering-lgbm-lb-0-768.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'rename', 'read_csv', 'fillna', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'read_csv', 'fillna', 'value_counts', 'reset_index', 'value_counts', 'reset_index', 'merge', 'fillna', 'mean', 'groupby', 'count', 'groupby', 'mean', 'groupby', 'count', 'groupby', 'merge', 'reset_index', 'merge', 'reset_index', 'merge', 'reset_index', 'merge', 'reset_index', 'read_csv', 'agg', 'groupby', 'read_csv', 'agg', 'groupby', 'reset_index', 'reset_index', 'head', 'merge', 'merge', 'get_dummies', 'merge', 'merge', 'fillna', 'merge', 'merge'] ['pandas', 'numpy', 'gc'] ['roc_auc_score', 'KFold', 'LGBMClassifier']Dict:{'pandas': ['get_dummies', 'merge', 'read_csv', 'value_counts'], 'numpy': ['mean'], 'sklearn': [], 'lightgbm': [], 'gc': []} axis_0: 0, axis_1: 0
machine-learning-with-ghouls-goblins-and-ghosts.py : ['read_csv', 'read_csv', 'info', 'head', 'drop', 'drop', 'describe', 'describe', 'unique', 'unique', 'unique', 'transform', 'drop', 'drop', 'corr', 'melt', 'map', 'boxplot', 'get_dummies', 'drop', 'get_dummies', 'drop', 'get_dummies', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'warnings'] ['pyplot', 'preprocessing', 'metrics', 'train_test_split', 'GridSearchCV', 'DecisionTreeClassifier', 'VotingClassifier', 'RandomForestClassifier', 'BaggingClassifier', 'GradientBoostingClassifier', 'KNeighborsClassifier', 'LogisticRegression', 'SVC']Dict:{'numpy': ['info', 'unique'], 'pandas': ['get_dummies', 'melt', 'unique', 'read_csv'], 'matplotlib': [], 'seaborn': ['boxplot'], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 0
eda-and-graph-nn-baseline-modeling.py : ['copy', 'sum', 'copy', 'sum', 'sum', 'count', 'sum', 'sum', 'get', 'count', 'product', 'copy', 'sum', 'sum', 'sum', 'copy', 'astype', 'replace', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'head', 'head', 'hist', 'head', 'head', 'hist', 'head', 'unique', 'unique', 'unique', 'value_counts', 'head', 'hist', 'value_counts', 'hist', 'value_counts', 'sort_index', 'sort_index', 'unique', 'map', 'merge', 'drop', 'rename', 'head', 'map', 'sample', 'concat', 'map', 'astype', 'astype', 'astype', 'astype', 'keys', 'array', '__init__', 'mean', 'std', 'mean', 'std', 'std', 'mean', 'mean', 'std', 'mean', 'std', 'array', 'array', '__init__', 'concat', '__init__', 'concat', '__init__', 'copy', 'sum', 'mean', 'abs', 'head', 'head', 'to_csv'] ['chainer', 'chainer_chemistry', 'chaineripy', 'cupy', 'rdkit', 'gc', 'numpy', 'numpy', 'os', 'pandas', 'seaborn', 'matplotlib.pyplot', 'rdkit', 'itertools', 'copy', 'networkx', 'numpy', 'chainer', 'os', 'numpy', 'chainer', 'chainer', 'chainer.links', 'chainer.functions', 'copy', 'numpy', 'chainer', 'numpy', 'os'] ['contextmanager', 'Path', 'time', 'perf_counter', 'NumpyTupleDataset', 'Chem', 'Chem', 'AllChem', 'rdmolops', 'defaultdict', 'print_function', 'Chem', 'IPythonConsole', 'SVG', 'rdDepictor', 'rdMolDraw2D', 'construct_atomic_number_array', 'construct_atom_type_vec', 'construct_formal_charge_vec', 'construct_partial_charge_vec', 'construct_atom_ring_vec', 'construct_hybridization_vec', 'construct_hydrogen_bonding', 'construct_aromaticity_vec', 'construct_num_hydrogens_vec', 'construct_pair_feature', 'NumpyTupleDataset', 'StandardScaler', 'tqdm_notebook', '_concat_arrays', 'to_device', 'chain', 'functions', 'links', 'MAX_ATOMIC_NUM', 'WEAVE_DEFAULT_NUM_MAX_ATOMS', 'GeneralReadout', 'EmbedAtomID', 'LinearLayer', 'WeaveModule', 'MLP', 'getLogger', 'cuda', 'convert', 'reporter', 'Evaluator', 'Evaluator', 'split_dataset_random', 'functions', 'iterators', 'optimizers', 'training', 'extensions', 'concat_mols', 'preprocess_method_dict', 'datasets', 'NumpyTupleDataset', 'StandardScaler', 'Regressor', 'RandomSplitter', 'PrintReport', 'ProgressBar']Dict:{'chainer': [], 'chainer_chemistry': [], 'chaineripy': [], 'cupy': [], 'rdkit': [], 'contextlib': ['__init__'], 'gc': [], 'numpy': ['mean', 'product', 'std', 'abs', 'sum', 'unique', 'array', 'copy'], 'os': ['rename', 'replace'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'array', 'merge'], 'pathlib': ['rename', '__init__', 'replace'], 'time': ['__init__'], 'seaborn': [], 'matplotlib': ['get', 'hist'], 'itertools': ['__init__'], 'collections': ['keys', 'get', '__init__', 'copy'], 'copy': ['copy'], 'networkx': [], '__future__': ['__init__'], 'IPython': ['__init__'], 'tqdm': ['__init__'], 'to_array,': [], 'logging': ['__init__']} axis_0: 1, axis_1: 11
recursive-feature-elimination-rfe-example.py : ['read_csv', 'read_csv', 'copy', 'select_dtypes', 'drop', 'copy', 'select_dtypes', 'fillna', 'mean', 'fillna', 'mean', 'to_csv'] ['pandas', 'numpy'] ['RandomForestRegressor', 'RFE', 'itemgetter']Dict:{'pandas': ['read_csv'], '': [], 'numpy': ['mean', 'copy'], 'sklearn': [], 'operator': []} axis_0: 0, axis_1: 1
tps-nov-21-data-check-feature-analysis.py : ['info', 'info', 'describe', 'head', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'drop_duplicates', 'drop_duplicates', 'sort_values', 'nunique', 'sort_values', 'corr', 'corr', 'boxplot', 'drop', 'head', 'sort_values', 'abs', 'corr', 'drop', 'head', 'sort_values', 'var', 'head', 'sort_values', 'apply', 'std', 'mean', 'drop', 'mean', 'sum', 'min', 'max', 'std', 'var', 'head', 'sort_values', 'abs', 'corr', 'join', 'corr', 'cumsum', 'cut', 'cut', 'cut'] ['random', 'pandas', 'numpy', 'datatable', 'warnings', 'seaborn', 'matplotlib.pyplot', 'shap', 'numpy'] ['chi2_contingency', 'PCA', 'KMeans', 'f_classif', 'mutual_info_classif', 'SelectKBest', 'chi2', 'SelectFromModel', 'StandardScaler', 'RobustScaler', 'MinMaxScaler']Dict:{'random': [], 'pandas': ['isna', 'cut'], 'numpy': ['mean', 'max', 'abs', 'var', 'sum', 'min', 'info', 'std', 'cumsum'], 'datatable': [], 'warnings': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'shap': [], 'scipy': [], 'sklearn': []} axis_0: 0, axis_1: 9
time-split-validation-malware-0-68.py : ['read_csv', 'astype', 'read_csv', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'value_counts', 'merge', 'fillna', 'fillna', 'reset_index', 'sum', 'sum', 'max', 'max', 'sort_values', 'sort_values', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sample', 'isin', 'map', 'map', 'map', 'concat', 'factorize', 'where', 'max', 'max', 'astype', 'astype', 'astype', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'value_counts', 'merge', 'fillna', 'fillna', 'apply', 'factorize', 'set_index', 'to_dict', 'map', 'map', 'sum', 'memory_usage', 'sum', 'memory_usage', 'astype', 'astype', 'sample', 'isin', 'read_csv', 'to_csv', 'copy', 'copy', 'sample', 'isin', 'read_csv', 'to_csv', 'read_csv', 'astype', 'read_csv', 'concat', 'concat', 'copy', 'read_csv', 'read_csv', 'map'] ['numpy', 'pandas', 'gc', 'random', 'matplotlib.pyplot', 'lightgbm', 'graphviz'] ['datetime', 'DecisionTreeClassifier', 'roc_auc_score', 'tree']Dict:{'numpy': ['max', 'sum', 'where', 'isin', 'copy'], 'matplotlib': [], 'datetime': ['max'], 'lightgbm': [], 'sklearn': [], 'graphviz': []} axis_0: 3, axis_1: 5
eda-and-feature-engineering.py : ['read_csv', 'read_csv', 'sample', 'sample', 'info', 'sum', 'isnull', 'duplicated', 'drop', 'nunique', 'head', 'value_counts', 'query', 'notnull', 'join', 'unique', 'query', 'unique', 'query', 'hist', 'value_counts', 'nunique', 'head', 'value_counts', 'notnull', 'join', 'value_counts', 'unique', 'query', 'unique', 'query', 'unique', 'query', 'unique', 'query', 'value_counts', 'nunique', 'head', 'value_counts', 'astype', 'astype', 'head', 'nunique', 'nunique', 'hist', 'replace', 'head', 'value_counts', 'read_csv', 'head', 'query', 'query', 'map', 'set_index', 'to_csv', 'sample', 'hist', 'value_counts', 'query', 'replace', 'query', 'replace', 'read_csv', 'head'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'numpy', 'bq_helper', 'warnings'] ['colored', 'WordCloud', 'STOPWORDS', 'BigQueryHelper']Dict:{'pandas': ['read_csv', 'isnull', 'value_counts', 'unique', 'notnull'], 'termcolor': [], 'matplotlib': ['hist'], 'seaborn': [], 'plotly': [], 'wordcloud': [], 'numpy': ['info', 'sum', 'unique'], 'bq_helper': [], 'warnings': []} axis_0: 0, axis_1: 0
eda-features-engineering-and-lightgbm.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'info', 'describe', 'head', 'to_datetime', 'count', 'groupby', 'mean', 'groupby', 'to_datetime', 'count', 'groupby', 'reset_index', 'sort_values', 'reset_index', 'agg', 'groupby', 'reset_index', 'sort_values', 'reset_index', 'agg', 'groupby', 'unique', 'head', 'tail', 'head', 'reset_index', 'sort_values', 'reset_index', 'agg', 'groupby', 'head', 'reset_index', 'sort_values', 'reset_index', 'agg', 'groupby', 'hist', 'join', 'apply', 'replace', 'replace', 'join', 'head', 'isnull', 'mean', 'mean', 'fillna', 'fillna', 'fillna', 'join', 'isnull', 'boxplot', 'apply', 'groupby', 'fillna', 'median', 'apply', 'groupby', 'fillna', 'median', 'apply', 'groupby', 'fillna', 'median', 'hist', 'hist', 'fillna', 'fillna', 'fillna', 'apply', 'replace', 'replace', 'isnull', 'apply', 'groupby', 'fillna', 'median', 'apply', 'groupby', 'fillna', 'median', 'apply', 'groupby', 'fillna', 'median', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'concat', 'agg', 'groupby', 'mean', 'drop', 'fillna', 'rename', 'merge', 'rename', 'reset_index', 'fillna', 'rename', 'merge', 'rename', 'reset_index', 'drop', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'transform', 'transform', 'drop', 'drop', 'head', 'drop', 'drop', 'mean', 'clip', 'to_csv'] ['os', 'pandas_profiling', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'datetime', 'pandas_profiling', 'lightgbm'] ['stats', 'hstack', 'csr_matrix', 'train_test_split', 'WordCloud', 'Counter', 'stopwords', 'ngrams', 'TfidfVectorizer', 'Ridge', 'cross_val_predict', 'KFold']Dict:{'os': ['rename', 'replace'], 'pandas_profiling': [], 'numpy': ['mean', 'median', 'unique', 'clip', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'merge', 'to_datetime'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'datetime': [], 'scipy': ['mean'], 'sklearn': [], 'wordcloud': [], 'collections': [], 'nltk': [], 'lightgbm': []} axis_0: 0, axis_1: 8
interesting-feature-importance-by-lstm-gradients.py : ['read_csv', 'head', 'cumsum', 'groupby', 'cumsum', 'groupby', 'cumsum', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'cumsum', 'groupby', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'diff', 'groupby', 'reset_index', 'mean', 'ewm', 'groupby', 'reset_index', 'agg', 'rolling', 'groupby', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'to_numpy', 'drop', 'keys', 'astype', 'squeeze', 'min', 'max', 'unique', 'array', 'abs', 'mean', 'array', 'abs', 'array'] ['gc', 'numpy', 'pandas', 'tensorflow', 'matplotlib.pyplot'] ['KFold', 'RobustScaler', 'mean_absolute_error', 'plot_model', 'Model', 'load_model', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau', 'Bidirectional', 'LSTM', 'Dense', 'Dropout', 'Input', 'Concatenate', 'Add', 'GRU']Dict:{'gc': [], 'numpy': ['mean', 'squeeze', 'max', 'abs', 'min', 'unique', 'diff', 'array', 'cumsum'], 'pandas': ['get_dummies', 'array', 'unique', 'read_csv'], 'sklearn': [], 'tensorflow': [], 'matplotlib': []} axis_0: 1, axis_1: 1
titanic-top-4-competition-pipeline-version-1.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'copy', 'replace', 'apply', 'apply', 'agg', 'groupby', 'rename', 'reset_index', 'merge', 'fillna', 'median', 'cut', 'astype', 'apply', 'apply', 'replace', 'apply', 'quantile', 'quantile', 'qcut', 'apply', 'apply', 'apply', 'apply', 'copy', 'query', 'astype', 'copy', 'query', 'drop', 'test', 'sub', 'copy', 'transform', 'transform', 'transform', 'transform', 'fillna', 'transform', 'fillna', 'transform', 'fillna', 'fillna', 'transform', 'fillna', 'transform', 'fillna', 'fillna', 'transform', 'fillna', 'transform', 'fillna', 'transform', 'transform', 'transform', 'transform', 'concat', 'concat', 'concat', 'copy', 'reset_index', 'reset_index', 'copy', 'test', 'update', 'mean', 'rename', 'reset_index', 'copy', 'sub', 'drop', 'astype', 'mean', 'items', 'concat', 'concat', 'merge', 'merge', 'copy', 'copy', 'reset_index', 'reset_index', 'copy', 'update', 'mean', 'std', 'rename', 'reset_index', 'copy', 'astype', 'mean', 'to_csv'] ['pandas', 'numpy', 'xgboost', 'catboost', 'lightgbm', 'warnings'] ['model_selection', 'preprocessing', 'impute', 'metrics', 'linear_model', 'ensemble']Dict:{'pandas': ['read_csv', 'cut', 'concat', 'test', 'qcut', 'merge'], 'numpy': ['mean', 'median', 'quantile', 'test', 'std', 'copy'], 'sklearn': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 7
titanic-complete-template-for-classification.py : ['read_csv', 'read_csv', 'info', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'select_dtypes', 'select_dtypes', 'corr', 'items', 'reset_index', 'drop', 'fillna', 'cut', 'fillna', 'apply', 'fillna', 'cut', 'apply', 'apply', 'drop', 'head', 'concat', 'transform', 'transform', 'head', 'drop', 'mean'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 're', 'math', 'warnings', 'time', 'matplotlib.gridspec'] ['HTML', 'Counter', 'tqdm', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'LGBMRegressor', 'XGBRegressor', 'CatBoostRegressor', 'Style', 'Fore', 'preprocessing', 'LGBMClassifier', 'roc_auc_score']Dict:{'IPython': [], 'pandas': ['concat', 'cut', 'read_csv', 'isnull'], 'numpy': ['transpose', 'info', 'sum', 'mean'], 'matplotlib': [], 'seaborn': [], 'gc': [], 're': [], 'collections': ['items'], 'tqdm': [], 'math': [], 'sklearn': [], 'warnings': [], 'time': [], 'lightgbm': [], 'xgboost': ['apply'], 'catboost': [], 'colorama': []} axis_0: 0, axis_1: 2
stop-the-s-toxic-comments-eda.py : ['read_csv', 'read_csv', 'tail', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'fillna', 'sum', 'value_counts', 'corr', 'min', 'min', 'min', 'where', 'crosstab', 'concat', 'apply', 'sum', 'sum', 'crosstab', 'array', 'join', 'array', 'join', 'array', 'join', 'array', 'join', 'array', 'join', 'concat', 'reset_index', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'mean', 'concat', 'melt', 'sum', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'sub', 'sub', 'sub', 'join', 'apply', 'array', 'transform', 'transform', 'squeeze', 'mean', 'array', 'transform', 'transform', 'array', 'transform', 'transform', 'multiply', 'multiply', 'sum', 'sum', 'multiply', 'mean', 'mean', 'mean', 'mean'] ['pandas', 'numpy', 'gc', 'time', 'warnings', 'scipy.stats', 'matplotlib.pyplot', 'matplotlib.gridspec', 'seaborn', 'matplotlib_venn', 'string', 're', 'nltk', 'spacy', 'pandas'] ['imread', 'sparse', 'WordCloud', 'STOPWORDS', 'Image', 'stopwords', 'pos_tag', 'WordNetLemmatizer', 'word_tokenize', 'TweetTokenizer', 'TfidfVectorizer', 'CountVectorizer', 'HashingVectorizer', 'TruncatedSVD', 'BaseEstimator', 'ClassifierMixin', 'check_X_y', 'check_is_fitted', 'LogisticRegression', 'metrics', 'log_loss', 'StratifiedKFold', 'train_test_split', 'csr_matrix', 'hstack']Dict:{'pandas': ['read_csv', 'isnull', 'melt', 'concat', 'value_counts', 'array', 'crosstab'], 'numpy': ['mean', 'squeeze', 'sum', 'where', 'min', 'array', 'multiply'], 'gc': [], 'time': [], 'warnings': [], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'wordcloud': [], 'PIL': [], 'matplotlib_venn': [], 'string': [], 're': ['sub'], '': [], '#for': [], 'regex': [], 'nltk': [], 'spacy': [], 'sklearn': []} axis_0: 3, axis_1: 3
tps-dec-2021-6-full-lightgbm-tuning-training.py : ['read_csv', 'read_csv', 'read_csv', 'value_counts', 'head', 'concat', 'read_csv', 'sum', 'copy', 'read_csv', 'to_dict', 'value_counts', 'corr', 'sum', 'memory_usage', 'astype', 'to_numeric', 'drop', 'reset_index', 'concat', 'assign', 'assign', 'assign', 'assign', 'min', 'concat', 'astype', 'rename', 'sum', 'astype', 'rename', 'sum', 'rename', 'astype', 'rename', 'apply', 'rename', 'where', 'rename', 'rename', 'apply', 'astype', 'rename', 'rename', 'abs', 'abs', 'astype', 'rename', 'apply', 'rename', 'apply', 'add_suffix', 'clip', 'rename', 'sum', 'rename', 'rename', 'astype', 'rename', 'rename', 'astype', 'rename', 'rename', 'rename', 'abs', 'astype', 'rename', 'rename', 'abs', 'rename', 'abs', 'drop', 'astype', 'drop', 'drop', 'astype', 'drop', 'astype', 'head', 'drop', 'drop', 'value_counts', 'drop', 'concat', 'drop', 'concat', 'drop', 'concat', 'concat', 'drop', 'concat', 'transform', 'transform', 'transform', 'transform', 'transform', 'boxplot', 'head', 'drop', 'value_counts', 'drop', 'mean', 'astype', 'squeeze', 'copy', 'astype', 'drop', 'concat', 'to_csv', 'array', 'array', 'read_csv', 'astype', 'to_csv', 'value_counts', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'optuna', 'time', 'os'] ['PCA', 'StratifiedKFold', 'cross_val_score', 'train_test_split', 'accuracy_score', 'f1_score', 'classification_report', 'confusion_matrix', 'CalibratedClassifierCV', 'MinMaxScaler', 'RobustScaler', 'StandardScaler', 'mode', 'SMOTEENN', 'SMOTETomek', 'CondensedNearestNeighbour', 'Counter', 'KMeans', 'DBSCAN', 'dendrogram', 'linkage']Dict:{'pandas': ['read_csv', 'concat', 'value_counts', 'to_numeric', 'array'], 'numpy': ['mean', 'squeeze', 'abs', 'sum', 'where', 'min', 'clip', 'array', 'copy'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'scipy': [], 'lightgbm': [], 'optuna': [], 'imblearn': [], 'collections': ['copy'], 'time': [], 'os': ['rename']} axis_0: 2, axis_1: 5
titanic-new.py : ['join', 'read_csv', 'read_csv', 'info', 'info', 'sum', 'isnull', 'mean', 'isnull', 'sum', 'isnull', 'mean', 'isnull', 'nunique', 'nunique', 'value_counts', 'mean', 'groupby', 'crosstab', 'value_counts', 'mean', 'groupby', 'crosstab', 'value_counts', 'mean', 'groupby', 'crosstab', 'value_counts', 'crosstab', 'crosstab', 'value_counts', 'crosstab', 'crosstab', 'mean', 'groupby', 'describe', 'describe', 'corr', 'corr', 'copy', 'head', 'head', 'skew', 'astype', 'value_counts', 'value_counts', 'fillna', 'fillna', 'apply', 'apply', 'crosstab', 'mean', 'groupby', 'apply', 'apply', 'crosstab', 'info', 'corr', 'mean', 'isnull', 'mean', 'isnull', 'fillna', 'median', 'mean', 'isnull', 'fillna', 'mean', 'isnull', 'fillna', 'median', 'mean', 'isnull', 'fillna', 'median', 'mean', 'isnull', 'get_dummies', 'get_dummies', 'to_csv'] ['numpy', 'pandas', 'os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'seaborn'] ['RandomForestClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'info', 'copy'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'crosstab'], 'os': [], 'matplotlib': [], 'seaborn': [], 'sklearn': ['apply']} axis_0: 0, axis_1: 0
a-framework-for-tabular-regression-e9-8-6.py : ['read_csv', 'read_csv', 'read_csv', 'copy', 'copy', 'copy', 'concat', 'transform', 'squeeze', 'to_csv', 'mean', 'to_csv', 'sort_values', 'keys', 'mean', 'to_csv', 'mean', 'to_csv', 'nunique', 'nunique', 'nunique', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'head', 'copy', 'copy', 'copy', 'concat', 'astype', 'boxplot', 'corr', 'where', 'abs', 'astype', 'round', 'mean', 'array', 'sort_values', 'mean', 'array', 'sort_values', 'drop', 'read_csv', 'mean', 'concat'] ['json', 'pandas', 'numpy', 'torch', 'matplotlib.pyplot', 'seaborn', 'flaml'] ['Path', 'partial', 'time', 'stats', 'KFold', 'GridSearchCV', 'train_test_split', 'ColumnTransformer', 'make_pipeline', 'Pipeline', 'Lasso', 'Ridge', 'LinearRegression', 'mean_squared_error', 'mean_squared_log_error', 'StandardScaler', 'OneHotEncoder', 'OrdinalEncoder', 'MinMaxScaler', 'LabelEncoder', 'SimpleImputer', 'BaseEstimator', 'TransformerMixin', 'TargetEncoder', 'LeaveOneOutEncoder', 'WOEEncoder', 'XGBRegressor', 'LGBMRegressor', 'log_evaluation', 'early_stopping', 'CatBoostRegressor']Dict:{'pathlib': [], 'functools': [], 'json': [], 'time': [], 'pandas': ['concat', 'array', 'read_csv', 'isnull'], 'numpy': ['mean', 'squeeze', 'abs', 'sum', 'where', 'round', 'array', 'copy'], 'scipy': [], 'sklearn': [], 'category_encoders': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'torch': ['mean', 'squeeze', 'abs', 'sum', 'concat', 'where', 'round'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'flaml': []} axis_0: 8, axis_1: 8
gd-mdf-simple-lgbm-baseline.py : ['read_csv', 'to_datetime', 'read_csv', 'to_datetime', 'info', 'head', 'info', 'head', 'nunique', 'nunique', 'all', 'isin', 'value_counts', 'value_counts', 'describe', 'hist', 'reset_index', 'mean', 'groupby', 'head', 'head', 'head', 'abs', 'abs', 'abs', 'mean', 'read_csv', 'mean', 'to_csv', 'head'] ['numpy', 'pandas', 'lightgbm'] ['Path', 'tqdm', 'trange', 'KFold']Dict:{'pathlib': [], 'numpy': ['mean', 'abs', 'all', 'isin', 'info'], 'pandas': ['to_datetime', 'read_csv', 'value_counts'], 'tqdm': [], 'sklearn': [], 'lightgbm': []} axis_0: 1, axis_1: 0
titanic-survival-seaborn-and-ensembles.py : ['sort_values', 'read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'isnull', 'isnull', 'map', 'max', 'map', 'boxplot', 'boxplot', 'apply', 'replace', 'head', 'mean', 'groupby', 'mean', 'groupby', 'apply', 'crosstab', 'sum', 'fillna', 'mode', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'drop', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mean', 'fillna', 'mean', 'map', 'fillna', 'mode', 'astype', 'copy', 'copy', 'info', 'info', 'get_dummies', 'get_dummies', 'drop', 'drop', 'dropna', 'drop', 'drop', 'drop', 'drop', 'head', 'fillna', 'mean', 'head', 'drop', 'transform', 'drop', 'fillna', 'mean', 'transform', 'head', 'head', 'head', 'drop', 'mean', 'mean', 'mean', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'astype', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'corr', 'corr', 'sum'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.graph_objs', 'warnings', 'warnings', 'lightgbm'] ['tools', 'init_notebook_mode', 'iplot', 'ignore_warnings', 'check_output', 'StandardScaler', 'KNeighborsClassifier', 'RandomForestClassifier', 'SVC', 'tree', 'accuracy_score', 'cross_val_score', 'RandomizedSearchCV', 'GridSearchCV', 'uniform', 'DecisionTreeClassifier', 'RandomForestClassifier', 'ExtraTreesClassifier', 'GradientBoostingClassifier', 'XGBClassifier', 'AdaBoostClassifier', 'CatBoostClassifier', 'VotingClassifier', 'LogisticRegression', 'GaussianNB', 'StackingClassifier']Dict:{'numpy': ['mean', 'max', 'sum', 'info', 'copy'], 'pandas': ['crosstab', 'get_dummies', 'read_csv', 'isnull'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'warnings': [], 'sklearn': [], 'subprocess': [], 'scipy': ['mean'], 'xgboost': ['apply'], 'catboost': [], 'lightgbm': [], 'mlxtend': []} axis_0: 0, axis_1: 13
tuned-debertav3-lgbm.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'join', 'get', 'count', 'update', 'apply', 'apply', 'apply', 'apply', 'apply', 'merge', 'drop', 'head', 'head', 'mean', 'mean', 'update', 'map', 'map', 'join', 'map', 'eval', 'join', 'mean', 'head', 'drop', 'drop', 'drop', 'drop', 'mean', 'to_csv'] ['numpy', 'pandas', 'warnings', 'logging', 'os', 'shutil', 'json', 'transformers', 'torch', 'nltk', 'spacy', 're', 'lightgbm', 'random', 'os', 'numpy', 'torch'] ['List', 'AutoModel', 'AutoTokenizer', 'AutoConfig', 'AutoModelForSequenceClassification', 'DataCollatorWithPadding', 'Dataset', 'load_dataset', 'load_from_disk', 'TrainingArguments', 'Trainer', 'load_metric', 'disable_progress_bar', 'mean_squared_error', 'KFold', 'GroupKFold', 'tqdm', 'stopwords', 'word_tokenize', 'TreebankWordDetokenizer', 'Counter', 'Speller', 'SpellChecker']Dict:{'typing': ['count'], 'numpy': ['mean'], 'pandas': ['eval', 'merge', 'read_csv'], 'warnings': [], 'logging': [], 'os': [], 'shutil': [], 'json': [], 'transformers': [], 'datasets': [], 'sklearn': [], 'torch': ['mean'], 'tqdm': ['update'], 'nltk': [], 'collections': ['update', 'get'], 'spacy': [], 're': [], 'autocorrect': [], 'spellchecker': [], 'lightgbm': []} axis_0: 1, axis_1: 6
writing-quality-lofo-feature-importance.py : ['read_csv', 'shift', 'groupby', 'apply', 'get_dummies', 'concat', 'reset_index', 'agg', 'groupby', 'merge', 'read_csv', 'head'] ['numpy', 'pandas', 'lofo'] []Dict:{'numpy': [], 'pandas': ['concat', 'get_dummies', 'merge', 'read_csv'], 'lofo': []} axis_0: 0, axis_1: 1
tps-apr-highlighting-the-data.py : ['array', 'read_csv', 'read_csv', 'read_csv', 'head', 'describe', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'value_counts', 'value_counts', 'apply', 'fillna', 'unstack', 'sort_index', 'value_counts', 'groupby', 'sort_index', 'value_counts', 'mean', 'sort_index', 'mean', 'groupby', 'sort_index', 'mean', 'groupby', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'mean', 'groupby', 'update', 'unique', 'update', 'unique', 'unstack', 'aggregate', 'groupby', 'unstack', 'aggregate', 'groupby', 'corr', 'bool', 'corr', 'replace', 'replace', 'replace', 'apply', 'apply', 'value_counts', 'value_counts', 'sort_values', 'sum', 'isna', 'pivot_table', 'mean', 'std', 'pivot_table', 'mean', 'std'] ['numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'seaborn'] ['cycler', 'datetime', 'make_axes_locatable']Dict:{'numpy': ['mean', 'sum', 'array', 'unique', 'std'], 'pandas': ['isna', 'read_csv', 'pivot_table', 'value_counts', 'unique', 'array'], 'matplotlib': [], 'seaborn': [], 'cycler': [], 'datetime': ['replace'], 'mpl_toolkits': []} axis_0: 0, axis_1: 0
an-interactive-data-science-tutorial.py : ['hist', 'skew', 'get', 'get', 'map', 'max', 'get', 'get', 'map', 'corr', 'value_counts', 'sort_values', 'sort_values', 'read_csv', 'read_csv', 'head', 'describe', 'where', 'get_dummies', 'head', 'get_dummies', 'head', 'fillna', 'mean', 'fillna', 'mean', 'head', 'map', 'map', 'get_dummies', 'head', 'fillna', 'map', 'get_dummies', 'head', 'replace', 'replace', 'map', 'get_dummies', 'head', 'map', 'map', 'map', 'head', 'concat', 'head', 'head', 'to_csv'] ['warnings', 'numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'matplotlib.pylab', 'seaborn'] ['DecisionTreeClassifier', 'LogisticRegression', 'KNeighborsClassifier', 'GaussianNB', 'SVC', 'LinearSVC', 'RandomForestClassifier', 'GradientBoostingClassifier', 'Imputer', 'Normalizer', 'scale', 'train_test_split', 'StratifiedKFold', 'RFECV']Dict:{'warnings': [], 'numpy': ['mean', 'where', 'max'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'value_counts'], 'sklearn': [], 'matplotlib': ['mean', 'max', 'get', 'where', 'hist'], 'seaborn': []} axis_0: 0, axis_1: 1
time-series-eda-malware-0-64.py : ['read_csv', 'keys', 'read_csv', 'keys', 'map', 'map', 'value_counts', 'to_dict', 'mean', 'isna', 'mean', 'sort_values', 'astype', 'sort_values', 'sort_values', 'sum', 'isna', 'mean', 'isna', 'mean', 'sum', 'isna', 'value_counts', 'to_dict', 'isna', 'mean', 'map', 'map', 'unique', 'mean', 'isna', 'mean', 'map', 'value_counts', 'mean', 'isna', 'mean', 'fillna', 'map', 'fillna', 'map', 'value_counts', 'map', 'max', 'value_counts', 'map', 'isin', 'mean', 'value_counts', 'map', 'isin', 'mean', 'unique', 'isna', 'fillna', 'map', 'astype', 'value_counts', 'astype', 'std', 'mean', 'fillna', 'astype', 'fillna', 'mean', 'to_csv', 'std', 'map', 'sort_values', 'abs', 'corr'] ['pandas', 'numpy', 'os', 'matplotlib.pyplot', 'calendar', 'math', 'statsmodels.api', 'matplotlib.pyplot'] ['datetime', 'metrics']Dict:{'pandas': ['isna', 'unique', 'read_csv', 'value_counts'], 'matplotlib': [], 'datetime': ['max'], 'calendar,': [], 'math': [], 'statsmodels': [], 'sklearn': [], '=': [], 'logr': [], '*': [], 'pd': [], 'x:': [], '0': [], 'if': [], 'x>=0': [], 'else': [], '1)': []} axis_0: 0, axis_1: 0
lgbm-x2-nn-fusion.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'head', 'value_counts', 'unique', 'quantile', 'quantile', 'kurt', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'any', 'isna', 'drop', 'drop', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'merge', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'read_csv', 'read_csv', 'read_csv', 'copy', 'value_counts', 'unique', 'merge', 'transform', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'merge', 'merge', 'quantile', 'quantile', 'kurt', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', '__len__', '__len__', 'any', 'isna', 'mode', 'fillna', 'any', 'isna', 'mode', 'fillna', 'any', 'isna', 'any', 'isna', 'mean', 'sort_values', 'mean', 'head', 'mean', 'read_csv', 'sort_values', 'reset_index', 'groupby', 'read_csv', 'read_csv', 'sort_values', 'reset_index', 'groupby', 'to_csv', 'value_counts', 'unique', 'rename', 'reset_index', 'quantile', 'quantile', 'apply', 'explode', 'apply', 'agg', 'groupby', 'join', 'count', 'groupby', 'fillna', 'reset_index', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'count', 'groupby', 'fillna', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'read_csv', 'copy', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'keys', 'nunique', 'drop', 'drop', 'keys', 'drop', 'merge', 'replace', 'mean', 'copy', 'copy', 'copy', 'transform', 'copy', 'transform', 'copy', 'drop', 'replace', 'items', 'copy', 'transform', 'transform', 'mean', 'items', 'unique', 'agg', 'sum', 'join', 'join', 'join', 'join', 'filter', 'agg', 'concat', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'apply', 'median', 'apply', 'drop', 'join', 'agg', 'sum', 'mean', 'std', 'median', 'min', 'max', 'quantile', 'join', 'agg', 'join', 'shift', 'filter', 'agg', 'max', 'median', 'mean', 'std', 'sum', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'join', 'shift', 'filter', 'count', 'agg', 'mean', 'std', 'count', 'median', 'max', 'first', 'last', 'join', 'filter', 'count', 'agg', 'mean', 'std', 'median', 'max', 'first', 'last', 'join', 'apply', 'explode', 'apply', 'agg', 'groupby', 'join', 'reset_index', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'rename', 'reset_index', 'agg', 'groupby', 'isin', 'merge', 'reset_index', 'agg', 'groupby', 'isin', 'reset_index', 'agg', 'groupby', 'merge', 'astype', 'mean', 'read_csv', 'merge', 'merge', 'merge', 'merge', 'merge', 'keys', 'nunique', 'drop', 'read_csv', 'merge', 'drop', 'merge', 'merge', 'merge', 'merge', 'merge', 'drop', 'drop', 'copy', 'copy', 'copy', 'head', 'rename', 'rename', 'rename', 'merge', 'merge', 'to_csv'] ['gc', 'os', 'itertools', 'pickle', 're', 'time', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'torch', 'joblib', 'warnings', 'gc', 'ctypes', 'numpy', 'pandas', 'gc', 'os', 'itertools', 'pickle', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'warnings', 'os', 'gc', 're', 'random', 'pprint', 'time', 'copy', 'seaborn', 'lightgbm', 'xgboost', 'catboost', 'optuna', 'pandas', 'numpy', 'polars', 're', 'gc', 'random', 'warnings'] ['choice', 'choices', 'reduce', 'tqdm', 'cycle', 'Counter', 'reduce', 'cycle', 'stats', 'skew', 'kurtosis', 'metrics', 'model_selection', 'preprocessing', 'linear_model', 'ensemble', 'decomposition', 'tree', 'defaultdict', 'TabularAutoML', 'Task', 'train_test_split', 'TfidfVectorizer', 'LinearRegression', 'mean_absolute_error', 'mean_squared_error', 'CountVectorizer', 'MultinomialNB', 'accuracy_score', 'choice', 'choices', 'reduce', 'tqdm', 'cycle', 'Counter', 'reduce', 'cycle', 'stats', 'skew', 'kurtosis', 'metrics', 'model_selection', 'preprocessing', 'linear_model', 'ensemble', 'decomposition', 'tree', 'BertTokenizer', 'Counter', 'defaultdict', 'tqdm', 'LabelEncoder', 'PowerTransformer', 'RobustScaler', 'FunctionTransformer', 'KFold', 'StratifiedKFold', 'GroupKFold', 'train_test_split', 'TfidfVectorizer', 'TruncatedSVD', 'PCA', 'GradientBoostingRegressor', 'HistGradientBoostingRegressor', 'RandomForestRegressor', 'ExtraTreesRegressor', 'AdaBoostRegressor', 'SVR', 'Pipeline', 'KMeans', 'Lasso', 'Ridge', 'ElasticNet', 'KNeighborsRegressor', 'mean_squared_error', 'SimpleImputer', 'defaultdict', 'LabelEncoder', 'Counter', 'defaultdict', 'skew', 'kurtosis', 'LGBMRegressor', 'CatBoostRegressor', 'SVR', 'KFold', 'StratifiedKFold', 'MinMaxScaler', 'SimpleImputer']Dict:{'gc': [], 'os': ['rename', 'replace'], 'itertools': [], 'pickle': [], 're': [], 'time': [], 'random': [], 'functools': [], 'tqdm': ['__len__'], 'numpy': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'seaborn': [], 'matplotlib': [], 'collections': [], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'torch': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'concat', 'mode', 'min', 'unique', 'isin', 'std'], 'lightautoml': [], 'joblib': [], 'warnings': [], 'ctypes': [], 'transformers': [], 'pprint': [], 'copy': ['copy'], 'xgboost': [], 'catboost': [], 'optuna': [], 'polars': ['mean', 'median', 'quantile', 'read_csv', 'any', 'first', 'max', 'head', 'sum', 'last', 'apply', 'concat', 'min', 'count', 'std'], 're#用于正则表达式提取': [], 'gc#垃圾回收模块': [], 'warnings#避免一些可以忽略的报错': []} axis_0: 3, axis_1: 30
moa-lgb-optuna.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'replace', 'filter', 'filter', 'concat', 'concat', 'get_dummies', 'concat', 'get_dummies', 'concat', 'get_dummies', 'drop', 'drop', 'drop', 'drop', 'astype', 'astype', 'astype', 'astype', 'mean', 'mean', 'mean', 'concat', 'concat', 'drop', 'mean', 'drop', 'drop', 'mean', 'read_csv', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'lightgbm', 'optuna', 'optuna', 'matplotlib.pyplot', 'seaborn'] ['KFold', 'StratifiedKFold', 'log_loss']Dict:{'numpy': ['mean'], 'pandas': ['concat', 'get_dummies', 'read_csv'], 'os': ['replace'], 'sklearn': [], 'lightgbm': [], 'optuna': [], 'matplotlib': [], 'seaborn': []} axis_0: 1, axis_1: 12
basic-feature-engineering-for-ml.py : ['read_csv', 'info', 'head', 'describe', 'skew', 'kurt', 'corr', 'corr', 'bool', 'corr', 'nlargest', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'drop', 'sort_values', 'sum', 'isnull', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'sort_values', 'sum', 'isnull', 'corr', 'nsmallest', 'drop', 'info', 'astype', 'astype', 'quantile', 'head', 'concat', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'sort_values', 'apply', 'dropna', 'head', 'transform', 'get_dummies', 'head'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'warnings', 'os'] ['norm', 'skew', 'kurtosis', 'StandardScaler', 'stats', 'is_numeric_dtype', 'boxcox1p', 'LabelEncoder']Dict:{'pandas': [], 'matplotlib': [], 'seaborn': [], 'numpy': ['median', 'info', 'sum', 'quantile'], 'scipy': [], 'sklearn': ['transform'], 'warnings': [], 'os': []} axis_0: 0, axis_1: 3
predict-ncaa-basketball-2017-491782.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'pow', 'items', 'pop', 'iterrows', 'mean', 'array', 'array', 'iterrows', 'to_csv', 'read_csv', 'iterrows', 'to_csv'] ['pandas', 'numpy', 'math', 'csv', 'random'] ['cross_validation', 'linear_model', 'model_selection', 'make_scorer', 'accuracy_score', 'train_test_split', 'GridSearchCV']Dict:{'pandas': ['concat', 'array', 'read_csv'], 'numpy': ['mean', 'array'], 'math': ['pow'], 'csv': [], 'random': [], 'sklearn': []} axis_0: 0, axis_1: 0
tps-mar-2022-simple-eda-and-feature-engineering.py : ['read_csv', 'describe', 'sum', 'isnull', 'unique', 'unique', 'unique', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'drop', 'describe', 'boxplot', 'unique', 'read_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] []Dict:{'pandas': ['to_datetime', 'unique', 'read_csv', 'isnull'], 'numpy': ['sum', 'unique'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot']} axis_0: 0, axis_1: 3
ctr-analysis-of-different-ml-models.py : ['sample', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'head', 'sum', 'sum', 'isnull', 'info', 'sum', 'isnull', 'describe', 'quantile', 'quantile', 'max', 'value_counts', 'unique', 'value_counts', 'unique', 'value_counts', 'unique', 'value_counts', 'unique', 'value_counts', 'unique', 'value_counts', 'unique', 'value_counts', 'unique', 'value_counts', 'unique', 'value_counts', 'unique', 'value_counts', 'corr', 'drop', 'drop', 'rename', 'sample', 'drop', 'value_counts', 'head', 'mean', 'head', 'head', 'transform', 'head', 'head', 'head', 'transform', 'head', 'head', 'head', 'head', 'copy', 'corr', 'drop', 'drop', 'head', 'head', 'map', 'map', 'transform', 'sort_values', 'drop', 'sort_values', 'drop', 'sort_values', 'map', 'map', 'head', 'map', 'head', 'drop', 'head', 'sort_values', 'head', 'sort_values', 'reset_index', 'read_csv', 'head', 'head', 'quantile', 'quantile', 'max', 'drop', 'rename', 'drop', 'drop', 'transform', 'head', 'transform', 'head', 'head', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'warnings', 'math', 'graphviz', 'statsmodels.api', 'random', 'gzip', 'category_encoders'] ['LabelEncoder', 'train_test_split', 'metrics', 'LogisticRegression', 'MinMaxScaler', 'DummyClassifier', 'cross_val_score', 'RandomOverSampler', 'DecisionTreeClassifier', 'Image', 'StringIO', 'export_graphviz', 'RandomForestClassifier', 'variance_inflation_factor', 'RFE', 'GridSearchCV', 'Counter', 'Counter', 'confusion_matrix']Dict:{'pandas': ['isnull', 'unique', 'read_csv', 'value_counts'], 'numpy': ['mean', 'quantile', 'max', 'sum', 'unique', 'info', 'copy'], 'seaborn': [], 'matplotlib': [], 'warnings': [], 'math': [], 'sklearn': [], 'imblearn': [], 'IPython': [], 'six': [], 'graphviz': [], 'statsmodels': [], 'random': ['sample'], 'gzip': [], 'category_encoders': [], 'collections': ['copy']} axis_0: 0, axis_1: 9
hyperparameters-tuning-techniques.py : ['read_csv', 'read_csv', 'concat', 'iterrows', 'fillna', 'median', 'fillna', 'notnull', 'isnull', 'drop', 'astype', 'astype', 'isnull', 'isnull', 'concat', 'get_dummies', 'drop', 'concat', 'get_dummies', 'drop', 'drop', 'drop', 'fillna', 'fillna', 'head', 'drop', 'copy', 'astype', 'read_csv', 'to_csv', 'astype', 'read_csv', 'to_csv', 'astype', 'read_csv', 'to_csv', 'astype', 'read_csv', 'to_csv', 'astype', 'read_csv', 'to_csv', 'astype', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'optuna'] ['XGBClassifier', 'accuracy_score', 'f1_score', 'train_test_split', 'GridSearchCV', 'RepeatedStratifiedKFold', 'TPESampler', 'STATUS_OK', 'fmin', 'hp', 'tpe', 'tune', 'BayesSearchCV']Dict:{'numpy': ['median', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'notnull'], 'xgboost': [], 'sklearn': [], 'optuna': [], 'hyperopt': [], 'ray': [], 'skopt': []} axis_0: 0, axis_1: 8
tps-mar-2022-feature-engineering-and-catboost.py : ['read_csv', 'read_csv', 'concat', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'transform', 'groupby', 'shift', 'drop', 'reset_index', 'astype', 'min', 'groupby', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'max', 'groupby', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'median', 'groupby', 'rename', 'merge', 'merge', 'transform', 'transform', 'head', 'drop', 'head', 'to_datetime', 'to_datetime', 'drop', 'drop', 'drop', 'drop', 'read_csv', 'astype', 'round', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'seaborn'] ['LabelEncoder', 'Pool', 'CatBoostRegressor', 'Pool', 'mean_absolute_error']Dict:{'pandas': ['concat', 'merge', 'to_datetime', 'read_csv'], 'sklearn': [], 'catboost': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 6
quick-eda-with-common-feature-engineering.py : ['join', 'read_csv', 'to_numeric', 'head', 'sort_index', 'value_counts', 'read_csv', 'to_numeric', 'head', 'sort_index', 'value_counts', 'read_csv', 'head', 'hist', 'hist', 'hist', 'sum', 'set_index', 'read_csv', 'head', 'read_csv', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'read_csv', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'read_csv', 'head', 'hist', 'describe', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'unstack', 'read_csv', 'head', 'hist', 'describe', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'unstack', 'read_csv', 'head', 'hist', 'describe', 'agg', 'groupby', 'join', 'read_csv', 'head', 'hist', 'describe', 'agg', 'groupby', 'join', 'read_csv', 'head', 'agg', 'groupby', 'join', 'unstack', 'unstack', 'unstack', 'read_csv', 'head', 'agg', 'groupby', 'join', 'unstack', 'unstack', 'unstack', 'read_csv', 'head', 'agg', 'groupby', 'join', 'read_csv', 'head', 'agg', 'groupby', 'join', 'head', 'hist', 'agg', 'groupby', 'join', 'head', 'hist', 'agg', 'groupby', 'join', 'copy', 'merge', 'copy', 'merge', 'any', 'any', 'isnull', 'read_csv', 'apply', 'apply', 'merge', 'isin', 'isin', 'isin', 'isin', 'isna', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isna', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isna', 'isin', 'isin', 'isin', 'isin', 'isna', 'copy', 'where', 'where', 'where', 'where', 'where', 'where', 'map', 'map', 'copy', 'where', 'where', 'where', 'where', 'where', 'where', 'map', 'map', 'concat', 'astype', 'astype', 'astype', 'read_csv', 'read_csv', 'head', 'unstack', 'agg', 'groupby', 'isin', 'head', 'unstack', 'agg', 'groupby', 'isin'] ['numpy', 'pandas', 'tubesml', 'seaborn', 'matplotlib.pyplot', 'mm_data_manipulation', 'os'] []Dict:{'numpy': ['any', 'sum', 'where', 'isin', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'to_numeric', 'merge'], 'tubesml': [], 'seaborn': [], 'matplotlib': ['hist'], 'mm_data_manipulation': [], 'os': []} axis_0: 0, axis_1: 0
xgboost-vs-logisticregression-optuna-features.py : ['join', 'read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'describe', 'corr', 'corrwith', 'describe', 'corr', 'hist', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'sum', 'transform', 'min', 'max', 'std', 'median', 'mean', 'skew', 'copy', 'drop', 'read_csv', 'to_csv'] ['os', 'pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'optuna', 'warnings'] ['SimpleImputer', 'StandardScaler', 'normalize', 'accuracy_score', 'roc_auc_score', 'train_test_split', 'RandomizedSearchCV', 'KFold', 'LogisticRegression', 'XGBClassifier']Dict:{'os': [], 'pandas': ['read_csv', 'isnull'], 'numpy': ['mean', 'median', 'max', 'sum', 'min', 'info', 'std', 'copy'], 'seaborn': [], 'matplotlib': ['hist'], 'sklearn': [], 'xgboost': [], 'optuna': [], 'warnings': []} axis_0: 0, axis_1: 3
sweet-home-exploratory-data-analysis.py : ['read_csv', 'read_csv', 'astype', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sort_values', 'array', 'corr', 'corr', 'head', 'drop', 'astype', 'transform', 'astype', 'astype', 'sort_values', 'sort_values', 'transpose', 'head', 'transpose', 'head', 'head', 'head', 'head', 'head', 'transpose', 'describe', 'transpose', 'describe', 'dropna', 'min'] ['numpy', 'pandas', 'warnings', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.plotly', 'plotly.offline', 'plotly.graph_objs', 'cufflinks', 'warnings'] ['boxcox', 'download_plotlyjs', 'init_notebook_mode', 'plot', 'iplot', 'Scatter', 'Figure', 'Layout', 'spearmanr', 'LabelEncoder', 'train_test_split', 'LGBMClassifier', 'XGBClassifier', 'mean_squared_error', 'tqdm', 'KMeans', 'silhouette_samples', 'silhouette_score', 'cdist', 'silhouette_score']Dict:{'numpy': ['transpose', 'array', 'sum', 'min'], 'pandas': ['array', 'read_csv', 'isnull'], 'warnings': [], 'scipy': [], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'cufflinks': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'tqdm': []} axis_0: 0, axis_1: 2
categorical-feature-encoding-with-tensorflow.py : ['join', 'read_csv', 'read_csv', 'drop', 'drop', 'unique', 'unique', 'apply', 'apply', 'apply', 'apply', 'mode', 'unique', 'fillna', 'unique', 'fillna', 'replace', 'replace', 'replace', 'replace', 'unique', 'fillna', 'astype', 'unique', 'fillna', 'astype', 'array', 'transform', 'fillna', 'astype', 'transform', 'fillna', 'astype', 'reset_index', 'value_counts', 'merge', 'fillna', 'merge', 'transform', 'transform', 'fillna', 'median', 'transform', 'fillna', 'median', 'pow', 'update', 'update', 'update', 'update', 'astype', 'keys', 'astype', 'astype', 'to_csv', 'read_csv', 'to_csv', 'mean', 'std', 'mean', 'std', 'median', 'read_csv', 'to_csv', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'pprint', 'joblib', 'matplotlib.pyplot', 'seaborn', 'tensorflow', 'category_encoders'] ['time', 'StratifiedKFold', 'roc_auc_score', 'average_precision_score', 'make_scorer', 'LabelEncoder', 'OneHotEncoder', 'RobustScaler', 'StandardScaler', 'backend', 'Sequential', 'Dense', 'Adam', 'Nadam', 'Input', 'Embedding', 'Reshape', 'GlobalAveragePooling1D', 'Flatten', 'concatenate', 'Concatenate', 'Lambda', 'Dropout', 'SpatialDropout1D', 'Reshape', 'MaxPooling1D', 'BatchNormalization', 'AveragePooling1D', 'Conv1D', 'Activation', 'LeakyReLU', 'SGD', 'Adam', 'Nadam', 'Model', 'load_model', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau', 'l2', 'l1_l2', 'binary_crossentropy', 'get_custom_objects', 'Activation', 'LeakyReLU', 'load_model']Dict:{'numpy': ['mean', 'median', 'array', 'unique', 'std'], 'pandas': ['read_csv', 'value_counts', 'unique', 'array', 'merge'], 'os': ['replace'], 'time': [], 'pprint': [], 'joblib': [], 'sklearn': ['transform'], 'matplotlib': [], 'seaborn': [], 'tensorflow': ['unique', 'pow'], 'keras': [], 'category_encoders': []} axis_0: 0, axis_1: 2
very-simple-nn-model-market-data-only.py : ['corr', 'corr', 'dropna', 'corr', 'copy', 'copy', 'copy', 'copy', 'add', 'add', 'add', 'sum', 'groupby', 'mean', 'std', 'copy', 'fillna', 'mean'] ['numpy', 'pandas', 'matplotlib.pyplot', 'os', 'seaborn'] ['datetime', 'timedelta', 'twosigmanews', 'StandardScaler', 'Sequential', 'Dense', 'Dropout', 'BatchNormalization', 'Input', 'Adam', 'ModelCheckpoint', 'EarlyStopping']Dict:{'numpy': ['mean', 'add', 'sum', 'std', 'copy'], 'pandas': [], 'matplotlib': [], 'os': [], 'datetime': [], 'seaborn': [], 'kaggle': [], 'sklearn': [], 'keras': []} axis_0: 0, axis_1: 0
xtra-credit-xgb-lgb-tfidf-feature-stacking.py : ['read_csv', 'drop', 'read_csv', 'read_csv', 'read_csv', 'fillna', 'fillna', 'head', 'concat', 'astype', 'transform', 'astype', 'transform', 'astype', 'to_datetime', 'to_datetime', 'astype', 'apply', 'astype', 'apply', 'drop', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'sum', 'groupby', 'fillna', 'merge', 'fillna', 'merge', 'mean', 'groupby', 'rename', 'fillna', 'merge', 'fillna', 'merge', 'count', 'groupby', 'rename', 'fillna', 'merge', 'fillna', 'merge', 'sum', 'groupby', 'rename', 'fillna', 'merge', 'fillna', 'merge', 'drop', 'drop', 'apply', 'join', 'apply', 'join', 'drop', 'drop', 'head', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'apply', 'apply', 'apply', 'join', 'apply', 'join', 'transform', 'transform', 'drop', 'drop', 'mean', 'concat', 'to_csv', 'array', 'array', 'mean', 'std', 'head', 'concat', 'to_csv', 'read_csv', 'drop', 'read_csv', 'read_csv', 'read_csv', 'fillna', 'fillna', 'apply', 'join', 'apply', 'join', 'drop', 'drop', 'sub', 'transform', 'drop', 'drop', 'sum', 'sum', 'multiply', 'multiply', 'concat', 'to_csv', 'merge', 'merge', 'head', 'apply', 'clip', 'apply', 'clip', 'apply', 'clip', 'apply', 'to_csv'] ['numpy', 'pandas', 'random', 'xgboost', 'lightgbm', 'nltk', 'string', 're', 'gc'] ['*', 'TfidfVectorizer', 'CountVectorizer', 'LabelEncoder', 'tqdm', 'hstack', 'vstack', 'csr_matrix', 'LogisticRegression', 'StandardScaler', 'roc_auc_score', 'train_test_split', 'KFold', 'RepeatedKFold', 'cross_val_score', 'word_tokenize', 'stopwords', 'punkt', 'expit', 'logit']Dict:{'numpy': ['mean', 'sum', 'array', 'clip', 'std', 'multiply'], 'pandas': ['read_csv', 'concat', 'array', 'merge', 'to_datetime'], 'random': [], 'sklearn': [], 'tqdm': [], 'scipy': [], 'xgboost': [], 'lightgbm': [], 'nltk': [], 'string': [], 're': ['sub'], 'gc': []} axis_0: 1, axis_1: 25
xgb-new-data-updated-and-comments-lb-1-4244.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'reset_index', 'isin', 'read_csv', 'reset_index', 'sort_values', 'concat', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'isin', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'reset_index', 'sort_values', 'concat', 'shift', 'groupby', 'hist', 'clip', 'transform', 'groupby', 'hist', 'clip', 'agg', 'groupby', 'map', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'head', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'head', 'mean', 'median', 'median', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'head', 'to_dict', 'set_index', 'copy', 'map', 'read_csv', 'isin', 'reset_index', 'sort_values', 'concat', 'read_csv', 'astype', 'head', 'read_csv', 'astype', 'head', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'map', 'map', 'to_csv'] ['gc', 'numpy', 'pandas', 'xgboost', 'matplotlib.pyplot'] ['tqdm']Dict:{'gc': [], 'numpy': ['mean', 'median', 'abs', 'sum', 'unique', 'clip', 'isin', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'to_datetime'], 'xgboost': [], 'matplotlib': ['hist'], 'tqdm': []} axis_0: 3, axis_1: 0
handle-misising-values-with-new-wise-imputer.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'value_counts', 'nunique', 'sum', 'isnull', 'any', 'isnull', 'factorize', 'replace', 'copy', 'transform', 'copy', 'transform', 'concat', 'astype', 'corr', 'reset_index', 'rename_axis', 'copy', 'factorize', 'replace', 'copy', 'isnull', 'transform', 'drop', 'factorize', 'replace', 'copy', 'copy', 'isnull', 'transform', 'concat', 'reset_index', 'drop', 'reset_index', 'drop', 'copy', 'drop', 'drop', 'replace', 'head', 'mean', 'std', 'tail', 'factorize', 'replace', 'drop', 'reset_index', 'drop', 'transform', 'head', 'mean', 'std'] ['pandas', 'numpy'] ['LabelEncoder', 'ExtraTreesClassifier', 'GradientBoostingRegressor', 'LGBMClassifier', 'train_test_split', 'RepeatedStratifiedKFold', 'cross_val_score', 'SimpleImputer', 'enable_iterative_imputer', 'IterativeImputer']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'factorize'], 'numpy': ['mean', 'any', 'sum', 'std', 'copy'], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 8
amex-keras-quickstart-1-training.py : ['array', 'array', 'array', 'apply', 'sum', 'cumsum', 'sum', 'sum', 'apply', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'sort_values', 'sort_values', 'sum', 'sum', 'mean', 'to_csv', 'hist'] ['pandas', 'numpy', 'pickle', 'random', 'datetime', 'math', 'gc', 'tensorflow'] ['pyplot', 'MaxNLocator', 'Fore', 'Back', 'Style', 'StratifiedKFold', 'StratifiedGroupKFold', 'StandardScaler', 'QuantileTransformer', 'OneHotEncoder', 'roc_curve', 'roc_auc_score', 'Model', 'ReduceLROnPlateau', 'LearningRateScheduler', 'EarlyStopping', 'Dense', 'Input', 'InputLayer', 'Add', 'Concatenate', 'Dropout', 'BatchNormalization', 'plot_model']Dict:{'pandas': ['array'], 'numpy': ['mean', 'array', 'sum', 'cumsum'], 'pickle': [], 'matplotlib': [], 'random': [], 'datetime': [], 'math': [], 'colorama': [], 'gc': [], 'sklearn': [], 'tensorflow': []} axis_0: 1, axis_1: 1
lightautoml-with-fe-tps-mar-22.py : ['read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'to_datetime', 'map', 'map', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'to_csv', 'read_csv', 'rename', 'head', 'merge', 'head', 'astype', 'round', 'fillna', 'rename', 'drop', 'head', 'to_csv', 'describe'] ['os', 'time', 'numpy', 'pandas', 'torch'] ['display', 'HTML', 'Javascript', 'log_loss', 'accuracy_score', 'train_test_split', 'TabularAutoML', 'Task', 'ReportDeco']Dict:{'IPython': [], 'os': ['rename'], 'time': [], 'numpy': ['round'], 'pandas': ['merge', 'to_datetime', 'read_csv'], 'sklearn': [], 'torch': ['round'], 'lightautoml': []} axis_0: 0, axis_1: 0
feature-selection-for-mlr-with-python.py : ['sum', 'isnull', 'drop', 'sort_values', 'sum', 'isnull', 'select_dtypes', 'value_counts', 'fillna', 'select_dtypes', 'sort_values', 'sum', 'isnull', 'fillna', 'to_dict', 'mode', 'drop', 'select_dtypes', 'abs', 'corr', 'drop', 'unique', 'drop', 'select_dtypes', 'astype', 'concat', 'get_dummies', 'select_dtypes', 'select_dtypes', 'drop', 'sample', 'mean', 'mean', 'read_csv', 'read_csv', 'corr', 'select_dtypes', 'info', 'drop', 'sum', 'isnull', 'corr', 'sort_values', 'abs', 'corr', 'drop', 'drop', 'dropna', 'min', 'max', 'min', 'sort_values', 'var', 'drop'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'pandas', 'numpy', 'seaborn', 'io', 'urllib.request', 'matplotlib.pyplot'] ['KFold', 'mean_squared_error', 'linear_model', 'LinearRegression', 'mean_squared_error']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique'], 'numpy': ['mean', 'max', 'var', 'abs', 'sum', 'min', 'unique', 'info'], 'seaborn': [], 'sklearn': [], 'matplotlib': [], 'io': [], 'urllib': []} axis_0: 1, axis_1: 6
feature-engineering-and-initial-gbt-model.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'boxplot', 'min', 'max', 'boxplot', 'median', 'map', 'map', 'map', 'array', 'unique', 'unique', 'astype', 'astype', 'astype', 'sort_values', 'head', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'clip', 'fillna', 'astype', 'astype', 'astype', 'concat', 'fillna', 'merge', 'merge', 'merge', 'astype', 'astype', 'astype', 'astype', 'copy', 'merge', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'head', 'to_pickle', 'any', 'isnull', 'fillna', 'info', 'to_pickle', 'read_pickle', 'drop', 'drop', 'drop', 'clip', 'clip', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'time', 'sys', 'gc', 'pickle', 'os'] ['product', 'LabelEncoder', 'XGBRegressor', 'plot_importance']Dict:{'numpy': ['median', 'any', 'max', 'min', 'unique', 'clip', 'info', 'array', 'copy'], 'pandas': ['to_pickle', 'read_csv', 'isnull', 'concat', 'read_pickle', 'unique', 'array', 'merge'], 'itertools': [], 'sklearn': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'xgboost': [], 'time': [], 'sys': [], 'gc': [], 'pickle': [], 'os': []} axis_0: 0, axis_1: 14
machine-failures-xgb-lgbm-ensemble.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'info', 'info', 'transform', 'head', 'to_numeric', 'to_numeric', 'corr', 'unique', 'boxplot', 'sort_values', 'sort_values', 'copy', 'drop', 'head', 'to_csv'] ['numpy', 'pandas', 'warnings', 'os', 'matplotlib.pyplot', 'seaborn', 'random'] ['LabelEncoder', 'CatBoostClassifier', 'Pool', 'XGBClassifier', 'LGBMClassifier', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'accuracy_score', 'roc_auc_score', 'RandomForestClassifier', 'GradientBoostingClassifier', 'VotingClassifier', 'HistGradientBoostingClassifier']Dict:{'numpy': ['info', 'unique', 'copy'], 'pandas': ['to_numeric', 'unique', 'read_csv'], 'warnings': [], 'os': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'catboost': [], 'xgboost': [], 'lightgbm': [], 'random': []} axis_0: 2, axis_1: 3
ii-titanic-exploratory-data-analysis-0-80.py : ['read_csv', 'head', 'read_csv', 'head', 'copy', 'sum', 'isnull', 'iterrows', 'any', 'isnull', 'sum', 'isnull', 'iterrows', 'any', 'isnull', 'isnull', 'isnull', 'describe', 'describe', 'apply', 'crosstab', 'crosstab', 'set_index', 'value_counts', 'value_counts', 'rename', 'rename', 'apply', 'crosstab', 'crosstab', 'set_index', 'sort_values', 'sum', 'sum', 'sum', 'copy', 'median', 'fillna', 'sum', 'isnull', 'median', 'fillna', 'sum', 'isnull', 'copy', 'nunique', 'value_counts', 'value_counts', 'value_counts', 'sort_values', 'sort_values', 'value_counts', 'reset_index', 'groupby', 'reset_index', 'mean', 'groupby', 'describe', 'copy', 'copy', 'apply', 'notnull', 'apply', 'notnull', 'value_counts', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'value_counts', 'mean', 'groupby', 'value_counts', 'replace', 'replace', 'replace', 'replace', 'value_counts', 'mean', 'groupby', 'value_counts', 'apply', 'apply', 'value_counts', 'mean', 'groupby', 'mode', 'fillna', 'cut', 'cut', 'get_dummies', 'get_dummies', 'value_counts', 'mean', 'groupby', 'value_counts', 'mean', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'apply', 'apply', 'value_counts', 'copy', 'copy', 'sort_values', 'keys', 'median', 'fillna', 'transform', 'array', 'median', 'fillna', 'transform', 'array', 'array', 'map', 'median', 'fillna', 'sum', 'isnull', 'transform', 'transform', 'transform', 'transform', 'cut', 'cut', 'cut', 'cut', 'cut', 'cut', 'cut', 'cut', 'cut', 'cut', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'merge', 'drop', 'concat', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'merge', 'drop', 'concat', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'merge', 'drop', 'concat', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'astype', 'astype', 'astype', 'astype', 'astype', 'transform', 'transform', 'transform', 'merge', 'merge', 'merge', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'astype', 'astype', 'astype', 'head', 'mean', 'items', 'mean', 'mean', 'keys', 'items', 'mean', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'astype', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv'] ['patsy', 'folium', 'pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'warnings'] ['call', 'plugins', 'HeatMap', 'Image', 'pyplot', 'isnan', 'dmatrices', 'dmatrix', 'SelectKBest', 'f_classif', 'mutual_info_classif', 'chi2', 'KNNImputer', 'IterativeImputer', 'LogisticRegression', 'plot_confusion_matrix', 'plot_roc_curve', 'plotVar', 'plotAge', 'plot_feature_importance', 'plot_feature_importance_dec', 'RandomForestClassifier', 'DecisionTreeClassifier', 'export_graphviz', 'OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'MLPClassifier', 'train_test_split', 'cross_val_score', 'accuracy_score', 'confusion_matrix', 'roc_curve', 'InteractiveShell', 'chi2_contingency', 'chi2', 'sqldf', 'ExhaustiveFeatureSelector', 'GridSearchCV', 'chi2']Dict:{'subprocess': [], 'patsy': [], 'folium': [], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'get_dummies', 'notnull', 'array', 'merge', 'crosstab'], 'matplotlib': [], 'seaborn': [], 'numpy': [], 'IPython': [], 'sklearn': [], 'visualize_titanic': [], 'scipy': ['mean', 'median'], 'pandasql': [], 'mlxtend': [], 'warnings': [], '=': [], 'np': []} axis_0: 2, axis_1: 49
top-3-efficient-ensembling-in-few-lines-of-code.py : ['read_csv', 'read_csv', 'head', 'sum', 'isnull', 'concat', 'iterrows', 'fillna', 'median', 'fillna', 'notnull', 'isnull', 'drop', 'astype', 'astype', 'isnull', 'isnull', 'concat', 'get_dummies', 'drop', 'concat', 'get_dummies', 'drop', 'drop', 'drop', 'fillna', 'fillna', 'head', 'corr', 'head', 'drop', 'copy', 'add', 'add', 'items', 'add', 'astype', 'read_csv', 'to_csv', 'head'] ['numpy', 'pandas', 'optuna', 'matplotlib.pyplot', 'plotly.express', 'warnings'] ['SuperLearner', 'XGBClassifier', 'LGBMClassifier', 'train_test_split', 'accuracy_score', 'f1_score', 'DecisionTreeClassifier', 'KNeighborsClassifier', 'MLPClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'AdaBoostClassifier', 'RandomForestClassifier', 'BaggingClassifier', 'RidgeClassifier', 'Perceptron', 'PassiveAggressiveClassifier', 'LogisticRegression', 'SGDClassifier', 'TPESampler', 'ConvergenceWarning']Dict:{'numpy': ['median', 'sum', 'add', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'notnull'], 'mlens': [], 'xgboost': [], 'lightgbm': [], 'sklearn': [], 'optuna': [], 'matplotlib': [], 'plotly': [], 'warnings': []} axis_0: 0, axis_1: 8
house-prices-useful-regression-techniques.py : ['read_csv', 'read_csv', 'describe', 'concat', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'info', 'describe', 'corr', 'set_index', 'set_index', 'set_index', 'set_index', 'set_index', 'drop', 'insert', 'drop', 'insert', 'drop', 'insert', 'drop', 'insert', 'drop', 'insert', 'boxplot', 'describe', 'corr', 'sum', 'groupby', 'count', 'groupby', 'unstack', 'boxplot', 'head', 'corr', 'head', 'groupby', 'unstack', 'groupby', 'unstack', 'sort_values', 'apply', 'dropna', 'head', 'skew', 'skew', 'kurt', 'kurt', 'boxplot', 'corr', 'sort_values', 'concat', 'concat', 'concat', 'concat', 'drop', 'drop', 'concat', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'drop', 'head', 'select_dtypes', 'select_dtypes', 'all', 'unique', 'array', 'bool', 'all', 'unique', 'transform', 'astype', 'array', 'cumsum', 'transform', 'mean', 'head', 'sort_values', 'array', 'astype', 'astype', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib', 'matplotlib.pyplot', 'plotly.plotly', 'plotly.figure_factory', 'plotly.graph_objs', 'seaborn', 'matplotlib.pyplot', 'seaborn', 'matplotlib.pyplot', 'xgboost'] ['skew', 'pearsonr', 'stats', 'tools', 'download_plotlyjs', 'init_notebook_mode', 'plot', 'iplot', 'norm', 'BaseEstimator', 'TransformerMixin', 'check_array', 'LabelEncoder', 'sparse', 'BaseEstimator', 'TransformerMixin', 'BaseEstimator', 'TransformerMixin', 'Pipeline', 'StandardScaler', 'FeatureUnion', 'ElasticNet', 'Lasso', 'BayesianRidge', 'LassoLarsIC', 'RandomForestRegressor', 'GradientBoostingRegressor', 'KernelRidge', 'make_pipeline', 'RobustScaler', 'BaseEstimator', 'TransformerMixin', 'RegressorMixin', 'clone', 'KFold', 'cross_val_score', 'train_test_split', 'mean_squared_error', 'Ridge', 'PredictionError', 'ResidualsPlot', 'GridSearchCV', 'ElasticNet', 'SVR', 'DecisionTreeRegressor', 'Lasso', 'Ridge', 'StackingRegressor', 'LinearRegression']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'array'], 'numpy': ['mean', 'median', 'sum', 'array', 'all', 'unique', 'info', 'insert', 'cumsum'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'scipy': [], 'plotly': [], 'sklearn': [], 'xgboost': [], 'yellowbrick': [], 'mlxtend': []} axis_0: 0, axis_1: 15
simple-feature-lightgbm-baseline.py : ['merge', 'to_csv', 'head', 'drop', 'drop', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'drop', 'round', 'astype', 'astype', 'to_csv'] ['numpy', 'pandas', 'pyarrow.parquet', 'random', 'os', 'sys', 'gc', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 're'] ['tqdm', 'CountVectorizer', 'train_test_split', 'KFold', 'metrics']Dict:{'numpy': ['mean', 'round', 'isin'], 'pandas': ['merge', 'concat'], 'pyarrow': [], 'random': [], 'os': [], 'sys': [], 'gc': [], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'lightgbm': [], 'sklearn': [], 're': []} axis_0: 1, axis_1: 3
netflix-appetency-consumer-classification.py : ['read_csv', 'read_csv', 'read_csv', 'describe', 'sum', 'sum', 'isna', 'sum', 'isnull', 'sum', 'isnull', 'sort_values', 'head', 'drop', 'drop', 'select_dtypes', 'select_dtypes', 'fillna', 'median', 'fillna', 'median', 'mode', 'fillna', 'fillna', 'info', 'apply', 'astype', 'any', 'apply', 'to_datetime', 'apply', 'to_datetime', 'select_dtypes', 'drop', 'drop', 'copy', 'copy', 'nunique', 'sort_values', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'apply', 'value_counts', 'value_counts', 'apply', 'crosstab', 'sort_values', 'abs', 'corrwith', 'drop', 'apply', 'apply', 'apply', 'apply', 'nunique', 'corr', 'where', 'abs', 'sort_values', 'drop', 'drop', 'copy', 'copy', 'concat', 'transform', 'transform', 'drop', 'sort_values', 'sort_values', 'sort_values', 'drop', 'drop', 'drop', 'to_csv', 'head'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'datetime', 'warnings'] ['StandardScaler', 'CatBoostClassifier', 'XGBClassifier', 'LGBMClassifier', 'LabelEncoder', 'cross_val_score', 'KFold', 'RepeatedStratifiedKFold', 'StratifiedKFold', 'cross_val_predict', 'train_test_split', 'GridSearchCV', 'roc_auc_score', 'chi2_contingency']Dict:{'numpy': ['median', 'any', 'abs', 'sum', 'where', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'to_datetime', 'crosstab'], 'seaborn': [], 'matplotlib': [], 'datetime': [], 'sklearn': [], 'catboost': [], 'xgboost': ['apply'], 'lightgbm': [], 'warnings': [], 'scipy': [], 'optuna': []} axis_0: 0, axis_1: 11
2021-kaggle-data-science-machine-learning-survey.py : ['join', 'read_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'value_counts', 'count', 'dropna', 'reset_index', 'value_counts', 'sum', 'rename', 'items', 'items', 'update', 'to_csv', 'to_csv', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'sort_index', 'sort_index', 'sort_index', 'sort_index', 'sort_index', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'copy', 'replace', 'replace', 'replace', 'isin', 'isin', 'isin', 'isin', 'isin', 'copy', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'isin', 'isin', 'isin', 'isin', 'isin', 'copy', 'isin', 'isin', 'isin', 'isin', 'copy', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'any', 'notna', 'replace', 'replace', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'copy', 'replace', 'replace', 'copy', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'copy', 'replace', 'replace', 'copy', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'to_numeric', 'median', 'to_numeric', 'to_csv'] ['os', 'numpy', 'pandas', 'seaborn', 'plotly.express', 'plotly.graph_objects', 'warnings', 'plotly_express'] ['init_notebook_mode']Dict:{'os': ['rename', 'replace'], 'numpy': ['median', 'any', 'sum', 'isin', 'copy'], 'pandas': ['notna', 'to_numeric', 'read_csv', 'value_counts'], 'seaborn': [], 'plotly': [], 'warnings': [], 'plotly_express': []} axis_0: 0, axis_1: 0
zillow-prize-eda-feature-engineering.py : ['mode', 'read_csv', 'head', 'value_counts', 'value_counts', 'reset_index', 'value_counts', 'value_counts', 'read_csv', 'head', 'reset_index', 'sum', 'isnull', 'reset_index', 'sum', 'isnull', 'sort_values', 'merge', 'head', 'reset_index', 'reset_index', 'count', 'groupby', 'mean', 'fillna', 'sort_values', 'array', 'nunique', 'corr', 'value_counts', 'boxplot', 'drop', 'std'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'xgboost'] ['ensemble']Dict:{'numpy': ['mean', 'std', 'sum', 'array'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'array', 'merge'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'os': [], 'sklearn': [], '=': [], 'model': [], 'xgboost': []} axis_0: 3, axis_1: 1
student-perf-eda-feature-engineering.py : ['read_csv', 'read_csv', 'copy', 'copy', 'sort_values', 'head', 'sort_values', 'sum', 'isna', 'select_dtypes', 'unique', 'select_dtypes', 'value_counts', 'astype', 'value_counts', 'mean', 'value_counts', 'tail', 'value_counts', 'rename', 'astype', 'astype', 'astype', 'astype', 'head', 'astype', 'reset_index', 'drop_duplicates', 'head', 'reset_index', 'rename_axis', 'value_counts', 'rename', 'merge', 'head', 'pivot_table', 'merge', 'rename', 'mean', 'mean', 'mean', 'sum', 'drop', 'sum', 'drop', 'sum', 'drop', 'sum', 'drop', 'sum', 'drop', 'sum', 'drop', 'groupby', 'tail', 'rename', 'reset_index', 'merge', 'head', 'mean', 'mean', 'groupby', 'tail', 'rename', 'reset_index', 'merge', 'head', 'max', 'quantile', 'mean', 'quantile', 'quantile', 'mean', 'mean', 'head', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost'] []Dict:{'numpy': ['mean', 'quantile', 'max', 'sum', 'unique', 'copy'], 'pandas': ['isna', 'read_csv', 'pivot_table', 'value_counts', 'unique', 'merge'], 'matplotlib': [], 'seaborn': [], 'xgboost': []} axis_0: 0, axis_1: 6
optuna-optimized-keras-base-model.py : ['read_csv', 'to_numpy', 'drop', 'read_csv', 'transform', 'squeeze', 'squeeze', 'round', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'tensorflow', 'gc', 'matplotlib.pyplot'] ['keras', '*', '*', 'LearningRateScheduler', 'ExponentialDecay', 'RobustScaler', 'normalize', 'train_test_split', 'KFold', 'mean_absolute_error', 'load', 'add_features']Dict:{'numpy': ['round', 'squeeze'], 'pandas': ['read_csv'], 'tensorflow': [], 'gc': [], 'matplotlib': [], 'sklearn': [], 'pickle': [], 'VFE': []} axis_0: 0, axis_1: 1
time-series-feature-engineering-lanl-eq-data.py : ['read_csv', 'join', 'head', 'head', 'info', 'reset_index', 'head', 'tail', 'drop', 'rename', 'head', 'info', 'corr', 'bool', 'to_dict', 'dropna', 'unstack', 'drop'] ['os', 'pandas', 'numpy', 'gc', 'matplotlib.pyplot', 'tsfresh', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 'eli5'] ['select_features', 'impute', 'extract_features', 'EfficientFCParameters', 'from_columns', 'PermutationImportance', 'RandomForestRegressor', 'ExtraTreesRegressor']Dict:{'os': ['rename'], 'pandas': ['read_csv'], 'numpy': ['info'], 'gc': [], 'matplotlib': [], 'tsfresh': [], 'seaborn': [], 'warnings': [], 'eli5': [], 'sklearn': []} axis_0: 0, axis_1: 1
housing-price-problem-top-20.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'unique', 'select_dtypes', 'select_dtypes', 'describe', 'isnull', 'copy', 'pop', 'sum', 'isnull', 'reset_index', 'sum', 'isna', 'corr', 'replace', 'corr', 'describe', 'replace', 'mean', 'corr', 'describe', 'replace', 'mean', 'concat', 'nlargest', 'nlargest', 'nlargest', 'select_dtypes', 'head', 'replace', 'mean', 'replace', 'replace', 'mean', 'describe', 'replace', 'mean', 'describe', 'replace', 'median', 'describe', 'replace', 'describe', 'replace', 'mean', 'describe', 'replace', 'median', 'describe', 'replace', 'describe', 'replace', 'describe', 'replace', 'median', 'corr', 'to_csv', 'to_csv', 'nunique', 'get_dummies', 'replace', 'idxmax', 'value_counts', 'replace', 'idxmax', 'value_counts', 'replace', 'idxmax', 'value_counts', 'replace', 'idxmax', 'value_counts', 'replace', 'idxmax', 'value_counts', 'replace', 'idxmax', 'value_counts', 'replace', 'idxmax', 'value_counts', 'replace', 'idxmax', 'value_counts', 'replace', 'idxmax', 'value_counts', 'replace', 'idxmax', 'value_counts', 'replace', 'idxmax', 'value_counts', 'value_counts', 'replace', 'unique', 'copy', 'head', 'read_csv', 'read_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'pandas_profiling', 'os', 'matplotlib.pyplot', 'pandas', 'numpy', 'base64'] ['SelectKBest', 'chi2', 'ExtraTreesClassifier', 'mean_absolute_error', 'train_test_split', 'RandomForestRegressor', 'HTML', 'LabelEncoder', 'OneHotEncoder']Dict:{'numpy': ['mean', 'median', 'sum', 'unique', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique'], 'seaborn': [], 'matplotlib': [], 'pandas_profiling': [], '#': [], 'LIBRARY': [], 'TO': [], 'see': [], 'all': [], 'the': [], 'details': [], 'of': [], 'data': [], 'os': ['replace'], 'sklearn': [], 'IPython': [], 'base64': []} axis_0: 0, axis_1: 1
pycaret-spaceship-fe-catboost.py : ['rename', 'agg', 'groupby', 'fillna', 'astype', 'apply', 'apply', 'isnull', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'apply', 'apply', 'merge', 'read_csv', 'read_csv', 'select_dtypes', 'select_dtypes', 'rename', 'to_csv'] ['pandas'] ['*']Dict:{'pandas': ['merge', 'read_csv', 'isnull'], 'pycaret': []} axis_0: 0, axis_1: 0
50th-place-silver.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'drop', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'shift', 'groupby', 'copy', 'items', 'mean', 'groupby', 'keys', 'map', 'idxmin', 'join', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'shift', 'groupby', 'transform', 'groupby', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'read_csv', 'merge', 'fillna', 'isnull', 'clip', 'clip', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'read_csv', 'read_csv', 'astype', 'astype', 'apply', 'apply', 'to_dict', 'set_index', 'set_index', 'join', 'drop', 'map', 'round', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'copy', 'round', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'os', 'lightgbm', 'xgboost', 'catboost', 'lightgbm', 'xgboost', 'catboost'] ['tqdm', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'round', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'os': [], 'tqdm': []} axis_0: 0, axis_1: 2
simple-ml-pipeline-for-titanic.py : ['read_csv', 'copy', 'sample', 'head', 'boxplot', 'sort_values', 'corr', 'boxplot', 'boxplot', 'drop', 'head', 'drop', 'sum', 'isnull', 'items', 'head', 'fillna', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'missingno'] ['train_test_split', 'make_pipeline', 'ColumnTransformer', 'SimpleImputer', 'StandardScaler', 'OneHotEncoder', 'OrdinalEncoder', 'DecisionTreeClassifier', 'RandomForestClassifier', 'LogisticRegression', 'LinearRegression', 'MinMaxScaler', 'SelectKBest', 'chi2', 'set_config', 'accuracy_score']Dict:{'numpy': ['sum', 'copy'], 'pandas': ['read_csv', 'isnull'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'missingno': []} axis_0: 0, axis_1: 0
prepare-data-form-features-find-their-importance.py : ['read_csv', 'read_csv', 'head', 'head', 'sort_index', 'value_counts', 'astype', 'to_datetime', 'sort_index', 'value_counts', 'astype', 'to_datetime', 'head', 'astype', 'to_datetime', 'astype', 'to_datetime', 'astype', 'to_datetime', 'astype', 'to_datetime', 'astype', 'to_datetime', 'astype', 'to_datetime', 'drop', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'astype', 'isin', 'isin', 'isin', 'rename', 'reset_index', 'count', 'groupby', 'merge', 'drop', 'astype', 'join', 'astype', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'astype', 'astype', 'astype', 'astype', 'astype', 'drop', 'astype', 'drop', 'astype', 'sort_values', 'sum', 'head', 'to_csv', 'sort_values', 'head', 'to_csv'] ['os', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'os'] ['train_test_split']Dict:{'os': ['rename'], 'gc': [], 'numpy': ['isin', 'sum'], 'pandas': ['merge', 'to_datetime', 'read_csv', 'value_counts'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 6
lstm-predict-sales.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'info', 'describe', 'sum', 'isnull', 'sum', 'isna', 'corr', 'corr', 'boxplot', 'boxplot', 'sum', 'groupby', 'head', 'sort_values', 'sum', 'groupby', 'sum', 'groupby', 'duplicated', 'duplicated', 'duplicated', 'apply', 'keys', 'apply', 'keys', 'merge', 'sum', 'isnull', 'round', 'sort_values', 'rename', 'fillna', 'head', 'duplicated', 'drop_duplicates', 'drop_duplicates', 'drop_duplicates', 'describe', 'agg', 'groupby', 'sort_values', 'sample', 'describe', 'astype', 'unique', 'merge', 'reindex', 'fillna', 'to_numpy', 'transform', 'transform', 'map', 'squeeze', 'merge', 'fillna', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'tensorflow', 'random'] ['figure', 'preprocessing']Dict:{'numpy': ['squeeze', 'sum', 'round', 'unique', 'info'], 'pandas': ['isna', 'read_csv', 'isnull', 'unique', 'merge'], 'seaborn': ['boxplot'], 'matplotlib': [], 'tensorflow': ['round', 'squeeze', 'unique'], 'sklearn': [], 'random': ['sample']} axis_0: 0, axis_1: 0
house-prices-data-cleaning-viz-and-modeling.py : ['read_csv', 'read_csv', 'read_csv', 'copy', 'copy', 'head', 'head', 'concat', 'mean', 'isna', 'sort_values', 'drop', 'select_dtypes', 'select_dtypes', 'sum', 'isnull', 'fillna', 'fillna', 'mode', 'sum', 'isnull', 'median', 'median', 'fillna', 'fillna', 'fillna', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'drop', 'describe', 'describe', 'head', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'select_dtypes', 'get_dummies', 'head', 'concat', 'head', 'drop', 'drop', 'drop', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'sklearn.metrics', 'math'] ['preprocessing', 'train_test_split', 'LGBMRegressor', 'XGBRegressor']Dict:{'numpy': ['mean', 'median', 'sum', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'math': []} axis_0: 1, axis_1: 8
exponentially-weighted-ensemble-spaceship-titanic.py : ['join', 'read_csv', 'sort_values', 'astype', 'head', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'head', 'head', 'astype', 'to_csv', 'head'] ['numpy', 'pandas', 'os'] []Dict:{'numpy': [], 'pandas': ['read_csv'], 'os': []} axis_0: 0, axis_1: 0
keras-nn-starter-crps-early-stopping.py : ['read_csv', 'fillna', 'transform', 'fillna', 'map', 'sort_values', 'sort_values', 'unique', 'groupby', 'agg', 'agg', '__init__', 'clip', 'cumsum', 'clip', 'cumsum', 'sum', 'sum', 'clip', 'cumsum', 'clip', 'cumsum', 'sum', 'sum', '__init__', 'transform', 'transform', 'keys', 'keys', 'keys', 'copy', 'copy', 'fillna', 'copy', 'fillna', 'copy', 'astype', 'replace', 'clip', 'cumsum', 'clip', 'cumsum', 'sum', 'sum', 'astype', 'replace', 'fillna', 'clip', 'cumsum', 'clip', 'cumsum', 'clip', 'cumsum', 'clip', 'cumsum', 'clip', 'cumsum', 'clip', 'cumsum', 'clip', 'cumsum', 'update'] ['io', 're', 'numpy', 'pandas', 'tensorflow', 'multiprocessing', 'matplotlib.pyplot'] ['nflrush', 'pprint', 'Sequential', 'EarlyStopping', 'ModelCheckpoint', 'Callback', 'load_model', 'Dense', 'Activation', 'SGD', 'Adam', 'train_test_split', 'GroupKFold', 'KFold', 'LabelEncoder', 'StandardScaler', 'backend', 'tqdm_notebook']Dict:{'kaggle': [], 'io': [], 're': [], 'pprint': ['__init__'], 'numpy': ['sum', 'unique', 'clip', 'cumsum', 'copy'], 'pandas': ['unique', 'read_csv'], 'tensorflow': ['unique', 'cumsum'], 'keras': [], 'sklearn': ['transform', '__init__'], 'multiprocessing': [], 'tqdm': ['__init__'], 'matplotlib': []} axis_0: 3, axis_1: 13
lgb-bayesian-parameters-finding.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'all', 'join', 'join', 'sum', 'to_dict', 'add_prefix', 'update', 'add_prefix', 'keys', 'mean', 'mean', 'mean', 'mean', 'keys', 'mean', 'join', 'add_prefix', 'concat', 'unique', 'unique', 'concat', 'concat', 'concat', 'concat', 'unique', 'groupby', 'reset_index', 'apply', 'join', 'drop', 'astype', 'agg', 'groupby', 'reset_index', 'unique', 'groupby', 'reset_index', 'apply', 'join', 'drop', 'astype', 'agg', 'groupby', 'reset_index', 'unique', 'groupby', 'reset_index', 'apply', 'join', 'drop', 'astype', 'agg', 'groupby', 'reset_index', 'unique', 'groupby', 'reset_index', 'apply', 'join', 'drop', 'astype', 'agg', 'groupby', 'reset_index', 'copy', 'merge', 'merge', 'merge', 'merge', 'copy', 'merge', 'merge', 'merge', 'merge', 'merge', 'add_prefix', 'merge', 'add_prefix', 'concat', 'merge', 'add_prefix', 'merge', 'add_prefix', 'concat', 'concat', 'sum', 'isnull', 'copy', 'reset_index', 'count', 'groupby', 'merge', 'factorize', 'fillna', 'add_prefix', 'add_prefix', 'concat', 'concat', 'drop', 'drop', 'drop', 'all', 'sum', 'isnull', 'sum', 'isnull', 'array', 'array', 'copy', 'copy', 'drop', 'drop', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'drop', 'drop', 'hist', 'copy', 'astype', 'mean', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'astype', 'head', 'to_csv'] ['gc', 'glob', 'os', 'json', 'matplotlib.pyplot', 'pprint', 'numpy', 'pandas', 'joblib', 'scipy', 'lightgbm', 'warnings'] ['Parallel', 'delayed', 'tqdm', 'Image', 'BayesianOptimization', 'TfidfVectorizer', 'SparsePCA', 'TruncatedSVD', 'LatentDirichletAllocation', 'NMF', 'Counter', 'partial', 'sqrt', 'cohen_kappa_score', 'mean_squared_error', 'confusion_matrix', 'StratifiedKFold']Dict:{'gc': [], 'glob': [], 'os': [], 'json': [], 'matplotlib': ['hist'], 'pprint': [], 'numpy': ['mean', 'max', 'sum', 'all', 'unique', 'array', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'factorize', 'unique', 'array', 'merge'], 'joblib': [], 'tqdm': ['update'], 'PIL': ['merge'], 'bayes_opt': [], 'sklearn': [], 'scipy': [], 'collections': ['keys', 'update', 'copy'], 'functools': [], 'math': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 16
fundamental-feature-engineering-techniques.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'mean', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'median', 'sum', 'isnull', 'fillna', 'mode', 'sum', 'isnull', 'boxplot', 'mean', 'std', 'mean', 'std', 'quantile', 'quantile', 'cut', 'head', 'head', 'join', 'head', 'get_dummies', 'join', 'head', 'head', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'warnings', 'warnings'] ['LabelEncoder', 'OneHotEncoder', 'MinMaxScaler', 'StandardScaler']Dict:{'numpy': ['mean', 'median', 'quantile', 'sum', 'std'], 'pandas': ['get_dummies', 'cut', 'read_csv', 'isnull'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'os': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 0
ps3e18-eda-ensemble-ml-pipeline-binarypredictict.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'reset_index', 'set_index', 'concat', 'astype', 'describe', 'transpose', 'rename', 'nunique', 'transpose', 'rename', 'sum', 'isna', 'concat', 'head', 'tail', 'corr', 'astype', 'corr', 'astype', 'corr', 'abs', 'fillna', 'unique', 'drop', 'boxplot', 'drop', 'copy', 'sum', 'transform', 'copy', 'concat', 'copy', 'concat', 'assign', 'keys', 'select_dtypes', 'transform', 'transform', 'astype', 'astype', 'transform', 'add_suffix', 'astype', 'add_suffix', 'astype', 'transform', 'concat', 'concat', 'astype', 'astype', 'transform', 'concat', 'concat', 'drop', 'drop', 'agg', 'groupby', 'median', 'merge', 'fillna', 'transform', 'drop_duplicates', 'concat', 'copy', 'reset_index', 'drop', 'astype', 'reset_index', 'reset_index', 'concat', 'transform', 'transform', 'fillna', 'concat', 'fillna', 'concat', 'drop', 'drop', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'head', 'keys', 'sample', 'apply', 'apply', 'mean', 'mean', 'sort_values', 'head', 'sort_values', 'head', 'map', 'map', 'read_csv', 'join', 'to_csv', 'mean', 'array', 'array', 'melt', 'sort_values', 'items', 'mean', 'std', 'corr', 'astype', 'corr', 'astype', 'corr', 'abs', 'mean', 'std', 'mean', 'std', 'keys', 'min', 'max', 'min', 'keys', 'array', 'keys', 'mean', 'std', 'stack', 'astype', 'ge', 'mean', 'read_csv', 'join', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'random', 'gc', 'time', 'math', 'seaborn', 'shap', 'optuna', 'lightgbm', 'xgboost', 'warnings'] ['deepcopy', 'partial', 'combinations', 'BaseEstimator', 'TransformerMixin', 'train_test_split', 'StratifiedKFold', 'KFold', 'roc_auc_score', 'StandardScaler', 'MinMaxScaler', 'QuantileTransformer', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'OneHotEncoder', 'FunctionTransformer', 'LabelEncoder', 'ColumnTransformer', 'RandomUnderSampler', 'enable_iterative_imputer', 'SimpleImputer', 'KNNImputer', 'IterativeImputer', 'PCA', 'NMF', 'UMAP', 'FastICA', 'Pipeline', 'make_pipeline', 'make_column_transformer', 'make_column_selector', 'EarlyStopping', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'AdaBoostClassifier', 'BalancedRandomForestClassifier', 'NuSVC', 'SVC', 'LogisticRegressionCV', 'LogisticRegression', 'KNeighborsClassifier', 'LogisticRegression', 'MLPClassifier', 'GaussianProcessClassifier', 'GaussianNB', 'RBF', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool', 'RFE', 'RFECV', 'permutation_importance', 'Style', 'Fore', 'hierarchy', 'dendrogram', 'linkage', 'squareform', 'RocCurveDisplay', 'confusion_matrix', 'ConfusionMatrixDisplay']Dict:{'numpy': ['transpose', 'median', 'mean', 'stack', 'max', 'abs', 'sum', 'array', 'min', 'unique', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'melt', 'concat', 'unique', 'array', 'merge'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'random': ['sample'], 'os': ['rename'], 'copy': [], 'functools': [], 'itertools': [], 'gc': [], 'time': [], 'math': [], 'sklearn': [], 'category_encoders': [], 'imblearn': [], 'umap': [], 'shap': [], 'optuna': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'warnings': [], 'colorama': [], 'scipy': []} axis_0: 4, axis_1: 27
80-with-vector-embedding-feature-engineering.py : ['join', 'read_csv', 'read_csv', 'head', 'drop', 'drop', 'fillna', 'fillna', 'join', 'apply', 'apply', 'join', 'sub', 'sub', 'sub', 'replace', 'replace', 'sub', 'join', 'keys', 'sub', 'sub', 'sub', 'apply', 'apply', 'apply', 'apply', 'join', 'apply', 'join', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'join', 'join', 'apply', 'apply', 'transform', 'transform', 'transform', 'concat', 'concat', 'pipe', 'concat', 'concat', 'drop', 'drop', 'drop', 'mean', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 're', 'string', 'spacy', 'nltk', 'time'] ['stopwords', 'BeautifulSoup', 'TfidfVectorizer', 'RandomForestClassifier', 'classification_report', 'StratifiedKFold', 'cross_val_score', 'XGBClassifier', 'classification_report']Dict:{'numpy': ['mean'], 'pandas': ['concat', 'read_csv'], 'os': ['pipe', 'replace'], 're': ['sub'], 'nltk': [], 'string': [], 'bs4': [], 'spacy': [], 'sklearn': [], 'time': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 0
riiid-eda-fe-and-feature-importance.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sum', 'isnull', 'nunique', 'describe', 'hist', 'groupby', 'agg', 'hist', 'hist', 'hist', 'hist', 'agg', 'groupby', 'agg', 'hist', 'hist', 'hist', 'hist', 'agg', 'merge', 'to_dict', 'value_counts', 'apply', 'head', 'groupby', 'copy', 'agg', 'head', 'groupby', 'copy', 'agg', 'groupby', 'copy', 'agg', 'groupby', 'copy', 'agg', 'merge', 'to_dict', 'value_counts', 'apply', 'groupby', 'copy', 'agg', 'groupby', 'copy', 'agg', 'groupby', 'agg', 'merge', 'merge', 'merge', 'merge', 'merge', 'astype', 'fillna', 'fillna', 'corr', 'sort_values', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'merge', 'merge', 'merge', 'merge', 'merge', 'astype', 'fillna', 'fillna'] ['pandas', 'numpy', 'string', 'time', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'dabl', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'os', 'warnings', 'gc', 'riiideducation'] ['LogisticRegression', 'roc_auc_score', 'XGBClassifier', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit', 'metrics', 'Markdown']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'merge'], 'numpy': ['mean', 'sum', 'isin', 'std', 'copy'], 'string': [], 'time': [], 'sklearn': [], 'xgboost': ['apply'], 'lightgbm': [], 'matplotlib': ['hist'], 'seaborn': [], 'dabl': [], 'plotly': [], 'IPython': [], 'os': [], 'warnings': [], 'gc': [], 'riiideducation': []} axis_0: 1, axis_1: 0
feature-engineering-and-rf-optuna.py : ['to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'read_csv', 'head', 'unique', 'count', 'filter', 'count', 'filter', 'filter', 'filter', 'filter', 'unique', 'abs', 'abs', 'abs', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'unique', 'filter', 'std', 'filter', 'filter', 'filter', 'filter', 'to_numpy', 'unique', 'std', 'filter', 'std', 'filter', 'diff', 'filter', 'diff', 'mean', 'filter', 'rename', 'reset_index', 'sample', 'filter', 'filter', 'filter', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'polars', 'datetime', 'optuna', 'plotly.express', 'plotly.graph_objects', 'xgboost'] ['tqdm', 'RandomForestClassifier', 'train_test_split', 'f1_score', 'make_subplots', 'score', 'XGBClassifier']Dict:{'numpy': ['mean', 'abs', 'unique', 'diff', 'std'], 'pandas': ['to_datetime', 'unique', 'read_csv'], 'matplotlib': [], 'polars': ['mean', 'read_csv', 'head', 'count', 'std'], 'datetime': [], '': [], 'tqdm': [], 'optuna': [], 'sklearn': [], 'plotly': [], 'metric': [], 'xgboost': []} axis_0: 0, axis_1: 0
detailed-text-based-feature-engineering.py : ['read_csv', 'read_csv', 'head', 'head', 'count', 'groupby', 'head', 'join', 'sub', 'head', 'apply', 'apply', 'apply', 'apply', 'head', 'apply', 'apply', 'apply', 'apply', 'head', 'apply', 'apply', 'itertuples', 'items', 'apply', 'apply', 'items', 'apply', 'apply', 'apply', 'apply', 'sum', 'groupby', 'sum', 'apply', 'replace', 'replace', 'apply', 'replace', 'replace', 'apply', 'replace', 'replace', 'apply', 'replace', 'replace', 'items', 'apply', 'apply', 'items', 'apply', 'apply', 'read_excel', 'head', 'apply', 'apply', 'apply', 'apply', 'replace', 'items', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply'] ['pandas', 'matplotlib.pyplot', 'numpy', 'string', 're', 'xgboost', 'operator', 'nltk', 'pandas'] ['stopwords', 'KFold', 'metrics', 'Counter', 'ngrams', 'word_tokenize']Dict:{'pandas': ['read_excel', 'read_csv'], 'matplotlib': [], 'numpy': ['sum'], 'string': [], '#for': [], 'text': [], 'pre-processing': [], 'nltk': [], 're': ['sub'], '#Regular': [], 'expression': [], 'operations': [], 'xgboost': [], 'sklearn': [], 'collections': [], 'operator': ['sub']} axis_0: 0, axis_1: 0
eda-house-price-prediction.py : ['read_csv', 'read_csv', 'head', 'info', 'describe', 'select_dtypes', 'select_dtypes', 'corr', 'sort_values', 'apply', 'corr', 'sort_values', 'sum', 'isnull', 'drop', 'drop', 'sum', 'isna', 'fillna', 'mean', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'value_counts', 'value_counts', 'corr', 'skew', 'kurt', 'skew', 'kurt', 'skew', 'kurt', 'skew', 'kurt', 'skew', 'kurt', 'skew', 'kurt', 'drop', 'apply', 'head', 'head', 'transform', 'mean', 'mean', 'mean', 'mean', 'mean', 'head', 'sum', 'isnull', 'drop', 'drop', 'sum', 'isna', 'fillna', 'mean', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'apply', 'transform', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'xgboost'] ['LabelEncoder', 'LabelEncoder', 'train_test_split', 'StandardScaler', 'r2_score', 'mean_absolute_error', 'cross_val_score', 'linear_model', 'linear_model', 'RandomForestRegressor', 'GradientBoostingRegressor']Dict:{'numpy': ['mean', 'info', 'sum'], 'pandas': ['isna', 'isnull', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': ['apply'], 'xgboost': []} axis_0: 0, axis_1: 2
feature-engineering-cirrhosis-outcome-prediction.py : ['join', 'read_csv', 'read_csv', 'head', 'concat', 'value_counts', 'value_counts', 'where', 'replace', 'select_dtypes', 'select_dtypes', 'isna', 'reset_index', 'corr', 'describe', 'groupby', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'replace', 'replace', 'select_dtypes', 'isna', 'reset_index', 'corr', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'drop', 'drop', 'describe', 'drop', 'mean', 'std', 'boxplot', 'isna', 'to_csv'] ['numpy', 'pandas', 'os', 'seaborn', 'matplotlib.pyplot', 'pandas', 'matplotlib.pyplot', 'xgboost', 'optuna', 'optuna'] ['LGBMClassifier', 'model_selection', 'LogisticRegression', 'DecisionTreeClassifier', 'KNeighborsClassifier', 'LinearDiscriminantAnalysis', 'GaussianNB', 'SVC', 'log_loss', 'RandomForestClassifier', 'RobustScaler', 'MinMaxScaler', 'StandardScaler', 'Pipeline', 'StratifiedKFold', 'KFold', 'log_loss', 'accuracy_score', 'StratifiedKFold', 'TPESampler', 'train_test_split', 'RobustScaler', 'Pipeline', 'log_loss', 'accuracy_score', 'StratifiedKFold', 'TPESampler', 'train_test_split']Dict:{'numpy': ['where', 'std', 'quantile', 'mean'], 'pandas': ['concat', 'isna', 'read_csv', 'value_counts'], 'os': ['replace'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'lightgbm': [], 'sklearn': [], 'xgboost': [], 'optuna': [], '': [], '#': [], 'pip': [], 'install': []} axis_0: 0, axis_1: 0
smoking-status-feature-engineering-tf-keras.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'value_counts', 'value_counts', 'value_counts', 'crosstab', 'copy', 'cut', 'drop', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'read_csv', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'tensorflow'] ['pyplot', 'simplefilter', 'clear_output', 'train_test_split', 'Sequential', 'Dense', 'Dropout', 'roc_auc_score', 'ModelCheckpoint']Dict:{'numpy': ['add', 'copy'], 'pandas': ['read_csv', 'cut', 'concat', 'value_counts', 'crosstab'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'IPython': [], 'sklearn': [], 'tensorflow': []} axis_0: 0, axis_1: 1
a-signal-processing-approach-low-pass-filtering.py : ['join', 'read_csv', 'read_csv', 'head', 'mean', 'std', 'where', 'abs', 'abs', 'abs', 'reset_index', 'sort_values', 'apply', 'join', 'mean', 'groupby', 'median', 'groupby', 'max', 'groupby', 'min', 'groupby', 'std', 'groupby', 'apply', 'groupby', 'mean', 'abs', 'diff', 'apply', 'groupby', 'max', 'abs', 'apply', 'groupby', 'min', 'abs', 'map', 'to_dict', 'astype', 'round', 'clip', 'astype', 'round', 'clip', 'astype', 'round', 'clip', 'astype', 'round', 'clip', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'copy', 'copy', 'read_csv', 'array', 'round', 'to_csv', 'head'] ['datetime', 'numpy', 'scipy', 'scipy.fftpack', 'pandas', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'os'] ['butter', 'filtfilt', 'freqz', '*', 'f1_score', 'Pool', 'CatBoostRegressor', 'KFold']Dict:{'datetime': [], 'numpy': ['mean', 'median', 'max', 'abs', 'array', 'where', 'round', 'min', 'clip', 'isin', 'diff', 'std', 'copy'], 'scipy': [], 'pandas': ['concat', 'array', 'read_csv'], 'matplotlib': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'time': [], 'os': []} axis_0: 2, axis_1: 1
tps-apr-lstms-attention.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'shift', 'groupby', 'fillna', 'transform', 'drop', 'drop', 'unique', 'squeeze', 'squeeze', 'mean', 'to_csv', 'head'] ['pandas', 'numpy', 'warnings', 'matplotlib.pyplot', 'os', 'tensorflow'] ['StandardScaler', 'roc_auc_score', 'GroupKFold', 'plot_model', 'Model', 'load_model', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau', '*', 'SeqSelfAttention']Dict:{'pandas': ['unique', 'read_csv'], 'numpy': ['mean', 'squeeze', 'unique'], 'warnings': [], 'matplotlib': [], 'sklearn': [], 'os': [], 'tensorflow': [], 'keras_self_attention': []} axis_0: 0, axis_1: 2
simple-nn-using-old-cv.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'to_pickle', 'read_pickle', 'transform', 'transform', 'concat', 'to_pickle', 'read_pickle', 'transform', 'concat', 'concat', 'concat', 'to_pickle', 'read_pickle', 'transform', 'concat', 'concat', 'to_pickle', 'read_pickle', 'transform', 'concat', 'concat', 'copy', 'copy', 'concat', 'get_dummies', 'get_dummies', 'copy', 'copy', 'concat', 'get_dummies', 'get_dummies', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'merge', 'reset_index', 'reset_index', 'drop', 'drop', 'drop', 'copy', 'astype', 'eval', 'eval', '__init__', 'sum', 'mean', '__init__', 'get_dummies', 'reset_index', 'reset_index', 'fillna', 'merge', 'drop', 'fillna', 'merge', 'drop', 'to_csv'] ['sys', 'numpy', 'random', 'pandas', 'matplotlib.pyplot', 'os', 'copy', 'seaborn', 'pickle', 'torch', 'torch.nn', 'torch.nn.functional', 'torch.optim', 'warnings', 'torch', 'torch.nn.functional'] ['MultilabelStratifiedKFold', 'preprocessing', 'log_loss', 'StandardScaler', 'PCA', 'FactorAnalysis', 'QuantileTransformer', 'VarianceThreshold', 'load', 'dump', 'KMeans', '_WeightedLoss']Dict:{'sys': [], 'iterstrat': [], 'numpy': ['mean', 'std', 'sum', 'copy'], 'random': [], 'pandas': ['to_pickle', 'read_csv', 'eval', 'concat', 'get_dummies', 'read_pickle', 'merge'], 'matplotlib': [], 'os': [], 'copy': ['copy'], 'seaborn': [], 'sklearn': [], 'pickle': [], 'torch': [], 'warnings': []} axis_0: 0, axis_1: 9
updated-debertav3-lgbm-with-spell-autocorrect.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'join', 'get', 'count', 'update', 'apply', 'apply', 'apply', 'apply', 'apply', 'merge', 'drop', 'head', 'head', 'mean', 'mean', 'update', 'map', 'map', 'join', 'map', 'eval', 'join', 'mean', 'head', 'drop', 'drop', 'drop', 'drop', 'mean', 'to_csv'] ['numpy', 'pandas', 'warnings', 'logging', 'os', 'shutil', 'json', 'transformers', 'torch', 'nltk', 'spacy', 're', 'lightgbm', 'random', 'os', 'numpy', 'torch'] ['List', 'AutoModel', 'AutoTokenizer', 'AutoConfig', 'AutoModelForSequenceClassification', 'DataCollatorWithPadding', 'Dataset', 'load_dataset', 'load_from_disk', 'TrainingArguments', 'Trainer', 'load_metric', 'disable_progress_bar', 'mean_squared_error', 'KFold', 'GroupKFold', 'tqdm', 'stopwords', 'word_tokenize', 'TreebankWordDetokenizer', 'Counter', 'Speller', 'SpellChecker']Dict:{'typing': ['count'], 'numpy': ['mean'], 'pandas': ['eval', 'merge', 'read_csv'], 'warnings': [], 'logging': [], 'os': [], 'shutil': [], 'json': [], 'transformers': [], 'datasets': [], 'sklearn': [], 'torch': ['mean'], 'tqdm': ['update'], 'nltk': [], 'collections': ['update', 'get'], 'spacy': [], 're': [], 'autocorrect': [], 'spellchecker': [], 'lightgbm': []} axis_0: 1, axis_1: 9
keras-neural-network-architecture-optimization.py : ['read_csv', 'read_csv', 'head', 'concat', 'iterrows', 'fillna', 'median', 'fillna', 'notnull', 'isnull', 'drop', 'astype', 'astype', 'isnull', 'isnull', 'drop', 'drop', 'concat', 'get_dummies', 'drop', 'concat', 'get_dummies', 'drop', 'drop', 'drop', 'fillna', 'fillna', 'head', 'add', 'add', 'add', 'drop', 'copy', 'add', 'add', 'add', 'astype', 'read_csv', 'to_csv', 'head'] ['numpy', 'pandas', 'tensorflow', 'optuna'] ['Dense', 'Dropout', 'BatchNormalization', 'Sequential', 'TPESampler', 'train_test_split', 'accuracy_score', 'f1_score']Dict:{'numpy': ['median', 'add', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'notnull'], 'tensorflow': ['add'], 'optuna': [], 'sklearn': []} axis_0: 0, axis_1: 18
tps-jan-22-eda-modelling.py : ['read_csv', 'read_csv', 'head', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'nunique', 'nunique', 'min', 'max', 'min', 'max', 'to_datetime', 'to_datetime', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'drop', 'read_csv', 'astype', 'isin', 'astype', 'isin', 'astype', 'isin', 'astype', 'drop', 'read_csv', 'astype', 'isin', 'astype', 'isin', 'astype', 'isin', 'astype', 'drop', 'astype', 'astype', 'read_csv', 'to_dict', 'unstack', 'read_csv', 'to_dict', 'unstack', 'map', 'set_index', 'get', 'map', 'set_index', 'get', 'head', 'drop', 'drop', 'drop', 'drop', 'get_dummies', 'get_dummies', 'where', 'where', 'head', 'to_csv', 'reset_index', 'isin'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'statistics', 'time', 'matplotlib.dates'] ['combinations', 'datetime', 'train_test_split', 'StratifiedKFold', 'GridSearchCV', 'StandardScaler', 'OneHotEncoder', 'LabelEncoder', 'SimpleImputer', 'make_pipeline', 'make_column_transformer', 'confusion_matrix', 'ConfusionMatrixDisplay', 'accuracy_score', 'RandomForestClassifier', 'LinearRegression', 'XGBRegressor', 'CatBoostRegressor', 'LGBMRegressor', 'keras', 'layers', 'callbacks']Dict:{'numpy': ['max', 'sum', 'where', 'min', 'isin'], 'pandas': ['isna', 'get_dummies', 'to_datetime', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'itertools': [], 'statistics': ['groupby'], 'time': [], 'datetime': ['min', 'max'], 'sklearn': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'tensorflow': []} axis_0: 2, axis_1: 7
tutorial-image-feature-extraction-and-matching.py : ['join', 'join'] ['numpy', 'pandas', 'cv2', 'matplotlib.pyplot', 'os'] []Dict:{'numpy': [], 'pandas': [], 'cv2': [], 'matplotlib': [], 'os': []} axis_0: 0, axis_1: 0
future-sales-time-series-visualization.py : ['join', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'read_csv', 'head', 'info', 'describe', 'head', 'head', 'sort_values', 'head', 'sort_values', 'boxplot', 'boxplot', 'drop', 'drop', 'drop', 'drop', 'apply', 'head', 'head', 'sum', 'unique', 'mean', 'max', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'clip', 'fillna', 'head', 'drop_duplicates', 'head', 'reset_index', 'head', 'transform', 'concat', 'head', 'apply', 'head', 'head', 'drop', 'head', 'read_csv', 'head', 'head', 'apply', 'head', 'apply', 'fillna', 'median', 'median', 'drop', 'head', 'drop', 'reset_index', 'head', 'copy', 'diff', 'dropna', 'product', 'drop', 'read_csv', 'head', 'head', 'to_csv'] ['re', 'os', 'random', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'missingno', 'plotly.express', 'warnings', 'statsmodels.api', 'itertools', 'statsmodels.api', 'itertools', 'lightgbm'] ['ARIMA', 'plot_acf', 'plot_pacf', 'train_test_split', 'StandardScaler', 'MinMaxScaler', 'RobustScaler', 'StandardScaler', 'MinMaxScaler', 'RobustScaler', 'ARIMA', 'plot_acf', 'plot_pacf', 'plot_importance']Dict:{'re': [], 'os': [], 'random': [], 'numpy': ['mean', 'median', 'product', 'max', 'diff', 'sum', 'unique', 'clip', 'info', 'copy'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'missingno': [], 'plotly': [], 'warnings': [], 'statsmodels': [], 'itertools': ['product', 'groupby'], 'sklearn': ['transform'], 'lightgbm': []} axis_0: 0, axis_1: 9
blend-blend-blend.py : ['read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'copy', 'read_csv', 'read_csv', 'read_csv', 'copy', 'to_csv'] ['numpy', 'pandas'] []Dict:{'numpy': ['copy'], 'pandas': ['read_csv']} axis_0: 0, axis_1: 0
titanic-survival-from-top-70-to-top-7-on-lb.py : ['join', 'read_csv', 'info', 'head', 'read_csv', 'info', 'tail', 'value_counts', 'value_counts', 'sum', 'isnull', 'mean', 'fillna', 'astype', 'sum', 'isnull', 'fillna', 'astype', 'map', 'fillna', 'astype', 'value_counts', 'drop', 'drop', 'value_counts', 'info', 'value_counts', 'fillna', 'info', 'head', 'fillna', 'map', 'map', 'describe', 'describe', 'info', 'head', 'replace', 'map', 'fillna', 'value_counts', 'drop', 'drop', 'value_counts', 'info', 'value_counts', 'drop', 'drop', 'value_counts', 'astype', 'value_counts', 'info', 'drop', 'drop', 'head', 'copy', 'drop', 'head', 'info', 'mean', 'std', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'std'] ['numpy', 'pandas', 'os', 'xgboost'] ['cross_val_score', 'LogisticRegression', 'svm', 'tree', 'RandomForestClassifier', 'GradientBoostingClassifier', 'BaggingClassifier', 'GaussianNB', 'XGBClassifier', 'cross_val_score', 'GridSearchCV', 'RandomizedSearchCV', 'DecisionTreeClassifier']Dict:{'numpy': ['mean', 'sum', 'info', 'std', 'copy'], 'pandas': ['value_counts', 'read_csv', 'isnull'], 'sklearn': [], 'os': ['replace'], 'xgboost': []} axis_0: 0, axis_1: 16
ai-generated-text-detection-cluster.py : ['read_csv', 'read_csv', 'rename', 'concat', 'read_csv', 'concat', 'min', 'transform', 'hist', 'hist', 'to_csv'] ['numpy', 'pandas', 'umap', 'matplotlib.pyplot'] ['TfidfVectorizer', 'roc_auc_score', 'KMeans']Dict:{'numpy': ['min'], 'pandas': ['concat', 'read_csv'], 'sklearn': [], 'umap': [], 'matplotlib': ['hist']} axis_0: 1, axis_1: 0
feature-engineering-write-processes-write-quality.py : ['read_csv', 'head', 'keys', 'mean', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'count', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'max', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'max', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'count', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'count', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'count', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'count', 'groupby', 'head', 'read_csv', 'head', 'merge', 'drop', 'head', 'keys', 'mean', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'count', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'max', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'max', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'count', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'count', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'count', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'count', 'groupby', 'read_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'random'] []Dict:{'pandas': ['merge', 'read_csv'], 'numpy': ['mean', 'std', 'max'], 'matplotlib': [], 'random': []} axis_0: 0, axis_1: 1
titanic-survival-a-complete-guide-for-beginners.py : ['join', 'read_csv', 'read_csv', 'head', 'describe', 'describe', 'info', 'sum', 'isnull', 'head', 'info', 'sum', 'isnull', 'value_counts', 'value_counts', 'groupby', 'unstack', 'mean', 'groupby', 'value_counts', 'value_counts', 'groupby', 'unstack', 'mean', 'groupby', 'crosstab', 'div', 'astype', 'sum', 'value_counts', 'value_counts', 'groupby', 'mean', 'groupby', 'value_counts', 'value_counts', 'groupby', 'mean', 'groupby', 'value_counts', 'value_counts', 'groupby', 'mean', 'groupby', 'dropna', 'dropna', 'dropna', 'dropna', 'dropna', 'dropna', 'corr', 'drop', 'head', 'crosstab', 'replace', 'replace', 'replace', 'replace', 'mean', 'groupby', 'map', 'fillna', 'head', 'astype', 'map', 'head', 'value_counts', 'fillna', 'head', 'astype', 'map', 'head', 'mean', 'std', 'sum', 'isnull', 'astype', 'cut', 'mean', 'groupby', 'head', 'head', 'fillna', 'median', 'qcut', 'mean', 'groupby', 'head', 'astype', 'head', 'mean', 'groupby', 'mean', 'groupby', 'head', 'head', 'drop', 'drop', 'drop', 'head', 'head', 'drop', 'copy', 'drop', 'astype', 'sum', 'sort_values', 'head', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 'os', 'itertools'] ['LogisticRegression', 'SVC', 'LinearSVC', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'GaussianNB', 'Perceptron', 'SGDClassifier', 'confusion_matrix']Dict:{'pandas': ['read_csv', 'isnull', 'cut', 'value_counts', 'qcut', 'crosstab'], 'numpy': ['mean', 'median', 'sum', 'info', 'std', 'copy'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'os': ['replace'], 'sklearn': [], 'itertools': ['groupby']} axis_0: 1, axis_1: 7
naive-xgb-lb-0-317.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'hist', 'drop', 'drop', 'concat', 'merge_ordered', 'to_dict', 'value_counts', 'map', 'to_dict', 'value_counts', 'map', 'astype', 'astype', 'drop', 'select_dtypes', 'copy', 'select_dtypes', 'factorize', 'concat', 'to_csv'] ['numpy', 'pandas', 'xgboost', 'matplotlib.pyplot'] []Dict:{'numpy': ['copy'], 'pandas': ['merge_ordered', 'read_csv', 'concat', 'value_counts', 'factorize'], 'xgboost': [], 'matplotlib': ['hist']} axis_0: 0, axis_1: 4
feature-engineering-and-lightgbm.py : ['read_csv', 'read_csv', 'read_csv', 'nunique', 'unique', 'unique', 'nunique', 'groupby', 'sum', 'isna', 'sum', 'isna', 'isna', 'keys', 'apply', 'apply', 'apply', 'apply', 'map', 'map', 'map', 'map', 'head', 'astype', 'astype', 'astype', 'astype', 'drop_duplicates', 'concat', 'transform', 'transform', 'astype', 'astype', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'drop', 'drop', 'apply', 'apply', 'apply', 'drop', 'concat', 'get_dummies', 'drop', 'concat', 'get_dummies', 'transform', 'transform', 'head', 'drop', 'drop', 'corr', 'corr', 'drop', 'min', 'max', 'max', 'stack', 'head', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'seaborn', 'math', 'lightgbm', 'os', 'sys'] ['mean_squared_error', 'LabelEncoder', 'train_test_split', 'KFold', 'StandardScaler', 'BayesianOptimization']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'get_dummies', 'unique'], 'numpy': ['stack', 'max', 'sum', 'min', 'unique'], 'seaborn': [], 'matplotlib': [], 'math': [], 'sklearn': ['transform'], 'bayes_opt': [], 'lightgbm': [], 'os,': [], 'sys': []} axis_0: 2, axis_1: 8
bond-calculation-lb-0-82.py : ['to_json', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'groupby', 'abs', 'mean', 'map', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'head', 'head', 'head', 'concat', 'items', 'head', 'where', 'where', 'where', 'where', 'mean', 'join', 'head', 'merge', 'rename', 'head', 'apply', 'apply', 'drop', 'describe', 'head'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'metrics', 'linear_model', 'HTML', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'product', 'tqdm_notebook']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'where', 'min', 'isin', 'std'], 'pandas': ['concat', 'merge', 'read_csv'], 'os': ['rename'], 'matplotlib': [], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'catboost': [], 'gc': [], 'seaborn': [], 'warnings': [], 'IPython': [], 'json': [], 'altair': [], 'networkx': [], 'numba': [], 'itertools': []} axis_0: 7, axis_1: 8
gru-lstm-with-feature-engineering-and-augmentation.py : ['transpose', 'array', 'applymap', 'array', 'array', 'array', 'read_json', 'read_json', 'max', 'sum', 'sum', 'read_csv', 'head', 'copy', 'isin', 'merge', 'map', 'to_dict', 'set_index', 'copy', 'query', 'copy', 'query', 'transpose', 'array', 'transpose', 'array', 'reset_index', 'mean', 'groupby', 'concat', 'reset_index', 'mean', 'groupby', 'concat', 'to_csv', 'read_json', 'unique', 'merge', 'mean', 'mean', 'mean', 'mean'] ['pandas', 'numpy', 'json', 'tensorflow.keras.layers', 'keras.backend', 'tensorflow', 'plotly.express', 'os'] ['StratifiedKFold', 'KFold', 'GroupKFold', 'KMeans']Dict:{'pandas': ['read_csv', 'read_json', 'concat', 'unique', 'array', 'merge'], 'numpy': ['transpose', 'mean', 'max', 'sum', 'unique', 'isin', 'array', 'copy'], 'json': [], 'tensorflow': ['transpose', 'unique', 'concat'], 'keras': ['transpose', 'sum', 'max', 'mean'], 'plotly': [], 'sklearn': [], 'os': []} axis_0: 1, axis_1: 2
wine-quality-eda-prediction-and-deploy.py : ['nunique', 'sum', 'isnull', 'sum', 'duplicated', 'head', 'tail', 'round', 'corr', 'where', 'apply', 'round', 'mean', 'apply', 'round', 'std', 'apply', 'round', 'quantile', 'apply', 'round', 'quantile', 'apply', 'round', 'quantile', 'nunique', 'nunique', 'keys', 'update', 'value_counts', 'value_counts', 'select_dtypes', 'round', 'head', 'head', 'drop', 'head', 'head', 'read_csv', 'drop', 'copy', 'head', 'replace', 'replace', 'dropna', 'head', 'any', 'head', 'replace', 'replace', 'dropna', 'transform', 'transform', 'copy', 'mean', 'std', 'mean', 'mean', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'copy', 'mean', 'read_csv', 'drop', 'squeeze', 'to_csv'] ['pandas', 'numpy', 'plotly.express', 'plotly.graph_objs', 'plotly.subplots', 'plotly.figure_factory', 'scipy.stats', 'math', 'optuna', 'random', 'warnings', 'joblib'] ['make_subplots', 'display', 'init_notebook_mode', 'shapiro', 'skew', 'RFECV', 'Pipeline', 'ColumnTransformer', 'BaseEstimator', 'TransformerMixin', 'RobustScaler', 'StandardScaler', 'QuantileTransformer', 'FunctionTransformer', 'ColumnTransformer', 'StratifiedKFold', 'KFold', 'train_test_split', 'mean_squared_error', 'r2_score', 'mean_absolute_error', 'cohen_kappa_score', 'make_scorer', 'HuberRegressor', 'RANSACRegressor', 'TheilSenRegressor', 'HistGradientBoostingRegressor', 'StackingRegressor', 'AdaBoostRegressor', 'RandomForestRegressor', 'CatBoostRegressor', 'XGBRegressor', 'LGBMRegressor', 'HistGradientBoostingClassifier', 'AdaBoostClassifier', 'RandomForestClassifier', 'StackingClassifier', 'VotingClassifier', 'CatBoostClassifier', 'XGBClassifier', 'LGBMClassifier', 'KMeans', 'OrdinalEncoder', 'OneHotEncoder']Dict:{'pandas': ['isnull', 'read_csv', 'value_counts'], 'numpy': ['mean', 'squeeze', 'quantile', 'any', 'sum', 'where', 'round', 'std', 'copy'], 'plotly': [], 'IPython': [], 'scipy': [], 'math': [], 'sklearn': ['transform'], 'catboost': [], 'xgboost': ['apply'], 'lightgbm': [], 'optuna': [], 'random': [], 'warnings': [], 'joblib': []} axis_0: 1, axis_1: 0
eda-feature-engineering-ensembling-optuna.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'describe', 'describe', 'describe', 'sort_index', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'head', 'rename', 'concat', 'head', 'drop', 'copy', 'concat', 'corr', 'drop', 'drop', 'corr', 'drop', 'sort_values', 'drop', 'drop', 'copy', 'transform', 'mean', 'head', 'sort_values', 'mean', 'mean', 'mean', 'sort_values', 'reset_index', 'mean', 'head', 'sort_values', 'mean', 'mean', 'mean', 'sort_values', 'reset_index', 'copy', 'transform', 'groupby', 'median', 'drop_duplicates', 'drop', 'drop', 'copy', 'transform', 'mean', 'head', 'sort_values', 'mean', 'mean', 'mean', 'sort_values', 'reset_index', 'mean', 'head', 'sort_values', 'mean', 'mean', 'mean', 'sort_values', 'reset_index', 'mean', 'head', 'reset_index', 'head', 'to_csv'] ['warnings', 'os', 'datetime', 'numpy', 'pandas', 'plotly', 'plotly.io', 'plotly.express', 'plotly.graph_objects', 'plotly.figure_factory', 'seaborn', 'matplotlib.pyplot', 'optuna'] ['make_subplots', 'DecisionTreeClassifier', 'plot_tree', 'Ridge', 'RandomForestRegressor', 'train_test_split', 'KFold', 'RepeatedKFold', 'mean_squared_error', 'KBinsDiscretizer', 'StandardScaler', 'OneHotEncoder', 'MinMaxScaler', 'OrdinalEncoder', 'XGBRegressor']Dict:{'warnings': [], 'os': ['rename'], 'datetime': [], 'numpy': ['mean', 'median', 'sum', 'copy'], 'pandas': ['concat', 'isna', 'read_csv'], 'plotly': [], 'seaborn': [], 'matplotlib': [], 'sklearn': ['transform'], 'xgboost': [], 'optuna': []} axis_0: 8, axis_1: 1
nlp-80-accuracy.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'sum', 'isna', 'sum', 'isna', 'drop', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'apply', 'join', 'apply', 'join', 'apply', 'join', 'apply', 'join', 'apply', 'join', 'apply', 'join'] ['numpy', 'pandas', 'os'] ['stopwords', 'PorterStemmer', 'WordNetLemmatizer', 'train_test_split', 'Pipeline', 'accuracy_score', 'TfidfVectorizer', 'LogisticRegression', 'PassiveAggressiveClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'MultinomialNB', 'BernoulliNB', 'KNeighborsClassifier', 'SVC']Dict:{'numpy': ['sum'], 'pandas': ['isna', 'read_csv'], 'os': ['replace'], 'nltk': [], 'sklearn': []} axis_0: 0, axis_1: 1
how-to-deal-with-categorical-features.py : ['read_csv', 'read_csv', 'copy', 'isnull', 'isnull', 'astype', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'notnull', 'notnull', 'notnull', 'notnull', 'notnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'notnull', 'notnull', 'notnull', 'notnull', 'notnull', 'isnull', 'fillna', 'notnull', 'sum', 'isnull', 'value_counts', 'isnull', 'mode', 'dropna', 'isnull', 'mode', 'merge', 'mode', 'dropna', 'isnull', 'median', 'merge', 'isnull', 'mode', 'merge', 'isnull', 'median', 'merge', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'sum', 'isnull', 'value_counts', 'value_counts', 'copy', 'copy', 'sort_values', 'sort_values', 'copy', 'copy', 'copy', 'head', 'value_counts', 'get_dummies', 'head', 'value_counts', 'head', 'copy', 'copy', 'get_dummies', 'get_dummies', 'head', 'copy', 'copy', 'get_dummies', 'get_dummies', 'head', 'copy', 'copy', 'get_dummies', 'get_dummies', 'copy', 'copy', 'get_dummies', 'get_dummies', 'copy', 'copy', 'get_dummies', 'get_dummies', 'copy', 'copy', 'get_dummies', 'get_dummies', 'head', 'copy', 'copy', 'apply', 'apply', 'head', 'copy', 'get_dummies', 'head', 'copy', 'head', 'value_counts', 'copy', 'head', 'crosstab', 'copy', 'agg', 'groupby', 'corr', 'mean', 'mean', 'copy', 'corr', 'mean', 'mean', 'copy', 'corr', 'mean', 'mean', 'copy', 'copy', 'astype', 'map', 'astype', 'map', 'copy', 'copy', 'astype', 'map', 'astype', 'map', 'copy', 'copy', 'get_dummies', 'get_dummies', 'copy', 'copy', 'astype', 'map', 'astype', 'map', 'copy', 'copy', 'astype', 'map', 'astype', 'map', 'copy', 'copy', 'get_dummies', 'get_dummies', 'copy', 'get_dummies', 'head', 'copy', 'get_dummies', 'head', 'value_counts', 'copy', 'get_dummies', 'sum', 'sum', 'copy', 'copy', 'get_dummies', 'get_dummies', 'value_counts', 'copy', 'copy', 'get_dummies', 'get_dummies', 'copy', 'copy', 'isin', 'isin', 'get_dummies', 'get_dummies', 'copy', 'copy', 'get_dummies', 'get_dummies', 'copy', 'copy', 'astype', 'map', 'astype', 'map', 'copy', 'copy', 'astype', 'map', 'astype', 'map', 'map', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'astype', 'astype', 'get_dummies', 'get_dummies', 'value_counts', 'copy', 'copy', 'groupby', 'map', 'map', 'sample', 'transform', 'transform', 'copy', 'copy', 'mean', 'groupby', 'map', 'map', 'sample'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'statsmodels.formula.api', 'warnings', 'graphviz'] ['KFold', 'cross_validate', 'GridSearchCV', 'train_test_split', 'mean_squared_error', 'Pipeline', 'RobustScaler', 'OneHotEncoder', 'LabelEncoder', 'Lasso', 'DecisionTreeRegressor', 'tree', 'FeatureHasher']Dict:{'numpy': ['mean', 'median', 'sum', 'isin', 'copy'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'notnull', 'merge', 'crosstab'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'statsmodels': [], 'warnings': [], 'graphviz': []} axis_0: 0, axis_1: 2
titanic-eda-to-ml-beginner.py : ['read_csv', 'read_csv', 'head', 'info', 'head', 'info', 'describe', 'describe', 'sum', 'count', 'count', 'groupby', 'sum', 'count', 'sum', 'count', 'value_counts', 'value_counts', 'crosstab', 'sum', 'count', 'sum', 'count', 'sum', 'count', 'crosstab', 'crosstab', 'head', 'crosstab', 'crosstab', 'crosstab', 'crosstab', 'drop', 'copy', 'copy', 'get_dummies', 'drop', 'dropna', 'get_dummies', 'drop', 'head', 'info', 'info', 'head', 'corr', 'drop', 'transform', 'drop', 'fillna', 'mean', 'transform', 'drop', 'drop', 'fillna', 'mean', 'to_csv', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['check_output', 'StandardScaler', 'train_test_split', 'accuracy_score', 'classification_report', 'confusion_matrix', 'LogisticRegression', 'GaussianNB', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'SVC', 'cross_val_score']Dict:{'numpy': ['mean', 'info', 'sum', 'copy'], 'pandas': ['crosstab', 'get_dummies', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'subprocess': [], 'sklearn': []} axis_0: 0, axis_1: 7
godaddy-stacking-xgb-lgbm-cat.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'drop', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'shift', 'groupby', 'transform', 'groupby', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'read_csv', 'merge', 'fillna', 'clip', 'clip', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isnull', 'clip', 'clip', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'read_csv', 'read_csv', 'astype', 'astype', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'set_index', 'join', 'drop', 'copy', 'to_csv', 'read_csv', 'iterrows', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'os', 'lightgbm', 'xgboost', 'catboost', 'lightgbm', 'xgboost', 'catboost'] ['tqdm', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'os': [], 'tqdm': []} axis_0: 0, axis_1: 1
no-length-ratio-tuned-debertav3-lgbm-autocorrect.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'join', 'get', 'count', 'update', 'apply', 'apply', 'apply', 'apply', 'apply', 'merge', 'drop', 'head', 'head', 'mean', 'mean', 'update', 'map', 'map', 'join', 'map', 'eval', 'join', 'mean', 'head', 'drop', 'drop', 'drop', 'drop', 'mean', 'to_csv'] ['numpy', 'pandas', 'warnings', 'logging', 'os', 'shutil', 'json', 'transformers', 'torch', 'nltk', 'spacy', 're', 'lightgbm', 'random', 'os', 'numpy', 'torch'] ['List', 'AutoModel', 'AutoTokenizer', 'AutoConfig', 'AutoModelForSequenceClassification', 'DataCollatorWithPadding', 'Dataset', 'load_dataset', 'load_from_disk', 'TrainingArguments', 'Trainer', 'load_metric', 'disable_progress_bar', 'mean_squared_error', 'KFold', 'GroupKFold', 'tqdm', 'stopwords', 'word_tokenize', 'TreebankWordDetokenizer', 'Counter', 'Speller', 'SpellChecker']Dict:{'typing': ['count'], 'numpy': ['mean'], 'pandas': ['eval', 'merge', 'read_csv'], 'warnings': [], 'logging': [], 'os': [], 'shutil': [], 'json': [], 'transformers': [], 'datasets': [], 'sklearn': [], 'torch': ['mean'], 'tqdm': ['update'], 'nltk': [], 'collections': ['update', 'get'], 'spacy': [], 're': [], 'autocorrect': [], 'spellchecker': [], 'lightgbm': []} axis_0: 1, axis_1: 6
time-series-analysis-and-forecasting.py : ['read_csv', 'head', 'info', 'rename_axis', 'sum', 'isnull', 'isnull', 'reset_index', 'notna', 'head', 'sum', 'sum', 'isnull', 'corr', 'corr', 'drop', 'corr', 'drop', 'corr', 'corr', 'to_datetime', 'head', 'sort_values', 'shift', 'head', 'value_counts', 'sum', 'drop', 'drop', 'reset_index', 'mean', 'resample', 'head', 'drop', 'drop', 'mean', 'rolling', 'drop', 'mean', 'array', 'drop', 'set_index', 'set_index', 'mean', 'std', 'array', 'drop', 'set_index', 'set_index', 'shift', 'shift', 'dropna', 'drop', 'set_index'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'math', 'warnings'] ['mean_absolute_error', 'mean_squared_error', 'datetime', 'date', 'adfuller', 'autocorrelation_plot', 'plot_acf', 'plot_pacf', 'autocorrelation_plot', 'plot_acf', 'plot_pacf', 'TimeSeriesSplit', 'cross_val_score', 'ARIMA', 'XGBRegressor', 'plot_importance', 'plot_tree', 'asarray', 'DataFrame', 'concat']Dict:{'numpy': [], 'pandas': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'math': [], 'warnings': [], '#': [], 'Supress': [], '': [], 'datetime': [], 'statsmodels': [], 'xgboost': []} axis_0: 2, axis_1: 6
optiver-2023-competition-notebook-explained.py : ['eval', 'eval', 'eval', 'max', 'min', 'sum', 'read_csv', 'mean'] ['pandas', 'lightgbm', 'xgboost', 'catboost', 'numpy', 'joblib', 'os', 'optiver2023'] []Dict:{'pandas': ['eval', 'read_csv'], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'numpy': ['mean', 'sum', 'max', 'min'], 'joblib': [], '': [], '#': [], '📦': [], 'Joblib': [], 'for': [], 'model': [], 'serialization': [], 'os': [], '📂': [], 'OS': [], 'module': [], 'file': [], 'operations': [], 'optiver2023': [], 'custom': []} axis_0: 0, axis_1: 6
lightgbm-baseline-with-aggregated-log-data.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'info', 'info', 'read_csv', 'apply', 'apply', 'head', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'get_dummies', 'concat', 'head', 'value_counts', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'concat', 'fillna', 'reset_index', 'set_index', 'head', 'unique', 'set_index', 'set_index', 'astype', 'astype', 'copy', 'set_index', 'astype', 'astype', 'astype', 'get_dummies', 'concat', 'astype', 'read_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'plotly.graph_objects', 'time', 'warnings', 'gc', 'matplotlib.pyplot', 'jo_wilder'] ['make_subplots', 'StratifiedKFold', 'OrdinalEncoder', 'LabelEncoder', 'roc_auc_score', 'train_test_split', 'confusion_matrix', 'accuracy_score', 'precision_score', 'recall_score', 'f1_score', 'roc_auc_score', 'XGBClassifier', 'CatBoostClassifier', 'LGBMClassifier', 'ticker', 'KFold', 'GroupKFold', 'RandomForestClassifier', 'f1_score']Dict:{'numpy': ['transpose', 'max', 'sum', 'min', 'unique', 'info', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': [], 'xgboost': ['apply'], 'catboost': [], 'lightgbm': [], 'time': [], 'warnings': [], 'gc': [], 'jo_wilder': []} axis_0: 0, axis_1: 3
use-public-lb-probing-data-lb-0-0.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'to_datetime', 'replace', 'astype', 'eq', 'astype', 'eq', 'merge', 'sort_values', 'array', 'array', 'array', 'head', 'concat', 'concat', 'stack', 'sum', 'sum', 'array', 'sum', 'to_csv', 'head'] ['pandas', 'numpy'] ['CatBoostClassifier']Dict:{'pandas': ['read_csv', 'concat', 'array', 'merge', 'to_datetime'], 'catboost': []} axis_0: 2, axis_1: 1
house-prices-data-cleaning-feature-engineering.py : ['read_csv', 'copy', 'sum', 'isnull', 'sum', 'isnull', 'sort_values', 'drop', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mode', 'drop', 'fillna', 'mode', 'copy', 'drop', 'quantile', 'max', 'quantile', 'nunique', 'max', 'quantile', 'quantile', 'quantile', 'sort_values', 'quantile', 'quantile', 'quantile', 'max', 'nunique', 'value_counts', 'sort_values', 'drop', 'std', 'std', 'mean', 'groupby', 'transform', 'groupby', 'astype', 'get_dummies', 'concat', 'drop', 'mean', 'std', 'copy', 'cumsum', 'drop', 'sort_values', 'drop', 'drop', 'concat', 'mean', 'concat'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'shap'] ['PCA', 'mutual_info_regression', 'RandomForestRegressor', 'GradientBoostingRegressor', 'cross_val_score', 'train_test_split']Dict:{'numpy': ['mean', 'quantile', 'max', 'sum', 'std', 'cumsum', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'shap': []} axis_0: 0, axis_1: 0
don-t-underestimate-the-power-of-a-logistic-reg.py : ['reset_index', 'sum', 'isnull', 'nunique', 'sum', 'isna', 'fillna', 'mode', 'crosstab', 'reset_index', 'rename', 'min', 'max', 'isin', 'sort_index', 'value_counts', 'crosstab', 'reset_index', 'rename', 'min', 'max', 'crosstab', 'reset_index', 'rename', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'min', 'max', 'read_csv', 'read_csv', 'read_csv'] ['pandas', 'numpy', 'string', 'matplotlib.pyplot', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'warnings', 'matplotlib.gridspec', 'pandas'] ['KFold', 'StratifiedKFold', 'cross_val_score', 'roc_auc_score', 'LogisticRegression', 'Markdown']Dict:{'pandas': ['isna', 'read_csv', 'isnull', 'value_counts', 'crosstab'], 'numpy': ['isin', 'sum', 'max', 'min'], 'string': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'IPython': [], 'warnings': []} axis_0: 0, axis_1: 1
spectral-analysis-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'diff', 'max', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'transform', 'groupby', 'replace', 'transform', 'groupby', 'read_csv', 'unique', 'read_csv', 'read_csv', 'abs', 'abs', 'cumsum', 'groupby', 'cumsum', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'fillna', 'transform', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'abs', 'transform', 'groupby', 'astype', 'shift', 'groupby', 'astype', 'fillna', 'drop', 'head', 'to_numpy', 'drop', 'drop', 'transform', 'squeeze', 'squeeze', 'squeeze', 'mean', 'abs', 'copy', 'squeeze', 'mean', 'abs', 'sort_values', 'sort_values', 'to_csv', 'to_csv', 'median', 'to_csv', 'round', 'clip', 'to_csv', 'head'] ['numpy', 'pandas', 'pickle', 'matplotlib.pyplot', 'scipy.signal', 'matplotlib.pyplot', 'numpy', 'matplotlib.pyplot', 'matplotlib.pyplot', 'matplotlib.pyplot', 'numpy', 'os', 'pandas', 'optuna', 'matplotlib.pyplot', 'tensorflow', 'tensorflow.keras.backend'] ['display', 'fft', 'fftfreq', 'blackman', 'hilbert', 'chirp', 'signal', 'tqdm', 'keras', 'EarlyStopping', 'ModelCheckpoint', 'LearningRateScheduler', 'ReduceLROnPlateau', 'ExponentialDecay', 'mean_absolute_error', 'RobustScaler', 'normalize', 'train_test_split', 'GroupKFold', 'KFold', 'display', 'hilbert', 'chirp', 'blackman', 'fft', 'fftfreq']Dict:{'numpy': ['mean', 'median', 'squeeze', 'max', 'abs', 'round', 'unique', 'clip', 'diff', 'cumsum', 'copy'], 'pandas': ['get_dummies', 'unique', 'read_csv'], 'IPython': [], 'pickle': [], 'matplotlib': [], 'scipy': [], 'optuna': [], 'tqdm': [], 'tensorflow': [], 'sklearn': []} axis_0: 1, axis_1: 3
intro-to-model-tuning-grid-and-random-search.py : ['read_csv', 'sample', 'select_dtypes', 'array', 'astype', 'drop', 'keys', 'sample', 'sample', 'hist', 'hist', 'items', 'product', 'sort_values', 'reset_index', 'sample', 'items', 'sample', 'items', 'sort_values', 'reset_index', 'sample', 'items', 'sort_values', 'reset_index', 'items', 'product', 'sort_values', 'reset_index', 'read_csv', 'read_csv', 'map', 'map', 'reset_index', 'sort_values', 'keys', 'head', 'max', 'max', 'copy', 'idxmax', 'copy', 'idxmax', 'sort_values', 'mean', 'mean', 'value_counts', 'astype', 'copy', 'astype', 'astype', 'astype', 'astype', 'read_csv', 'read_csv', 'array', 'astype', 'drop', 'drop', 'to_csv'] ['pandas', 'numpy', 'lightgbm', 'random', 'matplotlib.pyplot', 'seaborn', 'itertools', 'pprint', 'pprint', 'csv', 'ast', 'altair'] ['train_test_split', 'roc_auc_score']Dict:{'pandas': ['array', 'read_csv', 'value_counts'], 'numpy': ['mean', 'product', 'max', 'array', 'copy'], 'lightgbm': [], 'sklearn': [], 'random': ['sample'], 'matplotlib': ['hist'], 'seaborn': [], 'itertools': ['product'], 'pprint': [], 'csv': [], 'ast': [], 'altair': []} axis_0: 0, axis_1: 0
advanced-reg-techniques-linear-models-top-6.py : ['join', 'read_csv', 'head', 'read_csv', 'head', 'drop', 'drop', 'corr', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'quantile', 'drop', 'reset_index', 'drop', 'reset_index', 'reset_index', 'concat', 'drop', 'head', 'drop', 'astype', 'any', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sort_values', 'isnull', 'fillna', 'sum', 'isnull', 'unique', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'mode', 'sum', 'isnull', 'unique', 'sum', 'sum', 'isnull', 'isnull', 'rename', 'sort_values', 'drop', 'to_dict', 'drop', 'drop', 'reset_index', 'sort_values', 'apply', 'skew', 'head', 'apply', 'apply', 'apply', 'apply', 'apply', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'head', 'reset_index', 'get_dummies', 'head', 'drop', 'concat', 'head', 'mode', 'skew', 'kurt', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'items', 'sum', 'sum', 'read_csv', 'round', 'to_csv', 'read_csv', 'head', 'to_csv'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 're', 'pandas', 'numpy', 'base64'] ['rcParams', 'LabelEncoder', 'stats', 'boxcox1p', 'variance_inflation_factor', 'add_constant', 'KFold', 'cross_val_score', 'train_test_split', 'pipeline', 'preprocessing', 'LinearRegression', 'ElasticNet', 'Lasso', 'BayesianRidge', 'Ridge', 'svm', 'GradientBoostingRegressor', 'LGBMRegressor', 'XGBRegressor', 'StackingCVRegressor', 'mean_squared_error', 'HTML']Dict:{'os': ['rename', 'replace'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'unique'], 'numpy': ['mean', 'median', 'quantile', 'any', 'sum', 'round', 'unique', 'std'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'pylab': ['items'], 'sklearn': [], 'scipy': [], 'warnings': [], 'statsmodels': [], 're': [], 'lightgbm': [], 'xgboost': ['apply'], 'mlxtend': [], 'IPython': [], 'base64': []} axis_0: 0, axis_1: 4
feature-importance-case-study-ahp.py : ['read_csv', 'read_csv', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'reset_index', 'drop', 'reset_index', 'concat', 'replace', 'replace', 'replace', 'mode', 'apply', 'groupby', 'fillna', 'mode', 'apply', 'groupby', 'fillna', 'median', 'astype', 'astype', 'astype', 'isin', 'value_counts', 'value_counts', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'abs', 'sort_values', 'apply', 'drop', 'get_dummies', 'sum', 'sum', 'isna', 'array', 'items', 'items', 'merge', 'head', 'get', 'sort_values', 'drop', 'drop', 'sort_values', 'merge', 'merge', 'apply', 'drop', 'reset_index', 'copy', 'nlargest', 'mean', 'mean', 'std', 'mean', 'concat', 'concat', 'concat', 'concat', 'concat', 'drop', 'reset_index'] ['numpy', 'pandas', 'pdpipe', 'matplotlib.pyplot', 'seaborn'] ['datetime', 'stats', 'skew', 'boxcox_normmax', 'norm', 'boxcox1p', 'Dict', 'List', 'Tuple', 'Sequence', 'cross_val_score', 'KFold', 'cross_validate', 'RFE', 'f_regression', 'LinearRegression', 'Ridge', 'Lasso', 'MinMaxScaler', 'RandomForestRegressor', 'SelectFromModel', 'permutation_importance', 'clone']Dict:{'numpy': ['mean', 'median', 'std', 'abs', 'sum', 'isin', 'array', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'get_dummies', 'array', 'merge'], 'pdpipe': [], 'matplotlib': ['get'], 'seaborn': [], 'datetime': ['replace'], 'scipy': [], 'typing': [], 'sklearn': [], '=': [], "get_top_features_by_rank('permutation_importance',": [], 'top_features)': [], "get_top_features_by_rank('drop_col_importance',": []} axis_0: 0, axis_1: 5
eda-feature-engineering-xgboost-model.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'astype', 'astype', 'head', 'copy', 'drop', 'copy', 'copy', 'transform', 'head', 'head', 'mean', 'to_csv', 'head'] ['pandas', 'numpy', 'datatable', 'gc'] ['XGBClassifier', 'train_test_split', 'StratifiedKFold', 'roc_curve', 'auc', '*', 'filterwarnings']Dict:{'pandas': [], 'numpy': ['mean', 'max', 'sum', 'min', 'copy'], 'datatable': [], 'xgboost': [], 'sklearn': [], 'category_encoders': [], 'gc': [], 'warnings': []} axis_0: 0, axis_1: 3
think-diffrently-e-mc2.py : ['read_csv', 'read_csv', 'to_csv'] ['pandas', 'xgboost', 'numpy', 'csv'] []Dict:{'pandas': ['read_csv'], 'numpy': [], 'csv': []} axis_0: 0, axis_1: 0
optiver-lgb-and-te-baseline.py : ['info', 'read_csv', 'join', 'info', 'head', 'value_counts', 'value_counts', 'hist', 'unique', 'hist', 'query', 'read_csv', 'join', 'info', 'head', 'read_csv', 'join', 'info', 'head', 'join', 'info', 'info', 'read_parquet', 'join', 'astype', 'read_parquet', 'join', 'astype', 'info', 'head', 'tail', 'info', 'head', 'tail', 'merge', 'head', 'tail', 'join', 'diff', 'sum', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'join', 'merge', 'merge', 'sort_values', 'fillna', 'merge', 'sort_values', 'fillna', 'concat', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'merge', 'join', 'info', 'read_pickle', 'read_pickle', 'fillna', 'replace', 'merge', 'merge', 'astype', 'astype', 'head', 'sum', 'isna', 'sum', 'isna', 'info', 'sum', 'sum', 'copy', 'mean', 'dropna', 'hist', 'hist', 'info', 'unique', 'unique', 'query', 'query', 'info', 'to_csv', 'info', 'sort_values', 'to_csv', 'info', 'to_markdown', 'to_csv', 'info', 'head'] ['numpy', 'pandas', 'gc', 'pathlib', 'json', 'time', 'requests', 'glob', 'os', 'joblib', 'lightgbm', 'matplotlib.pyplot', 'matplotlib.style', 'seaborn', 'warnings'] ['tqdm', 'Pool', 'cpu_count', 'datetime', 'relativedelta', 'FR', 'model_selection', 'venn2', 'venn3', 'pyplot', 'ScalarFormatter', 'getLogger', 'INFO', 'FileHandler', 'Formatter', 'StreamHandler', 'r2_score']Dict:{'numpy': ['mean', 'diff', 'sum', 'unique', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'read_parquet', 'read_pickle', 'unique', 'merge'], 'gc': [], 'pathlib': [], 'tqdm': [], 'json': [], 'multiprocessing': [], 'time': [], 'requests': ['head'], 'datetime': ['replace'], 'dateutil': [], 'glob': [], 'os': ['replace'], 'sklearn': [], 'joblib': [], 'lightgbm': [], 'matplotlib': [], 'matplotlib_venn': [], 'seaborn': [], 'warnings': []} axis_0: 0, axis_1: 0
keras-nn-with-embeddings-for-cat-features-1-15.py : ['join', 'mean', 'groupby', 'isnull', 'apply', 'isnull', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'to_datetime', 'drop', 'sum', 'memory_usage', 'max', 'min', 'all', 'fillna', 'astype', 'fillna', 'sum', 'astype', 'astype', 'astype', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'array', 'read_csv', 'merge', 'transform', 'read_csv', 'merge', 'to_datetime', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'gc'] ['Model', 'load_model', 'Input', 'Dropout', 'Dense', 'Embedding', 'SpatialDropout1D', 'concatenate', 'BatchNormalization', 'Flatten', 'pad_sequences', 'text', 'sequence', 'Callback', 'backend', 'Model', 'mean_squared_error', 'optimizers', 'RMSprop', 'Adam', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau', 'LabelEncoder', 'KFold', 'StratifiedKFold', 'tqdm']Dict:{'numpy': ['mean', 'max', 'sum', 'all', 'min', 'array'], 'pandas': ['read_csv', 'isnull', 'array', 'merge', 'to_datetime'], 'os': [], 'keras': [], 'sklearn': [], 'gc': [], 'tqdm': []} axis_0: 1, axis_1: 0
tpsapr22-fe-pseudo-labels-bi-lstm.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'round', 'head', 'astype', 'shift', 'groupby', 'fillna', 'copy', 'isin', 'merge', 'reset_index', 'merge', 'concat', 'to_numpy', 'drop', 'drop', 'transform', 'transform', 'copy', 'unique', 'squeeze', 'squeeze', 'mean', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'warnings', 'matplotlib.pyplot', 'gc'] ['StandardScaler', '*', '*', '*', 'AUC', 'KFold', 'GroupKFold', 'roc_auc_score']Dict:{'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'numpy': ['mean', 'squeeze', 'round', 'unique', 'isin', 'copy'], 'warnings': [], '': [], 'sklearn': [], 'tensorflow': [], 'matplotlib': [], 'gc': []} axis_0: 0, axis_1: 2
porto-seguro-tutorial-simple-e2e-pipeline.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'describe', 'nunique', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'describe', 'sort_values', 'value_counts', 'reset_index', 'merge', 'drop', 'merge', 'drop', 'fillna', 'astype', 'concat', 'concat', 'concat', 'concat', 'head', 'max', 'max', 'unique', 'unique', 'max', 'apply', 'apply', 'astype', 'join', 'merge', 'merge', 'head', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'copy', 'to_csv', 'transform', 'transform', 'transform', 'copy', 'to_csv'] ['pandas', 'numpy', 'time'] ['StandardScaler', 'roc_auc_score', 'train_test_split', 'RandomForestClassifier', 'LogisticRegression', 'KNeighborsClassifier', 'check_output']Dict:{'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'numpy': ['unique', 'max', 'copy'], 'sklearn': [], 'time': [], 'subprocess': []} axis_0: 0, axis_1: 14
advance-data-preprocessing.py : ['read_csv', 'head', 'info', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'copy', 'items', 'drop', 'copy', 'sum', 'isnull', 'drop', 'value_counts', 'fillna', 'value_counts', 'info', 'copy', 'transform', 'info', 'copy', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'drop', 'isnull', 'info', 'concat', 'drop', 'head', 'info', 'copy', 'copy', 'unique', 'drop', 'items', 'map', 'head', 'info', 'agg', 'groupby', 'map', 'copy', 'head', 'value_counts'] ['pandas', 'numpy', 'matplotlib.pyplot', 'missingno'] ['KNNImputer', 'DecisionTreeRegressor', 'LabelEncoder', 'BaggingRegressor', 'DecisionTreeRegressor', 'LogisticRegression', 'accuracy_score', 'LabelEncoder', 'LogisticRegression', 'accuracy_score', 'LabelEncoder']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique'], 'numpy': ['info', 'sum', 'unique', 'copy'], 'matplotlib': [], 'missingno': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 0
extensive-data-exploration-modelling-python.py : ['mode', 'read_csv', 'read_csv', 'head', 'info', 'mean', 'isna', 'sort_values', 'skew', 'sort_values', 'skew', 'select_dtypes', 'skew', 'hist', 'describe', 'corr', 'select_dtypes', 'drop', 'sort_values', 'count', 'groupby', 'boxplot', 'count', 'groupby', 'boxplot', 'cut', 'concat', 'count', 'groupby', 'boxplot', 'count', 'groupby', 'boxplot', 'cut', 'concat', 'count', 'groupby', 'boxplot', 'count', 'groupby', 'boxplot', 'count', 'groupby', 'boxplot', 'describe', 'cut', 'concat', 'count', 'groupby', 'boxplot', 'sort_values', 'mean', 'groupby', 'count', 'groupby', 'reindex', 'boxplot', 'sort_values', 'mean', 'groupby', 'count', 'groupby', 'reindex', 'boxplot', 'sort_values', 'mean', 'groupby', 'sort_values', 'count', 'groupby', 'reindex', 'boxplot', 'sort_values', 'mean', 'groupby', 'sort_values', 'count', 'groupby', 'reindex', 'boxplot', 'sort_values', 'mean', 'groupby', 'sort_values', 'count', 'groupby', 'reindex', 'boxplot', 'read_csv', 'read_csv', 'copy', 'reset_index', 'concat', 'select_dtypes', 'drop', 'any', 'isna', 'fillna', 'fillna', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'astype', 'fillna', 'mean', 'fillna', 'astype', 'fillna', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'replace', 'astype', 'select_dtypes', 'copy', 'select_dtypes', 'get_dummies', 'concat', 'concat', 'reset_index', 'map', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'cut', 'astype', 'concat', 'concat', 'read_csv', 'read_csv', 'copy', 'notnull', 'copy', 'isnull', 'reset_index', 'drop', 'mean', 'mean', 'mean', 'mean', 'mean', 'select_dtypes', 'mean', 'drop', 'select_dtypes', 'mean', 'drop', 'select_dtypes', 'mean', 'drop', 'mean', 'drop', 'mean', 'drop', 'mean', 'copy', 'drop', 'skew', 'mean', 'copy', 'drop', 'skew', 'sort_values', 'copy', 'drop', 'copy', 'skew', 'describe', 'describe', 'min', 'max', 'describe', 'astype', 'drop', 'skew', 'describe', 'describe', 'corr', 'concat', 'corr', 'drop', 'skew', 'mean', 'mean', 'to_csv'] ['matplotlib.pyplot', 'matplotlib.cm', 'seaborn', 'pandas', 'numpy', 'os', 'sys', 'calendar', 'xgboost', 'lightgbm', 'warnings'] ['percentile', 'stats', 'skew', 'boxcox1p', 'StandardScaler', 'RobustScaler', 'LabelEncoder', 'OneHotEncoder', 'SimpleImputer', 'DummyRegressor', 'ColumnTransformer', 'Pipeline', 'make_pipeline', 'cross_val_score', 'cross_validate', 'GridSearchCV', 'KFold', 'PCA', 'mean_squared_log_error', 'make_scorer', 'neg_mean_squared_error_scorer', 'LinearRegression', 'ElasticNet', 'Lasso', 'Ridge', 'RidgeCV', 'SVR', 'KernelRidge', 'RandomForestRegressor', 'GradientBoostingRegressor']Dict:{'matplotlib': [], 'seaborn': ['boxplot'], 'pandas': ['isna', 'read_csv', 'isnull', 'cut', 'concat', 'get_dummies', 'notnull'], 'numpy': [], 'scipy': [], 'os,': [], 'sys': [], 'calendar': [], 'sklearn': ['apply'], 'xgboost': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 22
simple-version-predict-3-135-county-one-by-one.py : ['mean', 'rolling', 'join', 'mean', 'ewm', 'join', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'to_datetime', 'drop', 'pivot', 'mean', 'shift', 'pct_change', 'shift', 'groupby', 'bfill', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'shift', 'groupby', 'sum', 'abs', 'abs', 'abs', 'replace', 'mean', 'mean', 'fillna', 'fillna', 'keys', 'get', 'fillna', 'get', 'head'] ['pandas', 'matplotlib.pyplot', 'numpy', 'plotly.figure_factory', 'warnings', 'pandas', 'numpy', 'seaborn', 'xgboost', 'lightgbm'] ['tqdm', 'LinearRegression', 'ElasticNet', 'Lasso', 'Ridge', 'DecisionTreeRegressor', 'RandomForestRegressor', 'LabelEncoder', 'TimeSeriesSplit', 'mean_squared_error', 'TimeSeriesSplit']Dict:{'pandas': ['read_csv', 'concat', 'pivot', 'merge', 'to_datetime'], 'matplotlib': ['get'], 'numpy': ['mean', 'abs', 'sum'], 'plotly': [], 'warnings': [], 'seaborn': [], 'tqdm': [], 'sklearn': [], 'xgboost': [], 'lightgbm': []} axis_0: 1, axis_1: 1
feature-eng-clean-outlier-lgbm-with-optuna.py : ['read_csv', 'read_csv', 'read_csv', 'merge', 'unique', 'sample', 'isin', 'head', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'merge', 'head', 'head', 'drop', 'mean', 'head', 'sort_values', 'clip', 'mean', 'clip', 'to_csv'] ['warnings', 'os', 'gc', 're', 'random', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'optuna'] ['Counter', 'skew', 'kurtosis', 'tqdm', 'Word2Vec', 'LabelEncoder', 'KFold', 'StratifiedKFold', 'GroupKFold', 'train_test_split', 'TfidfVectorizer', 'TruncatedSVD', 'mean_squared_error']Dict:{'warnings': [], 'os': ['rename'], 'gc': [], 're': [], 'random': ['sample'], 'collections': ['items'], 'numpy': ['mean', 'max', 'abs', 'unique', 'clip', 'isin', 'std'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'gensim': [], 'sklearn': [], 'lightgbm': [], 'optuna': []} axis_0: 1, axis_1: 9
tps-may22-eda-gbdt.py : ['join', 'sort_values', 'nunique', 'head'] ['numpy', 'pandas', 'os'] []Dict:{'numpy': [], 'pandas': [], 'os': []} axis_0: 1, axis_1: 0
all-imputation-techniques-with-pros-and-cons.py : ['read_csv', 'read_csv', 'sum', 'sum', 'isna', 'sum', 'duplicated', 'sample', 'sample', 'mean', 'isnull', 'mean', 'isnull', 'dropna', 'copy', 'mean', 'isnull', 'fillna', 'unique', 'unique', 'count', 'groupby', 'mode', 'fillna', 'unique', 'copy', 'mean', 'std', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'copy', 'array'] ['numpy', 'pandas', 'os', 'seaborn', 'matplotlib.pyplot', 'warnings', 'json', 'random', 'sys', 'missingno', 'xgboost'] ['stats', 'enable_iterative_imputer', 'IterativeImputer', 'KNNImputer', 'MissingIndicator']Dict:{'numpy': ['mean', 'std', 'sum', 'unique', 'array', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'unique', 'array'], 'os': [], 'seaborn': [], 'matplotlib': [], 'scipy': ['mode'], 'warnings': [], 'json': [], 'random': ['sample'], 'sys': [], 'missingno': [], 'sklearn': [], 'xgboost': []} axis_0: 1, axis_1: 0
why-keras-is-better-than-pytorch.py : ['mean', 'mean', 'mean', 'transpose', 'array', 'applymap', 'array', 'array', 'array', 'read_json', 'read_json', 'max', 'sum', 'sum', '__init__', 'transpose', 'array', 'transpose', 'array', 'apply', 'eval', 'eval', 'iterrows', 'array', 'array', 'merge', 'concat', 'mean', 'isna', 'isna', 'rename', 'mean', 'iterrows', 'array', 'eval', 'reset_index', 'concat', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'random', 'torch', 'torch.nn', 'torch.nn.functional', 'os', 'copy', 'time', 'datetime'] ['Linear', 'LayerNorm', 'ReLU', 'Dropout', 'StratifiedKFold', 'tqdm', 'KMeans', 'StratifiedKFold', 'KFold', 'GroupKFold', 'Dataset', 'TensorDataset', 'DataLoader', 'RandomSampler', 'KMeans']Dict:{'numpy': ['mean', 'transpose', 'max', 'sum', 'array'], 'pandas': ['isna', 'eval', 'read_json', 'concat', 'array', 'merge'], 'random': [], 'torch': [], 'sklearn': [], 'tqdm': ['__init__'], 'os': ['rename'], 'copy': [], 'time,datetime': []} axis_0: 1, axis_1: 2
sales-predictions-feature-engineering-lgbm.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'sum', 'isna', 'sum', 'isna', 'boxplot', 'min', 'max', 'min', 'max', 'boxplot', 'min', 'max', 'median', 'unique', 'astype', 'map', 'apply', 'unique', 'sum', 'groupby', 'apply', 'sum', 'groupby', 'map', 'head', 'unique', 'unique', 'astype', 'apply', 'apply', 'sum', 'groupby', 'apply', 'map', 'head', 'to_datetime', 'drop', 'copy', 'max', 'concat', 'head', 'reset_index', 'drop_duplicates', 'apply', 'drop', 'head', 'unique', 'unique', 'unique', 'array', 'head', 'merge', 'merge', 'merge', 'merge', 'astype', 'astype', 'astype', 'head', 'rename', 'agg', 'groupby', 'astype', 'astype', 'sort_values', 'fillna', 'merge', 'head', 'min', 'max', 'clip', 'rename', 'agg', 'groupby', 'astype', 'merge', 'copy', 'fillna', 'merge', 'drop', 'transform', 'groupby', 'transform', 'groupby', 'to_pickle', 'info', 'read_pickle', 'drop', 'drop', 'drop', 'drop', 'clip', 'clip', 'clip', 'merge', 'assign', 'to_csv'] ['numpy', 'pandas', 'lightgbm', 'seaborn', 'matplotlib.pyplot', 'pickle'] ['LabelEncoder', 'mean_squared_error', 'monthrange', 'product']Dict:{'sklearn': [], 'calendar': [], 'itertools': [], 'numpy': ['median', 'max', 'sum', 'min', 'unique', 'clip', 'info', 'array', 'copy'], 'pandas': ['to_pickle', 'isna', 'read_csv', 'concat', 'read_pickle', 'unique', 'array', 'merge', 'to_datetime'], 'lightgbm': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'pickle': []} axis_0: 0, axis_1: 1
feature-engineering-eda-and-pycaret.py : ['read_csv', 'read_csv', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'any', 'isnull', 'astype', 'isnull', 'fillna', 'any', 'isnull', 'astype', 'isnull', 'fillna', 'head', 'unique', 'fillna', 'fillna', 'head', 'unique', 'get', 'get', 'get', 'get', 'head', 'unique', 'drop', 'drop', 'unique', 'astype', 'get_dummies', 'get_dummies', 'copy', 'transform', 'astype', 'iterrows', 'unique', 'transform', 'astype', 'drop', 'drop', 'drop', 'copy', 'copy', 'replace', 'replace', 'replace', 'drop', 'concat', 'copy', 'copy', 'drop', 'transform', 'copy', 'reset_index', 'sample', 'copy', 'copy', 'drop', 'pivot_table', 'copy', 'corr', 'corr', 'copy', 'corr', 'drop', 'copy', 'copy', 'drop', 'transform', 'transform', 'sum', 'transform', 'sum', 'drop', 'drop', 'copy', 'drop', 'unique', 'astype', 'drop', 'drop', 'copy', 'head', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'sklearn.preprocessing', 'numpy', 'pandas', 'graphviz'] ['colored', 'colored', 'IsolationForest', 'PCA', 'PCA', 'MinMaxScaler', 'QuantileTransformer', 'preprocessing', 'PCA', 'PCA', 'DecisionTreeClassifier', 'tree', '*', 'preprocessing']Dict:{'numpy': ['unique', 'sum', 'any', 'copy'], 'pandas': ['read_csv', 'isnull', 'pivot_table', 'concat', 'get_dummies', 'unique'], 'seaborn': [], 'matplotlib': ['get'], 'sklearn': [], 'termcolor': [], 'yellowbrick': [], 'graphviz': [], 'pycaret': []} axis_0: 0, axis_1: 6
titanic-advanced-eda.py : ['read_csv', 'read_csv', 'info', 'info', 'head', 'describe', 'sort_values', 'sum', 'isnull', 'count', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'agg', 'groupby', 'map', 'map', 'map', 'astype', 'describe', 'agg', 'groupby', 'agg', 'groupby', 'hist', 'agg', 'agg', 'isnull', 'map', 'value_counts', 'head', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'max', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby'] ['pandas', 'seaborn', 'matplotlib.pyplot'] []Dict:{'pandas': ['value_counts', 'read_csv', 'isnull'], 'seaborn': [], 'matplotlib': ['hist']} axis_0: 2, axis_1: 3
news-feature-engineering.py : ['replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'unique', 'unique', 'unique', 'keys', 'update', 'update', 'keys', 'update', 'map', 'map', 'map', 'count', 'groupby', 'agg', 'groupby', 'map', 'map', 'unique', 'map', 'map', 'apply', 'apply', 'map', 'set_index', 'merge', 'reset_index', 'keys', 'max', 'min', 'min', 'max', 'drop', 'drop', 'abs', 'drop', 'array', 'apply', 'apply', 'sum', 'groupby', 'sum', 'drop', 'map', 'head', 'reset_index', 'set_index', 'merge', 'reset_index', 'sum', 'groupby', 'set_index', 'merge', 'reset_index', 'groupby', 'set_index', 'mean', 'rolling', 'dropna', 'reset_index', 'concat', 'set_index', 'merge', 'reset_index', 'groupby', 'sum', 'groupby', 'set_index', 'mean', 'rolling', 'dropna', 'reset_index', 'concat', 'set_index', 'merge', 'reset_index', 'sum', 'groupby', 'mean', 'rolling', 'dropna', 'reset_index', 'concat', 'set_index', 'merge', 'reset_index', 'drop', 'drop', 'drop', 'sum', 'groupby', 'head', 'head', 'drop', 'tail', 'drop', 'count', 'groupby', 'unstack', 'apply', 'groupby', 'set_index'] ['pandas', 'sklearn.model_selection', 'sklearn.model_selection', 'lightgbm', 'numpy', 'itertools', 'datetime', 'nltk', 'plotly.offline', 'plotly.figure_factory', 'plotly.graph_objs', 'seaborn', 'matplotlib.pyplot', 'seaborn', 'gc', 'sys', 'multiprocessing', 'six', 'statsmodels.api', 'math'] ['literal_eval', 'TfidfVectorizer', 'stopwords', 'init_notebook_mode', 'iplot', 'ABCMeta', 'BaseEstimator', 'ClassifierMixin', 'lowess', 'twosigmanews', 'scatter_matrix']Dict:{'pandas': [], 'ast': [], 'sklearn': [], 'nltk': [], 'lightgbm': [], 'numpy': ['mean', 'max', 'abs', 'sum', 'min', 'unique', 'array'], 'itertools': ['count', 'groupby'], 'datetime': [], 'plotly': [], 'seaborn': [], 'matplotlib': [], 'gc': [], 'sys': [], 'multiprocessing': [], 'six': [], 'abc': [], 'statsmodels': [], 'math': [], 'kaggle': []} axis_0: 9, axis_1: 12
no-ml-just-statistical-analysis.py : ['read_csv', 'read_csv', 'read_csv', 'reset_index', 'concat', 'isnull', 'isnull', 'drop', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'head', 'head', 'count', 'head', 'count', 'count', 'count', 'count', 'value_counts', 'drop', 'head', 'value_counts', 'value_counts', 'groupby', 'head', 'value_counts', 'groupby', 'head', 'replace', 'read_csv', 'read_csv', 'reset_index', 'concat', 'tail', 'reset_index', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 're', 'math', 'collections'] ['pyplot']Dict:{'numpy': [], 'pandas': ['concat', 'value_counts', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 're': [], 'math': [], 'collections': []} axis_0: 0, axis_1: 2
ps-s3e18-eda-ensembles-tabpfn.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'reset_index', 'drop', 'any', 'any', 'isna', 'any', 'any', 'isna', 'any', 'any', 'isna', 'head', 'head', 'drop', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'boxplot', 'boxplot', 'astype', 'astype', 'transform', 'astype', 'astype', 'transform', 'concat', 'concat', 'drop', 'drop', 'assign', 'keys', 'agg', 'groupby', 'median', 'merge', 'fillna', 'transform', 'concat', 'copy', 'reset_index', 'drop', 'reset_index', 'reset_index', 'concat', 'transform', 'transform', 'fillna', 'concat', 'fillna', 'concat', 'transform', 'drop', 'drop', 'head', 'copy', 'array', 'array', 'keys', 'items', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'astype', 'ge', 'keys', 'items', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'astype', 'ge', 'mean', 'mean', 'mean', 'mean', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'reset_index', 'drop', 'sample', 'concat', 'copy', 'reset_index', 'drop', 'reset_index', 'reset_index', 'drop', 'drop', 'head', 'unique', 'transform', 'stack', 'mean', 'sum', 'sum', 'array', 'sum', 'mean', 'std', 'mean', 'std', 'array', 'array', 'array', 'array', 'to_csv', 'to_csv', 'copy', 'to_csv', 'copy', 'copy', 'to_csv', 'copy', 'copy', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'plotly.express', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'random', 'gc', 'seaborn', 'optuna', 'lightgbm', 'xgboost', 'warnings'] ['deepcopy', 'partial', 'combinations', 'RocCurveDisplay', 'confusion_matrix', 'ConfusionMatrixDisplay', 'BaseEstimator', 'TransformerMixin', 'train_test_split', 'StratifiedKFold', 'KFold', 'roc_auc_score', 'f1_score', 'precision_score', 'recall_score', 'cross_val_score', 'StandardScaler', 'MinMaxScaler', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'OneHotEncoder', 'FunctionTransformer', 'LabelEncoder', 'ColumnTransformer', 'RandomUnderSampler', 'enable_iterative_imputer', 'SimpleImputer', 'KNNImputer', 'IterativeImputer', 'PCA', 'NMF', 'Pipeline', 'make_pipeline', 'make_column_transformer', 'make_column_selector', 'EarlyStopping', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'BalancedRandomForestClassifier', 'NuSVC', 'SVC', 'LogisticRegressionCV', 'LogisticRegression', 'KNeighborsClassifier', 'LogisticRegression', 'MLPClassifier', 'GaussianProcessClassifier', 'RBF', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool', 'BaseEstimator', 'MLPClassifier', 'SimpleImputer', 'Pool', 'CatBoostClassifier', 'TabPFNClassifier', 'cross_val_score']Dict:{'numpy': ['mean', 'median', 'stack', 'any', 'sum', 'array', 'unique', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'array', 'merge'], 'plotly': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'random': ['sample'], 'os': [], 'copy': [], 'functools': [], 'itertools': [], 'gc': [], 'sklearn': [], 'category_encoders': [], 'imblearn': [], 'optuna': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'warnings': [], 'tabpfn': []} axis_0: 6, axis_1: 13
kor-eng-eda-ensemble-model.py : ['read_csv', 'read_csv', 'info', 'boxplot', 'boxplot', 'quantile', 'quantile', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'concat', 'round', 'fillna', 'median', 'fillna', 'median', 'apply', 'fillna', 'mean', 'apply', 'fillna', 'mean', 'fillna', 'mode', 'sort_values', 'sum', 'isnull', 'drop', 'drop', 'copy', 'drop', 'transform', 'concat', 'head', 'get_dummies', 'get_dummies', 'drop', 'drop', 'sort_values', 'copy', 'where', 'to_csv', 'where', 'drop', 'where', 'drop', 'read_csv', 'array', 'sum', 'apply', 'apply', 'head', 'astype', 'to_csv', 'head'] ['datetime', 'warnings', 'pandas', 'numpy', 'matplotlib.pyplot', 'lightgbm', 'seaborn', 'matplotlib.pyplot', 'xgboost'] ['train_test_split', 'scale', 'confusion_matrix', 'classification_report', 'precision_recall_fscore_support', 'accuracy_score', 'cohen_kappa_score', 'OrderedDict', 'LabelEncoder', 'OneHotEncoder', 'roc_auc_score', 'roc_curve', 'auc', 'QuantileTransformer', 'TargetEncoder', 'MinMaxScaler', 'LabelEncoder', 'StandardScaler', 'RobustScaler', 'roc_curve', 'auc', 'RandomForestClassifier', 'SVC']Dict:{'datetime': [], 'warnings': [], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'array'], 'numpy': ['mean', 'median', 'quantile', 'sum', 'where', 'round', 'info', 'array', 'copy'], 'matplotlib': ['boxplot'], 'lightgbm': [], 'seaborn': ['boxplot'], 'sklearn': [], 'collections': ['copy'], 'category_encoders': [], 'xgboost': []} axis_0: 3, axis_1: 4
permutation-importance-for-feature-selection-part2.py : ['sum', 'sum', 'sum', 'read_csv', 'query', 'join', 'reset_index', 'sort_values', 'apply', 'join', 'rolling', 'groupby', 'min', 'max', 'std', 'mean', 'apply', 'mean', 'abs', 'diff', 'apply', 'max', 'abs', 'apply', 'min', 'abs', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'replace', 'sum', 'sum', 'isna', 'fillna', 'read_feather', 'sort_values', 'round', 'clip', 'astype', 'astype', 'sort_values', 'update', 'round', 'clip', 'to_csv', 'mean', 'to_csv', 'mean', 'array', 'copy', 'rename', 'reset_index', 'to_csv', 'rename', 'reset_index', 'to_csv', 'rename', 'reset_index', 'to_csv', 'round', 'clip', 'round', 'clip', 'astype', 'to_csv'] ['gc', 'os', 'random', 'sys', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'plotly.express', 'plotly.figure_factory', 'lightgbm', 'xgboost', 'catboost', 'numba'] ['Path', 'tqdm', 'display', 'HTML', 'tools', 'subplots', 'preprocessing', 'KFold', 'contextmanager', 'perf_counter', 'signal', 'PermutationImportance', 'KFold', 'GroupKFold']Dict:{'gc': [], 'os': ['rename', 'replace'], 'pathlib': ['rename', 'replace'], 'random': [], 'sys': [], 'tqdm': ['update'], 'numpy': ['mean', 'max', 'abs', 'sum', 'array', 'round', 'min', 'clip', 'diff', 'std', 'copy'], 'pandas': ['isna', 'array', 'read_feather', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'IPython': [], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'contextlib': [], 'time': [], 'numba': [], 'scipy': [], 'eli5': []} axis_0: 2, axis_1: 1
different-clustering-techniques-and-algorithms.py : ['read_csv', 'read_csv', 'corr', 'sample'] ['pandas', 'seaborn', 'matplotlib.pyplot', 'matplotlib.pyplot', 'numpy', 'matplotlib.pyplot', 'skfuzzy'] ['unique', 'where', 'pyplot', 'make_classification', 'KMeans', 'unique', 'where', 'pyplot', 'make_classification', 'DBSCAN', 'unique', 'where', 'pyplot', 'make_classification', 'GaussianMixture', 'make_blobs', 'Birch', 'unique', 'where', 'pyplot', 'make_classification', 'AffinityPropagation', 'unique', 'where', 'pyplot', 'make_classification', 'MeanShift', 'unique', 'where', 'pyplot', 'make_classification', 'OPTICS', 'unique', 'where', 'pyplot', 'make_classification', 'AgglomerativeClustering', 'division', 'print_function']Dict:{'pandas': ['read_csv'], 'seaborn': [], 'matplotlib': [], 'numpy': [], 'sklearn': [], '__future__': [], 'skfuzzy': []} axis_0: 0, axis_1: 0
jpx-macro-data-from-public-apis.py : ['min', 'to_datetime', 'get', 'get', 'get', 'get', 'get', 'get', 'astype', 'set_index', 'to_datetime', 'get', 'get', 'get', 'astype', 'set_index', 'to_datetime', 'diff', 'diff', 'get', 'get', 'get', 'astype', 'set_index', 'to_datetime', 'mean', 'rolling', 'mean', 'rolling', 'read_csv', 'astype', 'replace', 'set_index', 'astype', 'replace', 'astype', 'read_excel', 'date_range', 'unique', 'set_index', 'rename', 'get', 'get', 'get', 'map', 'get', 'read_csv', 'to_datetime', 'astype', 'astype', 'rename', 'set_index', 'mean', 'rolling', 'diff', 'merge', 'to_csv', 'mean', 'std', 'ffill', 'fillna', 'ffill', 'to_datetime', 'to_datetime', 'date_range', 'concat', 'to_csv', 'fillna', 'ffill'] ['requests', 'numpy', 'pandas', 'matplotlib.pyplot', 'dbnomics', 'urllib', 'requests', 'csv', 'json', 'xlrd', 'zipfile', 'requests', 'functools', 'pandas', 'io', 'os', 'pandas'] ['ThreadPoolExecutor', 'tqdm', 'pprint', 'reduce', 'VAR', 'date']Dict:{'requests': ['get'], 'numpy': ['mean', 'min', 'unique', 'diff', 'std'], 'pandas': ['read_csv', 'date_range', 'concat', 'unique', 'read_excel', 'merge', 'to_datetime'], 'matplotlib': ['get'], 'dbnomics': [], 'urllib': [], 'csv': [], 'json': [], 'xlrd': [], 'zipfile': [], 'functools': [], 'concurrent': ['map'], 'tqdm': [], 'io': [], 'os': ['rename', 'replace'], 'pprint': [], 'statsmodels': [], 'datetime': ['min', 'replace']} axis_0: 0, axis_1: 0
predicting-house-prices-with-regression.py : ['read_csv', 'read_csv', 'head', 'describe', 'keys', 'corr', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'concat', 'sum', 'sum', 'sum', 'fillna', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'concat', 'sum', 'sum', 'sum', 'drop', 'drop', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'median', 'fillna', 'median', 'count', 'fillna', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'concat', 'sum', 'head', 'head', 'drop', 'drop', 'mean', 'mean', 'mean', 'mean', 'mean', 'round', 'sort_values', 'sort_values', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'warnings'] ['pyplot', 'Imputer', 'LinearRegression', 'Lasso', 'Ridge', 'DecisionTreeRegressor', 'RandomForestRegressor', 'r2_score', 'mean_squared_error', 'GridSearchCV', 'cross_val_score', 'KFold', 'train_test_split']Dict:{'numpy': ['mean', 'median', 'round', 'sum'], 'pandas': ['concat', 'read_csv', 'isnull'], 'seaborn': [], 'matplotlib': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 12
tps-01-22-with-autokeras.py : ['join', 'join', 'join', 'mode', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'value_counts', 'sum', 'groupby', 'mean', 'groupby', 'copy', 'astype', 'pop', 'head', 'head', 'pop', 'pop', 'head', 'head', 'concat', 'get_dummies', 'join', 'join', 'concat', 'pop', 'pop', 'head', 'head', 'astype', 'pop', 'pop', 'head', 'mean', 'mean', 'abs', 'abs', 'abs', 'mode', 'mode', 'mode', 'to_csv', 'head'] ['numpy', 'pandas', 'time', 'os', 'matplotlib.pyplot', 'tensorflow', 'autokeras'] ['TimeSeriesSplit', 'KFold', 'train_test_split']Dict:{'numpy': ['mean', 'abs', 'sum', 'copy'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'value_counts'], 'time': [], 'os': [], 'matplotlib': [], 'sklearn': [], 'tensorflow': ['abs', 'concat']} axis_0: 1, axis_1: 1
s3e26-xgbclassifer.py : ['drop', 'read_csv', 'read_csv', 'drop', 'read_csv', 'read_csv', 'reset_index', 'concat', 'drop', 'describe', 'fillna', 'nunique', 'astype', 'value_counts', 'sum', 'corr', 'corr', 'sample', 'copy', 'copy', 'sum', 'isna', 'mean', 'isnull', 'mean', 'isnull', 'concat', 'isnull', 'concat', 'drop', 'reset_index', 'fillna', 'copy', 'copy', 'drop', 'drop', 'drop', 'astype', 'array', 'array', 'sum', 'isna', 'mean', 'isnull', 'mean', 'isnull', 'concat', 'copy', 'drop', 'concat', 'reset_index', 'fillna', 'mean', 'copy', 'copy', 'drop', 'drop', 'drop', 'items', 'array', 'array', 'dropna', 'dropna', 'items', 'astype', 'astype', 'transform', 'astype', 'drop', 'astype', 'transform', 'drop', 'astype', 'astype', 'cut', 'sum', 'copy', 'apply', 'join', 'astype', 'copy', 'apply', 'join', 'astype', 'astype', 'transform', 'mean', 'astype', 'astype', 'copy', 'transform', 'transform', 'copy', 'mean', 'std', 'any', 'abs', 'reset_index', 'transform', 'round', 'sum', 'round', 'to_csv', 'to_csv', 'mean', 'min', 'min', 'max', 'max', 'boxplot', 'boxplot', 'concat', 'describe', 'describe', 'concat', 'array', 'nlargest', 'nlargest', 'head', 'read_csv', 'read_csv', 'read_csv', 'mean', 'groupby', 'concat', 'fillna', 'div', 'sum', 'reset_index', 'to_csv', 'head'] ['sys', 'lightgbm', 'matplotlib.pyplot', 'numpy', 'optuna', 'pandas', 'plotly.express', 'seaborn', 'xgboost'] ['CatBoostClassifier', 'CatBoostRegressor', 'RandomOverSampler', 'BaseEstimator', 'ClassifierMixin', 'TransformerMixin', 'PCA', 'RandomForestClassifier', 'VotingClassifier', 'LogisticRegression', 'TSNE', 'confusion_matrix', 'ConfusionMatrixDisplay', 'log_loss', 'make_scorer', 'mean_squared_error', 'GridSearchCV', 'cross_val_score', 'KFold', 'StratifiedKFold', 'GroupKFold', 'RepeatedStratifiedKFold', 'train_test_split', 'MultinomialNB', 'CategoricalNB', 'GaussianNB', 'KNeighborsClassifier', 'make_pipeline', 'Pipeline', 'LabelEncoder', 'OrdinalEncoder', 'OneHotEncoder', 'StandardScaler', 'SVC', 'DecisionTreeClassifier', 'tqdm', 'plot_importance', 'ProfileReport']Dict:{'sys': [], 'catboost': [], 'imblearn': [], 'lightgbm': [], 'matplotlib': ['boxplot'], 'numpy': ['mean', 'any', 'max', 'abs', 'sum', 'array', 'round', 'min', 'std', 'copy'], 'optuna': [], 'pandas': ['isna', 'read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'array'], 'plotly': [], 'seaborn': ['boxplot'], 'sklearn': ['apply'], 'tqdm': [], 'xgboost': [], 'ydata_profiling': []} axis_0: 3, axis_1: 21
godaddy-mixing-technique.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'head', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'drop', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'tail', 'unique', 'reset_index', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'head', 'unique', 'apply', 'transform', 'transform', 'transform', 'transform', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'reset_index', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'tail', 'to_dict', 'set_index', 'copy', 'map', 'read_csv', 'concat', 'fillna', 'drop', 'fillna', 'read_csv', 'astype', 'head', 'read_csv', 'astype', 'head', 'apply', 'head', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'map', 'map', 'head', 'drop', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'os', 'reverse_geocoder', 'lightgbm', 'xgboost', 'catboost', 'lightgbm', 'xgboost', 'catboost'] ['LabelEncoder', 'PCA', 'KMeans', 'haversine', 'UMAP', 'tqdm', 'BaseEstimator', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'os': [], 'sklearn': [], 'haversine': [], 'umap': [], 'tqdm': [], 'reverse_geocoder': []} axis_0: 0, axis_1: 4
house-price-prediction.py : ['join', 'read_csv', 'read_csv', 'head', 'drop', 'drop', 'mean', 'median', 'boxplot', 'skew', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'tail', 'sort_values', 'tail', 'sort_values', 'reset_index', 'concat', 'drop', 'mean', 'isnull', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'corr', 'head', 'sort_values', 'head', 'sort_values', 'corr', 'boxplot', 'reset_index', 'sort_values', 'value_counts', 'reset_index', 'drop', 'copy', 'reset_index', 'concat', 'apply', 'astype', 'astype', 'tail', 'sort_values', 'drop', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'transform', 'groupby', 'fillna', 'mode', 'transform', 'groupby', 'fillna', 'median', 'select_dtypes', 'select_dtypes', 'fillna', 'fillna', 'sum', 'sum', 'isnull', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'select_dtypes', 'sort_values', 'apply', 'skew', 'head', 'select_dtypes', 'sort_values', 'apply', 'skew', 'head', 'reset_index', 'get_dummies', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib.patches', 'matplotlib.gridspec', 'seaborn', 'warnings', 'math', 'sklearn.model_selection', 'sklearn.metrics', 'missingno', 'xgboost'] ['stats', 'mean_squared_error', 'cross_val_score', 'GridSearchCV', 'KFold', 'RandomizedSearchCV', 'train_test_split', 'skew', 'boxcox1p', 'boxcox_normmax', 'train_test_split', 'mean_squared_error', 'mean_absolute_error', 'Lasso', 'Ridge']Dict:{'numpy': ['mean', 'median', 'sum', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'os': [], 'matplotlib': ['copy'], 'scipy': [], 'seaborn': ['boxplot'], 'warnings': [], 'sklearn': [], 'math': [], 'missingno': [], 'xgboost': []} axis_0: 0, axis_1: 0
mlp-and-fe.py : [] ['numpy', 'pandas', 'os'] ['urlretrieve']Dict:{'numpy': [], 'pandas': [], 'os': [], 'urllib': []} axis_0: 0, axis_1: 0
amex-lgbm-features-eng.py : ['read_pickle', 'set_index', 'read_csv', 'sort_values', 'concat', 'apply', 'sum', 'cumsum', 'sum', 'sum', 'sort_values', 'concat', 'apply', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'rename', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'rename', 'rename', 'reset_index', 'pivot', 'mean', 'mean', 'sort_values', 'median', 'boxplot', 'array', 'sort_values', 'median', 'head', 'sort_values', 'median', 'transpose', 'transpose', 'sum', 'groupby', 'isin', 'boxplot', 'array', 'astype', 'read_pickle', 'unique', 'isin', 'array', 'unique', 'read_csv', 'set_index', 'to_csv'] ['pandas', 'numpy', 'os', 'gc', 'pickle', 'time', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings'] ['datetime', 'StratifiedKFold']Dict:{'pandas': ['read_csv', 'concat', 'read_pickle', 'unique', 'array', 'pivot'], 'numpy': ['transpose', 'mean', 'median', 'sum', 'where', 'unique', 'isin', 'array', 'cumsum'], 'os': ['rename'], 'gc': [], 'pickle': [], 'time': [], 'datetime': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'lightgbm': [], 'warnings': [], 'sklearn': [], '=': [], '[]': [], 'pd': [], 'columns=train_data': []} axis_0: 5, axis_1: 1
brewed-tpot-for-nyc-with-love-lb0-37.py : ['read_csv', 'read_csv', 'head', 'describe', 'reset_index', 'reset_index', 'aggregate', 'groupby', 'quantile', 'sum', 'isnull', 'sum', 'isnull', 'to_datetime', 'to_datetime', 'to_datetime', 'map', 'abs', 'describe', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'abs', 'abs', 'abs', 'abs', 'min', 'min', 'round', 'round', 'reset_index', 'mean', 'groupby', 'reset_index', 'count', 'groupby', 'merge', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'mean', 'groupby', 'merge', 'merge', 'reset_index', 'mean', 'groupby', 'reset_index', 'count', 'groupby', 'merge', 'join', 'join', 'merge', 'merge', 'concat', 'round', 'round', 'sort_index', 'set_index', 'count', 'rolling', 'isnull', 'merge', 'merge', 'rename', 'reset_index', 'shift', 'set_index', 'reset_index', 'drop', 'mean', 'rolling', 'groupby', 'set_index', 'reset_index', 'agg', 'groupby', 'set_index', 'fillna', 'merge', 'fillna', 'merge', 'concat', 'rename', 'reset_index', 'shift', 'set_index', 'reset_index', 'drop', 'mean', 'rolling', 'groupby', 'set_index', 'reset_index', 'agg', 'groupby', 'set_index', 'fillna', 'merge', 'fillna', 'merge', 'read_csv', 'read_csv', 'read_csv', 'concat', 'merge', 'merge', 'count', 'round', 'round', 'round', 'round', 'round', 'mean', 'round', 'mean', 'abs', 'abs', 'abs', 'sort_values', 'tail', 'to_csv', 'head'] ['os', 'xgboost', 'numpy', 'os', 'pandas', 'matplotlib.pyplot', 'seaborn', 'datetime'] ['haversine', 'check_output', 'PCA', 'MiniBatchKMeans', 'TPOTRegressor', 'train_test_split', 'KFold']Dict:{'os': ['rename'], 'xgboost': [], 'numpy': ['mean', 'quantile', 'abs', 'sum', 'round', 'min'], 'pandas': ['read_csv', 'isnull', 'concat', 'merge', 'to_datetime'], 'matplotlib': [], 'seaborn': [], 'haversine': [], 'datetime': [], 'subprocess': [], 'sklearn': [], 'tpot': []} axis_0: 6, axis_1: 2
house-prices-1st-approach-to-data-science-process.py : ['read_csv', 'tail', 'select_dtypes', 'select_dtypes', 'round', 'describe', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'describe', 'select_dtypes', 'round', 'skew', 'round', 'skew', 'copy', 'drop', 'select_dtypes', 'dropna', 'boxplot', 'corr', 'head', 'sort_values', 'select_dtypes', 'head', 'sort_values', 'sum', 'isna', 'select_dtypes', 'boxplot', 'boxplot', 'head', 'sort_values', 'sum', 'isna', 'copy', 'fillna', 'fillna', 'head', 'sort_values', 'sum', 'isna', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'rename', 'corr', 'drop', 'get_dummies', 'transform', 'round', 'sort_values', 'round', 'mean', 'round', 'std', 'round', 'mean', 'round', 'std', 'round', 'mean', 'round', 'std', 'round', 'mean', 'round', 'std', 'read_csv', 'copy', 'fillna', 'fillna', 'drop', 'get_dummies', 'align', 'transform', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['StandardScaler', 'SimpleImputer', 'train_test_split', 'mean_absolute_error', 'Lasso', 'LinearRegression', 'Ridge', 'ElasticNet', 'KNeighborsRegressor', 'SVR', 'RandomForestRegressor', 'GradientBoostingRegressor', 'AdaBoostRegressor', 'DecisionTreeRegressor', 'XGBRegressor', 'cross_val_score', 'GridSearchCV']Dict:{'pandas': ['isna', 'get_dummies', 'read_csv'], 'numpy': ['mean', 'sum', 'round', 'std', 'copy'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': ['transform'], 'xgboost': []} axis_0: 0, axis_1: 4
moa-pytorch-feature-engineering-0-01846.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'transform', 'transform', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'copy', 'copy', 'concat', 'get_dummies', 'get_dummies', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'merge', 'reset_index', 'reset_index', 'drop', 'drop', 'drop', 'copy', 'astype', 'eval', 'eval', '__init__', 'sum', 'mean', '__init__', 'get_dummies', 'reset_index', 'reset_index', 'fillna', 'merge', 'drop', 'fillna', 'merge', 'drop', 'to_csv'] ['sys', 'numpy', 'random', 'pandas', 'matplotlib.pyplot', 'os', 'copy', 'seaborn', 'torch', 'torch.nn', 'torch.nn.functional', 'torch.optim', 'warnings', 'torch', 'torch.nn.functional'] ['MultilabelStratifiedKFold', 'preprocessing', 'log_loss', 'StandardScaler', 'PCA', 'QuantileTransformer', 'VarianceThreshold', 'KMeans', '_WeightedLoss']Dict:{'sys': [], 'iterstrat': [], 'numpy': ['mean', 'std', 'sum', 'copy'], 'random': [], 'pandas': ['read_csv', 'eval', 'concat', 'get_dummies', 'merge'], 'matplotlib': [], 'os': [], 'copy': ['copy'], 'seaborn': [], 'sklearn': [], 'torch': [], 'warnings': []} axis_0: 0, axis_1: 9
lightgbm-eda-feature-engineering.py : ['join', 'read_csv', 'read_csv', 'concat', 'head', 'copy', 'pop', 'copy', 'value_counts', 'astype', 'apply', 'copy', 'value_counts', 'astype', 'apply', 'unstack', 'groupby', 'copy', 'copy', 'sum', 'copy', 'mean', 'copy', 'sum', 'copy', 'sum', 'copy', 'sum', 'copy', 'sum', 'copy', 'sum', 'copy', 'copy', 'copy', 'pop', 'astype', 'fillna', 'max', 'fillna', 'fillna', 'copy', 'astype', 'fillna', 'copy', 'fillna', 'value_counts', 'map', 'pop', 'info', 'unique', 'nunique', 'copy', 'head', 'copy', 'head', 'copy', 'drop', 'copy', 'info', 'mean', 'isna', 'sum', 'isnull', 'value_counts', 'copy', 'select_dtypes', 'select_dtypes', 'astype', 'astype', 'astype', 'info', 'transform', 'astype', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn'] ['SimpleImputer', 'Pipeline', 'OneHotEncoder', 'StandardScaler', 'ColumnTransformer', 'train_test_split', 'accuracy_score', 'LGBMClassifier', 'train_test_split', 'GridSearchCV', 'StratifiedKFold', 'accuracy_score']Dict:{'numpy': ['mean', 'max', 'sum', 'unique', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'unique'], 'os': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'lightgbm': []} axis_0: 2, axis_1: 7
start-here-a-gentle-introduction.py : ['read_csv', 'head', 'read_csv', 'head', 'value_counts', 'hist', 'astype', 'sum', 'isnull', 'sum', 'isnull', 'concat', 'rename', 'round', 'sort_values', 'head', 'value_counts', 'apply', 'select_dtypes', 'nunique', 'unique', 'transform', 'transform', 'get_dummies', 'get_dummies', 'align', 'describe', 'describe', 'hist', 'mean', 'mean', 'replace', 'hist', 'replace', 'sum', 'sort_values', 'corr', 'tail', 'head', 'corr', 'hist', 'cut', 'head', 'mean', 'groupby', 'astype', 'corr', 'copy', 'drop', 'dropna', 'drop', 'transform', 'transform', 'transform', 'sort_values', 'corr', 'head', 'tail', 'merge', 'merge', 'align', 'copy', 'copy', 'drop', 'copy', 'copy', 'transform', 'transform', 'transform', 'transform', 'head', 'to_csv', 'to_csv', 'transform', 'transform', 'to_csv', 'drop', 'transform', 'transform', 'to_csv', 'reset_index', 'sort_values', 'sum', 'head', 'head', 'drop', 'drop', 'get_dummies', 'get_dummies', 'align', 'array', 'astype', 'transform', 'array', 'astype', 'array', 'array', 'mean', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'warnings', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'gc'] ['LabelEncoder', 'Imputer', 'PolynomialFeatures', 'MinMaxScaler', 'Imputer', 'LogisticRegression', 'RandomForestClassifier', 'KFold', 'roc_auc_score']Dict:{'numpy': ['mean', 'sum', 'round', 'unique', 'array', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'get_dummies', 'unique', 'array', 'merge'], 'sklearn': [], 'os': ['rename', 'replace'], 'warnings': [], 'matplotlib': ['hist'], 'seaborn': [], 'lightgbm': [], 'gc': []} axis_0: 0, axis_1: 1
titanic-feature-engineering-based.py : ['read_csv', 'info', 'drop', 'mean', 'groupby', 'sample', 'apply', 'replace', 'unique', 'value_counts', 'apply', 'map', 'map', 'drop', 'sample', 'apply', 'replace', 'replace', 'apply', 'value_counts', 'apply', 'map', 'apply', 'fillna', 'isnull', 'map', 'apply', 'drop', 'fillna', 'map', 'apply', 'isnull', 'isnull', 'drop', 'isnull', 'drop', 'info', 'concat', 'map', 'info', 'drop', 'read_csv', 'info', 'drop', 'apply', 'replace', 'apply', 'map', 'map', 'apply', 'replace', 'replace', 'apply', 'apply', 'map', 'apply', 'fillna', 'map', 'map', 'apply', 'fillna', 'map', 'drop', 'read_csv', 'to_csv'] ['pandas', 'seaborn', 'numpy', 'warnings'] ['pyplot', 'DecisionTreeClassifier', 'GradientBoostingClassifier', 'RandomForestClassifier', 'accuracy_score', 'train_test_split', 'GridSearchCV']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique'], 'seaborn': [], 'matplotlib': [], 'numpy': ['mean', 'info', 'unique'], 'warnings': [], 'sklearn': []} axis_0: 1, axis_1: 8
elo-stack-with-goss-boosting.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'get_dummies', 'read_csv', 'read_csv', 'info', 'value_counts', 'mean', 'groupby', 'map', 'map', 'agg', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'read_csv', 'fillna', 'fillna', 'fillna', 'replace', 'replace', 'apply', 'map', 'map', 'map', 'to_datetime', 'astype', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'merge', 'merge', 'to_datetime', 'to_datetime', 'astype', 'to_datetime', 'to_datetime', 'astype', 'head', 'agg', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'read_csv', 'fillna', 'fillna', 'fillna', 'replace', 'replace', 'apply', 'map', 'map', 'map', 'to_datetime', 'astype', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'merge', 'merge', 'to_datetime', 'to_datetime', 'astype', 'to_datetime', 'to_datetime', 'astype', 'head', 'drop', 'drop', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'transpose', 'transpose', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'time', 'warnings', 'gc', 'os', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'datetime', 'lightgbm'] ['urllib', 'norm', 'skew', 'StandardScaler', 'shuffle', 'Pipeline', 'FeatureUnion', 'Lasso', 'mean_squared_log_error', 'mean_squared_error', 'r2_score', 'mean_absolute_error', 'train_test_split', 'metrics', 'confusion_matrix', 'reciprocal', 'uniform', 'StratifiedKFold', 'RepeatedKFold', 'KFold', 'cross_val_score', 'cross_val_predict', 'cross_validate', 'GridSearchCV', 'RandomizedSearchCV', 'OneHotEncoder', 'LabelEncoder', 'feature_selection', 'model_selection', 'metrics', 'BaseEstimator', 'TransformerMixin', 'check_array', 'sparse', 'BayesianRidge']Dict:{'numpy': ['transpose', 'mean', 'max', 'sum', 'min', 'isin', 'info'], 'pandas': ['read_csv', 'concat', 'value_counts', 'get_dummies', 'merge', 'to_datetime'], 'os': ['replace'], 'time': [], 'warnings': [], 'gc': [], 'six': [], 'matplotlib': [], 'seaborn': [], 'datetime': [], 'scipy': [], 'sklearn': [], 'lightgbm': []} axis_0: 2, axis_1: 0
eda-feature-engineering-lgbm.py : ['read_csv', 'read_csv', 'head', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'isnull', 'notnull', 'value_counts', 'dropna', 'isnull', 'value_counts', 'dropna', 'describe', 'notnull', 'describe', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'groupby', 'mode', 'astype', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'concat', 'sum', 'groupby', 'reset_index', 'sort_values', 'boxplot', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'to_numeric', 'max', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'replace', 'fillna', 'agg', 'groupby', 'drop', 'replace', 'fillna', 'fillna', 'drop', 'array', 'sort_values', 'astype', 'round', 'mean', 'array', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'matplotlib.gridspec', 'seaborn', 'sklearn', 'missingno', 'xgboost', 'xgboost', 'lightgbm'] ['RandomForestClassifier', 'StandardScaler', 'train_test_split', 'SMOTETomek', 'StratifiedKFold', 'compute_class_weight', 'compute_sample_weight', 'f1_score', 'VotingClassifier']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'to_numeric', 'notnull', 'array'], 'numpy': ['mean', 'max', 'sum', 'round', 'array'], 'matplotlib': [], 'seaborn': ['boxplot'], 'sklearn': [], 'missingno': [], 'xgboost': [], '=': [], 'df_imp': [], 'imblearn': [], 'lightgbm': []} axis_0: 1, axis_1: 5
feature-engineering-house-price-prediction.py : ['read_csv', 'read_csv', 'copy', 'copy', 'drop', 'sum', 'unique', 'sum', 'isna', 'sum', 'isna', 'fillna', 'median', 'fillna', 'isnull', 'where', 'where', 'count', 'groupby', 'where', 'isin', 'astype', 'info', 'drop', 'head'] ['pandas', 'numpy', 'seaborn', 'matplotlib', 'matplotlib.pyplot'] ['LabelEncoder', 'StandardScaler']Dict:{'pandas': ['isna', 'unique', 'read_csv', 'isnull'], 'numpy': ['median', 'sum', 'where', 'unique', 'isin', 'info', 'copy'], 'seaborn': [], 'matplotlib': [], 'sklearn': []} axis_0: 0, axis_1: 1
feature-engineering-hacks-for-better-models.py : ['read_csv', 'read_csv', 'copy', 'describe', 'boxplot', 'quantile', 'quantile', 'any', 'any', 'quantile', 'quantile', 'any', 'nunique', 'nunique', 'quantile', 'quantile', 'min', 'max', 'to_markdown', 'astype', 'head', 'describe', 'copy', 'quantile', 'quantile', 'head', 'describe', 'select_dtypes', 'sum', 'isnull', 'head', 'describe', 'drop', 'to_markdown', 'to_markdown', 'to_markdown', 'head', 'to_markdown', 'sum', 'isnull', 'to_markdown', 'astype', 'describe', 'any', 'isnull', 'sum', 'isnull', 'sum', 'notnull', 'sum', 'sum', 'isnull', 'head', 'any', 'isnull', 'head', 'all', 'notnull', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'to_markdown', 'concat', 'round', 'sum', 'sum', 'isnull', 'dropna', 'copy', 'sum', 'isnull', 'fillna', 'mean', 'sum', 'isnull', 'fillna', 'median', 'sum', 'isnull', 'fillna', 'copy', 'head', 'apply', 'fillna', 'mean', 'sum', 'isnull', 'apply', 'unique', 'fillna', 'mode', 'sum', 'isnull', 'mode', 'fillna', 'sum', 'isnull', 'isnull', 'mean', 'groupby', 'isnull', 'mean', 'groupby', 'sum', 'isnull', 'copy', 'get_dummies', 'head', 'head', 'head', 'head', 'head', 'isnull', 'head', 'isnull', 'copy', 'boxplot', 'copy', 'where', 'isnull', 'mean', 'groupby', 'count', 'groupby', 'to_markdown', 'copy', 'head', 'copy', 'nunique', 'head', 'head', 'copy', 'value_counts', 'head', 'get_dummies', 'head', 'get_dummies', 'head', 'get_dummies', 'get_dummies', 'nunique', 'head', 'head', 'value_counts', 'value_counts', 'value_counts', 'to_markdown', 'value_counts', 'mean', 'groupby', 'value_counts', 'value_counts', 'value_counts', 'mean', 'groupby', 'to_markdown', 'copy', 'any', 'value_counts', 'value_counts', 'where', 'isin', 'head', 'head', 'head', 'describe', 'head', 'describe', 'hist', 'qcut', 'head', 'copy', 'astype', 'notnull', 'head', 'agg', 'groupby', 'sum', 'sum', 'agg', 'groupby', 'sum', 'sum', 'copy', 'apply', 'apply', 'agg', 'groupby', 'head', 'agg', 'groupby', 'read_csv', 'head', 'info', 'to_datetime', 'head', 'copy', 'head', 'head'] ['numpy', 'pandas', 'seaborn', 'missingno', 'warnings'] ['pyplot', 'date', 'accuracy_score', 'train_test_split', 'LocalOutlierFactor', 'MinMaxScaler', 'LabelEncoder', 'StandardScaler', 'RobustScaler', 'KNNImputer', 'proportions_ztest']Dict:{'numpy': ['mean', 'median', 'any', 'quantile', 'max', 'sum', 'all', 'where', 'round', 'min', 'unique', 'isin', 'info', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull', 'qcut', 'to_datetime'], 'seaborn': ['boxplot'], 'matplotlib': [], 'missingno': [], 'datetime': ['min', 'max'], 'sklearn': [], 'warnings': [], 'statsmodels': []} axis_0: 3, axis_1: 3
titanic-top-score-one-line-of-the-prediction.py : ['set_index', 'read_csv', 'set_index', 'read_csv', 'concat', 'groupby', 'transform', 'count', 'fillna', 'mask', 'transform', 'sum', 'fillna', 'mask', 'fillna', 'replace', 'concat', 'fillna', 'replace', 'to_csv', 'reset_index', 'astype', 'set_index', 'read_csv', 'set_index', 'read_csv', 'concat', 'groupby', 'transform', 'count', 'fillna', 'mask', 'transform', 'sum', 'fillna', 'mask', 'fillna', 'replace', 'concat', 'fillna', 'replace', 'head', 'astype', 'mean', 'std', 'astype', 'mean', 'std', 'to_csv', 'reset_index'] ['pandas', 'numpy', 'pandas', 'numpy', 'graphviz', 'warnings'] ['GridSearchCV', 'DecisionTreeClassifier', 'export_graphviz']Dict:{'pandas': ['concat', 'read_csv'], 'numpy': ['mean', 'std', 'sum'], 'graphviz': [], 'sklearn': [], 'warnings': []} axis_0: 6, axis_1: 2
smoker-status-oof-preds-lgbm-catboost-xgb.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'head', 'describe', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'head', 'corr', 'corr', 'nunique', 'nunique', 'boxplot', 'drop', 'mean', 'mean', 'mean', 'mean', 'query', 'astype', 'copy', 'query', 'astype', 'concat', 'drop', 'mean', 'array', 'mean', 'array', 'mean', 'array', 'sort_values', 'reset_index', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'warnings', 'os', 'matplotlib.pyplot', 'seaborn', 'optuna', 'imblearn'] ['CatBoostClassifier', 'Pool', 'XGBClassifier', 'EarlyStopping', 'LGBMClassifier', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'cross_validate', 'StratifiedKFold', 'RepeatedStratifiedKFold', 'accuracy_score', 'roc_auc_score', 'confusion_matrix', 'RandomForestClassifier', 'GradientBoostingClassifier', 'VotingClassifier', 'StackingClassifier', 'HistGradientBoostingClassifier', 'RandomOverSampler', 'RandomUnderSampler', 'Pool', 'CatBoostClassifier', 'cv']Dict:{'numpy': ['mean', 'array', 'copy', 'clip'], 'pandas': ['concat', 'array', 'read_csv'], 'warnings': [], 'os': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'catboost': [], 'xgboost': [], 'lightgbm': [], 'sklearn': [], 'optuna': [], 'imblearn': []} axis_0: 0, axis_1: 2
auto-feature-engineering-lgb.py : ['read_csv', 'read_csv', 'head', 'info', 'any', 'isnull', 'any', 'isnull', 'corr', 'corr', 'corr', 'set_index', 'sort_values', 'skew', 'skew', 'skew', 'concat', 'info', 'concat', 'info', 'abs', 'corr', 'where', 'astype', 'bool', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'gc', 'os', 'warnings', 'featuretools'] ['SelectFromModel', 'RFE', 'LogisticRegression', 'GridSearchCV', 'cross_val_score', 'StratifiedKFold', 'learning_curve', 'roc_curve', 'auc', 'accuracy_score', 'roc_auc_score', 'ExtraTreesClassifier', 'clone']Dict:{'numpy': ['where', 'info', 'abs', 'any'], 'pandas': ['concat', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'xgboost': [], 'sklearn': [], 'gc': [], 'os': [], 'warnings': [], 'featuretools': []} axis_0: 0, axis_1: 2
e-d-a-and-baseline-mix-lgbm.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'astype', 'sum', 'sum', 'groupby', 'sum', 'groupby', 'reset_index', 'reset_index', 'sum', 'isnull', 'sort_values', 'merge', 'head', 'value_counts', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'crosstab', 'reset_index', 'rename', 'apply', 'isin', 'isin', 'apply', 'apply', 'isin', 'apply', 'apply', 'copy', 'copy', 'isin', 'value_counts', 'value_counts', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'map', 'map', 'map', 'map', 'map', 'map', 'fillna', 'median', 'apply', 'where', 'isna', 'where', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'concat', 'rename', 'reset_index', 'agg', 'groupby', 'to_dict', 'map', 'map', 'replace', 'replace', 'concat', 'to_dict', 'value_counts', 'map', 'map', 'concat', 'to_dict', 'value_counts', 'map', 'map', 'concat', 'astype', 'astype', 'to_dict', 'value_counts', 'map', 'astype', 'astype', 'map', 'astype', 'astype', 'drop', 'drop', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'transform', 'groupby', 'transform', 'groupby', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'drop', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings', 'lightgbm', 'gc', 'datetime', 'os'] ['roc_auc_score', 'LabelEncoder', 'KFold']Dict:{'numpy': ['median', 'max', 'sum', 'where', 'min', 'isin', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'merge', 'crosstab'], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'warnings': [], 'sklearn': [], 'gc': [], 'datetime': [], 'os': ['rename', 'replace']} axis_0: 0, axis_1: 0
beginners-basic-workflow-introduction.py : ['read_csv', 'head', 'sum', 'isnull', 'value_counts', 'mean', 'groupby', 'value_counts', 'crosstab', 'replace', 'mean', 'groupby', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'any', 'isnull', 'value_counts', 'fillna', 'any', 'isnull', 'max', 'min', 'mean', 'qcut', 'mean', 'groupby', 'corr', 'replace', 'replace', 'replace', 'max', 'min', 'drop', 'head', 'corr', 'head', 'mean', 'std', 'mean', 'read_csv', 'head', 'sum', 'isnull', 'replace', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'drop', 'replace', 'replace', 'replace', 'head', 'concat', 'to_csv', 'sort_values'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['LogisticRegression', 'RandomForestClassifier', 'GaussianNB', 'DecisionTreeClassifier', 'train_test_split', 'metrics', 'confusion_matrix', 'KFold', 'cross_val_score', 'cross_val_predict', 'GridSearchCV', 'VotingClassifier']Dict:{'numpy': ['mean', 'any', 'max', 'sum', 'min', 'std'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'qcut', 'crosstab'], 'matplotlib': [], 'seaborn': [], 'os': ['replace'], 'sklearn': []} axis_0: 0, axis_1: 4
titanic-survivor-prediction-feature-engineering.py : ['read_csv', 'read_csv', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'fillna', 'astype', 'astype', 'where', 'astype', 'drop', 'drop', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn'] ['RandomForestClassifier', 'LabelEncoder']Dict:{'numpy': ['mean', 'where'], 'pandas': ['read_csv'], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 0
homecreditrisk-extensive-eda-baseline-0-772.py : ['value_counts', 'head', 'head', 'tail', 'tail', 'value_counts', 'value_counts', 'value_counts', 'read_csv', 'head', 'update', 'update', 'value_counts', 'value_counts', 'update', 'update', 'update', 'update', 'value_counts', 'update', 'update', 'update', 'update', 'update', 'update', 'dropna', 'dropna', 'value_counts', 'value_counts', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'read_csv', 'head', 'read_csv', 'drop', 'concat', 'factorize', 'concat', 'get_dummies', 'count', 'groupby', 'map', 'mean', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'count', 'groupby', 'merge', 'reset_index', 'count', 'groupby', 'map', 'mean', 'groupby', 'merge', 'reset_index', 'count', 'groupby', 'map', 'mean', 'groupby', 'merge', 'reset_index', 'count', 'groupby', 'map', 'mean', 'groupby', 'merge', 'reset_index', 'to_csv', 'head'] ['plotly.graph_objs', 'matplotlib.pyplot', 'plotly.plotly', 'pandas', 'numpy', 'seaborn', 'random', 'warnings', 'lightgbm'] ['init_notebook_mode', 'iplot', 'WordCloud', 'tools', 'date', 'train_test_split']Dict:{'plotly': [], 'wordcloud': [], 'matplotlib': [], 'datetime': [], 'pandas': ['read_csv', 'concat', 'value_counts', 'factorize', 'get_dummies', 'merge'], 'numpy': ['mean'], 'seaborn': [], 'random': [], '': [], 'warnings': [], 'sklearn': [], 'lightgbm': []} axis_0: 1, axis_1: 1
house-price-prediction-feature-engineering.py : ['join', 'read_csv', 'read_csv', 'select_dtypes', 'head', 'sum', 'isna', 'drop', 'drop', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'median', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'median', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'median', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'median', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'replace', 'fillna', 'replace', 'fillna', 'astype', 'fillna', 'astype', 'select_dtypes', 'nunique', 'drop', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['preprocessing', 'CatBoostRegressor', 'XGBRegressor', 'train_test_split', 'mean_squared_log_error']Dict:{'numpy': ['mean', 'median', 'sum'], 'pandas': ['isna', 'read_csv'], 'os': ['replace'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': [], 'catboost': [], 'xgboost': []} axis_0: 0, axis_1: 0
tps-apr2021-catboost-run-pseudo-label.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'apply', 'groupby', 'sum', 'apply', 'apply', 'groupby', 'sum', 'apply', 'concat', 'where', 'any', 'isnull', 'where', 'apply', 'map', 'fillna', 'replace', 'fillna', 'fillna', 'astype', 'where', 'duplicated', 'fillna', 'median', 'astype', 'fillna', 'replace', 'replace', 'replace', 'replace', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'mean', 'groupby', 'dropna', 'le', 'gt', 'le', 'gt', 'le', 'gt', 'le', 'gt', 'where', 'drop', 'drop', 'head', 'drop', 'where', 'array', 'max', 'where', 'where', 'concat', 'mean', 'std', 'mean', 'std', 'apply', 'to_csv'] ['pandas', 'numpy', 'category_encoders'] ['CatBoostClassifier', 'StratifiedKFold', 'accuracy_score']Dict:{'pandas': ['concat', 'array', 'read_csv', 'isnull'], 'numpy': ['mean', 'median', 'any', 'max', 'sum', 'array', 'where', 'std'], 'catboost': [], 'category_encoders': [], 'sklearn': []} axis_0: 1, axis_1: 4
xgb-model-with-feature-engineering.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'drop', 'drop', 'sum', 'isna', 'sum', 'isna', 'head', 'map', 'map', 'map', 'map', 'map', 'map', 'reset_index', 'map', 'map', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'map', 'value_counts', 'copy', 'drop', 'copy', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'fillna', 'transform', 'transform', 'copy', 'to_csv', 'head'] ['os', 'gc', 'numpy', 'pandas', 'xgboost'] ['preprocessing', 'TimeSeriesSplit', 'KFold', 'roc_auc_score']Dict:{'os': [], 'gc': [], 'numpy': ['mean', 'max', 'sum', 'min', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'merge'], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 5
eda-with-feature-engineering.py : ['read_csv', 'read_csv', 'head', 'drop', 'drop', 'corr', 'hist', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'unique', 'count', 'groupby', 'unique', 'count', 'groupby', 'sum', 'isnull', 'max', 'max', 'query', 'reset_index', 'query', 'nunique', 'cumsum', 'groupby', 'cumsum', 'groupby', 'update', 'reset_index', 'query', 'fillna', 'shift', 'groupby', 'fillna', 'shift', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'read_csv', 'drop', 'to_csv'] ['pandas', 'numpy', 'gc', 'matplotlib.pyplot', 'seaborn', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['tqdm', 'XGBRegressor', 'enable_hist_gradient_boosting', 'HistGradientBoostingRegressor']Dict:{'pandas': ['unique', 'read_csv', 'isnull'], 'numpy': ['max', 'sum', 'unique', 'cumsum'], 'tqdm': ['update'], 'xgboost': [], 'gc': [], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 1
ai-generated-text-detection-with-dnn-and-tfidf.py : ['read_csv', 'rename', 'replace', 'read_csv', 'concat', 'read_csv', 'value_counts', 'where', 'where', 'where', 'divide', 'mean', 'to_csv', 'head'] ['numpy', 'tensorflow', 'pandas'] ['TextVectorization', 'keras', 'layers', 'roc_auc_score', 'StratifiedKFold']Dict:{'numpy': ['mean', 'where', 'divide'], 'tensorflow': [], 'pandas': ['concat', 'read_csv', 'value_counts'], 'sklearn': []} axis_0: 1, axis_1: 0
titanic-detailed-eda-with-model-comparisons.py : ['read_csv', 'read_csv', 'info', 'info', 'head', 'rename', 'rename', 'head', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'map', 'unique', 'value_counts', 'value_counts', 'sort_index', 'value_counts', 'groupby', 'unique', 'apply', 'apply', 'apply', 'value_counts', 'map', 'map', 'astype', 'astype', 'value_counts', 'sort_index', 'value_counts', 'groupby', 'unstack', 'sort_index', 'value_counts', 'groupby', 'isin', 'isin', 'head', 'unique', 'value_counts', 'value_counts', 'value_counts', 'sort_index', 'value_counts', 'groupby', 'sort_values', 'mean', 'groupby', 'sum', 'isnull', 'groupby', 'groupby', 'median', 'transform', 'isnull', 'transform', 'isnull', 'transform', 'sum', 'isnull', 'map', 'map', 'map', 'value_counts', 'groupby', 'map', 'unique', 'cut', 'head', 'cut', 'head', 'unique', 'isin', 'isin', 'isin', 'isin', 'unique', 'sort_index', 'value_counts', 'groupby', 'unique', 'sort_index', 'value_counts', 'groupby', 'sort_index', 'value_counts', 'groupby', 'isin', 'isin', 'isin', 'isin', 'corr', 'unique', 'boxplot', 'head', 'fillna', 'mean', 'fillna', 'mean', 'sum', 'isnull', 'isnull', 'isnull', 'corr', 'sum', 'isnull', 'unique', 'value_counts', 'fillna', 'fillna', 'head', 'replace', 'replace', 'corr', 'drop', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 're'] ['train_test_split', 'accuracy_score', 'LogisticRegression', 'RandomForestClassifier', 'GaussianNB', 'KNeighborsClassifier', 'SGDClassifier', 'StandardScaler', 'make_pipeline', 'DecisionTreeClassifier', 'LogisticRegression']Dict:{'pandas': ['read_csv', 'isnull', 'cut', 'value_counts', 'unique'], 'numpy': ['mean', 'median', 'sum', 'unique', 'isin', 'info'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 're': [], '#': [], 'For': [], 'Capturing': [], 'words': [], 'sklearn': []} axis_0: 0, axis_1: 1
tpsmay22-insightful-eda-fe-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'duplicated', 'sum', 'duplicated', 'value_counts', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'nunique', 'nunique', 'value_counts', 'join', '_repr_html_', 'sort_values', 'copy', 'agg', 'groupby', 'sort_values', 'reset_index', 'mean', 'rolling', 'copy', 'applymap', 'apply', 'apply', 'concat', 'apply', 'copy', 'copy', 'head', 'transform', 'transform', 'factorize', 'unique', 'unique', 'keys', 'keys', 'drop', 'drop', 'to_csv', 'array', 'array', 'sort_values'] ['numpy', 'pandas', 'warnings', 'matplotlib.pyplot', 'seaborn', 'gc', 'umap'] ['HTML', 'pearsonr', 'PCA', 'StandardScaler', 'PCA', 'StandardScaler', 'RadiusNeighborsClassifier', 'CatBoostClassifier']Dict:{'numpy': ['mean', 'sum', 'unique', 'array', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'factorize', 'unique', 'array'], 'warnings': [], 'IPython': ['_repr_html_'], 'matplotlib': [], 'seaborn': [], 'gc': [], 'umap': [], 'catboost': []} axis_0: 0, axis_1: 0
ig-eda-and-models.py : ['read_csv', 'read_csv', 'head', 'hist', 'hist', 'mean', 'hist', 'std', 'value_counts', 'drop', 'drop', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'read_csv', 'to_csv', 'head', 'nunique', 'nunique', 'unique', 'unique', 'hist', 'hist', 'hist', 'reset_index', 'concat', 'mean', 'min', 'max', 'std', 'transform', 'groupby', 'reset_index', 'reset_index', 'concat', 'get_dummies', 'concat', 'get_dummies', 'drop', 'drop', 'read_csv', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'librosa', 'librosa.display', 'builtins', 'eli5', 'shap', 'json', 'altair'] ['jit', 'tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'train_test_split', 'KFold', 'cross_val_score', 'StratifiedKFold', 'GridSearchCV', 'svm', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'CatBoostRegressor', 'LabelEncoder', 'neighbors', 'mean_absolute_error', 'linear_model', 'ExtraTreesRegressor', 'AdaBoostRegressor', 'StandardScaler', 'hilbert', 'hann', 'convolve', 'stats', 'KernelRidge', 'NearestNeighbors', 'RandomForestRegressor', 'GenericUnivariateSelect', 'SelectPercentile', 'SelectKBest', 'f_classif', 'mutual_info_classif', 'RFE', 'metrics', 'HTML', 'Counter']Dict:{'numpy': ['mean', 'max', 'min', 'unique', 'isin', 'std'], 'pandas': ['read_csv', 'concat', 'value_counts', 'get_dummies', 'unique'], 'os': [], 'numba': [], 'matplotlib': ['hist'], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'time': [], 'datetime': [], 'gc': [], 'seaborn': [], 'warnings': [], 'scipy': [], 'librosa,': [], 'librosa': [], 'builtins': ['min', 'max'], 'eli5': [], 'shap': [], 'IPython': [], 'json': [], 'altair': [], 'collections': []} axis_0: 2, axis_1: 6
titanic-how-data-scientist-applies-analysis-ml.py : ['read_csv', 'read_csv', 'head', 'head', 'info', 'describe', 'value_counts', 'isnull', 'head', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'apply', 'info', 'value_counts', 'isnull', 'value_counts', 'fillna', 'value_counts', 'isnull', 'unique', 'replace', 'value_counts', 'unique', 'corr', 'apply', 'apply', 'count', 'groupby', 'apply', 'drop', 'head', 'tail', 'corr', 'copy', 'get_dummies', 'sum', 'groupby', 'reset_index', 'sort_values', 'head', 'drop', 'corr', 'read_csv', 'head', 'value_counts', 'head', 'value_counts', 'apply', 'value_counts', 'fillna', 'replace', 'value_counts', 'fillna', 'apply', 'apply', 'apply', 'drop', 'drop', 'merge', 'to_csv'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['Text', 'List', 'Dict', 'Set', 'Tuple', 'Optional', 'Union', 'LabelEncoder', 'train_test_split', 'make_column_transformer', 'StandardScaler', 'OneHotEncoder', 'BaseEstimator', 'KFold', 'Pipeline', 'DecisionTreeClassifier', 'RandomForestClassifier', 'ExtraTreesClassifier', 'SVC', 'LogisticRegression', 'GridSearchCV', 'confusion_matrix', 'ConfusionMatrixDisplay', 'f1_score']Dict:{'os': ['replace'], 'typing': [], 'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'unique', 'merge'], 'numpy': ['info', 'sum', 'unique', 'copy'], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'warnings': []} axis_0: 0, axis_1: 2
feature-engineering-xgboost-with-gpu.py : ['head', 'sum', 'isnull', 'product', 'sum', 'astype', 'sum', 'isnull', 'corr', 'drop', 'fillna', 'mean', 'corr', 'max', 'min', 'copy', 'astype', 'reset_index', 'query', 'value_counts', 'value_counts'] ['numpy', 'pandas', 'plotly', 'plotly.graph_objs', 'plotly.tools', 'cufflinks', 'cufflinks', 'plotly.figure_factory', 'os', 'warnings', 'janestreet', 'os', 'numpy', 'pandas', 'xgboost', 'gc', 'os', 'gc', 'cudf', 'numpy', 'cupy', 'pandas', 'janestreet', 'xgboost', 'matplotlib.pyplot'] ['iplot', 'init_notebook_mode', 'preprocessing', 'hp', 'fmin', 'tpe', 'Trials', 'scope', 'roc_auc_score', 'roc_curve', 'GroupKFold', 'tqdm']Dict:{'numpy': ['mean', 'product', 'max', 'sum', 'min', 'copy'], 'pandas': ['value_counts', 'isnull'], 'plotly': [], 'cufflinks': [], 'os': [], 'warnings': [], 'janestreet': [], 'sklearn': [], 'xgboost': [], 'gc': [], 'os,': [], 'cudf': [], 'cupy': [], 'hyperopt': [], 'matplotlib': [], 'tqdm': []} axis_0: 1, axis_1: 0
ps-s3e17-simple-eda-ensemble.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'select_dtypes', 'any', 'any', 'isna', 'any', 'any', 'isna', 'any', 'any', 'isna', 'head', 'head', 'describe', 'describe', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'boxplot', 'boxplot', 'corr', 'astype', 'corr', 'astype', 'replace', 'astype', 'astype', 'transform', 'astype', 'astype', 'transform', 'concat', 'concat', 'drop', 'drop', 'rename', 'replace', 'concat', 'copy', 'reset_index', 'drop', 'reset_index', 'reset_index', 'transform', 'drop', 'drop', 'drop', 'head', 'keys', 'array', 'array', 'items', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'to_csv'] ['numpy', 'pandas', 'plotly.express', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'random', 'gc', 'seaborn', 'optuna', 'lightgbm', 'xgboost', 'warnings'] ['deepcopy', 'partial', 'combinations', 'BaseEstimator', 'TransformerMixin', 'train_test_split', 'StratifiedKFold', 'KFold', 'roc_auc_score', 'StandardScaler', 'MinMaxScaler', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'OneHotEncoder', 'FunctionTransformer', 'LabelEncoder', 'ColumnTransformer', 'RandomUnderSampler', 'enable_iterative_imputer', 'SimpleImputer', 'KNNImputer', 'IterativeImputer', 'PCA', 'NMF', 'Pipeline', 'make_pipeline', 'make_column_transformer', 'make_column_selector', 'EarlyStopping', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'BalancedRandomForestClassifier', 'NuSVC', 'SVC', 'LogisticRegressionCV', 'LogisticRegression', 'KNeighborsClassifier', 'LogisticRegression', 'MLPClassifier', 'GaussianProcessClassifier', 'RBF', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool']Dict:{'numpy': ['mean', 'any', 'array', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'array'], 'plotly': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'random': [], 'os': ['rename', 'replace'], 'copy': [], 'functools': [], 'itertools': [], 'gc': [], 'sklearn': [], 'category_encoders': [], 'imblearn': [], 'optuna': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'warnings': []} axis_0: 2, axis_1: 10
alice-logistic-regression-baseline.py : ['read_csv', 'read_csv', 'sort_values', 'head', 'astype', 'fillna', 'astype', 'fillna', 'keys', 'head', 'concat', 'drop', 'to_csv', 'fillna', 'to_csv', 'fillna', 'to_csv'] ['seaborn', 'pickle', 'numpy', 'pandas'] ['pyplot', 'csr_matrix', 'hstack', 'StandardScaler', 'CountVectorizer', 'roc_auc_score', 'LogisticRegression']Dict:{'matplotlib': [], 'seaborn': [], 'pickle': [], 'numpy': [], 'pandas': ['concat', 'read_csv'], 'scipy': [], 'sklearn': []} axis_0: 0, axis_1: 1
effective-feature-engineering.py : ['read_csv', 'isna', 'isin', 'corr', 'groupby', 'merge', 'fillna', 'fillna', 'replace', 'corr', 'unique', 'sample', 'isin', 'isin', 'drop', 'sort_values', 'groupby', 'merge', 'fillna', 'fillna', 'replace', 'fillna', 'replace', 'fillna', 'replace', 'min', 'groupby', 'merge', 'max', 'groupby', 'merge', 'sum', 'groupby', 'merge', 'median', 'groupby', 'merge', 'mean', 'groupby', 'merge', 'mean', 'groupby', 'rank', 'groupby', 'merge', 'drop', 'sort_values'] ['gc', 'time', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'random', 'warnings', 'eli5', 'shap'] ['LinearRegression', 'mean_absolute_error', 'LGBMRegressor', 'PermutationImportance']Dict:{'gc': [], 'time': [], 'numpy': ['mean', 'median', 'max', 'sum', 'min', 'unique', 'isin'], 'pandas': ['isna', 'merge', 'unique', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'random': ['sample'], 'warnings': [], 'sklearn': [], 'lightgbm': [], 'eli5': [], 'shap': []} axis_0: 0, axis_1: 1
0-938-aigtextdetection-3sgd-3mnb.py : ['map', 'read_csv', 'concat', 'read_csv', 'value_counts', 'head', 'read_csv', 'replace', 'head', 'head', 'concat', 'transform', 'transform', 'to_csv', 'head'] ['numpy', 'pandas', 'time', 'os', 'regex', 'xgboost', 'language_tool_python', 'random'] ['tqdm', 'LogisticRegression', 'XGBClassifier', 'TfidfVectorizer', 'VotingClassifier', 'SGDClassifier', 'KNeighborsClassifier', 'MultinomialNB', 'SVC', 'GridSearchCV', 'make_scorer', 'accuracy_score', 'csr_matrix', 'vstack', 'hstack', 'ProcessPoolExecutor']Dict:{'numpy': [], 'pandas': ['concat', 'read_csv', 'value_counts'], 'time': [], '': [], 'os': ['replace'], 'regex': [], 'tqdm': [], 'sklearn': [], 'xgboost': [], 'scipy': [], 'language_tool_python': [], 'concurrent': ['map']} axis_0: 1, axis_1: 0
feature-engineering-from-scratch.py : ['read_csv', 'sum', 'isnull', 'read_csv', 'head', 'mean', 'isnull', 'fillna', 'median', 'head', 'read_csv', 'head', 'fillna', 'sample', 'dropna', 'sum', 'isnull', 'isnull', 'isnull', 'median', 'head', 'read_csv', 'where', 'isnull', 'head', 'read_csv', 'hist', 'mean', 'std', 'boxplot', 'fillna', 'fillna', 'median', 'head', 'read_csv', 'fillna', 'fillna', 'head', 'read_csv', 'head', 'value_counts', 'mode', 'fillna', 'head', 'corr', 'dropna', 'isnull', 'replace', 'read_csv', 'head', 'unique', 'dropna', 'head', 'get_dummies', 'read_csv', 'fillna', 'head', 'to_dict', 'value_counts', 'to_dict', 'value_counts', 'to_dict', 'value_counts', 'map', 'map', 'map', 'head', 'read_csv', 'fillna', 'astype', 'head', 'unique', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'map', 'head', 'to_dict', 'mean', 'groupby', 'map', 'head', 'read_csv', 'concat', 'nlargest', 'nlargest', 'corr', 'corr'] ['pandas', 'numpy', 'matplotlib.pyplot', 'pandas', 'numpy', 'pandas', 'numpy', 'pandas', 'seaborn', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'numpy', 'numpy', 'pandas', 'numpy', 'pandas', 'numpy', 'pandas', 'pandas', 'numpy', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'pandas', 'numpy', 'matplotlib.pyplot'] ['train_test_split', 'LinearRegression', 'KNNImputer', 'preprocessing', 'StandardScaler', 'MinMaxScaler', 'RobustScaler', 'SelectKBest', 'chi2', 'ExtraTreesClassifier']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique'], 'numpy': ['mean', 'median', 'sum', 'where', 'unique', 'std'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'sklearn': []} axis_0: 1, axis_1: 1
age-related-conditions.py : ['read_csv', 'read_csv', 'head', 'info', 'sum', 'isnull', 'select_dtypes', 'read_csv', 'value_counts', 'head', 'to_datetime', 'info', 'sum', 'isnull', 'describe', 'drop', 'drop', 'head', 'sum', 'sum', 'sum', 'sum', 'mean', 'read_csv', 'max', 'drop', 'transform', 'read_csv', 'to_csv', 'head'] ['numpy', 'pandas', 'plotly.express', 'seaborn', 'optuna', 'gc'] ['train_test_split', 'cross_val_score', 'StratifiedKFold', 'make_column_transformer', 'make_column_selector', 'log_loss', 'make_scorer', 'OneHotEncoder', 'make_pipeline', 'SimpleImputer', 'PCA', 'SMOTE', 'Pipeline', 'pyplot', 'LogisticRegression', 'StackingClassifier', 'CatBoostClassifier', 'TabPFNClassifier', 'LGBMClassifier', 'XGBClassifier', 'SVC', 'datetime']Dict:{'numpy': ['mean', 'info', 'sum', 'max'], 'pandas': ['value_counts', 'to_datetime', 'read_csv', 'isnull'], 'sklearn': [], 'imblearn': [], 'matplotlib': [], 'plotly': [], 'seaborn': [], 'catboost': [], 'tabpfn': [], 'lightgbm': [], 'xgboost': [], 'optuna': [], 'datetime': ['max'], 'gc': []} axis_0: 2, axis_1: 0
guidefornewbie-eda-featureeng-modeling-evaluation.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'drop', 'head', 'value_counts', 'value_counts', 'drop', 'head', 'corr', 'head', 'info', 'median', 'groupby', 'median', 'apply', 'groupby', 'fillna', 'median', 'info', 'replace', 'replace', 'head', 'drop', 'info', 'median', 'groupby', 'median', 'apply', 'groupby', 'fillna', 'median', 'info', 'isnull', 'median', 'info', 'drop', 'replace', 'replace', 'head', 'astype', 'to_csv', 'astype', 'to_csv', 'mean', 'mean', 'std', 'std', 'astype', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'seaborn', 'pandas', 'matplotlib.pyplot', 'plotly.graph_objects', 'plotly.express'] ['RandomForestClassifier', 'XGBClassifier', 'cross_val_score', 'GridSearchCV']Dict:{'numpy': ['mean', 'median', 'info', 'std'], 'pandas': ['value_counts', 'read_csv', 'isnull'], 'os': ['replace'], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'sklearn': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 4
regularized-linear-models.py : ['read_csv', 'read_csv', 'head', 'concat', 'hist', 'apply', 'dropna', 'get_dummies', 'fillna', 'mean', 'mean', 'min', 'mean', 'concat', 'head', 'sort_values', 'tail', 'sort_values', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib', 'matplotlib.pyplot', 'xgboost'] ['skew', 'pearsonr', 'Ridge', 'RidgeCV', 'ElasticNet', 'LassoCV', 'LassoLarsCV', 'cross_val_score']Dict:{'pandas': ['concat', 'get_dummies', 'read_csv'], 'numpy': ['mean', 'min'], 'seaborn': [], 'matplotlib': ['hist'], 'scipy': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 0
titanicsexism-fairness-in-ml.py : ['read_csv', 'read_csv', 'transform', 'sample', 'factorize', 'unique', 'copy', 'isin', 'map', 'astype', 'fillna', 'sample', 'median', 'to_numeric', 'isnull', 'to_numeric', 'replace', 'copy', 'astype', 'concat', 'fillna', 'sample', 'concat', 'concat', 'transform', 'transform', 'sample', 'concat', 'transform', 'transform', 'sample', 'read_csv', 'astype', 'to_csv', 'astype', 'to_csv', 'concat', 'join', 'sample', 'astype', 'to_csv', 'astype', 'to_csv', 'items', 'abs', 'squeeze', 'array', 'mean', 'std', 'sort_values', 'std', 'std', 'concat', 'copy', 'abs'] ['warnings', 'graphviz', 'pandas', 'numpy', 'seaborn', 'matplotlib.pyplot'] ['List', 'Union', 'Dict', 'train_test_split', 'LogisticRegression', 'RandomForestClassifier', 'GridSearchCV', 'export_graphviz', 'DataConversionWarning', 'display', 'auc', 'roc_auc_score', 'roc_curve', 'BinaryLabelDataset', 'BinaryLabelDatasetMetric', 'ClassificationMetric', 'MetricTextExplainer', 'Reweighing', 'TransformerMixin', 'Pipeline', 'FeatureUnion', 'StandardScaler']Dict:{'typing': ['items', 'copy'], 'sklearn': ['transform'], 'warnings': [], 'graphviz': [], 'pandas': ['read_csv', 'isnull', 'concat', 'factorize', 'to_numeric', 'unique', 'array'], 'numpy': ['mean', 'median', 'squeeze', 'abs', 'array', 'unique', 'isin', 'std', 'copy'], 'seaborn': [], 'matplotlib': [], 'IPython': [], 'aif360': []} axis_0: 2, axis_1: 6
light-gradient-boosting-models-tabsep21.py : ['join', 'read_csv', 'read_csv', 'head', 'info', 'memory_usage', 'select_dtypes', 'min', 'max', 'to_numeric', 'memory_usage', 'select_dtypes', 'to_numeric', 'memory_usage', 'memory_usage', 'info', 'info', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isna', 'sum', 'isna', 'drop', 'info', 'head', 'read_csv', 'to_csv', 'value_counts', 'value_counts', 'copy', 'copy', 'drop', 'sum', 'isnull', 'transform', 'transform', 'head', 'qcut'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm'] ['MinMaxScaler', 'StandardScaler', 'train_test_split', 'roc_auc_score', 'Pipeline', 'SimpleImputer', 'cross_val_score', 'RepeatedStratifiedKFold', 'GridSearchCV']Dict:{'numpy': ['max', 'sum', 'min', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'value_counts', 'to_numeric', 'qcut'], 'os': [], 'matplotlib': [], 'sklearn': ['transform'], 'lightgbm': []} axis_0: 0, axis_1: 4
eda-to-break-through-rmse-68.py : ['read_csv', 'read_csv', 'drop', 'concat', 'reset_index', 'head', 'head', 'sub', 'sub', 'drop_duplicates', 'drop_duplicates', 'join', 'fillna', 'agg', 'groupby', 'swaplevel', 'sort_index', 'reset_index', 'set_index', 'join', 'join'] ['numpy', 'pandas', 'hvplot.pandas', 'geoviews', 'holoviews', 'hvplot.pandas', 'matplotlib.pyplot', 'seaborn'] []Dict:{'numpy': [], 'pandas': ['concat', 'read_csv'], 'hvplot': [], 'geoviews': [], 'holoviews': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 2
lgdm-model-with-new-features-better-generalization.py : ['read_csv', 'head', 'sort_values', 'read_csv', 'copy', 'mean', 'mean', 'dropna', 'drop', 'iterrows'] ['pandas', 'numpy', 'gresearch_crypto'] ['LGBMRegressor', 'pearsonr', 'train_test_split']Dict:{'pandas': ['read_csv'], 'numpy': ['mean', 'copy'], 'lightgbm': [], 'gresearch_crypto': [], 'scipy': [], 'sklearn': []} axis_0: 0, axis_1: 1
running-algos-fe-for-fast-inference.py : ['mean', 'mean', 'mean', 'mean', 'sum', 'where', 'iterrows', 'array', 'iterrows', 'array', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'iterrows', 'array', 'iterrows', 'array', 'mean', 'ewm', 'iterrows', 'array', 'iterrows', 'array', 'mean', 'groupby', 'get', 'update', 'iterrows', 'array', 'array', '__init__', 'unique', 'unique', 'unique', 'mean', 'keys', 'astype', 'array', 'read_csv', 'count', 'groupby', 'array', 'reset_index', 'query', 'reset_index', 'query', 'astype', 'select_dtypes', 'fillna', 'mean', 'reset_index', 'query', 'astype', 'iterrows', 'array', 'array', 'array', 'concat', 'stack', 'astype', 'mean', 'to_pickle', 'get', 'read_pickle', 'read_pickle', 'iterrows', 'transpose', 'transpose', 'array', 'array', 'array', 'concat', 'sum', 'mean', 'mean', 'astype', 'where'] ['numpy', 'pandas', 'pickle', 'matplotlib.pyplot', 'collections', 'math', 'warnings', 'collections', 'math', 'tensorflow', 'numpy', 'pandas', 'kerastuner', 'numpy', 'janestreet'] ['tqdm', 'njit', 'deque', 'division', 'Input', 'Dense', 'BatchNormalization', 'Dropout', 'Concatenate', 'Lambda', 'GaussianNoise', 'Activation', 'Model', 'Sequential', 'BinaryCrossentropy', 'Adam', 'EarlyStopping', 'Normalization', 'GroupKFold', 'tqdm', 'choices', 'KFold', '_BaseKFold', 'indexable', '_num_samples', '_deprecate_positional_args']Dict:{'numpy': ['transpose', 'mean', 'stack', 'sum', 'where', 'unique', 'array'], 'pandas': ['to_pickle', 'read_csv', 'concat', 'read_pickle', 'unique', 'array'], 'pickle': [], 'matplotlib': ['get'], 'tqdm': ['update', '__init__'], 'numba': [], 'collections': [], 'math': [], 'warnings': [], '__future__': ['__init__'], 'tensorflow': ['transpose', 'stack', 'concat', 'where', 'unique'], 'sklearn': ['__init__'], 'random': ['__init__'], 'kerastuner': []} axis_0: 2, axis_1: 2
kore-2022-imitation-training.py : ['read_csv', 'sample', 'value_counts', 'head', 'to_dict', 'items', 'items', '__init__', '__init__', 'eval', 'max', 'sum', 'get'] [] ['register_cell_magic', 'plot_3d_matrix']Dict:{'IPython': ['__init__'], 'feature_generator': []} axis_0: 1, axis_1: 0
tps-jan-22-quick-eda-hybrid-model.py : ['read_csv', 'read_csv', 'head', 'to_datetime', 'to_datetime', 'drop', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'drop', 'read_csv', 'astype', 'isin', 'astype', 'isin', 'astype', 'isin', 'astype', 'drop', 'concat', 'concat', 'concat', 'map', 'concat', 'map', 'concat', 'map', 'concat', 'concat', 'apply', 'concat', 'astype', 'read_csv', 'to_dict', 'unstack', 'map', 'set_index', 'get', 'drop', 'read_csv', 'to_dict', 'unstack', 'map', 'set_index', 'get', 'read_csv', 'read_csv', 'to_dict', 'unstack', 'to_dict', 'unstack', 'map', 'set_index', 'get', 'map', 'set_index', 'get', 'agg', 'groupby', 'head', 'drop', 'drop', 'drop', 'get_dummies', 'where', 'where', 'head', 'to_csv', 'reset_index', 'isin', 'max', 'hist', 'mean', 'std', 'mean', 'abs'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'math', 'statistics', 'scipy.stats', 'time', 'matplotlib.dates', 'dateutil.easter'] ['combinations', 'pearsonr', 'datetime', 'train_test_split', 'StratifiedKFold', 'GridSearchCV', 'TimeSeriesSplit', 'StandardScaler', 'OneHotEncoder', 'LabelEncoder', 'SimpleImputer', 'make_pipeline', 'make_column_transformer', 'confusion_matrix', 'ConfusionMatrixDisplay', 'accuracy_score', 'RandomForestClassifier', 'LinearRegression', 'Ridge', 'XGBRegressor', 'CatBoostRegressor', 'LGBMRegressor', 'keras', 'layers', 'callbacks']Dict:{'numpy': ['mean', 'max', 'abs', 'where', 'isin', 'std'], 'pandas': ['concat', 'get_dummies', 'to_datetime', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'itertools': [], 'math': [], 'statistics': ['mean', 'groupby'], 'scipy': [], 'time': [], 'datetime': ['max'], 'dateutil': [], 'sklearn': [], 'xgboost': ['apply'], 'catboost': [], 'lightgbm': [], 'tensorflow': []} axis_0: 1, axis_1: 14
end-to-end-data-wrangling-simple-random-forest.py : ['join', 'to_datetime', 'to_datetime', 'sub', 'astype', 'drop', 'items', 'astype', 'items', 'astype', 'sort_values', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'drop', 'head', 'drop', 'head', 'drop', 'melt', 'head', 'replace', 'head', 'to_numeric', 'applymap', 'astype', 'head', 'tail', 'drop', 'tail', 'copy', 'tail', 'head', 'merge', 'merge', 'merge', 'drop', 'head', 'replace', 'replace', 'replace', 'replace', 'merge', 'merge', 'merge', 'count', 'count', 'count', 'drop', 'rename', 'drop', 'rename', 'drop', 'rename', 'to_pickle', 'to_pickle', 'to_pickle', 'any', 'isnull', 'any', 'isnull', 'isnull', 'isnull', 'isnull', 'fillna', 'fillna', 'fillna', 'count', 'count', 'count', 'select_dtypes', 'drop', 'drop', 'drop', 'copy', 'drop', 'drop', 'pop', 'select_dtypes', 'drop', 'drop', 'drop', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'to_pickle', 'to_pickle', 'to_pickle', 'pop', 'pop', 'drop', 'concat', 'concat', 'head', 'replace', 'to_numeric', 'astype', 'head', 'pivot', 'reset_index', 'head', 'to_csv'] ['numpy', 'pandas', 'regex', 'gc', 'os'] ['RandomForestRegressor', '*', 'LabelEncoder', 'is_string_dtype', 'is_numeric_dtype', 'is_categorical_dtype']Dict:{'numpy': ['any', 'max', 'sum', 'min', 'copy'], 'pandas': [], 'regex': [], 'sklearn': [], 'gc': [], 'os': ['rename', 'replace']} axis_0: 0, axis_1: 10
tps-nov-2021-a-complete-guide.py : ['read_csv', 'astype', 'info', 'head', 'value_counts', 'sample', 'sample', 'drop', 'drop', 'keys', 'head', 'sum', 'any', 'isna', 'sum', 'any', 'isna', 'drop', 'head', 'drop', 'head', 'memory_usage', 'memory_usage', 'to_numeric', 'to_numeric', 'to_numeric', 'to_numeric', 'memory_usage', 'memory_usage', 'head', 'sort_values', 'describe', 'corr', 'abs', 'head', 'sort_values', 'describe', 'keys', 'head', 'astype', 'sort_values', 'astype', 'sort_values', 'head', 'astype', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'max', 'min', 'min', 'max', 'min', 'max', 'to_csv', 'head'] ['numpy', 'pandas', 'datatable', 'seaborn', 'matplotlib.pyplot', 'warnings'] ['LogisticRegression', 'LinearSVC', 'CalibratedClassifierCV', 'GaussianNB', 'SGDClassifier', 'XGBClassifier', 'StandardScaler', 'StratifiedKFold', 'roc_curve', 'auc', 'make_pipeline', 'deepcopy', 'TabNetClassifier']Dict:{'numpy': ['any', 'max', 'abs', 'sum', 'min', 'info'], 'pandas': ['isna', 'to_numeric', 'read_csv', 'value_counts'], 'datatable': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'xgboost': [], 'copy': [], 'warnings': [], 'pytorch_tabnet': []} axis_0: 0, axis_1: 2
0-feature-extraction.py : ['read_csv', 'read_csv', 'concat', 'merge', 'drop', 'head', 'head', 'round', 'round', 'isna', 'isna', 'astype', 'astype', 'astype', 'replace', 'replace', 'astype', 'replace', 'replace', 'drop', 'keys', 'fillna', 'apply', 'apply', 'astype', 'merge', 'mean', 'groupby', 'round', 'abs', 'round', 'abs', 'round', 'round', 'count', 'groupby', 'merge', 'nunique', 'groupby', 'merge', 'to_csv', 'copy', 'copy', 'concat', 'rename', 'count', 'rename', 'count', 'rename', 'count', 'rename', 'nunique', 'rename', 'nunique', 'rename', 'nunique', 'round', 'unique', 'sort_values', 'to_csv'] ['os', 'pandas', 'datetime', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['InteractiveShell', 'tqdm', 'LabelEncoder', 'StandardScaler']Dict:{'os': ['rename', 'replace'], 'pandas': ['isna', 'read_csv', 'concat', 'unique', 'merge'], 'datetime': [], 'numpy': ['mean', 'abs', 'round', 'unique', 'copy'], 'IPython': [], 'tqdm': [], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 3
let-s-add-some-features-for-the-national-holidays.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'fillna', 'fillna', 'fillna', 'keys', 'to_datetime', 'astype', 'map', 'map', 'transform', 'groupby', 'agg', 'groupby', 'reset_index', 'merge', 'merge', 'transform', 'groupby', 'agg', 'groupby', 'reset_index', 'merge', 'merge', 'head', 'value_counts', 'isna', 'to_datetime', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'mean', 'groupby', 'map', 'map', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'datetime', 'gc', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings', 'workalendar'] ['date', 'datetime', 'StratifiedKFold', 'mean_squared_error', 'Brazil']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'isin'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'merge', 'to_datetime'], 'datetime': ['min', 'max'], 'gc': [], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'sklearn': [], 'warnings': [], 'workalendar': []} axis_0: 1, axis_1: 1
ashrae-divide-and-conquer.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'apply', 'groupby', 'interpolate', 'apply', 'groupby', 'interpolate', 'merge', 'merge', 'reset_index', 'to_datetime', 'merge', 'merge', 'reset_index', 'to_datetime', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'to_datetime', 'to_datetime', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'groupby', 'rolling', 'astype', 'reset_index', 'mean', 'astype', 'reset_index', 'median', 'astype', 'reset_index', 'min', 'astype', 'reset_index', 'max', 'astype', 'reset_index', 'std', 'astype', 'reset_index', 'skew', 'drop', 'merge', 'reset_index', 'drop', 'merge', 'concat', 'clip', 'to_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'read_csv', 'isin', 'unique', 'merge', 'merge', 'notnull', 'notnull', 'drop', 'to_csv'] ['gc', 'os', 'lightgbm', 'numpy', 'pandas'] ['mean_squared_error', 'KFold', 'LabelEncoder', 'tqdm', 'is_datetime64_any_dtype', 'is_categorical_dtype']Dict:{'gc': [], 'os': [], 'lightgbm': [], 'numpy': ['mean', 'median', 'max', 'sum', 'min', 'unique', 'clip', 'isin', 'std'], 'pandas': [], 'sklearn': [], 'tqdm': []} axis_0: 0, axis_1: 5
lightgbm-regression-and-xgboost-regression.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'map', 'map', 'map', 'map', 'map', 'astype', 'to_datetime', 'to_datetime', 'groupby', 'query', 'sum', 'sum', 'copy', 'update', 'copy', 'mean', 'update', 'keys', 'groupby', 'groupby', 'value_counts', 'mean', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'sum', 'transform', 'groupby', 'sum', 'sum', 'head', 'head', 'astype', 'round', 'to_csv', 'value_counts'] ['numpy', 'pandas', 'os', 'lightgbm', 'gc', 'json', 'xgboost', 'shap', 'xgboost', 'shap'] ['time', 'tqdm_notebook', 'Counter', 'stats', 'cohen_kappa_score', 'KFold', 'StratifiedKFold', 'XGBClassifier', 'plot_importance', 'pyplot', 'XGBClassifier', 'plot_importance', 'pyplot']Dict:{'numpy': ['mean', 'sum', 'round', 'unique', 'copy'], 'pandas': ['to_datetime', 'unique', 'read_csv', 'value_counts'], 'os': [], 'time': [], 'tqdm': ['update'], 'collections': ['keys', 'update', 'copy'], 'scipy': [], 'lightgbm': [], 'sklearn': [], 'gc': [], 'json': [], 'xgboost': [], 'matplotlib': [], 'shap': []} axis_0: 1, axis_1: 0
20-burning-xgboost-faqs-answered-to-use-like-a-pro.py : ['dropna', 'dropna', 'drop', 'drop', 'get_dummies', 'mean'] ['warnings', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn', 'xgboost', 'xgboost'] ['rcParams', 'RandomForestRegressor', 'cross_val_score', 'cross_validate', 'train_test_split', 'LabelEncoder', 'OneHotEncoder', 'mean_squared_log_error', 'KFold', 'Pipeline', 'StandardScaler']Dict:{'warnings': [], 'matplotlib': [], 'numpy': ['mean'], 'pandas': ['get_dummies'], 'seaborn': [], 'xgboost': [], 'sklearn': []} axis_0: 0, axis_1: 2
titanic-catboost-feature-engineering.py : ['join', 'read_csv', 'read_csv', 'fillna', 'apply', 'apply', 'apply', 'apply', 'fillna', 'apply', 'apply', 'apply', 'apply', 'drop', 'drop', 'fillna', 'median', 'fillna', 'median', 'sum', 'isna', 'apply', 'fillna', 'value_counts', 'apply', 'fillna', 'value_counts', 'drop', 'drop', 'info', 'hist', 'hist', 'get_dummies', 'get_dummies', 'drop', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 're', 'catboost'] ['cross_val_score']Dict:{'numpy': ['median', 'info', 'sum'], 'pandas': ['isna', 'get_dummies', 'read_csv', 'value_counts'], 'os': [], 're': [], 'sklearn': [], 'catboost': []} axis_0: 0, axis_1: 6
your-first-nlp-competition-submission.py : ['join', 'read_csv', 'read_csv', 'head', 'value_counts', 'hist', 'hist', 'map', 'hist', 'map', 'hist', 'apply', 'map', 'mean', 'apply', 'map', 'mean', 'items', 'items', 'items', 'apply', 'update', 'apply', 'update', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'nunique', 'nunique', 'nunique', 'nunique', 'transform', 'groupby', 'sort_values', 'sort_values', 'drop', 'apply', 'sub', 'apply', 'sub', 'apply', 'sub', 'apply', 'sub', 'head', 'apply', 'join', 'head', 'apply', 'head', 'apply', 'head', 'apply', 'head', 'transform', 'sum', 'transform', 'value_counts', 'to_csv'] ['numpy', 'pandas', 'os', 're', 'matplotlib.pyplot', 'seaborn', 'nltk', 'nltk.corpus', 'string', 're', 'scikitplot', 'gensim', 'pickle', 'string', 'nltk', 'nltk', 'pandas', 'seaborn'] ['feature_extraction', 'model_selection', 'naive_bayes', 'pipeline', 'manifold', 'preprocessing', 'stopwords', 'BlanklineTokenizer', 'TweetTokenizer', 'WordNetLemmatizer', 'ngrams', 'CountVectorizer', 'defaultdict', 'Counter', 'word_tokenize', 'Tokenizer', 'pad_sequences', 'tqdm', 'Sequential', 'Embedding', 'LSTM', 'Dense', 'SpatialDropout1D', 'Constant', 'train_test_split', 'Adam', 'PorterStemmer', 'word_tokenize', 'WordCloud', 'train_test_split', 'TfidfVectorizer', 'Pool', 'stopwords', 'Counter', 'stopwords', 'sent_tokenize', 'word_tokenize', 'PorterStemmer', 'WordNetLemmatizer', 'PorterStemmer', 'word_tokenize', 'WordNetLemmatizer', 'CountVectorizer', 'TfidfVectorizer', 'TfidfTransformer', 'MultinomialNB', 'classification_report', 'confusion_matrix', 'accuracy_score']Dict:{'numpy': ['mean', 'sum'], 'pandas': ['isnull', 'read_csv', 'value_counts'], 'os': [], 're': ['sub'], '#regex': [], 'applies': [], 'a': [], 'regular': [], 'expression': [], 'to': [], 'string': [], 'and': [], 'returns': [], 'the': [], 'matching': [], 'substrings': [], '': [], 'matplotlib': ['hist'], 'seaborn': [], 'nltk': [], 'sklearn': [], 'collections': ['items', 'update'], 'scikitplot': [], 'gensim': [], 'keras': [], 'tqdm': ['update'], 'wordcloud': [], 'pickle': [], 'multiprocessing': [], 'spellchecker': []} axis_0: 0, axis_1: 0
godaddy-tune-stacking-lb-1-3732.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'drop', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'shift', 'groupby', 'transform', 'groupby', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'read_csv', 'merge', 'fillna', 'clip', 'clip', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isnull', 'clip', 'clip', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'read_csv', 'read_csv', 'astype', 'astype', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'set_index', 'join', 'drop', 'copy', 'to_csv', 'read_csv', 'iterrows', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'os', 'lightgbm', 'xgboost', 'catboost', 'lightgbm', 'xgboost', 'catboost'] ['tqdm', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'os': [], 'tqdm': []} axis_0: 0, axis_1: 1
tps-sep22-pycaret-voting-regressor-blend-6-58.py : ['read_csv', 'read_csv', 'head', 'sum', 'isna', 'sum', 'isna', 'to_datetime', 'astype', 'astype', 'astype', 'drop', 'abs', 'abs', 'mean', 'head', 'to_csv'] ['numpy'] []Dict:{'numpy': ['mean', 'abs', 'sum']} axis_0: 0, axis_1: 0
comprehensive-eda-to-xgboost-a-prediction.py : ['read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'value_counts', 'select_dtypes', 'apply', 'corr', 'drop', 'corr', 'abs', 'drop', 'set_index', 'astype', 'astype', 'ge', 'drop', 'drop', 'array', 'reset_index', 'mean'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 're', 'math', 'warnings', 'time', 'matplotlib.pyplot', 'seaborn', 'pandas'] ['HTML', 'Counter', 'tqdm', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'StandardScaler', 'MinMaxScaler', 'LabelEncoder', 'roc_auc_score', 'accuracy_score', 'confusion_matrix', 'ConfusionMatrixDisplay', 'RocCurveDisplay', 'XGBClassifier', 'Style', 'Fore', 'hierarchy', 'dendrogram', 'linkage', 'squareform']Dict:{'IPython': [], 'pandas': ['array', 'value_counts', 'read_csv', 'isnull'], 'numpy': ['transpose', 'mean', 'abs', 'sum', 'array'], 'matplotlib': [], 'seaborn': [], 'gc': [], 're': [], 'collections': [], 'tqdm': [], 'math': [], 'sklearn': [], 'warnings': [], 'time': [], 'xgboost': ['apply'], 'colorama': [], 'scipy': []} axis_0: 0, axis_1: 1
feature-engineering-model-sklearnpipeline.py : ['copy', 'copy', 'map', 'read_csv', 'read_csv', 'astype', 'drop', 'median', 'reset_index', 'hist', 'drop', 'astype', 'sum', 'isnull', 'head', 'mean', 'isnull', 'dropna', 'hist'] ['pandas', 'numpy', 'matplotlib.pyplot', 'joblib', 'numpy', 'pandas'] ['Lasso', 'mean_squared_error', 'r2_score', 'train_test_split', 'Pipeline', 'MinMaxScaler', 'Binarizer', 'AddMissingIndicator', 'MeanMedianImputer', 'CategoricalImputer', 'RareLabelEncoder', 'OrdinalEncoder', 'LogTransformer', 'DropFeatures', 'SklearnTransformerWrapper', 'BaseEstimator', 'TransformerMixin']Dict:{'pandas': ['read_csv', 'isnull'], 'numpy': ['mean', 'median', 'sum', 'copy'], 'matplotlib': ['hist'], 'joblib': [], 'sklearn': [], 'feature_engine': []} axis_0: 0, axis_1: 2
volatility-maximum-likelihood-estimation.py : ['cumprod', 'diff', 'sum', 'read_parquet', 'read_parquet', 'unique', 'isin', 'isin', 'diff', 'groupby', 'merge', 'diff', 'sum', 'read_parquet', 'diff', 'groupby', 'unique', 'diff', 'sum', 'sum', 'sum', 'concat', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'mean', 'astype', 'astype', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'random', 'seaborn', 'torch'] ['Parallel', 'delayed', 'minimize']Dict:{'pandas': ['read_csv', 'concat', 'read_parquet', 'unique', 'merge'], 'numpy': ['mean', 'sum', 'unique', 'isin', 'diff', 'cumprod'], 'joblib': [], 'scipy': [], 'matplotlib': [], 'random': [], 'seaborn': [], 'torch': ['mean', 'sum', 'concat', 'unique', 'isin', 'diff', 'cumprod']} axis_0: 1, axis_1: 0
topic-6-feature-engineering-and-feature-selection.py : ['get', 'get', 'apply', 'to_datetime', 'apply', 'to_datetime', 'astype', 'array', 'mean', 'std', 'min', 'max', 'min', 'astype', 'astype', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'apply', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean'] ['json', 'pandas', 'warnings', 'numpy', 'numpy', 'pytesseract', 'requests', 'reverse_geocoder', 'user_agents', 'numpy', 'statsmodels.api'] ['reduce', 'CountVectorizer', 'euclidean', 'CountVectorizer', 'ResNet50', 'preprocess_input', 'image', 'face', 'Image', 'BytesIO', 'distance', 'StandardScaler', 'beta', 'shapiro', 'MinMaxScaler', 'lognorm', 'VarianceThreshold', 'make_classification', 'SelectKBest', 'f_classif', 'LogisticRegression', 'cross_val_score', 'make_classification', 'LogisticRegression', 'RandomForestClassifier', 'SelectFromModel', 'cross_val_score', 'make_pipeline', 'SequentialFeatureSelector']Dict:{'json': [], 'pandas': ['array', 'to_datetime'], 'warnings': [], 'functools': [], 'numpy': ['mean', 'max', 'array', 'min', 'std'], 'sklearn': [], 'scipy': ['mean', 'std'], 'keras': [], 'pytesseract': [], 'PIL': [], 'requests': ['get'], 'io': [], 'reverse_geocoder': [], 'user_agents': [], 'statsmodels': [], 'mlxtend': []} axis_0: 1, axis_1: 0
13th-place-final-sub.py : ['sum', 'sum', 'sum', 'sum', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'array', 'array', 'std', 'array', 'std', 'array', 'std', 'array', 'std', 'array', 'mean', 'ewm', 'mean', 'ewm', 'mean', 'ewm', 'mean', 'ewm', 'read_csv', 'unique', 'unique', 'keys', 'iterrows', 'unique', 'keys', 'iterrows', 'array', 'mean', 'keys', 'transform', 'array', 'array', 'transform', 'array', 'array', 'transform', 'array', 'array', 'transform', 'array', 'array', 'transform', 'array', 'array', 'transform', 'array', 'array', 'transform', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'transform', 'array', 'array', 'array', 'array', 'array'] ['os', 'random', 'pandas', 'numpy', 'lightgbm', 'gresearch_crypto', 'time', 'datetime', 'gc', 'joblib', 'tensorflow'] ['keras', 'backend', 'MinMaxScaler']Dict:{'os': [], 'random': [], 'pandas': ['array', 'unique', 'read_csv'], 'numpy': ['mean', 'max', 'sum', 'array', 'min', 'unique', 'std'], 'lightgbm': [], 'gresearch_crypto': [], 'time': [], 'datetime': [], 'gc': [], 'joblib': [], 'tensorflow': ['unique'], 'keras': [], 'sklearn': ['transform']} axis_0: 2, axis_1: 0
permutation-importance-feature-imp-measure-gacrp.py : ['read_csv', 'merge', 'drop', 'astype', 'apply', 'to_datetime', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'nunique', 'drop', 'drop', 'drop', 'astype', 'fillna', 'concat', 'get_dummies', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'sort_values', 'drop', 'drop', 'apply', 'mean', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv', 'copy', 'apply', 'fillna', 'reset_index', 'sum', 'groupby', 'to_csv'] ['pandas', 'numpy', 'time', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'os', 'json', 'numpy', 'pandas', 'time', 'gc', 'psutil', 'matplotlib.pyplot', 'seaborn', 'lightgbm'] ['mean_squared_error', 'KFold', 'StratifiedKFold', 'json_normalize', 'datetime', 'LabelEncoder', 'mean_squared_error', 'KFold', 'StratifiedKFold', 'model_selection', 'preprocessing', 'metrics']Dict:{'pandas': [], 'numpy': ['mean', 'isin', 'sum', 'copy'], 'time': [], 'lightgbm': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'os': [], 'json': [], 'datetime': [], 'gc': [], 'psutil': []} axis_0: 1, axis_1: 6
housing-prices-top-14-with-linear-regression.py : ['read_csv', 'transpose', 'head', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'head', 'pop', 'pop', 'items', 'astype', 'fillna', 'isna', 'isna', 'median', 'isna', 'fillna', 'sort_values', 'apply', 'head', 'copy', 'get_dummies', 'drop', 'concat', 'mean', 'read_csv', 'pop', 'fillna', 'fillna', 'fillna', 'fillna', 'isna', 'fillna', 'fillna', 'median', 'copy', 'get_dummies', 'drop', 'concat', 'to_csv'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['sqrt', 'Path', 'display', 'FileLink', 'skew', 'boxcox1p', 'KFold', 'Lasso', 'train_test_split', 'cross_val_score']Dict:{'math': [], 'os': [], 'pathlib': [], 'IPython': [], 'pandas': ['isna', 'concat', 'get_dummies', 'read_csv'], 'numpy': ['transpose', 'median', 'copy', 'mean'], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'sklearn': []} axis_0: 0, axis_1: 4
llm-detect-ai-gt-sub-gec.py : ['join', 'eval', 'read_csv', 'read_csv', 'rename', 'sample', 'join', 'join', 'join', 'concat', 'read_csv', 'iterrows', 'apply', 'replace', 'replace', 'apply', 'transform', 'to_csv'] ['spacy', 'torch', 'regex', 'numpy', 'pandas', 'random'] ['AutoTokenizer', 'AutoModelForSeq2SeqLM', 'Counter', 'tqdm', 'LogisticRegression', 'SGDClassifier', 'TfidfVectorizer', 'VotingClassifier', 'MultinomialNB']Dict:{'spacy': [], 'torch': ['concat'], 'transformers': [], 'collections': [], 'tqdm': [], 'regex': [], 'numpy': [], 'pandas': ['concat', 'eval', 'read_csv'], 'sklearn': []} axis_0: 0, axis_1: 0
feature-engineering-randomforest-prediction.py : ['to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'read_csv', 'unique', 'count', 'filter', 'count', 'filter', 'filter', 'filter', 'filter', 'unique', 'abs', 'abs', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'unique', 'filter', 'std', 'filter', 'filter', 'filter', 'filter', 'to_numpy', 'unique', 'std', 'filter', 'std', 'filter', 'diff', 'filter', 'diff', 'mean', 'filter', 'rename', 'reset_index', 'filter', 'filter', 'filter', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'polars', 'datetime', 'plotly.express', 'plotly.graph_objects', 'pickle'] ['tqdm', 'make_subplots', 'score', 'train_test_split', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'abs', 'unique', 'diff', 'std'], 'pandas': ['to_datetime', 'unique', 'read_csv'], 'matplotlib': [], 'polars': ['mean', 'count', 'std', 'read_csv'], 'datetime': [], '': [], 'tqdm': [], 'plotly': [], 'metric': [], 'sklearn': [], 'pickle': []} axis_0: 0, axis_1: 0
base-model-with-lightgbm-on-demand-forecasting.py : ['read_csv', 'read_csv', 'mean', 'pivot_table', 'mean', 'pivot_table', 'mean', 'pivot_table', 'mean', 'pivot_table', 'mean', 'squeeze', 'iterrows', 'round', 'concat', 'reset_index', 'astype', 'astype', 'to_datetime', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'reset_index', 'bfill', 'shift', 'mean', 'expanding', 'groupby', 'sort_values', 'sort_values', 'copy', 'transform', 'groupby', 'shift', 'copy', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'copy', 'replace', 'transform', 'groupby', 'mean', 'ewm', 'shift', 'get_dummies', 'concat', 'isna', 'notnull', 'round', 'astype', 'to_csv'] ['numpy', 'pandas', 'lightgbm', 'warnings', 'time'] []Dict:{'numpy': ['mean', 'squeeze', 'where', 'round', 'copy'], 'pandas': ['isna', 'read_csv', 'pivot_table', 'concat', 'get_dummies', 'notnull', 'to_datetime'], 'lightgbm': [], 'warnings': [], 'time': []} axis_0: 1, axis_1: 1
deanonymized-days-overdue-feat-amex.py : ['read_parquet', 'sum', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] []Dict:{'numpy': ['sum'], 'pandas': ['read_parquet'], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 0
riiid-fe-target-encoding-keras.py : ['join', 'read_csv', 'astype', 'astype', 'drop_duplicates', 'drop_duplicates', 'concat', 'read_csv', 'read_csv', 'merge', 'replace', 'get_dummies', 'head', 'merge', 'sum', 'groupby', 'astype', 'add', 'fillna', 'merge', 'get', 'get', 'agg', 'groupby', 'iterrows', 'get', 'get', 'apply', 'read_csv', 'head', 'fillna', 'astype', 'drop', 'transform', 'fillna', 'concat', 'head', 'mean', 'mean'] ['numpy', 'pandas', 'warnings', 'gc', 'sys', 'os', 'tensorflow', 'tensorflow_addons', 'tensorflow.keras.backend', 'optuna', 'matplotlib.pyplot', 'riiideducation'] ['Counter', 'StandardScaler', 'KFold', 'CRITICAL']Dict:{'numpy': ['mean', 'sum', 'add'], 'pandas': ['concat', 'get_dummies', 'merge', 'read_csv'], 'warnings': [], 'gc,': [], 'sys': [], 'os': ['replace'], 'collections': ['get'], 'sklearn': [], 'tensorflow': ['mean', 'sum'], 'tensorflow_addons': [], 'optuna': [], 'logging': [], 'matplotlib': ['get'], 'riiideducation': []} axis_0: 1, axis_1: 2
criskiev-s-distances-more-estimators-groupkfold.py : ['read_csv', 'astype', 'replace', 'head', 'sum', 'memory_usage', 'memory_usage', 'read_csv', 'read_csv', 'astype', 'replace', 'head', 'read_csv', 'astype', 'replace', 'astype', 'replace', 'head', 'sum', 'memory_usage', 'memory_usage', 'copy', 'drop', 'reset_index', 'astype', 'isin', 'drop', 'merge', 'rename', 'merge', 'merge', 'rename', 'value_counts', 'merge', 'drop', 'copy', 'drop', 'drop', 'drop', 'drop', 'sort_values', 'groupby', 'drop', 'unstack', 'set_index', 'reset_index', 'astype', 'fillna', 'astype', 'sort_values', 'fillna', 'astype', 'drop', 'astype', 'fillna', 'astype', 'drop', 'astype', 'astype', 'copy', 'keys', 'keys', 'mean', 'head', 'to_csv'] ['pandas', 'numpy', 'math', 'gc', 'copy', 'matplotlib.pyplot', 'seaborn'] ['GroupKFold', 'train_test_split', 'mean_absolute_error', 'LGBMRegressor']Dict:{'pandas': ['merge', 'read_csv', 'value_counts'], 'numpy': ['mean', 'isin', 'sum', 'copy'], 'math': [], 'gc': [], 'copy': ['copy'], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'lightgbm': []} axis_0: 0, axis_1: 10
rapids-gpu-accelerated-from-scratch-solution.py : ['astype', 'astype', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'head', 'head', 'unique', 'unique', 'read_parquet', 'reset_index', 'shift', 'groupby', 'reset_index', 'shift', 'groupby', 'reset_index', 'shift', 'groupby', 'reset_index', 'shift', 'groupby', 'reset_index', 'agg', 'groupby', 'join', 'merge', 'merge', 'merge', 'merge', 'merge', 'drop', 'astype', 'reset_index', 'sort_values', 'concat', 'merge', 'merge', 'head', 'max', 'copy', 'agg', 'groupby', 'copy', 'agg', 'groupby', 'reset_index', 'concat', 'drop', 'reset_index', 'concat', 'concat', 'pivot', 'reset_index', 'pivot', 'reset_index', 'merge', 'merge', 'mean', 'min', 'max', 'clip', 'clip', 'head', 'sort_values', 'clip', 'clip', 'mean', 'clip', 'clip', 'abs', 'min', 'max', 'min', 'max', 'clip', 'min', 'mean', 'max', 'std', 'min', 'mean', 'max', 'std', 'hist', 'hist', 'clip', 'reset_index', 'agg', 'groupby', 'sort_values', 'to_csv', 'head', 'tail', 'clip', 'to_csv', 'head'] ['pandas', 'numpy', 'cudf', 'cupy', 'glob', 'os', 'gc', 'time', 'matplotlib.pyplot', 'seaborn', 'numpy.matlib', 'xgboost', 'lightgbm', 'cuml'] ['Parallel', 'delayed', 'preprocessing', 'model_selection', 'MinMaxScaler', 'QuantileTransformer', 'r2_score', 'GroupKFold', 'minimize', 'Pool', 'CatBoostRegressor', 'tqdm', 'roc_auc_score', 'KFold', 'CatBoostRegressor', 'KNeighborsRegressor', 'LinearRegression', 'Ridge', 'RandomForestRegressor']Dict:{'pandas': ['read_csv', 'concat', 'read_parquet', 'unique', 'merge', 'pivot'], 'numpy': [], 'cudf': [], 'cupy': [], 'glob': [], 'os': [], 'gc': [], 'time': [], 'joblib': [], 'sklearn': [], 'scipy': [], 'matplotlib': ['hist'], 'seaborn': [], 'catboost': [], 'tqdm': [], 'xgboost': [], 'lightgbm': [], 'cuml': []} axis_0: 0, axis_1: 1
feature-engineering-house-prices.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'drop', 'drop', 'drop', 'sum', 'isna', 'nunique', 'unique', 'fillna', 'mean', 'fillna', 'mode', 'head', 'select_dtypes', 'drop', 'drop'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['OrdinalEncoder', 'StandardScaler', 'PCA']Dict:{'numpy': ['mean', 'sum', 'unique'], 'pandas': ['isna', 'concat', 'unique', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 3
predicator.py : ['read_parquet', 'apply', 'to_datetime', 'tz_localize', 'astype', 'fillna', 'diff', 'groupby', 'astype', 'fillna', 'fillna', 'mean', 'rolling', 'astype', 'fillna', 'fillna', 'max', 'rolling', 'astype', 'fillna', 'fillna', 'std', 'rolling', 'astype', 'fillna', 'fillna', 'mean', 'rolling', 'astype', 'fillna', 'fillna', 'max', 'rolling', 'astype', 'fillna', 'diff', 'groupby', 'astype', 'fillna', 'fillna', 'mean', 'rolling', 'astype', 'fillna', 'fillna', 'max', 'rolling', 'astype', 'fillna', 'fillna', 'std', 'rolling', 'astype', 'fillna', 'fillna', 'mean', 'rolling', 'astype', 'fillna', 'fillna', 'max', 'rolling', 'read_parquet', 'fillna', 'fillna', 'mean', 'rolling', 'fillna', 'fillna', 'mean', 'rolling', 'round', 'isnull', 'reset_index', 'reset_index', 'copy', 'to_csv'] ['numpy', 'pandas', 'gc'] ['groupby']Dict:{'numpy': ['mean', 'max', 'round', 'diff', 'std', 'copy'], 'pandas': ['read_parquet', 'to_datetime', 'isnull'], 'itertools': [], 'gc': [], '': [], '#': [], '🗑️': [], 'Import': [], 'the': [], 'garbage': [], 'collection': [], 'module': []} axis_0: 0, axis_1: 0
mm-ncaam-no-leaks-lgb-xgb-logreg.py : ['read_csv', 'read_csv', 'drop', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'map', 'map', 'read_csv', 'rename', 'rename', 'reset_index', 'concat', 'reset_index', 'sum', 'groupby', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'drop', 'rename', 'copy', 'reset_index', 'concat', 'read_csv', 'copy', 'map', 'map', 'map', 'read_csv', 'read_csv', 'rename', 'rename', 'reset_index', 'concat', 'reset_index', 'sum', 'groupby', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'map', 'map', 'drop', 'drop', 'head', 'sort_values', 'astype', 'round', 'unique', 'sum', 'astype', 'astype', 'unique', 'unique', 'head', 'info', 'hist', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'eli5', 'lightgbm', 'xgboost', 'gc', 'warnings'] ['LogisticRegression', 'LinearRegression', 'StandardScaler', 'shuffle', 'GridSearchCV', 'KFold', 'train_test_split', 'preprocessing', 'confusion_matrix']Dict:{'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'numpy': ['sum', 'round', 'unique', 'info', 'copy'], 'matplotlib': ['hist'], 'seaborn': [], 'eli5': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'gc': [], 'warnings': []} axis_0: 0, axis_1: 13
catboost-with-feature-engineering.py : ['read_csv', 'read_csv', 'head', 'info', 'sum', 'isnull', 'sum', 'isnull', 'hist', 'hist', 'to_datetime', 'to_datetime', 'map', 'map', 'apply', 'astype', 'astype', 'drop', 'info', 'drop', 'select_dtypes', 'select_dtypes', 'transform', 'squeeze', 'to_csv'] ['catboost', 'holidays', 'numpy', 'pandas', 'seaborn', 're', 'pandas', 'seaborn', 'numpy', 'xgboost', 'matplotlib.pyplot', 'requests', 'sklearn.metrics', 'plotly.io'] ['CatBoostRegressor', 'StandardScaler', 'SVR', 'GridSearchCV', 'train_test_split', 'mean_squared_error', 'r2_score', 'make_scorer', 'ColumnTransformer', 'Pipeline', 'StandardScaler', 'OneHotEncoder', 'OneHotEncoder', 'ColumnTransformer', 'DecisionTreeRegressor', 'RandomForestRegressor', 'GradientBoostingRegressor', 'cross_val_score', 'PolynomialFeatures', 'make_pipeline', 'RobustScaler', 'LinearRegression', 'OrdinalEncoder', 'KMeans', 'SelectFromModel', 'GaussianNB', 'MultinomialNB', 'cross_validate', 'SVC', 'StratifiedKFold', 'cross_val_score', 'KFold', 'make_scorer', 'mean_squared_error', 'sqrt', 'SVR', 'VotingRegressor', 'BaggingRegressor', 'RFECV', 'FunctionTransformer', 'r2_score', 'mean_absolute_error', 'SimpleImputer', 'KNNImputer']Dict:{'catboost': [], 'holidays': [], 'numpy': ['sum', 'info', 'squeeze'], 'pandas': ['to_datetime', 'read_csv', 'isnull'], 'seaborn': [], 're': [], 'sklearn': [], 'xgboost': [], 'matplotlib': ['hist'], 'requests': ['head'], 'math': [], 'plotly': []} axis_0: 0, axis_1: 3
advanced-feature-engg-techniques-beyond-basics.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'copy', 'copy', 'copy', 'concat', 'reset_index', 'head', 'replace', 'apply', 'replace', 'apply', 'replace', 'apply', 'replace', 'apply', 'replace', 'apply', 'replace', 'apply', 'replace', 'apply', 'replace', 'apply', 'replace', 'apply', 'replace', 'apply', 'replace', 'apply', 'replace', 'apply', 'replace', 'apply', 'replace', 'apply', 'replace', 'apply', 'replace', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'drop', 'replace', 'replace', 'round', 'count', 'round', 'count', 'round', 'count', 'value_counts', 'dropna', 'nunique', 'nunique', 'crosstab', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'items', 'items', 'items', 'items', 'get', 'get', 'sum', 'isna', 'reset_index', 'sum', 'isna', 'mean', 'isnull', 'mean', 'isnull', 'concat', 'isnull', 'concat', 'drop', 'reset_index', 'fillna', 'copy', 'copy', 'drop', 'drop', 'drop', 'astype', 'array', 'array', 'sum', 'isna', 'mean', 'isnull', 'mean', 'isnull', 'concat', 'copy', 'drop', 'concat', 'reset_index', 'fillna', 'mean', 'copy', 'copy', 'drop', 'drop', 'drop', 'items', 'array', 'array', 'array', 'array', 'items', 'max', 'max', 'min', 'min', 'concat', 'get_dummies', 'value_counts', 'idxmin', 'drop', 'concat', 'duplicated', 'reset_index', 'drop', 'nunique', 'copy', 'copy', 'drop', 'concat', 'transform', 'min', 'transform', 'min', 'transform', 'fillna', 'fillna', 'transform', 'reset_index', 'concat', 'concat', 'mean', 'mean', 'mean', 'mean', 'nunique', 'replace', 'replace', 'replace', 'replace', 'astype', 'astype', 'copy', 'copy', 'copy', 'sort_values', 'mean', 'groupby', 'map', 'map', 'to_dict', 'value_counts', 'map', 'map', 'to_dict', 'value_counts', 'keys', 'astype', 'replace', 'astype', 'replace', 'drop', 'drop', 'nunique', 'astype', 'astype', 'drop', 'drop', 'mean', 'mean', 'mean', 'corr', 'drop', 'drop', 'transform', 'array', 'array', 'mean', 'mean', 'mean', 'any', 'sum', 'isna', 'mean', 'corrwith', 'drop', 'max', 'abs', 'max', 'abs', 'max', 'abs', 'drop', 'drop', 'nunique', 'abs', 'corr', 'transform', 'transform', 'concat', 'concat', 'array', 'array', 'mean', 'drop', 'drop', 'to_csv', 'to_csv', 'read_csv', 'read_csv', 'copy', 'copy', 'transform', 'drop', 'copy', 'copy', 'drop', 'drop', 'drop', 'copy', 'mean', 'mean', 'reset_index', 'reset_index', 'reset_index', 'unique', 'array', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'array', 'array', 'items', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'read_csv', 'to_csv', 'head', 'value_counts'] ['sklearn', 'numpy', 'os', 'datetime', 'pandas', 'matplotlib.pyplot', 'missingno', 'seaborn', 'concurrent.futures', 'random', 'gc', 'xgboost', 'statsmodels.api', 'math', 'optuna', 'xgboost', 'lightgbm', 're', 'warnings'] ['PrettyTable', 'tqdm', 'tqdm', 'deepcopy', 'partial', 'combinations', 'randint', 'uniform', 'f_classif', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'FunctionTransformer', 'metrics', 'GridSearchCV', 'RandomizedSearchCV', 'combinations', 'SimpleImputer', 'train_test_split', 'cross_val_score', 'mean_squared_error', 'mean_squared_log_error', 'roc_auc_score', 'accuracy_score', 'f1_score', 'precision_recall_curve', 'log_loss', 'KMeans', 'KElbowVisualizer', 'OptimalK', 'stats', 'ttest_ind', 'boxcox', 'variance_inflation_factor', 'BaseEstimator', 'TransformerMixin', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StratifiedKFold', 'KFold', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'AdaBoostClassifier', 'BalancedRandomForestClassifier', 'make_classification', 'GaussianNB', 'enable_hist_gradient_boosting', 'DecisionTreeClassifier', 'LogisticRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'NuSVC', 'SVC', 'KNeighborsClassifier', 'KNNImputer', 'LogisticRegression', 'MLPClassifier', 'Pool', 'TfidfVectorizer', 'PCA', 'TruncatedSVD']Dict:{'sklearn': ['transform'], 'numpy': ['mean', 'any', 'max', 'abs', 'sum', 'array', 'round', 'min', 'unique', 'std', 'copy'], 'os': ['replace'], 'datetime': [], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'array', 'crosstab'], 'matplotlib': ['get'], 'missingno': [], 'prettytable': ['copy'], 'seaborn': [], 'tqdm': [], 'concurrent': [], 'copy': [], 'functools': [], 'itertools': [], 'random': [], 'gc': [], 'xgboost': [], 'yellowbrick': [], 'gap_statistic': [], 'scipy': [], 'statsmodels': [], 'math': [], 'optuna': [], 'lightgbm': [], 'category_encoders': [], 'imblearn': [], 'catboost': [], 're': [], 'warnings': []} axis_0: 9, axis_1: 14
tps-feb-22-lightautoml-pseudolabel.py : ['read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'reset_index', 'concat', 'map', 'mean', 'map', 'to_csv'] ['os', 'time', 'numpy', 'pandas', 'torch'] ['display', 'HTML', 'Javascript', 'log_loss', 'accuracy_score', 'train_test_split', 'TabularAutoML', 'TabularUtilizedAutoML', 'Task', 'ReportDeco']Dict:{'IPython': [], 'os': [], 'time': [], 'numpy': ['mean'], 'pandas': ['concat', 'read_csv'], 'sklearn': [], 'torch': ['mean', 'concat'], 'lightautoml': []} axis_0: 0, axis_1: 0
fraud-detection-feature-eng-lightgbm.py : ['read_csv', 'head', 'copy', 'astype', 'astype', 'astype', 'astype', 'head', 'head', 'sort_values', 'head', 'head', 'head', 'read_parquet', 'sort_values', 'drop', 'join', 'add_suffix', 'transform', 'join', 'add_suffix', 'transform', 'join', 'add_suffix', 'transform', 'join', 'add_suffix', 'transform', 'join', 'add_suffix', 'transform', 'join', 'add_suffix', 'transform', 'join', 'map', 'map', 'join', 'head', 'sort_index', 'count', 'rolling', 'read_parquet', 'diff', 'read_parquet', 'join', 'sum', 'expanding', 'read_parquet', 'read_csv', 'head', 'copy', 'astype', 'astype', 'astype', 'astype', 'head', 'drop', 'head', 'array', 'astype', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'missingno', 'plotly.graph_objs', 'plotly.express', 'seaborn', 'pandas', 'lightgbm', 'numpy', 'pandas', 'lightgbm', 'category_encoders', 'category_encoders', 'category_encoders', 'itertools', 'matplotlib.pyplot'] ['iplot', 'init_notebook_mode', 'preprocessing', 'metrics', 'preprocessing', 'metrics', 'preprocessing']Dict:{'pandas': ['read_parquet', 'array', 'read_csv'], 'numpy': ['diff', 'array', 'sum', 'copy'], 'matplotlib': [], 'missingno': [], 'plotly': [], 'seaborn': [], 'sklearn': [], 'lightgbm': [], 'category_encoders': [], 'itertools': ['count']} axis_0: 0, axis_1: 0
titanic-top-10-percent-simple-solution-and-eda.py : ['join', 'read_csv', 'read_csv', 'head', 'info', 'get', 'get', 'fillna', 'fillna', 'replace', 'drop', 'drop', 'sum', 'isna', 'sum', 'isna', 'isna', 'median', 'groupby', 'to_numeric', 'xs', 'xs', 'xs', 'isna', 'isna', 'median', 'groupby', 'to_numeric', 'to_numeric', 'median', 'fillna', 'fillna', 'median', 'sum', 'isna', 'sum', 'isna', 'get', 'get', 'get', 'get', 'replace', 'replace', 'unique', 'unique', 'head', 'head', 'drop', 'drop', 'replace', 'replace', 'get_dummies', 'get_dummies', 'transform', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'warnings', 'os'] ['StandardScaler', 'MinMaxScaler', 'RobustScaler', 'train_test_split', 'cross_val_score', 'LogisticRegression', 'RandomForestClassifier', 'SVC', 'SVC']Dict:{'numpy': ['median', 'info', 'sum', 'unique'], 'pandas': ['isna', 'read_csv', 'get_dummies', 'to_numeric', 'unique'], 'matplotlib': ['get'], 'seaborn': [], 'sklearn': [], 'os': ['replace'], 'warnings': [], '=': [], "['Dr'": [], ',': [], "'Rev'": [], "'Col'": [], "'Major'": [], "'Mlle'": [], "'Don'": [], "'Sir'": [], "'Ms'": [], "'Capt'": [], "'Lady'": [], "'Mme'": [], "'the": [], "Countess'": [], "'Jonkheer'": [], "'Dona']": [], '': []} axis_0: 0, axis_1: 0
house-prices-nusvr-sklearn-intelex-4x-speedup.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'drop', 'drop', 'drop', 'reset_index', 'concat', 'drop', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'drop', 'apply', 'astype', 'astype', 'astype', 'transform', 'get_dummies', 'transform', 'transform', 'transform', 'transform', 'transform', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'optuna'] ['LabelEncoder', 'patch_sklearn', 'train_test_split', 'StandardScaler', 'MinMaxScaler', 'NuSVR', 'mean_squared_error', 'unpatch_sklearn', 'NuSVR']Dict:{'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'numpy': ['median', 'sum'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'sklearnex': [], 'optuna': []} axis_0: 2, axis_1: 2
a-complete-introduction-and-walkthrough.py : ['read_csv', 'read_csv', 'head', 'info', 'info', 'sort_index', 'value_counts', 'nunique', 'select_dtypes', 'select_dtypes', 'items', 'dropna', 'head', 'select_dtypes', 'astype', 'replace', 'astype', 'replace', 'astype', 'replace', 'describe', 'items', 'dropna', 'copy', 'notnull', 'sort_index', 'value_counts', 'keys', 'apply', 'groupby', 'nunique', 'sum', 'groupby', 'isin', 'nunique', 'apply', 'groupby', 'nunique', 'apply', 'groupby', 'nunique', 'rename', 'sum', 'isnull', 'drop', 'head', 'sort_values', 'copy', 'sort_index', 'value_counts', 'apply', 'groupby', 'sum', 'isnull', 'fillna', 'sum', 'isnull', 'isnull', 'value_counts', 'describe', 'notnull', 'describe', 'isnull', 'isnull', 'isnull', 'value_counts', 'groupby', 'rename', 'value_counts', 'groupby', 'reset_index', 'rename', 'iterrows', 'nunique', 'nunique', 'unique', 'unique', 'min', 'max', 'min', 'nunique', 'max', 'nunique', 'min', 'nunique', 'max', 'nunique', 'all', 'array', 'drop', 'corr', 'where', 'astype', 'bool', 'abs', 'abs', 'abs', 'abs', 'drop', 'abs', 'abs', 'iterrows', 'isnull', 'drop', 'value_counts', 'groupby', 'array', 'array', 'drop', 'array', 'reset_index', 'rename', 'value_counts', 'groupby', 'head', 'array', 'array', 'array', 'array', 'copy', 'notnull', 'reset_index', 'rename', 'sort_values', 'corr', 'rename', 'head', 'tail', 'dropna', 'sort_values', 'head', 'tail', 'dropna', 'merge', 'head', 'sort_values', 'tail', 'dropna', 'sort_values', 'round', 'corr', 'corr', 'where', 'astype', 'bool', 'drop', 'head', 'array', 'describe', 'max', 'min', 'agg', 'groupby', 'drop', 'head', 'head', 'head', 'corr', 'where', 'astype', 'bool', 'drop', 'merge', 'head', 'corr', 'head', 'sort_values', 'tail', 'dropna', 'sort_values', 'boxplot', 'boxplot', 'boxplot', 'rename', 'merge', 'value_counts', 'groupby', 'boxplot', 'agg', 'groupby', 'array', 'astype', 'notnull', 'drop', 'notnull', 'drop', 'isnull', 'copy', 'transform', 'mean', 'std', 'head', 'reset_index', 'sort_values', 'sum', 'cumsum', 'min', 'where', 'notnull', 'unique', 'copy', 'dropna', 'unique', 'mean', 'std', 'mean', 'std', 'set_index', 'reset_index', 'isnull', 'drop', 'merge', 'astype', 'fillna', 'to_csv', 'corr', 'where', 'astype', 'bool', 'drop', 'align', 'sort_values', 'head', 'transform', 'transform', 'where', 'set_index', 'reset_index', 'unique', 'array', 'array', 'array', 'array', 'mean', 'std', 'idxmax', 'max', 'mean', 'groupby', 'idxmax', 'max', 'drop', 'drop', 'merge', 'astype', 'fillna', 'head', 'map', 'mean', 'groupby', 'idxmax', 'max', 'drop', 'boxplot', 'mean', 'mean', 'std', 'std', 'set_index', 'reset_index', 'to_csv', 'to_csv', 'mean', 'mean', 'std', 'std', 'set_index', 'reset_index', 'get', 'get', 'array', 'array', 'mean', 'std', 'mean', 'std', 'mean', 'reset_index', 'sort_values', 'read_csv', 'head', 'max', 'head', 'to_csv', 'merge', 'mean', 'groupby', 'hist', 'sort_index', 'hist', 'sort_index', 'value_counts', 'value_counts', 'idxmax', 'max', 'head', 'astype', 'sum', 'max', 'product', 'copy', 'copy', 'transform', 'astype', 'align', 'to_csv', 'mean', 'std', 'sort_values', 'set_index', 'reset_index'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 'warnings', 'warnings', 'lightgbm', 'csv', 'ast', 'json', 'itertools'] ['OrderedDict', 'Counter', 'spearmanr', 'RandomForestClassifier', 'f1_score', 'make_scorer', 'cross_val_score', 'Imputer', 'MinMaxScaler', 'Pipeline', 'LinearSVC', 'GaussianNB', 'MLPClassifier', 'LogisticRegressionCV', 'RidgeClassifierCV', 'LinearDiscriminantAnalysis', 'KNeighborsClassifier', 'ConvergenceWarning', 'ExtraTreesClassifier', 'RFECV', 'StratifiedKFold', 'display', 'hp', 'tpe', 'Trials', 'fmin', 'STATUS_OK', 'sample', 'default_timer', 'train_test_split', 'confusion_matrix', 'UMAP', 'PCA', 'FastICA', 'TSNE', 'Axes3D', 'export_graphviz', 'Image']Dict:{'pandas': ['read_csv', 'isnull', 'value_counts', 'unique', 'notnull', 'array', 'merge'], 'numpy': ['mean', 'product', 'max', 'abs', 'sum', 'array', 'all', 'where', 'round', 'min', 'unique', 'isin', 'info', 'std', 'cumsum', 'copy'], 'matplotlib': ['boxplot', 'get', 'hist'], 'seaborn': ['boxplot'], 'collections': ['items', 'keys', 'get', 'copy'], 'scipy': [], 'warnings': [], 'sklearn': [], '': [], 'lightgbm': [], 'IPython': [], 'hyperopt': [], 'csv': [], 'ast': [], 'timeit': [], 'json': [], 'itertools': ['product', 'groupby'], 'umap': [], 'mpl_toolkits': ['boxplot', 'hist']} axis_0: 0, axis_1: 1
playgrounds3e18-eda-baseline.py : ['read_csv', 'test', 'read_csv', 'read_csv', 'test', 'head', 'head', 'test', 'read_csv', 'read_csv', 'read_csv', 'concat', 'astype', 'concat', 'drop', 'test', 'sample', 'groupby', 'sample', 'groupby', 'test', 'sample', 'test', 'isin', 'test', 'test', 'test', 'items', 'test', 'drop', 'drop', 'transpose', 'describe', 'info', 'concat', 'nunique', 'nunique', 'test', 'nunique', 'items', 'round', 'round', 'test', 'round', 'concat', 'drop_duplicates'] [] []Dict:{} axis_0: 6, axis_1: 7
house-prices-top-8-featengineering-xgb-optuna.py : ['read_csv', 'read_csv', 'concat', 'read_csv', 'unique', 'replace', 'where', 'rename', 'items', 'astype', 'items', 'astype', 'any', 'isnull', 'isnull', 'select_dtypes', 'fillna', 'select_dtypes', 'fillna', 'select_dtypes', 'mean', 'copy', 'pop', 'copy', 'select_dtypes', 'factorize', 'sort_values', 'sort_values', 'info', 'copy', 'pop', 'copy', 'select_dtypes', 'get_dummies', 'mul', 'get_dummies', 'mul', 'get_dummies', 'mul', 'join', 'sum', 'gt', 'transform', 'groupby', 'copy', 'mean', 'std', 'copy', 'mean', 'std', 'corr', 'mean', 'std', 'cumsum', 'melt', 'sort_values', 'transform', 'concat', 'transform', 'add', 'copy', 'pop', 'copy', 'pop', 'concat', 'join', 'join', 'join', 'join', 'drop', 'join', 'join', 'transform', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'optuna', 'shap', 'pickle'] ['CategoricalDtype', 'MEstimateEncoder', 'KMeans', 'PCA', 'mutual_info_regression', 'KFold', 'cross_val_score', 'XGBRegressor', 'Path', 'reduce']Dict:{'numpy': ['mean', 'any', 'add', 'sum', 'where', 'unique', 'info', 'std', 'cumsum', 'copy'], 'pandas': [], 'matplotlib': [], 'seaborn': [], 'optuna': [], 'shap': [], 'pickle': [], 'category_encoders': [], 'sklearn': [], 'xgboost': [], 'pathlib': ['rename', 'replace']} axis_0: 6, axis_1: 3
amino-acid-properties-for-feature-engineering.py : ['join', 'read_csv', 'read_csv', 'all', 'isnull', 'drop', 'fillna', 'max', 'array', 'read_csv', 'array', 'dot', 'set_index', 'concat', 'fillna', 'array', 'transform', 'array', 'transform', 'array', 'array', 'read_csv', 'fillna', 'max', 'array', 'dot', 'set_index', 'concat', 'fillna', 'array', 'transform', 'hist', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot'] ['stats', 'product', 'KFold', 'MinMaxScaler', 'RandomForestRegressor', 'train_test_split', 'HistGradientBoostingRegressor']Dict:{'numpy': ['dot', 'array', 'max', 'all'], 'pandas': ['concat', 'array', 'read_csv', 'isnull'], 'matplotlib': ['hist'], 'scipy': [], 'itertools': [], 'sklearn': []} axis_0: 0, axis_1: 2
tps-01-22-with-catboost.py : ['join', 'join', 'join', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'value_counts', 'sum', 'groupby', 'mean', 'groupby', 'copy', 'astype', 'pop', 'head', 'head', 'pop', 'pop', 'concat', 'get_dummies', 'join', 'concat', 'pop', 'pop', 'corr', 'sort_values', 'abs', 'corr', 'mean', 'abs', 'abs', 'abs', 'mean', 'pop', 'pop', 'mean', 'to_csv', 'head'] ['numpy', 'pandas', 'time', 'os', 'matplotlib.pyplot', 'seaborn'] ['CatBoostRegressor', 'TimeSeriesSplit', 'KFold']Dict:{'numpy': ['mean', 'abs', 'sum', 'copy'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'value_counts'], 'time': [], 'os': [], 'matplotlib': [], 'seaborn': [], 'catboost': [], 'sklearn': []} axis_0: 1, axis_1: 1
instant-gratification-playground.py : ['head', 'sort_values', 'sum', 'isnull', 'value_counts', 'hist', 'hist', 'hist', 'unique', 'hist', 'describe', 'nunique', 'select_dtypes', 'drop', 'add', 'add', 'reset_index', 'head', 'nunique', 'drop', 'abs', 'corr', 'where', 'astype', 'bool', 'reset_index', 'notnull', 'reset_index', 'drop', 'isnull', 'drop', 'pop', 'pop', 'reset_index', 'transform', 'copy', 'copy', 'concat', 'pop', 'pop', 'concat', 'reset_index', 'reset_index', 'copy', 'copy', 'copy', 'copy', 'concat', 'pop', 'pop', 'concat', 'reset_index', 'reset_index', 'reset_index', 'transform', 'transform', 'to_csv', 'hist', 'sum', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'os', 'sys'] ['metrics', 'preprocessing', 'PCA', 'KernelPCA', 'QuadraticDiscriminantAnalysis', 'LinearDiscriminantAnalysis', 'RFE', 'RFECV', 'VarianceThreshold', 'StratifiedKFold', 'RepeatedStratifiedKFold', 'StandardScaler', 'MinMaxScaler', 'RobustScaler', 'NuSVC', 'tqdm', 'KNeighborsClassifier', 'BaggingClassifier']Dict:{'pandas': ['isnull', 'concat', 'value_counts', 'unique', 'notnull'], 'numpy': ['add', 'abs', 'sum', 'where', 'unique', 'copy'], 'matplotlib': ['hist'], 'seaborn': [], 'gc,os,sys': [], 'sklearn': [], 'tqdm': []} axis_0: 4, axis_1: 5
spaceship-titanic-competition-end-to-end-project.py : ['read_csv', 'read_csv', 'head', 'head', 'sum', 'duplicated', 'sum', 'duplicated', 'sum', 'duplicated', 'sum', 'duplicated', 'rename', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'rename', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'select_dtypes', 'nunique', 'select_dtypes', 'value_counts', 'keys', 'value_counts', 'head', 'apply', 'apply', 'sort_values', 'count', 'groupby', 'apply', 'items', 'drop', 'drop', 'head', 'fillna', 'apply', 'apply', 'apply', 'replace', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'median', 'astype', 'astype', 'nunique', 'mean', 'median', 'min', 'max', 'drop', 'drop', 'head', 'keys', 'value_counts', 'head', 'sum', 'mean', 'median', 'rename', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'select_dtypes', 'select_dtypes', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'duplicated', 'sum', 'duplicated', 'nunique', 'select_dtypes', 'nunique', 'select_dtypes', 'drop', 'drop', 'describe', 'astype', 'astype', 'apply', 'apply', 'get_dummies', 'get_dummies', 'replace', 'head', 'head', 'drop', 'head', 'head', 'replace', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'warnings', 'missingno'] ['stats', 'SVC', 'GaussianNB', 'LogisticRegression', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'StackingClassifier', 'XGBClassifier', 'CatBoostClassifier', 'LGBMClassifier', 'SimpleImputer', 'train_test_split', 'GridSearchCV', 'RandomizedSearchCV', 'accuracy_score', 'f1_score', 'recall_score', 'precision_score', 'confusion_matrix', 'LabelEncoder', 'OneHotEncoder', 'StandardScaler', 'MinMaxScaler', 'SMOTE']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'min'], 'pandas': ['get_dummies', 'isnull', 'read_csv', 'value_counts'], 'seaborn': [], 'matplotlib': [], 'scipy': ['mode', 'describe'], 'warnings': [], 'sklearn': [], 'xgboost': ['apply'], 'catboost': [], 'lightgbm': [], 'imblearn': [], 'missingno': []} axis_0: 0, axis_1: 1
tps-sept-leak-free-catboost-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'reset_index', 'concat', 'corr', 'to_datetime', 'where', 'isin', 'drop', 'head', 'value_counts', 'abs', 'abs', 'abs', 'sum', 'array', 'array', 'select_dtypes', 'mean', 'to_csv', 'head', 'sort_values', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'glob', 'math', 'cv2', 'gc', 'logging', 'warnings', 'random', 'lightgbm', 'catboost', 'shap'] ['stats', 'scatter_matrix', 'StratifiedKFold', 'train_test_split', 'TimeSeriesSplit', 'roc_auc_score', 'confusion_matrix', 'StandardScaler', 'RobustScaler', 'MinMaxScaler', 'QuantileTransformer', 'LabelEncoder', 'PCA', 'mutual_info_regression', 'Pipeline', 'CatBoostRegressor', 'Pool', '*', 'XGBClassifier', 'LGBMClassifier', 'LGBMRegressor', 'TimeSeriesSplit']Dict:{'numpy': ['mean', 'abs', 'sum', 'where', 'isin', 'array'], 'pandas': [], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'sklearn': [], 'os,': [], 'glob,': [], 'math,': [], 'cv2,': [], 'gc,': [], 'logging,': [], 'warnings,': [], 'random': [], 'lightgbm': [], 'catboost': [], 'xgboost': [], 'shap': []} axis_0: 1, axis_1: 2
multi-head-attention.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'concat', 'drop', 'drop', 'sum', 'isna', 'sum', 'isna', 'value_counts', 'reset_index', 'drop', 'value_counts', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'drop', 'transform', '__init__', 'transpose', 'transpose', '__init__', 'read_csv', 'sum', 'array', 'to_csv'] ['os', 'gc', 'pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'tensorflow', 'tensorflow.keras.layers'] ['RobustScaler', 'StratifiedKFold', 'KFold', 'ReduceLROnPlateau', 'EarlyStopping', 'ModelCheckpoint', 'LabelEncoder', 'to_categorical']Dict:{'os': [], 'gc': [], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'array'], 'numpy': ['transpose', 'max', 'abs', 'sum', 'min', 'array'], 'seaborn': [], 'matplotlib': [], 'sklearn': ['transform', '__init__'], 'tensorflow': ['__init__']} axis_0: 1, axis_1: 0
what-s-cooking-top-7-solution.py : ['head', 'sum', 'isnull', 'sum', 'isnull', 'value_counts', 'value_counts', 'head', 'sort_values', 'value_counts', 'unique', 'keys', 'keys', 'head', 'value_counts', 'join', 'sub', 'sub', 'join', 'drop', 'apply', 'reset_index', 'rename', 'head', 'transform', 'transform', 'transform', 'transform', 'max', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'sklearn', 'os', 'json', 're', 'nltk', 'zipfile', 'pickle'] ['datetime', 'LabelEncoder', 'WordNetLemmatizer', 'CountVectorizer', 'TfidfVectorizer', 'train_test_split', 'GridSearchCV', 'confusion_matrix', 'accuracy_score', 'CountVectorizer', 'KMeans', 'KernelPCA', 'PCA', 'TruncatedSVD', 'OneHotEncoder', 'sparse', 'LinearSVC', 'SVC', 'f1_score', 'f1_score', 'LinearSVC', 'SVC', 'BayesianOptimization', 'cross_val_score', 'datetime']Dict:{'pandas': ['value_counts', 'unique', 'isnull'], 'numpy': ['unique', 'sum', 'max'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'os': ['rename'], 'json': [], 're': ['sub'], 'nltk': [], 'zipfile': [], 'datetime': ['max'], 'scipy': [], 'bayes_opt': [], 'pickle': []} axis_0: 0, axis_1: 3
feature-engineering-with-coordinates.py : ['read_csv', 'read_csv', 'read_csv', 'astype', 'apply', 'fillna', 'replace', 'astype', 'apply', 'fillna', 'replace', 'astype', 'apply', 'fillna', 'replace', 'sum', 'isna', 'astype', 'sort_values', 'abs', 'corrwith', 'items', 'iterrows', 'mean', 'concat', 'boxplot', 'drop', 'drop', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'min', 'array', 'apply', 'min', 'concat', 'apply', 'min', 'concat', 'transform', 'transform', 'concat', 'mean', 'gt', 'to_csv', 'read_csv', 'read_csv', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'torch', 'matplotlib.pyplot', 'seaborn', 'reverse_geocoder'] ['fetch_california_housing', 'KFold', 'train_test_split', 'mean_squared_error', 'LabelEncoder', 'KMeans', 'PCA', 'XGBRegressor', 'LGBMRegressor', 'CatBoostRegressor', 'Map', 'HeatMap', 'haversine_distances', 'radians']Dict:{'pandas': ['concat', 'array', 'isna', 'read_csv'], 'numpy': ['mean', 'abs', 'sum', 'min', 'array'], 'sklearn': [], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': [], 'folium': [], 'math': [], 'torch': ['mean', 'abs', 'sum', 'concat', 'gt', 'min'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'reverse_geocoder': []} axis_0: 2, axis_1: 9
flatiron.py : ['read_csv', 'join', 'join', 'describe', 'corr', 'unique', 'unique', 'max', 'min', 'max', 'min', 'std', 'sum', 'unique', 'join', 'array', 'array', 'array', 'array', 'unique', 'array', 'array', 'sum', 'unique', 'where', 'where', 'array', 'array', 'stack', 'array', 'round', 'clip', 'round', 'clip', 'sum', 'sum', 'sum', 'sum', 'stack', 'read_csv', 'join', 'read_csv', 'join', 'corr', 'unique', 'join', 'array', 'to_csv', 'head'] ['os', 'gc', 'pandas', 'numpy', 'pyarrow.parquet', 'matplotlib.pyplot', 'seaborn', 'keras.backend'] ['matthews_corrcoef', 'signal', 'tqdm_notebook', 'jit', 'int32', 'PCA', '*', 'Model', 'Nadam', 'Sequence', 'ModelCheckpoint', 'max_norm', 'train_test_split', 'KFold', 'StratifiedKFold']Dict:{'os': [], 'gc': [], 'pandas': ['array', 'unique', 'read_csv'], 'numpy': ['stack', 'max', 'std', 'sum', 'where', 'round', 'min', 'unique', 'clip', 'array'], 'pyarrow': [], 'matplotlib': [], 'sklearn': [], 'scipy': [], 'seaborn': [], 'tqdm': [], 'numba': [], 'keras': ['stack', 'max', 'sum', 'round', 'min', 'clip', 'std']} axis_0: 3, axis_1: 0
eda-feat-engineering-encode-conquer.py : ['join', 'reset_index', 'sum', 'isnull', 'nunique', 'value_counts', 'value_counts', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'map', 'map', 'map', 'map', 'head', 'crosstab', 'reset_index', 'rename', 'min', 'max', 'concat', 'get_dummies', 'drop', 'head', 'isin', 'sort_index', 'value_counts', 'crosstab', 'reset_index', 'rename', 'min', 'max', 'crosstab', 'reset_index', 'rename', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'min', 'max', 'reset_index', 'value_counts', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'head', 'apply', 'apply', 'apply', 'join', 'apply', 'join', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'head', 'apply', 'apply', 'groupby', 'apply', 'transform', 'transform', 'head', 'drop', 'drop', 'drop', 'astype', 'drop', 'mean', 'std', 'boxplot', 'keys', 'sort_values', 'head', 'to_csv'] ['numpy', 'pandas', 'scipy', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'os', 'gc', 'matplotlib.gridspec', 'string', 'warnings', 'time'] ['stats', 'preprocessing', 'confusion_matrix', 'roc_auc_score', 'StratifiedKFold', 'cross_val_score', 'KFold', 'XGBClassifier', 'fmin', 'hp', 'tpe', 'Trials', 'space_eval', 'STATUS_OK', 'STATUS_RUNNING', 'partial', 'CategoricalDtype', 'LabelEncoder', 'accuracy_score', 'confusion_matrix', 'classification_report', 'cross_val_score', 'LabelEncoder', 'StandardScaler', 'Pipeline', 'train_test_split', 'KFold', 'cross_validate', 'accuracy_score', 'KMeans', 'PCA', 'SVC', 'RidgeClassifier', 'SGDClassifier', 'LogisticRegression', 'SVC', 'LinearSVC', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'XGBClassifier', 'MultinomialNB', 'SelectFromModel', 'RandomForestClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'BaggingClassifier', 'VotingClassifier', 'RandomTreesEmbedding', 'KFold', 'roc_auc_score', 'plot_importance', 'make_scorer']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'isin', 'std'], 'pandas': [], 'scipy': [], 'matplotlib': [], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': [], 'hyperopt': [], 'functools': [], 'os': ['rename'], 'gc': [], 'string': [], 'warnings': [], 'time': []} axis_0: 1, axis_1: 5
tps21apr-feature-engineering-name-column.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'any', 'isna', 'drop', 'apply', 'apply', 'duplicated', 'apply', 'apply', 'apply', 'duplicated', 'duplicated', 'duplicated', 'apply', 'apply', 'head', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'copy', 'info'] ['pandas'] ['train_test_split', 'RandomForestClassifier']Dict:{'pandas': ['isna', 'read_csv'], 'sklearn': ['apply']} axis_0: 0, axis_1: 1
kidney-stone-prediction-eda-binary-classification.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'info', 'info', 'nunique', 'nunique', 'nunique', 'head', 'head', 'head', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'duplicated', 'duplicated', 'duplicated', 'min', 'max', 'min', 'max', 'min', 'max', 'drop', 'sum', 'isnull', 'corr', 'corr', 'sort_values', 'skew', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'drop', 'drop', 'head', 'drop', 'transform', 'transform', 'drop', 'transform', 'transform', 'to_csv', 'concat', 'duplicated', 'duplicated', 'min', 'max', 'min', 'head', 'isnull', 'quantile', 'quantile', 'dropna'] ['sys', 'pandas', 'matplotlib', 'numpy', 'scipy', 'IPython', 'sklearn', 'random', 'time', 'warnings', 'matplotlib', 'matplotlib.pyplot', 'matplotlib.pylab', 'seaborn', 'matplotlib.pyplot', 'seaborn'] ['display', 'HTML', 'display', 'svm', 'tree', 'linear_model', 'neighbors', 'naive_bayes', 'ensemble', 'discriminant_analysis', 'gaussian_process', 'OneHotEncoder', 'LabelEncoder', 'feature_selection', 'model_selection', 'metrics', 'scatter_matrix', 'XGBClassifier', 'train_test_split', 'accuracy_score', 'train_test_split', 'GridSearchCV', 'StandardScaler', 'PolynomialFeatures', 'LogisticRegression', 'accuracy_score', 'confusion_matrix', 'roc_auc_score']Dict:{'sys': [], '#access': [], 'to': [], 'system': [], 'parameters': [], 'https://docs': [], 'pandas': [], 'matplotlib': ['boxplot'], '#collection': [], 'of': [], 'functions': [], 'for': [], 'scientific': [], 'and': [], 'publication-ready': [], 'visualization': [], 'numpy': ['quantile', 'max', 'sum', 'min', 'info'], 'scipy': [], 'IPython': [], 'sklearn': [], 'machine': [], 'learning': [], 'algorithms': [], 'random': [], 'time': [], 'warnings': [], 'seaborn': ['boxplot'], 'xgboost': []} axis_0: 0, axis_1: 5
featureaggregator-automated.py : ['copy', 'agg', 'groupby', 'agg', 'groupby', 'reset_index', 'factorize', 'to_pickle', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'factorize', 'all', 'max', 'mean', 'drop', 'drop', 'drop', 'drop', 'apply', 'apply', 'replace', 'replace', 'replace', 'replace', 'replace', 'concat', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'notnull', 'isnull', 'mean', 'copy', 'to_csv'] ['gc', 'glob', 'os', 'time', 'matplotlib.pyplot', 'numpy', 'pandas', 'lightgbm'] ['KFold', 'StratifiedKFold']Dict:{'gc': [], 'glob': [], 'os': ['replace'], 'time': [], 'matplotlib': [], 'numpy': ['mean', 'copy', 'max', 'all'], 'pandas': ['to_pickle', 'read_csv', 'isnull', 'concat', 'factorize', 'notnull', 'merge'], 'lightgbm': [], 'sklearn': []} axis_0: 0, axis_1: 5
titanic-extensive-eda-and-6-models.py : ['join', 'read_csv', 'read_csv', 'head', 'head', 'value_counts', 'value_counts', 'map', 'head', 'map', 'head', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'head', 'map', 'max', 'head', 'value_counts', 'value_counts', 'value_counts', 'fillna', 'map', 'head', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'head', 'map', 'max', 'map', 'max', 'value_counts', 'head', 'value_counts', 'value_counts', 'value_counts', 'head', 'map', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'map', 'max', 'map', 'head', 'drop', 'drop', 'drop', 'head', 'head', 'info', 'head', 'drop', 'drop', 'drop', 'head', 'head', 'head', 'head', 'head', 'mean', 'mean', 'mean', 'mean', 'mean', 'head', 'head', 'mean', 'concat', 'to_csv', 'to_csv', 'mean'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'os', 'xgboost', 'numpy'] ['KNeighborsClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'GaussianNB', 'SVC', 'LogisticRegression', 'StandardScaler', 'OneHotEncoder', 'LabelEncoder', 'model_selection', 'train_test_split', 'accuracy_score', 'KFold', 'cross_val_score', 'LogisticRegression']Dict:{'numpy': ['mean', 'info', 'max'], 'pandas': ['concat', 'read_csv', 'value_counts'], 'seaborn': [], 'matplotlib': [], 'os': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 10
a-quick-way-to-make-your-first-submission-fast-ai.py : ['read_csv', 'read_csv', 'copy', 'concat', 'copy', 'copy', 'mean', 'to_csv'] ['math', 'pandas', 'numpy', 'xgboost'] ['rf_feat_importance', 'train_cats', 'proc_df', 'RandomForestRegressor', 'RandomForestClassifier', 'RandomizedSearchCV', 'CatBoostRegressor']Dict:{'fastai': [], 'math': [], '': [], 'pandas': ['concat', 'read_csv'], 'numpy': ['mean', 'copy'], 'sklearn': [], 'xgboost': [], 'catboost': []} axis_0: 0, axis_1: 0
getting-started-with-ai4code.py : ['rename_axis', 'assign', 'read_json', 'sort_index', 'swaplevel', 'set_index', 'concat', 'unique', 'read_csv', 'insert', 'sort_values', 'join', 'apply', 'groupby', 'reset_index', 'itertuples', 'set_index', 'apply', 'rename_axis', 'explode', 'read_csv', 'unique', 'astype', 'to_numpy', 'to_numpy', 'groupby', 'where', 'to_numpy', 'groupby', 'transform', 'astype', 'where', 'to_numpy', 'groupby', 'apply', 'groupby', 'reset_index', 'sort_values', 'head', 'unique', 'insert', 'apply', 'groupby', 'reset_index', 'sort_index', 'swaplevel', 'set_index', 'concat', 'transform', 'astype', 'where', 'to_numpy', 'groupby', 'apply', 'groupby', 'reset_index', 'sort_values', 'read_csv', 'rename', 'rename_axis', 'apply', 'join', 'to_csv'] ['json', 'numpy', 'pandas'] ['Path', 'sparse', 'tqdm', 'assert_frame_equal', 'GroupShuffleSplit', 'TfidfVectorizer', 'XGBRanker', 'bisect']Dict:{'json': [], 'pathlib': ['rename'], 'numpy': ['where', 'insert', 'unique'], 'pandas': [], 'scipy': [], 'tqdm': [], 'sklearn': [], 'xgboost': ['apply'], 'bisect': []} axis_0: 0, axis_1: 0
moa-ensemble.py : ['mean', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'copy', 'copy', 'copy', 'concat', 'concat', 'get_dummies', 'concat', 'get_dummies', 'copy', 'copy', 'reset_index', 'reset_index', 'concat', 'transform', 'transform', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'transform', 'transform', 'concat', 'transform', 'transform', 'concat', 'concat', 'set_index', 'copy', 'copy', 'set_index', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'mean', 'to_numpy', 'mean', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'to_numpy', 'mean', 'copy', 'pop', 'copy', 'copy', 'concat', 'concat', 'concat', 'reset_index', 'concat', 'reset_index', 'concat', 'concat', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'concat', 'concat', 'drop', 'drop', 'copy', 'copy', 'copy', 'copy', 'concat', 'concat', 'drop', 'drop', 'concat', 'concat', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'round', 'items', '__init__', 'eval', 'eval', 'items', 'dot', 'dot', 'dot', 'items', 'eval', 'sum', 'dot', 'sum', 'mean', 'mean', 'eval', 'eval', 'eval', 'copy', 'copy', 'copy', 'to_csv', 'copy', 'copy', 'copy', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'concat', 'to_csv'] ['pandas', 'numpy', 'random', 'os', 'tensorflow', 'tensorflow.keras.layers', 'tensorflow.keras.models', 'tensorflow.keras.backend', 'tensorflow_addons', 'sys', 'torch', 'time', 'torch', 'numpy', 'time', 'io', 'json', 'shutil', 'zipfile', 'time', 'torch', 'time', 'pickle'] ['WeightNormalization', 'ReduceLROnPlateau', 'ModelCheckpoint', 'EarlyStopping', 'MultilabelStratifiedKFold', 'tab_network', 'log_loss', 'VarianceThreshold', 'PCA', 'StandardScaler', 'QuantileTransformer', 'csc_matrix', 'abstractmethod', 'tab_network', 'unique_labels', 'roc_auc_score', 'mean_squared_error', 'accuracy_score', 'clip_grad_norm_', 'PredictDataset', 'create_dataloaders', 'create_explain_matrix', 'BaseEstimator', 'DataLoader', 'deepcopy', 'Path']Dict:{'pandas': ['concat', 'get_dummies', 'eval', 'read_csv'], 'numpy': ['mean', 'add', 'sum', 'round', 'dot', 'copy'], 'random': [], 'os': [], 'tensorflow': ['__init__'], 'tensorflow_addons': [], 'sys': [], 'iterstrat': [], 'pytorch_tabnet': [], 'sklearn': ['__init__'], 'torch': ['mean', 'add', 'sum', 'concat', 'round', 'dot'], 'time': [], 'scipy': ['mean', 'sum', 'dot', '__init__', 'copy'], 'abc': ['__init__'], 'copy': ['__init__'], 'io': [], 'json': [], 'pathlib': ['__init__'], 'shutil': ['copy'], 'zipfile': [], 'pickle': []} axis_0: 2, axis_1: 38
spaceship-titanic-nn-model-feature-eng.py : ['sum', 'isnull', 'sum', 'isnull', 'reset_index', 'nunique', 'groupby', 'sort_values', 'max', 'sum', 'isnull'] [] []Dict:{} axis_0: 0, axis_1: 0
fare-prediction-stacked-ensemble-xgboost-lgbm.py : ['read_csv', 'read_csv', 'head', 'tail', 'info', 'select_dtypes', 'mean', 'memory_usage', 'drop', 'drop', 'info', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'info', 'sum', 'isnull', 'dropna', 'to_datetime', 'to_datetime', 'describe', 'min', 'max', 'min', 'max', 'min', 'max', 'min', 'max', 'describe', 'count', 'count', 'sort_values', 'count', 'count', 'map', 'pivot_table', 'skew', 'read_csv', 'to_csv', 'head', 'read_csv', 'to_csv', 'head', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'os'] ['RandomForestRegressor', 'XGBRegressor', 'train_test_split', 'GridSearchCV', 'mean_squared_error', 'sqrt', 'skew']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'info'], 'pandas': ['to_datetime', 'pivot_table', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'math': [], 'scipy': [], 'os': []} axis_0: 0, axis_1: 2
spacehip-titanic-complete-data-understanding-ml.py : ['read_csv', 'read_csv', 'head', 'head', 'describe', 'describe', 'sum', 'isna', 'sum', 'isna', 'isna', 'isna', 'astype', 'apply', 'map', 'value_counts', 'drop_duplicates', 'rename', 'reset_index', 'value_counts', 'value_counts', 'unique', 'dropna', 'rename', 'reset_index', 'value_counts', 'value_counts', 'unique', 'dropna', 'rename', 'reset_index', 'value_counts', 'fillna', 'apply', 'apply', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'value_counts', 'value_counts', 'unique', 'dropna', 'rename', 'reset_index', 'value_counts', 'value_counts', 'unique', 'dropna', 'rename', 'reset_index', 'value_counts', 'boxplot', 'describe', 'describe', 'describe', 'describe', 'describe', 'describe', 'boxplot', 'describe', 'describe', 'describe', 'describe', 'describe', 'describe', 'boxplot', 'describe', 'describe', 'describe', 'describe', 'describe', 'describe', 'boxplot', 'describe', 'describe', 'describe', 'describe', 'describe', 'describe', 'boxplot', 'describe', 'describe', 'describe', 'describe', 'describe', 'describe', 'boxplot', 'describe', 'describe', 'describe', 'describe', 'describe', 'describe', 'sum', 'boxplot', 'describe', 'describe', 'describe', 'value_counts', 'unique', 'dropna', 'rename', 'reset_index', 'value_counts', 'head', 'sum', 'sum', 'isna', 'fillna', 'median', 'fillna', 'mode', 'sum', 'sum', 'isna', 'drop', 'astype', 'drop', 'keys', 'mean', 'array', 'where'] ['shap', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'mplcyberpunk', 'warnings'] ['colored', 'LabelEncoder', 'train_test_split', 'LogisticRegression', 'SVC', 'GaussianNB', 'RandomForestClassifier', 'GradientBoostingClassifier', 'XGBClassifier', 'accuracy_score']Dict:{'shap': [], 'numpy': ['mean', 'median', 'sum', 'where', 'unique', 'array'], 'pandas': ['isna', 'read_csv', 'value_counts', 'unique', 'array'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'mplcyberpunk': [], 'termcolor': [], 'sklearn': [], 'xgboost': ['apply'], 'warnings': []} axis_0: 0, axis_1: 3
an-introduction-to-xgboost-regression.py : ['read_csv', 'read_csv', 'copy', 'select_dtypes', 'drop', 'copy', 'select_dtypes', 'read_csv', 'to_csv', 'update'] ['pandas', 'numpy', 'xgboost', 'matplotlib.pyplot'] ['GridSearchCV', 'mean_squared_log_error', 'plot_importance']Dict:{'pandas': ['read_csv'], '': [], 'numpy': ['copy'], 'xgboost': [], 'sklearn': [], 'matplotlib': []} axis_0: 0, axis_1: 1
eda-talkingdata-temporal-click-count-plots.py : ['read_csv', 'read_csv', 'min', 'astype', 'drop', 'drop', 'max', 'add', 'sum', 'max', 'mean', 'max', 'sum'] ['matplotlib.pyplot', 'numpy', 'pandas', 'os', 'sys', 'time'] ['LogNorm']Dict:{'matplotlib': [], 'numpy': ['mean', 'add', 'max', 'sum', 'min'], 'pandas': ['read_csv'], 'os,': [], 'sys,': [], 'time': []} axis_0: 0, axis_1: 2
tutorial-preprocessing-processing-evaluation.py : ['read_csv', 'head', 'describe', 'value_counts', 'head', 'head', 'to_datetime', 'to_datetime', 'head', 'apply', 'keys', 'apply', 'head', 'describe', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'apply', 'head', 'describe', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'describe', 'head', 'apply', 'dropna', 'astype', 'head', 'sum', 'groupby', 'astype', 'sum', 'groupby', 'describe', 'hist', 'apply', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'head', 'array', 'array', 'dropna', 'astype', 'head', 'sum', 'groupby', 'head', 'sum', 'groupby', 'head', 'concat', 'dropna', 'apply', 'items', 'items', 'items', 'array', 'sum', 'cumsum', 'array', 'sum', 'drop', 'apply', 'apply', 'apply', 'apply', 'concat', 'drop', 'drop', 'head', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'astype', 'astype', 'head', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'astype', 'astype', 'head', 'read_csv', 'read_csv', 'drop', 'drop', 'apply', 'apply', 'apply', 'apply', 'concat', 'drop', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'apply', 'apply', 'apply', 'apply', 'concat', 'drop', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'astype', 'astype', 'drop', 'drop', 'drop', 'astype', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'transform', 'astype', 'astype', 'astype', 'astype', 'head', 'head', 'astype', 'astype', 'drop', 'head', 'read_csv', 'duplicated', 'rename', 'head', 'fillna'] ['os', 'pandas', 'numpy', 'json', 'matplotlib.pyplot', 'datetime', 'seaborn', 'matplotlib.cm', 'lightgbm', 'matplotlib.pyplot', 'collections', 'gc', 'time'] ['timedelta', 'date', 'preprocessing', 'mean_squared_error', 'GridSearchCV', 'train_test_split']Dict:{'os': ['rename'], 'pandas': ['read_csv', 'concat', 'value_counts', 'array', 'to_datetime'], 'numpy': ['array', 'sum', 'cumsum'], 'json': [], 'matplotlib': ['hist'], 'datetime': [], 'seaborn': [], 'lightgbm': [], 'sklearn': [], 'collections': [], 'gc;': [], 'gc': [], 'time;': [], 'time': []} axis_0: 2, axis_1: 15
a-walkthrough-and-a-challenge.py : ['drop', 'read_csv', 'dropna', 'head', 'describe', 'astype', 'cut', 'sort_index', 'value_counts', 'value_counts', 'sample', 'sample', 'sample', 'unique', 'map', 'sample', 'groupby', 'groupby', 'abs', 'abs', 'sample', 'sample', 'sample', 'groupby', 'groupby', 'agg', 'groupby', 'mean', 'groupby', 'groupby', 'agg', 'groupby', 'mean', 'groupby', 'read_csv', 'abs', 'abs', 'pop', 'describe', 'sample', 'groupby', 'agg', 'groupby', 'sort_index', 'mean', 'groupby', 'corr', 'array', 'mean', 'mean', 'mean', 'to_csv', 'describe', 'corr', 'to_csv', 'set_index', 'sort_values', 'to_csv', 'hist', 'copy', 'to_datetime', 'sub', 'sub', 'drop', 'min', 'min', 'min', 'head', 'min', 'describe', 'sample', 'groupby', 'groupby', 'sample', 'sort_values', 'agg', 'groupby', 'nunique', 'head', 'array', 'to_csv', 'to_csv', 'describe', 'astype', 'astype', 'astype', 'sample', 'array', 'array', 'to_csv', 'hist'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 're'] ['LinearRegression', 'train_test_split', 'mean_squared_error', 'RandomForestRegressor', 'RandomizedSearchCV']Dict:{'pandas': ['read_csv', 'cut', 'value_counts', 'unique', 'array', 'to_datetime'], 'numpy': ['mean', 'abs', 'min', 'unique', 'array', 'copy'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 'warnings': [], 're': ['sub']} axis_0: 0, axis_1: 1
titanic-case-study-one-ship-to-rule-sea.py : ['read_csv', 'read_csv', 'read_csv', 'copy', 'copy', 'drop', 'drop', 'head', 'info', 'describe', 'sum', 'isnull', 'insert', 'nunique', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'apply', 'apply', 'drop', 'drop', 'isnull', 'isnull', 'map', 'astype', 'map', 'astype', 'replace', 'map', 'astype', 'replace', 'map', 'astype', 'replace', 'replace', 'replace', 'replace', 'get_dummies', 'get_dummies', 'drop', 'drop', 'drop', 'drop', 'transform', 'transform', 'mean', 'concat', 'sort_values'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'plotly', 'plotly.express', 'matplotlib.pyplot', 'xgboost'] ['StandardScaler', 'ColumnTransformer', 'OneHotEncoder', 'svm', 'LogisticRegression', 'RandomForestClassifier', 'AdaBoostClassifier', 'LGBMClassifier', 'KNeighborsClassifier', 'GradientBoostingClassifier', 'metrics', 'KFold', 'cross_val_score']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'numpy': ['mean', 'median', 'sum', 'info', 'insert', 'copy'], 'matplotlib': [], 'seaborn': [], 'plotly': [], '': [], 'sklearn': [], 'xgboost': [], 'lightgbm': []} axis_0: 0, axis_1: 6
lgbm-google-store-revenue-prediction.py : ['to_datetime', 'apply', 'apply', 'apply', 'apply', 'read_csv', 'merge', 'drop', 'apply', 'apply', 'isnull', 'merge', 'drop', 'head', 'astype', 'astype', 'astype', 'astype', 'astype', 'agg', 'groupby', 'head', 'agg', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'join', 'drop', 'agg', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'join', 'drop', 'head', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'drop', 'fillna', 'drop', 'drop', 'nunique', 'drop', 'drop', 'count', 'drop', 'drop', 'head', 'get_dummies', 'get_dummies', 'align', 'replace', 'replace', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'astype', 'astype', 'astype', 'head', 'reset_index', 'sum', 'groupby', 'to_csv', 'head'] ['os', 'json', 'datetime', 'numpy', 'pandas', 'lightgbm', 'seaborn', 'matplotlib.pyplot'] ['literal_eval', 'json_normalize', 'mean_squared_error']Dict:{'os': ['replace'], 'json': [], 'datetime': [], 'numpy': ['sum'], 'pandas': [], 'lightgbm': [], 'seaborn': [], 'ast': [], 'matplotlib': [], 'sklearn': []} axis_0: 0, axis_1: 18
pgs-s3e7-eda-xgboost.py : ['read_csv', 'read_csv', 'read_csv', 'copy', 'copy', 'concat', 'drop_duplicates', 'reset_index', 'to_datetime', 'astype', 'astype', 'to_datetime', 'astype', 'astype', 'drop', 'drop', 'quantile', 'copy', 'to_numpy', 'pop', 'select_dtypes', 'drop', 'transform', 'drop', 'mean', 'array', 'mean', 'array', 'hist', 'read_csv', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'sklearn'] ['fast_eda', 'Pipeline', 'ColumnTransformer', 'OneHotEncoder', 'StandardScaler', 'OrdinalEncoder', 'MinMaxScaler', 'RobustScaler', 'roc_auc_score', 'train_test_split', 'cross_val_predict', 'KFold', 'StratifiedKFold', 'RepeatedKFold', 'RepeatedStratifiedKFold', 'RandomizedSearchCV', 'GridSearchCV', 'XGBClassifier', 'tqdm', 'train_test_split']Dict:{'fasteda': [], 'pandas': ['concat', 'array', 'to_datetime', 'read_csv'], 'numpy': ['mean', 'array', 'quantile', 'copy'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 'xgboost': [], 'tqdm': []} axis_0: 2, axis_1: 2
spaceshiptitanic-eda-tabtransformer-tensorflow.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'info', 'head', 'nunique', 'copy', 'drop', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'copy', 'astype', 'concat', 'drop', 'astype', 'to_numeric', 'astype', 'map', 'head', 'reset_index', 'query', 'reset_index', 'query', 'count', 'groupby', 'sum', 'astype', 'describe', 'describe', 'groupby', 'quantile', 'copy', 'quantile', 'where', 'describe', 'describe', 'groupby', 'corr', 'array', 'array', 'quantile', 'cut', 'copy', 'array', 'cut', 'map', 'fillna', 'mode', 'astype', 'info', 'cut', 'map', 'fillna', 'mode', 'astype', 'info', 'query', 'reset_index', 'query', 'reset_index', 'query', 'copy', 'pop', 'items', 'items', 'update', 'mean', 'var', 'unique', 'unique', 'map', 'map', 'take', 'update', 'concat', 'stack', 'concat', 'map', 'array', 'array', 'map', 'squeeze', 'where', 'to_csv', 'head', 'reset_index', 'query', 'reset_index', 'query', 'map', 'map', 'map', 'squeeze', 'where', 'drop', 'drop', 'to_csv', 'head'] ['numpy', 'pandas', 'scipy', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'plotly.graph_objects', 'os', 'pathlib', 'gc', 'sys', 're', 'math', 'random', 'time', 'datetime', 'sklearn', 'tensorflow', 'tensorflow_addons', 'warnings'] ['make_subplots', 'tqdm', 'StratifiedKFold', 'keras', 'layers']Dict:{'numpy': ['mean', 'take', 'stack', 'squeeze', 'quantile', 'var', 'sum', 'where', 'unique', 'info', 'array', 'copy'], 'pandas': ['read_csv', 'cut', 'concat', 'to_numeric', 'unique', 'array'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'os': [], 'pathlib': [], 'gc': [], 'sys': [], 're': [], 'math': [], '': [], 'random': [], 'time': [], 'datetime': [], 'tqdm': [], 'sklearn': [], 'tensorflow': [], 'tensorflow_addons': [], 'warnings': []} axis_0: 4, axis_1: 7
genetic-algorithm-main-part-20th-place.py : ['read_csv', 'read_csv', 'cumsum', 'sum', 'array', 'copy', 'copy', 'copy', 'copy', 'agg', 'groupby', 'mean', 'drop', 'merge', 'merge', 'merge', 'copy', 'drop', 'drop', 'set_index', 'to_csv', 'drop', 'drop', 'set_index', 'to_csv'] ['pandas', 'lightgbm', 'numpy', 'pickle'] ['StratifiedKFold']Dict:{'sklearn': [], 'pandas': ['array', 'merge', 'read_csv'], 'lightgbm': [], 'numpy': ['mean', 'sum', 'array', 'cumsum', 'copy'], 'pickle': []} axis_0: 0, axis_1: 5
train-infer-catalyst-pytorch-rnn-baseline.py : ['test', 'test', 'stack', 'test', '__init__', 'update', 'sum', 'sum', 'read_csv', 'head', 'to_csv'] ['json', 'torch', 'torch.nn.functional', 'catalyst.dl', 'catalyst.dl.utils', 'pandas', 'numpy'] ['nn', 'Dataset', 'DataLoader', 'LabelEncoder', 'OneHotEncoder']Dict:{'json': [], 'torch': [], 'sklearn': ['__init__'], 'catalyst': [], 'pandas': ['test', 'read_csv'], 'numpy': ['test', 'stack', 'sum']} axis_0: 1, axis_1: 1
xgboost-pyramid-test-predictions.py : ['read_parquet', 'sample', 'reset_index', 'head', '__init__', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'sum', 'copy', 'set_index', 'concat', 'drop_duplicates', 'read_parquet', 'set_index', 'merge', 'reset_index', 'sort_index', 'to_csv', 'head', 'read_parquet', 'copy', 'copy', 'copy', 'unique', 'cumsum', 'astype', 'unique', 'cumsum', 'unique', 'unique', 'read_csv', 'astype', 'set_index', 'merge', 'reset_index', 'astype', 'apply', 'set_index', 'concat', 'dropna', 'reset_index', 'to_csv', 'head', 'hist'] ['pandas', 'numpy', 'matplotlib.pyplot', 'gc', 'os', 'cupy', 'cudf', 'xgboost'] ['KFold']Dict:{'pandas': ['read_csv', 'concat', 'read_parquet', 'unique', 'array', 'merge'], 'matplotlib': ['hist'], 'sklearn': ['__init__'], 'xgboost': [], '=': [], '[]': []} axis_0: 1, axis_1: 1
house-price-prediction-simple-solution-top-3.py : ['read_csv', 'read_csv', 'head', 'any', 'isnull', 'sum', 'isnull', 'head', 'any', 'isnull', 'sum', 'isnull', 'dropna', 'drop', 'nunique', 'copy', 'copy', 'copy', 'get_dummies', 'get_dummies', 'get_dummies', 'align', 'align', 'to_csv', 'head'] ['numpy', 'pandas'] ['XGBRegressor', 'mean_absolute_error', 'train_test_split']Dict:{'numpy': ['sum', 'any', 'copy'], 'pandas': ['get_dummies', 'read_csv', 'isnull'], 'xgboost': [], 'sklearn': []} axis_0: 1, axis_1: 3
tps-feb-2021-xgboost-additional-features.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'pop', 'copy', 'copy', 'transform', 'sort_values', 'sort_values'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['KFold', 'mean_squared_error', 'LGBMRegressor', 'XGBRegressor', 'LabelEncoder', 'mutual_info_regression']Dict:{'sklearn': [], 'lightgbm': [], 'xgboost': [], 'numpy': ['copy'], 'pandas': ['read_csv'], 'matplotlib': [], 'seaborn': [], 'os': []} axis_0: 0, axis_1: 0
better-xgb-baseline-understanding-for-beginners.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'head', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'hist', 'clip', 'hist', 'clip', 'transform', 'groupby', 'hist', 'clip', 'agg', 'groupby', 'map', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'head', 'hist', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'head', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'reset_index', 'sort_values', 'head', 'mean', 'groupby', 'sort_values', 'last', 'groupby', 'mean', 'groupby', 'join', 'reset_index', 'copy', 'sum', 'groupby', 'sort_values', 'mean', 'groupby', 'isin', 'isin', 'mean', 'median', 'median', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'head', 'to_dict', 'set_index', 'copy', 'map', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'xgboost'] ['tqdm']Dict:{'gc': [], 'numpy': ['mean', 'median', 'abs', 'sum', 'unique', 'clip', 'isin', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'to_datetime'], 'xgboost': [], 'tqdm': []} axis_0: 0, axis_1: 0
tps-sep22-mitigating-holidays-outliers.py : ['items', 'items', 'to_datetime', 'head', 'read_csv', 'read_csv', 'copy', 'astype', 'eq', 'astype', 'eq', 'astype', 'eq', 'eq', 'eq', 'eq', 'eq', 'set_index', 'drop', 'reset_index', 'sum', 'groupby', 'drop', 'reset_index', 'first', 'groupby', 'pop', 'ne', 'eq', 'drop', 'abs', 'abs', 'abs', 'abs', 'query', 'max', 'iterrows', 'max', 'eq', 'reset_index', 'reset_index', 'eq', 'eq', 'eq', 'eq', 'set_index', 'set_index', 'merge', 'mean', 'copy', 'sum', 'groupby', 'transform', 'groupby', 'sum', 'reset_index', 'rename', 'unique', 'eq', 'eq', 'query', 'iterrows'] ['dateutil.easter', 'holidays', 'matplotlib', 'matplotlib.cm', 'matplotlib.colors', 'matplotlib.pyplot', 'matplotlib.ticker', 'numpy', 'pandas', 'plotly.express', 'plotly.graph_objects', 'plotly.io', 'seaborn'] ['HTML', 'print', 'make_subplots', 'Ridge', 'Lasso', 'LinearRegression', 'make_scorer', 'mean_squared_error', 'GroupKFold', 'cross_validate', 'make_pipeline', 'StandardScaler', 'MinMaxScaler']Dict:{'IPython': [], 'rich': [], 'plotly': [], 'sklearn': ['transform'], 'dateutil': [], 'holidays': [], 'matplotlib': [], 'numpy': ['mean', 'max', 'abs', 'sum', 'unique', 'copy'], 'pandas': ['to_datetime', 'merge', 'unique', 'read_csv'], 'seaborn': []} axis_0: 1, axis_1: 1
home-credit-bureau-data-feature-engineering.py : ['read_csv', 'read_csv', 'rename', 'reset_index', 'count', 'groupby', 'merge', 'rename', 'reset_index', 'nunique', 'groupby', 'merge', 'rename', 'reset_index', 'count', 'groupby', 'merge', 'rename', 'reset_index', 'nunique', 'groupby', 'merge', 'apply', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'groupby', 'reset_index', 'apply', 'sort_values', 'diff', 'groupby', 'astype', 'fillna', 'merge', 'apply', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'apply', 'groupby', 'reset_index', 'apply', 'sort_values', 'diff', 'groupby', 'astype', 'fillna', 'merge', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'isnull', 'fillna', 'fillna', 'rename', 'reset_index', 'sum', 'groupby', 'rename', 'reset_index', 'sum', 'groupby', 'merge', 'merge', 'fillna', 'fillna', 'rename', 'reset_index', 'sum', 'groupby', 'rename', 'reset_index', 'sum', 'groupby', 'merge', 'merge', 'fillna', 'rename', 'reset_index', 'mean', 'groupby', 'merge'] ['numpy', 'pandas', 'sys', 'warnings', 'gc', 'gc'] []Dict:{'numpy': ['mean', 'diff', 'sum'], 'pandas': ['merge', 'read_csv', 'isnull'], 'sys': [], 'warnings': [], 'gc': []} axis_0: 0, axis_1: 0
bike-sharing-demand-rnn.py : ['read_csv', 'read_csv', 'read_csv', 'mean', 'head', 'head', 'head', 'asfreq', 'resample', 'fillna', 'fillna', 'interpolate', 'asfreq', 'resample', 'fillna', 'interpolate', 'mean', 'head', 'apply', 'apply', 'value_counts', 'copy', 'array', 'array', 'concat', 'copy', 'mean', 'std', 'add', 'add', 'add', 'add', 'where', 'interpolate', 'copy', 'mean', 'std', 'add', 'add', 'add', 'add', 'concat', 'copy', 'mean', 'std', 'where', 'interpolate', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'datetime', 'calendar', 'warnings'] ['train_test_split', 'MinMaxScaler', 'mean_squared_error', 'Sequential', 'LSTM', 'SimpleRNN', 'Dense', 'Activation', 'Dropout', 'RMSprop', 'Adam']Dict:{'numpy': ['mean', 'add', 'array', 'where', 'std', 'copy'], 'pandas': ['concat', 'array', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'os': [], 'datetime': [], 'calendar': [], 'sklearn': [], 'keras': [], 'warnings': []} axis_0: 6, axis_1: 2
eda-and-feature-engineering-keystroke-measures.py : ['read_csv', 'read_csv', 'head', 'set_index', 'info', 'select_dtypes', 'describe', 'describe', 'set_index', 'idxmin', 'groupby', 'set_index', 'idxmax', 'groupby', 'value_counts', 'groupby', 'agg', 'mean', 'shift', 'agg', 'median', 'shift', 'agg', 'std', 'shift', 'agg', 'sum', 'shift', 'shift', 'agg', 'sum', 'shift', 'agg', 'sum', 'shift', 'corr', 'corr', 'drop', 'reset_index', 'sample', 'reset_index', 'sample', 'sort_values'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'xgboost'] ['StandardScaler', 'RandomForestRegressor']Dict:{'pandas': ['read_csv', 'value_counts'], 'numpy': ['mean', 'median', 'sum', 'info', 'std'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 1
simple-eda-geo-data-time-series.py : ['read_csv', 'read_csv', 'merge', 'info', 'info', 'info', 'astype', 'astype', 'mean', 'median', 'std', 'describe', 'boxplot', 'abs', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'quantile', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'dropna', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'median', 'groupby', 'median', 'groupby', 'mean', 'groupby', 'reset_index', 'set_index', 'reset_index', 'set_index', 'items', 'reset_index'] ['pandas', 'numpy', 'statsmodels.api', 'time', 'matplotlib.pyplot', 'seaborn', 'folium', 'pickle', 'gc', 'warnings', 'plotly', 'plotly.figure_factory', 'plotly.graph_objs'] ['stats', 'rcParams', 'adfuller', 'Prophet', 'Spectral4', 'figure', 'output_notebook', 'show', 'Scatter', 'Figure', 'Layout', 'download_plotlyjs', 'init_notebook_mode', 'plot', 'iplot', 'MiniBatchKMeans']Dict:{'pandas': ['merge', 'read_csv'], 'numpy': ['mean', 'median', 'quantile', 'abs', 'info', 'std'], 'scipy': ['describe'], 'pylab': ['items'], 'statsmodels': [], 'time': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'folium': [], 'fbprophet': [], 'pickle': [], 'gc': [], 'warnings': [], 'bokeh': [], 'plotly': [], '#': [], 'visualization': [], 'sklearn': []} axis_0: 1, axis_1: 0
llm-detect-ai-gt-sub.py : ['read_csv', 'read_csv', 'rename', 'map', 'sample', 'join', 'join', 'join', 'concat', 'apply', 'replace', 'read_csv', 'replace', 'apply', 'concat', 'transform', 'apply', 'to_csv'] ['numpy', 'pandas', 'regex', 'xgboost', 'language_tool_python', 'random'] ['LogisticRegression', 'SGDClassifier', 'TfidfVectorizer', 'VotingClassifier', 'make_scorer', 'accuracy_score', 'XGBClassifier', 'KNeighborsClassifier', 'ProcessPoolExecutor', 'MultinomialNB']Dict:{'numpy': [], 'pandas': ['concat', 'read_csv'], 'regex': [], 'sklearn': [], 'xgboost': ['apply'], 'language_tool_python': [], 'concurrent': ['map']} axis_0: 1, axis_1: 0
simple-nn-tps-nov-21.py : ['read_csv', 'read_csv', 'drop', 'drop', 'skew', 'skew', 'median', 'median', 'var', 'var', 'mean', 'mean', 'std', 'std', 'median', 'median', 'skew', 'skew', 'max', 'max', 'var', 'var', 'copy', 'copy', 'copy', 'transform', 'transform', 'concat', 'update', 'mean', 'std', 'nunique', 'min', 'read_csv', 'mean', 'to_csv', 'head'] ['numpy', 'pandas', 'tensorflow', 'random', 'os', 'matplotlib.pyplot'] ['StandardScaler', 'MinMaxScaler', 'make_pipeline', 'make_column_transformer', 'keras', 'layers', 'callbacks', 'roc_auc_score', 'log_loss', 'KFold', 'StratifiedKFold', 'StandardScaler', 'RobustScaler', 'PowerTransformer']Dict:{'numpy': ['mean', 'median', 'max', 'var', 'min', 'std', 'copy'], 'pandas': ['concat', 'read_csv'], 'sklearn': ['transform'], 'tensorflow': ['concat'], 'random': [], 'os': [], 'matplotlib': []} axis_0: 0, axis_1: 28
single-model-lgbm-kalman-filter.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'concat', 'drop', 'drop', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'ewm', 'std', 'ewm', 'fillna', 'concat', 'reset_index', 'copy', 'concat', 'copy', 'copy', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'std', 'rolling', 'shift', 'transform', 'groupby', 'var', 'rolling', 'shift', 'transform', 'groupby', 'min', 'rolling', 'shift', 'transform', 'groupby', 'max', 'rolling', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'std', 'rolling', 'shift', 'transform', 'groupby', 'var', 'rolling', 'shift', 'transform', 'groupby', 'min', 'rolling', 'shift', 'transform', 'groupby', 'max', 'rolling', 'shift', 'copy', 'drop', 'reset_index', 'sort_values', 'apply', 'join', 'mean', 'groupby', 'median', 'groupby', 'max', 'groupby', 'min', 'groupby', 'std', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'skew', 'apply', 'groupby', 'kurtosis', 'apply', 'groupby', 'mean', 'abs', 'diff', 'apply', 'groupby', 'max', 'abs', 'apply', 'groupby', 'min', 'abs', 'map', 'to_dict', 'reset_index', 'astype', 'round', 'clip', 'astype', 'round', 'clip', 'drop', 'drop', 'reset_index', 'reset_index', 'concat', 'concat', 'to_csv'] ['numpy', 'pandas', 'math', 'matplotlib.pyplot', 'seaborn', 'warnings', 'gc', 'lightgbm', 'os'] ['GroupKFold', 'StratifiedKFold', 'train_test_split', 'metrics', 'tqdm', 'signal', 'KalmanFilter']Dict:{'numpy': ['mean', 'median', 'max', 'var', 'abs', 'sum', 'round', 'min', 'clip', 'diff', 'std', 'copy'], 'pandas': ['concat', 'read_csv'], 'math': [], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'gc': [], 'lightgbm': [], 'sklearn': [], 'tqdm': [], 'scipy': [], 'os': [], 'pykalman': []} axis_0: 1, axis_1: 2
feature-engineering-modeling-smoker-status.py : ['read_csv', 'read_csv', 'read_csv', 'dropna', 'head', 'any', 'duplicated', 'any', 'duplicated', 'head', 'drop', 'drop', 'reset_index', 'concat', 'reset_index', 'concat', 'head', 'sum', 'isna', 'sum', 'isna', 'nunique', 'count', 'select_dtypes', 'head', 'boxplot', 'quantile', 'quantile', 'any', 'any', 'any', 'apply', 'apply', 'apply', 'apply', 'get_dummies', 'apply', 'to_numeric', 'drop', 'to_csv', 'to_csv', 'drop', 'read_csv', 'to_csv', 'head'] ['warnings', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'math', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'missingno', 'warnings', 'lightgbm', 'time', 'optuna', 'warnings', 'optuna', 'optuna', 'optuna', 'lightgbm', 'lightgbm', 'xgboost', 'optuna', 'lightgbm', 'xgboost', 'optuna'] ['train_test_split', 'accuracy_score', 'neighbors', 'KNeighborsClassifier', 'HTML', 'confusion_matrix', 'classification_report', 'GridSearchCV', 'ROCAUC', 'ListedColormap', 'fast_eda', 'print', 'fast_eda', 'skew', 'XGBClassifier', 'collect', 'roc_auc_score', 'StandardScaler', 'LabelEncoder', 'resample', 'LGBMClassifier', 'StratifiedKFold', 'GridSearchCV', 'train_test_split', 'LinearRegression', 'LogisticRegression', 'SVC', 'SimpleImputer', 'RandomForestClassifier', 'enable_hist_gradient_boosting', 'HistGradientBoostingClassifier', 'StratifiedKFold', 'roc_auc_score', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'RandomForestClassifier', 'StratifiedKFold', 'roc_auc_score', 'StratifiedKFold', 'roc_auc_score', 'make_scorer', 'roc_auc_score', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'XGBClassifier', 'AdaBoostClassifier', 'RandomForestClassifier', 'enable_hist_gradient_boosting', 'HistGradientBoostingClassifier', 'CatBoostClassifier', 'StratifiedKFold', 'roc_auc_score', 'AdaBoostClassifier', 'RandomForestClassifier', 'GradientBoostingClassifier', 'enable_hist_gradient_boosting', 'HistGradientBoostingClassifier', 'CatBoostClassifier', 'StratifiedKFold', 'roc_auc_score']Dict:{'warnings': [], 'pandas': ['isna', 'read_csv', 'concat', 'get_dummies', 'to_numeric'], 'numpy': ['quantile', 'sum', 'any'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'IPython': [], 'yellowbrick': [], 'fasteda': [], 'plotly': [], 'math': [], 'rich': [], 'missingno': [], 'scipy': [], 'xgboost': [], 'gc': [], 'lightgbm': [], 'time': [], 'optuna': [], 'catboost': []} axis_0: 0, axis_1: 7
amex-borutashap-feature-selection.py : ['read_csv', 'astype', 'apply', 'set_axis', 'drop', 'read_pickle', 'read_pickle', 'astype', 'drop', 'cumsum', 'sum', 'sum', 'sum', 'cumsum', 'sum', 'sum', 'sum'] ['os', 'gc', 'glob', 'tqdm', 'numpy', 'pandas', 'xgboost'] ['train_test_split', 'BorutaShap']Dict:{'os': [], 'gc': [], 'glob': [], 'tqdm': [], 'numpy': ['sum', 'cumsum'], 'pandas': ['read_pickle', 'read_csv'], 'sklearn': [], 'xgboost': [], 'BorutaShap': []} axis_0: 0, axis_1: 2
titanic-data-analysis.py : ['read_csv', 'set_index', 'read_csv', 'set_index', 'fillna', 'head', 'info', 'describe', 'sum', 'isnull', 'corr', 'value_counts', 'sum', 'sum', 'sum', 'sum', 'boxplot', 'value_counts', 'sum', 'isnull', 'mean', 'groupby', 'boxplot', 'sum', 'isnull', 'value_counts', 'map', 'map', 'value_counts', 'map', 'describe', 'head', 'value_counts', 'sum', 'isnull', 'value_counts', 'map', 'value_counts', 'map', 'describe', 'value_counts', 'mean', 'groupby', 'mean', 'groupby', 'fillna', 'median', 'describe', 'head', 'cut', 'describe', 'value_counts', 'mean', 'groupby', 'sum', 'count', 'sum', 'count', 'sum', 'count', 'describe', 'value_counts', 'sum', 'isnull', 'value_counts', 'value_counts', 'describe', 'fillna', 'mean', 'boxplot', 'sum', 'isnull', 'describe', 'drop', 'head', 'head', 'describe', 'value_counts', 'sum', 'isnull', 'fillna', 'mode', 'isnull', 'isnull', 'astype', 'isnull', 'replace', 'sum', 'isnull', 'mean', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'sum', 'isnull', 'fillna', 'median', 'drop', 'sum', 'isnull', 'head', 'head', 'map', 'map', 'value_counts', 'replace', 'replace', 'replace', 'value_counts', 'replace', 'replace', 'replace', 'value_counts', 'map', 'boxplot', 'map', 'describe', 'map', 'value_counts', 'map', 'value_counts', 'map', 'value_counts', 'map', 'value_counts', 'map', 'value_counts', 'map', 'value_counts', 'map', 'value_counts', 'map', 'value_counts', 'head', 'drop', 'drop', 'head', 'info', 'info', 'head', 'set_index', 'set_index', 'concat', 'concat', 'drop', 'info', 'info', 'corr', 'head', 'head', 'pop', 'set_index', 'drop', 'head', 'head', 'drop', 'sum', 'isnull', 'fillna', 'mean', 'corr', 'drop', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'astype', 'rename', 'drop', 'insert', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 'plotly.express'] ['make_column_selector', 'OneHotEncoder', 'MinMaxScaler', 'LogisticRegression', 'KNeighborsClassifier', 'accuracy_score', 'learning_curve']Dict:{'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts'], 'numpy': ['mean', 'median', 'std', 'sum', 'info', 'insert'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'warnings': [], 'plotly': [], 'sklearn': []} axis_0: 5, axis_1: 20
don-t-get-kicked-pipeline-improved.py : ['read_csv', 'read_csv', 'head', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'drop', 'sum', 'sum', 'cumsum', 'apply', 'to_csv'] ['pandas', 'numpy', 'time'] ['make_pipeline', 'make_column_transformer', 'SelectKBest', 'chi2', 'f_classif', 'VarianceThreshold', 'SimpleImputer', 'KNNImputer', 'MissingIndicator', 'KBinsDiscretizer', 'OneHotEncoder', 'MinMaxScaler', 'PCA', 'RandomForestClassifier', 'ExtraTreesClassifier', 'train_test_split', 'RandomizedSearchCV']Dict:{'pandas': ['read_csv'], 'numpy': ['sum', 'cumsum'], 'sklearn': ['transform'], 'time': []} axis_0: 0, axis_1: 1
feature-engineering-sample.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'dropna', 'replace', 'drop', 'drop', 'pop', 'pop', 'unique', 'sort_values', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'min', 'rolling', 'max', 'rolling', 'std', 'rolling', 'fillna', 'mean', 'ewm', 'mean', 'ewm', 'mean', 'rolling', 'mean', 'rolling', 'astype', 'to_numeric', 'astype', 'to_numeric', 'astype', 'to_numeric', 'astype', 'to_numeric', 'astype', 'to_numeric', 'to_datetime', 'where', 'where', 'where', 'where', 'where', 'set_axis', 'merge', 'drop'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'jpx_tokyo_market_prediction', 'warnings', 'gc', 'datetime', 'time'] ['tqdm', 'train_test_split']Dict:{'numpy': ['mean', 'max', 'where', 'min', 'unique', 'std'], 'pandas': ['read_csv', 'to_numeric', 'unique', 'merge', 'to_datetime'], 'os': ['replace'], 'matplotlib': [], 'tqdm': [], 'jpx_tokyo_market_prediction': [], 'sklearn': [], 'warnings;': [], 'warnings': [], 'gc': [], 'datetime': [], 'time': []} axis_0: 0, axis_1: 4
all-you-need-is-pca-lb-0-11421-top-4.py : ['read_csv', 'read_csv', 'boxplot', 'drop', 'concat', 'drop', 'sum', 'isnull', 'sort_values', 'agg', 'groupby', 'qcut', 'agg', 'groupby', 'transform', 'groupby', 'fillna', 'median', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'mode', 'sum', 'isnull', 'sum', 'isnull', 'astype', 'agg', 'groupby', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'drop', 'drop', 'skew', 'select_dtypes', 'apply', 'skew', 'get_dummies', 'copy', 'head', 'transform', 'transform', 'sort_values', 'sort_values', 'transform', 'transform', 'transform', 'mean', 'std', 'mod', 'mod', 'array', 'sum', 'mean', 'mean', 'mod', 'mod', 'mod', 'mod', 'mean', 'mod', 'mod', 'mod', 'mean', 'mean', 'mean', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['BaseEstimator', 'TransformerMixin', 'RegressorMixin', 'clone', 'LabelEncoder', 'RobustScaler', 'StandardScaler', 'mean_squared_error', 'Pipeline', 'make_pipeline', 'skew', 'PCA', 'KernelPCA', 'Imputer', 'cross_val_score', 'GridSearchCV', 'KFold', 'LinearRegression', 'Ridge', 'Lasso', 'RandomForestRegressor', 'GradientBoostingRegressor', 'ExtraTreesRegressor', 'SVR', 'LinearSVR', 'ElasticNet', 'SGDRegressor', 'BayesianRidge', 'KernelRidge', 'XGBRegressor']Dict:{'numpy': ['mean', 'median', 'sum', 'array', 'mod', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'qcut', 'array'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'warnings': [], 'sklearn': [], 'scipy': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 5
house-price-prediction-lasso-ridge-and-more.py : ['read_csv', 'read_csv', 'head', 'sort_values', 'corr', 'drop', 'where', 'head', 'sort_values', 'copy', 'drop', 'drop', 'drop', 'drop', 'concat', 'value_counts', 'duplicated', 'sum', 'sum', 'isnull', 'head', 'sort_values', 'sum', 'isnull', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'select_dtypes', 'fillna', 'select_dtypes', 'fillna', 'select_dtypes', 'fillna', 'select_dtypes', 'fillna', 'select_dtypes', 'fillna', 'select_dtypes', 'fillna', 'transform', 'groupby', 'fillna', 'value_counts', 'head', 'sort_values', 'sum', 'isnull', 'fillna', 'mode', 'describe', 'astype', 'astype', 'astype', 'select_dtypes', 'skew', 'query', 'rename', 'sort_values', 'get_dummies', 'drop', 'drop', 'concat', 'head', 'sort_values', 'tail', 'sort_values', 'where'] ['warnings', 'pandas', 'numpy', 'matplotlib.pyplot', 'matplotlib', 'seaborn', 'proplot', 'matplotlib.ticker', 'matplotlib.ticker'] ['boxcox1p', 'boxcox_normmax', 'Ridge', 'RidgeCV', 'Lasso', 'LassoCV', 'train_test_split', 'mean_squared_error', 'GridSearchCV', 'RobustScaler', 'KFold', 'SVR']Dict:{'warnings': [], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'numpy': ['where', 'median', 'sum', 'copy'], 'matplotlib': [], 'seaborn': [], 'proplot': [], 'scipy': [], 'sklearn': []} axis_0: 0, axis_1: 3
eda-feature-engineering-xgb-lgbm.py : ['read_csv', 'replace', 'info', 'read_csv', 'replace', 'info', 'sample', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'drop', 'drop', 'transform', 'transform', 'value_counts', 'transform', 'value_counts', 'transform', 'value_counts', 'sort_values', 'mean', 'groupby', 'astype', 'map', 'map', 'map', 'map', 'astype', 'map', 'map', 'map', 'map', 'drop', 'drop', 'value_counts', 'apply', 'value_counts', 'apply', 'map', 'map', 'map', 'map', 'map', 'map', 'drop', 'drop', 'drop', 'drop', 'qcut', 'sort_values', 'mean', 'groupby', 'astype', 'astype', 'drop', 'cut', 'sort_values', 'mean', 'groupby', 'drop', 'to_csv', 'to_csv', 'astype', 'astype', 'get_dummies', 'drop', 'drop', 'get_dummies', 'drop', 'drop', 'value_counts', 'drop', 'corr', 'copy', 'sum', 'where', 'copy', 'sum', 'sum', 'sum', 'sum', 'where', 'isin', 'set_index', 'where', 'value_counts', 'read_csv', 'to_csv'] ['seaborn', 'pandas', 'matplotlib.pyplot', 'numpy', 'scipy.stats', 'seaborn', 'warnings', 'xgboost', 'optuna', 'time'] ['FunctionTransformer', 'ColumnTransformer', 'PowerTransformer', 'FunctionTransformer', 'ColumnTransformer', 'PowerTransformer', 'StandardScaler', 'SimpleImputer', 'metrics', 'mean_absolute_error', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'cross_validate', 'StratifiedKFold', 'RepeatedStratifiedKFold', 'RepeatedKFold', 'mean_squared_error', 'r2_score', 'LinearRegression', 'LogisticRegression', 'KNeighborsClassifier', 'SVC', 'DecisionTreeClassifier', 'RandomForestClassifier', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'GaussianNB', 'confusion_matrix', 'ConfusionMatrixDisplay', 'roc_auc_score']Dict:{'seaborn': [], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'get_dummies', 'qcut'], 'matplotlib': [], 'numpy': ['mean', 'sum', 'where', 'isin', 'info', 'copy'], 'scipy': [], 'sklearn': [], 'warnings': [], 'xgboost': ['apply'], 'optuna': [], 'lightgbm': [], 'catboost': [], 'time': []} axis_0: 0, axis_1: 1
pg-s3-e23-eda-modeling-ensemle-nn.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'dropna', 'drop', 'drop', 'concat', 'drop_duplicates', 'concat', 'head', 'nunique', 'describe', 'sum', 'isna', 'sum', 'isna', 'nunique', 'count', 'unique', 'corr', 'concat', 'assign', 'assign', 'boxplot', 'boxplot', 'map', 'apply', 'notna', 'isna', 'drop', 'mean', 'concat', 'drop', 'drop', 'sort_values', 'head', 'drop', 'items', 'keys', 'keys', 'drop', 'items', 'mean', 'apply', 'mean', 'copy', 'to_csv', 'head', 'to_csv', 'head', 'to_csv', 'head', '__init__', 'squeeze', 'eval', 'to_csv', 'head'] ['numpy', 'pandas', 'math', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'optuna', 'torch', 'torch.nn', 'torch.optim', 'warnings'] ['stats', 'variance_inflation_factor', 'Counter', 'MinMaxScaler', 'StandardScaler', 'MaxAbsScaler', 'RobustScaler', 'PowerTransformer', 'QuantileTransformer', 'OrdinalEncoder', 'LabelEncoder', 'SimpleImputer', 'train_test_split', 'cross_val_score', 'KFold', 'StratifiedKFold', 'train_test_split', 'RepeatedStratifiedKFold', 'RFE', 'RFECV', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'RandomForestClassifier', 'ExtraTreesClassifier', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'DataLoader', 'TensorDataset', 'roc_auc_score', 'roc_curve', 'make_scorer', 'f1_score', 'auc', 'confusion_matrix', 'classification_report', 'accuracy_score', 'Style', 'Fore']Dict:{'numpy': ['mean', 'squeeze', 'sum', 'unique', 'copy'], 'pandas': ['isna', 'read_csv', 'eval', 'concat', 'notna', 'unique'], 'math': [], 'scipy': ['describe'], 'statsmodels': [], 'collections': ['items', 'keys', '__init__', 'copy'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'sklearn': ['__init__'], 'xgboost': ['apply', '__init__'], 'lightgbm': ['__init__'], 'catboost': [], 'optuna': [], 'torch': ['__init__'], 'warnings': [], 'colorama': ['__init__']} axis_0: 1, axis_1: 8
study-note-feature-engineer-is-important.py : ['read_csv', 'apply', 'head', 'read_csv', 'head', 'merge', 'head', 'read_csv', 'apply', 'head', 'reset_index', 'mean', 'groupby', 'head', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'head', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'head', 'merge', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', 'mean', 'to_csv'] ['pandas', 'numpy', 'gc', 're', 'random', 'warnings', 'lightgbm'] ['Counter', 'defaultdict', 'metrics', 'model_selection', 'LabelEncoder']Dict:{'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'numpy': ['mean', 'median', 'max', 'abs', 'sum', 'min', 'unique', 'std'], 'gc#垃圾回收模块': [], 're#用于正则表达式提取': [], 'collections': [], 'random': [], 'warnings#避免一些可以忽略的报错': [], 'sklearn': [], 'lightgbm': []} axis_0: 1, axis_1: 6
wids-datathon-2022-explainable-ai-walkthrough.py : ['update', 'read_csv', 'read_csv', 'select_dtypes', 'head', 'isna', 'any', 'isnull', 'sum', 'isna', 'rename', 'ne', 'replace', 'replace', 'transform', 'transform', 'isna', 'head', 'describe', 'drop', 'drop', 'transform', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'datetime', 'random', 'seaborn', 'matplotlib.pyplot', 'warnings', 'matplotlib.pyplot', 'seaborn', 'shap', 'copy', 'xgboost', 'eli5', 'lime', 'lime.lime_tabular'] ['LabelEncoder', 'mean_squared_error', 'stats', 'SimpleImputer', 'StandardScaler', 'train_test_split', 'PermutationImportance', 'explained_variance_score']Dict:{'numpy': ['sum', 'any'], 'pandas': ['isna', 'read_csv', 'isnull'], 'datetime': [], 'random': [], 'seaborn': [], 'matplotlib': [], 'warnings': [], 'sklearn': [], 'scipy': ['describe'], 'shap': [], 'copy': [], 'xgboost': [], 'eli5': [], 'lime': []} axis_0: 0, axis_1: 0
random-forest-with-only-3-features.py : ['read_csv', 'read_csv', 'reset_index', 'concat', 'head', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'mean', 'groupby', 'fillna', 'isnull', 'fillna', 'copy', 'isnull', 'isnull', 'copy', 'isnull', 'isnull', 'copy', 'isnull', 'isnull', 'copy', 'isnull', 'isnull', 'sum', 'isnull', 'replace', 'value_counts', 'head', 'astype', 'astype', 'median', 'groupby', 'mean', 'apply', 'groupby', 'fillna', 'median', 'copy', 'factorize', 'factorize', 'factorize', 'factorize', 'drop', 'head', 'corr', 'head', 'drop', 'head', 'drop', 'head', 'value_counts', 'head', 'get_dummies', 'head', 'insert', 'drop', 'head', 'head', 'mean', 'std', 'tail', 'drop', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'warnings'] ['distance', 'RandomForestClassifier', 'GridSearchCV', 'LabelEncoder', 'StratifiedKFold', 'cross_val_score', 'mutual_info_classif']Dict:{'numpy': ['mean', 'median', 'std', 'sum', 'insert', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'factorize', 'get_dummies'], 'Levenshtein': [], 'sklearn': [], 'seaborn': [], 'matplotlib': [], 'warnings': []} axis_0: 0, axis_1: 5
what-s-cooking.py : ['join', 'read_json', 'read_json', 'info', 'info', 'head', 'unique', 'value_counts', 'max', 'min', 'value_counts', 'value_counts', 'boxplot', 'join', 'join', 'sort_values', 'reset_index', 'groupby', 'sort_values', 'join', 'replace', 'sub', 'sub', 'join', 'head', 'mean', 'array', 'mean', 'array', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'sort_values', 'transform', 'to_csv', 'head'] ['unidecode', 'pandas', 'random', 'json', 'numpy', 're', 'matplotlib.pyplot', 'seaborn', 'plotly', 'plotly.offline', 'plotly.graph_objs', 'plotly.express', 'warnings', 'time'] ['interact', 'Counter', 'chain', 'TfidfVectorizer', 'tqdm', 'tools', 'download_plotlyjs', 'init_notebook_mode', 'plot', 'iplot', 'CountVectorizer', 'FastText', 'Word2Vec', 'TruncatedSVD', 'CountVectorizer', 'TfidfVectorizer', 'LogisticRegression', 'accuracy_score', 'KFold', 'cross_validate', 'train_test_split', 'LabelEncoder', 'MultiLabelBinarizer', 'FunctionTransformer', 'LabelEncoder', 'make_pipeline', 'make_union', 'LabelEncoder', 'SVC', 'OneVsRestClassifier', 'model_selection', 'WordNetLemmatizer']Dict:{'ipywidgets': [], 'unidecode': [], 'pandas': ['unique', 'read_json', 'array', 'value_counts'], 'random': [], 'json': [], 'collections': [], 'itertools': [], 'sklearn': [], 'numpy': ['mean', 'max', 'min', 'unique', 'info', 'array'], 're': ['sub'], 'tqdm': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'gensim': [], 'nltk': [], 'warnings': [], 'time': []} axis_0: 2, axis_1: 0
ubiquant-eda.py : ['sum', 'sum', 'isnull', 'read_parquet', 'head', 'unique', 'groupby', 'groupby', 'unique', 'idxmax', 'max', 'mean', 'idxmin', 'min', 'sample', 'sample', 'apply', 'describe', 'skew', 'kurtosis', 'where', 'head', 'sum', 'groupby', 'sample'] ['numpy', 'pandas', 'gc', 'numpy', 'matplotlib.pyplot', 'seaborn'] []Dict:{'numpy': ['mean', 'max', 'sum', 'where', 'min', 'unique'], 'pandas': ['read_parquet', 'unique', 'isnull'], 'gc': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 0
tpsapr22-eda-fe-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'duplicated', 'sum', 'duplicated', 'sum', 'duplicated', 'max', 'min', 'max', 'min', 'merge', 'value_counts', 'join', '_repr_html_', 'concat', 'reset_index', 'boxplot', 'array', 'array', 'abs', 'abs', 'abs', 'mean', 'mean', 'groupby', 'mean', 'groupby', 'concat', 'reset_index', 'copy', 'applymap', 'corr', 'where', 'astype', 'bool', 'astype', 'aggregate', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'merge', 'merge', 'merge', 'factorize', 'unique', 'unique', 'keys', 'keys', 'drop', 'drop', 'drop', 'to_csv', 'to_csv', 'array', 'array', 'sort_values'] ['pandas', 'numpy', 'warnings', 'matplotlib.pyplot', 'seaborn', 'umap'] ['HTML', 'pearsonr', 'LGBMClassifier']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'factorize', 'unique', 'array', 'merge'], 'numpy': ['mean', 'max', 'abs', 'sum', 'where', 'min', 'unique', 'array', 'copy'], 'warnings': [], '': [], 'IPython': ['_repr_html_'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'umap': [], 'lightgbm': ['_repr_html_']} axis_0: 0, axis_1: 0
a-comprehensive-guide-to-titanic-machine-learning.py : ['read_csv', 'head', 'read_csv', 'head', 'reset_index', 'concat', 'head', 'value_counts', 'round', 'value_counts', 'round', 'round', 'round', 'update', 'update', 'update', 'update', 'value_counts', 'head', 'count', 'head', 'count', 'value_counts', 'head', 'count', 'value_counts', 'head', 'update', 'update', 'update', 'update', 'describe', 'skew', 'concat', 'rename', 'reset_index', 'round', 'head', 'head', 'sum', 'isna', 'count', 'value_counts', 'fillna', 'get', 'value_counts', 'head', 'get', 'get', 'value_counts', 'replace', 'replace', 'replace', 'replace', 'value_counts', 'value_counts', 'replace', 'replace', 'replace', 'replace', 'head', 'get', 'get', 'where', 'value_counts', 'quantile', 'quantile', 'reset_index', 'drop', 'update', 'update', 'sum', 'isna', 'sum', 'isna', 'fillna', 'fillna', 'median', 'boxplot', 'agg', 'reset_index', 'set_index', 'corr', 'transform', 'groupby', 'fillna', 'median', 'sum', 'isnull', 'drop', 'round', 'round', 'update', 'update', 'update', 'round', 'mean', 'groupby', 'update', 'update', 'update', 'hist', 'hist', 'rename', 'crosstab', 'rename', 'crosstab', 'round', 'update', 'update', 'update', 'update', 'crosstab', 'get_dummies', 'crosstab', 'crosstab', 'rename', 'cut', 'head', 'cut', 'head', 'head', 'head', 'drop', 'astype', 'get_dummies', 'head', 'drop', 'astype', 'drop', 'drop', 'copy', 'drop', 'sort_values', 'mean', 'sort_values', 'sort_values', 'squeeze', 'sort_index', 'isin', 'squeeze', 'sort_index', 'update', 'update', 'update', 'sort_index', 'items', 'mean', 'mean', 'std', 'head', 'round', 'set_index', 'sort_values', 'transpose', 'set_index', 'sort_values', 'mean', 'std', 'mean', 'std', 'crosstab', 'to_csv', 'to_csv', 'set_index', 'head', 'corr', 'mean', 'transform', 'transform', 'head', 'concat', 'head', 'astype', 'drop', 'concat', 'head', 'mean', 'concat', 'head', 'round', 'mean', 'mean', 'add', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv', 'sort_values', 'set_index', 'squeeze', 'squeeze', 'squeeze', 'update', 'update', 'update'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.graph_objs'] ['stats', 'make_subplots', 'iplot', 'init_notebook_mode', 'LogisticRegression', 'SVC', 'RandomForestClassifier', 'KNeighborsClassifier', 'GaussianNB', 'DecisionTreeClassifier', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'ExtraTreesClassifier', 'XGBClassifier', 'accuracy_score', 'cross_val_score', 'GridSearchCV', 'learning_curve', 'cross_val_predict', 'precision_score', 'precision_score', 'recall_score', 'confusion_matrix', 'f1_score', 'classification_report', 'precision_recall_curve', 'roc_curve', 'roc_auc_score', 'EnsembleVoteClassifier', 'StandardScaler', 'PCA', 'plot_decision_regions', 'BaggingClassifier', 'BlendEnsemble', 'stacking', 'Markdown', 'LabelEncoder']Dict:{'numpy': ['transpose', 'median', 'mean', 'squeeze', 'quantile', 'add', 'sum', 'where', 'round', 'isin', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'get_dummies', 'crosstab'], 'matplotlib': ['boxplot', 'get', 'hist'], 'seaborn': ['boxplot'], 'scipy': [], 'plotly': [], 'sklearn': ['transform'], 'xgboost': [], 'mlxtend': [], 'mlens': [], 'vecstack': [], 'IPython': []} axis_0: 0, axis_1: 0
simplistic-magic-lgbm.py : ['info', 'read_csv', 'read_csv', 'info', 'array', 'isin', 'concat', 'reset_index', 'unique', 'sum', 'map', 'groupby', 'fillna', 'replace', 'replace', 'pop', 'info', 'info', 'info', 'read_csv', 'set_index', 'set_index', 'update', 'reset_index', 'to_csv'] ['gc', 'os', 'logging', 'datetime', 'warnings', 'numpy', 'pandas', 'lightgbm'] ['mean_squared_error', 'roc_auc_score', 'roc_curve', 'StratifiedKFold']Dict:{'gc': [], 'os': ['replace'], 'logging': ['info'], 'datetime': [], 'warnings': [], 'numpy': ['sum', 'unique', 'isin', 'info', 'array'], 'pandas': ['concat', 'array', 'unique', 'read_csv'], 'lightgbm': [], 'sklearn': []} axis_0: 0, axis_1: 0
riiid-lgbm-bagging2-sakt-0-781.py : ['keys', 'read_csv', 'replace', 'get_dummies', 'merge', 'sum', 'groupby', 'astype', 'astype', 'tail', 'agg', 'groupby', 'astype', 'astype', 'agg', 'groupby', 'fillna', 'astype', 'reset_index', 'mean', 'fillna', 'reset_index', 'agg', 'groupby', 'shift', 'groupby', 'fillna', 'astype', 'agg', 'groupby', 'map', 'astype', 'tail', 'groupby', 'shift', 'groupby', 'fillna', 'astype', 'astype', 'shift', 'groupby', 'agg', 'groupby', 'drop', 'fillna', 'astype', 'astype', 'astype', 'astype', 'shift', 'groupby', 'agg', 'groupby', 'drop', 'fillna', 'fillna', 'astype', 'astype', 'astype', 'cumsum', 'groupby', 'head', 'agg', 'groupby', 'astype', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'astype', 'astype', 'astype', 'agg', 'groupby', 'astype', 'astype', 'map', 'astype', 'map', 'map', 'astype', 'astype', 'map', 'astype', 'map', 'map', 'astype', 'read_csv', 'astype', 'fillna', 'astype', 'drop', 'concat', 'rename', 'map', 'astype', 'map', 'astype', 'agg', 'groupby', 'map', 'map', 'astype', 'astype', 'agg', 'groupby', 'map', 'astype', 'agg', 'groupby', 'map', 'map', 'astype', 'astype', 'drop', 'fillna', 'fillna', 'fillna', 'head', 'unique', 'apply', 'groupby', 'sample', 'drop_duplicates', 'sample', 'merge', 'drop', 'merge', 'merge', 'sample', 'drop', 'to_dict', 'astype', 'to_dict', 'astype', 'to_dict', 'astype', 'to_dict', 'astype', 'to_dict', 'astype', 'to_dict', 'astype', 'to_dict', 'astype', 'to_dict', 'astype', 'to_dict', 'astype', 'to_dict', 'astype', 'to_dict', 'astype', 'to_dict', 'astype', 'to_dict', 'to_dict', 'set_index', 'to_dict', 'set_index', 'keys', '__init__', 'astype', '__init__', 'squeeze', '__init__', 'unique', 'copy', 'eval'] ['numpy', 'pandas', 'psutil', 'datatable', 'lightgbm', 'riiideducation', 'random', 'gc', 'pickle', 'torch', 'torch.nn', 'pickle'] ['defaultdict', 'pyplot', 'roc_auc_score', 'Dataset', 'DataLoader']Dict:{'numpy': ['mean', 'squeeze', 'sum', 'unique', 'cumsum', 'copy'], 'pandas': ['read_csv', 'eval', 'concat', 'get_dummies', 'unique', 'merge'], 'psutil': [], 'collections': ['keys', '__init__', 'copy'], 'datatable': [], 'lightgbm': [], 'matplotlib': [], 'riiideducation': [], 'random': ['sample'], 'sklearn': ['__init__'], 'gc': [], 'pickle': [], 'torch': ['__init__']} axis_0: 0, axis_1: 2
riiid-ensemble-lgbm-sakt-inference.py : ['concat', '__init__', 'astype', '__init__', 'squeeze', '__init__', 'unique', 'copy', 'read_feather', 'read_feather', 'sort_values', 'eval', 'apply', 'groupby', 'copy', 'reset_index', 'reset_index', 'merge', 'merge', 'astype', 'fillna', 'fillna', 'array'] ['gc', 'psutil', 'joblib', 'numpy', 'pandas', 'lightgbm', 'torch', 'torch.nn', 'matplotlib.pyplot', 'seaborn', 'warnings', 'riiideducation'] ['Dataset', 'DataLoader']Dict:{'gc': [], 'psutil': [], 'joblib': [], 'numpy': ['array', 'squeeze', 'unique', 'copy'], 'pandas': ['eval', 'concat', 'read_feather', 'unique', 'array', 'merge'], 'lightgbm': [], 'torch': ['__init__'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'riiideducation': []} axis_0: 0, axis_1: 1
catboost-feature-engineering-ideas.py : ['transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'sort_values', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'read_parquet', 'read_parquet', 'astype', 'to_datetime', 'sort_values', 'reset_index', 'drop_duplicates', 'fillna', 'fillna', 'map', 'mean', 'groupby', 'map', 'last', 'groupby', 'map', 'mean', 'groupby', 'map', 'last', 'groupby', 'drop', 'quantile', 'astype', 'fillna', 'cut', 'astype', 'fillna', 'cut', 'mean', 'map', 'mean', 'groupby', 'map', 'last', 'groupby', 'sum', 'map', 'mean', 'groupby', 'map', 'last', 'groupby', 'drop', 'mean', 'map', 'fillna', 'mean', 'groupby', 'fillna', 'drop', 'read_csv', 'astype', 'astype', 'map', 'last', 'groupby', 'transform', 'drop', 'shift', 'map', 'last', 'groupby', 'map', 'last', 'groupby', 'map', 'mean', 'groupby', 'drop', 'drop', 'map', 'mean', 'groupby', 'map', 'std', 'groupby', 'map', 'min', 'groupby', 'map', 'max', 'groupby', 'map', 'first', 'groupby', 'map', 'last', 'groupby', 'drop', 'map', 'nunique', 'groupby', 'map', 'last', 'groupby', 'map', 'first', 'groupby', 'drop', 'read_csv', 'reset_index', 'sort_index', 'astype', 'astype', 'map', 'last', 'groupby', 'read_csv', 'drop', 'drop', 'drop', 'drop', 'copy', 'set_index', 'concat', 'copy', 'merge', 'mean', 'sort_values', 'to_csv', 'drop_duplicates', 'fillna', 'fillna', 'map', 'mean', 'groupby', 'map', 'last', 'groupby', 'map', 'mean', 'groupby', 'map', 'last', 'groupby', 'drop', 'quantile', 'astype', 'fillna', 'cut', 'astype', 'fillna', 'cut', 'astype', 'fillna', 'cut', 'astype', 'fillna', 'cut', 'mean', 'map', 'mean', 'groupby', 'map', 'last', 'groupby', 'sum', 'map', 'mean', 'groupby', 'map', 'last', 'groupby', 'drop', 'mean', 'map', 'fillna', 'mean', 'groupby', 'fillna', 'map', 'fillna', 'mean', 'groupby', 'drop', 'read_csv', 'astype', 'astype', 'map', 'last', 'groupby', 'drop', 'concat', 'transform', 'shift', 'map', 'last', 'groupby', 'map', 'last', 'groupby', 'map', 'mean', 'groupby', 'drop', 'drop', 'map', 'mean', 'groupby', 'map', 'std', 'groupby', 'map', 'min', 'groupby', 'map', 'max', 'groupby', 'map', 'first', 'groupby', 'map', 'last', 'groupby', 'drop', 'map', 'nunique', 'groupby', 'map', 'last', 'groupby', 'map', 'first', 'groupby', 'drop', 'read_csv', 'drop', 'drop', 'sort_index', 'drop_duplicates', 'read_csv', 'astype', 'set_index', 'merge', 'reset_index', 'to_csv', 'hist', 'head'] ['numpy', 'cudf', 'cupy', 'gc', 'matplotlib.pyplot', 'warnings'] ['tqdm', 'KFold', 'base', 'CatBoostClassifier']Dict:{'numpy': ['transpose', 'mean', 'quantile', 'max', 'sum', 'array', 'where', 'min', 'std', 'cumsum', 'copy'], 'cudf': [], '': [], 'cupy': [], 'gc': [], 'matplotlib': ['hist'], 'tqdm': [], 'sklearn': ['copy'], 'catboost': [], 'warnings': [], '=': [], '[]': []} axis_0: 1, axis_1: 28
help-humanity-by-helping-robots.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'value_counts', 'mean', 'diff', 'abs', 'diff', 'mean', 'abs', 'diff', 'mean', 'groupby', 'min', 'groupby', 'max', 'groupby', 'std', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'max', 'abs', 'apply', 'groupby', 'min', 'abs', 'head', 'fillna', 'fillna', 'replace', 'replace', 'replace', 'replace', 'astype', 'sum', 'max', 'product', 'to_csv', 'head'] ['os', 'time', 'numpy', 'pandas', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'catboost', 'math', 'itertools'] ['countplot', 'lineplot', 'barplot', 'LabelEncoder', 'KFold', 'accuracy_score', 'confusion_matrix', 'BayesianOptimization', 'RandomForestClassifier', 'KFold', 'StratifiedKFold']Dict:{'os': ['replace'], 'time': [], 'numpy': ['mean', 'product', 'max', 'abs', 'sum', 'min', 'diff', 'std'], 'pandas': ['read_csv', 'value_counts'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'bayes_opt': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'itertools': ['product', 'groupby']} axis_0: 0, axis_1: 2
eda-data-gathering-llm-se-wiki-stem-1k-ds.py : ['read_csv', 'read_csv', 'head', 'items', 'items', 'join', 'keys', 'keys', 'copy', 'insert', 'rename', 'map', 'drop', 'to_csv'] ['os', 'random', 'openai', 'requests', 'wikipediaapi', 'itables', 'numpy', 'pandas', 'plotly.express'] ['UserSecretsClient']Dict:{'os': ['rename'], 'random': [], 'openai': [], 'requests': ['head'], 'wikipediaapi': [], 'itables': [], 'numpy': ['insert', 'copy'], 'pandas': ['read_csv'], 'plotly': [], 'kaggle_secrets': []} axis_0: 0, axis_1: 0
ensembling-will-give-you-silver-medal.py : ['read_csv', 'sort_values', 'clip', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'glob'] []Dict:{'numpy': ['clip'], 'pandas': ['read_csv'], 'glob': []} axis_0: 0, axis_1: 0
feature-engineering-and-xgbregressor.py : ['read_csv', 'read_csv', 'info', 'info', 'drop', 'drop', 'corr', 'skew', 'skew', 'info', 'info', 'unique', 'unique', 'update', 'fillna', 'mean', 'update', 'fillna', 'mean', 'info', 'drop', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'plotly.express', 'seaborn', 'matplotlib.pyplot', 'xgboost'] ['stats']Dict:{'pandas': ['unique', 'read_csv'], 'numpy': ['mean', 'info', 'unique'], 'plotly': [], 'seaborn': [], 'matplotlib': [], '=': [], 'cor_target[cor_target>0': [], 'scipy': ['skew'], 'xgboost': []} axis_0: 0, axis_1: 3
m5-forecast-keras-with-categorical-embeddings-v2.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'head', 'drop', 'assign', 'astype', 'fillna', 'head', 'info', 'groupby', 'pct_change', 'transform', 'std', 'rolling', 'shift', 'cummin', 'cummax', 'cummin', 'tail', 'head', 'value_counts', 'drop', 'assign', 'replace', 'reindex', 'melt', 'assign', 'astype', 'head', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'std', 'rolling', 'shift', 'transform', 'groupby', 'std', 'rolling', 'shift', 'notna', 'head', 'merge', 'head', 'merge', 'drop', 'head', 'info', 'head', 'fillna', 'median', 'head', 'assign', 'where', 'astype', 'head', 'to_numpy', 'to_numpy', 'unique', 'clip', 'reset_index', 'pivot', 'merge', 'head', 'head', 'to_csv'] ['warnings', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'os', 'tensorflow', 'tensorflow.keras'] ['tqdm', 'OrdinalEncoder', 'regularizers', 'Dense', 'Input', 'Embedding', 'Dropout', 'concatenate', 'Flatten', 'Model']Dict:{'warnings': [], 'pandas': ['read_csv', 'melt', 'value_counts', 'notna', 'unique', 'merge', 'pivot'], 'numpy': ['mean', 'median', 'max', 'sum', 'where', 'min', 'unique', 'clip', 'info', 'std'], 'matplotlib': [], 'seaborn': [], 'gc': [], 'os': ['replace'], 'tqdm': [], 'sklearn': ['transform'], 'tensorflow': []} axis_0: 0, axis_1: 3
tpsmar22-random-forest.py : ['read_csv', 'read_csv', 'apply', 'transform', 'hist', 'hist'] ['numpy', 'pandas', 'matplotlib.pyplot'] ['MaxNLocator', 'PercentFormatter', 'cycler', 'display', 'OneHotEncoder', 'StandardScaler', 'HuberRegressor', 'RandomForestRegressor', 'ExtraTreesRegressor', 'make_pipeline', 'mean_absolute_error', 'mean_squared_error']Dict:{'numpy': [], 'pandas': ['read_csv'], 'matplotlib': [], 'cycler': [], 'IPython': [], 'sklearn': []} axis_0: 0, axis_1: 1
excelsior-microsoft-malware-eda-baseline.py : ['mode', 'apply', 'crosstab', 'sum', 'read_csv', 'read_csv', 'head', 'sort_values', 'nunique', 'sum', 'isnull', 'sum', 'isnull', 'memory_usage', 'var', 'mean', 'min', 'max', 'transpose', 'transpose', 'value_counts', 'array', 'array', 'sum', 'nunique', 'nunique', 'concat', 'mean', 'groupby', 'map', 'sort_values', 'to_csv', 'read_csv', 'set_index', 'to_csv', 'to_csv', 'set_index', 'read_csv', 'drop_duplicates', 'transpose', 'set_index', 'head', 'head', 'keys', 'value_counts', 'value_counts', 'keys', 'value_counts', 'value_counts', 'head', 'corr'] ['time', 'warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'gc', 'lightgbm', 'itertools'] ['roc_auc_score', 'StratifiedKFold', 'partial', 'wraps', 'datetime']Dict:{'time': [], 'warnings': [], 'numpy': ['transpose', 'mean', 'max', 'var', 'sum', 'min', 'array'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'array', 'crosstab'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'gc': [], 'lightgbm': [], 'sklearn': [], 'functools': [], 'datetime': [], 'itertools': ['groupby']} axis_0: 1, axis_1: 1
baseline-with-xgb.py : ['nunique', 'to_datetime', 'tz_localize', 'to_datetime', 'unique', 'astype', 'apply', 'astype', 'fillna', 'astype', 'astype', 'clip', 'sum', 'groupby', 'mean', 'std', 'array', 'apply', 'astype', 'fillna', 'transform', 'rename', 'fillna', 'drop', 'merge', 'hist'] ['pandas', 'numpy', 'matplotlib.pyplot', 'time', 'warnings'] ['accuracy_score', 'twosigmanews', 'train_test_split', 'StandardScaler', 'datetime', 'XGBClassifier', 'partial', 'hp', 'fmin', 'tpe', 'RandomForestClassifier']Dict:{'pandas': ['to_datetime', 'array', 'merge', 'unique'], 'numpy': ['mean', 'std', 'sum', 'unique', 'clip', 'array'], 'matplotlib': ['hist'], 'time': [], 'sklearn': ['apply'], 'kaggle': [], 'datetime': [], 'warnings': [], 'xgboost': ['apply'], 'functools': [], 'hyperopt': []} axis_0: 0, axis_1: 1
lightbm-feature-engineering-single-model.py : ['join', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'copy', 'isin', 'notnull', 'apply', 'notnull', 'notnull', 'apply', 'notnull', 'replace', 'notnull', 'apply', 'notnull', 'notnull', 'apply', 'notnull', 'replace', 'notnull', 'apply', 'notnull', 'notnull', 'apply', 'notnull', 'replace', 'notnull', 'apply', 'notnull', 'notnull', 'apply', 'notnull', 'replace', 'notnull', 'apply', 'notnull', 'notnull', 'apply', 'notnull', 'astype', 'to_numpy', 'fillna', 'to_numpy', 'fillna', 'join', 'join', 'isnull', 'isnull', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'apply', 'fillna', 'join', 'join', 'transform', 'fillna', 'concat', 'transform', 'fillna', 'transform', 'concat', 'fillna', 'sum', 'multiply', 'reset_index', 'merge', 'merge', 'copy', 'describe', 'reset_index', 'concat', 'drop', 'copy', 'copy', 'concat', 'drop_duplicates', 'to_dict', 'apply', 'groupby', 'to_numpy', 'to_numpy', 'array', 'mean', 'fillna', 'transform', 'fillna', 'transform', 'copy', 'reset_index', 'concat', 'drop', 'mean', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'dropna', 'merge', 'concat', 'reset_index', 'drop_duplicates', 'notnull', 'apply', 'notnull', 'notnull', 'apply', 'notnull', 'copy', 'drop', 'describe', 'drop', 'apply', 'groupby', 'merge', 'drop', 'rename', 'merge', 'drop', 'rename', 'concat', 'drop_duplicates', 'reset_index', 'to_dict', 'apply', 'groupby', 'to_numpy', 'join', 'map', 'map', 'join', 'to_csv'] ['numpy', 'pandas', 'Levenshtein', 'matplotlib.pyplot', 'seaborn', 'gc', 'lightgbm', 'collections', 'string', 'Levenshtein', 'difflib', 'unidecode', 'pickle', 'os'] ['patch_sklearn', 'KNeighborsRegressor', 'TfidfVectorizer', 'CountVectorizer', 'TruncatedSVD', 'NearestNeighbors', 'preprocessing', 'StratifiedKFold', 'KFold', 'GroupKFold', 'mean_squared_error', 'mean_absolute_error', 'precision_score', 'recall_score', 'f1_score', 'roc_auc_score', 'display', 'tqdm']Dict:{'sklearnex': [], 'numpy': ['mean', 'max', 'sum', 'min', 'isin', 'array', 'multiply', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'notnull', 'array', 'merge'], 'sklearn': [], 'Levenshtein': [], 'matplotlib': [], 'seaborn': [], 'gc': [], 'lightgbm': [], 'IPython': [], 'collections': [], 'tqdm': [], 'string': [], 'difflib': [], 'unidecode': [], 'pickle': [], 'os': ['rename', 'replace']} axis_0: 0, axis_1: 3
titanic-feature-engineering-ffn-202006.py : ['drop', 'astype', 'isna', 'astype', 'astype', 'astype', 'drop', 'apply', 'replace', 'map', 'fillna', 'fillna', 'median', 'astype', 'count', 'groupby', 'mean', 'groupby', 'replace', 'isin', 'fillna', 'isna', 'isna', 'drop', 'drop', 'replace', 'fillna', 'mean', 'isnull', 'value_counts', 'isin', 'get_dummies', 'merge', 'drop', 'fillna', 'transform', 'concat', 'read_csv', 'read_csv', 'transform', 'set_index', 'drop', 'astype', 'astype', 'to_csv'] ['numpy', 'pandas', 'tensorflow', 're'] ['seed', 'MinMaxScaler', 'RobustScaler', 'train_test_split', 'classification_report', 'confusion_matrix', 'PCA', 'linear_model', 'regularizers', 'pyplot']Dict:{'numpy': [], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'merge'], 'sklearn': [], 'tensorflow': [], 'matplotlib': [], 're': []} axis_0: 0, axis_1: 4
feature-engineering-importance.py : ['read_csv', 'isnull', 'isnull', 'mean', 'isnull', 'mode', 'head', 'cut', 'astype', 'head', 'sort_values', 'abs', 'corr', 'drop'] ['numpy', 'pandas', 'matplotlib.pyplot'] []Dict:{'numpy': ['mean', 'abs'], 'pandas': ['cut', 'read_csv', 'isnull'], 'matplotlib': []} axis_0: 0, axis_1: 1
lgbm-with-loop-feature-engineering.py : ['concat', 'concat', 'read_pickle', 'read_pickle', 'reset_index', 'reset_index', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'mean', 'dropna', 'fillna', 'fillna', 'read_csv', 'merge', 'merge', 'astype', 'fillna', 'astype', 'fillna', 'drop', 'drop', 'reset_index', 'astype', 'astype', 'copy', 'copy', 'join', 'join', 'add', 'read_pickle', 'read_pickle', 'reset_index', 'copy', 'reset_index', 'merge', 'merge', 'astype', 'fillna', 'fillna', 'concat'] ['pandas', 'numpy', 'gc', 'lightgbm', 'riiideducation'] ['roc_auc_score', 'defaultdict', 'tqdm']Dict:{'pandas': ['concat', 'merge', 'read_pickle', 'read_csv'], 'numpy': ['mean', 'add', 'copy'], 'gc': [], 'sklearn': [], 'collections': ['copy'], 'tqdm': [], 'lightgbm': []} axis_0: 0, axis_1: 4
rapids-feature-engineering-fraud-0-96.py : ['array', 'add', 'add', 'array', 'add', 'add', 'add', 'array', 'concat', 'rename', 'groupby', 'sort_values', 'astype', 'astype', 'astype', 'astype', 'map', 'map', 'astype', 'astype', 'astype', 'astype', 'array', 'sort_index', 'sort_index', 'hist', 'reset_index', 'to_csv', 'set_index', 'read_csv', 'to_csv', 'hist'] ['cudf', 'cupy', 'math', 'warnings', 'time', 'numpy', 'pandas', 'os', 'gc', 'matplotlib.pyplot', 'datetime', 'xgboost', 'xgboost'] ['cuda', 'float32', 'int8', 'GroupKFold', 'roc_auc_score']Dict:{'cudf,': [], 'cupy,': [], 'math,': [], 'warnings,': [], 'time': [], '': [], 'numba': [], 'numpy': ['array', 'add'], 'matplotlib': ['hist'], 'datetime': [], 'xgboost': [], 'sklearn': []} axis_0: 1, axis_1: 0
ncaam-prediction-v4-stage-2.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'replace', 'replace', 'replace', 'replace', 'head', 'reset_index', 'sort_index', 'concat', 'head', 'read_csv', 'read_csv', 'read_csv', 'replace', 'replace', 'replace', 'replace', 'reset_index', 'concat', 'astype', 'mean', 'agg', 'groupby', 'head', 'reset_index', 'agg', 'groupby', 'head', 'join', 'head', 'copy', 'copy', 'replace', 'replace', 'replace', 'replace', 'head', 'head', 'head', 'merge', 'merge', 'head', 'reset_index', 'where', 'reset_index', 'mean', 'groupby', 'reset_index', 'where', 'reset_index', 'mean', 'groupby', 'merge', 'merge', 'copy', 'astype', 'astype', 'where', 'merge', 'astype', 'astype', 'merge', 'reset_index', 'reset_index', 'astype', 'apply', 'head', 'apply', 'head', 'copy', 'copy', 'merge', 'merge', 'describe', 'min', 'copy', 'clip', 'where', 'astype', 'reset_index', 'mean', 'groupby', 'where', 'keys', 'where', 'where', 'astype', 'reset_index', 'mean', 'groupby', 'where', 'keys', 'where', 'where', 'keys', 'where', 'where', 'keys', 'where', 'where', 'keys', 'where', 'where', 'concat', 'apply', 'groupby', 'read_csv', 'astype', 'apply', 'astype', 'apply', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'clip', 'mean', 'read_csv', 'apply', 'copy', 'drop_duplicates', 'merge', 'read_csv', 'apply', 'copy', 'drop_duplicates', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'xgboost', 'statsmodels.api', 'matplotlib.pyplot', 'collections', 'dataclasses'] ['KFold', 'log_loss', 'UnivariateSpline', 'dataclass']Dict:{'numpy': ['mean', 'where', 'min', 'clip', 'copy'], 'pandas': ['concat', 'merge', 'read_csv'], 'os': ['replace'], 'xgboost': [], 'sklearn': [], 'scipy': [], 'statsmodels': [], 'matplotlib': [], 'collections': [], 'dataclasses': ['replace', 'copy']} axis_0: 1, axis_1: 0
feature-engineering-non-ml-approach.py : ['join', 'read_csv', 'read_csv', 'astype', 'astype', 'unique', 'unique', 'unique', 'sum', 'memory_usage', 'astype', 'to_numeric', 'mean', 'groupby', 'cumsum', 'groupby', 'cumsum', 'groupby', 'cumsum', 'groupby', 'max', 'groupby', 'mean', 'groupby', 'unique', 'unique', 'abs', 'mean', 'groupby', 'sort_values', 'to_csv', 'read_csv', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'os', 'warnings'] ['tqdm']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'unique', 'cumsum'], 'pandas': ['to_numeric', 'unique', 'read_csv'], 'matplotlib': [], 'tqdm': [], 'os': [], 'warnings': []} axis_0: 0, axis_1: 1
horse-racing-welcome-to-the-machine.py : ['read_csv', 'map', 'read_parquet', 'read_csv', 'merge', 'eq', 'eq', 'eq', 'mean', 'groupby', 'eq', 'eq', 'eq', 'mean', 'groupby', 'isin', 'read_csv'] ['re', 'colorcet', 'holoviews', 'hvplot.pandas', 'numpy', 'pandas'] ['YouTubeVideo']Dict:{'re': [], 'colorcet': [], 'holoviews': [], 'hvplot': [], 'numpy': ['mean', 'isin'], 'pandas': ['read_parquet', 'merge', 'read_csv'], 'IPython': []} axis_0: 0, axis_1: 0
steganalysis-a-knaive-approach.py : ['reset_index', 'sort_values', 'reset_index', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'read_csv', 'head', 'apply', 'apply', 'apply', 'head', 'array', 'array', 'array', 'array', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'to_csv', 'to_csv'] ['os', 'skimage.io', 'matplotlib.pyplot', 'numpy', 'pandas', 'keras'] ['spatial', 'tqdm', 'Image', 'shuffle', 'Sequential', 'Dense', 'Dropout', 'Flatten', 'Conv2D', 'MaxPooling2D', 'BatchNormalization']Dict:{'os': [], 'skimage': [], 'matplotlib': [], 'scipy': [], 'tqdm': [], 'PIL': [], 'random': [], 'numpy': ['array', 'add'], 'pandas': ['array', 'read_csv'], 'keras': []} axis_0: 0, axis_1: 0
ai-generated-text-detection-quick-baseline.py : ['read_csv', 'rename', 'replace', 'read_csv', 'concat', 'read_csv', 'concat', 'to_csv'] ['numpy', 'pandas', 'xgboost'] ['LogisticRegression', 'XGBClassifier', 'TfidfVectorizer', 'VotingClassifier', 'SGDClassifier']Dict:{'numpy': [], 'pandas': ['concat', 'read_csv'], 'sklearn': [], 'xgboost': []} axis_0: 1, axis_1: 0
complete-titanic-tutorial-with-ml-nn-ensembling.py : ['round', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'read_csv', 'head', 'describe', 'info', 'isnull', 'hist', 'drop', 'fillna', 'transform', 'groupby', 'fillna', 'mean', 'transform', 'groupby', 'fillna', 'mean', 'transform', 'groupby', 'fillna', 'mean', 'interpolate', 'fillna', 'replace', 'replace', 'replace', 'map', 'transform', 'groupby', 'fillna', 'mean', 'map', 'map', 'where', 'astype', 'map', 'to_dict', 'value_counts', 'items', 'drop', 'copy', 'drop', 'head', 'add', 'add', 'add', 'add', 'add', 'add', 'mean', 'std', 'items', 'read_csv', 'copy', 'head', 'copy', 'to_csv', 'head'] ['pydot', 'pandas', 'numpy', 'seaborn', 'matplotlib', 'matplotlib.pyplot', 'warnings', 'sklearn', 'keras', 'scipy.stats'] ['metrics', 'SVC', 'LogisticRegression', 'RandomForestClassifier', 'export_graphviz', 'DecisionTreeClassifier', 'StandardScaler', 'cross_val_score', 'train_test_split', 'NotFittedError', 'Sequential', 'Dense', 'Dropout', 'optimizers', 'KerasClassifier', 'display']Dict:{'pydot': [], 'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'numpy': ['mean', 'add', 'sum', 'where', 'round', 'info', 'std', 'copy'], 'seaborn': [], 'matplotlib': ['hist'], 'warnings': [], 'sklearn': [], 'keras': [], 'IPython': [], 'scipy': ['describe']} axis_0: 0, axis_1: 1
introduction-to-manual-feature-engineering.py : ['read_csv', 'head', 'rename', 'count', 'groupby', 'head', 'read_csv', 'merge', 'fillna', 'head', 'corr', 'median', 'median', 'reset_index', 'agg', 'groupby', 'drop', 'head', 'head', 'merge', 'head', 'corr', 'drop', 'select_dtypes', 'reset_index', 'agg', 'groupby', 'drop', 'head', 'head', 'corr', 'get_dummies', 'select_dtypes', 'head', 'agg', 'groupby', 'head', 'head', 'merge', 'head', 'get_dummies', 'select_dtypes', 'agg', 'groupby', 'head', 'read_csv', 'head', 'head', 'head', 'merge', 'merge', 'head', 'drop', 'head', 'read_csv', 'read_csv', 'read_csv', 'head', 'drop', 'head', 'head', 'head', 'merge', 'merge', 'drop', 'merge', 'merge', 'merge', 'sum', 'isnull', 'sum', 'isnull', 'concat', 'rename', 'round', 'sort_values', 'head', 'read_csv', 'merge', 'merge', 'merge', 'align', 'head', 'drop', 'drop', 'to_csv', 'to_csv', 'corr', 'sort_values', 'head', 'tail', 'dropna', 'items', 'drop', 'drop', 'to_csv', 'to_csv', 'drop', 'drop', 'get_dummies', 'get_dummies', 'align', 'array', 'astype', 'transform', 'array', 'astype', 'array', 'array', 'mean', 'reset_index', 'sort_values', 'sum', 'head', 'head', 'read_csv', 'read_csv', 'to_csv', 'to_csv', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 'gc', 'lightgbm', 'gc', 'matplotlib.pyplot'] ['KFold', 'roc_auc_score', 'LabelEncoder']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'array', 'merge'], 'numpy': ['mean', 'median', 'sum', 'round', 'array'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'gc': [], 'lightgbm': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 1
feature-selection-using-the-boruta-shap-package.py : ['read_csv', 'read_csv'] ['pandas'] ['BorutaShap']Dict:{'pandas': ['read_csv'], '': [], 'BorutaShap': []} axis_0: 0, axis_1: 0
single-model-lgbm.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'concat', 'drop', 'drop', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'ewm', 'std', 'ewm', 'fillna', 'concat', 'reset_index', 'copy', 'concat', 'copy', 'copy', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'std', 'rolling', 'shift', 'transform', 'groupby', 'var', 'rolling', 'shift', 'transform', 'groupby', 'min', 'rolling', 'shift', 'transform', 'groupby', 'max', 'rolling', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'std', 'rolling', 'shift', 'transform', 'groupby', 'var', 'rolling', 'shift', 'transform', 'groupby', 'min', 'rolling', 'shift', 'transform', 'groupby', 'max', 'rolling', 'shift', 'copy', 'drop', 'reset_index', 'sort_values', 'apply', 'join', 'mean', 'groupby', 'median', 'groupby', 'max', 'groupby', 'min', 'groupby', 'std', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'skew', 'apply', 'groupby', 'kurtosis', 'apply', 'groupby', 'mean', 'abs', 'diff', 'apply', 'groupby', 'max', 'abs', 'apply', 'groupby', 'min', 'abs', 'map', 'to_dict', 'reset_index', 'astype', 'round', 'clip', 'astype', 'round', 'clip', 'drop', 'drop', 'reset_index', 'reset_index', 'concat', 'concat', 'to_csv'] ['numpy', 'pandas', 'math', 'matplotlib.pyplot', 'seaborn', 'warnings', 'gc', 'lightgbm', 'os'] ['GroupKFold', 'StratifiedKFold', 'train_test_split', 'metrics', 'tqdm', 'signal']Dict:{'numpy': ['mean', 'median', 'max', 'var', 'abs', 'sum', 'round', 'min', 'clip', 'diff', 'std', 'copy'], 'pandas': ['concat', 'read_csv'], 'math': [], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'gc': [], 'lightgbm': [], 'sklearn': [], 'tqdm': [], 'scipy': [], 'os': []} axis_0: 1, axis_1: 2
store-sales-using-a-hybrid-model.py : ['read_csv', 'read_csv', 'unique', 'mean', 'groupby', 'array', 'unique', 'concat', 'drop', 'head', 'transform', 'array', 'unique', 'concat', 'drop', 'head', 'copy', 'pop', 'concat', 'concat', 'head', 'head', 'drop', 'shift', 'fillna', 'head', 'head', 'drop', 'astype', 'to_csv', 'read_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'warnings'] ['OneHotEncoder', 'OrdinalEncoder', 'mean_absolute_error', 'LinearRegression', 'RandomForestRegressor', 'train_test_split', 'DeterministicProcess', 'CalendarFourier', 'plot_pacf', 'XGBRegressor']Dict:{'pandas': ['concat', 'array', 'unique', 'read_csv'], 'numpy': ['mean', 'array', 'unique', 'copy'], 'matplotlib': [], 'sklearn': [], 'statsmodels': [], 'xgboost': [], 'warnings': []} axis_0: 0, axis_1: 6
seismic-data-eda-and-baseline.py : ['head', 'mean', 'std', 'max', 'min', 'sum', 'sum', 'abs', 'mean', 'std', 'max', 'min', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'min', 'abs', 'std', 'std', 'std', 'std', 'mean', 'mean', 'mean', 'mean', 'min', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'transform', 'read_csv', 'read_csv', 'mean', 'std', 'max', 'min', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'min', 'abs', 'std', 'std', 'std', 'std', 'mean', 'mean', 'mean', 'mean', 'min', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'transform', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'mean_squared_error', 'mean_absolute_error', 'Ridge', 'RidgeCV', 'CatBoostRegressor']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'min', 'isin', 'diff', 'std'], 'pandas': ['concat', 'read_csv'], 'os': [], 'matplotlib': [], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'gc': [], 'catboost': [], 'seaborn': [], 'warnings': []} axis_0: 1, axis_1: 0
time-series-analysis-with-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'tail', 'sample', 'sample', 'sample', 'to_datetime', 'apply', 'head', 'reset_index', 'sum', 'groupby', 'reset_index', 'mean', 'groupby', 'sum', 'groupby', 'astype', 'hist', 'describe', 'query', 'isin', 'unique', 'isin', 'unique', 'query', 'reset_index', 'sum', 'groupby', 'agg', 'groupby', 'head', 'reset_index', 'apply', 'merge', 'fillna', 'drop', 'head', 'pivot_table', 'head', 'add', 'add', 'add', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['datetime', 'Sequential', 'LSTM', 'Dense', 'Dropout', 'load_model', 'Model']Dict:{'pandas': ['read_csv', 'pivot_table', 'unique', 'merge', 'to_datetime'], 'datetime': [], 'numpy': ['mean', 'add', 'sum', 'unique', 'isin'], 'matplotlib': ['hist'], 'seaborn': [], 'keras': []} axis_0: 0, axis_1: 0
crypto-tf-keras-nn-with-asset-embedding.py : ['read_csv', 'read_csv', 'reset_index', 'any', 'isin', 'head', 'read_csv', 'head', 'fillna', 'unique', 'head', 'tail', 'unique', 'head', 'tail', 'sum', 'memory_usage', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'nunique', 'transform', 'transform'] ['io', 'json', 'requests', 'functools', 'numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib.ticker', 'tensorflow', 'numpy', 'gresearch_crypto'] ['tqdm', 'train_test_split', 'pearsonr', 'MinMaxScaler', 'RobustScaler', 'keras', 'backend', 'datetime', 'KFold', 'GroupKFold']Dict:{'io': [], 'json': [], 'requests': ['head'], 'functools': [], 'numpy': ['any', 'max', 'sum', 'min', 'unique', 'isin'], 'pandas': ['unique', 'read_csv'], 'tqdm': [], 'matplotlib': [], 'sklearn': [], 'scipy': [], 'tensorflow': [], 'keras': [], 'datetime': ['min', 'max'], 'gresearch_crypto': []} axis_0: 0, axis_1: 0
tps-oct-2022-eda-hybrid-model-ensemble.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'drop', 'drop', 'info', 'value_counts', 'nunique', 'groupby', 'value_counts', 'nunique', 'groupby', 'count', 'groupby', 'value_counts', 'groupby', 'min', 'groupby', 'mean', 'groupby', 'fillna', 'shift', 'mean', 'groupby', 'value_counts', 'sum', 'value_counts', 'value_counts', 'sum', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'corr', 'abs', 'mask', 'round', 'sort_values', 'copy', 'copy', 'copy', 'copy', 'copy', 'astype', 'isna', 'fillna', 'drop', 'read_csv', 'drop', 'read_csv', 'drop', 'drop', 'reset_index', 'reset_index', 'reset_index', 'drop', 'mean', 'sort_values', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'random', 'matplotlib.pyplot', 'seaborn', 'gc', 'warnings', 'os', 'seaborn'] ['mrmr_classif', 'dtype', 'DataFrame', 'LGBMClassifier', 'CatBoostClassifier', 'ExtraTreesClassifier', 'XGBClassifier', 'accuracy_score', 'roc_auc_score', 'log_loss', 'KFold', 'StratifiedKFold', 'GroupKFold']Dict:{'numpy': [], 'pandas': ['value_counts', 'round', 'count', 'drop', 'copy', 'head', 'nunique', 'reset_index', 'info', 'sort_values', 'mask', 'shift', 'abs', 'min', 'to_csv', 'fillna', 'groupby', 'mean', 'isna', 'sum', 'join', 'corr', 'astype'], 'mrmr': [], 'matplotlib': [], 'random': [], '': [], 'seaborn': [], 'gc': [], 'lightgbm': [], 'catboost': [], 'sklearn': [], 'xgboost': [], 'warnings': [], 'os': []} axis_0: 0, axis_1: 8
can-we-attribute-emissions-to-power-plants.py : ['read_csv', 'astype', 'array', 'where', 'reset_index', 'sort_values', 'head', 'sum', 'sum', 'groupby', 'sort_values', 'sort_values', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array'] ['folium', 'math', 'matplotlib.pyplot', 'numpy', 'os', 'pandas', 'rasterio', 'seaborn', 'tifffile', 'os', 'glob'] ['Decimal', 'ROUND_HALF_UP', 'ROUND_HALF_EVEN', 'KMeans']Dict:{'decimal': [], 'folium': [], 'math': [], 'matplotlib': [], 'numpy': ['where', 'array', 'sum'], 'os': [], 'pandas': ['array', 'read_csv'], 'rasterio': [], 'seaborn': [], 'sklearn': [], 'tifffile': [], '': [], 'glob': []} axis_0: 10, axis_1: 0
home-credit-lgbm-with-feature-engineering-latest.py : ['corr', 'abs', 'where', 'astype', 'bool', 'get_dummies', 'nunique', 'nunique', 'value_counts', 'where', 'isin', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'read_csv', 'read_csv', 'reset_index', 'drop', 'pop', 'drop', 'replace', 'replace', 'notnull', 'replace', 'drop', 'astype', 'astype', 'astype', 'astype', 'astype', 'mean', 'isnull', 'factorize', 'drop', 'read_csv', 'apply', 'drop', 'agg', 'groupby', 'read_csv', 'rename', 'reset_index', 'count', 'groupby', 'merge', 'rename', 'reset_index', 'nunique', 'groupby', 'merge', 'apply', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'get_dummies', 'agg', 'groupby', 'merge', 'replace', 'rename', 'reset_index', 'nunique', 'groupby', 'merge', 'replace', 'apply', 'drop', 'join', 'drop', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'read_csv', 'replace', 'replace', 'replace', 'replace', 'replace', 'drop', 'drop', 'isnull', 'drop', 'replace', 'div', 'replace', 'div', 'map', 'drop', 'replace', 'replace', 'replace', 'replace', 'nunique', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'read_csv', 'agg', 'groupby', 'groupby', 'read_csv', 'apply', 'apply', 'agg', 'groupby', 'groupby', 'read_csv', 'rename', 'reset_index', 'nunique', 'groupby', 'merge', 'rename', 'reset_index', 'nunique', 'groupby', 'merge', 'rename', 'reset_index', 'max', 'groupby', 'rename', 'reset_index', 'sum', 'groupby', 'merge', 'astype', 'drop', 'agg', 'groupby', 'groupby', 'rename', 'sub', 'notnull', 'isnull', 'concat', 'to_csv', 'to_csv', 'join', 'join', 'join', 'join', 'join', 'to_csv', 'read_csv', 'head', 'head'] ['numpy', 'pandas', 'time', 'gc', 'matplotlib.pyplot', 'seaborn', 'warnings', 're', 'xgboost', 'lightgbm', 'seaborn', 'matplotlib.pyplot'] ['contextmanager', 'LGBMClassifier', 'roc_auc_score', 'KFold', 'StratifiedKFold', 'CatBoostClassifier']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'where', 'isin'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'factorize', 'notnull', 'merge'], 'time': [], 'gc': [], 'contextlib': [], 'lightgbm': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'warnings': [], 're': ['sub'], 'xgboost': [], 'catboost': []} axis_0: 1, axis_1: 13
housing-prices-xgboost-gridsearch-pipeline.py : ['update', 'join', 'read_csv', 'read_csv', 'dropna', 'drop', 'nunique', 'sum', 'isnull', 'value_counts', 'describe', 'corr', 'corr', 'sum', 'isnull', 'sum', 'isnull', 'rename', 'sort_values', 'sum', 'sum', 'isnull', 'drop', 'drop', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'select_dtypes', 'value_counts', 'value_counts', 'value_counts', 'drop', 'drop', 'concat', 'select_dtypes', 'sort_values', 'nunique', 'unique', 'fillna', 'sum', 'isnull', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'concat', 'head', 'corrwith', 'notnull', 'notnull', 'notnull', 'notnull', 'replace', 'head', 'head', 'sum', 'gt', 'head', 'transform', 'groupby', 'head', 'get_dummies', 'mul', 'concat', 'head', 'copy', 'head', 'nunique', 'boxplot', 'corr', 'rename', 'corr', 'sort_values', 'value_counts', 'select_dtypes', 'nunique', 'select_dtypes', 'value_counts', 'nunique', 'sum', 'isnull', 'sort_values', 'round', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['CategoricalDtype', 'ColumnTransformer', 'Pipeline', 'SimpleImputer', 'OneHotEncoder', 'XGBRegressor', 'plot_importance', 'GridSearchCV', 'mean_squared_error', 'r2_score', 'stats', 'ceil', 'set_config']Dict:{'numpy': ['round', 'sum', 'unique', 'copy'], 'pandas': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': [], 'scipy': ['describe'], 'math': [], 'os': ['rename', 'replace']} axis_0: 2, axis_1: 8
taxi-rides-time-analysis-and-oof-lgbm.py : ['read_csv', 'dropna', 'read_csv', 'replace', 'to_datetime', 'abs', 'abs', 'agg', 'groupby', 'join', 'merge', 'merge', 'min', 'max', 'min', 'max', 'mean', 'groupby', 'replace', 'replace', 'replace', 'copy', 'drop', 'to_csv', 'head'] ['time', 'numpy', 'pandas', 'gc', 'lightgbm', 'seaborn', 'matplotlib.pyplot'] ['train_test_split', 'metrics', 'mean_squared_error', 'KFold']Dict:{'time': [], 'numpy': ['mean', 'max', 'abs', 'min', 'copy'], 'pandas': ['merge', 'to_datetime', 'read_csv'], 'gc': [], 'lightgbm': [], 'sklearn': [], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 0
tfidf-swem-approach-number-chars.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'count', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'value_counts', 'value_counts', 'map', 'map', 'map', 'map', 'fillna', 'fillna', 'transform', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'join', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'max', 'array', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'astype', 'array', 'apply', 'astype', 'array', 'apply', 'read_csv', 'to_csv', 'sum', 'isna'] ['numpy', 'pandas', 'os', 'numpy', 'matplotlib.pyplot', 'gensim', 'random', 'lightgbm', 'gc', 'tqdm', 'seaborn'] ['brown', 'KFold', 'EarlyStopping', 'TfidfVectorizer', 'TruncatedSVD', 'Sequential', 'Dense', 'Activation', 'EarlyStopping', 'spearmanr', 'wordnet', 'StratifiedKFold', 'MaxAbsScaler']Dict:{'numpy': ['array', 'sum', 'max', 'clip'], 'pandas': ['isna', 'array', 'read_csv', 'value_counts'], 'os': ['replace'], 'matplotlib': [], 'gensim': [], 'nltk': [], 'random': [], 'sklearn': ['transform'], 'lightgbm': [], 'gc': [], 'keras': [], 'scipy': [], 'tqdm': [], 'seaborn': []} axis_0: 1, axis_1: 2
machine-failures-feature-engineering-ensembling.py : ['join', 'read_csv', 'replace', 'drop', 'astype', 'astype', 'set_index', 'head', 'read_csv', 'replace', 'drop', 'astype', 'astype', 'set_index', 'head', 'sum', 'isnull', 'select_dtypes', 'drop', 'select_dtypes', 'sum', 'isnull', 'to_csv'] ['numpy', 'pandas', 'os', 'pandas', 'numpy', 'pandas'] ['Pipeline', 'ColumnTransformer', 'OrdinalEncoder', 'StandardScaler', 'FunctionTransformer', 'StandardScaler', 'OrdinalEncoder', 'train_test_split', 'LogisticRegression', 'RandomForestClassifier', 'GradientBoostingClassifier', 'SVC', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'VotingClassifier', 'roc_auc_score', 'OrdinalEncoder']Dict:{'numpy': ['sum'], 'pandas': ['read_csv', 'isnull'], 'os': ['replace'], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 3
tps-eda-feature-engineering-selection-more.py : ['read_csv', 'drop', 'read_csv', 'drop', 'copy', 'sum', 'isnull', 'nunique', 'sum', 'isnull', 'nunique', 'sum', 'isnull', 'nunique', 'sum', 'sum', 'isnull', 'corr', 'unique', 'astype', 'astype', 'sum', 'isnull', 'fillna', 'mean', 'sum', 'isnull', 'drop', 'transform', 'drop', 'drop', 'corr', 'drop', 'boxplot', 'melt', 'boxplot', 'melt', 'drop', 'boxplot', 'melt', 'drop', 'drop', 'drop', 'drop', 'sort_values', 'drop', 'drop', 'copy', 'sum', 'isnull', 'fillna', 'mean', 'sum', 'isnull', 'unique', 'astype', 'astype', 'drop', 'transform', 'drop', 'drop', 'reset_index', 'drop', 'reset_index', 'copy', 'sum', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc'] ['shapiro', 'colored', 'VarianceThreshold', 'LabelEncoder', 'StandardScaler', 'mutual_info_classif', 'ExtraTreesClassifier', 'GroupKFold', 'LogisticRegression', 'SVC', 'KNeighborsClassifier', 'roc_auc_score']Dict:{'pandas': ['melt', 'unique', 'read_csv', 'isnull'], 'numpy': ['mean', 'sum', 'unique', 'copy'], 'scipy': [], 'termcolor': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'gc': []} axis_0: 0, axis_1: 17
tab-feb-2021-eda-and-feature-engineering-insights.py : ['unique', 'sort_values', 'unique', 'unique', 'sort_values', 'unique', 'apply', 'apply', 'keys', 'keys', 'reset_index', 'groupby', 'join', 'join', 'join', 'reset_index', 'agg', 'groupby', 'join', 'join', 'info', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby'] ['numpy', 'pandas', 'datetime', 'matplotlib.pyplot', 'seaborn', 'plotly.graph_objects', 'plotly.express', 'plotly.offline'] ['Tuple', 'List', 'Dict', 'make_subplots']Dict:{'numpy': ['info', 'unique'], 'pandas': ['unique'], 'datetime': [], 'typing': ['keys'], 'matplotlib': [], 'seaborn': [], 'plotly': []} axis_0: 0, axis_1: 0
voting-xgb-lgbm-cat-tune-features.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'head', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'drop', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'tail', 'unique', 'reset_index', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'head', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'reset_index', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'tail', 'to_dict', 'set_index', 'copy', 'map', 'read_csv', 'concat', 'fillna', 'drop', 'fillna', 'read_csv', 'astype', 'head', 'read_csv', 'astype', 'head', 'apply', 'head', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'map', 'map', 'head', 'drop', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'os', 'lightgbm', 'xgboost', 'catboost'] ['tqdm', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'os': [], 'tqdm': []} axis_0: 0, axis_1: 4
stacking-ensemble.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'head', 'fillna', 'fillna', 'apply', 'map', 'fillna', 'median', 'astype', 'apply', 'to_dict', 'median', 'groupby', 'dropna', 'fillna', 'map', 'groupby', 'sum', 'fillna', 'apply', 'groupby', 'sum', 'fillna', 'apply', 'astype', 'astype', 'concat', 'update', 'concat', 'astype', 'astype', 'to_csv'] ['lightgbm', 'numpy', 'pandas', 'warnings', 'kaggler'] ['CatBoostClassifier', 'dump', 'LGBMClassifier', 'pyplot', 'Path', 'RandomForestClassifier', 'ExtraTreesClassifier', 'roc_auc_score', 'confusion_matrix', 'StratifiedKFold', 'StandardScaler', 'AutoLGB', 'LabelEncoder', 'copy']Dict:{'catboost': [], 'joblib': [], 'lightgbm': [], 'matplotlib': [], 'numpy': ['median', 'sum'], 'pandas': ['concat', 'read_csv'], 'pathlib': [], 'sklearn': [], 'warnings': [], 'kaggler': [], 'copy': []} axis_0: 1, axis_1: 2
titanic-eda-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'info', 'describe', 'sum', 'isnull', 'drop', 'fillna', 'median', 'fillna', 'sum', 'isnull', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'map', 'hist', 'map', 'hist', 'map', 'map', 'corr', 'select_dtypes', 'replace', 'replace', 'replace', 'replace', 'head', 'drop', 'head', 'drop', 'sort_values', 'drop', 'fillna', 'median', 'fillna', 'median', 'replace', 'replace', 'replace', 'replace', 'drop', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'plotly.graph_objects', 'string', 'warnings'] ['iplot', 'LabelEncoder', 'train_test_split', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'ExtraTreesClassifier', 'BaggingClassifier', 'RandomForestClassifier', 'DecisionTreeClassifier', 'ExtraTreeClassifier', 'XGBClassifier', 'ShuffleSplit', 'GridSearchCV', 'cross_validate', 'accuracy_score', 'confusion_matrix']Dict:{'pandas': ['value_counts', 'read_csv', 'isnull'], 'numpy': ['median', 'info', 'sum'], 'matplotlib': ['hist'], 'seaborn': [], 'plotly': [], 'string': [], '': [], 'sklearn': [], 'xgboost': [], 'warnings': []} axis_0: 0, axis_1: 1
sklearn-pipeline-playground-for-12-classifiers.py : ['read_csv', 'drop', 'select_dtypes', 'mean', 'select_dtypes', 'drop', 'select_dtypes', 'drop', 'mean', 'copy', 'select_dtypes', 'copy', 'select_dtypes', 'drop', 'drop', 'concat', 'mean', 'sort_values', 'mean', 'reset_index', 'read_csv', 'read_csv', 'mean', 'to_csv'] ['numpy', 'pandas', 'xgboost', 'lightgbm', 'warnings'] ['StandardScaler', 'RobustScaler', 'OneHotEncoder', 'ColumnTransformer', 'SimpleImputer', 'Pipeline', 'make_pipeline', 'GridSearchCV', 'KFold', 'cross_val_score', 'DummyRegressor', 'LinearRegression', 'ElasticNet', 'Lasso', 'Ridge', 'SGDRegressor', 'SVR', 'LinearSVR', 'KernelRidge', 'RandomForestRegressor', 'GradientBoostingRegressor']Dict:{'numpy': ['mean', 'copy'], 'pandas': ['concat', 'read_csv'], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 6
talkingdata-adtracking-eda.py : ['read_csv', 'read_csv', 'head', 'head', 'unique', 'value_counts', 'hist', 'max', 'min', 'mean', 'mean'] ['numpy', 'pandas', 'mlcrate', 'os', 'gc', 'matplotlib.pyplot', 'seaborn', 'subprocess'] []Dict:{'numpy': ['mean', 'unique', 'min', 'max'], 'pandas': ['unique', 'read_csv', 'value_counts'], 'mlcrate': [], 'os': [], 'gc': [], 'matplotlib': ['hist'], 'seaborn': [], 'subprocess': []} axis_0: 0, axis_1: 0
eda-feature-engineering-summary-of-domain-info.py : ['read_csv', 'head', 'sum', 'isna', 'describe', 'fillna', 'fillna', 'fillna', 'head', 'boxplot', 'boxplot', 'hist', 'hist', 'hist', 'cut', 'head', 'hist', 'hist', 'hist', 'hist', 'hist', 'read_csv', 'head', 'sum', 'isna', 'head', 'value_counts', 'sort_values', 'mean', 'groupby', 'read_csv', 'head', 'value_counts', 'value_counts', 'value_counts', 'count', 'groupby', 'value_counts', 'value_counts', 'describe', 'describe', 'mean', 'rolling', 'mean', 'rolling', 'copy', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'shift', 'apply'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'sklearn', 'random', 'os', 'warnings'] ['LabelEncoder', 'mean_absolute_error']Dict:{'numpy': ['mean', 'sum', 'copy'], 'pandas': ['isna', 'cut', 'read_csv', 'value_counts'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'sklearn': [], 'random': [], 'os': [], 'warnings': []} axis_0: 0, axis_1: 0
catboost-in-action-with-dnn.py : ['join', 'read_csv', 'read_csv', 'drop', 'drop', 'unique', 'unique', 'apply', 'apply', 'apply', 'apply', 'mode', 'unique', 'fillna', 'unique', 'fillna', 'replace', 'replace', 'replace', 'replace', 'unique', 'notnull', 'notnull', 'transform', 'notnull', 'notnull', 'transform', 'notnull', 'fillna', 'fillna', 'reset_index', 'value_counts', 'merge', 'fillna', 'merge', 'transform', 'transform', 'astype', 'astype', 'astype', 'astype', 'to_csv', 'read_csv', 'to_csv', 'mean', 'std', 'mean', 'std', 'read_csv', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'pprint', 'joblib', 'category_encoders', 'gc'] ['time', 'CatBoostClassifier', 'Pool', 'StratifiedKFold', 'roc_auc_score', 'average_precision_score', 'make_scorer', 'LabelEncoder']Dict:{'numpy': ['mean', 'std', 'unique'], 'pandas': ['read_csv', 'value_counts', 'unique', 'notnull', 'merge'], 'os': ['replace'], 'time': [], 'pprint': [], 'joblib': [], 'catboost': [], 'sklearn': ['transform'], 'category_encoders': [], 'gc': []} axis_0: 0, axis_1: 2
bag-of-tricks-extended.py : ['read_parquet', 'head', 'reset_index', 'describe', 'sum', 'isnull', 'read_csv', 'merge', 'tail', 'read_csv', 'copy', 'drop_duplicates', 'merge', 'tail', 'read_parquet', 'reset_index', 'head', 'read_csv', 'copy', 'drop_duplicates', 'merge', 'set_index', 'drop', 'interpolate', 'sum', 'isnull', 'drop', 'drop', 'set_index', 'head', 'min', 'max', 'min', 'min', 'max', 'min', 'nunique', 'astype', 'astype', 'astype', 'stack', 'unique', 'astype', 'stack', 'stack', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'count', 'groupby', 'reset_index', 'count', 'groupby', 'unique', 'unique', 'quantile', 'quantile', 'quantile', 'quantile', 'aggregate', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'shift', 'shift', 'merge', 'merge', 'merge', 'merge', 'merge'] ['fastbook', 'torch', 'pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 're', 'warnings', 'torch', 'pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 're', 'warnings', 'modin.pandas'] ['*', '*', 'MinMaxScaler', 'get_ipython', 'MinMaxScaler', 'kurtosis', 'train_test_split', 'XGBClassifier', 'roc_auc_score', 'roc_auc_score', 'full_suite', 'iris', 'Dataset', 'get_ipython', 'patch_sklearn']Dict:{'fastbook': [], 'fastai': [], 'torch': ['stack', 'quantile', 'max', 'sum', 'min', 'unique'], 'pandas': ['read_csv', 'isnull', 'read_parquet', 'unique', 'merge'], 'numpy': ['stack', 'quantile', 'max', 'sum', 'min', 'unique', 'copy'], 'seaborn': [], 'matplotlib': [], 're': [], 'sklearn': [], 'warnings': [], 'IPython': [], 'scipy': [], 'xgboost': [], 'deepchecks': [], 'sklearnex': [], 'modin': []} axis_0: 0, axis_1: 0
home-credit-eda-distributions-and-outliers.py : ['update', 'read_csv', 'read_csv', 'concat', 'value_counts', 'sum', 'isna', 'sum', 'isna', 'count', 'isna', 'concat', 'sum', 'isna', 'isna', 'map', 'notna', 'pop', 'notna', 'notna', 'notna', 'notna', 'isna', 'keys', 'value_counts', 'transform', 'transform', 'transform', 'transform', 'keys', 'value_counts', 'notna', 'value_counts', 'get', 'value_counts', 'get', 'value_counts', 'get', 'describe', 'describe'] ['pandas', 'matplotlib', 'numpy', 'collections', 'seaborn', 'matplotlib.pyplot'] ['HTML', 'RandomForestClassifier', 'accuracy_score', 'confusion_matrix', 'roc_auc_score', 'train_test_split', 'LabelEncoder', 'LGBMClassifier', 'plot_importance']Dict:{'IPython': [], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'notna'], 'matplotlib': ['get'], 'numpy': ['sum'], 'sklearn': ['transform'], 'collections': [], 'lightgbm': [], 'seaborn': []} axis_0: 1, axis_1: 1
new-census-knn-xgb-lgbm-cat-lb-1-4121.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'head', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'drop', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'tail', 'unique', 'reset_index', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'head', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'reset_index', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'tail', 'to_dict', 'set_index', 'copy', 'map', 'read_csv', 'concat', 'fillna', 'drop', 'fillna', 'read_csv', 'astype', 'head', 'read_csv', 'astype', 'head', 'apply', 'head', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'map', 'map', 'head', 'drop', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'os', 'lightgbm', 'xgboost', 'catboost'] ['tqdm', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'os': [], 'tqdm': []} axis_0: 0, axis_1: 4
5k-features-not-a-problem-for-lightautoml.py : ['read_csv', 'head', 'read_csv', 'head', 'clip', 'read_csv', 'reset_index', 'head', 'head', 'drop', 'mean', 'std', 'drop', 'mean', 'std', 'head', 'to_csv'] ['warnings', 'os', 'time', 'requests', 'numpy', 'pandas', 'torch'] ['display', 'HTML', 'Javascript', 'log_loss', 'TabularAutoML', 'TabularUtilizedAutoML', 'Task', 'ReportDeco']Dict:{'warnings': [], 'IPython': [], 'os': [], 'time': [], 'requests': ['head'], 'numpy': ['mean', 'std', 'clip'], 'pandas': ['read_csv'], 'sklearn': [], 'torch': ['mean', 'std', 'clip'], 'lightautoml': []} axis_0: 0, axis_1: 0
feature-engineering-from-the-titanic-dataset.py : ['read_csv', 'head', 'sum', 'isnull', 'sum', 'sum', 'sum', 'get_dummies', 'concat', 'head', 'unique', 'head', 'unique', 'unique', 'sum', 'unique', 'apply', 'unique', 'sum', 'unique', 'astype', 'head', 'unique', 'sum', 'unique', 'unique', 'sum', 'unique', 'apply', 'unique', 'sum', 'unique', 'apply', 'unique', 'sum', 'unique', 'head', 'unique', 'sum', 'unique', 'astype', 'apply', 'fillna', 'mean', 'boxplot', 'head', 'apply', 'apply', 'apply', 'sum', 'sum', 'sum', 'head', 'apply', 'unique', 'sum', 'unique', 'head', 'unique', 'sum', 'unique', 'unique', 'sum', 'unique', 'unique', 'sum', 'unique', 'head', 'unique', 'sum', 'unique', 'replace', 'replace', 'astype', 'astype', 'unique', 'sum', 'unique', 'fillna', 'mode', 'boxplot', 'fillna', 'apply', 'head', 'replace', 'astype', 'head', 'unique', 'sum', 'unique', 'astype', 'fillna', 'mode', 'get_dummies', 'concat', 'drop', 'head', 'sum', 'sum', 'sum'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'math'] []Dict:{'numpy': ['mean', 'sum', 'unique'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'unique'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'math': []} axis_0: 0, axis_1: 0
transformer-based-ts-representation-learning.py : ['read_csv', 'read_csv', 'read_csv', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', '__init__', '__setstate__', 'astype', 'astype', 'get_dummies', 'copy', 'copy', 'to_numpy', 'copy', 'transform', 'to_numpy', 'to_numpy', 'to_numpy', 'unique', 'array', 'array', 'lt', 'bool', 'bool', 'where', 'mode', 'mode', '__init__', '__init__', '__init__', 'transpose', '__init__', '__init__', '__setstate__', '__init__', '__init__', 'bool', 'where', 'eval', 'bool'] ['os', 'sys', 'numpy', 'pandas', 'time', 'random', 'math', 'pickle', 'glob', 're', 'string', 'collections', 'json', 'gc', 'torch', 'torch.nn', 'pytorch_lightning', 'warnings', 'math', 'torch'] ['dump', 'load', 'RobustScaler', 'StandardScaler', 'functional', 'Dataset', 'DataLoader', 'random_split', 'Optimizer', 'Adam', 'lr_scheduler', 'Trainer', 'seed_everything', 'EarlyStopping', 'LearningRateMonitor', 'ModelCheckpoint', 'TensorBoardLogger', 'LightningDataModule', 'LightningModule', 'Trainer', 'summary', 'Optional', 'Any', 'nn', 'Tensor', 'functional', 'MultiheadAttention', 'Linear', 'Dropout', 'BatchNorm1d', 'TransformerEncoderLayer']Dict:{'os': [], 'sys': [], 'numpy': ['transpose', 'max', 'sum', 'where', 'min', 'unique', 'array', 'copy'], 'pandas': ['read_csv', 'eval', 'get_dummies', 'unique', 'array'], 'time': [], 'random': [], 'math': [], 'pickle': ['__init__'], 'glob': [], 're': [], 'string': [], 'collections': [], 'json': [], 'gc': [], 'sklearn': ['__setstate__', 'transform', '__init__'], 'torch': ['__setstate__', 'eval', '__init__'], 'pytorch_lightning': [], 'torchinfo': [], 'warnings': [], 'typing': ['__init__']} axis_0: 2, axis_1: 0
94-accuracy-score-ensemble-model.py : ['join', 'read_csv', 'read_csv', 'head', 'info', 'info', 'describe', 'copy', 'copy', 'pop', 'select_dtypes', 'factorize', 'astype', 'apply', 'fillna', 'mean', 'sort_values', 'sort_values', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'groupby', 'value_counts', 'value_counts', 'value_counts', 'groupby', 'value_counts', 'groupby', 'value_counts', 'value_counts', 'value_counts', 'groupby', 'value_counts', 'groupby', 'aggregate', 'groupby', 'value_counts', 'groupby', 'value_counts', 'groupby', 'value_counts', 'groupby', 'value_counts', 'value_counts', 'groupby', 'value_counts', 'groupby', 'min', 'min', 'min', 'min', 'min', 'map', 'agg', 'groupby', 'map', 'map', 'map', 'value_counts', 'value_counts', 'value_counts', 'groupby', 'value_counts', 'groupby', 'value_counts', 'groupby', 'map', 'any', 'isnull', 'value_counts', 'value_counts', 'concat', 'sum', 'isnull', 'isnull', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'astype', 'astype', 'drop', 'drop', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'drop', 'isnull', 'isnull', 'pop', 'info', 'select_dtypes', 'array', 'any', 'isnull', 'nunique', 'nunique', 'nunique', 'nunique', 'transform', 'nunique', 'nunique', 'nunique', 'nunique', 'to_records', 'to_records', 'apply', 'min', 'max', 'min', 'dropna', 'pop', 'value_counts', 'value_counts', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'warnings', 'os'] ['LabelEncoder', 'OrdinalEncoder', 'mutual_info_classif', 'LocalOutlierFactor', 'KNeighborsClassifier', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'RandomForestClassifier', 'GradientBoostingClassifier', 'VotingClassifier', 'ConfusionMatrixDisplay', 'confusion_matrix', 'knnimput', 'MEstimateEncoder', 'LGBMClassifier', 'XGBClassifier']Dict:{'numpy': ['mean', 'any', 'max', 'sum', 'min', 'info', 'array', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'factorize', 'array'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'ycimpute': [], 'category_encoders': [], 'lightgbm': [], 'xgboost': ['apply'], 'warnings': [], 'os': []} axis_0: 0, axis_1: 0
nice-eda-and-quick-xgb-baseline-in-2minutes.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'select_dtypes', 'corr', 'transform', 'transform', 'set_index', 'astype', 'astype', 'ge', 'array', 'set_index', 'astype', 'drop', 'reset_index', 'mean'] ['pandas', 'numpy', 'matplotlib.pyplot', 'plotly.express', 'seaborn', 'gc', 're', 'math', 'warnings', 'time', 'os'] ['HTML', 'Counter', 'tqdm', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'roc_auc_score', 'accuracy_score', 'confusion_matrix', 'ConfusionMatrixDisplay', 'RocCurveDisplay', 'LGBMRegressor', 'XGBRegressor', 'CatBoostRegressor', 'Style', 'Fore', 'MinMaxScaler', 'StandardScaler', 'XGBClassifier']Dict:{'IPython': [], 'pandas': ['array', 'read_csv', 'isnull'], 'numpy': ['transpose', 'array', 'sum', 'mean'], 'matplotlib': [], 'plotly': [], 'seaborn': [], 'gc': [], 're': [], 'collections': [], 'tqdm': [], 'math': [], 'sklearn': ['transform'], 'warnings': [], 'time': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'colorama': [], 'os': []} axis_0: 0, axis_1: 0
covid-global-forecast-sir-model-ml-regressions.py : ['read_csv', 'read_csv', 'read_csv', 'fillna', 'head', 'describe', 'nunique', 'nunique', 'unique', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'agg', 'groupby', 'join', 'fillna', 'diff', 'array', 'array', 'isin', 'concat', 'to_datetime', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'sum', 'isnull', 'nlargest', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'reset_index', 'replace', 'fillna', 'read_csv', 'mode', 'astype', 'mode', 'astype', 'merge', 'fillna', 'drop', 'apply', 'copy', 'astype', 'apply', 'replace', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'astype', 'to_csv', 'copy', 'copy', 'concat', 'isin', 'isin', 'unique', 'unique', 'apply', 'replace', 'nunique', 'unique', 'unique', 'concat', 'concat', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'isin', 'isin', 'isin', 'isin', 'copy', 'apply', 'replace', 'fillna', 'min', 'max', 'replace', 'fillna', 'copy', 'apply', 'replace', 'fillna', 'min', 'max', 'replace', 'fillna', 'astype', 'unique', 'unique', 'astype', 'astype'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'time', 'warnings', 'lightgbm', 'xgboost'] ['preprocessing', 'datetime', 'integrate', 'optimize', 'plot_importance', 'plot_tree', 'RandomizedSearchCV', 'GridSearchCV', 'linear_model', 'mean_squared_error', 'auto_arima']Dict:{'numpy': ['max', 'sum', 'min', 'unique', 'isin', 'diff', 'array', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'array', 'merge', 'to_datetime'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'time': [], 'datetime': ['min', 'max', 'replace'], 'scipy': [], 'warnings': [], 'lightgbm': [], 'xgboost': [], 'pyramid': []} axis_0: 0, axis_1: 13
simple-linear-regression-models.py : ['read_csv', 'read_csv', 'concat', 'drop', 'drop', 'head', 'max', 'any', 'any', 'replace', 'drop', 'apply', 'skew', 'sum', 'isnull', 'sum', 'isnull', 'apply', 'groupby', 'mode', 'fillna', 'map', 'sort_values', 'median', 'groupby', 'boxplot', 'fillna', 'median', 'fillna', 'replace', 'fillna', 'fillna', 'sum', 'sum', 'isnull', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'concat', 'sort_values', 'mean', 'groupby', 'max', 'count', 'max', 'count', 'replace', 'replace', 'unique', 'unique', 'replace', 'sort_values', 'mean', 'groupby', 'drop', 'replace', 'astype', 'astype', 'get_dummies', 'drop', 'mean', 'std', 'abs', 'abs', 'abs', 'abs', 'mean', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['LinearRegression', 'RidgeCV', 'LassoCV', 'ElasticNetCV', 'cross_val_score', 'mean_squared_error']Dict:{'numpy': ['mean', 'median', 'any', 'max', 'abs', 'sum', 'unique', 'std'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'unique'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': []} axis_0: 0, axis_1: 9
lstm-prediction-with-ohlc.py : ['read_csv', 'tail', 'fillna', 'map', 'to_datetime', 'info', 'read_csv', 'replace', 'where', 'drop_duplicates', 'std', 'skew', 'kurtosis', 'to_datetime', 'where', 'where', 'where', 'where', 'where', 'merge', 'mean', 'groupby', 'reset_index', 'std', 'groupby', 'reset_index', 'merge', 'merge', 'drop', 'fillna', 'min', 'groupby', 'reset_index', 'max', 'groupby', 'reset_index', 'merge', 'merge', 'drop', 'fillna', 'fillna', 'head', 'head', 'unique', 'dropna', 'to_numpy', 'array', 'array', 'fillna', 'to_numpy', 'array', 'concat', 'rank', 'astype', 'drop', 'drop', 'merge', 'fillna', 'map', 'to_datetime', 'merge', 'fillna', 'reset_index', 'concat', 'tail', 'unique'] ['numpy', 'pandas', 'tensorflow', 'sys', 'warnings', 'time', 'os', 'copy', 'gc', 're', 'random', 'pickle', 'matplotlib.pyplot', 'seaborn', 'statsmodels.api', 'keras', 'pydot', 'jpx_tokyo_market_prediction'] ['layers', 'keras', 'BatchNormalization', 'Sequential', 'Model', 'Input', 'Embedding', 'Dense', 'Flatten', 'Concatenate', 'Reshape', 'backend', 'regularizers', 'Adam', 'EarlyStopping', 'ModelCheckpoint', 'l2', 'Loss', 'display', 'json_normalize', 'pprint', 'Path', 'tqdm', 'datetime', 'timedelta', 'StandardScaler', 'MinMaxScaler', 'KFold', 'Sequential', 'Model', 'load_model', 'LSTM', 'Dense', 'RepeatVector', 'TimeDistributed', 'Input', 'BatchNormalization', 'multiply', 'concatenate', 'Flatten', 'Activation', 'dot', 'Adam', 'plot_model', 'EarlyStopping', 'plot_model', 'model_to_dot', 'StandardScaler']Dict:{'numpy': ['mean', 'max', 'array', 'where', 'min', 'unique', 'info', 'std'], 'pandas': [], 'tensorflow': [], 'keras': [], 'sys,': [], 'warnings,': [], 'time,': [], 'os,': [], 'copy,': [], 'gc,': [], 're,': [], 'random': [], 'pickle': [], 'IPython': [], 'matplotlib': [], 'seaborn': [], 'pprint': [], 'pathlib': ['replace'], 'tqdm': [], 'datetime': ['min', 'max'], 'statsmodels': [], 'sklearn': [], 'pydot': [], 'jpx_tokyo_market_prediction': []} axis_0: 1, axis_1: 8
to-sleep-or-not-to-sleep-deep-eda-dive.py : ['head', 'info', 'head', 'info', 'info', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'apply', 'groupby', 'any', 'isnull', 'reset_index', 'value_counts', 'pivot_table', 'join', 'rename', 'agg', 'groupby', 'insert', 'sort_values', 'query', 'query', 'query', 'sum', 'isna', 'sum', 'isna', 'nunique', 'count', 'describe', 'copy', 'pivot_table', 'astype', 'fillna', 'isna', 'dropna', 'dropna', 'reset_index', 'groupby', 'astype', 'reset_index', 'groupby', 'pivot', 'unique', 'reset_index', 'rename', 'unique', 'read_csv', 'isna', 'astype', 'astype', 'dropna', 'dropna', 'apply', 'to_datetime', 'tz_localize', 'apply', 'apply', 'reset_index', 'sum', 'groupby', 'dropna', 'dropna', 'apply', 'to_datetime', 'tz_localize', 'apply', 'apply', 'reset_index', 'sum', 'groupby', 'dropna', 'dropna', 'isnull', 'isnull', 'reset_index', 'agg', 'groupby', 'rename', 'round', 'reset_index', 'value_counts', 'max', 'groupby', 'min', 'groupby', 'max', 'groupby', 'reset_index', 'reset_index', 'merge', 'read_csv', 'copy', 'to_datetime', 'copy', 'copy', 'copy', 'apply', 'to_datetime', 'tz_localize', 'copy', 'copy', 'apply', 'to_datetime', 'tz_localize', 'drop', 'apply', 'to_datetime', 'tz_localize', 'drop', 'merge', 'drop', 'fillna', 'interpolate', 'fillna', 'astype', 'astype', 'apply', 'head', 'sum', 'sum', 'sum', 'sum', 'apply', 'to_datetime', 'tz_localize', 'apply', 'to_datetime', 'tz_localize', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'merge', 'merge', 'join', 'join', 'join', 'get', 'get'] ['time', 'gc', 'pandas', 'numpy', 'datetime', 'matplotlib.pyplot', 'matplotlib.cm', 'seaborn', 'plotly.graph_objects', 'plotly.express', 'plotly.offline', 'warnings', 'missingno', 'duckdb'] ['HTML', 'make_subplots', 'Fore', 'Style', 'init', 'pprint']Dict:{'IPython': [], 'time': [], 'gc': [], 'pandas': ['isna', 'to_datetime', 'read_csv', 'isnull', 'pivot_table', 'value_counts', 'unique', 'merge', 'pivot'], 'numpy': ['any', 'max', 'sum', 'round', 'min', 'unique', 'info', 'insert', 'copy'], 'datetime': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'colorama': [], 'pprint': [], 'warnings': [], 'missingno': [], 'duckdb': []} axis_0: 0, axis_1: 5
classification-comparing-different-algorithms.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'select_dtypes', 'sample', 'corr', 'select_dtypes', 'dropna', 'drop', 'drop'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['timedelta', 'Pipeline', 'SimpleImputer', 'OrdinalEncoder', 'ColumnTransformer', 'train_test_split', 'MultinomialNB', 'LogisticRegression', 'KNeighborsClassifier', 'LinearSVC', 'DecisionTreeClassifier', 'BaggingClassifier', 'DecisionTreeClassifier', 'AdaBoostClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'VotingClassifier']Dict:{'numpy': [], 'pandas': ['read_csv'], 'matplotlib': [], 'seaborn': [], 'datetime': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 2
intro-to-lstm-time-series-forecasting.py : ['read_csv', 'read_csv', 'head', 'diff'] ['numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'warnings', 'os', 'pickle'] ['Forecaster', 'EarlyStopping']Dict:{'numpy': ['diff'], 'pandas': ['read_csv'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'warnings': [], 'os': [], 'pickle': [], 'scalecast': [], 'tensorflow': []} axis_0: 0, axis_1: 0
regression-sales-prediction-sklearn-statsmodels.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'describe', 'describe', 'corr', 'describe', 'hist', 'hist', 'hist', 'count', 'groupby', 'mean', 'groupby', 'max', 'groupby', 'min', 'groupby', 'head', 'head', 'head', 'sum', 'isnull', 'drop_duplicates', 'head', 'drop', 'drop', 'drop', 'unique', 'mean', 'groupby', 'mean', 'array', 'mean', 'groupby', 'mean', 'groupby', 'head', 'head', 'mean', 'groupby', 'replace', 'copy', 'drop', 'rename', 'head', 'mean', 'array', 'mean', 'groupby', 'head', 'concat', 'fillna', 'fillna', 'copy', 'drop', 'drop', 'copy', 'drop', 'head', 'mean', 'std', 'head', 'mean', 'std', 'head', 'copy', 'copy', 'mean', 'std', 'array', 'head', 'array', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'statsmodels.api', 'os'] ['zscore', 'influence_plot', 'train_test_split', 'mutual_info_regression', 'LinearRegression', 'r2_score', 'mean_absolute_error', 'mean_squared_error', 'wls_prediction_std', 'XGBRegressor']Dict:{'numpy': ['mean', 'max', 'sum', 'array', 'min', 'unique', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'array'], 'matplotlib': ['hist'], 'seaborn': [], 'scipy': [], 'statsmodels': [], 'sklearn': [], 'xgboost': [], 'os': ['rename', 'replace']} axis_0: 0, axis_1: 8
masters-final-project-eda.py : ['read_csv', 'join', 'read_csv', 'join', 'mean', 'min', 'max', 'diff', 'read_csv', 'join', 'read_csv', 'join', 'mean', 'read_csv', 'join', 'mean', 'read_csv', 'join', 'mean', 'read_csv', 'join', 'max', 'abs'] ['sys', 'scipy', 'matplotlib', 'numpy', 'pandas', 'os', 'time', 'numpy', 'pandas', 'scipy.signal', 'matplotlib.pyplot', 'gc', 'warnings', 'warnings'] ['tqdm_notebook', 'hann', 'hann']Dict:{'sys': [], 'scipy': [], 'matplotlib': [], 'numpy': ['mean', 'max', 'abs', 'min', 'diff'], 'pandas': ['read_csv'], 'os': [], 'time': [], 'tqdm': [], 'gc': [], 'warnings': []} axis_0: 2, axis_1: 0
fe-pipeline.py : ['info', 'read_csv', 'read_csv', 'read_csv', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'apply', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'pct_change', 'shift', 'groupby', 'shift', 'groupby', 'array', 'rolling', 'mean', 'max', 'min', 'std', 'apply', 'mean', 'abs', 'diff', 'apply', 'max', 'abs', 'apply', 'min', 'abs', 'sort_values', 'unique', 'merge', 'sum', 'isna', 'drop', 'drop', 'sort_values', 'apply', 'fillna', 'abs', 'head', 'sort_values', 'head', 'sort_values', 'head', 'sort_values', 'tail', 'sort_values', 'drop', 'replace', 'fillna', 'replace', 'fillna', 'array', 'astype', 'round', 'clip', 'array', 'astype', 'round', 'clip', 'info', 'astype', 'round', 'clip', 'info', 'astype', 'round', 'clip', 'to_csv', 'head', 'info', 'info', 'info', 'info', 'info', 'info'] ['matplotlib.pyplot', 'scipy.stats', 'lightgbm', 'xgboost', 'seaborn', 'random', 'pandas', 'numpy', 'scipy', 'itertools', 'warnings', 'librosa', 'time', 'pywt', 'os', 'gc'] ['List', 'NoReturn', 'Union', 'Tuple', 'Optional', 'Text', 'Generic', 'Callable', 'Dict', 'f1_score', 'cohen_kappa_score', 'mean_squared_error', 'getLogger', 'Formatter', 'StreamHandler', 'FileHandler', 'INFO', 'butter', 'lfilter', 'filtfilt', 'savgol_filter', 'KFold', 'GroupKFold', 'feature_calculators', 'pearsonr', 'spearmanr', 'kendalltau', 'LinearRegression', 'ProfileReport', 'tqdm_notebook', 'contextmanager', 'Parallel', 'delayed', 'display', 'signal']Dict:{'typing': [], 'sklearn': [], 'logging': [], 'scipy': [], 'tsfresh': [], 'pandas_profiling': [], 'tqdm': [], 'contextlib': [], 'joblib': [], 'IPython': [], 'matplotlib': [], 'lightgbm': [], 'xgboost': [], 'seaborn': [], 'random': [], 'pandas': ['isna', 'read_csv', 'unique', 'array', 'merge'], 'numpy': ['mean', 'max', 'diff', 'abs', 'sum', 'array', 'round', 'min', 'unique', 'clip', 'info', 'std'], 'itertools': ['groupby'], 'warnings': [], 'librosa': [], 'time': [], 'pywt': [], 'os': ['replace'], 'gc': []} axis_0: 0, axis_1: 3
mean-median-feature-engineering-titanic.py : ['drop', 'drop', 'isnull', 'isnull', 'median', 'isnull', 'median', 'isnull', 'mode', 'isnull', 'mode', 'transform', 'reset_index', 'concat', 'get_dummies', 'drop', 'read_csv', 'read_csv', 'head', 'mean', 'median', 'mean', 'median', 'mean', 'median', 'mean', 'median', 'read_csv', 'astype', 'to_csv', 'head'] ['numpy', 'pandas', 'random', 'os', 'warnings'] ['clear_output', 'StandardScaler', 'TabularAutoML', 'TabularUtilizedAutoML', 'Task', 'ReportDeco']Dict:{'IPython': [], 'numpy': ['mean', 'median'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'random,os': [], 'warnings': [], 'sklearn': ['transform'], 'lightautoml': []} axis_0: 1, axis_1: 0
eda-more-technical.py : ['join', 'read_csv', 'read_csv', 'head', 'describe', 'info', 'value_counts', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'boxplot', 'skew', 'kurt', 'sort_values', 'corr', 'reset_index', 'copy', 'corr', 'bool', 'corr', 'drop', 'drop', 'reset_index', 'copy', 'reset_index', 'concat', 'drop', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'concat', 'transform', 'groupby', 'fillna', 'mean', 'fillna', 'fillna', 'astype', 'transform', 'groupby', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'apply', 'sort_values', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'value_counts', 'drop', 'reset_index', 'get_dummies', 'head', 'value_counts', 'drop', 'drop', 'sample', 'min', 'max', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'std', 'std', 'corr', 'head', 'mean', 'iterrows', 'iterrows', 'mean', 'items', 'items', 'items', 'items', 'items', 'items', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.gridspec', 'xgboost', 'matplotlib.pyplot', 'scipy.stats', 'sklearn.linear_model', 'matplotlib.style', 'seaborn', 'missingno', 'optuna', 'warnings'] ['datetime', 'skew', 'boxcox1p', 'boxcox_normmax', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'GradientBoostingRegressor', 'SVR', 'make_pipeline', 'RobustScaler', 'KFold', 'cross_val_score', 'train_test_split', 'StratifiedKFold', 'mean_squared_error', 'mean_absolute_error', 'StackingCVRegressor', 'XGBRegressor', 'LGBMRegressor', 'TSNE', 'KMeans', 'PCA', 'StandardScaler']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'os': [], 'matplotlib': [], 'datetime': ['min', 'max'], 'scipy': ['mode', 'describe', 'skew'], 'sklearn': ['transform'], 'mlxtend': [], 'xgboost': [], 'lightgbm': [], 'seaborn': ['boxplot'], 'missingno': [], 'optuna': [], 'warnings': []} axis_0: 0, axis_1: 2
s03e13-simple-eda-baseline.py : ['read_csv', 'drop', 'read_csv', 'read_csv', 'read_csv', 'replace', 'replace', 'concat', 'concat', 'nunique', 'sum', 'isnull', 'sum', 'duplicated', 'astype', 'value_counts', 'unique', 'corr', 'reset_index', 'stack', 'mean', 'mean', 'std', 'mean', 'std', 'mean', 'mean', 'mean', 'std', 'sort_values', 'mean', 'sort_values', 'mean', 'sort_values', 'sum', 'items', 'join', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'astype', 'astype', 'mean', 'mean', 'mean', 'std', 'array', 'join', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'umap', 'optuna', 'warnings'] ['TSNE', 'train_test_split', 'cross_val_score', 'RepeatedStratifiedKFold', 'GridSearchCV', 'GridSearchCV', 'permutation_importance', 'linkage', 'dendrogram', 'classification_report', 'log_loss', 'make_scorer', 'LogisticRegression', 'XGBClassifier', 'plot_importance', 'OrdinalEncoder', 'fcluster']Dict:{'numpy': ['mean', 'stack', 'sum', 'array', 'unique', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'array'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'umap': [], 'optuna': [], 'scipy': [], 'xgboost': [], 'warnings': [], '=': [], '[],[]': []} axis_0: 2, axis_1: 72
ipba-15-ml-case-study.py : ['read_csv', 'info', 'describe', 'select_dtypes', 'select_dtypes', 'drop', 'map', 'drop'] ['pandas', 'numpy'] ['train_test_split', 'GridSearchCV', 'ColumnTransformer', 'Pipeline', 'SimpleImputer', 'StandardScaler', 'OneHotEncoder', 'RandomForestClassifier', 'classification_report', 'confusion_matrix']Dict:{'pandas': ['read_csv'], 'numpy': ['info'], 'sklearn': []} axis_0: 0, axis_1: 1
psse1-complete-eda-and-feature-engineering.py : ['read_csv', 'read_csv', 'corr', 'drop', 'quantile', 'quantile', 'drop', 'boxplot', 'skew', 'boxplot', 'skew', 'boxplot', 'skew', 'boxplot', 'skew', 'sort_values', 'astype', 'astype', 'transform', 'groupby', 'transform', 'groupby', 'get_dummies', 'get_dummies', 'array', 'to_csv'] ['numpy', 'math', 'warnings', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'xgboost', 'lightgbm', 'catboost'] ['stats', 'fetch_california_housing', 'stats', 'inv_boxcox', 'mutual_info_regression', 'KMeans']Dict:{'numpy': ['array', 'quantile'], 'math': [], 'scipy': [], 'warnings': [], 'sklearn': [], 'pandas': ['get_dummies', 'array', 'read_csv'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 0
july-2021-tps-xgboost-feature-engineering.py : ['join', 'read_csv', 'to_datetime', 'astype', 'astype', 'shift', 'shift', 'head', 'sort_values', 'tail', 'head', 'describe', 'read_csv', 'to_datetime', 'astype', 'astype', 'shift', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'datetime', 'os'] ['mutual_info_regression', 'train_test_split', 'XGBRegressor', 'RandomForestRegressor', 'mean_absolute_error']Dict:{'numpy': [], 'pandas': ['to_datetime', 'read_csv'], 'matplotlib': [], 'datetime': [], 'os': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 0
automl-pycaret.py : ['read_csv', 'read_csv', 'concat', 'info', 'to_datetime', 'min', 'apply', 'drop', 'astype', 'get_dummies', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'corr', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'time', 'warnings'] ['setup', 'compare_models', 'blend_models', 'finalize_model', 'predict_model', 'plot_model']Dict:{'pandas': ['concat', 'get_dummies', 'to_datetime', 'read_csv'], 'numpy': ['mean', 'info', 'min'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'time': [], 'warnings': [], 'pycaret': []} axis_0: 0, axis_1: 0
movie-review-sentiment-analysis-eda-and-models.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'mean', 'count', 'groupby', 'mean', 'count', 'groupby', 'unique', 'unique', 'mean', 'apply', 'mean', 'apply', 'join', 'join', 'transform', 'transform', 'mean', 'std', 'items', 'get', 'astype', 'round', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'datetime', 'lightgbm'] ['TweetTokenizer', 'stats', 'hstack', 'csr_matrix', 'train_test_split', 'cross_val_score', 'WordCloud', 'Counter', 'stopwords', 'ngrams', 'TfidfVectorizer', 'StandardScaler', 'LogisticRegression', 'LinearSVC', 'OneVsRestClassifier', 'Tokenizer', 'pad_sequences', 'Dense', 'Input', 'LSTM', 'Embedding', 'Dropout', 'Activation', 'Conv1D', 'GRU', 'CuDNNGRU', 'CuDNNLSTM', 'BatchNormalization', 'Bidirectional', 'GlobalMaxPool1D', 'MaxPooling1D', 'Add', 'Flatten', 'GlobalAveragePooling1D', 'GlobalMaxPooling1D', 'concatenate', 'SpatialDropout1D', 'Model', 'load_model', 'initializers', 'regularizers', 'constraints', 'optimizers', 'layers', 'callbacks', 'backend', 'InputSpec', 'Layer', 'Adam', 'ModelCheckpoint', 'TensorBoard', 'Callback', 'EarlyStopping', 'OneHotEncoder']Dict:{'numpy': ['mean', 'round', 'std', 'unique'], 'pandas': ['unique', 'read_csv'], 'matplotlib': ['get'], 'seaborn': [], 'nltk': [], 'datetime': [], 'lightgbm': [], 'scipy': ['mean', 'astype'], 'sklearn': ['transform'], 'wordcloud': [], 'collections': ['items', 'get'], 'keras': []} axis_0: 0, axis_1: 1
playgrounds3e14-eda-baseline.py : [] [] []Dict:{} axis_0: 6, axis_1: 4
feature-engineering-lightgbm.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'isin', 'value_counts', 'value_counts', 'merge', 'merge', 'drop', 'drop', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'map', 'value_counts', 'map', 'map', 'map', 'map', 'map', 'map', 'drop', 'sort_values', 'sort_values', 'drop', 'to_csv', 'mean', 'to_csv', 'head', 'sort_values'] ['pandas', 'numpy', 'gc', 'matplotlib.pyplot', 'seaborn', 'warnings', 'lightgbm'] ['tqdm_notebook', 'roc_auc_score', 'LabelEncoder', 'KFold']Dict:{'pandas': ['merge', 'concat', 'value_counts'], 'numpy': ['mean', 'max', 'sum', 'min', 'isin'], 'tqdm': [], 'sklearn': [], 'gc': [], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'lightgbm': []} axis_0: 0, axis_1: 5
eda-and-xgboost-regression-for-each-store.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'info', 'describe', 'sum', 'groupby', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'head', 'pivot_table', 'sum', 'pivot_table', 'sum', 'sum', 'pivot_table', 'sum', 'pivot_table', 'sum', 'map', 'head', 'unique', 'quantile', 'drop', 'merge', 'head', 'head', 'unique', 'unique', 'unique', 'unique', 'unique', 'rename', 'head', 'rename', 'rename', 'merge', 'drop', 'merge', 'drop', 'merge', 'drop', 'drop', 'get_dummies', 'reset_index', 'drop', 'head', 'unique', 'max', 'where', 'drop', 'to_datetime', 'map', 'drop', 'get_dummies', 'head', 'unique', 'where', 'reset_index', 'drop', 'concat', 'rename', 'merge', 'head', 'where', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'seaborn', 'matplotlib.pyplot', 'plotly.express', 'plotly.express', 'plotly.express', 'plotly.express', 'plotly.express'] ['LinearRegression', 'XGBRegressor', 'preprocessing']Dict:{'numpy': ['quantile', 'max', 'sum', 'where', 'unique', 'info'], 'pandas': ['read_csv', 'pivot_table', 'concat', 'get_dummies', 'unique', 'merge', 'to_datetime'], 'os': ['rename'], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 8
task-tagging.py : ['head', 'head', 'sum', 'sort_values', 'sum', 'sum', 'apply', 'mean', 'count', 'groupby', 'count', 'groupby', 'apply', 'apply', 'apply', 'get', 'apply', 'get', 'apply', 'get', 'apply', 'get', 'apply', 'get', 'apply', 'get', 'apply', 'get', 'apply', 'get', 'apply', 'prod', 'get', 'apply', 'get', 'get', 'apply', 'get', 'apply', 'get', 'head', 'join', 'corr', 'join', 'to_csv', 'sum', 'sum', 'fillna', 'drop', 'mean', 'std'] ['numpy', 'pandas', 'os', 'json', 'matplotlib.pyplot', 'numpy', 'matplotlib.pyplot', 'seaborn', 'ipywidgets'] ['Path', 'colors', 'Path', 'MultiLabelBinarizer', 'DecisionTreeClassifier', 'cross_val_score']Dict:{'numpy': ['mean', 'std', 'sum', 'prod'], 'pandas': [], 'os': [], 'json': [], 'pathlib': [], 'matplotlib': ['get'], 'seaborn': [], 'sklearn': [], 'ipywidgets': []} axis_0: 0, axis_1: 1
top-50-beginners-stacking-lgb-xgb.py : ['read_csv', 'read_csv', 'head', 'head', 'drop', 'drop', 'hist', 'reset_index', 'reset_index', 'hist', 'drop', 'reset_index', 'concat', 'apply', 'astype', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'mode', 'update', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'update', 'fillna', 'sort_values', 'apply', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'reset_index', 'get_dummies', 'drop', 'drop', 'value_counts', 'drop', 'drop', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'array', 'array', 'array', 'read_csv', 'quantile', 'quantile', 'apply', 'apply', 'to_csv', 'head'] ['numpy', 'pandas', 'os'] ['datetime', 'skew', 'boxcox1p', 'boxcox_normmax', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'GradientBoostingRegressor', 'SVR', 'make_pipeline', 'RobustScaler', 'KFold', 'cross_val_score', 'mean_squared_error', 'StackingCVRegressor', 'XGBRegressor', 'LGBMRegressor']Dict:{'numpy': ['mean', 'median', 'quantile', 'array', 'std'], 'pandas': ['read_csv', 'concat', 'value_counts', 'get_dummies', 'array'], 'datetime': [], 'scipy': [], 'sklearn': [], 'mlxtend': [], 'xgboost': ['apply'], 'lightgbm': [], 'os': []} axis_0: 0, axis_1: 6
training-hubmap-lb-0-75-swin-transformer-v1.py : ['transpose', 'keys', 'stack', '__init__', '__init__', 'mean', 'mean', 'std', 'std', 'mean', 'std', 'replace', 'replace', 'transpose', 'transpose', 'clip', 'astype', 'astype', 'astype', 'astype', 'astype', 'clip', 'astype', 'clip', 'astype', 'clip', 'astype', 'clip', 'astype', 'read_csv', 'to_dict', 'value_counts', 'get', 'get', 'join', 'join', 'astype', 'astype', '__init__', 'pad', 'pad', 'transpose', 'transpose', '__init__', 'pad', '__init__', '__init__', 'pad', '__init__', 'apply', 'transpose', '__init__', 'stack', 'sum', 'transpose', 'transpose', '__init__', 'interpolate', 'interpolate', 'interpolate', '__init__', 'mean', 'mean', 'pow', 'interpolate', 'items', '__init__', 'interpolate', 'items', 'items', 'items', 'items', '__init__', 'drop', 'drop', 'drop', 'read_csv', 'reset_index', 'reset_index', 'to_dict', 'value_counts', 'to_dict', 'value_counts', 'get', 'get', 'get', 'get', 'reset_index', 'reset_index', 'sum', 'sum', 'sum', 'eval', 'mean', 'mean', 'eval', 'mean', 'mean', 'update'] ['os', 'cv2', 'time', 'random', 'torch', 'torch.cuda.amp', 'torch.nn.functional', 'logging', 'pandas', 'numpy', 'collections.abc', 'warnings'] ['nn', 'Dataset', 'DataLoader', 'RandomSampler', 'SequentialSampler', 'dice_score', 'StepLR', 'KFold', 'repeat']Dict:{'os': ['replace'], 'cv2': [], 'time': [], 'random': [], 'torch': ['__init__'], 'torchmetrics': [], 'logging': [], 'pandas': ['eval', 'read_csv', 'value_counts'], 'sklearn': ['__init__'], 'numpy': ['transpose', 'mean', 'stack', 'sum', 'clip', 'pad', 'std'], 'itertools': ['__init__'], 'collections': [], 'warnings': []} axis_0: 0, axis_1: 0
target-engineering-patterns-denoising.py : ['head', 'get', 'join', 'astype', 'value_counts', 'mean', 'groupby', 'value_counts', 'query', 'unique', 'sum', 'copy', 'sum', 'dot', 'dot', 'dot', 'dot', 'dot', 'dot', 'sum', 'where', 'sample', 'sample', 'sample', 'cov', 'copy', 'dot', 'transform', 'head', 'head', 'head', 'get', 'join', 'astype', 'value_counts'] ['matplotlib.pyplot'] ['LinearRegression', 'minimize', 'KernelDensity', 'BaseEstimator', 'TransformerMixin']Dict:{'sklearn': [], 'matplotlib': ['get'], 'scipy': []} axis_0: 0, axis_1: 0
rocket-league-xgboost-feat-engineering-cv.py : ['join', 'astype', 'sample', 'sample', 'items', 'items', 'drop', 'any', 'isnull', 'sum', 'isna', 'dropna', 'any', 'isnull', 'drop', 'drop', 'concat', 'read_csv', 'items', 'items', 'drop', 'to_csv'] ['numpy', 'pandas', 'os', 'gc', 'plotly.express', 'plotly.graph_objects'] ['subplots', 'cross_validate', 'LabelEncoder', 'XGBClassifier', 'list_physical_devices']Dict:{'numpy': ['sum', 'any'], 'pandas': ['isna', 'concat', 'read_csv', 'isnull'], 'os': [], '': [], '#': [], 'file': [], 'navigation': [], 'gc': [], 'garbage': [], 'collection': [], 'plotly': [], 'sklearn': [], 'xgboost': [], 'tensorflow': []} axis_0: 1, axis_1: 1
from-a-to-z-eda-feature-engineering-modeling.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'reset_index', 'count', 'groupby', 'nunique', 'apply', 'to_dict', 'value_counts', 'items', 'items', 'items', 'agg', 'groupby', 'describe', 'head', 'sort_values', 'reset_index', 'last', 'groupby', 'mean', 'sort_values', 'fillna', 'diff', 'groupby', 'groupby', 'apply', 'sum', 'sum', 'mean', 'sum', 'fillna', 'reset_index', 'sort_values', 'to_datetime', 'to_datetime', 'unique', 'get', 'transform', 'groupby', 'min', 'sort_values', 'unstack', 'groupby', 'reindex', 'rename', 'groupby', 'merge', 'unstack', 'mean', 'groupby', 'reindex', 'merge', 'agg', 'groupby', 'merge', 'last', 'groupby', 'merge', 'fillna', 'agg', 'groupby', 'merge', 'reset_index', 'fillna', 'diff', 'sum', 'max', 'min', 'mean', 'sort_values', 'reset_index', 'apply', 'groupby', 'head', 'merge', 'merge', 'drop', 'mean', 'drop', 'where', 'where', 'apply', 'sort_values', 'reset_index', 'apply', 'groupby', 'merge', 'drop', 'where', 'where', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.colors', 'matplotlib.dates', 'matplotlib.pyplot', 'matplotlib', 'plotly.express', 'plotly.graph_objects', 'plotly.figure_factory', 'xgboost', 'lightgbm', 'numpy', 'plotly.graph_objs'] ['reduce', 'Tuple', 'List', 'Counter', 'make_subplots', 'train_test_split', 'mean_squared_error', 'KFold', 'GridSearchCV', 'mean_squared_error', 'make_subplots', 'XGBRegressor', 'CatBoostRegressor']Dict:{'pandas': ['read_csv', 'value_counts', 'unique', 'merge', 'to_datetime'], 'numpy': ['mean', 'max', 'sum', 'where', 'min', 'unique', 'diff'], 'functools': [], 'typing': ['count'], 'collections': ['items', 'get'], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'xgboost': ['apply'], 'sklearn': [], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 3
handling-categorical-variables-encoding-modeling.py : ['read_csv', 'read_csv', 'head', 'head', 'reset_index', 'sum', 'isnull', 'nunique', 'value_counts', 'value_counts', 'crosstab', 'crosstab', 'crosstab', 'crosstab', 'head', 'reset_index', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'get_dummies', 'get_dummies', 'drop', 'drop', 'groupby', 'apply', 'groupby', 'apply', 'drop', 'drop', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'apply', 'apply', 'apply', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'astype', 'concat', 'concat', 'head', 'head', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'drop', 'drop', 'mean', 'std', 'items', 'mean', 'mean', 'std', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['pandas', 'numpy', 'string', 'matplotlib.pyplot', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'warnings'] ['Markdown', 'StandardScaler', 'MinMaxScaler', 'GridSearchCV', 'KFold', 'StratifiedKFold', 'cross_val_score', 'classification_report', 'confusion_matrix', 'accuracy_score', 'Pipeline', 'LogisticRegression', 'RidgeClassifier', 'DecisionTreeClassifier', 'KNeighborsClassifier', 'LinearDiscriminantAnalysis', 'GaussianNB', 'SVC', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'RandomForestClassifier', 'ExtraTreesClassifier', 'XGBClassifier']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'crosstab'], 'numpy': ['mean', 'max', 'sum', 'min', 'std'], 'string': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'IPython': [], 'warnings': [], 'sklearn': ['apply'], 'xgboost': ['apply']} axis_0: 0, axis_1: 4
ashrae-basic-eda-and-feature-engineering.py : ['read_csv', 'info', 'head', 'describe', 'sum', 'isna', 'to_datetime', 'unique', 'agg', 'groupby', 'head', 'query', 'min', 'max', 'set_index', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'hist', 'notnull', 'notnull', 'value_counts', 'head', 'sum', 'isna', 'sort_values', 'concat', 'describe', 'sum', 'isna', 'value_counts', 'fillna', 'fillna', 'min', 'max', 'array', 'array', 'concat', 'reset_index', 'to_datetime', 'set_index', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'reset_index', 'drop', 'apply', 'head', 'head', 'sum', 'isna', 'merge', 'to_datetime', 'merge', 'drop', 'drop', 'sum', 'isna', 'info', 'head', 'sum', 'isna', 'merge', 'merge', 'drop', 'fillna', 'median', 'head', 'info', 'sum', 'isna', 'clip', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'os', 'random', 'datetime', 'gc', 'lightgbm'] ['LabelEncoder', 'KFold']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'notnull', 'array', 'merge', 'to_datetime'], 'numpy': ['mean', 'median', 'max', 'sum', 'min', 'unique', 'clip', 'info', 'array'], 'matplotlib': ['hist'], 'seaborn': [], 'os': [], 'random': [], 'sklearn': [], 'datetime': [], 'gc': [], 'lightgbm': []} axis_0: 1, axis_1: 3
commonlit-readability-prize-eda.py : ['read_csv', 'read_csv', 'sum', 'memory_usage', 'sum', 'memory_usage', 'mean', 'mean', 'drop', 'mean', 'median', 'std', 'min', 'quantile', 'quantile', 'quantile', 'max', 'skew', 'kurtosis', 'isnull', 'mean', 'median', 'sort_values', 'value_counts', 'fillna', 'sort_values', 'value_counts', 'fillna', 'apply', 'fillna', 'sort_values', 'value_counts', 'sort_values', 'value_counts', 'max', 'min', 'apply', 'drop', 'sub', 'sub', 'apply', 'join', 'join', 'join', 'apply', 'items', 'items', 'items', 'items', 'items', 'items', 'apply', 'apply', 'sum', 'apply', 'apply', 'apply', 'mean', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'corr', 'apply', 'items'] ['operator', 're', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'tensorflow.keras.backend', 'textstat', 'gensim.downloader'] ['defaultdict', 'probplot', 'mean_squared_error', 'TSNE', 'word_tokenize', 'WordCloud', 'STOPWORDS']Dict:{'collections': ['items'], 'operator': ['sub'], 're': ['sub'], 'numpy': ['mean', 'median', 'quantile', 'max', 'sum', 'min', 'std'], 'pandas': ['isnull', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'sklearn': [], 'tensorflow': ['mean', 'max', 'sum', 'min', 'std'], 'textstat': [], 'gensim': [], 'nltk': [], 'wordcloud': []} axis_0: 0, axis_1: 0
house-prices-cnn.py : ['read_csv', 'read_csv', 'drop', 'drop', 'reset_index', 'reset_index', 'fillna', 'fillna', 'transform', 'reset_index', 'reset_index', 'concat', 'concat', 'drop', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'tensorflow'] ['OneHotEncoder', 'IsolationForest', 'EllipticEnvelope', 'LocalOutlierFactor', 'OneClassSVM', 'train_test_split', 'Sequential', 'Dense', 'DenseFeatures', 'Activation', 'Flatten', 'Dropout', 'BatchNormalization', 'RMSprop', 'Adam', 'ReduceLROnPlateau']Dict:{'numpy': ['add'], 'pandas': ['concat', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': [], 'tensorflow': ['add', 'concat'], 'keras': []} axis_0: 0, axis_1: 2
enzymes-esp-1-sequence-protein.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'info', 'describe', 'hist', 'quantile', 'quantile', 'quantile', 'quantile', 'hist', 'value_counts', 'value_counts', 'quantile', 'quantile', 'quantile', 'quantile', 'hist', 'sum', 'sum', 'count', 'count', 'head', 'head', 'copy', 'copy', 'transform', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'xgboost', 'matplotlib.pyplot'] ['accuracy_score', 'StandardScaler', 'LabelEncoder', 'StratifiedKFold', 'train_test_split', 'stats']Dict:{'numpy': ['info', 'sum', 'quantile', 'copy'], 'pandas': ['read_csv', 'value_counts'], 'os': [], 'sklearn': [], 'xgboost': [], 'matplotlib': ['hist'], 'scipy': ['describe']} axis_0: 0, axis_1: 0
an-approach-with-statistical-learning-regress.py : ['read_csv', 'read_csv', 'head', 'head', 'concat', 'drop', 'describe', 'describe', 'value_counts', 'select_dtypes', 'select_dtypes', 'corr', 'head', 'sort_values', 'corr', 'isnull', 'isnull', 'update', 'value_counts', 'value_counts', 'apply', 'head', 'reset_index', 'agg', 'groupby', 'mean', 'map', 'boxplot', 'sort_values', 'corr', 'head', 'sort_values', 'corr', 'value_counts', 'sum', 'groupby', 'boxplot', 'head', 'boxplot', 'boxplot', 'value_counts', 'product', 'sum', 'sum', 'isnull', 'value_counts', 'any', 'isnull', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'count', 'isnull', 'sort_values', 'concat', 'sum', 'isnull', 'sum', 'isnull', 'head', 'sort_values', 'isnull'] ['IPython.display', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'warnings', 'IPython.display', 'plotly.figure_factory', 'plotly.offline', 'plotly.graph_objs', 'cufflinks'] ['display', 'HTML', 'Javascript', 'display', 'HTML', 'Javascript', 'download_plotlyjs', 'init_notebook_mode', 'iplot', 'plot', 'tools', 'preprocessing', 'OneHotEncoder', 'linear_model', 'LinearRegression', 'ElasticNet', 'Lasso', 'BayesianRidge', 'LassoLarsIC', 'RandomForestRegressor', 'GradientBoostingRegressor']Dict:{'IPython': [], 'numpy': ['mean', 'product', 'any', 'sum'], 'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'warnings': [], 'plotly': [], '': [], 'cufflinks': [], 'sklearn': ['apply']} axis_0: 0, axis_1: 1
automl-with-titanic-dataset.py : ['join', 'read_csv', 'head', 'read_csv', 'head', 'drop', 'read_csv', 'to_csv', 'head', 'info', 'sum', 'isnull', 'value_counts', 'replace', 'mean', 'groupby', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'any', 'isnull', 'drop', 'head', 'read_csv', 'to_csv', 'head'] ['pandas', 'numpy', 'os'] ['EDA', 'AutoML', 'AutoML']Dict:{'pandas': ['value_counts', 'read_csv', 'isnull'], 'numpy': ['mean', 'info', 'sum', 'any'], 'os': ['replace'], 'supervised': []} axis_0: 0, axis_1: 2
forest-cover-type-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'mean', 'sum', 'to_csv', 'copy', 'astype', 'fillna', 'to_numeric', 'to_numeric', 'copy', 'copy', 'apply', 'copy', 'apply', 'update', 'update', 'update', 'update', 'copy', 'apply', 'update', 'update', 'update', 'copy', 'apply', 'copy', 'fillna', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'math', 'scipy', 'time', 'pyarrow', 'gc'] ['partial', 'clone', 'LabelEncoder', 'StratifiedKFold', 'train_test_split', 'accuracy_score', 'recall_score', 'f1_score', 'DecisionTreeClassifier', 'ExtraTreesClassifier']Dict:{'numpy': ['mean', 'sum', 'copy'], 'pandas': ['to_numeric', 'read_csv'], 'math': [], 'scipy': [], 'time': [], 'pyarrow': [], 'gc': [], 'functools': [], 'sklearn': ['apply']} axis_0: 0, axis_1: 0
weighted-voting-ensemble.py : ['reset_index', 'sort_values', 'drop', 'read_csv', 'head', 'read_parquet', 'copy', 'reset_index', 'concat', 'reset_index', 'sort_values', 'drop_duplicates', 'unique', 'unique', 'read_parquet', 'copy', 'isin', 'reset_index', 'drop_duplicates', 'concat', 'apply', 'join', 'itertuples', 'isin', 'add', 'to_csv', 'read_csv', 'eval', 'get', 'join', 'keys', 'pop', 'items', 'pad', 'items', 'map', 'items', 'keys', 'pop', 'items', 'pad', 'items', 'read_csv', 'map', 'drop', 'eval', 'keys', 'eval', 'keys', 'items', 'array', 'join', 'to_csv', 'head', 'read_csv'] ['os', 'gc', 'pandas', 'numpy', 're', 'blingfire', 'faiss', 'torch', 'ctypes', 'torch', 'numpy', 'pandas', 'numpy', 'pandas', 'numpy', 'torch'] ['tqdm', 'annotations', 'Iterable', 'write_index', 'read_index', 'SentenceTransformer', 'dataclass', 'Optional', 'Union', 'Dataset', 'AutoTokenizer', 'AutoModelForMultipleChoice', 'TrainingArguments', 'Trainer', 'PreTrainedTokenizerBase', 'PaddingStrategy', 'Optional', 'Union', 'Dataset', 'dataclass', 'AutoTokenizer', 'PreTrainedTokenizerBase', 'PaddingStrategy', 'AutoModelForMultipleChoice', 'TrainingArguments', 'Trainer', 'AutoModel', 'DataLoader', 'defaultdict']Dict:{'os': [], 'gc': [], 'pandas': ['read_csv', 'eval', 'concat', 'read_parquet', 'unique', 'array'], 'numpy': ['add', 'pad', 'unique', 'isin', 'array', 'copy'], 're': [], 'tqdm': [], 'blingfire': [], '__future__': [], 'collections': ['items', 'pop', 'get', 'keys', 'copy'], 'faiss': [], 'sentence_transformers': [], 'torch': [], 'ctypes': [], 'dataclasses': [], 'typing': [], 'datasets': [], 'transformers': []} axis_0: 0, axis_1: 1
student-performance-w-tensorflow-decision-forests.py : ['read_csv', 'head', 'read_csv', 'apply', 'apply', 'head', 'value_counts', 'value_counts', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'concat', 'fillna', 'reset_index', 'set_index', 'head', 'describe', 'groupby', 'unique', 'unique', 'set_index', 'set_index', 'items', 'keys', 'set_index', 'astype', 'astype'] ['tensorflow', 'tensorflow_addons', 'tensorflow_decision_forests', 'pandas', 'numpy', 'matplotlib.pyplot', 'jo_wilder'] []Dict:{'tensorflow': ['unique', 'concat'], 'tensorflow_addons': [], 'tensorflow_decision_forests': [], 'pandas': ['concat', 'unique', 'read_csv', 'value_counts'], 'numpy': ['unique'], 'matplotlib': [], 'jo_wilder': []} axis_0: 0, axis_1: 1
using-pipelines-for-faster-feature-testing.py : ['read_csv', 'read_csv', 'head', 'sort_values', 'info', 'to_datetime', 'to_datetime', 'astype', 'fillna', 'join', 'apply', 'astype', 'astype', 'astype', 'apply', 'astype', 'astype', 'apply', 'astype', 'apply', 'astype', 'astype', 'max', 'min', 'apply', 'sum', 'isnull', 'transform', 'astype', 'mean', 'to_csv'] ['pandas', 'numpy', 'os'] ['BaseEstimator', 'TransformerMixin', 'Pipeline', 'FeatureUnion', 'CountVectorizer', 'StandardScaler', 'TimeSeriesSplit', 'cross_val_score', 'roc_auc_score', 'LogisticRegression']Dict:{'pandas': ['to_datetime', 'read_csv', 'isnull'], 'numpy': ['mean', 'max', 'sum', 'min', 'info'], 'os': [], 'sklearn': []} axis_0: 0, axis_1: 2
pubg-eda-feature-engineering-lightgbm.py : ['min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'read_csv', 'read_csv', 'head', 'describe', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'dropna', 'sum', 'isnull', 'corr', 'nlargest', 'boxplot', 'head', 'corr', 'corr', 'head', 'fillna', 'fillna', 'fillna', 'fillna', 'describe', 'describe', 'describe', 'corr', 'reset_index', 'groupby', 'reset_index', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'astype', 'head', 'get_dummies', 'get_dummies', 'head', 'merge', 'merge', 'head', 'to_csv'] ['time', 'warnings', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'plotly.figure_factory', 'json', 'lightgbm', 'os', 'gc', 'sys'] ['norm', 'StandardScaler', 'stats', 'json_normalize', 'LabelEncoder', 'KFold', 'mean_squared_error', 'mean_absolute_error']Dict:{'time': [], 'warnings': [], '': [], 'pandas': [], 'numpy': ['mean', 'min', 'max', 'sum'], 'scipy': ['describe'], 'sklearn': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'json': [], 'lightgbm': [], 'os': [], 'gc': [], 'sys': [], '=': [], 'pd': []} axis_0: 2, axis_1: 2
multivariable-time-series-forecasting-linear-tree.py : ['update', 'read_csv', 'read_csv', 'to_datetime', 'astype', 'astype', 'copy', 'bfill', 'shift', 'transform', 'groupby', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'ptitprince'] ['HistGradientBoostingRegressor', 'mean_squared_error', 'LinearBoostRegressor', 'LinearRegression']Dict:{'pandas': ['to_datetime', 'read_csv'], 'numpy': ['copy'], 'matplotlib': [], 'ptitprince': [], 'sklearn': [], 'lineartree': []} axis_0: 0, axis_1: 0
quick-and-dirty-regression.py : ['sub', 'drop', 'unique', 'where', 'where', 'keys', 'keys', 'items', 'keys', 'items', 'items', 'items', 'items', 'transform', 'transform', 'transform', 'transform', 'copy', 'copy', 'copy', 'copy', 'concat', 'astype', 'hist', 'hist', 'items', 'transform', 'transform', 'transform', 'drop', 'drop', 'drop', 'items', 'items', 'items', 'mean', 'std', 'mean', 'transform', 'copy', 'items', 'transform', 'drop', 'rank', 'isin', 'astype', 'mean', 'groupby', 'sort_values', 'keys', 'rename', 'reset_index', 'rename', 'melt', 'array', 'transform', 'drop', 'transform', 'transform', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'value_counts', 'value_counts', 'map', 'map', 'map', 'map', 'map', 'astype', 'to_datetime', 'to_datetime', 'groupby', 'query', 'sum', 'sum', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'mean', 'update', 'keys', 'groupby', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'sum', 'transform', 'groupby', 'sum', 'sum', 'cut', 'cut', 'where', 'where', 'astype', 'to_csv', 'value_counts'] ['numpy', 'pandas', 'os', 'copy', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'catboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'eli5', 'shap', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 're', 'scipy'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'defaultdict', 'Counter', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit', 'RepeatedStratifiedKFold', 'metrics', 'classification_report', 'confusion_matrix', 'linear_model', 'BayesianOptimization', 'HTML', 'OrdinalEncoder', 'List', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'Any', 'product', 'tqdm', 'Parallel', 'delayed', 'BaseEstimator', 'TransformerMixin', 'partial']Dict:{'numpy': ['mean', 'sum', 'array', 'where', 'unique', 'isin', 'std', 'copy'], 'pandas': ['read_csv', 'melt', 'cut', 'concat', 'value_counts', 'unique', 'array', 'to_datetime'], 'os': ['rename'], 'copy': ['copy'], 'matplotlib': ['hist'], 'tqdm': ['update'], 'sklearn': [], 'collections': ['items', 'keys', 'update', 'copy'], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'time': [], 'datetime': [], 'gc': [], 'seaborn': [], 'warnings': [], 'bayes_opt': [], 'eli5': [], 'shap': [], 'IPython': [], 'json': [], 'altair': [], 'category_encoders': [], 'networkx': [], 'typing': [], 'numba': [], 'itertools': [], 're': ['sub'], 'joblib': [], 'functools': [], 'scipy': []} axis_0: 4, axis_1: 8
housing-price-prediction-randomforest-and-eda.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'info', 'head', 'tail', 'boxplot', 'describe', 'drop_duplicates', 'value_counts', 'sum', 'isnull', 'isnull', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'hist', 'sum', 'isnull', 'sum', 'isnull', 'keys', 'drop', 'keys', 'drop', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'dropna', 'isnull', 'value_counts', 'corr', 'select_dtypes', 'drop', 'drop', 'apply', 'apply', 'sum', 'isnull', 'sum', 'isnull'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['LabelEncoder', 'train_test_split', 'RandomForestRegressor']Dict:{'numpy': ['mean', 'info', 'sum'], 'pandas': ['isnull', 'read_csv', 'value_counts'], 'os': [], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'sklearn': ['apply']} axis_0: 1, axis_1: 10
dataset-with-number-of-bonds-between-atoms.py : ['sort_values', 'sort_values', 'itertuples', 'itertuples', 'itertuples', 'items', 'join', 'query', 'bool', 'sum', 'sum', 'sum', 'keys', 'sum', 'keys', 'keys', 'sum', 'sum', 'join', 'items', 'join', 'set_index', 'unique', 'set_index', 'unique', 'sum', 'max', 'groupby', 'unique', 'sum', 'max', 'groupby', 'unique', 'sum', 'apply', 'groupby', 'max', 'unique', 'sum', 'apply', 'groupby', 'max', 'unique', 'unique', 'unique', 'unique', 'keys', 'sum', 'apply', 'sum', 'apply', 'unique', 'unique', 'head', 'reset_index', 'rename', 'value_counts', 'groupby', 'copy', 'copy', 'concat', 'reset_index', 'max', 'groupby', 'copy', 'copy', 'concat', 'reset_index', 'max', 'groupby', 'copy', 'copy', 'concat', 'merge', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'ase.visualize', 'networkx', 'matplotlib.pyplot', 'seaborn', 'os'] ['Atoms', 'Axes3D', 'cKDTree', 'tqdm_notebook']Dict:{'numpy': ['sum', 'unique', 'max', 'copy'], 'pandas': ['merge', 'unique', 'concat', 'value_counts'], 'ase': [], 'networkx': [], 'mpl_toolkits': [], 'matplotlib': [], 'seaborn': [], 'os': ['rename'], 'scipy': ['query'], 'tqdm': []} axis_0: 0, axis_1: 0
simple-lgbm-solution.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'to_datetime', 'drop', 'value_counts', 'drop', 'sum', 'memory_usage', 'max', 'min', 'all', 'fillna', 'astype', 'fillna', 'sum', 'astype', 'astype', 'astype', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'max', 'min', 'read_csv', 'merge', 'transform', 'read_csv', 'drop', 'merge', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'describe', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'lightgbm', 'gc'] ['LabelEncoder', 'KFold', 'mean_squared_error', 'tqdm']Dict:{'numpy': ['min', 'sum', 'max', 'all'], 'pandas': ['merge', 'to_datetime', 'read_csv', 'value_counts'], 'os': [], 'sklearn': [], 'lightgbm': [], 'gc': [], 'tqdm': []} axis_0: 0, axis_1: 0
amex-top10-solution.py : ['groupby', 'astype', 'diff', 'drop', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'reset_index', 'astype', 'astype', 'read_csv', 'merge', 'merge', 'merge', 'merge', 'merge', 'read_parquet', 'read_parquet', 'to_parquet', 'to_parquet', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'to_parquet', 'to_parquet', 'transform', 'round', 'round', 'astype', 'astype', 'to_csv', 'to_csv', 'read_csv', 'sort_values', 'clip', 'read_csv', 'to_csv'] ['gc', 'os', 'warnings', 'joblib', 'glob', 'cudf', 'cupy', 'pandas', 'numpy', 'itertools', 'scipy', 'lightgbm', 'matplotlib.pyplot'] ['tqdm', 'rankdata', 'StratifiedKFold', 'train_test_split', 'LabelEncoder', 'combinations']Dict:{'gc': [], 'os': [], 'warnings': [], 'joblib': [], 'glob': [], 'cudf': [], 'cupy': [], 'pandas': ['read_parquet', 'array', 'merge', 'read_csv'], 'numpy': ['transpose', 'sum', 'where', 'round', 'clip', 'diff', 'array', 'cumsum'], 'tqdm': [], 'itertools': [], 'scipy': [], 'sklearn': ['transform'], 'lightgbm': [], 'matplotlib': []} axis_0: 0, axis_1: 0
titanic-5-machine-learning-models.py : ['read_csv', 'head', 'read_csv', 'head', 'head', 'info', 'info', 'drop', 'drop', 'head', 'fillna', 'mean', 'fillna', 'mean', 'value_counts', 'fillna', 'value_counts', 'count', 'groupby', 'corr', 'fillna', 'mean', 'replace', 'replace', 'value_counts', 'value_counts', 'replace', 'replace', 'head', 'head', 'drop', 'drop', 'round', 'round', 'to_csv', 'sort_values'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.express', 'warnings'] ['accuracy_score', 'f1_score', 'confusion_matrix', 'DecisionTreeClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'LogisticRegression', 'SVC', 'LinearSVC', 'GaussianNB', 'SGDClassifier', 'KNeighborsClassifier', 'GridSearchCV', 'RandomizedSearchCV']Dict:{'numpy': ['mean', 'round', 'info'], 'pandas': ['read_csv', 'value_counts'], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'warnings': [], '': [], 'sklearn': []} axis_0: 0, axis_1: 4
tps-mar-22-fe-the-less-the-better.py : ['read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'transform', 'drop', 'drop', 'reset_index', 'astype', 'median', 'groupby', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'std', 'groupby', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'min', 'groupby', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'max', 'groupby', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'median', 'groupby', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'quantile', 'groupby', 'drop', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'quantile', 'groupby', 'drop', 'rename', 'merge', 'merge', 'copy', 'rename', 'merge', 'merge', 'shift', 'mean', 'std', 'mean', 'std', 'corr', 'rename', 'reset_index', 'reset_index', 'squeeze', 'set_index', 'dropna', 'dropna', 'mean', 'groupby', 'fillna', 'copy', 'drop', 'drop', 'drop', 'sort_values', 'rename', 'reset_index', 'to_datetime', 'to_datetime', 'drop', 'pop', 'copy', 'copy', 'drop', 'drop', 'drop', 'corr', 'cumsum', 'copy', 'copy', 'pop', 'transform', 'head', 'head', 'concat', 'concat', 'to_datetime', 'to_datetime', 'drop', 'pop', 'copy', 'copy', 'drop', 'drop', 'drop', 'drop', 'to_datetime', 'to_datetime', 'unique', 'min', 'max', 'concat', 'reset_index', 'mean', 'groupby', 'drop', 'astype', 'round', 'drop_duplicates', 'concat', 'sort_values', 'drop'] ['numpy', 'pandas', 'math', 'datetime', 'matplotlib.pyplot', 'matplotlib.ticker', 'seaborn', 'plotly.express', 'plotly', 'plotly.graph_objs', 'random', 'os', 'eli5', 'eli5', 'shap'] ['init_notebook_mode', 'iplot', 'plot', 'MultiOutputRegressor', 'mean_absolute_error', 'simplefilter', 'tqdm_notebook', 'CatBoostRegressor', 'LabelEncoder', 'LinearRegression', 'acf', 'pacf', 'AnchoredText', 'FunctionTransformer', 'mutual_info_regression', 'PermutationImportance', 'PCA', 'PermutationImportance']Dict:{'numpy': ['mean', 'median', 'squeeze', 'quantile', 'max', 'round', 'min', 'unique', 'std', 'cumsum', 'copy'], 'pandas': ['read_csv', 'concat', 'unique', 'merge', 'to_datetime'], 'math': [], 'datetime': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': ['transform'], 'warnings': [], 'tqdm': [], 'random': [], 'os': ['rename'], 'catboost': [], 'statsmodels': [], 'eli5': [], '=': [], "['moment',": [], "'moment_sin',": [], "'moment_cos',": [], "'median',": [], "'std',": [], "'min',": [], "'max',": [], "'morning_avg',": [], "'quantile25',": [], "'quantile75',": [], "'lag_1',": [], "'lag_7']": [], 'important_features': [], '+': [], "['PC1']": [], 'shap': []} axis_0: 2, axis_1: 20
nlp-starter1-almost-all-basic-concept.py : ['keys', 'replace', 'transform', 'transform', 'transform', 'replace', 'transform', 'mode', 'read_csv', 'sub', 'join', 'dropna', 'apply', 'head', 'read_csv', 'sample', 'value_counts', 'array', 'items', 'get', 'add', 'add', 'add', 'add', 'read_csv', 'read_csv', 'sample', 'head', 'to_csv'] ['numpy', 'pandas', 'nltk', 'matplotlib.pyplot', 'os', 'nltk', 'nltk', 'random', 'pickle', 'warnings', 'warnings', 'nltk', 'pandas', 'numpy', 're', 'nltk', 'matplotlib.pyplot', 'numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn'] ['sent_tokenize', 'word_tokenize', 'stopwords', 'PorterStemmer', 'word_tokenize', 'state_union', 'PunktSentenceTokenizer', 'tree', 'Image', 'display', 'TreeWidget', 'CanvasFrame', 'WordNetLemmatizer', 'gutenberg', 'sent_tokenize', 'wordnet', 'movie_reviews', 'LabelEncoder', 'OneHotEncoder', 'CountVectorizer', 'CountVectorizer', 'TfidfVectorizer', 'Word2Vec', 'Doc2Vec', 'TaggedDocument', 'word_tokenize', 'pprint', 'word2vec', 'TSNE', 'FastText', 'common_texts', 'Sequential', 'LSTM', 'Dense', 'Dropout', 'Embedding', 'CuDNNLSTM', 'Bidirectional', 'Tokenizer', 'pad_sequences', 'tqdm', 'load_model']Dict:{'numpy': ['array', 'add'], 'pandas': ['array', 'read_csv', 'value_counts'], 'nltk': [], 'matplotlib': ['get'], 'sklearn': [], 'os': ['replace'], 'IPython': [], 'random': ['sample'], 'pickle': [], 'gensim': [], 'warnings': [], 'pprint': [], 're': ['sub'], 'keras': [], 'tqdm': [], 'seaborn': []} axis_0: 0, axis_1: 0
ps3e16-eda-ensemble-ml-pipeline.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'select_dtypes', 'select_dtypes', 'head', 'describe', 'transpose', 'rename', 'nunique', 'transpose', 'sum', 'isna', 'corr', 'astype', 'corr', 'astype', 'corr', 'abs', 'fillna', 'unique', 'value_counts', 'unique', 'drop', 'drop', 'drop', 'drop', 'boxplot', 'drop', 'copy', 'sum', 'transform', 'drop', 'concat', 'drop', 'drop', 'concat', 'astype', 'astype', 'transform', 'astype', 'astype', 'transform', 'concat', 'concat', 'drop', 'drop', 'select_dtypes', 'transform', 'transform', 'concat', 'copy', 'reset_index', 'drop', 'reset_index', 'reset_index', 'select_dtypes', 'select_dtypes', 'transform', 'drop', 'drop', 'head', 'keys', 'items', 'array', 'array', 'sample', 'unique', 'array', 'melt', 'sort_values', 'items', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'keys', 'min', 'max', 'min', 'keys', 'array', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'keys', 'unique', 'array', 'min', 'max', 'min', 'max', 'mean', 'mean', 'read_csv', 'join', 'to_csv', 'concat', 'read_csv', 'join', 'to_csv', 'merge'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'random', 'gc', 'time', 'seaborn', 'optuna', 'xgboost', 'lightgbm', 'xgboost', 'lightgbm', 'warnings'] ['deepcopy', 'partial', 'combinations', 'BaseEstimator', 'TransformerMixin', 'train_test_split', 'StratifiedKFold', 'KFold', 'mean_absolute_error', 'mean_squared_error', 'StandardScaler', 'MinMaxScaler', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'OneHotEncoder', 'FunctionTransformer', 'LabelEncoder', 'ColumnTransformer', 'RandomUnderSampler', 'enable_iterative_imputer', 'SimpleImputer', 'KNNImputer', 'IterativeImputer', 'PCA', 'NMF', 'LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'SGDRegressor', 'LassoCV', 'PassiveAggressiveRegressor', 'ARDRegression', 'RidgeCV', 'ElasticNetCV', 'TheilSenRegressor', 'RANSACRegressor', 'HuberRegressor', 'MLPRegressor', 'SVR', 'LinearSVR', 'KNeighborsRegressor', 'GaussianProcessRegressor', 'DecisionTreeRegressor', 'enable_hist_gradient_boosting', 'RandomForestRegressor', 'AdaBoostRegressor', 'ExtraTreesRegressor', 'HistGradientBoostingRegressor', 'BaggingRegressor', 'GradientBoostingRegressor', 'VotingRegressor', 'StackingRegressor', 'PolynomialFeatures', 'Pipeline', 'make_pipeline', 'make_column_transformer', 'make_column_selector', 'PLSRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool', 'LADRegression', 'RFE', 'RFECV', 'permutation_importance', 'Style', 'Fore', 'hierarchy', 'dendrogram', 'linkage', 'squareform']Dict:{'numpy': ['transpose', 'mean', 'max', 'abs', 'sum', 'array', 'min', 'unique', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'melt', 'concat', 'value_counts', 'unique', 'array', 'merge'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'random': ['sample'], 'os': ['rename'], 'copy': [], 'functools': [], 'itertools': [], 'gc': [], 'time': [], 'sklearn': [], 'category_encoders': [], 'imblearn': [], 'optuna': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'sklego': [], 'warnings': [], 'colorama': [], 'scipy': []} axis_0: 3, axis_1: 17
plugging-up-the-leak-in-the-jason-saeed-result.py : ['read_csv', 'read_csv', 'value_counts', 'value_counts', 'describe', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'to_dict', 'value_counts', 'map', 'to_dict', 'value_counts', 'map', 'to_dict', 'value_counts', 'map', 'to_dict', 'value_counts', 'map', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'drop', 'drop', 'concat', 'transform', 'read_csv', 'read_csv', 'drop', 'drop', 'transform', 'transform', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'drop', 'concat', 'join', 'to_dict', 'value_counts', 'map', 'to_dict', 'value_counts', 'map', 'astype', 'astype', 'factorize', 'astype', 'factorize', 'astype', 'factorize', 'astype', 'astype', 'map', 'value_counts', 'factorize', 'astype', 'astype', 'map', 'value_counts', 'factorize', 'astype', 'astype', 'map', 'value_counts', 'factorize', 'astype', 'astype', 'map', 'value_counts', 'drop', 'factorize', 'select_dtypes', 'select_dtypes', 'array', 'select_dtypes', 'copy', 'select_dtypes', 'factorize', 'concat', 'merge', 'merge', 'drop', 'head', 'to_csv'] ['numpy', 'pandas', 'xgboost'] ['model_selection', 'preprocessing']Dict:{'numpy': ['array', 'copy'], 'pandas': ['read_csv', 'concat', 'value_counts', 'factorize', 'array', 'merge'], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 10
lgbm-multiple-classifier.py : ['read_csv', 'head', 'isna', 'clip', 'apply', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'apply', 'isna', 'replace', 'apply', 'isna', 'apply', 'isna', 'apply', 'apply', 'isna', 'apply', 'isna', 'replace', 'replace', 'replace', 'apply', 'isna', 'replace', 'apply', 'isna', 'replace', 'replace', 'apply', 'astype', 'rename', 'merge', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'map', 'apply', 'merge', 'apply', 'merge', 'reset_index', 'sort_values', 'sort_values', 'sort_values', 'value_counts', 'where', 'isin', 'value_counts', 'where', 'isin', 'to_pickle', 'drop', 'drop', 'unique', 'unique', 'fillna', 'astype', 'value_counts', 'unique', 'transform', 'fillna', 'std', 'std', 'std', 'std', 'reset_index', 'reset_index', 'transpose', 'stack', 'reset_index', 'reset_index', 'transpose', 'stack', 'reset_index', 'apply', 'mean', 'stack', 'cumsum', 'max', 'mean', 'mean', 'mean', 'astype', 'reset_index', 'agg', 'groupby', 'head', 'sort_values', 'tail', 'sort_values', 'quantile', 'drop', 'fillna', 'astype', 'isin', 'sum', 'transform', 'fillna', 'transform', 'reset_index', 'transpose', 'stack', 'reset_index', 'reset_index', 'transpose', 'stack', 'reset_index', 'clip', 'mean', 'diff', 'mean', 'mean'] ['numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib', 'seaborn', 'datetime', 'tqdm', 'keras', 'warnings'] ['nflrush', 'RandomForestRegressor', 'StandardScaler', 'LabelEncoder', 'tqdm_notebook', 'LGBMClassifier', 'train_test_split', 'KFold']Dict:{'numpy': ['transpose', 'mean', 'stack', 'quantile', 'max', 'sum', 'where', 'unique', 'clip', 'isin', 'diff', 'std', 'cumsum'], 'pandas': ['to_pickle', 'isna', 'read_csv', 'value_counts', 'unique', 'merge'], 'matplotlib': [], 'seaborn': [], 'datetime': [], 'kaggle': [], 'tqdm': [], 'sklearn': [], 'keras': [], 'warnings': [], 'lightgbm': []} axis_0: 0, axis_1: 2
eda-optimizing-lightgbm-hyperparameters.py : ['read_csv', 'head', 'sum', 'isnull', 'nunique', 'describe', 'select_dtypes', 'dropna', 'value_counts', 'query', 'query', 'query', 'head', 'unique', 'rename', 'reset_index', 'agg', 'groupby', 'to_dict', 'map', 'select_dtypes', 'mod', 'map', 'map', 'map', 'map', 'map', 'map', 'apply', 'fillna', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'map', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'apply', 'replace', 'apply', 'replace', 'concat', 'head', 'head', 'array', 'head', 'array', 'transform', 'sum', 'isnull', 'sort_values', 'clip', 'cumsum', 'apply', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'mean', 'mean', 'astype', 'astype', 'apply', 'sum', 'round'] ['pandas', 'numpy', 'os', 'datetime', 'lightgbm', 'optuna', 'random', 'gc', 'tqdm', 'matplotlib.patches', 'matplotlib', 'matplotlib.pyplot', 'matplotlib.ticker', 'seaborn', 'warnings', 'missingno'] ['nflrush', 'mean_absolute_error', 'norm', 'KFold', 'train_test_split', 'preprocessing']Dict:{'kaggle': [], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'array'], 'numpy': ['mean', 'median', 'sum', 'round', 'mod', 'unique', 'clip', 'array', 'cumsum', 'copy'], 'os': ['rename', 'replace'], 'datetime': [], 'lightgbm': [], 'sklearn': [], 'optuna': [], 'scipy': ['mean', 'median'], 'random': [], 'gc': [], 'tqdm': [], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'missingno': [], '=': [], 'LGBmodel': []} axis_0: 0, axis_1: 3
patent-phrase-matching-eda-fe-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'sum', 'isna', 'sum', 'isna', 'sum', 'duplicated', 'sum', 'duplicated', 'value_counts', 'join', '_repr_html_', 'max', 'read_csv', 'head', 'apply', 'apply', 'map', 'set_index', 'iterrows', 'drop', 'copy', 'copy', 'head', 'copy', 'corr', 'select_dtypes', 'drop', 'copy', 'head', 'to_csv', 'head', 'array', 'array', 'sort_values'] ['pandas', 'numpy', 'warnings', 'fuzzywuzzy', 'matplotlib.pyplot', 'seaborn', 'shap'] ['HTML', 'fuzz', 'process', 'AnchoredText', 'CatBoostRegressor']Dict:{'pandas': ['isna', 'array', 'read_csv', 'value_counts'], 'numpy': ['array', 'sum', 'max', 'copy'], 'warnings': [], 'IPython': ['_repr_html_'], 'matplotlib': [], 'seaborn': [], 'catboost': [], 'shap': []} axis_0: 0, axis_1: 0
janestreet-xgb-lgb-stacking-ensemble.py : ['fillna', 'fillna'] ['janestreet', 'os', 'numpy', 'pandas', 'xgboost', 'lightgbm', 'warnings'] ['preprocessing', 'RandomForestClassifier', 'StackingClassifier']Dict:{'janestreet': [], 'os': [], 'numpy': [], 'pandas': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 0
tpsmay22-my100-notebook-autoblendingfunc.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'apply', 'apply', 'concat', 'apply', 'sum', 'min', 'max', 'std', 'mean', 'kurt', 'count', 'gt', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'copy', 'copy', 'head', 'drop', 'drop', 'transform', 'drop', 'drop', 'head', 'drop', 'array', 'mean', 'median', 'mean', 'median', 'to_csv', 'head'] ['numpy', 'pandas', 'warnings', 'tensorflow', 'matplotlib.pyplot', 'seaborn', 'scipy'] ['StandardScaler', 'Model', 'ReduceLROnPlateau', 'LearningRateScheduler', 'EarlyStopping', 'Dense', 'Input', 'InputLayer', 'Add', 'Dropout', 'plot_model', 'clone_model', 'StratifiedKFold', 'clone', 'roc_auc_score', 'LGBMClassifier']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'array', 'min', 'std', 'copy'], 'pandas': ['concat', 'array', 'read_csv'], 'warnings': [], 'sklearn': ['transform'], 'tensorflow': [], 'lightgbm': [], 'scipy': []} axis_0: 0, axis_1: 8
grownet-gradient-boosting-neural-networks.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'get_dummies', 'merge', 'reset_index', 'reset_index', 'drop', 'drop', 'drop', 'copy', 'merge', 'value_counts', 'sort_values', 'sort_values', 'mean', 'groupby', 'update', 'reset_index', 'isin', 'update', 'map', 'isna', 'map', 'isna', 'astype', 'stack', 'eval', 'add', '__init__', '__init__', '__init__', 'sum', 'mean', 'mean', 'reset_index', 'reset_index', 'abs', 'mean', 'add', 'mean', 'mean', 'mean', 'clip', 'clip', 'fillna', 'merge', 'drop', 'fillna', 'merge', 'drop', 'to_csv'] ['sys', 'numpy', 'random', 'pandas', 'matplotlib.pyplot', 'os', 'copy', 'seaborn', 'torch', 'torch.nn', 'torch.nn.functional', 'torch.optim', 'time', 'warnings'] ['MultilabelStratifiedKFold', 'preprocessing', 'log_loss', 'StandardScaler', 'PowerTransformer', 'QuantileTransformer', 'OneHotEncoder', 'PCA', 'DataLoader', 'Dataset', 'VarianceThreshold', 'Enum', '_WeightedLoss']Dict:{'sys': [], 'iterstrat': [], 'numpy': ['mean', 'stack', 'add', 'abs', 'sum', 'clip', 'isin', 'copy'], 'random': [], 'pandas': ['isna', 'read_csv', 'eval', 'concat', 'value_counts', 'get_dummies', 'merge'], 'matplotlib': [], 'os': [], 'copy': ['copy'], 'seaborn': [], 'sklearn': [], 'torch': ['eval', '__init__'], 'time': [], 'warnings': [], 'enum': []} axis_0: 3, axis_1: 12
wids-simple-and-easy-approach.py : ['read_csv', 'read_csv', 'head', 'drop', 'head', 'head', 'sum', 'isnull', 'fillna', 'median', 'fillna', 'median', 'replace', 'median', 'replace', 'median', 'fillna', 'median', 'fillna', 'median', 'head', 'transform', 'apply', 'get', 'head', 'concat', 'concat', 'head', 'transform', 'head', 'hist', 'hist', 'rename', 'reset_index', 'sort_values', 'corrwith', 'drop', 'select_dtypes', 'drop', 'to_numpy', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 'lightgbm'] ['LabelEncoder', 'StandardScaler', 'train_test_split', 'RandomizedSearchCV', 'GridSearchCV', 'LinearRegression', 'r2_score', 'metrics', 'RandomForestRegressor', 'XGBRegressor', 'CatBoostRegressor']Dict:{'pandas': ['concat', 'read_csv', 'isnull'], 'numpy': ['median', 'sum'], 'matplotlib': ['get', 'hist'], 'seaborn': [], 'warnings': [], 'sklearn': ['apply'], 'xgboost': ['apply'], 'catboost': [], 'lightgbm': []} axis_0: 0, axis_1: 5
eda-feature-engineering-and-model-submission.py : ['read_csv', 'read_csv', 'read_csv', 'astype', 'drop', 'drop', 'concat', 'drop', 'drop_duplicates', 'reset_index', 'drop', 'value_counts', 'value_counts', 'replace', 'unique', 'sum', 'sum', 'mean', 'drop', 'array', 'mean', 'std', 'join', 'apply', 'to_csv'] ['matplotlib.pyplot', 'scipy.stats', 'pandas', 'numpy'] ['LogisticRegression', 'OrdinalEncoder', 'train_test_split', 'shuffle', 'make_scorer', 'label_ranking_average_precision_score', 'cross_val_score', 'KFold', 'StratifiedKFold', 'LogisticRegression', 'LabelBinarizer', 'LabelEncoder']Dict:{'sklearn': [], 'matplotlib': [], 'scipy': [], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'array'], 'numpy': ['mean', 'sum', 'array', 'unique', 'std']} axis_0: 0, axis_1: 4
understand-and-use-a-pipeline.py : ['read_csv', 'head', 'info', 'copy', 'head', 'transform', 'copy', 'head', 'head', 'isnull', 'isnull', 'astype', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'notnull', 'notnull', 'notnull', 'notnull', 'notnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'notnull', 'notnull', 'notnull', 'notnull', 'notnull', 'isnull', 'isnull', 'copy', 'head', 'transform', 'transform', 'get_dummies', 'copy', 'transform', 'sample', 'copy', 'transform', 'head', 'copy', 'sum', 'value_counts', 'copy', 'sum', 'transform', 'copy', 'head', 'info', 'copy', 'transform', 'head', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'copy', 'head', 'copy', 'transform', 'head', 'transform', 'copy', 'head', 'copy', 'transform', 'head', 'copy', 'mode', 'copy', 'mode', 'reset_index', 'sort_values', 'copy', 'sort_values', 'copy', 'read_csv', 'copy', 'copy', 'transform', 'sample'] ['pandas', 'numpy', 'warnings', 'matplotlib.pyplot', 'seaborn', 'df_pipeline'] ['StratifiedShuffleSplit', 'BaseEstimator', 'TransformerMixin', 'Pipeline', 'FeatureUnion', 'StandardScaler', 'RobustScaler', 'SimpleImputer', 'Lasso', 'KFold', 'GridSearchCV', 'mean_squared_error', 'mean_absolute_error']Dict:{'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'notnull'], 'numpy': ['info', 'sum', 'copy'], 'sklearn': [], 'warnings': [], 'matplotlib': [], 'seaborn': [], 'df_pipeline': []} axis_0: 0, axis_1: 0
tps-nov-2022-eda-hybrid-stacking.py : ['read_csv', 'read_csv', 'head', 'value_counts', 'sum', 'value_counts', 'value_counts', 'value_counts', 'read_csv', 'read_csv', 'head', 'max', 'min', 'copy', 'clip', 'clip', 'transform', 'hist', 'items', 'mean', 'drop', 'reset_index', 'drop', 'reset_index', 'reset_index', 'reset_index', 'clip', 'to_csv'] ['os', 'pandas', 'numpy', 'scipy', 'matplotlib.pyplot', 'warnings', 'random'] ['Path', 'PCA', 'LGBMClassifier', 'CatBoostClassifier', 'ExtraTreesClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'XGBClassifier', 'accuracy_score', 'roc_auc_score', 'CalibrationDisplay', 'IsotonicRegression', 'cross_val_predict', 'RandomForestClassifier', 'mrmr_classif', 'tqdm', 'KFold', 'StratifiedKFold', 'GroupKFold', 'log_loss', 'KMeans', 'train_test_split', 'randint', 'uniform', 'enable_halving_search_cv', 'GridSearchCV', 'RandomizedSearchCV']Dict:{'os': [], 'pandas': ['read_csv', 'value_counts'], 'numpy': ['mean', 'max', 'sum', 'min', 'clip', 'copy'], 'scipy': [], 'pathlib': [], 'sklearn': ['transform'], 'matplotlib': ['hist'], 'lightgbm': [], 'catboost': [], 'xgboost': [], 'mrmr': [], 'tqdm': [], 'warnings': [], 'random': [], '': []} axis_0: 0, axis_1: 3
ps3e8-models-ensemble-final-submission.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_excel', 'head', 'head', 'head', 'head', 'drop_duplicates', 'concat', 'drop', 'replace', 'concat', 'corr', 'applymap', 'corr', 'add'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'optuna'] ['StandardScaler', 'train_test_split', 'KFold', 'XGBRegressor', 'CatBoostRegressor', 'LGBMRegressor', 'filterwarnings', 'mean_squared_error']Dict:{'pandas': ['concat', 'read_excel', 'read_csv'], 'numpy': ['add'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'optuna': [], 'warnings': []} axis_0: 4, axis_1: 5
private-leaderboard-shake-up.py : ['read_json', 'head', 'read_csv', 'head', 'isin', 'keys', 'read_csv', 'sort_values', 'isin', 'copy', 'concat', 'isin', 'copy', 'concat', 'sample', 'isin', 'copy', 'isin', 'concat'] ['seaborn', 'pandas', 'numpy', 'matplotlib.pyplot', 'os'] ['mean_absolute_error']Dict:{'seaborn': [], 'pandas': ['concat', 'read_json', 'read_csv'], 'numpy': ['isin', 'copy'], 'matplotlib': [], 'os': [], 'sklearn': []} axis_0: 0, axis_1: 0
abc-s-of-tf-idf-boosting-0-798.py : ['read_csv', 'read_csv', 'copy', 'concat', 'drop', 'fillna', 'read_csv', 'value_counts', 'rename', 'agg', 'groupby', 'reset_index', 'join', 'rename', 'fillna', 'merge', 'apply', 'join', 'boxplot', 'replace', 'replace', 'merge', 'get_dummies', 'merge', 'get_dummies', 'reset_index', 'value_counts', 'isin', 'value_counts', 'value_counts', 'round', 'mul', 'crosstab', 'astype', 'drop', 'value_counts', 'copy', 'to_dict', 'drop', 'value_counts', 'value_counts', 'value_counts', 'to_csv', 'to_csv', 'corr', 'to_csv', 'concat', 'corr'] ['time', 'numpy', 'pandas', 'eli5', 'xgboost', 'lightgbm', 'scipy.stats', 'matplotlib.pyplot', 'seaborn', 'plotly.plotly', 'gc'] ['tqdm', 'CountVectorizer', 'TfidfVectorizer', 'roc_auc_score', 'KFold', 'RepeatedKFold', 'LabelEncoder', 'hstack', 'csr_matrix', 'FeatureUnion', 'train_test_split', 'RandomizedSearchCV', 'GridSearchCV', 'metrics', 'confusion_matrix', 'roc_curve', 'auc', 'roc_auc_score', 'TfidfVectorizer', 'feature_selection', 'cross_val_score', 'StandardScaler', 'SentimentIntensityAnalyzer', 'preprocessing', 'hstack', 'csr_matrix']Dict:{'time': [], 'numpy': ['round', 'isin', 'copy'], 'pandas': ['read_csv', 'concat', 'value_counts', 'get_dummies', 'merge', 'crosstab'], 'tqdm': [], 'sklearn': [], 'scipy': [], 'eli5': [], 'xgboost': [], 'lightgbm': [], 'nltk': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'gc': []} axis_0: 1, axis_1: 5
playgrounds3e19-eda-baseline.py : ['read_csv', 'test', 'read_csv', 'read_csv', 'test', 'head', 'head', 'test', 'test', 'items', 'test', 'info', 'copy', 'unique', 'apply', 'concat', 'rename', 'reset_index', 'groupby', 'rename', 'reset_index', 'groupby', 'test', 'unique', 'items', 'astype', 'pivot', 'fillna', 'astype', 'astype', 'where', 'sum', 'agg', 'groupby', 'sum'] [] []Dict:{} axis_0: 2, axis_1: 12
tensorflow-tf-data-keraspreprocessinglayers-w-b.py : ['read_csv', 'read_csv', 'sample', 'to_datetime', 'to_datetime', 'to_datetime', 'groupby', 'hist', 'mean', 'groupby', 'set_index', 'astype', 'drop', 'drop', 'drop', 'to_csv', 'copy', 'pop', 'items', 'take', 'keys', 'keys', 'map', 'map', 'abs', 'subtract', 'add', 'abs', 'abs', 'divide', 'divide', 'where', '__init__', 'abs', 'subtract', 'add', 'abs', 'abs', 'divide', 'divide', 'where'] ['numpy', 'pandas', 'warnings', 'seaborn', 'wandb', 'matplotlib.pyplot', 'numpy', 'pandas', 'tensorflow'] ['layers', 'UserSecretsClient']Dict:{'numpy': ['mean', 'take', 'add', 'abs', 'subtract', 'where', 'divide', 'copy'], 'pandas': ['to_datetime', 'read_csv'], 'warnings': [], 'seaborn': [], 'wandb': [], 'matplotlib': ['hist'], 'tensorflow': ['add', 'subtract']} axis_0: 0, axis_1: 0
inference-deberta-v3-base-lgbm.py : ['read_csv', 'read_csv', 'head', 'head', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'mean', 'apply', 'apply', 'apply', 'apply', 'apply', 'head', 'items', 'max', 'sum', 'items', '__init__', 'sum', 'sum', '__init__', 'info', 'eval', 'items', 'replace', 'mean', 'merge', 'drop', 'head', 'to_csv'] ['os', 'os', 'random', 'gc', 're', 'ast', 'sys', 'copy', 'json', 'time', 'math', 'string', 'pickle', 'warnings', 'scipy', 'numpy', 'pandas', 'torch', 'torch.nn', 'torch.nn.functional', 'tokenizers', 'transformers', 'nltk', 'lightgbm'] ['tqdm', 'mean_squared_error', 'StratifiedKFold', 'GroupKFold', 'KFold', 'Parameter', 'Adam', 'SGD', 'AdamW', 'DataLoader', 'Dataset', 'AutoTokenizer', 'AutoModel', 'AutoConfig', 'get_linear_schedule_with_warmup', 'get_cosine_schedule_with_warmup', 'TextBlob', 'wordnet', 'stopwords', 'WordNetLemmatizer', 'MultiOutputRegressor', 'tqdm']Dict:{'os': ['replace'], 'random': [], 'gc': [], 're': [], 'ast': [], 'sys': [], 'copy': [], 'json': [], 'time': [], 'math': [], 'string': [], 'pickle': [], 'warnings': [], 'scipy': [], 'numpy': ['mean', 'info', 'sum', 'max'], 'pandas': ['eval', 'merge', 'read_csv'], 'tqdm': ['__init__'], 'sklearn': [], 'torch': ['__init__'], 'tokenizers': [], 'transformers': [], 'textblob': [], 'nltk': [], 'lightgbm': []} axis_0: 0, axis_1: 1
feature-engineering-using-random-forest.py : ['mean', 'copy', 'copy', 'copy', 'read_csv', 'tail', 'describe', 'sort_index', 'sum', 'isnull', 'sort_values', 'tail', 'sort_index', 'sum', 'isnull', 'copy', 'round'] ['numpy', 'pandas', 'os', 'math', 'IPython', 'graphviz', 're', 'warnings', 'scipy'] ['*', 'is_string_dtype', 'is_numeric_dtype', 'RandomForestRegressor', 'RandomForestClassifier', 'metrics', 'pyplot', 'rcParams', 'animation', 'export_graphviz', 'pdp', '*', '*', 'DataFrameSummary', 'RandomForestRegressor', 'RandomForestClassifier', 'display', 'metrics', 'hierarchy']Dict:{'numpy': ['mean', 'round', 'sum', 'copy'], 'pandas': [], 'os': [], 'sklearn': [], 'math': [], 'matplotlib': [], 'IPython,': [], 'graphviz,': [], 're': [], 'pdpbox': [], 'fastai': [], 'pandas_summary': [], 'IPython': [], 'warnings': [], 'scipy': []} axis_0: 0, axis_1: 0
the-missing-link.py : ['read_csv', 'read_csv', 'read_csv', 'unique', 'replace', 'sum', 'min', 'min', 'array', 'unique', 'unique', 'unique', 'to_csv', 'tail', 'unique', 'array', 'array'] ['numpy', 'pandas', 'matplotlib.pyplot'] []Dict:{'numpy': ['array', 'sum', 'unique', 'min'], 'pandas': ['array', 'unique', 'read_csv'], 'matplotlib': []} axis_0: 0, axis_1: 1
rnsa-2d-model-infer-pytorch.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'unique', 'head', 'get', 'get', 'get', 'get', 'keys', 'head', 'astype', 'astype', 'astype', 'astype', 'apply', 'join', 'apply', 'replace', 'replace', 'replace', 'apply', 'replace', 'replace', 'replace', 'apply', 'replace', 'replace', 'replace', 'drop', 'rename', 'sort_values', 'reset_index', 'to_dict', 'max', 'groupby', 'map', 'map', 'astype', 'first', 'groupby', 'last', 'groupby', 'map', 'head', 'min', 'max', 'max', 'astype', '__init__', 'reset_index', 'transform', 'join', 'transform', 'transform', 'transpose', 'astype', 'astype', '__init__', 'drop', 'drop', 'eval', 'concat', 'reset_index', 'head', 'reset_index', 'query', 'prod', 'apply', 'groupby', 'head', 'melt', 'reset_index', 'merge', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib.patches', 'seaborn', 'cv2', 'os', 're', 'gc', 'random', 'pydicom', 'itertools', 'nibabel', 'warnings', 'zipfile', 'torch', 'torch.nn', 'torch.optim', 'torch.optim.lr_scheduler', 'torchvision', 'torchvision.transforms', 'torch.nn.functional', 'kornia', 'kornia.augmentation', 'albumentations'] ['listdir', 'apply_voi_lut', 'tqdm', 'pprint', 'time', 'measure', 'Poly3DCollection', 'glob', 'ndimage', 'train_test_split', 'GroupKFold', 'Parallel', 'delayed', 'Image', 'nlmeans', 'estimate_sigma', 'exposure', 'Dataset', 'DataLoader', 'GradScaler', 'autocast', 'create_feature_extractor']Dict:{'numpy': ['transpose', 'max', 'min', 'unique', 'prod'], 'pandas': ['read_csv', 'eval', 'melt', 'concat', 'unique', 'merge'], 'matplotlib': [], 'seaborn': [], 'cv2': [], 'os': ['__init__'], 're': [], 'gc': [], 'random': [], 'pydicom': [], 'tqdm': ['__init__'], 'pprint': ['__init__'], 'time': ['__init__'], 'itertools': ['groupby'], 'skimage': [], 'mpl_toolkits': ['__init__'], 'nibabel': [], 'glob': ['__init__'], 'warnings': [], 'zipfile': [], 'scipy': [], 'sklearn': ['__init__'], 'joblib': ['__init__'], 'PIL': ['eval', 'merge'], 'dipy': [], 'torch': ['__init__'], 'torchvision': [], 'kornia': [], 'albumentations': []} axis_0: 1, axis_1: 2
march-madness-2020-ncaam-eda-and-baseline.py : ['keys', 'transform', 'transform', 'transform', 'transform', 'copy', 'copy', 'copy', 'copy', 'concat', 'astype', 'hist', 'items', 'transform', 'transform', 'transform', 'drop', 'drop', 'drop', 'items', 'items', 'items', 'mean', 'std', 'mean', 'transform', 'copy', 'items', 'transform', 'drop', 'rank', 'isin', 'astype', 'mean', 'groupby', 'sort_values', 'keys', 'rename', 'reset_index', 'rename', 'melt', 'abs', 'read_csv', 'read_csv', 'keys', 'head', 'head', 'mean', 'groupby', 'mean', 'groupby', 'apply', 'merge', 'merge', 'drop', 'head', 'head', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'merge', 'merge', 'drop', 'head', 'head', 'copy', 'copy', 'reset_index', 'concat', 'astype', 'fillna', 'head', 'drop', 'read_csv', 'drop', 'apply', 'apply', 'apply', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'head', 'head', 'hist', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'copy', 'datetime', 'lightgbm', 'os', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'xgboost', 'lightgbm', 'json', 'ast', 'time', 'warnings', 'os', 'glob'] ['stats', 'train_test_split', 'StratifiedKFold', 'KFold', 'cross_val_score', 'GridSearchCV', 'RepeatedStratifiedKFold', 'StandardScaler', 'model_selection', 'accuracy_score', 'roc_auc_score', 'log_loss', 'classification_report', 'confusion_matrix', 'linear_model', 'BaseEstimator', 'TransformerMixin', 'LabelEncoder']Dict:{'numpy': ['mean', 'abs', 'isin', 'std', 'copy'], 'pandas': ['concat', 'melt', 'merge', 'read_csv'], 'matplotlib': ['hist'], 'seaborn': [], 'copy': ['copy'], 'datetime': [], 'lightgbm': [], 'scipy': [], 'sklearn': ['transform'], 'os': ['rename'], 'plotly': [], 'xgboost': [], 'json': [], 'ast': [], 'time': [], 'warnings': [], 'glob': []} axis_0: 1, axis_1: 8
ps3e15-eda-ensemble-and-stacking-baseline.py : ['read_csv', 'join', 'read_csv', 'reset_index', 'set_index', 'copy', 'isnull', 'copy', 'isnull', 'head', 'describe', 'transpose', 'rename', 'nunique', 'transpose', 'sum', 'isna', 'corr', 'astype', 'corr', 'astype', 'corr', 'abs', 'fillna', 'value_counts', 'unique', 'unique', 'drop', 'drop', 'drop', 'drop', 'boxplot', 'drop', 'astype', 'astype', 'transform', 'astype', 'astype', 'transform', 'concat', 'concat', 'drop', 'drop', 'transform', 'transform', 'replace', 'replace', 'replace', 'concat', 'reset_index', 'drop', 'reset_index', 'reset_index', 'drop', 'select_dtypes', 'select_dtypes', 'drop', 'drop', 'transform', 'astype', 'astype', 'astype', 'astype', 'head', 'keys', 'array', 'array', 'melt', 'sort_values', 'items', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'keys', 'keys', 'min', 'max', 'min', 'keys', 'array', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'keys', 'min', 'max', 'min', 'max', 'unique', 'array', 'read_csv', 'join', 'to_csv', 'read_csv', 'join', 'to_csv', 'read_csv', 'join', 'to_csv', 'read_csv', 'join', 'to_csv', 'read_csv', 'join', 'read_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'random', 'gc', 'seaborn', 'optuna', 'xgboost', 'lightgbm', 'xgboost', 'lightgbm', 'sys', 'warnings'] ['deepcopy', 'partial', 'combinations', 'BaseEstimator', 'TransformerMixin', 'train_test_split', 'StratifiedKFold', 'KFold', 'mean_absolute_error', 'mean_squared_error', 'StandardScaler', 'MinMaxScaler', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'OneHotEncoder', 'FunctionTransformer', 'LabelEncoder', 'ColumnTransformer', 'RandomUnderSampler', 'enable_iterative_imputer', 'SimpleImputer', 'KNNImputer', 'IterativeImputer', 'PCA', 'LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'SGDRegressor', 'LassoCV', 'PassiveAggressiveRegressor', 'ARDRegression', 'RidgeCV', 'ElasticNetCV', 'TheilSenRegressor', 'RANSACRegressor', 'HuberRegressor', 'MLPRegressor', 'SVR', 'LinearSVR', 'KNeighborsRegressor', 'GaussianProcessRegressor', 'DecisionTreeRegressor', 'enable_hist_gradient_boosting', 'RandomForestRegressor', 'AdaBoostRegressor', 'ExtraTreesRegressor', 'HistGradientBoostingRegressor', 'BaggingRegressor', 'GradientBoostingRegressor', 'VotingRegressor', 'StackingRegressor', 'PolynomialFeatures', 'Pipeline', 'make_pipeline', 'make_column_transformer', 'make_column_selector', 'PLSRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool', 'LGBMImputer', 'LADRegression', 'Style', 'Fore', 'hierarchy', 'dendrogram', 'linkage', 'squareform']Dict:{'numpy': ['transpose', 'mean', 'max', 'abs', 'sum', 'array', 'min', 'unique', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'melt', 'concat', 'value_counts', 'unique', 'array'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'random': [], 'os': ['rename', 'replace'], 'copy': [], 'functools': [], 'itertools': [], 'gc': [], 'sklearn': [], 'category_encoders': [], 'imblearn': [], 'optuna': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'sys': [], 'kuma_utils': [], 'sklego': [], 'warnings': [], 'colorama': [], 'scipy': []} axis_0: 5, axis_1: 12
eda-house-price-feature-engineering.py : ['join', 'read_csv', 'read_csv', 'info', 'describe', 'value_counts', 'value_counts', 'duplicated', 'select_dtypes', 'select_dtypes', 'value_counts', 'boxplot', 'drop', 'hist', 'boxplot', 'dropna', 'corr', 'corr', 'corr', 'corr', 'drop', 'head', 'boxplot', 'dropna', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'boxplot', 'head', 'sort_values', 'sum', 'isnull', 'head', 'sort_values', 'sum', 'isnull', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'apply', 'fillna', 'mode', 'apply', 'fillna', 'mode', 'fillna', 'transform', 'groupby', 'fillna', 'mean', 'transform', 'groupby', 'fillna', 'mean', 'transform', 'groupby', 'fillna', 'mean', 'transform', 'groupby', 'fillna', 'mean', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'select_dtypes', 'select_dtypes', 'map', 'mean', 'groupby', 'hist', 'drop', 'drop', 'hist', 'rename', 'rename', 'fillna', 'fillna', 'info', 'drop', 'drop', 'describe', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'os', 'warnings', 'scipy', 'seaborn'] ['pyplot', 'LinearRegression', 'DecisionTreeRegressor', 'KNeighborsRegressor', 'SVR', 'RandomForestRegressor', 'OrdinalEncoder', 'StandardScaler', 'MinMaxScaler', 'OneHotEncoder', 'mean_squared_error', 'mean_squared_log_error', 'train_test_split', 'GridSearchCV']Dict:{'numpy': ['mean', 'info', 'sum'], 'pandas': ['isnull', 'read_csv', 'value_counts'], 'os': ['rename'], 'warnings': [], 'scipy': [], 'seaborn': ['boxplot'], 'matplotlib': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 1
fast-lgbm-groupkfold-tsflex-memory-optimization.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'pivot_table', 'reset_index', 'median', 'groupby', 'fillna', 'reset_index', 'rename', 'copy', 'merge', 'factorize', 'isin', 'read_csv', 'fillna', 'merge', 'fillna', 'merge', 'astype', 'merge', 'fillna', 'reset_index', 'apply', 'drop_duplicates', 'fillna', 'concat', 'to_parquet', 'reset_index', 'sample', 'read_parquet', 'read_parquet', 'clip', 'read_csv', 'set_index', 'fillna', 'merge', 'fillna', 'merge', 'merge', 'fillna', 'round', 'clip', 'mean', 'concat', 'astype', 'astype', 'concat', 'fillna', 'merge', 'to_csv'] ['numpy', 'pandas', 'glob', 'pathlib', 'pathlib', 'warnings', 'lightgbm'] ['tqdm', '*', 'base_features', 'emg_features', 'FeatureCollection', 'MultipleFeatureDescriptors', 'seglearn_feature_dict_wrapper', 'GroupKFold']Dict:{'numpy': ['mean', 'median', 'round', 'clip', 'isin', 'copy'], 'pandas': ['read_csv', 'pivot_table', 'concat', 'read_parquet', 'factorize', 'merge'], 'tqdm': [], 'sklearn': [], 'glob': [], 'pathlib': [], 'seglearn': [], 'tsflex': [], 'warnings': [], 'lightgbm': []} axis_0: 0, axis_1: 2
hybrid-gp-nn-with-feature-engineering.py : ['join', 'read_csv', 'head', 'drop_duplicates', 'unique', 'apply', 'apply', 'apply', 'apply', 'drop', 'merge', 'apply', 'apply', 'rename', 'merge', 'apply', 'reset_index', 'agg', 'groupby', 'merge', 'apply', 'reset_index', 'agg', 'groupby', 'drop_duplicates', 'fillna', 'mean', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'apply', 'merge', 'merge', 'merge', 'drop', 'head', 'where', 'where', 'copy', 'drop', '__init__', 'clip', 'cumsum', 'clip', 'cumsum', 'sum', 'sum', 'round', 'clip', 'cumsum', 'clip', 'cumsum', 'sum', 'sum', 'round', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'div', 'sum', 'where', 'where', 'drop', 'transform', 'clip', 'cumsum'] ['numpy', 'pandas', 'sklearn.metrics', 'matplotlib.pyplot', 'datetime', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'math', 'copy', 'time', 'os', 'warnings', 'os', 'warnings'] ['StandardScaler', 'train_test_split', 'nflrush', 'mean_squared_error', 'mean_absolute_error', 'train_test_split', 'SimpleImputer', 'StandardScaler', 'RandomForestRegressor', 'AdaBoostRegressor', 'BaggingRegressor', 'GradientBoostingRegressor', 'VotingRegressor', 'Lasso', 'ElasticNet', 'LogisticRegression', 'Ridge', 'MLPRegressor', 'LinearSVR', 'GridSearchCV', 'MultiOutputRegressor', 'XGBRegressor', 'LGBMRegressor', 'Dense', 'Sequential', 'Callback', 'EarlyStopping', 'Dense', 'Sequential', 'Callback', 'EarlyStopping', 'Dropout', 'PReLU', 'BatchNormalization', 'Adam', 'nflrush']Dict:{'numpy': ['mean', 'add', 'sum', 'where', 'round', 'unique', 'clip', 'cumsum', 'copy'], 'pandas': ['merge', 'unique', 'read_csv'], 'sklearn': [], 'matplotlib': [], 'datetime': [], 'seaborn': [], 'math,': [], 'copy,': [], 'time,': [], 'os': ['rename'], 'kaggle': [], 'xgboost': ['apply', '__init__'], 'lightgbm': ['__init__'], 'warnings': [], 'keras': ['__init__']} axis_0: 3, axis_1: 18
more-feature-selection-and-model-back-testing.py : ['read_csv', 'read_csv', 'head', 'head', 'array', 'array', 'array', 'array', 'mean', 'items', 'items', 'drop', 'drop', 'array', 'array', 'array', 'array', 'items', 'mean', 'read_csv', 'set_index', 'read_csv', 'set_index', 'to_csv', 'to_csv'] ['os', 'datetime', 'pandas', 'seaborn', 'plotly.express', 'ipywidgets', 'numpy', 'scipy', 'tensorflow', 'xgboost', 'optuna', 'plotly.figure_factory', 'pickle', 'plotly.graph_objects'] ['copy', 'pyplot', 'getsource', 'KFold', 'LinearRegression', 'boxcox', 'inv_boxcox', 'Pool', 'CatBoostRegressor', 'SVR', 'make_pipeline', 'StandardScaler', 'LGBMRegressor', 'TimeSeriesSplit', 'StackingRegressor', 'KNeighborsRegressor', 'mean_squared_error', 'Ridge', 'mean_squared_log_error', 'RandomForestRegressor', 'pprint', 'make_subplots']Dict:{'os': [], 'datetime': [], 'copy': [], 'pandas': ['array', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'ipywidgets': [], 'inspect': [], 'numpy': ['mean', 'array'], 'scipy': [], 'sklearn': [], 'catboost': [], 'lightgbm': [], 'tensorflow': [], 'xgboost': [], 'optuna': [], 'pickle': [], 'pprint': []} axis_0: 0, axis_1: 4
masters-final-project-model-lb-1-392.py : ['read_csv', 'join', 'to_csv', 'join', 'join', 'transpose', 'array', 'abs', 'cumsum', 'copy', 'mean', 'quantile', 'quantile', 'quantile', 'quantile', 'mean', 'std', 'max', 'mean', 'std', 'mean', 'std', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'min', 'abs', 'std', 'std', 'std', 'std', 'mean', 'mean', 'mean', 'mean', 'min', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'max', 'abs', 'min', 'max', 'abs', 'min', 'abs', 'sum', 'mean', 'diff', 'mean', 'diff', 'mean', 'diff', 'mean', 'diff', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'abs', 'quantile', 'abs', 'quantile', 'abs', 'quantile', 'abs', 'mean', 'abs', 'std', 'abs', 'kurtosis', 'skew', 'median', 'mean', 'abs', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'ewm', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'mean', 'mean', 'std', 'rolling', 'subtract', 'quantile', 'quantile', 'dropna', 'std', 'rolling', 'dropna', 'mean', 'rolling', 'mean', 'std', 'max', 'min', 'quantile', 'quantile', 'quantile', 'quantile', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'mean', 'std', 'max', 'min', 'quantile', 'quantile', 'quantile', 'quantile', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'read_csv', 'join', 'join', 'to_csv', 'to_csv', 'to_csv', 'join', 'to_csv', 'join', 'get', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'to_csv', 'join', 'to_csv', 'join', 'read_csv', 'join', 'drop', 'read_csv', 'join', 'read_csv', 'join', 'to_csv', 'join', 'read_csv', 'join', 'drop', 'read_csv', 'join', 'transform', 'transform', 'to_csv', 'join', 'to_csv', 'join', 'sort_values', 'read_csv', 'itertuples', 'sort_values', 'head', 'tail', 'to_csv', 'read_csv', 'head', 'to_csv', 'read_csv', 'head', 'to_csv', 'read_csv', 'join', 'read_csv', 'read_csv', 'read_csv', 'mean', 'mean', 'to_csv', 'to_csv', 'read_csv', 'join', 'read_csv', 'read_csv', 'join', 'read_csv', 'read_csv', 'join', 'read_csv', 'sort_values', 'dropna', 'drop', 'drop', 'read_csv', 'mean', 'mean', 'mean', 'mean', 'to_csv', 'to_csv'] ['os', 'time', 'warnings', 'traceback', 'numpy', 'pandas', 'scipy.signal', 'multiprocessing', 'xgboost', 'lightgbm', 'pandas', 'numpy', 'pandas', 'sys', 'scipy', 'sklearn'] ['stats', 'hann', 'hilbert', 'convolve', 'LinearRegression', 'StandardScaler', 'KFold', 'mean_squared_error', 'mean_absolute_error', 'tqdm']Dict:{'os': [], 'time': [], 'warnings': [], 'traceback': [], 'numpy': ['transpose', 'mean', 'median', 'quantile', 'max', 'abs', 'sum', 'subtract', 'array', 'min', 'diff', 'std', 'cumsum', 'copy'], 'pandas': ['array', 'read_csv'], 'scipy': [], 'multiprocessing': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'tqdm': [], 'sys': []} axis_0: 1, axis_1: 4
learning-equality-eda-fe-modeling.py : ['sum', 'isna', 'join', '_repr_html_', 'nunique', 'join', '_repr_html_', 'value_counts', 'join', '_repr_html_', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'fillna', 'sum', 'sum', 'duplicated', 'sum', 'sum', 'duplicated', 'sum', 'sum', 'duplicated', 'sum', 'sum', 'duplicated', 'copy', 'value_counts', 'isin', 'agg', 'groupby', 'agg', 'groupby', 'merge', 'sort_values', 'unique', 'unique', 'merge', 'head', 'agg', 'groupby', 'iterrows', 'sort_values', 'reset_index', 'drop_duplicates', 'value_counts', 'merge', 'unique', 'to_dict', 'set_index', 'iterrows', 'count', 'value_counts', 'keys', 'value_counts', 'keys', 'unique', 'iterrows', 'isin', 'value_counts', 'corr', 'set_index', 'describe', 'head', 'value_counts', 'agg', 'groupby', 'sort_values', 'describe', 'copy', 'merge', 'nunique', 'nunique', 'iterrows', 'fillna', 'agg', 'groupby', 'sort_values', 'sort_values', 'agg', 'groupby', 'sort_values', 'sort_values', 'sort_values', 'astype', 'astype', 'groupby', 'iterrows', 'join', 'join', 'join', 'join', 'join', 'join', 'concat', 'to_csv', 'groupby', 'iterrows', 'join', 'join', 'join', 'join', 'join', 'join', 'concat', 'to_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'isna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'unique', 'groupby', 'reset_index', 'reset_index', 'transform', 'transform', 'transform', 'dropna', 'reset_index', 'join', 'reset_index', 'reset_index', 'transform', 'transform', 'dropna', 'reset_index', 'join', 'concat', 'reset_index', 'reset_index', 'transform', 'merge', 'fillna', 'head', 'iterrows', 'mean', 'read_csv', 'head', 'read_csv', 'head', 'mean', 'mean', 'mean', 'groupby', 'reset_index', 'reset_index'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'warnings', 'datetime', 'math', 'transformers', 'torch'] ['HTML', 'AnchoredText', 'fbeta_score', 'recall_score', 'precision_score', 'confusion_matrix', 'TfidfVectorizer', 'pairwise_distances', 'NMF', 'PCA', 'tqdm', 'KneeLocator', 'BertTokenizer', 'TFBertModel', 'BertModel', 'AutoTokenizer', 'AutoModel', 'tqdm']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'numpy': ['mean', 'sum', 'unique', 'isin', 'copy'], 'matplotlib': [], 'seaborn': [], 'gc': [], 'warnings': [], 'datetime': [], 'math': [], 'IPython': ['_repr_html_'], 'sklearn': ['_repr_html_', 'transform'], 'transformers': [], 'torch': ['mean', 'sum', 'concat', 'unique', 'isin'], 'tqdm': []} axis_0: 0, axis_1: 3
playgrounds3-e22-eda-feature-engineering-modeling.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'concat', 'drop_duplicates', 'concat', 'head', 'nunique', 'nunique', 'describe', 'sum', 'isna', 'sum', 'isna', 'nunique', 'count', 'nunique', 'nunique', 'concat', 'assign', 'assign', 'boxplot', 'boxplot', 'max', 'value_counts', 'corr', 'crosstab', 'map', 'get_dummies', 'replace', 'replace', 'replace', 'replace', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'copy', 'drop', 'any', 'isna', 'drop', 'fillna', 'mode', 'notna', 'isna', 'drop', 'select_dtypes', 'astype', 'astype', 'head', 'mean', 'concat', 'corr', 'add', 'drop', 'drop', 'drop', 'sort_values', 'head', 'map', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'warnings'] ['stats', 'LabelEncoder', 'KFold', 'enable_hist_gradient_boosting', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'RandomForestClassifier', 'ExtraTreesClassifier', 'VotingClassifier', 'StackingClassifier', 'XGBClassifier', 'LGBMClassifier', 'f1_score', 'Style', 'Fore', 'enable_hist_gradient_boosting', 'HistGradientBoostingClassifier', 'f1_score']Dict:{'numpy': ['mean', 'add', 'any', 'max', 'sum', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'get_dummies', 'notna', 'crosstab'], 'scipy': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'warnings': [], 'colorama': []} axis_0: 1, axis_1: 7
first-kaggle-submission.py : ['read_csv', 'read_csv', 'copy', 'info', 'head', 'info', 'sum', 'sum', 'isnull', 'copy', 'count', 'count', 'sum', 'isnull', 'mean', 'groupby', 'sample', 'corr', 'value_counts', 'value_counts', 'value_counts', 'crosstab', 'map', 'map', 'corr', 'head', 'describe', 'hist', 'astype', 'dropna', 'mean', 'std', 'sum', 'isnull', 'copy', 'hist', 'astype', 'hist', 'astype', 'dropna', 'mean', 'std', 'sum', 'isnull', 'copy', 'hist', 'astype', 'head', 'info', 'info', 'drop', 'info', 'head', 'head', 'astype', 'astype', 'crosstab', 'replace', 'replace', 'replace', 'drop', 'replace', 'drop', 'head', 'map', 'map', 'map', 'drop', 'drop', 'head', 'head', 'drop', 'drop', 'drop', 'select_dtypes', 'astype', 'fillna', 'head', 'read_csv', 'concat', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'scipy.stats', 'warnings', 'missingno', 'scipy.stats'] ['DecisionTreeClassifier', 'LogisticRegression', 'KNeighborsClassifier', 'GaussianNB', 'SVC', 'LinearSVC', 'RandomForestClassifier', 'GradientBoostingClassifier', 'accuracy_score', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'ols', 'zscore', 'chi2_contingency', 'roc_auc_score', 'roc_curve']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'crosstab'], 'numpy': ['mean', 'sum', 'info', 'std', 'copy'], 'seaborn': [], 'matplotlib': ['hist'], 'sklearn': [], 'scipy': [], 'statsmodels': [], 'warnings': [], 'missingno': []} axis_0: 0, axis_1: 9
full-walkthrough-eda-fe-model-tuning.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'head', 'head', 'head', 'head', 'head', 'sum', 'isna', 'head', 'isna', 'unique', 'isna', 'unique', 'isna', 'head', 'isna', 'sum', 'isna', 'sum', 'isna', 'unique', 'isin', 'mean', 'median', 'copy', 'apply', 'dropna', 'isin', 'merge', 'merge', 'to_datetime', 'isna', 'sample', 'sort_values', 'sort_values', 'sort_values', 'unique', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'agg', 'groupby', 'isin', 'sum', 'agg', 'groupby', 'corr', 'copy', 'apply', 'agg', 'groupby', 'unique', 'sort_values', 'agg', 'groupby', 'isin', 'sort_values', 'agg', 'groupby', 'isin', 'isin', 'merge', 'apply', 'agg', 'groupby', 'sort_values', 'agg', 'groupby', 'isin', 'agg', 'groupby', 'sum', 'isin', 'merge', 'agg', 'groupby', 'sum', 'concat', 'copy', 'copy', 'copy', 'apply', 'dropna', 'isin', 'merge', 'merge', 'to_datetime', 'copy', 'join', 'agg', 'groupby', 'div', 'sum', 'agg', 'groupby', 'sum', 'div', 'sum', 'agg', 'groupby', 'corr', 'corr', 'corr', 'corr', 'apply', 'fillna', 'apply', 'apply', 'apply', 'apply', 'fillna', 'unique', 'get_dummies', 'fillna', 'astype', 'replace', 'fillna', 'astype', 'apply', 'apply', 'count', 'copy', 'agg', 'groupby', 'agg', 'groupby', 'join', 'merge', 'fillna', 'merge', 'corr', 'apply', 'fillna', 'apply', 'apply', 'apply', 'apply', 'fillna', 'unique', 'get_dummies', 'fillna', 'astype', 'replace', 'fillna', 'astype', 'apply', 'apply', 'count', 'agg', 'groupby', 'agg', 'groupby', 'join', 'merge', 'fillna', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'concat', 'merge', 'copy', 'apply', 'dropna', 'isin', 'merge', 'merge', 'to_datetime', 'apply', 'join', 'agg', 'groupby', 'div', 'sum', 'merge', 'agg', 'groupby', 'sum', 'div', 'sum', 'merge', 'astype', 'set_index', 'isin', 'set_index', 'isin', 'copy', 'pop', 'agg', 'astype', 'join', 'mean', 'mean', 'copy', 'sort_values', 'unique', 'mean', 'expanding', 'max', 'expanding', 'min', 'expanding', 'sum', 'expanding', 'apply', 'expanding', 'sum', 'count', 'expanding', 'mean', 'expanding', 'mean', 'expanding', 'sum', 'expanding', 'fillna', 'sort_index', 'copy', 'join', 'copy', 'copy', 'copy', 'copy', 'merge', 'fillna', 'fillna', 'groupby', 'join', 'copy', 'copy', 'copy', 'copy', 'merge', 'fillna', 'fillna', 'groupby', 'join', 'copy', 'copy', 'copy', 'copy', 'copy', 'merge', 'fillna', 'fillna', 'groupby', 'join', 'copy', 'copy', 'copy', 'copy', 'copy', 'merge', 'fillna', 'fillna', 'groupby', 'join', 'join', 'sort_values', 'unique', 'sum', 'expanding', 'fillna', 'sort_index', 'copy', 'join', 'copy', 'copy', 'join', 'copy', 'copy', 'copy', 'copy', 'copy', 'merge', 'fillna', 'fillna', 'groupby', 'join', 'sort_values', 'unique', 'unique', 'unique', 'mean', 'expanding', 'mean', 'expanding', 'min', 'expanding', 'max', 'expanding', 'apply', 'expanding', 'sum', 'count', 'expanding', 'mean', 'expanding', 'unique', 'fillna', 'sort_index', 'copy', 'join', 'copy', 'copy', 'join', 'copy', 'copy', 'copy', 'copy', 'copy', 'merge', 'fillna', 'fillna', 'groupby', 'join', 'sort_values', 'unique', 'mean', 'expanding', 'fillna', 'sort_index', 'copy', 'join', 'copy', 'copy', 'join', 'copy', 'copy', 'copy', 'copy', 'copy', 'merge', 'fillna', 'fillna', 'groupby', 'join', 'sort_values', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'add_suffix', 'fillna', 'fillna', 'sort_index', 'copy', 'join', 'copy', 'copy', 'copy', 'copy', 'transform', 'concat', 'concat', 'copy', 'copy', 'copy', 'copy', 'copy', 'merge', 'fillna', 'fillna', 'groupby', 'join', 'join', 'copy', 'join', 'copy', 'join', 'copy', 'drop', 'copy', 'pop', 'agg', 'astype', 'join', 'copy', 'copy', 'pop', 'pop', 'agg', 'astype', 'join', 'mean', 'std', 'transpose', 'array', 'transpose', 'array', 'transpose', 'array', 'transpose', 'array', 'to_csv'] ['os', 'random', 'optuna', 'textstat', 'umap', 'numpy', 'pandas', 'category_encoders', 'lightgbm', 'seaborn'] ['reduce', 'CategoricalDtype', 'ProfileReport', 'mode', 'cross_validate', 'StratifiedGroupKFold', 'MinMaxScaler', 'enable_iterative_imputer', 'IterativeImputer', 'SimpleImputer', 'KNNImputer', 'ColumnTransformer', 'NearestNeighbors', 'accuracy_score', 'mean_squared_error', 'KMeans', 'DBSCAN', 'AgglomerativeClustering', 'LinearRegression', 'LGBMClassifier', 'LGBMRegressor', 'early_stopping', 'Dataset', 'log_evaluation', 'pyplot']Dict:{'os,': [], 'random,': [], 'optuna,': [], 'textstat,': [], 'umap': [], 'functools': [], 'numpy': ['transpose', 'mean', 'median', 'max', 'sum', 'array', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': [], 'pandas_profiling': [], 'scipy': [], 'sklearn': [], 'category_encoders': [], 'lightgbm': [], 'seaborn': [], 'matplotlib': []} axis_0: 4, axis_1: 3
xgboost-kenpom-gagarin-ranks-modified-raddar.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'replace', 'replace', 'replace', 'replace', 'reset_index', 'concat', 'astype', 'mean', 'reset_index', 'agg', 'groupby', 'join', 'copy', 'copy', 'replace', 'replace', 'replace', 'replace', 'head', 'merge', 'merge', 'head', 'copy', 'astype', 'astype', 'where', 'merge', 'astype', 'astype', 'merge', 'mean', 'std', 'reset_index', 'reset_index', 'astype', 'apply', 'mean', 'std', 'reset_index', 'concat', 'copy', 'copy', 'merge', 'merge', 'fillna', 'fillna', 'sum', 'isnull', 'apply', 'head', 'copy', 'copy', 'merge', 'merge', 'read_csv', 'unique', 'copy', 'copy', 'merge', 'merge', 'drop', 'describe', 'drop', 'drop', 'drop', 'drop', 'min', 'copy', 'clip', 'where', 'astype', 'reset_index', 'mean', 'groupby', 'where', 'keys', 'where', 'where', 'astype', 'reset_index', 'mean', 'groupby', 'where', 'keys', 'clip', 'where', 'where', 'keys', 'clip', 'where', 'concat', 'where', 'keys', 'clip', 'where', 'where', 'keys', 'clip', 'where', 'where', 'concat', 'apply', 'groupby', 'read_csv', 'head', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'copy', 'copy', 'merge', 'merge', 'head', 'sum', 'isnull', 'fillna', 'fillna', 'sum', 'isnull', 'clip', 'clip', 'mean', 'mean', 'clip', 'to_csv'] ['numpy', 'pandas', 'os', 'xgboost', 'statsmodels.api', 'matplotlib.pyplot', 'collections', 'eli5', 'pandas'] ['KFold', 'log_loss', 'UnivariateSpline', 'PermutationImportance']Dict:{'numpy': ['mean', 'sum', 'where', 'min', 'unique', 'clip', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'merge'], 'os': ['replace'], 'xgboost': [], 'sklearn': [], 'scipy': [], 'statsmodels': [], 'matplotlib': [], 'collections': [], 'eli5': []} axis_0: 1, axis_1: 0
tps-oct-21-data-check-and-feature-engineering.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'copy', 'copy', 'head', 'info', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'select_dtypes', 'select_dtypes', 'concat', 'sort_values', 'min', 'head', 'sort_values', 'abs', 'corr', 'head', 'sort_values', 'sum', 'head', 'sort_values', 'abs', 'corr', 'head', 'sort_values', 'abs', 'corr', 'array', 'crosstab', 'sum', 'array', 'sort_values', 'sum', 'drop', 'apply', 'head', 'sort_values', 'abs', 'corr', 'min', 'max', 'sum', 'std', 'head', 'sort_values', 'abs', 'corr'] ['random', 'pandas', 'numpy', 'datatable', 'warnings', 'seaborn', 'matplotlib.pyplot', 'numpy'] ['chi2_contingency']Dict:{'random': [], 'pandas': ['isna', 'crosstab', 'array', 'concat'], 'numpy': ['max', 'abs', 'sum', 'array', 'min', 'info', 'std', 'copy'], 'datatable': [], 'warnings': [], 'seaborn': [], 'matplotlib': [], 'scipy': []} axis_0: 0, axis_1: 6
zzzs-feat-eng-ideas-60-memory-reduction.py : ['read_parquet', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'apply', 'to_datetime', 'tz_localize', 'sort_values', 'astype', 'nunique', 'concat', 'get_dummies', 'unique', 'astype', 'astype', 'map', 'astype', 'map', 'assign', 'agg', 'rolling', 'groupby', 'reset_index', 'agg', 'rolling', 'groupby', 'astype', 'astype', 'agg', 'rolling', 'groupby', 'astype', 'diff', 'groupby', 'astype', 'mean', 'ewm', 'abs', 'astype', 'agg', 'rolling', 'groupby', 'astype', 'astype', 'mean', 'rolling', 'astype', 'max', 'rolling', 'bfill', 'ffill', 'dropna', 'to_parquet', 'read_parquet', 'value_counts'] ['numpy', 'pandas', 'gc', 'warnings'] ['is_datetime64_ns_dtype']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'min', 'unique', 'diff'], 'pandas': [], 'gc': [], 'warnings': []} axis_0: 0, axis_1: 1
2019-data-science-bowl-eda.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'head', 'nunique', 'nunique', 'unique', 'unique', 'sum', 'isnull', 'sum', 'isnull', 'count', 'isnull', 'concat', 'transpose', 'count', 'nunique', 'transpose', 'count', 'value_counts', 'value_counts', 'round', 'transpose', 'value_counts', 'nunique', 'nunique', 'nunique', 'nunique', 'sample', 'head', 'head', 'count', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'count', 'isnull', 'concat', 'reset_index', 'sort_values', 'head', 'head', 'head', 'count', 'groupby', 'to_datetime', 'head', 'head', 'unique', 'set_index', 'agg', 'groupby', 'fillna', 'mean', 'merge', 'head', 'agg', 'groupby', 'value_counts', 'map', 'merge', 'head', 'nunique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique'] ['numpy', 'pandas', 'os', 'json', 'matplotlib', 'seaborn', 'matplotlib.pyplot'] ['tqdm_notebook']Dict:{'numpy': ['transpose', 'mean', 'sum', 'round', 'unique'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'merge', 'to_datetime'], 'os': [], 'json': [], 'matplotlib': [], 'seaborn': [], 'tqdm': []} axis_0: 0, axis_1: 2
titanic-hyperparameter-tuning-gridsearchcv.py : ['read_csv', 'read_csv', 'describe', 'any', 'isna', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'sum', 'duplicated', 'sort_values', 'nunique', 'drop', 'drop', 'tail', 'replace', 'replace', 'concat', 'median', 'fillna', 'fillna', 'tail', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas'] ['RepeatedStratifiedKFold', 'train_test_split', 'GridSearchCV', 'accuracy_score', 'LogisticRegression', 'GaussianNB', 'MultinomialNB', 'ComplementNB', 'BernoulliNB', 'CategoricalNB', 'KNeighborsClassifier', 'Perceptron', 'SVC', 'SGDClassifier', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'XGBClassifier', 'LGBMClassifier']Dict:{'numpy': ['median', 'sum', 'any'], 'pandas': ['isna', 'concat', 'read_csv'], 'sklearn': [], 'xgboost': [], 'lightgbm': []} axis_0: 0, axis_1: 4
ps3e11-feature-selection-engineering-combo.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'value_counts', 'duplicated', 'count', 'value_counts', 'duplicated', 'count', 'value_counts', 'duplicated', 'count', 'value_counts', 'duplicated', 'count', 'drop_duplicates', 'corr', 'concat', 'drop', 'drop', 'copy', 'pop', 'mean', 'mean', 'copy', 'sort_values', 'drop', 'drop', 'mean', 'mean', 'copy', 'copy', 'pop', 'drop', 'eval', 'replace', 'fillna', 'eval', 'replace', 'fillna', 'eval', 'eval', 'mean', 'mean', 'copy', 'sort_values', 'drop', 'drop', 'mean', 'mean', 'copy', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost'] ['mean_squared_log_error', 'KFold']Dict:{'numpy': ['mean', 'sum', 'copy'], 'pandas': ['isna', 'read_csv', 'eval', 'concat', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'xgboost': [], 'sklearn': []} axis_0: 0, axis_1: 0
tpsmay22-advanced-keras.py : ['array', 'array', 'array', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'apply', 'get', 'apply', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'hist'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'datetime', 'scipy.stats', 'math', 'random', 'tensorflow'] ['MaxNLocator', 'ListedColormap', 'cycler', 'display', 'KFold', 'roc_auc_score', 'roc_curve', 'CalibrationDisplay', 'StandardScaler', 'Model', 'ReduceLROnPlateau', 'LearningRateScheduler', 'EarlyStopping', 'Dense', 'Input', 'InputLayer', 'Add', 'Concatenate', 'plot_model']Dict:{'numpy': ['array'], 'pandas': ['array', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'cycler': [], 'IPython': [], 'datetime': [], 'scipy': [], 'math': [], 'random': [], 'sklearn': [], 'tensorflow': []} axis_0: 1, axis_1: 0
the-prediction-of-titanic-passengers-survival.py : ['read_csv', 'copy', 'head', 'head', 'info', 'describe', 'nunique', 'nunique', 'nunique', 'value_counts', 'value_counts', 'describe', 'astype', 'notnull', 'apply', 'apply', 'astype', 'where', 'drop', 'head', 'quantile', 'quantile', 'any', 'boxplot', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'mode', 'head', 'agg', 'groupby', 'drop', 'fillna', 'transform', 'groupby', 'where', 'info', 'head', 'drop', 'nunique', 'head', 'nunique', 'value_counts', 'value_counts', 'mean', 'groupby', 'copy', 'any', 'value_counts', 'value_counts', 'where', 'isin', 'nunique', 'any', 'value_counts', 'drop', 'nunique', 'get_dummies', 'drop', 'concat', 'head', 'head', 'head', 'abs', 'corr', 'where', 'astype', 'bool', 'drop', 'head', 'drop', 'drop', 'mean', 'sort_values', 'mean'] ['numpy', 'pandas', 'seaborn', 'math', 'missingno', 'warnings', 'seaborn', 'matplotlib.pyplot'] ['pyplot', 'figure', 'accuracy_score', 'confusion_matrix', 'precision_score', 'recall_score', 'f1_score', 'roc_auc_score', 'roc_curve', 'train_test_split', 'cross_val_score', 'LocalOutlierFactor', 'MinMaxScaler', 'LabelEncoder', 'StandardScaler', 'RobustScaler', 'LogisticRegression']Dict:{'numpy': ['mean', 'quantile', 'any', 'abs', 'sum', 'where', 'isin', 'info', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'notnull'], 'seaborn': ['boxplot'], 'matplotlib': [], 'math': [], 'missingno': [], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 8
house-price-competition-how-i-archive-top-3.py : ['read_csv', 'read_csv', 'dropna', 'drop', 'sum', 'isna', 'sum', 'isna', 'any', 'isna', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'head', 'apply', 'apply', 'apply', 'apply', 'apply', 'isnull', 'apply', 'isnull', 'drop', 'drop', 'apply', 'isnull', 'apply', 'isnull', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'head', 'items', 'nunique', 'head', 'items', 'nunique', 'unique', 'head', 'nunique', 'nunique', 'pop', 'transform', 'transform', 'to_csv'] ['math', 'pandas', 'numpy', 'seaborn', 'pandas_profiling', 'missingno', 'category_encoders', 'eli5', 'warnings'] ['train_test_split', 'Pipeline', 'TransformerMixin', 'LocalOutlierFactor', 'ColumnTransformer', 'Pipeline', 'SimpleImputer', 'OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'PowerTransformer', 'XGBRegressor', 'PermutationImportance', 'RandomForestRegressor', 'display', 'GridSearchCV']Dict:{'math': [], 'pandas': ['isna', 'unique', 'read_csv', 'isnull'], 'numpy': ['unique', 'sum', 'any'], 'seaborn': [], 'pandas_profiling': [], 'missingno': [], 'sklearn': ['transform'], 'category_encoders': [], 'xgboost': ['apply'], 'eli5': [], 'IPython': [], 'warnings': []} axis_0: 1, axis_1: 33
2nd-place-ncaaw-2021.py : ['read_csv', 'head', 'read_csv', 'drop', 'head', 'count', 'groupby', 'rename', 'reset_index', 'count', 'groupby', 'rename', 'reset_index', 'reset_index', 'mean', 'groupby', 'rename', 'reset_index', 'mean', 'groupby', 'rename', 'rename', 'reset_index', 'count', 'groupby', 'rename', 'reset_index', 'count', 'groupby', 'reset_index', 'sort_values', 'drop_duplicates', 'concat', 'merge', 'merge', 'merge', 'merge', 'fillna', 'drop', 'read_csv', 'drop', 'read_csv', 'drop', 'head', 'copy', 'reset_index', 'head', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'sub', 'apply', 'apply', 'head', 'drop', 'rename', 'merge', 'drop', 'rename', 'merge', 'head', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'head', 'update', 'update', 'update', 'update', 'copy', 'copy', 'rename', 'rename', 'concat', 'head', 'read_csv', 'apply', 'apply', 'apply', 'head', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'apply', 'apply', 'drop', 'rename', 'merge', 'drop', 'rename', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'head', 'astype', 'min', 'max', 'unique', 'copy', 'reset_index', 'copy', 'reset_index', 'copy', 'min', 'max', 'min', 'min', 'max', 'min', 'mean', 'mean', 'copy', 'read_csv', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'keys', 'drop', 'apply', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'iterrows', 'array', 'iterrows', 'clip', 'array', 'copy', 'to_csv', 'head'] ['os', 're', 'sklearn', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] ['Counter', '*', '*', '*']Dict:{'os': ['rename'], 're': ['sub'], 'sklearn': [], 'numpy': ['mean', 'max', 'min', 'unique', 'clip', 'array', 'copy'], 'pandas': ['read_csv', 'concat', 'unique', 'array', 'merge'], 'seaborn': [], 'matplotlib': [], 'collections': ['keys', 'update', 'copy']} axis_0: 0, axis_1: 21
parkinson-s-fog-accelerometer-data-eda.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'reset_index', 'reset_index', 'diff', 'diff', 'diff'] ['numpy', 'pandas', 'itertools', 'matplotlib.pyplot'] ['find_peaks']Dict:{'numpy': ['diff'], 'pandas': ['read_csv'], 'itertools': [], 'matplotlib': [], 'scipy': []} axis_0: 0, axis_1: 0
pss3e23-eda-which-makes-sense.py : ['read_csv', 'read_csv', 'read_csv', 'mean', 'mean', 'hist', 'value_counts', 'hist', 'pop', 'pop', 'mean', 'array', 'sort_values', 'drop_duplicates', 'apply', 'pop', 'pop'] ['pandas', 'numpy', 'matplotlib.pyplot'] ['datetime', 'PercentFormatter', 'StratifiedKFold', 'StandardScaler', 'FunctionTransformer', 'PolynomialFeatures', 'roc_auc_score', 'roc_curve', 'make_pipeline', 'ColumnTransformer', 'KNeighborsClassifier', 'LogisticRegression', 'SGDClassifier', 'LinearSVC', 'Nystroem', 'ExtraTreesClassifier', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'VotingClassifier']Dict:{'pandas': ['array', 'read_csv', 'value_counts'], 'numpy': ['mean', 'array'], 'datetime': [], 'matplotlib': [], 'sklearn': []} axis_0: 0, axis_1: 1
pg-s3-e22-eda-modeling.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'concat', 'drop_duplicates', 'concat', 'head', 'nunique', 'nunique', 'describe', 'sum', 'isna', 'sum', 'isna', 'nunique', 'count', 'nunique', 'nunique', 'concat', 'assign', 'assign', 'boxplot', 'boxplot', 'max', 'value_counts', 'corr', 'crosstab', 'map', 'get_dummies', 'replace', 'replace', 'replace', 'replace', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'map', 'fillna', 'drop', 'any', 'isna', 'drop', 'fillna', 'mode', 'notna', 'isna', 'drop', 'select_dtypes', 'astype', 'astype', 'head', 'mean', 'concat', 'corr', 'add', 'drop', 'drop', 'drop', 'sort_values', 'head', 'mean', 'mean', 'mean', 'mean', 'mean', 'map', 'to_csv', 'sort_values', 'concat', 'reset_index', 'apply', 'groupby', 'mode', 'to_csv', 'map', 'to_csv', 'map', 'to_csv', 'map', 'to_csv', '__init__', 'squeeze', 'to_csv', 'value_counts'] ['numpy', 'pandas', 'math', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'optuna', 'torch', 'torch.nn', 'torch.optim', 'warnings'] ['stats', 'variance_inflation_factor', 'Counter', 'MinMaxScaler', 'StandardScaler', 'MaxAbsScaler', 'RobustScaler', 'PowerTransformer', 'QuantileTransformer', 'OrdinalEncoder', 'LabelEncoder', 'SimpleImputer', 'train_test_split', 'cross_val_score', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'RepeatedStratifiedKFold', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'RandomForestClassifier', 'ExtraTreesClassifier', 'VotingClassifier', 'StackingClassifier', 'LogisticRegression', 'RidgeClassifier', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'confusion_matrix', 'classification_report', 'accuracy_score', 'auc', 'roc_auc_score', 'roc_curve', 'make_scorer', 'f1_score', 'Style', 'Fore']Dict:{'numpy': ['mean', 'squeeze', 'add', 'any', 'max', 'sum'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'get_dummies', 'notna', 'crosstab'], 'math': [], 'scipy': ['mode', 'describe'], 'statsmodels': [], 'collections': ['__init__'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'sklearn': ['__init__'], 'xgboost': ['apply', '__init__'], 'lightgbm': ['__init__'], 'catboost': [], 'optuna': [], 'torch': [], 'warnings': [], 'colorama': ['__init__']} axis_0: 2, axis_1: 10
gbdts-baseline-prevision-io-for-free.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'info', 'keys', 'copy', 'copy', 'concat', 'concat', 'reset_index', 'reset_index', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'read_csv', 'read_csv', 'read_csv', 'head', 'copy', 'to_csv', 'head'] ['os', 'sys', 'time', 'random', 'logging', 'typing', 'seaborn', 'numpy', 'pandas', 'xgboost', 'lightgbm'] ['Path', 'contextmanager', 'pyplot', 'KFold', 'mean_squared_log_error', 'mean_squared_error', 'CatBoost', 'Pool']Dict:{'os': [], 'sys': [], 'time': [], 'random': [], 'logging': ['info'], 'typing': [], 'pathlib': [], 'contextlib': [], 'matplotlib': [], 'seaborn': [], 'numpy': ['mean', 'info', 'copy'], 'pandas': ['concat', 'read_csv'], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 2
tps-sept-22-timeseries-analysis.py : ['read_csv', 'read_csv', 'to_datetime', 'to_datetime', 'replace', 'replace', 'head', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'duplicated', 'round', 'sum', 'duplicated', 'sum', 'duplicated', 'round', 'sum', 'duplicated', 'nunique', 'unique', 'unique', 'unique', 'min', 'max', 'min', 'max', 'sum', 'groupby', 'sum', 'sum', 'unique', 'sum', 'groupby', 'unique', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'to_dict', 'sum', 'groupby', 'sum', 'groupby', 'map', 'set_index', 'get', 'unique', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'reset_index', 'concat', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'to_dict', 'to_dict', 'to_dict', 'map', 'set_index', 'get', 'map', 'set_index', 'get', 'map', 'set_index', 'get', 'drop', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'to_dict', 'map', 'set_index', 'get', 'drop', 'drop', 'unique', 'sum', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'unique', 'melt', 'astype', 'unique', 'drop', 'apply', 'read_csv', 'read_csv', 'to_dict', 'unstack', 'to_dict', 'unstack', 'map', 'set_index', 'get', 'map', 'set_index', 'get', 'unique', 'agg', 'groupby', 'unique', 'unique', 'agg', 'groupby', 'drop', 'head', 'read_csv', 'to_dict', 'unstack', 'map', 'set_index', 'get', 'drop_duplicates', 'drop', 'copy', 'drop_duplicates', 'get_dummies', 'drop', 'drop', 'get_dummies', 'concat', 'unique', 'isna', 'isna', 'unique', 'sum', 'groupby', 'isna', 'reset_index', 'sort_values', 'where', 'where', 'isna', 'apply', 'isna', 'isna', 'to_csv', 'head', 'reset_index', 'isin', 'reset_index', 'isin', 'unique', 'unique', 'unique'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'math', 'statistics', 'scipy.stats', 'time', 'matplotlib.dates', 'dateutil.easter', 'plotly.express', 'warnings', 'sklearn'] ['combinations', 'product', 'pearsonr', 'shapiro', 'chi2', 'poisson', 'datetime', 'colored', 'train_test_split', 'StratifiedKFold', 'GridSearchCV', 'TimeSeriesSplit', 'GroupKFold', 'cross_validate', 'StandardScaler', 'RobustScaler', 'PowerTransformer', 'OneHotEncoder', 'LabelEncoder', 'OrdinalEncoder', 'SimpleImputer', 'KNNImputer', 'enable_iterative_imputer', 'IterativeImputer', 'make_pipeline', 'make_column_transformer', 'confusion_matrix', 'ConfusionMatrixDisplay', 'accuracy_score', 'roc_auc_score', 'RandomForestClassifier', 'LinearRegression', 'Ridge', 'GaussianMixture', 'BayesianGaussianMixture', 'PCA', 'TSNE', 'LinearDiscriminantAnalysis', 'KMeans', 'XGBRegressor', 'XGBClassifier', 'CatBoostRegressor', 'CatBoostClassifier', 'LGBMRegressor', 'LGBMClassifier', 'LinearRegression', 'LogisticRegression', 'KNeighborsClassifier', 'SVC', 'DecisionTreeClassifier', 'RandomForestClassifier', 'GaussianNB']Dict:{'numpy': ['mean', 'max', 'sum', 'where', 'round', 'min', 'unique', 'isin', 'copy'], 'pandas': ['isna', 'read_csv', 'melt', 'concat', 'get_dummies', 'unique', 'to_datetime'], 'seaborn': [], 'matplotlib': [], 'itertools': [], 'math': [], 'statistics': ['mean', 'groupby'], 'scipy': ['mean'], 'time': [], 'datetime': ['min', 'max', 'replace'], 'dateutil': [], 'plotly': [], 'termcolor': [], 'warnings': [], 'sklearn': [], 'xgboost': ['apply'], 'catboost': [], 'lightgbm': []} axis_0: 1, axis_1: 10
data-preparation-exploration.py : ['read_csv', 'read_csv', 'head', 'tail', 'drop_duplicates', 'info', 'set_index', 'reset_index', 'groupby', 'describe', 'describe', 'describe', 'reset_index', 'count', 'drop', 'value_counts', 'concat', 'agg', 'groupby', 'mean', 'drop', 'fillna', 'rename', 'merge', 'rename', 'reset_index', 'fillna', 'rename', 'merge', 'rename', 'reset_index', 'drop', 'drop', 'mean', 'groupby', 'sort_values', 'corr', 'sample', 'get_dummies', 'drop', 'concat', 'drop', 'drop', 'drop', 'transform', 'drop'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['Imputer', 'PolynomialFeatures', 'StandardScaler', 'VarianceThreshold', 'SelectFromModel', 'shuffle', 'RandomForestClassifier']Dict:{'pandas': ['read_csv', 'concat', 'value_counts', 'get_dummies', 'merge'], 'numpy': ['mean', 'info'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], '=': [], 'rf': []} axis_0: 2, axis_1: 11
titanic-baseline-eda-pipes.py : ['read_csv', 'read_csv', 'read_csv', 'reset_index', 'sum', 'isnull', 'nunique', 'value_counts', 'value_counts', 'replace', 'crosstab', 'reset_index', 'max', 'crosstab', 'fillna', 'crosstab', 'crosstab', 'reset_index', 'quantile', 'rename', 'reset_index', 'unstack', 'crosstab', 'reset_index', 'unstack', 'mean', 'groupby', 'unique', 'apply', 'apply', 'head', 'value_counts', 'map', 'map', 'groupby', 'reset_index', 'unstack', 'median', 'isnull', 'transform', 'groupby', 'isnull', 'transform', 'groupby', 'sum', 'isnull', 'cut', 'cut', 'unique', 'map', 'map', 'replace', 'value_counts', 'transform', 'groupby', 'transform', 'groupby', 'unique', 'unique', 'unique', 'unique', 'reset_index', 'unstack', 'mean', 'groupby', 'fillna', 'fillna', 'cut', 'cut', 'apply', 'notnull', 'crosstab', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'astype', 'astype', 'drop', 'drop', 'concat', 'astype', 'get_dummies', 'drop', 'replace', 'drop', 'drop', 'drop', 'drop', 'mean', 'std', 'boxplot', 'astype', 'to_csv', 'unique', 'astype', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 're', 'gc', 'xgboost', 'string', 'warnings', 'time'] ['rcParams', 'preprocessing', 'confusion_matrix', 'accuracy_score', 'make_scorer', 'StratifiedKFold', 'cross_val_score', 'KFold', 'XGBClassifier', 'fmin', 'hp', 'tpe', 'Trials', 'space_eval', 'STATUS_OK', 'STATUS_RUNNING', 'partial', 'stats', 'CategoricalDtype', 'LabelEncoder', 'accuracy_score', 'confusion_matrix', 'classification_report', 'cross_val_score', 'LabelEncoder', 'StandardScaler', 'Pipeline', 'train_test_split', 'KFold', 'cross_validate', 'accuracy_score', 'KMeans', 'PCA', 'SVC', 'RidgeClassifier', 'SGDClassifier', 'LogisticRegression', 'SVC', 'LinearSVC', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'XGBClassifier', 'MultinomialNB', 'SelectFromModel', 'RandomForestClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'BaggingClassifier', 'VotingClassifier', 'RandomTreesEmbedding', 'class_weight']Dict:{'pandas': [], 'numpy': ['mean', 'median', 'quantile', 'max', 'sum', 'unique', 'std'], 'seaborn': ['boxplot'], 'matplotlib': [], 're': [], 'gc': [], 'sklearn': [], 'xgboost': ['apply'], 'hyperopt': [], 'functools': [], 'scipy': [], 'string': [], 'warnings': [], 'time': []} axis_0: 1, axis_1: 9
tps-oct-eda-tabnet.py : ['read_csv', 'read_csv', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'head', 'sum', 'isna', 'info', 'describe', 'reset_index', 'var', 'sort_values', 'corr', 'reset_index', 'corrwith', 'sort_values', 'value_counts', 'head', 'sum', 'isna', 'info', 'describe', 'mean', 'mean', 'mean', 'mean', 'std', 'std', 'std', 'std', 'transform', 'to_numpy', 'to_numpy', 'read_csv', 'to_csv', 'head'] ['os', 'torch', 'numpy', 'pandas', 'datatable', 'seaborn', 'matplotlib.pyplot', 'torch.optim', 'warnings'] ['StandardScaler', 'MinMaxScaler', 'KFold', 'train_test_split', 'LabelEncoder', 'Counter', 'TabNetPretrainer', 'TabNetRegressor']Dict:{'os': [], '': [], 'torch': [], 'numpy': ['mean', 'max', 'var', 'sum', 'min', 'info', 'std'], 'pandas': ['isna', 'read_csv', 'value_counts'], 'datatable': [], 'seaborn': [], 'matplotlib': [], 'sklearn': ['transform'], 'collections': [], 'warnings': [], 'pytorch_tabnet': []} axis_0: 4, axis_1: 4
time-series-demand-forecasting.py : ['head', 'tail', 'sum', 'isnull', 'quantile', 'astype', 'astype', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'replace', 'transform', 'groupby', 'mean', 'ewm', 'shift', 'abs', 'abs', 'abs', 'sum', 'sort_values', 'sum', 'head', 'join', 'read_csv', 'read_csv', 'read_csv', 'concat', 'min', 'max', 'min', 'max', 'min', 'max', 'describe', 'nunique', 'nunique', 'nunique', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'sort_values', 'tail', 'get_dummies', 'isna', 'isna', 'astype', 'to_csv', 'head'] ['time', 'numpy', 'pandas', 'seaborn', 'lightgbm', 'warnings', 'os'] ['pyplot', 'LabelEncoder']Dict:{'time': [], 'numpy': ['mean', 'quantile', 'max', 'abs', 'sum', 'min'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'get_dummies'], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'warnings': [], 'sklearn': ['transform'], 'os': ['replace']} axis_0: 1, axis_1: 0
top-3-fe-tuning-ensembling.py : ['read_csv', 'read_csv', 'reset_index', 'concat', 'astype', 'value_counts', 'value_counts', 'value_counts', 'corr', 'isnull', 'abs', 'corr', 'transpose', 'median', 'groupby', 'apply', 'groupby', 'fillna', 'median', 'sum', 'isnull', 'value_counts', 'replace', 'sum', 'isnull', 'apply', 'notnull', 'transpose', 'rename', 'drop', 'count', 'groupby', 'sum', 'transpose', 'transpose', 'rename', 'drop', 'count', 'groupby', 'sum', 'transpose', 'replace', 'replace', 'replace', 'value_counts', 'drop', 'sum', 'isnull', 'isnull', 'median', 'groupby', 'fillna', 'drop', 'map', 'head', 'head', 'transpose', 'crosstab', 'replace', 'replace', 'replace', 'replace', 'transpose', 'mean', 'groupby', 'copy', 'qcut', 'to_numeric', 'qcut', 'transform', 'groupby', 'head', 'replace', 'unique', 'unique', 'unique', 'unique', 'median', 'groupby', 'median', 'groupby', 'mean', 'abs', 'corr', 'transpose', 'copy', 'qcut', 'set_index', 'sort_values', 'reset_index', 'agg', 'groupby', 'set_index', 'sort_values', 'reset_index', 'agg', 'groupby', 'nunique', 'concat', 'concat', 'reset_index', 'concat', 'drop', 'head', 'drop', 'isnull', 'isnull', 'mean', 'std', 'sort_values', 'drop', 'isnull', 'isnull', 'astype', 'isnull', 'astype', 'to_csv', 'drop', 'isnull', 'drop'] ['os', 'warnings', 'matplotlib.pyplot', 'numpy', 'pandas', 'pandas_profiling', 'seaborn', 'math', 'string', 'optuna', 'plotly.express', 'plotly.figure_factory', 'plotly.offline', 'plotly.graph_objs', 'eli5', 'eli5', 'shap'] ['Path', 'clear_output', 'display', 'CategoricalDtype', 'display', 'HTML', 'Javascript', 'KMeans', 'PCA', 'mutual_info_regression', 'KFold', 'cross_val_score', 'StratifiedKFold', 'learning_curve', 'train_test_split', 'GridSearchCV', 'MEstimateEncoder', 'OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'preprocessing', 'train_test_split', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'VotingClassifier', 'LinearDiscriminantAnalysis', 'LogisticRegression', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'MLPClassifier', 'SVC', 'XGBClassifier', 'TPESampler', 'make_subplots', 'plot_confusion_matrix', 'PermutationImportance', 'PermutationImportance', 'pdp', 'get_dataset', 'info_plots']Dict:{'os': ['rename', 'replace'], 'warnings': [], 'pathlib': ['rename', 'replace'], 'IPython': [], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'to_numeric', 'unique', 'notnull', 'qcut', 'crosstab'], 'matplotlib': [], 'numpy': ['transpose', 'mean', 'median', 'abs', 'sum', 'unique', 'std', 'copy'], 'pandas_profiling': [], 'seaborn': [], 'math': [], 'string': [], 'sklearn': [], 'category_encoders': [], 'xgboost': ['apply'], 'optuna': [], 'plotly': [], 'eli5': [], 'pdpbox': [], 'shap': [], '': [], '#': [], 'package': [], 'used': [], 'to': [], 'calculate': [], 'Shap': [], 'values': []} axis_0: 1, axis_1: 6
dsb-2019-feature-engineering.py : ['describe', 'value_counts', 'describe', 'value_counts', 'isin', 'value_counts', 'describe', 'value_counts', 'value_counts', 'isin', 'describe', 'nunique', 'groupby', 'isin', 'describe', 'describe', 'head', 'groupby', 'isin', 'max', 'mean', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'groupby', 'isin', 'groupby', 'nunique', 'groupby', 'count', 'mean', 'mean', 'max', 'max', 'groupby', 'isin', 'groupby', 'nunique', 'groupby', 'count', 'mean', 'mean', 'max', 'max', 'nunique', 'groupby', 'isin', 'nunique', 'groupby', 'isin', 'sum', 'sum', 'sort_values', 'groupby', 'isin', 'tail', 'last', 'tail', 'any', 'isin', 'any', 'count', 'groupby', 'reset_index', 'apply', 'apply', 'groupby', 'unique', 'apply', 'groupby', 'unique', 'concat', 'unique', 'isin', 'apply', 'fillna', 'unstack', 'count', 'groupby', 'reset_index', 'astype', 'apply', 'groupby', 'isin', 'droplevel', 'drop', 'replace', 'replace', 'replace', 'head', 'fillna', 'unstack', 'count', 'groupby', 'reset_index', 'astype', 'apply', 'groupby', 'isin', 'droplevel', 'drop', 'replace', 'replace', 'replace', 'replace', 'describe', 'describe', 'unique', 'isin', 'count', 'groupby', 'isin', 'head', 'unique', 'isin', 'isin', 'apply', 'fillna', 'unstack', 'count', 'groupby', 'reset_index', 'astype', 'apply', 'groupby', 'isin', 'droplevel', 'drop', 'replace', 'replace', 'replace', 'head', 'fillna', 'unstack', 'count', 'groupby', 'reset_index', 'astype', 'apply', 'groupby', 'isin', 'droplevel', 'drop', 'replace', 'replace', 'replace', 'replace', 'describe', 'fillna', 'unstack', 'count', 'groupby', 'reset_index', 'astype', 'apply', 'groupby', 'isin', 'droplevel', 'drop', 'replace', 'replace', 'replace', 'head'] [] []Dict:{} axis_0: 1, axis_1: 7
1n-instacart-data-exploration-feature-engineering.py : ['read_csv', 'info', 'head', 'read_csv', 'head', 'info', 'head', 'value_counts', 'head', 'head', 'head', 'value_counts', 'max', 'mean', 'median', 'boxplot', 'head', 'head', 'isin', 'head', 'isin', 'head', 'boxplot', 'boxplot', 'boxplot'] ['pandas', 'matplotlib.pyplot', 'seaborn'] []Dict:{'pandas': ['read_csv', 'value_counts'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot']} axis_0: 0, axis_1: 0
clip-prompt-feature-engineering-xgb.py : ['eval', 'sum', 'prod', 'stack', 'corr', 'to_csv', 'reset_index', 'reset_index', 'read_csv', 'read_csv', 'read_csv', 'join', 'join', 'reset_index', 'reset_index', 'copy', 'mean', 'to_csv'] ['torch', 'torch.nn', 'numpy', 'pandas', 'clip', 'os', 'skimage', 'matplotlib.pyplot', 'seaborn', 'optuna'] ['Dataset', 'DataLoader', 'Path', 'join', 'Image', 'tqdm', 'mean_squared_error', 'XGBRegressor', 'partial']Dict:{'torch': [], 'pathlib': [], 'os': [], 'numpy': ['mean', 'stack', 'sum', 'prod', 'copy'], 'pandas': ['eval', 'read_csv'], 'clip,': [], 'os,': [], 'skimage': [], 'matplotlib': [], 'seaborn': [], 'PIL': ['eval'], 'tqdm': [], 'sklearn': [], 'xgboost': [], 'optuna': [], 'functools': []} axis_0: 0, axis_1: 1
airbnb-new-user-bookings.py : ['read_csv', 'head', 'any', 'isnull', 'apply', 'apply', 'drop', 'head', 'value_counts', 'value_counts', 'apply', 'value_counts', 'value_counts', 'drop', 'head', 'read_csv', 'read_csv', 'head', 'replace', 'replace', 'replace', 'notnull', 'describe', 'isnull', 'median', 'fillna', 'describe', 'isnull', 'isnull', 'isnull', 'head', 'drop_duplicates', 'isnull', 'replace', 'value_counts', 'isnull', 'read_csv', 'head', 'replace', 'replace', 'isnull', 'head', 'apply', 'notnull', 'head', 'value_counts', 'value_counts', 'reset_index', 'pivot_table', 'set_index', 'apply', 'head', 'value_counts', 'value_counts', 'pivot_table', 'sum', 'sum', 'sum', 'groupby', 'value_counts', 'concat', 'drop', 'drop', 'drop', 'notnull', 'notnull', 'notnull', 'value_counts', 'apply', 'crosstab', 'fillna', 'sum', 'fillna', 'dropna', 'boxplot', 'apply', 'to_datetime', 'value_counts', 'value_counts', 'head', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'fillna', 'apply', 'apply', 'apply', 'apply', 'drop', 'drop', 'drop', 'apply', 'drop', 'set_index', 'get_dummies', 'sum', 'groupby', 'mean', 'groupby', 'count', 'groupby', 'nunique', 'groupby', 'count', 'groupby', 'count', 'groupby', 'nunique', 'groupby', 'drop', 'apply', 'fillna', 'drop', 'set_index', 'drop', 'apply', 'get_dummies', 'read_csv', 'replace', 'apply', 'head'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot'] ['stats', 'RandomForestClassifier', 'VotingClassifier', 'KNeighborsClassifier', 'train_test_split', 'GridSearchCV', 'RFE', 'StandardScaler', 'GradientBoostingClassifier', 'LogisticRegression']Dict:{'pandas': ['read_csv', 'isnull', 'pivot_table', 'concat', 'value_counts', 'get_dummies', 'notnull', 'to_datetime', 'crosstab'], 'numpy': ['mean', 'median', 'sum', 'any'], 'scipy': ['describe'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'sklearn': []} axis_0: 0, axis_1: 15
tps-dec-21-reasonable-xgboost-model.py : ['get', 'read_parquet', 'read_csv', 'to_dict', 'read_parquet', 'drop', 'reset_index', 'concat', 'assign', 'assign', 'assign', 'min', 'concat', 'astype', 'rename', 'sum', 'astype', 'rename', 'sum', 'rename', 'astype', 'rename', 'apply', 'rename', 'where', 'rename', 'rename', 'apply', 'astype', 'rename', 'rename', 'abs', 'abs', 'astype', 'rename', 'apply', 'rename', 'apply', 'add_suffix', 'clip', 'rename', 'sum', 'rename', 'rename', 'astype', 'rename', 'rename', 'astype', 'rename', 'rename', 'rename', 'abs', 'astype', 'rename', 'rename', 'abs', 'rename', 'abs', 'drop', 'astype', 'drop', 'astype', 'drop', 'info', 'to_numpy', 'astype', 'drop', 'drop', 'to_numpy', 'astype', 'drop', 'transform', 'to_numpy', 'astype', 'drop', 'sum', 'sum', 'to_parquet', 'to_parquet', 'assign', 'read_parquet', 'head', 'to_csv'] ['os', 'gc', 'random', 'pandas', 'numpy', 'seaborn', 'xgboost'] ['StratifiedKFold', 'LabelEncoder', 'classification_report', 'accuracy_score', 'confusion_matrix']Dict:{'os': ['rename'], 'gc': [], 'random': [], 'pandas': ['read_parquet', 'concat', 'read_csv'], 'numpy': ['abs', 'sum', 'where', 'min', 'clip', 'info'], 'seaborn': [], 'xgboost': [], 'sklearn': []} axis_0: 2, axis_1: 7
titanic-autofeat-automatic-fe.py : ['set_index', 'read_csv', 'set_index', 'read_csv', 'concat', 'head', 'concat', 'groupby', 'transform', 'count', 'fillna', 'mask', 'transform', 'sum', 'fillna', 'mask', 'fillna', 'replace', 'replace', 'replace', 'replace', 'replace', 'fillna', 'apply', 'notnull', 'median', 'groupby', 'fillna', 'apply', 'groupby', 'fillna', 'median', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'head', 'drop', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'head', 'head', 'transform', 'head', 'concat', 'fillna', 'replace', 'to_numpy', 'to_numpy', 'transform', 'to_numpy', 'head', 'to_csv', 'reset_index', 'astype', 'to_numpy', 'to_numpy', 'clip', 'clip', 'mean', 'astype', 'to_csv', 'reset_index', 'astype', 'to_csv', 'reset_index', 'astype', 'to_csv', 'reset_index', 'to_numpy', 'to_numpy', 'clip', 'clip', 'mean', 'astype', 'to_csv', 'reset_index', 'astype', 'to_csv', 'reset_index', 'astype', 'to_csv', 'reset_index', 'sort_values', 'sort_values'] ['pandas', 'numpy', 'warnings'] ['LabelEncoder', 'AutoFeatRegressor', 'LinearRegression', 'GradientBoostingClassifier', 'train_test_split', 'cross_val_score', 'explained_variance_score', 'STATUS_OK', 'Trials', 'fmin', 'hp', 'tpe', 'space_eval']Dict:{'pandas': ['concat', 'notnull', 'read_csv'], 'numpy': ['mean', 'median', 'sum', 'clip'], 'sklearn': [], 'autofeat': [], 'hyperopt': [], 'warnings': []} axis_0: 4, axis_1: 3
top-1-approach-eda-new-models-and-stacking.py : ['read_csv', 'read_csv', 'head', 'head', 'describe', 'describe', 'drop', 'drop', 'reset_index', 'drop', 'corr', 'corr', 'reset_index', 'concat', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'concat', 'replace', 'replace', 'replace', 'mode', 'apply', 'groupby', 'fillna', 'mode', 'apply', 'groupby', 'fillna', 'median', 'astype', 'astype', 'astype', 'isin', 'value_counts', 'value_counts', 'select_dtypes', 'sort_values', 'median', 'groupby', 'boxplot', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'select_dtypes', 'join', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'dropna', 'drop', 'join', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'abs', 'sort_values', 'apply', 'drop', 'get_dummies', 'sum', 'sum', 'isna', 'sample', 'describe', 'corrwith', 'join', 'join', 'abs', 'sort_values', 'fillna', 'mean', 'boxplot', 'join', 'join', 'mean', 'mean', 'std', 'mean', 'sort_values', 'read_csv', 'quantile', 'quantile', 'apply', 'apply', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'matplotlib.gridspec', 'warnings'] ['datetime', 'stats', 'skew', 'boxcox_normmax', 'norm', 'boxcox1p', 'MaxNLocator', 'cross_val_score', 'KFold', 'cross_validate', 'RobustScaler', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'TweedieRegressor', 'enable_hist_gradient_boosting', 'GradientBoostingRegressor', 'HistGradientBoostingRegressor', 'SVR', 'make_pipeline', 'mean_squared_error', 'XGBRegressor', 'LGBMRegressor', 'StackingCVRegressor']Dict:{'numpy': ['mean', 'median', 'quantile', 'abs', 'sum', 'isin', 'std'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': [], 'seaborn': ['boxplot'], 'datetime': ['replace'], 'scipy': [], 'warnings': [], 'sklearn': [], 'xgboost': ['apply'], 'lightgbm': [], 'mlxtend': []} axis_0: 0, axis_1: 5
exploring-and-predicting-lb-score-0-60160.py : ['read_csv', 'read_csv', 'head', 'describe', 'describe', 'isnull', 'dropna', 'value_counts', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'unique', 'mean', 'quantile', 'unique', 'mean', 'groupby', 'read_csv', 'apply', 'cut', 'astype', 'apply', 'apply', 'replace', 'apply', 'replace', 'apply', 'replace', 'head', 'concat', 'to_datetime', 'apply', 'apply', 'cut', 'reset_index', 'agg', 'groupby', 'mean', 'drop', 'head', 'merge', 'drop', 'isnull', 'dropna', 'mean', 'array', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 'sklearn.metrics', 'xgboost', 'math'] ['KFold', 'LabelEncoder', 'CountVectorizer', 'RandomForestClassifier', 'ExtraTreesClassifier', 'GradientBoostingClassifier']Dict:{'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'unique', 'array', 'merge', 'to_datetime'], 'sklearn': ['apply'], 'numpy': ['mean', 'unique', 'quantile', 'array'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'xgboost': [], 'math': []} axis_0: 0, axis_1: 4
water-quality-prediction.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'sum', 'isna', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'isna', 'reset_index', 'sum', 'isna', 'reset_index', 'sum', 'isna', 'mean', 'sum', 'isna', 'std', 'sum', 'isna', 'mean', 'sum', 'isna', 'std', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'nunique', 'nunique', 'head', 'reset_index', 'apply', 'apply', 'max', 'min', 'corr', 'drop', 'sum', 'isna', 'sum', 'isna', 'fillna', 'median', 'fillna', 'median', 'astype', 'isin', 'astype', 'isin', 'get_dummies', 'get_dummies', 'transform', 'items', 'round', 'to_csv', 'copy', 'to_csv', 'keys', 'read_csv', 'rename', 'concat', 'keys', 'read_csv', 'rename', 'concat', 'head', 'items', 'keys', 'keys', 'drop', 'copy', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'itertools', 'warnings', 'plotly.express', 'time', 'umap', 'eli5'] ['train_test_split', 'GridSearchCV', 'RandomizedSearchCV', 'StratifiedKFold', 'PredefinedSplit', 'accuracy_score', 'confusion_matrix', 'recall_score', 'precision_score', 'f1_score', 'roc_auc_score', 'plot_confusion_matrix', 'plot_roc_curve', 'roc_curve', 'mean_squared_error', 'mean_squared_log_error', 'StandardScaler', 'MinMaxScaler', 'OneHotEncoder', 'LabelEncoder', 'mutual_info_classif', 'PCA', 'ColumnTransformer', 'Pipeline', 'SimpleImputer', 'PermutationImportance', 'resample', 'LinearRegression', 'LogisticRegression', 'Lasso', 'Ridge', 'KNeighborsClassifier', 'KNeighborsRegressor', 'SVC', 'SVR', 'DecisionTreeClassifier', 'DecisionTreeRegressor', 'RandomForestClassifier', 'RandomForestRegressor', 'ExtraTreesClassifier', 'ExtraTreesRegressor', 'XGBClassifier', 'XGBRegressor', 'LGBMClassifier', 'LGBMRegressor', 'CatBoostClassifier', 'CatBoostRegressor', 'GaussianNB', 'MultinomialNB', 'f_oneway']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'round', 'min', 'isin', 'std', 'copy'], 'pandas': ['concat', 'get_dummies', 'isna', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'itertools': [], 'warnings': [], 'plotly': [], 'time': [], 'umap': [], 'sklearn': [], 'eli5': [], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': [], 'scipy': []} axis_0: 0, axis_1: 15
xgb-starter-in-python.py : ['items', 'read_json', 'read_json', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'to_datetime', 'to_datetime', 'transform', 'transform', 'apply', 'join', 'join', 'apply', 'join', 'join', 'head', 'transform', 'array', 'apply', 'to_csv'] ['os', 'sys', 'operator', 'numpy', 'pandas', 'xgboost'] ['sparse', 'model_selection', 'preprocessing', 'ensemble', 'log_loss', 'TfidfVectorizer', 'CountVectorizer']Dict:{'os': [], 'sys': [], 'operator': [], 'numpy': ['array'], 'pandas': ['to_datetime', 'array', 'read_json'], 'scipy': [], 'xgboost': [], 'sklearn': []} axis_0: 0, axis_1: 0
mae-1-33-eda-ensemble.py : ['join', 'read_csv', 'read_csv', 'describe', 'sum', 'isnull', 'quantile', 'quantile', 'nunique', 'concat', 'value_counts', 'value_counts', 'select_dtypes', 'boxplot', 'select_dtypes', 'boxplot', 'drop', 'drop', 'corr', 'drop', 'drop', 'round', 'median', 'mean', 'get_dummies', 'drop_duplicates', 'drop', 'replace', 'drop'] ['numpy', 'pandas', 'os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'plotly', 'plotly.express', 'plotly.graph_objs', 'xgboost', 'lightgbm'] ['init_notebook_mode', 'iplot', 'mean_absolute_error', 'RepeatedKFold', 'CatBoostRegressor', 'train_test_split', 'SelectKBest', 'f_regression', 'LinearRegression', 'train_test_split', 'mean_absolute_error']Dict:{'numpy': ['mean', 'median', 'quantile', 'sum', 'round'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'os': ['replace'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 8
part-2-preprocessing-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'drop', 'drop', 'head', 'head', 'replace', 'replace', 'unique', 'head', 'head', 'transform', 'transform', 'head', 'head', 'replace', 'replace', 'replace', 'replace', 'any', 'isna', 'any', 'isna', 'apply', 'head', 'apply', 'head', 'transform', 'transform', 'head', 'head', 'head', 'head', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'category_encoders'] ['pyplot', 'SimpleImputer', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler']Dict:{'numpy': ['unique', 'any'], 'pandas': ['isna', 'unique', 'read_csv'], 'os': ['replace'], 'matplotlib': [], 'sklearn': ['transform'], 'category_encoders': []} axis_0: 0, axis_1: 5
tps-2021-feat-selection-engineering-ideas.py : ['read_csv', 'read_csv', 'reset_index', 'sample', 'reset_index', 'reset_index', 'mean', 'abs', 'concat', 'sort_values', 'reset_index', 'sample', 'reset_index', 'reset_index', 'read_html', 'astype', 'apply', 'set_index', 'concat', 'mean', 'rename', 'reset_index', 'sort_values', 'reset_index', 'reset_index', 'copy', 'fillna', 'transform', 'fillna', 'transform', 'fillna', 'transform', 'transform', 'mean', 'concat', 'concat', 'reset_index', 'reset_index', 'copy', 'fillna', 'transform', 'fillna', 'transform', 'fillna', 'transform', 'transform', 'mean', 'concat', 'concat', 'concat', 'concat', 'mean', 'median', 'std', 'var', 'kurtosis', 'head', 'sort_values'] ['numpy', 'pandas', 'xgboost', 'eli5', 'shap', 'gc', 'warnings'] ['preprocessing', 'decomposition', 'model_selection', 'feature_calculators', 'PermutationImportance']Dict:{'numpy': ['mean', 'median', 'var', 'abs', 'std', 'copy'], 'pandas': ['concat', 'read_html', 'read_csv'], 'xgboost': [], 'sklearn': [], 'tsfresh': [], 'eli5': [], 'shap': [], 'gc': [], 'warnings': [], 'shap_values,': [], 'explainer,': [], 'X_valid': [], '=': [], 'shap_feature_selection(train,': [], '0': [], 'features,': [], "'target',": [], '5,': [], "models['B-XGB'])": [], '>': [], 'shap_feature_selection(train,1': [], '0]': []} axis_0: 6, axis_1: 12
tps-aug-22-top-2-logistic-regression-cv-fe.py : ['read_csv', 'read_csv', 'head', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'isnull', 'sample', 'sample', 'value_counts', 'crosstab', 'value_counts', 'pop', 'mean', 'concat', 'astype', 'isnull', 'astype', 'isnull', 'sum', 'isnull', 'sort_values', 'corr', 'drop', 'round', 'sum', 'reset_index', 'sort_values', 'head', 'unique', 'sort_values', 'corr', 'drop', 'sum', 'isnull', 'unique', 'keys', 'dropna', 'sum', 'isnull', 'isnull', 'sum', 'isnull', 'isnull', 'sum', 'sum', 'isnull', 'mean', 'transform', 'transform', 'transform', 'transform', 'copy', 'copy', 'copy', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'array', 'abs', 'mean', 'reset_index', 'sort_values', 'copy', 'rename', 'hist', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'feature_engine', 'xgboost', 'random'] ['KFold', 'StratifiedKFold', 'LabelEncoder', 'OneHotEncoder', 'r2_score', 'roc_auc_score', 'WoEEncoder', 'Fore', 'Back', 'Style', 'CatBoostClassifier', 'LGBMClassifier', 'LogisticRegression', 'HuberRegressor', 'KNNImputer', 'StandardScaler', 'PowerTransformer', 'roc_auc_score', 'NearMiss', 'ClusterCentroids', 'SMOTE']Dict:{'numpy': ['mean', 'abs', 'sum', 'round', 'unique', 'array', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'array', 'crosstab'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 'warnings': [], 'feature_engine': [], 'colorama': [], 'xgboost': [], 'random': ['sample'], 'catboost': [], 'lightgbm': [], 'imblearn': [], '=': [], 'pd': [], 'index=df_train[features]': [], 'importance_df': [], 'df_train[features]': [], 'ascending=True)': []} axis_0: 0, axis_1: 9
optiver-volatility-predictions-using-tabnet.py : ['join', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'diff', 'sum', 'unique', 'read_parquet', 'apply', 'groupby', 'apply', 'groupby', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'apply', 'drop', 'read_parquet', 'apply', 'groupby', 'sum', 'mean', 'std', 'max', 'min', 'mean', 'sum', 'max', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'diff', 'sum', 'unique', 'sum', 'mean', 'sum', 'mean', 'sum', 'diff', 'sum', 'diff', 'median', 'abs', 'mean', 'mean', 'median', 'abs', 'mean', 'sum', 'merge', 'merge', 'merge', 'merge', 'drop', 'add_prefix', 'apply', 'drop', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'drop', 'read_csv', 'pivot', 'corr', 'isin', 'agg', 'groupby', 'isin', 'agg', 'groupby', 'reset_index', 'concat', 'drop', 'reset_index', 'concat', 'concat', 'pivot', 'join', 'reset_index', 'pivot', 'join', 'reset_index', 'filter', 'join', 'merge', 'merge', 'fillna', 'mean', 'fillna', 'mean', 'merge', 'concat', 'unique', 'merge', 'unique', 'merge', 'replace', 'replace', 'drop', 'copy', 'drop', 'mean', 'mean', 'mean', 'nunique', 'transform', 'transform', 'filter', 'filter', 'mean', 'sort_values', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'numpy.matlib', 'matplotlib.gridspec', 'shutil', 'glob', 'torch', 'warnings', 'psutil'] ['MaxNLocator', 'stats', 'norm', 'Parallel', 'delayed', 'MinMaxScaler', 'LabelEncoder', 'StandardScaler', 'r2_score', 'KMeans', 'KFold', 'Metric', 'TabNetRegressor', 'Adam', 'SGD', 'ReduceLROnPlateau', 'CosineAnnealingWarmRestarts']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'read_parquet', 'unique', 'merge', 'pivot'], 'numpy': [], 'matplotlib': [], 'seaborn': [], 'scipy': ['mean', 'median', 'std'], 'joblib': [], 'shutil': ['copy'], 'glob': [], 'sklearn': [], 'pytorch_tabnet': [], 'torch': [], 'warnings': [], 'psutil': []} axis_0: 0, axis_1: 4
user-portraits.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'set_index', 'drop_duplicates', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'transform', 'transform', 'transform', 'reset_index', 'merge', 'merge', 'agg', 'groupby', 'merge', 'dropna', 'dropna', 'isin', 'unique', 'transform', 'transform', 'reset_index', 'merge', 'merge', 'agg', 'groupby', 'merge', 'dropna', 'dropna', 'transform'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'os'] ['LabelEncoder', 'csr_matrix', 'hstack', 'LogisticRegression', 'StratifiedKFold', 'log_loss']Dict:{'pandas': ['merge', 'unique', 'read_csv'], 'numpy': ['isin', 'unique'], 'seaborn': [], 'matplotlib': [], 'os': [], 'sklearn': [], 'scipy': []} axis_0: 0, axis_1: 0
jpx-all-data-xgbranker.py : ['ffill', 'read_csv', 'diff', 'concat', 'tail', 'fillna', 'ffill', 'read_parquet', 'diff', 'concat', 'ffill', 'read_parquet', 'ffill', 'read_parquet', 'astype', 'concat', 'head', 'merge', 'merge', 'to_parquet', 'read_parquet', 'to_parquet', 'to_datetime', 'min', 'max', 'to_datetime', 'to_datetime', 'count', 'groupby', 'replace', 'replace', 'replace', 'replace', 'astype', 'astype', 'sum', 'sort_values', 'mean', 'sum', 'sort_values', 'mean', 'apply', 'groupby', 'mean', 'std', 'astype', 'transform', 'groupby', 'apply', 'groupby', 'corr', 'groupby', 'reset_index', 'mean', 'mean', 'array', 'set_index', 'mean', 'sort_values', 'median', 'boxplot', 'sort_values', 'median', 'transpose', 'transpose', 'sum', 'groupby', 'boxplot', 'array', 'array'] ['jpx_tokyo_market_prediction', 'numpy', 'pandas', 'random', 'os', 'matplotlib.pyplot', 'seaborn', 'pickle', 'xgboost', 'warnings'] ['tqdm', 'datetime']Dict:{'jpx_tokyo_market_prediction': [], 'numpy': ['transpose', 'mean', 'median', 'max', 'sum', 'array', 'min', 'diff', 'std'], 'pandas': ['read_csv', 'concat', 'read_parquet', 'array', 'merge', 'to_datetime'], 'random': [], 'os': ['replace'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'tqdm': [], 'datetime': ['min', 'max', 'replace'], 'pickle': [], 'xgboost': [], 'warnings': []} axis_0: 6, axis_1: 3
nlp-glove-bert-tf-idf-lstm-explained.py : ['join', 'read_csv', 'dropna', 'head', 'apply', 'head', 'agg', 'groupby', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'apply', 'head', 'join', 'apply', 'head', 'join', 'apply', 'head', 'join', 'join', 'apply', 'head', 'transform', 'head', 'array', 'join', 'array', 'join', 'transform', 'transform', 'transform', 'items', 'get', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'astype', 'array', 'array', 'read_csv', 'read_csv', 'dropna', 'apply', 'head', 'agg', 'groupby', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'join', 'apply', 'apply', 'head', 'items', 'array', 'join', 'items', 'join', 'items', 'get'] ['numpy', 'pandas', 'os', 're', 'string', 'numpy', 'random', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'plotly.figure_factory', 'nltk', 'os', 'nltk', 'spacy', 'random', 'keras', 'plotly.figure_factory', 'xgboost', 'tensorflow', 'transformers', 'tensorflow'] ['graph_objs', 'Counter', 'Image', 'WordCloud', 'STOPWORDS', 'ImageColorGenerator', 'stopwords', 'word_tokenize', 'tqdm', 'compounding', 'minibatch', 'defaultdict', 'Counter', 'Sequential', 'Constant', 'LSTM', 'Embedding', 'BatchNormalization', 'Dense', 'TimeDistributed', 'Dropout', 'Bidirectional', 'Flatten', 'GlobalMaxPool1D', 'Tokenizer', 'pad_sequences', 'Embedding', 'ModelCheckpoint', 'ReduceLROnPlateau', 'Adam', 'precision_score', 'recall_score', 'f1_score', 'classification_report', 'accuracy_score', 'LabelEncoder', 'train_test_split', 'CountVectorizer', 'TfidfTransformer', 'MultinomialNB', 'metrics', 'TfidfTransformer', 'Pipeline', 'Dense', 'Input', 'Adam', 'Model', 'ModelCheckpoint', 'tqdm', 'BertWordPieceTokenizer', 'BertTokenizer', 'Adam', 'TFBertModel', 'train_test_split', 'metrics']Dict:{'numpy': ['array', 'add'], 'pandas': ['array', 'read_csv', 'value_counts'], 'os': [], 're': ['sub'], 'string': [], 'random': [], 'matplotlib': ['get'], 'seaborn': [], 'plotly': [], 'collections': ['items', 'get'], 'PIL': [], 'wordcloud': [], 'nltk': [], 'tqdm': [], 'spacy': [], 'keras': [], 'sklearn': [], 'xgboost': [], 'tensorflow': [], 'transformers': [], 'tokenizers': []} axis_0: 0, axis_1: 2
simple-exploration-baseline-santander-value.py : ['mode', 'read_csv', 'read_csv', 'head', 'reset_index', 'sum', 'isnull', 'sort_values', 'reset_index', 'reset_index', 'aggregate', 'groupby', 'reset_index', 'nunique', 'sort_values', 'array', 'corr', 'drop', 'drop', 'std', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'warnings'] ['TfidfVectorizer', 'CountVectorizer', 'TruncatedSVD', 'preprocessing', 'model_selection', 'metrics', 'check_output', 'spearmanr', 'ensemble']Dict:{'numpy': ['std', 'sum', 'array'], 'pandas': ['array', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'lightgbm': [], 'plotly': [], 'subprocess': [], 'scipy': [], 'warnings': [], '=': [], 'model': []} axis_0: 2, axis_1: 2
amex-feature-engineering-3-transform-functions.py : ['mean', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'astype', 'concat', 'transform', 'astype', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'astype', 'concat', 'transform', 'groupby', 'astype', 'astype', 'concat', 'read_csv', 'agg', 'groupby', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'concat', 'to_pickle', 'to_pickle', 'describe', 'to_pickle', 'describe', 'to_pickle', 'describe', 'to_pickle', 'describe', 'concat', 'read_pickle', 'read_pickle', 'to_pickle'] ['numpy', 'pandas', 'warnings', 'gc'] []Dict:{'numpy': ['mean'], 'pandas': ['to_pickle', 'concat', 'read_pickle', 'read_csv'], 'warnings': [], 'gc': []} axis_0: 0, axis_1: 4
titanic-survived-prediction.py : ['read_csv', 'read_csv', 'head', 'head', 'drop', 'concat', 'head', 'head', 'tail', 'info', 'any', 'isnull', 'sort_values', 'sum', 'isnull', 'describe', 'nunique', 'nunique', 'value_counts', 'value_counts', 'describe', 'boxplot', 'corr', 'abs', 'where', 'astype', 'astype', 'notnull', 'apply', 'apply', 'drop', 'fillna', 'transform', 'groupby', 'apply', 'unique', 'fillna', 'mode', 'apply', 'value_counts', 'apply', 'drop', 'nunique', 'get_dummies', 'nunique', 'head', 'head', 'concat', 'drop', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'sort_values', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'sort_values', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'sort_values', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'sort_values', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'drop', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'plotly.express', 'warnings'] ['pyplot', 'LogisticRegression', 'DecisionTreeClassifier', 'accuracy_score', 'classification_report', 'roc_auc_score', 'confusion_matrix', 'classification_report', 'plot_roc_curve', 'train_test_split', 'cross_validate', 'validation_curve', 'GridSearchCV', 'LabelEncoder', 'RobustScaler', 'RandomForestClassifier', 'AdaBoostClassifier', 'KNeighborsClassifier', 'LazyClassifier', 'LGBMClassifier', 'InteractiveShell']Dict:{'numpy': ['mean', 'any', 'abs', 'sum', 'where', 'unique', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull'], 'seaborn': ['boxplot'], 'matplotlib': [], 'plotly': [], 'warnings': [], 'sklearn': [], 'lazypredict': [], 'lightgbm': [], 'IPython': []} axis_0: 1, axis_1: 5
zillow-revamped-with-memory-reduction.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'merge', 'head', 'unique', 'unique', 'nunique', 'nunique', 'any', 'isnull', 'any', 'isnull', 'value_counts', 'value_counts', 'nunique', 'nunique', 'nunique', 'unique', 'nunique', 'unique', 'nunique', 'unique', 'nunique', 'unique', 'nunique', 'unique', 'nunique', 'fillna', 'fillna', 'fillna', 'astype', 'astype', 'replace', 'astype', 'to_datetime', 'astype', 'astype', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'sum', 'isnull', 'fillna', 'sum', 'isnull', 'describe', 'select_dtypes', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'fillna', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'unique', 'value_counts', 'fillna', 'mode', 'sum', 'isnull', 'corr', 'nunique', 'nunique', 'unique', 'sort_values', 'fillna', 'sum', 'isnull', 'fillna', 'where', 'where', 'drop', 'where', 'where', 'where', 'astype', 'astype', 'astype', 'apply', 'apply', 'to_dict', 'value_counts', 'map', 'to_dict', 'value_counts', 'map', 'to_dict', 'value_counts', 'map', 'head', 'describe', 'describe', 'hist', 'corr', 'unique', 'sum', 'memory_usage', 'memory_usage', 'max', 'min', 'astype', 'sum', 'memory_usage', 'astype', 'sum', 'memory_usage', 'astype', 'astype', 'astype', 'sum', 'memory_usage'] ['numpy', 'pandas', 'seaborn', 'seaborn', 'matplotlib.pyplot', 'math'] ['pyplot']Dict:{'numpy': ['any', 'max', 'sum', 'where', 'min', 'unique'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'unique', 'merge', 'to_datetime'], 'seaborn': [], 'matplotlib': ['hist'], 'math': []} axis_0: 0, axis_1: 1
uwmgit-show-image-unet-train.py : ['read_csv', 'where', 'join', 'astype', 'astype', 'astype', 'astype', 'astype', 'read_csv', 'merge', 'notnull', 'reset_index', 'apply', 'groupby', 'apply', 'groupby', 'unique', 'merge', 'merge', 'merge', 'drop', 'rename', 'astype', 'min', 'max', 'min', 'astype', 'apply', 'keys', 'stack', 'keys', 'stack', 'keys', 'stack', 'keys', 'stack', 'keys', 'stack', 'keys', 'stack', 'transform'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'cv2'] ['glob', 'Rectangle', 'Dataset', 'read_image', 'ToTensor']Dict:{'numpy': ['stack', 'max', 'where', 'min', 'unique'], 'pandas': ['notnull', 'merge', 'unique', 'read_csv'], 'os': ['rename'], 'matplotlib': [], 'glob': [], 'cv2': [], 'torch': [], 'torchvision': []} axis_0: 0, axis_1: 0
voting-classifier-for-victory.py : ['read_csv', 'head', 'read_csv', 'read_csv', 'map', 'map', 'head', 'mode', 'astype', 'to_csv'] ['numpy', 'pandas'] ['ensemble', 'LGBMClassifier', 'XGBClassifier', 'SGDClassifier']Dict:{'numpy': [], 'pandas': ['read_csv'], 'sklearn': [], 'lightgbm': [], 'xgboost': []} axis_0: 0, axis_1: 1
taxi-fare-prediction-with-keras-deep-learning.py : ['abs', 'abs', 'to_datetime', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'to_csv', 'read_csv', 'read_csv', 'head', 'drop', 'drop', 'head', 'drop', 'drop', 'transform', 'transform', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add'] ['numpy', 'pandas', 'matplotlib.pyplot'] ['datetime', 'preprocessing', 'train_test_split', 'Sequential', 'Dense', 'Dropout', 'BatchNormalization', 'EarlyStopping', 'optimizers', 'regularizers']Dict:{'numpy': ['abs', 'add'], 'pandas': ['to_datetime', 'read_csv'], 'datetime': [], 'matplotlib': [], 'sklearn': [], 'keras': []} axis_0: 0, axis_1: 7
vowpal-wabbit-best-text-classification-fe.py : ['sum', 'isnull', 'fillna', 'fillna', 'mean', 'read_csv', 'sum', 'isna', 'head', 'read_csv', 'sum', 'isna', 'head', 'value_counts', 'value_counts', 'array', 'join', 'items', 'head', 'head', 'items', 'head', 'head', 'update', 'items', 'head', 'head', 'items', 'head', 'head', 'update', 'items', 'head', 'head', 'items', 'head', 'head', 'update', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'mean', 'apply', 'mean', 'join', 'head', 'apply', 'apply', 'sum', 'head', 'array', 'max', 'apply', 'apply', 'array', 'read_csv', 'astype', 'to_csv'] ['numpy', 'pandas', 'plotly.offline', 'plotly.graph_objs', 'sklearn.metrics', 'plotly.tools', 'warnings', 'os', 'pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'plotly.figure_factory', 'random', 'string'] ['pyvw', 'preprocessing', 'WordCloud', 'STOPWORDS', 'Image', 'defaultdict', 'train_test_split']Dict:{'numpy': ['mean', 'array', 'sum', 'max'], 'pandas': ['isna', 'read_csv', 'isnull', 'value_counts', 'array'], 'plotly': [], 'vowpalwabbit': [], 'sklearn': [], 'gensim': [], 'warnings': [], 'os': [], 'matplotlib': [], 'seaborn': [], 'random': [], 'wordcloud': [], 'PIL': [], 'collections': ['items', 'update'], 'string': []} axis_0: 0, axis_1: 0
training-an-xgboost-ranker-on-the-gpu.py : ['read_parquet', 'read_parquet', 'count', 'apply', 'explode', 'apply', 'join', 'read_parquet', 'transform', 'agg', 'groupby', 'to_numpy', 'to_numpy', 'join'] ['polars', 'xgboost'] ['*', 'Tags', 'Distributed', 'XGBoost', 'AddTags']Dict:{'nvtabular': [], 'merlin': [], 'polars': ['read_parquet', 'count', 'apply'], 'xgboost': []} axis_0: 0, axis_1: 0
getting-started-eda-preprocessing.py : ['read_csv', 'head', 'describe', 'describe', 'hist', 'value_counts', 'corr', 'read_csv', 'drop', 'array', 'min', 'max'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'numpy'] ['ascii_uppercase']Dict:{'pandas': ['array', 'read_csv', 'value_counts'], 'matplotlib': ['hist'], 'seaborn': [], 'numpy': ['array', 'min', 'max'], 'string': []} axis_0: 0, axis_1: 4
xgboost-5000-mutations-200-pdb-files-lb-0-410.py : ['read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'astype', 'astype', 'astype', 'transform', 'groupby', 'transform', 'groupby', 'sort_values', 'agg', 'groupby', 'isin', 'apply', 'transform', 'groupby', 'rename', 'read_csv', 'unique', 'map', 'reset_index', 'notnull', 'to_csv', 'head', 'copy', 'isin', 'rename', 'rename', 'concat', 'to_csv', 'isin', 'reset_index', 'sort_values', 'head', 'nunique', 'unique', 'unique', 'join', 'set_index', 'read_csv', 'head', 'update', 'items', 'keys', 'read_csv', 'items', 'items', 'eval', 'unique', 'mean', 'unique', 'stack', 'astype', 'astype', 'reset_index', 'reset_index', 'reset_index', 'transform', 'mean', 'transform', 'map', 'mean', 'map', 'mean', 'map', 'mean', 'isin', 'isin', 'isin', 'array', 'mean', 'mean', 'mean', 'array', 'mean', 'mean', 'mean', 'array', 'mean', 'mean', 'mean', 'dot', 'dot', 'dot', 'isin', 'array', 'mean', 'mean', 'mean', 'isin', 'array', 'mean', 'mean', 'mean', 'dot', 'transform', 'read_csv', 'iterrows', 'rename', 'rename', 'rename', 'sort_values', 'drop_duplicates', 'reset_index', 'sum', 'diff', 'map', 'join', 'to_csv', 'head', 'reset_index', 'transform', 'groupby', 'reset_index', 'drop', 'unique', 'sum', 'isna', 'head', 'reset_index', 'isin', 'reset_index', 'isin', 'factorize', 'factorize', 'copy', 'merge', 'mean', 'sort_values', 'copy', 'merge', 'mean', 'sort_values', 'unique', 'reset_index', 'sum', 'isna', 'abs', 'unique', 'reset_index', 'sum', 'isna', 'abs', 'read_csv', 'head', 'head', 'apply', 'rename', 'iterrows', 'head', 'hist', 'read_csv', 'isin', 'mean', 'isin', 'to_csv', 'head'] ['os', 'numpy', 'gc', 'seaborn', 'matplotlib.pyplot', 'pandas', 'py3Dmol', 'torch', 'esm', 'xgboost'] ['spearmanr', 'pearsonr', 'rankdata', 'PandasPdb', 'PandasMmcif', 'MatrixInfo', 'softmax', 'entropy', 'PCA', 'GroupKFold', 'mean_squared_error']Dict:{'os,': [], 'numpy': ['mean', 'stack', 'abs', 'sum', 'unique', 'dot', 'isin', 'diff', 'array', 'copy'], 'scipy': [], 'matplotlib': ['hist'], 'pandas': ['isna', 'read_csv', 'eval', 'concat', 'factorize', 'unique', 'notnull', 'array', 'merge'], 'py3Dmol': [], '': [], 'biopandas': [], 'Bio': [], 'torch,': [], 'esm': [], 'cuml': [], 'sklearn': [], 'xgboost': []} axis_0: 3, axis_1: 13
tps-april-2021-models-feature-enginering.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'where', 'sum', 'read_csv', 'read_csv', 'concat', 'drop', 'drop', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'drop', 'where', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'drop', 'where', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'concat', 'rename', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'concat', 'rename', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'concat', 'rename', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'concat', 'rename', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'concat', 'rename', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'concat', 'rename', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'concat', 'rename', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'concat', 'rename', 'astype', 'astype', 'astype', 'drop', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'drop', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'drop', 'replace', 'replace', 'fillna', 'replace', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'drop', 'replace', 'replace', 'fillna', 'replace', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'drop', 'replace', 'replace', 'fillna', 'replace', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'cut', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'astype', 'cut', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'astype', 'cut', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'cut', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'cut', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'cut', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'cut', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'cut', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'cut', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'cut', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'cut', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'cut', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'cut', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'cut', 'drop', 'concat', 'rename', 'replace', 'replace', 'fillna', 'replace', 'astype', 'fillna', 'cut', 'fillna', 'fillna', 'fillna', 'mean', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'where', 'sum', 'drop', 'where', 'sum', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'where', 'sum', 'concat', 'fillna', 'fillna', 'fillna', 'mean', 'replace', 'replace', 'fillna', 'replace', 'astype', 'fillna', 'cut', 'drop', 'drop', 'where', 'where', 'array', 'max', 'where', 'where', 'where', 'sum', 'to_csv'] ['numpy', 'pandas'] ['accuracy_score', 'LabelEncoder', 'OneHotEncoder', 'StratifiedKFold', 'VotingClassifier', 'LogisticRegression', 'CatBoostClassifier', 'XGBClassifier', 'LGBMClassifier']Dict:{'numpy': ['mean', 'max', 'sum', 'where', 'array'], 'pandas': ['concat', 'array', 'cut', 'read_csv'], 'sklearn': [], 'catboost': [], 'xgboost': [], 'lightgbm': []} axis_0: 3, axis_1: 68
costa-rica-poverty-exploration-kernel.py : ['read_csv', 'read_csv', 'head', 'describe', 'sum', 'isnull', 'sort_values', 'head', 'value_counts', 'to_dict', 'value_counts', 'to_dict', 'value_counts', 'to_dict', 'value_counts', 'to_dict', 'value_counts', 'update', 'apply', 'apply', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'update', 'apply', 'apply', 'apply', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'update', 'update', 'update', 'apply', 'apply', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'update', 'update', 'update', 'update', 'update', 'apply', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'apply', 'crosstab', 'crosstab', 'read_csv', 'read_csv', 'array', 'transform', 'astype', 'transform', 'astype', '_get_numeric_data', 'items', 'to_csv', 'head'] ['plotly.graph_objs', 'plotly.plotly', 'pandas', 'numpy', 'plotly.figure_factory', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'random', 'warnings', 'operator'] ['init_notebook_mode', 'iplot', 'tools', 'date', 'train_test_split', 'LabelEncoder']Dict:{'plotly': [], 'datetime': [], 'pandas': ['read_csv', 'isnull', 'value_counts', 'array', 'crosstab'], 'numpy': ['array', 'sum'], 'sklearn': ['transform'], 'lightgbm': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'random': [], '': [], 'warnings': [], 'operator': []} axis_0: 0, axis_1: 5
time-series-forecasting-eda-fe-modelling.py : ['read_csv', 'read_csv', 'read_csv', 'astype', 'round', 'sum', 'memory_usage', 'round', 'sum', 'memory_usage', 'round', 'sum', 'memory_usage', 'min', 'min', 'max', 'max', 'astype', 'min', 'min', 'max', 'max', 'astype', 'min', 'min', 'max', 'max', 'astype', 'astype', 'min', 'min', 'max', 'max', 'astype', 'min', 'min', 'max', 'max', 'astype', 'astype', 'to_datetime', 'astype', 'round', 'sum', 'memory_usage', 'round', 'sum', 'memory_usage', 'round', 'sum', 'memory_usage', 'melt', 'sort_values', 'dropna', 'melt', 'merge', 'merge', 'dropna', 'count', 'groupby', 'rename', 'dropna', 'mean', 'groupby', 'dropna', 'mean', 'groupby', 'dropna', 'sum', 'groupby', 'unique', 'unique', 'unique', 'astype', 'date_range', 'min', 'max', 'set_index', 'reindex', 'reset_index', 'rename', 'sum', 'groupby', 'sum', 'groupby', 'copy', 'unique', 'astype', 'apply', 'drop', 'astype', 'shift', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'mean', 'rolling', 'astype', 'transform', 'groupby', 'mean', 'expanding', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'drop', 'info', 'to_pickle', 'read_pickle', 'unique', 'drop', 'drop', 'drop', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'read_csv', 'reset_index', 'pivot', 'replace', 'map', 'reset_index', 'pivot', 'map', 'reset_index', 'concat', 'to_csv'] ['os', 'pandas', 'numpy', 'plotly_express', 'plotly.graph_objects', 'matplotlib.pyplot', 'seaborn', 'gc', 'warnings', 'joblib'] ['make_subplots', 'LGBMRegressor']Dict:{'os': ['rename', 'replace'], 'pandas': ['to_pickle', 'to_datetime', 'read_csv', 'date_range', 'melt', 'concat', 'read_pickle', 'unique', 'merge', 'pivot'], 'numpy': ['mean', 'max', 'sum', 'round', 'min', 'unique', 'isin', 'info', 'copy'], 'plotly_express': [], 'plotly': [], 'matplotlib': [], 'seaborn': [], 'gc': [], 'warnings': [], 'lightgbm': [], 'joblib': []} axis_0: 1, axis_1: 5
titanic-hey-machine-tell-me-everything.py : ['join', 'read_csv', 'copy', 'read_csv', 'read_csv', 'concat', 'notnull', 'copy', 'head', 'drop', 'sort_values', 'head', 'info', 'value_counts', 'value_counts', 'drop', 'sum', 'isnull', 'sort_values', 'sort_values', 'astype', 'isnull', 'count', 'fillna', 'get', 'apply', 'replace', 'replace', 'replace', 'replace', 'unique', 'unique', 'mean', 'mean', 'mean', 'std', 'skew', 'mean', 'mean', 'mean', 'std', 'skew', 'qcut', 'replace', 'astype', 'isnull', 'mean', 'mean', 'get_dummies', 'round', 'corr', 'sort_values', 'drop', 'round', 'corr', 'sort_values', 'notnull', 'drop', 'drop', 'update', 'boxplot', 'drop', 'astype', 'apply', 'select_dtypes', 'select_dtypes', 'drop', 'astype', 'to_csv'] ['numpy', 'pandas', 'os', 'pycaret', 'missingno', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'umap', 'umap.plot', 'plotly.express', 'plotly.graph_objects', 'scipy.stats', 'warnings', 'missingno', 're'] ['rcParams', 'accuracy_score', 'precision_score', 'recall_score', 'roc_auc_score', 'f1_score', 'confusion_matrix', 'precision_recall_curve', 'roc_curve', 'ConfusionMatrixDisplay', 'classification_report', 'log_loss', 'preprocessing', 'KNNImputer', 'RobustScaler', 'train_test_split', 'make_subplots', '*', 'SimpleImputer', 'QuantileTransformer', 'SimpleImputer', 'RandomForestClassifier', 'plot_partial_dependence', 'GradientBoostingClassifier', 'permutation_importance', '*', '*', '*']Dict:{'numpy': ['mean', 'sum', 'round', 'unique', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull', 'qcut'], 'os': ['replace'], 'matplotlib': ['update', 'get', 'copy'], 'seaborn': ['boxplot'], 'sklearn': [], 'umap': [], 'plotly': [], 'scipy': ['skew'], 'warnings': [], 'pycaret': [], 'missingno': [], 're': [], 'fastai': []} axis_0: 0, axis_1: 8
it-s-that-time-of-the-year-again.py : ['concat', 'read_csv', 'read_csv', 'head', 'concat', 'read_csv', 'read_csv', 'drop', 'head', 'count', 'groupby', 'rename', 'reset_index', 'count', 'groupby', 'rename', 'reset_index', 'reset_index', 'mean', 'groupby', 'rename', 'reset_index', 'mean', 'groupby', 'rename', 'rename', 'reset_index', 'count', 'groupby', 'rename', 'reset_index', 'count', 'groupby', 'reset_index', 'sort_values', 'drop_duplicates', 'concat', 'merge', 'merge', 'merge', 'merge', 'fillna', 'drop', 'concat', 'read_csv', 'read_csv', 'drop', 'copy', 'reset_index', 'head', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'sub', 'apply', 'apply', 'head', 'drop', 'rename', 'merge', 'drop', 'rename', 'merge', 'head', 'update', 'update', 'update', 'update', 'copy', 'copy', 'rename', 'rename', 'concat', 'head', 'read_csv', 'apply', 'apply', 'apply', 'head', 'fillna', 'rename', 'drop', 'merge', 'fillna', 'rename', 'drop', 'merge', 'apply', 'apply', 'drop', 'rename', 'merge', 'drop', 'rename', 'merge', 'astype', 'min', 'max', 'unique', 'copy', 'reset_index', 'copy', 'reset_index', 'copy', 'min', 'max', 'min', 'min', 'max', 'min', 'clip', 'mean', 'mean', 'mean', 'copy', 'to_csv', 'head'] ['os', 're', 'sklearn', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] ['Counter', '*', '*', '*']Dict:{'os': ['rename'], 're': ['sub'], 'sklearn': [], 'numpy': ['mean', 'max', 'min', 'unique', 'clip', 'copy'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'collections': ['update', 'copy']} axis_0: 2, axis_1: 16
getting-started-modeling.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'head', 'head', 'head', 'mean', 'rolling', 'reset_index', 'mean', 'rolling', 'groupby', 'sort_values', 'drop', 'reset_index', 'mean', 'rolling', 'groupby', 'sort_values', 'drop', 'head', 'merge', 'sort_values', 'merge', 'sort_values', 'head', 'fillna', 'drop', 'head', 'copy', 'sort_values', 'head', 'tail', 'describe', 'sort_values', 'set_index', 'sort_values', 'fillna', 'drop', 'head', 'to_csv'] ['pandas', 'numpy', 'random', 'os', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['tqdm', 'RandomForestRegressor', 'train_test_split', 'mean_squared_error']Dict:{'pandas': ['merge', 'read_csv'], 'numpy': ['mean', 'copy'], 'random': [], 'os': [], 'tqdm': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 0
titanic-best-working-classifier-with-tabpfn.py : ['read_csv', 'read_csv', 'info', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'fillna', 'mean', 'groupby', 'fillna', 'median', 'qcut', 'mean', 'groupby', 'mean', 'std', 'sum', 'isnull', 'astype', 'cut', 'mean', 'groupby', 'apply', 'crosstab', 'replace', 'replace', 'replace', 'replace', 'mean', 'groupby', 'astype', 'map', 'map', 'fillna', 'astype', 'map', 'astype', 'drop', 'drop', 'drop', 'head'] ['numpy', 'pandas', 're', 'matplotlib.pyplot', 'seaborn'] ['accuracy_score', 'load_breast_cancer', 'train_test_split', 'TabPFNClassifier', 'TabPFNClassifier', 'StratifiedShuffleSplit', 'accuracy_score', 'log_loss', 'KNeighborsClassifier', 'SVC', 'DecisionTreeClassifier', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'GaussianNB', 'LinearDiscriminantAnalysis', 'QuadraticDiscriminantAnalysis', 'LogisticRegression', 'XGBClassifier', 'LGBMClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'info', 'std'], 'pandas': ['read_csv', 'isnull', 'cut', 'qcut', 'crosstab'], 're': [], 'sklearn': [], 'tabpfn': [], 'matplotlib': [], 'seaborn': [], 'xgboost': ['apply'], 'lightgbm': []} axis_0: 0, axis_1: 0
spaceship-titanic-plotly-viz-fe-models.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'sum', 'isna', 'round', 'sum', 'isna', 'sum', 'isna', 'sort_values', 'isna', 'round', 'isna', 'round', 'isna', 'round', 'round', 'update', 'min', 'max', 'mean', 'min', 'max', 'mean', 'astype', 'fillna', 'mode', 'astype', 'fillna', 'mode', 'sort_values', 'sort_values', 'astype', 'fillna', 'mode', 'astype', 'fillna', 'mode', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'drop', 'corr', 'bool', 'mask', 'crosstab', 'sum', 'sum', 'array', 'bool', 'mask', 'drop', 'read_csv', 'read_csv', 'drop', 'drop', 'transform', 'transform', 'transform', 'transform', 'cut', 'drop', 'drop', 'drop', 'drop', 'mean', 'std', 'drop', 'head', 'astype', 'to_csv', 'head', 'pop', 'replace', 'astype', 'to_csv', 'head', 'replace', 'astype', 'to_csv', 'head'] ['matplotlib.pyplot', 'numpy', 'pandas', 'torch', 'seaborn', 'plotly.io', 'plotly.express', 'plotly.figure_factory', 'plotly.graph_objects', 'optuna', 'warnings', 'os', 'h2o', 'eli5', 'shap'] ['stats', 'colored', 'LabelEncoder', 'Fore', 'Back', 'Style', 'XGBClassifier', 'LGBMClassifier', 'accuracy_score', 'StratifiedKFold', 'KFold', 'make_subplots', 'init_notebook_mode', 'iplot', 'SimpleImputer', 'H2OAutoML', 'train_test_split', 'train_test_split', 'PermutationImportance']Dict:{'matplotlib': [], 'numpy': ['mean', 'max', 'sum', 'array', 'round', 'min', 'std'], 'pandas': ['isna', 'read_csv', 'cut', 'array', 'crosstab'], 'scipy': ['mode'], 'torch': ['mean', 'max', 'sum', 'round', 'mode', 'min', 'std', 'bool'], 'seaborn': [], 'termcolor': [], 'plotly': [], 'sklearn': [], 'colorama': [], 'xgboost': [], 'lightgbm': [], 'optuna': [], 'warnings': [], 'os': ['replace'], 'h2o': [], 'eli5': [], 'shap': []} axis_0: 2, axis_1: 11
using-decision-trees-for-arc.py : ['replace', 'replace', 'replace', 'replace', 'read_csv', 'set_index', 'head', 'unique', 'unique', 'unique', 'array', 'array', 'array', 'array', 'array', 'sum', 'array', 'sum', 'array', 'astype', 'head', 'describe', 'sum', 'to_csv', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'json', 'matplotlib.pyplot', 'numpy', 'pdb'] ['Path', 'colors', 'XGBClassifier']Dict:{'numpy': ['array', 'sum', 'unique'], 'pandas': ['array', 'unique', 'read_csv'], 'os': ['replace'], 'json': [], 'pathlib': ['replace'], 'matplotlib': [], 'xgboost': [], 'pdb': []} axis_0: 0, axis_1: 0
titanic-boosting-algorithm-and-other-model.py : ['read_csv', 'info', 'read_csv', 'info', 'copy', 'copy', 'concat', 'describe', 'copy', 'reset_index', 'value_counts', 'qcut', 'value_counts', 'sort_index', 'value_counts', 'value_counts', 'count', 'groupby', 'sum', 'mean', 'std', 'mean', 'mean', 'std', 'std', 'crosstab', 'div', 'sum', 'crosstab', 'div', 'sum', 'crosstab', 'div', 'sum', 'crosstab', 'div', 'sum', 'query', 'unique', 'astype', 'round', 'unique', 'unique', 'query', 'reset_index', 'min', 'max', 'copy', 'reset_index', 'drop', 'fillna', 'mean', 'astype', 'var', 'sum', 'isnull', 'sum', 'isnull', 'reset_index', 'where', 'replace', 'apply', 'astype', 'duplicated', 'map', 'cut', 'unique', 'sum', 'groupby', 'drop', 'replace', 'fillna', 'astype', 'replace', 'get', 'get', 'isin', 'get_dummies', 'reset_index', 'get_dummies', 'join', 'drop', 'sum', 'fillna', 'mean', 'fillna', 'mean', 'astype', 'round', 'astype', 'where', 'abs', 'quantile', 'drop', 'drop', 'drop', 'drop', 'to_numpy', 'drop', 'transform', 'cumsum', 'transform', 'head', 'head', 'transform', 'astype'] ['matplotlib', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn', 'datetime', 'warnings'] ['FixedLocator', 'FixedFormatter', 'ConnectionPatch', 'expon', 'reciprocal', 'randint', 'stats', 'scatter_matrix', 'TSNE', 'LocallyLinearEmbedding', 'PCA', 'KernelPCA', 'KMeans', 'SpectralClustering', 'DBSCAN', 'AgglomerativeClustering', 'FeatureAgglomeration', 'AffinityPropagation', 'BayesianGaussianMixture', 'GaussianMixture', 'silhouette_score', 'silhouette_samples', 'mean_squared_error', 'accuracy_score', 'r2_score', 'classification_report', 'ConfusionMatrixDisplay', 'confusion_matrix', 'precision_score', 'recall_score', 'precision_recall_curve', 'f1_score', 'roc_curve', 'roc_auc_score', 'XGBClassifier', 'LinearDiscriminantAnalysis', 'RandomizedSearchCV', 'GridSearchCV', 'StratifiedShuffleSplit', 'cross_val_score', 'cross_val_predict', 'train_test_split', 'StratifiedKFold', 'permutation_test_score', 'RepeatedStratifiedKFold', 'LogisticRegression', 'RidgeClassifier', 'Pipeline', 'ColumnTransformer', 'StandardScaler', 'OneHotEncoder', 'PolynomialFeatures', 'QuantileTransformer', 'LabelEncoder', 'DecisionTreeClassifier', 'RandomForestClassifier', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'ExtraTreesClassifier', 'VotingClassifier', 'SVC', 'KNeighborsClassifier', 'BaseEstimator', 'TransformerMixin', 'ConvergenceWarning', 'KElbowVisualizer', 'simplefilter', 'linkage', 'dendrogram', 'leaves_list']Dict:{'matplotlib': [], 'numpy': ['mean', 'quantile', 'max', 'var', 'abs', 'sum', 'where', 'round', 'min', 'unique', 'isin', 'info', 'std', 'cumsum', 'copy'], 'pandas': [], 'seaborn': [], 'datetime': [], 'warnings': [], 'scipy': [], 'sklearn': [], 'xgboost': ['apply'], 'yellowbrick': [], '': []} axis_0: 6, axis_1: 8
hypothesis-and-visualization-for-titanic-in-kaggle.py : ['read_csv', 'read_csv', 'replace', 'replace', 'fillna', 'astype', 'map', 'fillna', 'mean', 'qcut', 'mean', 'std', 'fillna', 'cut', 'apply', 'replace', 'replace', 'map', 'fillna', 'drop', 'drop', 'head', 'drop', 'copy', 'transform', 'read_csv', 'to_csv', 'drop', 'copy', 'transform', 'read_csv', 'to_csv', 'drop', 'copy', 'transform', 'read_csv', 'to_csv'] ['numpy', 'pandas', 're', 'matplotlib.pyplot', 'seaborn'] ['StandardScaler', 'GridSearchCV', 'KNeighborsClassifier']Dict:{'numpy': ['mean', 'std', 'copy'], 'pandas': ['qcut', 'cut', 'read_csv'], 're': [], 'sklearn': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 0
advanced-time-series-analysis-decomposition.py : ['read_csv', 'read_csv', 'dropna', 'dropna', 'dropna', 'head', 'div', 'mul', 'div', 'corr', 'dropna', 'corr', 'dropna', 'corr', 'mul', 'div', 'shift', 'shift', 'shift', 'head'] ['warnings', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn', 'statsmodels.api'] ['rcParams', 'rcParams', 'tsaplots']Dict:{'warnings': [], 'matplotlib': [], 'numpy': [], 'pandas': ['read_csv'], 'seaborn': [], 'statsmodels': []} axis_0: 0, axis_1: 0
tuned-debertav3-lgbm-autocorrect.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'join', 'get', 'count', 'update', 'apply', 'apply', 'apply', 'apply', 'apply', 'merge', 'drop', 'head', 'head', 'mean', 'mean', 'update', 'map', 'map', 'join', 'map', 'eval', 'join', 'mean', 'head', 'drop', 'drop', 'drop', 'drop', 'mean', 'to_csv'] ['numpy', 'pandas', 'warnings', 'logging', 'os', 'shutil', 'json', 'transformers', 'torch', 'nltk', 'spacy', 're', 'lightgbm', 'random', 'os', 'numpy', 'torch'] ['List', 'AutoModel', 'AutoTokenizer', 'AutoConfig', 'AutoModelForSequenceClassification', 'DataCollatorWithPadding', 'Dataset', 'load_dataset', 'load_from_disk', 'TrainingArguments', 'Trainer', 'load_metric', 'disable_progress_bar', 'mean_squared_error', 'KFold', 'GroupKFold', 'tqdm', 'stopwords', 'word_tokenize', 'TreebankWordDetokenizer', 'Counter', 'Speller', 'SpellChecker']Dict:{'typing': ['count'], 'numpy': ['mean'], 'pandas': ['eval', 'merge', 'read_csv'], 'warnings': [], 'logging': [], 'os': [], 'shutil': [], 'json': [], 'transformers': [], 'datasets': [], 'sklearn': [], 'torch': ['mean'], 'tqdm': ['update'], 'nltk': [], 'collections': ['update', 'get'], 'spacy': [], 're': [], 'autocorrect': [], 'spellchecker': [], 'lightgbm': []} axis_0: 1, axis_1: 6
icr-2023-single-lgbm-0-12-cv-0-16-lb.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'fillna', 'median', 'fillna', 'median', 'head', 'select_dtypes', 'sum', 'sum', 'clip', 'sum', 'sum', 'sum', 'sum', 'clip', 'sum', 'sum', 'map', 'map', 'copy', 'copy', 'select_dtypes', 'transform', 'value_counts', 'groupby', 'drop', 'drop', 'drop', 'update', 'mean', 'std', 'mean', 'std', 'reset_index', 'to_csv', 'update', 'reset_index', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'math', 'warnings'] ['tqdm', 'log_loss', 'make_scorer', 'MinMaxScaler', 'StandardScaler', 'KFold', 'StratifiedKFold', 'StratifiedGroupKFold', 'LGBMClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'clip', 'std', 'copy'], 'pandas': ['read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'tqdm': ['update'], 'math': [], 'sklearn': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 3
patterns-of-missing-data.py : ['read_csv', 'sample', 'sum', 'isnull', 'mean', 'mean', 'crosstab'] ['numpy', 'pandas', 'missingno'] ['chi2_contingency']Dict:{'numpy': ['mean', 'sum'], 'pandas': ['crosstab', 'read_csv', 'isnull'], 'missingno': [], 'scipy': []} axis_0: 0, axis_1: 1
house-prices-feature-engineering-lb-0-11775.py : ['read_csv', 'read_csv', 'drop', 'drop', 'head', 'head', 'sort_values', 'sum', 'isnull', 'describe', 'value_counts', 'mean', 'groupby', 'describe', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'isnull', 'isnull', 'isnull', 'isnull', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'pop', 'head', 'sort_values', 'sum', 'isnull', 'head', 'sort_values', 'sum', 'isnull', 'dropna', 'dropna', 'drop', 'drop', 'unique', 'unique', 'get_dummies', 'get_dummies', 'sort_values', 'apply', 'dropna', 'head', 'copy', 'copy', 'replace', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'lightgbm', 'xgboost', 'seaborn', 'matplotlib.pyplot', 'warnings'] ['cross_val_score', 'mean_squared_error', 'skew', 'Ridge', 'ElasticNet', 'Lasso', 'KernelRidge', 'GradientBoostingRegressor', 'CatBoostRegressor']Dict:{'numpy': ['mean', 'sum', 'unique', 'copy'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'unique'], 'sklearn': ['apply'], 'scipy': [], 'catboost': [], 'lightgbm': [], 'xgboost': [], 'seaborn': [], 'matplotlib': [], 'warnings': []} axis_0: 0, axis_1: 6
automated-feature-engineering-for-titanic-dataset.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'fillna', 'mean', 'apply', 'replace', 'drop', 'median', 'groupby', 'isnull', 'sum', 'isnull', 'mode', 'dropna', 'fillna', 'astype', 'map', 'astype', 'map', 'fillna', 'info', 'drop', 'head', 'head', 'head', 'abs', 'corr', 'where', 'astype', 'bool', 'head', 'drop', 'all', 'ge', 'transform', 'to_csv'] ['pandas', 'featuretools', 'seaborn', 'matplotlib.pyplot', 'warnings', 'os'] ['*', 'Numeric', 'LinearSVC', 'SelectFromModel', 'RandomForestClassifier']Dict:{'pandas': ['read_csv', 'isnull'], 'featuretools': [], 'sklearn': ['apply'], 'seaborn': [], 'matplotlib': [], 'warnings': [], 'os': ['replace']} axis_0: 0, axis_1: 4
optiver-robust-best-single-model.py : ['read_csv', 'dropna', 'reset_index', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'info', 'sum', 'memory_usage', 'info', 'info', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'map', 'pct_change', 'groupby', 'diff', 'groupby', 'diff', 'groupby', 'apply', 'diff', 'agg', 'agg', 'shift', 'groupby', 'pct_change', 'groupby', 'diff', 'groupby', 'replace', 'items', 'map', 'to_dict', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'copy', 'round', 'sum', 'sum', 'concat', 'reset_index', 'sort_values', 'tail', 'groupby', 'mean', 'clip', 'mean', 'mean', 'round'] ['gc', 'os', 'time', 'warnings', 'joblib', 'lightgbm', 'numpy', 'pandas', 'optiver2023'] ['combinations', 'simplefilter', 'mean_absolute_error', 'KFold', 'TimeSeriesSplit', 'njit', 'prange']Dict:{'gc': [], 'os': ['replace'], 'time': [], 'warnings': [], 'itertools': [], 'joblib': [], 'lightgbm': [], 'numpy': ['mean', 'median', 'max', 'diff', 'sum', 'round', 'min', 'clip', 'info', 'std', 'copy'], 'pandas': ['concat', 'eval', 'read_csv'], 'sklearn': [], 'numba': []} axis_0: 1, axis_1: 2
top-1-house-pricing-project-regression-models.py : ['read_csv', 'read_csv', 'head', 'boxplot', 'describe', 'describe', 'to_string', 'describe', 'copy', 'sum', 'isnull', 'sort_values', 'corr', 'copy', 'sum', 'isnull', 'sort_values', 'boxplot', 'mean', 'isnull', 'sort_values', 'mean', 'isnull', 'sort_values', 'min', 'drop', 'drop', 'reset_index', 'concat', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'concat', 'round', 'sum', 'isnull', 'sort_values', 'replace', 'replace', 'replace', 'mode', 'apply', 'groupby', 'fillna', 'mode', 'apply', 'groupby', 'fillna', 'median', 'astype', 'astype', 'astype', 'value_counts', 'value_counts', 'median', 'groupby', 'mean', 'groupby', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'value_counts', 'any', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'median', 'groupby', 'value_counts', 'value_counts', 'median', 'groupby', 'mean', 'groupby', 'astype', 'astype', 'value_counts', 'any', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'median', 'groupby', 'copy', 'any', 'value_counts', 'value_counts', 'where', 'isin', 'select_dtypes', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'dropna', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'join', 'abs', 'sort_values', 'apply', 'drop', 'get_dummies', 'sum', 'sum', 'isna', 'copy', 'corrwith', 'join', 'join', 'abs', 'sort_values', 'fillna', 'mean', 'boxplot', 'join', 'join', 'mean', 'mean', 'std', 'mean', 'sort_values', 'read_csv', 'quantile', 'quantile', 'apply', 'apply', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'matplotlib.gridspec', 'warnings', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'pickle', 'warnings'] ['datetime', 'TargetEncoder', 'SimpleImputer', 'KNNImputer', 'LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'mean_squared_error', 'r2_score', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'RobustScaler', 'RandomForestRegressor', 'GradientBoostingRegressor', 'ExtraTreesRegressor', 'stats', 'skew', 'boxcox_normmax', 'norm', 'boxcox1p', 'LGBMRegressor', 'MaxNLocator', 'LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'train_test_split', 'GridSearchCV', 'cross_val_score', 'mean_squared_error', 'DecisionTreeRegressor', 'SVR', 'KNeighborsRegressor', 'MLPRegressor', 'RandomForestRegressor', 'GradientBoostingRegressor', 'CatBoostRegressor', 'LGBMRegressor', 'XGBRegressor', 'ConvergenceWarning', 'cross_val_score', 'KFold', 'cross_validate', 'RobustScaler', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'TweedieRegressor', 'enable_hist_gradient_boosting', 'GradientBoostingRegressor', 'HistGradientBoostingRegressor', 'SVR', 'make_pipeline', 'mean_squared_error', 'XGBRegressor', 'LGBMRegressor', 'StackingCVRegressor']Dict:{'numpy': ['mean', 'median', 'quantile', 'any', 'abs', 'sum', 'where', 'round', 'min', 'isin', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'datetime': ['min', 'replace'], 'category_encoders': [], 'sklearn': [], 'scipy': [], 'lightgbm': [], 'warnings': [], 'pickle': [], 'catboost': [], 'xgboost': ['apply'], 'mlxtend': []} axis_0: 0, axis_1: 3
new-better-xgb-baseline-1-4308.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'head', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'sort_values', 'concat', 'reset_index', 'drop', 'drop', 'reset_index', 'reset_index', 'sort_values', 'concat', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'tail', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'hist', 'clip', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'head', 'hist', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'last', 'groupby', 'mean', 'groupby', 'join', 'mean', 'median', 'median', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'tail', 'read_csv', 'astype', 'head', 'read_csv', 'astype', 'head', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'to_dict', 'set_index', 'copy', 'map', 'map', 'map', 'head', 'drop', 'read_csv', 'fillna', 'merge', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'xgboost'] ['tqdm']Dict:{'gc': [], 'numpy': ['mean', 'median', 'abs', 'sum', 'unique', 'clip', 'isin', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'xgboost': [], 'tqdm': []} axis_0: 0, axis_1: 1
tps-nov-2022-02-feature-engineering-0-51408.py : ['join', 'to_csv', 'clip', 'clip', 'clip', 'copy', 'transform', 'transform', 'transform', 'astype', 'concat', 'astype', 'astype', 'diff', 'round', 'mean', 'round', 'mean', 'round', 'std', 'diff', 'astype', 'astype', 'sort_values', 'sort_values', 'mode', 'sum', 'isnull', 'mul', 'mean', 'isnull', 'concat', 'rename', 'sort_values', 'reset_index', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'corr', 'add', 'round', 'corr', 'copy', 'reset_index', 'dropna', 'unstack', 'apply', 'mean', 'apply', 'median', 'apply', 'std', 'apply', 'apply', 'apply', 'max', 'min', 'apply', 'skew', 'apply', 'kurtosis', 'apply', 'mean', 'median', 'std', 'reset_index', 'concat', 'min', 'max', 'min', 'boxplot', 'dropna', 'dropna', 'to_numpy', 'crosstab', 'sum', 'select_dtypes', 'concat', 'set_index', 'round', 'corr', 'reset_index', 'dropna', 'unstack', 'apply', 'count', 'select_dtypes', 'quantile', 'quantile', 'where', 'quantile', 'median', 'mean', 'std', 'median', 'var', 'min', 'max', 'skew', 'quantile', 'quantile', 'quantile', 'sum', 'idxmax', 'where', 'quantile', 'quantile', 'quantile', 'quantile', 'value_counts', 'min', 'max', 'min', 'max', 'hist', 'astype', 'apply', 'mean', 'apply', 'median', 'apply', 'std', 'apply', 'apply', 'apply', 'max', 'min', 'apply', 'skew', 'apply', 'kurtosis', 'apply', 'mean', 'median', 'std', 'reset_index', 'concat', 'sum', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'min', 'max', 'min', 'boxplot', 'dropna', 'dropna', 'read_csv', 'read_csv', 'head', 'head', 'join', 'read_csv', 'read_csv', 'drop', 'copy', 'copy', 'copy', 'round', 'cumsum', 'cumsum', 'copy', 'describe', 'drop', 'drop', 'copy', 'copy', 'filter', 'head', 'filter', 'sample', 'copy', 'filter', 'drop', 'drop', 'head', 'filter', 'head', 'filter', 'copy', 'mean', 'groupby', 'copy', 'mean', 'groupby', 'filter', 'update', 'hist', 'hist', 'copy', 'drop', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'to_csv', 'copy', 'copy', 'head', 'concat', 'concat', 'concat', 'sort_values', 'drop', 'hist', 'hist', 'copy', 'drop'] ['warnings', 'random', 'os', 'gc', 'torch', 'sklearn.exceptions', 'multiprocessing', 'glob', 'pickle', 'scipy.optimize', 'scipy.special', 'wandb', 'graphviz', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'joblib', 'scipy.stats', 'plotly.express', 'xgboost', 'lightgbm', 'scikitplot', 'sklearn.feature_selection', 'category_encoders', 'tensorflow'] ['drive', '_log', 'train_test_split', 'KFold', 'StratifiedKFold', 'cross_val_score', 'StandardScaler', 'OneHotEncoder', 'KBinsDiscretizer', 'MaxAbsScaler', 'roc_auc_score', 'f1_score', 'log_loss', 'roc_curve', 'auc', 'classification_report', 'confusion_matrix', 'spearmanr', 'SimpleImputer', 'set_config', 'estimator_html_repr', 'HTML', 'display_html', 'Pipeline', 'ColumnTransformer', 'make_column_transformer', 'tqdm', 'trange', 'datetime', 'Fore', 'Back', 'Style', 'CalibrationDisplay', 'SelectPercentile', 'VarianceThreshold', 'SelectKBest', 'f_classif', 'RFECV', 'SelectFromModel', 'PermutationImportance', 'Pipeline', 'make_pipeline', 'FeatureUnion', 'PCA', 'GaussianMixture', 'BayesianGaussianMixture', 'KElbowVisualizer', 'SilhouetteVisualizer', 'InterclusterDistance', 'KMeans', 'AgglomerativeClustering', 'LogisticRegression', 'KNeighborsClassifier', 'ExtraTreesClassifier', 'KNeighborsClassifier', 'MLPClassifier', 'RandomForestClassifier', 'AdaBoostClassifier', 'HistGradientBoostingClassifier', 'StackingClassifier', 'export_graphviz', 'keras', 'backend', 'layers', 'callbacks', 'plot_model', 'WandbCallback', 'log_loss', 'accuracy_score', 'ReduceLROnPlateau', 'EarlyStopping', 'Dense', 'Input', 'Concatenate', 'Dropout', 'BatchNormalization', 'Embedding', 'Conv1D', 'Flatten', 'Model', 'load_model', 'relativedelta', 'metrics']Dict:{'warnings': [], 'random': ['sample'], 'os': ['rename', 'replace'], 'gc': [], 'torch': ['mean', 'median', 'quantile', 'max', 'add', 'var', 'abs', 'mul', 'concat', 'sum', 'where', 'round', 'mode', 'min', 'clip', 'diff', 'std', 'cumsum'], 'sklearn': [], 'multiprocessing': [], 'glob': [], 'pickle': [], 'scipy': [], '': [], 'wandb': [], 'graphviz': [], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'crosstab'], 'numpy': ['mean', 'median', 'quantile', 'max', 'add', 'var', 'abs', 'sum', 'where', 'round', 'min', 'clip', 'diff', 'std', 'cumsum', 'copy'], 'matplotlib': [], 'seaborn': ['boxplot'], 'joblib': [], 'plotly': [], 'xgboost': [], 'lightgbm': [], 'scikitplot': [], 'category_encoders': [], 'tensorflow': [], 'IPython': [], 'imblearn': [], 'tqdm': [], 'datetime': ['min', 'max', 'replace'], 'colorama': [], 'eli5': [], 'yellowbrick': [], 'keras': []} axis_0: 1, axis_1: 25
mercedes-benz-eda-feature-engineering.py : ['mode', 'read_csv', 'read_csv', 'head', 'reset_index', 'reset_index', 'value_counts', 'reset_index', 'reset_index', 'count', 'groupby', 'reset_index', 'sum', 'isnull', 'reset_index', 'sum', 'isnull', 'sort_values', 'unique', 'value_counts', 'value_counts', 'boxplot', 'value_counts', 'value_counts', 'sum', 'sum', 'mean', 'mean', 'pivot', 'head', 'head', 'concat', 'head', 'boxplot', 'transform', 'drop', 'std'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'os'] ['preprocessing', 'ensemble']Dict:{'numpy': ['mean', 'std', 'sum', 'unique'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'pivot'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': [], 'os': [], '=': [], 'model': []} axis_0: 3, axis_1: 1
tpsmay22-eda-which-makes-sense.py : ['read_csv', 'read_csv', 'head', 'head', 'info', 'round', 'value_counts', 'hist', 'std', 'corr', 'sort_values', 'reset_index', 'mean', 'rolling', 'mean', 'mean', 'isna', 'value_counts', 'min', 'max', 'min', 'max', 'value_counts', 'value_counts', 'concat', 'groupby', 'get', 'round', 'mean', 'rename', 'apply', 'groupby', 'round', 'mean', 'apply', 'get', 'apply', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'datetime'] ['MaxNLocator', 'ListedColormap', 'cycler', 'display', 'PCA', 'StandardScaler', 'mutual_info_classif']Dict:{'numpy': ['mean', 'max', 'round', 'min', 'info', 'std'], 'pandas': ['concat', 'isna', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'cycler': [], 'IPython': [], 'datetime': [], 'sklearn': []} axis_0: 0, axis_1: 0
feature-selection-data-engineering-step-by-step.py : ['join', 'read_csv', 'read_csv', 'head', 'info', 'sum', 'isnull', 'drop', 'drop', 'fillna', 'max', 'dropna', 'astype', 'map', 'dropna', 'median', 'isnull', 'astype', 'head', 'sum', 'isnull', 'sort_values', 'corr', 'corr', 'head', 'astype', 'replace', 'replace', 'replace', 'replace', 'map', 'fillna', 'drop', 'astype', 'map', 'drop', 'head', 'sort_values', 'corr', 'corr'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'warnings'] ['SelectKBest', 'f_classif']Dict:{'numpy': ['median', 'info', 'sum', 'max'], 'pandas': ['read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'os': ['replace'], '': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 0
tps-may22-eda-neuronal-nets.py : ['sort_values', 'nunique', 'sample'] [] []Dict:{} axis_0: 0, axis_1: 2
tps-12-g-res-variable-selection-nn-keras.py : ['mean', 'max', 'min', 'abs', 'abs', 'astype', 'sum', 'sum', 'concat', 'read_csv', 'copy', 'drop', 'copy', 'copy', 'drop', 'sum', 'sum', 'sum', 'items', '__init__', '__init__', '__init__', 'stack', 'squeeze', 'transform', 'transform', 'min', 'min', 'mean', 'array', 'to_csv', 'head'] ['os', 'gc', 'numpy', 'pandas', 'datatable', 'tensorflow', 'matplotlib.pyplot', 'seaborn'] ['keras', 'layers', 'backend', 'StratifiedKFold', 'RobustScaler', 'LabelEncoder', 'confusion_matrix', 'filterwarnings']Dict:{'os': [], 'gc': [], 'numpy': ['mean', 'stack', 'squeeze', 'max', 'abs', 'sum', 'min', 'array', 'copy'], 'pandas': ['concat', 'array', 'read_csv'], 'datatable': [], 'tensorflow': [], 'matplotlib': [], 'seaborn': [], 'sklearn': ['__init__'], 'warnings': ['__init__']} axis_0: 2, axis_1: 6
tps-09-simple-basic-stacking-lgbm-catb-xgb.py : ['copy', 'drop', 'copy', 'copy', 'drop', 'sum', 'isna', 'min', 'std', 'skew', 'median', 'fillna', 'transform', 'mean', 'keys', 'keys', 'mean', 'copy', 'to_csv'] ['numpy', 'pandas'] ['filterwarnings', 'skew', 'StandardScaler', 'Pipeline', 'SimpleImputer', 'roc_curve', 'auc']Dict:{'numpy': ['mean', 'median', 'sum', 'min', 'std', 'copy'], 'pandas': ['isna'], 'warnings': [], 'scipy': [], 'sklearn': []} axis_0: 0, axis_1: 5
simple-eda-lightgbm-autotuning-w-hyperopt.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'nunique', 'head', 'nunique', 'sample', 'boxplot', 'crosstab', 'crosstab', 'merge', 'drop', 'rename', 'sample', 'map', 'unique', 'unique', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'isin', 'isin', 'count', 'value_counts', 'join', 'value_counts', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'apply', 'apply', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'transform', 'abs', 'corr', 'where', 'astype', 'bool', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'abs', 'mean', 'map', 'mean', 'groupby', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'random', 'plotly.plotly', 'plotly.graph_objs', 'plotly.tools', 'cufflinks', 'lightgbm', 'warnings', 'networkx'] ['iplot', 'init_notebook_mode', 'partial', 'fmin', 'hp', 'tpe', 'Trials', 'space_eval', 'STATUS_OK', 'STATUS_RUNNING', 'LGBMRegressor', 'train_test_split', 'LabelEncoder', 'tqdm_notebook']Dict:{'pandas': ['read_csv', 'value_counts', 'unique', 'merge', 'crosstab'], 'numpy': ['mean', 'max', 'abs', 'sum', 'where', 'min', 'unique', 'isin'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'random': ['sample'], 'plotly': [], 'cufflinks': [], 'functools': [], 'hyperopt': [], 'lightgbm': [], 'sklearn': ['transform'], 'tqdm': [], 'warnings': [], 'networkx': []} axis_0: 0, axis_1: 7
tps-aug-neural-network-and-eda.py : ['read_csv', 'read_csv', 'read_csv', 'copy', 'sum', 'isna', 'sum', 'isna', 'rename', 'query', 'transpose', 'isna', 'any', 'isna', 'sample', 'sample', 'unique', 'sum', 'isna', 'query', 'drop', 'sum', 'isnull', 'unique', 'unique', 'concat', 'concat', 'concat', 'concat', 'drop', 'drop', 'astype', 'isna', 'astype', 'isna', 'astype', 'isna', 'astype', 'isna', 'transform', 'transform', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'random', 'seaborn', 'matplotlib.pyplot', 'tensorflow', 'sys'] ['GroupKFold', 'keras', 'layers', 'callbacks', 'LGBMImputer', 'LabelEncoder', 'roc_auc_score', 'roc_curve', 'StratifiedKFold', 'LogisticRegression', 'StandardScaler', 'train_test_split']Dict:{'numpy': ['transpose', 'any', 'sum', 'unique', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'unique'], 'matplotlib': [], 'seaborn': [], 'os': ['rename'], 'random': ['sample'], 'tensorflow': [], 'sklearn': [], 'sys;': [], 'sys': [], 'kuma_utils': []} axis_0: 2, axis_1: 5
saving-predictions-from-previous-levels-2-ways.py : ['unique', 'unique', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'astype', 'agg', 'groupby', 'drop', 'concat', 'fillna', 'reset_index', 'set_index', 'keys', 'keys'] ['pandas', 'numpy', 'jo_wilder'] ['display']Dict:{'pandas': ['unique', 'concat'], 'numpy': ['unique'], 'IPython': [], 'jo_wilder': []} axis_0: 0, axis_1: 2
catboost-gridsearchcv-feature-engineering.py : ['read_csv', 'read_csv', 'copy', 'copy', 'drop', 'copy', 'head', 'info', 'sum', 'isnull', 'sum', 'isnull', 'copy', 'fillna', 'median', 'fillna', 'fillna', 'median', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'copy', 'where', 'apply', 'replace', 'replace', 'replace', 'value_counts', 'apply', 'qcut', 'qcut', 'drop', 'head', 'apply', 'head', 'where', 'to_csv'] ['numpy', 'pandas', 'time', 'matplotlib', 'scikitplot', 'seaborn'] ['LabelEncoder', 'make_scorer', 'accuracy_score', 'train_test_split', 'GridSearchCV', 'CatBoostClassifier', 'Pool']Dict:{'numpy': ['median', 'sum', 'where', 'info', 'copy'], 'pandas': ['qcut', 'value_counts', 'read_csv', 'isnull'], 'time': [], 'matplotlib': [], 'scikitplot': [], 'seaborn': [], 'sklearn': [], 'catboost': []} axis_0: 0, axis_1: 3
iv-woe-starter-for-python.py : ['read_csv', 'head', 'join', 'transform', 'groupby', 'shift', 'diff', 'head', 'fillna', 'nunique', 'unique', 'count', 'count', 'count', 'sum', 'sum', 'sum', 'sum', 'replace', 'sort_values', 'sum', 'sum', 'copy', 'sample', 'head'] ['numpy', 'pandas'] []Dict:{'numpy': ['diff', 'sum', 'unique', 'copy'], 'pandas': ['unique', 'read_csv']} axis_0: 0, axis_1: 0
nfl-player-contact-detection-simple-xgb-baseline.py : ['join', 'join', 'join', 'astype', 'astype', 'astype', 'astype', 'sort_index', 'concat', 'unique', 'value_counts', 'join', 'join', 'join', 'array', 'mean', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'reset_index', 'sort_values', 'rename', 'drop', 'merge', 'drop', 'rename', 'merge', 'astype', 'astype', 'astype', 'notnull', 'to_csv', 'join', 'astype', 'to_csv', 'head'] ['os', 'torch', 'os', 'gc', 'subprocess', 'numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib.patches', 'cv2', 'xgboost', 'torch', 'cupy', 'cudf'] ['Video', 'display', 'minimize', 'glob', 'tqdm', 'GroupKFold', 'roc_auc_score', 'matthews_corrcoef', 'ForestInference']Dict:{'os': ['rename'], 'torch': ['mean', 'unique', 'concat'], 'gc': [], 'subprocess': [], 'numpy': ['mean', 'array', 'unique'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'notnull', 'array', 'merge'], 'matplotlib': [], 'IPython': [], 'scipy': [], 'cv2': [], 'glob': [], 'tqdm': [], 'sklearn': [], 'xgboost': []} axis_0: 1, axis_1: 2
1st-place-solution-football-prob-pred.py : ['read_csv', 'read_csv', 'read_csv', 'dropna', 'head', 'filter', 'to_datetime', 'to_datetime', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'isna', 'where', 'where', 'where', 'isna', 'where', 'where', 'where', 'where', 'copy', 'drop', 'drop', 'filter', 'drop', 'filter', 'drop', 'filter', 'drop', 'drop', 'filter', 'drop', 'filter', 'drop', 'filter', 'head', 'wide_to_long', 'wide_to_long', 'reset_index', 'reset_index', 'fillna', 'get_dummies', 'fillna', 'get_dummies', 'head', 'head', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'sort_values', 'drop', 'merge', 'sort_values', 'drop', 'merge', 'copy', 'copy', 'where', 'where', 'transform', 'transform', 'count', 'squeeze', 'squeeze', 'squeeze', 'squeeze', 'squeeze', 'squeeze', 'squeeze', 'squeeze', 'squeeze', 'squeeze', 'squeeze', 'squeeze', 'mean', 'round', 'to_csv', 'head', 'median', 'round', 'to_csv'] ['numpy', 'pandas', 'datetime', 'tensorflow', 'os'] ['KFold', 'StratifiedKFold', 'RobustScaler', 'LabelEncoder', 'StandardScaler', 'accuracy_score', 'log_loss', 'plot_model', 'to_categorical', 'Model', 'load_model', 'EarlyStopping', 'ReduceLROnPlateau', 'LearningRateScheduler', 'ExponentialDecay', 'layers']Dict:{'numpy': ['mean', 'median', 'squeeze', 'where', 'round', 'copy'], 'pandas': ['isna', 'read_csv', 'wide_to_long', 'get_dummies', 'merge', 'to_datetime'], 'datetime': [], 'sklearn': [], 'tensorflow': [], 'os': []} axis_0: 2, axis_1: 11
in-depth-visualisations-simple-methods.py : ['read_csv', 'read_csv', 'info', 'head', 'describe', 'describe', 'apply', 'dropna', 'dropna', 'dropna', 'dropna', 'dropna', 'dropna', 'crosstab', 'div', 'astype', 'sum', 'boxplot', 'crosstab', 'div', 'astype', 'sum', 'replace', 'replace', 'replace', 'replace', 'apply', 'groupby', 'corr', 'drop', 'dropna', 'sum', 'isnull', 'sum', 'isnull', 'value_counts', 'fillna', 'isna', 'median', 'dropna', 'std', 'mean', 'sum', 'sum', 'replace', 'replace', 'replace', 'replace', 'drop', 'drop', 'apply', 'apply', 'drop', 'concat', 'get_dummies', 'copy', 'copy', 'drop', 'drop', 'head', 'round', 'set_index', 'sort_values', 'to_csv', 'transform', 'transform', 'transform', 'transform', 'to_csv', 'to_csv', 'astype', 'to_csv', 'to_csv'] ['warnings', 'pandas', 'numpy', 'collections', 're', 'copy', 'seaborn', 'matplotlib.pyplot'] ['scatter_matrix', 'RandomForestClassifier', 'LogisticRegression', 'KNeighborsClassifier', 'XGBClassifier', 'plot_importance', 'cross_val_score', 'GridSearchCV', 'StandardScaler', 'VotingClassifier']Dict:{'warnings': [], 'pandas': [], 'numpy': ['mean', 'median', 'sum', 'round', 'info', 'std', 'copy'], 'collections': [], 're': [], 'copy': ['copy'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'sklearn': ['transform'], 'xgboost': [], '=': [], 'pd': [], 'importances': []} axis_0: 3, axis_1: 1
titanic-top-4-competition-pipeline-version-2.py : ['read_csv', 'read_csv', 'read_csv', 'value_counts', 'copy', 'concat', 'describe', 'unique', 'select_dtypes', 'unique', 'select_dtypes', 'boxplot', 'sort_values', 'round', 'mean', 'isna', 'rename', 'boxplot', 'reset_index', 'rename', 'sum', 'groupby', 'count', 'groupby', 'copy', 'replace', 'apply', 'apply', 'map', 'isnull', 'reset_index', 'rename', 'median', 'groupby', 'merge', 'cut', 'astype', 'reset_index', 'rename', 'median', 'groupby', 'merge', 'fillna', 'mode', 'apply', 'apply', 'replace', 'apply', 'apply', 'replace', 'replace', 'join', 'reset_index', 'rename', 'sum', 'groupby', 'count', 'groupby', 'merge', 'reset_index', 'rename', 'median', 'groupby', 'merge', 'apply', 'quantile', 'quantile', 'qcut', 'reset_index', 'rename', 'agg', 'groupby', 'value_counts', 'merge', 'apply', 'apply', 'apply', 'isna', 'map', 'isnull', 'reset_index', 'rename', 'median', 'groupby', 'merge', 'fillna', 'mode', 'copy', 'query', 'astype', 'copy', 'query', 'drop', 'reset_index', 'sample', 'reset_index', 'reset_index', 'transform', 'read_html', 'astype', 'apply', 'set_index', 'concat', 'mean', 'sort_values', 'sort_values', 'rename', 'reset_index', 'items', 'astype', 'mean', 'unique', 'unique', 'copy', 'transform', 'transform', 'transform', 'transform', 'mean', 'concat', 'insert', 'mode', 'sample', 'copy', 'fillna', 'median', 'fillna', 'median', 'transform', 'transform', 'transform', 'to_csv', 'rename', 'reset_index', 'mode', 'set_index', 'sample', 'copy', 'copy', 'reset_index', 'reset_index', 'update', 'mean', 'std', 'rename', 'reset_index', 'copy', 'astype', 'mean', 'value_counts', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'eli5', 'xgboost', 'catboost', 'lightgbm', 'warnings'] ['model_selection', 'preprocessing', 'pipeline', 'metrics', 'impute', 'compose', 'TargetEncoder', 'CatBoostEncoder', 'GLMMEncoder', 'CountEncoder', '*', '*', 'PermutationImportance', 'linear_model', 'neighbors', 'naive_bayes', 'svm']Dict:{'numpy': ['mean', 'median', 'quantile', 'std', 'sum', 'round', 'unique', 'insert', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'read_html', 'unique', 'qcut', 'merge'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'category_encoders': [], 'feature_engine': [], 'eli5': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 4
autoencoder-pseudo-label-autolgb.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'info', 'describe', 'nunique', 'fillna', 'fillna', 'apply', 'map', 'fillna', 'median', 'astype', 'apply', 'fillna', 'median', 'groupby', 'sum', 'apply', 'groupby', 'sum', 'apply', 'astype', 'describe', 'hist', 'describe', 'astype', 'nunique', 'max', 'concat', 'astype', 'astype', 'to_csv'] ['numpy', 'pandas', 'os', 'lightgbm', 'numpy', 'pandas', 'tensorflow', 'seaborn', 'warnings', 'kaggler'] ['pyplot', 'Path', 'keras', 'StratifiedKFold', 'StandardScaler', 'roc_auc_score', 'confusion_matrix', 'AutoLGB', 'LabelEncoder']Dict:{'numpy': ['median', 'info', 'sum', 'max'], 'pandas': ['concat', 'read_csv'], 'os': [], 'lightgbm': [], 'matplotlib': [], 'pathlib': [], 'tensorflow': [], 'seaborn': [], 'sklearn': [], 'warnings': [], 'kaggler': []} axis_0: 1, axis_1: 1
xgboost-starter-0-793.py : ['read_parquet', 'read_parquet', 'astype', 'to_datetime', 'fillna', 'head', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'concat', 'read_csv', 'astype', 'set_index', 'merge', 'astype', 'reset_index', 'sort_index', '__init__', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'keys', 'copy', 'set_index', 'concat', 'drop_duplicates', 'read_parquet', 'astype', 'apply', 'set_index', 'merge', 'reset_index', 'sort_index', 'to_csv', 'head', 'hist', 'copy', 'merge', 'mean', 'sort_values', 'to_csv', 'isin', 'sort_index', 'drop_duplicates', 'read_csv', 'astype', 'set_index', 'merge', 'reset_index', 'to_csv', 'head', 'hist'] ['pandas', 'numpy', 'cupy', 'cudf', 'matplotlib.pyplot', 'gc', 'os', 'xgboost', 'matplotlib.pyplot'] ['KFold']Dict:{'pandas': ['read_csv', 'concat', 'read_parquet', 'array', 'merge', 'to_datetime'], 'cupy,': [], 'cudf': [], '#': [], 'GPU': [], 'libraries': [], 'matplotlib': ['hist'], 'sklearn': ['__init__'], 'xgboost': [], '=': [], '[]': []} axis_0: 1, axis_1: 2
beginner-challenge-house-prices.py : ['read_csv', 'read_csv', 'describe', 'skew', 'kurt', 'head', 'corr', 'nlargest', 'concat', 'boxplot', 'concat', 'concat', 'boxplot', 'concat', 'concat', 'concat', 'concat', 'boxplot', 'concat', 'boxplot', 'concat', 'concat', 'select_dtypes', 'boxplot', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'copy', 'select_dtypes', 'dropna', 'dropna', 'drop', 'drop', 'drop', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'concat', 'any', 'isnull', 'unique', 'describe', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'describe', 'describe', 'transform', 'groupby', 'fillna', 'median', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'apply', 'astype', 'select_dtypes', 'select_dtypes', 'drop', 'copy', 'get_dummies', 'head', 'copy', 'factorize', 'head', 'copy', 'groupby', 'rename', 'reset_index', 'merge', 'drop', 'head', 'copy', 'get_dummies', 'mean', 'std', 'to_csv', 'mean', 'std', 'to_csv', 'copy', 'factorize', 'mean', 'std', 'to_csv', 'mean', 'std', 'to_csv', 'copy', 'groupby', 'rename', 'reset_index', 'merge', 'drop', 'mean', 'std', 'to_csv', 'mean', 'std', 'to_csv', 'concat', 'apply', 'apply', 'apply', 'apply', 'sort_values', 'apply', 'head', 'sort_values', 'apply', 'head', 'mean', 'mean', 'sort_values', 'mean', 'sort_values', 'mean', 'mean', 'mean', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'transpose', 'array', 'mean', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'transpose', 'array', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'warnings', 'gc', 'missingno', 'lightgbm', 'lightgbm', 'xgboost'] ['norm', 'StandardScaler', 'stats', 'OneHotEncoder', 'KFold', 'cross_val_score', 'train_test_split', 'KFold', 'cross_val_score', 'train_test_split', 'KFold', 'cross_val_score', 'train_test_split', 'KFold', 'cross_val_score', 'train_test_split', 'skew', 'boxcox1p', 'boxcox_normmax', 'LinearRegression', 'KFold', 'cross_val_score', 'cross_val_predict', 'RobustScaler', 'make_pipeline', 'RidgeCV', 'LassoCV', 'ElasticNetCV', 'XGBRegressor']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'factorize', 'unique', 'array', 'merge'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'numpy': ['transpose', 'mean', 'median', 'any', 'sum', 'array', 'unique', 'isin', 'std', 'copy'], 'scipy': [], 'sklearn': [], 'warnings': [], '': [], 'gc': [], 'missingno': [], 'lightgbm': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 15
feature-engineering-pyspark-and-xgboost.py : ['join', 'describe', 'filter', 'filter', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'concat', 'astype', 'fillna', 'mean', 'mean', 'mean', 'mean', 'mean', 'astype', 'fillna', 'read_csv', 'map', 'to_csv'] ['numpy', 'pandas', 'os', 'sys', 'xgboost', 'numpy', 'matplotlib.pyplot', 'lightgbm'] ['SparkContext', 'SparkConf', 'functions', 'Window', 'SparkSession', 'col', 'DoubleType', 'StringType', 'ArrayType', 'LongType', 'FloatType', 'DateType', 'train_test_split', 'roc_curve', 'auc', 'roc_auc_score', 'label_binarize']Dict:{'numpy': ['mean'], 'pandas': ['concat', 'read_csv'], 'os': [], 'pyspark': [], 'sklearn': [], 'sys': [], 'xgboost': [], 'matplotlib': [], 'lightgbm': []} axis_0: 0, axis_1: 0
ps-s3e7-feature-eng-data-leakage-47th.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'drop', 'duplicated', 'isin', 'drop', 'duplicated', 'isin', 'merge', 'drop', 'drop', 'isin', 'to_datetime', 'astype', 'astype', 'to_datetime', 'astype', 'astype', 'drop', 'drop', 'head', 'sum', 'sum', 'isna', 'fillna', 'rename', 'to_datetime', 'astype', 'drop', 'drop', 'drop', 'transform', 'sort_values', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'stack', 'to_csv', 'read_csv', 'read_csv', 'drop', 'merge', 'drop', 'max', 'min', 'isin', 'map', 'isin', 'to_csv', 'head', 'isin'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['USFederalHolidayCalendar', 'RobustScaler', 'StandardScaler', 'ColumnTransformer', 'StratifiedKFold', 'cross_val_score', 'XGBClassifier', 'CatBoostClassifier', 'LGBMClassifier']Dict:{'pandas': [], 'numpy': ['mean', 'stack', 'max', 'sum', 'min', 'isin'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'warnings': [], '=': [], 'pd': [], 'index=scaled_df': []} axis_0: 1, axis_1: 7
psse19-eda-feature-engineering.py : ['join', 'read_csv', 'head', 'read_csv', 'head', 'info', 'describe', 'sum', 'isnull', 'to_datetime', 'reset_index', 'sum', 'groupby', 'to_datetime', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'head', 'apply', 'apply', 'apply', 'apply', 'apply', 'head', 'get_dummies', 'head', 'astype', 'isin', 'head', 'apply', 'head', 'shift', 'shift', 'mean', 'rolling', 'std', 'rolling', 'shift', 'groupby', 'to_datetime', 'to_datetime', 'clip', 'abs', 'abs', 'abs', 'mean'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'matplotlib.pyplot', 'statsmodels.api', 'holidays', 'numpy'] ['seasonal_decompose', 'train_test_split', 'SARIMAX']Dict:{'numpy': ['mean', 'abs', 'sum', 'clip', 'isin', 'info', 'std'], 'pandas': ['get_dummies', 'to_datetime', 'read_csv', 'isnull'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'os': [], 'statsmodels': [], 'holidays': [], 'sklearn': []} axis_0: 0, axis_1: 1
ps4e1-eda-feature-engineering-modelling.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'rename', 'concat', 'reset_index', 'cut', 'cut', 'reset_index', 'concat', 'info', 'groupby', 'sort_values', 'cumsum', 'groupby', 'sort_values', 'fillna', 'shift', 'groupby', 'sort_values', 'mean', 'fillna', 'shift', 'groupby', 'sort_values', 'where', 'reset_index', 'copy', 'copy', 'reset_index', 'drop', 'reset_index', 'drop', 'drop', 'sum', 'isna', 'info', 'value_counts', 'fillna', 'fillna', 'sum', 'sum', 'isna', 'copy', 'info', 'fillna', 'fillna', 'to_csv'] ['numpy', 'pandas', 're', 'matplotlib.pyplot', 'warnings', 'shap'] ['Optional', 'Tuple', 'Union', 'plot_tree', 'BlueCast', 'BlueCastCV', 'TrainingConfig', 'XgboostTuneParamsConfig', 'CustomPreprocessing', 'save_to_production', 'load_for_production', 'StratifiedKFold', 'RepeatedStratifiedKFold', 'PowerTransformer', 'LabelEncoder', 'bi_variate_plots', 'correlation_heatmap', 'correlation_to_target', 'plot_pca', 'plot_theil_u_heatmap', 'plot_tsne', 'univariate_plots', 'check_unique_values', 'plot_null_percentage', 'mutual_info_to_target', 'FeatureTypeDetector', 'detect_categorical_leakage', 'detect_leakage_via_correlation', 'TrainingConfig', 'XgboostTuneParamsConfig', 'RandomForestRegressor']Dict:{'numpy': ['mean', 'sum', 'where', 'info', 'cumsum', 'copy'], 'pandas': ['isna', 'read_csv', 'cut', 'concat', 'value_counts'], 're': [], 'typing': [], 'matplotlib': [], 'xgboost': [], 'warnings': [], 'bluecast': [], 'sklearn': [], 'shap': [], '': []} axis_0: 0, axis_1: 3
ps3e12-eda-ensemble-baseline.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'reset_index', 'set_index', 'drop', 'corr', 'corr', 'drop', 'value_counts', 'cut', 'get_dummies', 'concat', 'drop', 'concat', 'reset_index', 'drop', 'reset_index', 'reset_index', 'transform', 'head', 'array', 'array', 'items', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'read_csv', 'join', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'random', 'gc', 'seaborn', 'optuna', 'xgboost', 'lightgbm', 'xgboost', 'lightgbm', 'warnings'] ['deepcopy', 'partial', 'combinations', 'BaseEstimator', 'TransformerMixin', 'train_test_split', 'StratifiedKFold', 'KFold', 'roc_auc_score', 'accuracy_score', 'log_loss', 'StandardScaler', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'BalancedRandomForestClassifier', 'NuSVC', 'SVC', 'KNeighborsClassifier', 'LogisticRegression', 'MLPClassifier', 'GaussianProcessClassifier', 'RBF', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool']Dict:{'numpy': ['mean', 'std', 'array'], 'pandas': ['read_csv', 'cut', 'concat', 'value_counts', 'get_dummies', 'array'], 'matplotlib': [], 'seaborn': [], 'random': [], 'os': [], 'copy': [], 'functools': [], 'itertools': [], 'gc': [], 'sklearn': [], 'category_encoders': [], 'imblearn': [], 'optuna': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'warnings': []} axis_0: 3, axis_1: 6
houses-prices-complete-solution.py : ['read_csv', 'read_csv', 'drop', 'drop', 'rename', 'rename', 'apply', 'count', 'apply', 'unique', 'apply', 'sum', 'isnull', 'apply', 'unique', 'sum', 'isnull', 'skew', 'kurt', 'concat', 'corr', 'concat', 'value_counts', 'value_counts', 'sort_values', 'transpose', 'describe', 'boxplot', 'drop', 'corr', 'corr', 'sum', 'corr', 'corr', 'boxplot', 'boxplot', 'boxplot', 'corr', 'corr', 'sum', 'corr', 'corr', 'corr', 'sum', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'sum', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'map', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'value_counts', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'sum', 'groupby', 'sum', 'groupby', 'drop', 'sort_values', 'sum', 'groupby', 'sort_values', 'sum', 'groupby', 'drop', 'mean', 'mean', 'mean', 'min', 'min', 'max', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'sum', 'groupby', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'drop', 'map', 'sum', 'groupby', 'sum', 'groupby', 'drop', 'sort_values', 'sum', 'groupby', 'drop', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'max', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'skew', 'kurt', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'corr', 'fillna', 'corr', 'fillna', 'corr', 'reset_index', 'concat', 'sum', 'sort_values', 'value_counts', 'mean', 'fillna', 'drop', 'value_counts', 'fillna', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'isnull', 'fillna', 'median', 'fillna', 'fillna', 'median', 'fillna', 'fillna', 'median', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'sum', 'isnull', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'count', 'isnull', 'isnull', 'count', 'sum', 'value_counts', 'value_counts', 'isnull', 'median', 'fillna', 'fillna', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'value_counts', 'isnull', 'isnull', 'value_counts', 'isnull', 'isnull', 'value_counts', 'isnull', 'isnull', 'value_counts', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'sum', 'isnull', 'isnull', 'sum', 'isnull', 'isnull', 'fillna', 'sum', 'sum', 'isnull', 'mean', 'groupby', 'apply', 'isnull', 'apply', 'round', 'isnull', 'map', 'fillna', 'fillna', 'isnull', 'isnull', 'mode', 'fillna', 'fillna', 'fillna', 'sum', 'sum', 'isnull', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'apply', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'select_dtypes', 'replace', 'replace', 'get_dummies', 'get_dummies', 'info', 'astype', 'astype', 'sum', 'drop', 'drop', 'sum', 'drop', 'drop', 'apply', 'corr', 'keys', 'sort_values', 'drop', 'corr', 'keys', 'sort_values', 'rename', 'join', 'sort_values', 'drop', 'drop', 'drop', 'copy', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'sort_values', 'apply', 'dropna', 'dropna', 'sort_values', 'apply', 'dropna', 'sort_values', 'concat', 'skew', 'kurt', 'replace', 'head', 'concat', 'reset_index', 'reset_index', 'reset_index', 'astype', 'apply', 'pivot_table', 'mean', 'unique', 'unique', 'sort_values', 'sort_values', 'unique', 'transform', 'transform', 'reset_index', 'reset_index', 'reset_index', 'transform', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'std', 'std', 'drop', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'copy', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'sort_values', 'mean', 'to_csv', 'head'] ['os', 'warnings', 'numpy', 'pandas', 'seaborn', 'mpl_toolkits', 'pylab', 'statsmodels.api', 'xgboost', 'lightgbm'] ['pyplot', 'Axes3D', 'stats', 'skew', 'norm', 'probplot', 'boxcox', 'boxcox1p', 'dmatrices', 'variance_inflation_factor', 'Pipeline', 'make_pipeline', 'RobustScaler', 'PolynomialFeatures', 'StandardScaler', 'LabelEncoder', 'f_regression', 'mutual_info_regression', 'SelectKBest', 'RFECV', 'SelectFromModel', 'SequentialFeatureSelector', 'plot_sequential_feature_selection', 'FeatureHasher', 'PCA', 'KernelPCA', 'BaseEstimator', 'TransformerMixin', 'RegressorMixin', 'clone', 'KernelRidge', 'LinearRegression', 'OrthogonalMatchingPursuit', 'Lasso', 'LassoLarsIC', 'ElasticNet', 'ElasticNetCV', 'SGDRegressor', 'PassiveAggressiveRegressor', 'HuberRegressor', 'BayesianRidge', 'GradientBoostingRegressor', 'RandomForestRegressor', 'BaggingRegressor', 'ExtraTreesRegressor', 'XGBRegressor', 'plot_importance', 'GridSearchCV', 'cross_val_score', 'KFold', 'cross_val_predict', 'train_test_split', 'mean_absolute_error', 'mean_squared_error', 'r2_score', 'combinations']Dict:{'os': ['rename', 'replace'], 'warnings': [], 'numpy': ['transpose', 'mean', 'median', 'max', 'sum', 'round', 'min', 'unique', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'pivot_table', 'concat', 'value_counts', 'get_dummies', 'unique'], 'matplotlib': [], 'seaborn': ['boxplot'], 'mpl_toolkits': ['boxplot'], 'pylab': ['transpose', 'mean', 'boxplot', 'median', 'max', 'sum', 'round', 'min', 'unique', 'info', 'std', 'copy'], '': [], 'scipy': [], 'patsy': [], 'statsmodels': [], 'sklearn': [], 'mlxtend': [], 'xgboost': [], 'lightgbm': [], 'itertools': []} axis_0: 9, axis_1: 15
s3e5-from-eda-to-final-submission.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'head', 'concat', 'sum', 'isnull', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'concat', 'value_counts', 'value_counts', 'round', 'value_counts', 'round', 'value_counts', 'astype', 'astype', 'astype', 'boxplot', 'astype', 'corr', 'where', 'abs', 'astype', 'round', 'corr', 'corr', 'corr', 'head', 'sort_values', 'head', 'sort_values', 'query', 'concat', 'squeeze', 'mean', 'astype', 'to_csv', 'squeeze', 'squeeze', 'mode', 'astype', 'to_csv', 'read_csv', 'mean', 'array', 'sort_values', 'copy', 'mean', 'array', 'sort_values', 'transform', 'copy', 'copy', 'copy', 'copy', 'copy', 'sort_values', 'read_csv', 'read_csv', 'mode', 'concat', 'to_csv'] ['json', 'pandas', 'numpy', 'scipy', 'torch', 'matplotlib.pyplot', 'seaborn', 'flaml', 'numpy', 'scipy'] ['Path', 'partial', 'StratifiedKFold', 'RepeatedKFold', 'RepeatedStratifiedKFold', 'GridSearchCV', 'train_test_split', 'ColumnTransformer', 'make_pipeline', 'Pipeline', 'LogisticRegression', 'Lasso', 'roc_auc_score', 'cohen_kappa_score', 'confusion_matrix', 'classification_report', 'StandardScaler', 'OneHotEncoder', 'OrdinalEncoder', 'MinMaxScaler', 'LabelEncoder', 'SimpleImputer', 'compute_class_weight', 'BaseEstimator', 'TransformerMixin', 'TargetEncoder', 'LeaveOneOutEncoder', 'WOEEncoder', 'XGBClassifier', 'XGBRegressor', 'LGBMClassifier', 'LGBMRegressor', 'log_evaluation', 'early_stopping', 'CatBoostClassifier', 'CatBoostRegressor', 'partial']Dict:{'pathlib': [], 'functools': [], 'json': [], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'array'], 'numpy': ['mean', 'squeeze', 'abs', 'sum', 'where', 'round', 'info', 'array', 'copy'], 'scipy': [], 'sklearn': [], 'category_encoders': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'torch': ['mean', 'squeeze', 'abs', 'sum', 'concat', 'where', 'round', 'mode'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'flaml': []} axis_0: 2, axis_1: 4
the-emergence-of-automl.py : ['update', 'array', 'astype', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'value_counts', 'count', 'dropna', 'reset_index', 'value_counts', 'sum', 'rename', 'items', 'items', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'reset_index', 'drop', 'dropna', 'replace', 'value_counts', 'value_counts', 'replace', 'drop', 'dropna', 'replace', 'value_counts', 'value_counts', 'replace', 'read_csv', 'notnull', 'notnull', 'notnull', 'notnull', 'notnull', 'notnull', 'notnull', 'replace', 'concat', 'notnull', 'notnull', 'notnull', 'notnull', 'notnull', 'notnull', 'notnull', 'replace', 'concat', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'items', 'replace', 'to_html', 'items', 'sort_values', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'items', 'sort_values', 'concat', 'set_index', 'value_counts', 'round', 'count', 'groupby', 'sum', 'round', 'count', 'groupby', 'sum', 'round', 'count', 'groupby', 'sum', 'round', 'sort_values', 'count', 'groupby', 'sum', 'round', 'crosstab', 'value_counts', 'round', 'sort_values', 'count', 'groupby', 'sum', 'round', 'update', 'crosstab', 'astype', 'sum', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'items', 'count', 'groupby', 'sum', 'round', 'count', 'groupby', 'sum', 'round', 'sort_values', 'count', 'groupby', 'reindex', 'sum', 'round', 'crosstab', 'astype', 'sum', 'replace', 'value_counts', 'replace', 'replace', 'value_counts', 'concat', 'rename', 'round', 'replace', 'value_counts', 'crosstab', 'sum', 'reindex', 'round', 'rename', 'reset_index', 'value_counts', 'round', 'replace', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'read_csv', 'rename', 'merge', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'apply', 'to_datetime', 'set_index', 'join', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'join', 'read_csv', 'apply', 'apply', 'sort_values', 'sort_values', 'to_dict', 'set_index', 'items', 'items'] ['numpy', 'pandas', 'itertools', 'collections', 'matplotlib.pyplot', 'matplotlib.dates', 'seaborn', 'cufflinks', 'plotly.graph_objs', 'plotly.offline', 'plotly.express', 'pycountry', 'folium', 'tweepy', 'nltk', 're', 'string', 'networkx', 'warnings', 'plotly.graph_objects', 'plotly.figure_factory', 'urllib.request', 'networkx'] ['display', 'HTML', 'datetime', 'WordCloud', 'init_notebook_mode', 'iplot', 'make_subplots', 'plugins', 'bigrams', 'stopwords', 'model_selection', 'CountVectorizer', 'TfidfVectorizer', 'display', 'HTML', 'make_subplots', 'Image']Dict:{'IPython': [], 'numpy': ['sum', 'where', 'round', 'isin', 'array'], 'pandas': ['read_csv', 'concat', 'value_counts', 'notnull', 'array', 'merge', 'to_datetime', 'crosstab'], 'datetime': ['replace'], 'itertools': ['count', 'groupby'], 'collections': [], 'wordcloud': [], 'matplotlib': [], 'seaborn': [], 'cufflinks': [], 'plotly': [], 'pycountry': [], 'folium': [], '': [], 'tweepy': [], 'nltk': [], 're': ['sub'], 'string': [], 'networkx': [], 'sklearn': [], 'warnings': [], 'PIL': ['merge'], 'urllib': []} axis_0: 2, axis_1: 2
feature-engineering-optimal-clustering-analysis.py : ['read_pickle', 'read_pickle', 'read_csv', 'pivot', 'corr', 'keys', 'corr', 'max', 'keys', 'hist'] ['pandas', 'numpy', 'pandas', 'glob', 'os', 'gc', 'matplotlib.pyplot', 'seaborn', 'numpy.matlib', 'matplotlib.pylab', 'matplotlib'] ['display', 'HTML', 'Parallel', 'delayed', 'preprocessing', 'model_selection', 'MinMaxScaler', 'StandardScaler', 'LabelEncoder', 'QuantileTransformer', 'r2_score', 'KMeans', 'ch4_optimal_clustering', 'KMeans', 'ch2_marcenko_pastur_pdf']Dict:{'IPython': [], 'pandas': ['read_pickle', 'pivot', 'read_csv'], 'numpy': [], 'glob': [], 'os': [], 'gc': [], 'joblib': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'Machine_Learning_for_Asset_Managers': []} axis_0: 0, axis_1: 0
avsigversion-analisys.py : ['read_csv', 'read_csv', 'concat', 'reset_index', 'value_counts', 'concat', 'astype', 'replace', 'reset_index', 'reset_index', 'sort_values', 'to_dict', 'set_index', 'map', 'hist'] ['pandas'] ['pyplot']Dict:{'pandas': ['concat', 'read_csv', 'value_counts'], 'matplotlib': []} axis_0: 0, axis_1: 1
awesome-deep-learning-with-cnn-mnist-classifier.py : ['astype', 'astype'] ['tensorflow', 'numpy'] ['absolute_import', 'division', 'print_function']Dict:{'__future__': [], 'tensorflow': [], 'numpy': []} axis_0: 0, axis_1: 3
tpsjan22-1-10-feature-engineering.py : ['replace', 'read_csv', 'read_csv', 'read_csv', 'copy', 'to_period', 'set_index', 'unstack', 'concat', 'drop', 'min', 'to_datetime', 'to_datetime', 'astype', 'astype', 'astype', 'date_range', 'rename', 'reset_index', 'filter', 'rename', 'astype', 'merge', 'rename', 'reset_index', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'sort_values', 'astype', 'isin', 'date_range', 'isin', 'apply', 'clip', 'apply', 'clip', 'merge', 'to_datetime', 'date_range', 'isin', 'date_range', 'isin', 'merge', 'merge', 'map', 'clip', 'map', 'clip', 'map', 'clip', 'merge', 'merge', 'tail', 'head', 'apply', 'set_index', 'rename', 'reset_index', 'unstack', 'set_index', 'set_index', 'rename', 'reset_index', 'unstack', 'set_index', 'concat', 'merge', 'reset_index', 'rename', 'reset_index', 'astype', 'fillna', 'fillna', 'merge', 'read_csv', 'rename', 'read_csv', 'rename', 'read_csv', 'rename', 'merge', 'merge', 'rename', 'reset_index', 'nunique', 'groupby', 'rename', 'reset_index', 'nunique', 'groupby', 'merge', 'merge', 'get_dummies', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'merge', 'drop', 'concat', 'drop', 'to_pickle', 'to_pickle', 'to_pickle', 'to_pickle', 'to_pickle', 'to_pickle', 'to_pickle'] ['numpy', 'pandas', 'gc', 'wbgapi'] ['Markdown', 'HTML', '*', 'CalendarFourier', 'DeterministicProcess', 'CountryHoliday', 'easter', 'relativedelta', 'get_rates', 'tqdm', 'Daily', 'Point']Dict:{'IPython': [], 'numpy': ['max', 'sum', 'min', 'clip', 'isin', 'copy'], 'pandas': ['to_pickle', 'read_csv', 'date_range', 'concat', 'get_dummies', 'merge', 'to_datetime'], 'kaggle_colors_util': [], 'gc': [], 'statsmodels': [], 'holidays': [], 'dateutil': [], 'forex_python': [], 'tqdm': [], 'wbgapi': [], '=': [], "get_topic_data('TM": [], "'wb_imports_from_hi')": [], '': [], 'meteostat': []} axis_0: 0, axis_1: 2
catboost-beats-auto-ml.py : ['join', 'read_csv', 'read_csv', 'drop', 'drop', 'unique', 'unique', 'apply', 'apply', 'apply', 'apply', 'mode', 'unique', 'fillna', 'unique', 'fillna', 'replace', 'replace', 'replace', 'replace', 'unique', 'notnull', 'notnull', 'transform', 'notnull', 'notnull', 'transform', 'notnull', 'fillna', 'fillna', 'reset_index', 'value_counts', 'merge', 'fillna', 'merge', 'transform', 'transform', 'astype', 'astype', 'astype', 'astype', 'to_csv', 'read_csv', 'to_csv', 'mean', 'std', 'mean', 'std', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'pprint', 'joblib', 'category_encoders'] ['time', 'CatBoostClassifier', 'Pool', 'StratifiedKFold', 'roc_auc_score', 'average_precision_score', 'make_scorer', 'LabelEncoder']Dict:{'numpy': ['mean', 'std', 'unique'], 'pandas': ['read_csv', 'value_counts', 'unique', 'notnull', 'merge'], 'os': ['replace'], 'time': [], 'pprint': [], 'joblib': [], 'catboost': [], 'sklearn': ['transform'], 'category_encoders': []} axis_0: 0, axis_1: 2
titanic-eda-feature-engineering-beginners.py : ['join', 'read_csv', 'read_csv', 'concat', 'info', 'nunique', 'unstack', 'groupby', 'unstack', 'groupby', 'unstack', 'groupby', 'transform', 'groupby', 'fillna', 'median', 'isnull', 'fillna', 'isnull', 'median', 'groupby', 'fillna', 'apply', 'notnull', 'replace', 'replace', 'replace', 'drop', 'qcut', 'qcut', 'map', 'transform', 'groupby', 'apply', 'replace', 'replace', 'replace', 'notna', 'isna', 'unique', 'unique', 'unique', 'unique', 'median', 'groupby', 'median', 'groupby', 'mean', 'nunique', 'concat', 'concat', 'reset_index', 'concat', 'drop', 'head', 'notna', 'isna', 'drop', 'drop', 'sum', 'sum', 'drop', 'astype', 'read_csv', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'string', 'seaborn', 'matplotlib.pyplot', 'missingno'] ['roc_curve', 'auc', 'SVC', 'LabelEncoder', 'OneHotEncoder', 'StandardScaler', 'GridSearchCV', 'StratifiedKFold', 'cross_val_score', 'AdaBoostClassifier', 'RandomForestClassifier', 'VotingClassifier', 'ExtraTreesClassifier', 'GradientBoostingClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'unique', 'info'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'notna', 'unique', 'notnull', 'qcut'], 'os': ['replace'], 'string': [], 'seaborn': [], 'matplotlib': [], 'sklearn': ['apply'], 'missingno': []} axis_0: 1, axis_1: 7
beginner-tutorial-using-votingclassifier-82-27.py : ['drop', 'drop', 'drop', 'mean', 'sort_values', 'head', 'sort_values', 'head', 'sort_values', 'head', 'drop_duplicates', 'concat', 'read_csv', 'read_csv', 'info', 'describe', 'head', 'info', 'describe', 'head', 'info', 'describe', 'count', 'groupby', 'sort_values', 'count', 'groupby', 'sort_values', 'mean', 'groupby', 'sum', 'isnull', 'fillna', 'mode', 'info', 'get_dummies', 'concat', 'sort_values', 'count', 'groupby', 'count', 'groupby', 'get_dummies', 'concat', 'unique', 'sort_values', 'count', 'groupby', 'update', 'update', 'update', 'update', 'update', 'update', 'map', 'sort_values', 'count', 'groupby', 'get_dummies', 'concat', 'sort_values', 'count', 'groupby', 'map', 'sort_values', 'count', 'groupby', 'array', 'transform', 'corr', 'get_dummies', 'concat', 'sort_values', 'count', 'groupby', 'get_dummies', 'concat', 'fillna', 'sort_values', 'count', 'groupby', 'get_dummies', 'concat', 'sort_values', 'count', 'groupby', 'get_dummies', 'concat', 'sum', 'isnull', 'fillna', 'transform', 'groupby', 'info', 'transform', 'groupby', 'drop', 'fillna', 'transform', 'groupby', 'describe', 'map', 'array', 'transform', 'get_dummies', 'concat', 'sort_values', 'count', 'groupby', 'mean', 'groupby', 'get', 'mean', 'groupby', 'get', 'mean', 'groupby', 'get', 'mean', 'groupby', 'apply', 'sort_values', 'count', 'groupby', 'array', 'transform', 'sort_values', 'mean', 'groupby', 'replace', 'sort_values', 'count', 'groupby', 'map', 'sort_values', 'count', 'groupby', 'count', 'groupby', 'array', 'transform', 'get_dummies', 'concat', 'sort_values', 'mean', 'groupby', 'apply', 'notnull', 'get_dummies', 'info', 'notnull', 'isnull', 'isnull', 'fillna', 'transform', 'groupby', 'sort_values', 'mean', 'groupby', 'map', 'array', 'transform', 'get_dummies', 'concat', 'apply', 'apply', 'to_numeric', 'fillna', 'get_dummies', 'apply', 'notnull', 'get_dummies', 'transform', 'drop', 'drop', 'drop', 'info', 'info', 'to_csv'] ['os', 'warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['preprocessing', 'LabelEncoder', 'OneHotEncoder', 'ensemble', 'model_selection', 'ExtraTreesClassifier', 'RandomForestClassifier', 'DecisionTreeClassifier', 'LogisticRegression', 'LinearRegression']Dict:{'os': ['replace'], 'warnings': [], 'numpy': ['mean', 'sum', 'unique', 'info', 'array'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'to_numeric', 'unique', 'notnull', 'array'], 'sklearn': [], 'matplotlib': ['get'], 'seaborn': []} axis_0: 0, axis_1: 0
eda-feature-engineering-and-model-interpretation.py : ['read_csv', 'read_csv', 'apply', 'isna', 'head', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'drop', 'value_counts', 'apply', 'apply', 'join', 'apply', 'apply', 'join', 'apply', 'apply', 'apply', 'join', 'apply', 'drop', 'drop', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'apply', 'join', 'apply', 'apply', 'apply', 'join', 'apply', 'drop', 'drop', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'join', 'apply', 'apply', 'apply', 'join', 'apply', 'drop', 'drop', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'join', 'apply', 'apply', 'apply', 'join', 'apply', 'drop', 'drop', 'head', 'value_counts', 'apply', 'apply', 'join', 'join', 'apply', 'apply', 'join', 'apply', 'apply', 'apply', 'join', 'apply', 'drop', 'drop', 'head', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'drop', 'head', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'drop', 'head', 'hist', 'hist', 'hist', 'hist', 'head', 'value_counts', 'isnull', 'isnull', 'boxplot', 'isin', 'head', 'value_counts', 'boxplot', 'isin', 'head', 'value_counts', 'join', 'join', 'fillna', 'fillna', 'isnull', 'apply', 'apply', 'to_datetime', 'to_datetime', 'astype', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sum', 'groupby', 'sort_index', 'value_counts', 'mean', 'groupby', 'hist', 'fillna', 'fillna', 'fillna', 'value_counts', 'value_counts', 'join', 'fillna', 'boxplot', 'drop', 'drop', 'nunique', 'drop', 'drop', 'fillna', 'fillna', 'transform', 'astype', 'fillna', 'transform', 'astype', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'drop', 'apply', 'fillna', 'apply', 'fillna', 'drop', 'drop', 'drop', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'fillna', 'fillna', 'transform', 'fillna', 'transform', 'fillna', 'head', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'std', 'fillna', 'replace', 'fillna', 'replace', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'drop', 'drop', 'head', 'transpose', 'transpose', 'read_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'datetime', 'lightgbm', 'os', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'xgboost', 'lightgbm', 'json', 'ast', 'eli5', 'shap', 'time'] ['stats', 'hstack', 'csr_matrix', 'train_test_split', 'KFold', 'WordCloud', 'Counter', 'stopwords', 'ngrams', 'TfidfVectorizer', 'CountVectorizer', 'StandardScaler', 'model_selection', 'accuracy_score', 'CatBoostRegressor', 'urlopen', 'Image', 'LabelEncoder', 'mean_squared_error', 'LinearRegression', 'linear_model']Dict:{'numpy': ['transpose', 'mean', 'sum', 'isin', 'std'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'merge', 'to_datetime'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'datetime': [], 'lightgbm': [], 'scipy': ['transpose', 'astype', 'sum', 'mean'], 'sklearn': [], 'wordcloud': [], 'collections': [], 'nltk': [], 'os': ['replace'], 'plotly': [], 'xgboost': [], 'json': [], 'ast': [], 'eli5': [], 'shap': [], 'catboost': [], 'urllib': [], 'PIL': ['merge'], 'time': []} axis_0: 1, axis_1: 26
crypto-forecasting-common-factors.py : ['read_csv', 'read_csv', 'where', 'to_datetime', 'head', 'copy', 'astype', 'map', 'astype', 'drop', 'head', 'apply', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'unique', 'isin', 'to_parquet', 'items', 'items', 'read_parquet', 'unique', 'unique', 'read_parquet', 'isin', 'isin', 'read_parquet', 'info', 'concat', 'duplicated', 'concat', 'duplicated', 'to_parquet', 'to_parquet'] ['gresearch_crypto', 'pandas', 'numpy', 'os', 'gc', 'pickle', 'time', 'matplotlib.pyplot', 'seaborn', 'sys', 'os', 'os'] ['datetime']Dict:{'gresearch_crypto': [], 'pandas': ['read_csv', 'concat', 'read_parquet', 'unique', 'to_datetime'], 'numpy': ['where', 'unique', 'isin', 'info', 'copy'], 'os': [], 'gc': [], 'pickle': [], 'time': [], 'datetime': [], 'matplotlib': [], 'seaborn': [], 'sys': []} axis_0: 1, axis_1: 6
using-last-year-s-2nd-place.py : ['read_csv', 'head', 'read_csv', 'drop', 'head', 'count', 'groupby', 'rename', 'reset_index', 'count', 'groupby', 'rename', 'reset_index', 'reset_index', 'mean', 'groupby', 'rename', 'reset_index', 'mean', 'groupby', 'rename', 'rename', 'reset_index', 'count', 'groupby', 'rename', 'reset_index', 'count', 'groupby', 'reset_index', 'sort_values', 'drop_duplicates', 'concat', 'merge', 'merge', 'merge', 'merge', 'fillna', 'drop', 'read_csv', 'drop', 'read_csv', 'drop', 'head', 'copy', 'reset_index', 'head', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'sub', 'apply', 'apply', 'head', 'drop', 'rename', 'merge', 'drop', 'rename', 'merge', 'head', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'head', 'update', 'update', 'update', 'update', 'copy', 'copy', 'rename', 'rename', 'concat', 'head', 'read_csv', 'apply', 'apply', 'apply', 'head', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'apply', 'apply', 'drop', 'rename', 'merge', 'drop', 'rename', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'head', 'astype', 'min', 'max', 'unique', 'copy', 'reset_index', 'copy', 'reset_index', 'copy', 'min', 'max', 'min', 'min', 'max', 'min', 'mean', 'mean', 'copy', 'read_csv', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'apply', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'iterrows', 'array', 'iterrows', 'clip', 'array', 'copy', 'to_csv', 'head'] ['os', 're', 'sklearn', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] ['Counter', '*', '*', '*']Dict:{'os': ['rename'], 're': ['sub'], 'sklearn': [], 'numpy': ['mean', 'max', 'min', 'unique', 'clip', 'array', 'copy'], 'pandas': ['read_csv', 'concat', 'unique', 'array', 'merge'], 'seaborn': [], 'matplotlib': [], 'collections': ['update', 'copy']} axis_0: 0, axis_1: 20
feature-engineering-with-advanced-stats.py : ['read_csv', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'sum', 'sum', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot'] ['pi']Dict:{'numpy': ['sum'], 'pandas': ['read_csv'], 'matplotlib': [], 'math': []} axis_0: 0, axis_1: 28
ventilator-feature-engineering.py : ['read_csv', 'to_numpy', 'drop'] ['numpy', 'pandas', 'matplotlib.pyplot'] ['RobustScaler', 'normalize', 'train_test_split', 'butter', 'filtfilt', 'dump', 'add_features']Dict:{'numpy': [], 'pandas': ['read_csv'], 'matplotlib': [], 'sklearn': [], 'scipy': [], 'pickle': [], 'VFE': []} axis_0: 0, axis_1: 1
tps-feb-22-model-for-train-test-drift.py : ['read_csv', 'read_csv', 'head', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'duplicated', 'sum', 'duplicated', 'describe', 'drop', 'concat', 'astype', 'round', 'astype', 'round', 'head', 'unique', 'unique', 'unique', 'transform', 'concat', 'unique', 'sum', 'duplicated', 'drop_duplicates', 'transform', 'transform', 'copy', 'astype', 'astype', 'unique', 'round', 'read_csv', 'head', 'copy', 'drop', 'sum', 'array', 'mean', 'array', 'array', 'array', 'astype', 'astype', 'array', 'array', 'astype', 'astype', 'sort_values', 'value_counts', 'value_counts', 'concat', 'to_csv', 'head'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'math', 'statistics', 'scipy.stats', 'time', 'matplotlib.dates', 'dateutil.easter'] ['combinations', 'factorial', 'pearsonr', 'datetime', 'train_test_split', 'StratifiedKFold', 'GridSearchCV', 'TimeSeriesSplit', 'StandardScaler', 'OneHotEncoder', 'LabelEncoder', 'SimpleImputer', 'make_pipeline', 'make_column_transformer', 'confusion_matrix', 'ConfusionMatrixDisplay', 'accuracy_score', 'plot_roc_curve', 'roc_curve', 'RandomForestClassifier', 'ExtraTreesClassifier', 'LinearRegression', 'Ridge', 'PCA', 'XGBRegressor', 'XGBClassifier', 'CatBoostRegressor', 'CatBoostClassifier', 'LGBMRegressor', 'LGBMClassifier', 'keras', 'layers', 'callbacks']Dict:{'numpy': ['mean', 'sum', 'round', 'unique', 'array', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'array'], 'seaborn': [], 'matplotlib': [], 'itertools': [], 'math': [], 'statistics': ['mean'], 'scipy': [], 'time': [], 'datetime': [], 'dateutil': [], 'sklearn': ['transform'], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'tensorflow': []} axis_0: 5, axis_1: 9
uwmgi-pspnet-u-net-deeplabv3-swin-unet.py : ['read_csv', 'read_csv', 'info', 'head', 'join', 'join', 'map', 'map', 'drop', 'head', 'notna', 'head', 'map', 'map', 'reset_index', 'reset_index', 'reset_index', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'reset_index', 'dropna', 'reset_index', 'isna', 'reset_index', 'reset_index', 'reset_index', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'groupby', 'mean', 'std', 'unique', 'query', 'query', 'query', 'unique', 'unique', 'unique', 'array', 'join', 'query', '__iter__', '__iter__', '__iter__', '__init__', '__init__', 'sum', '__init__', 'interpolate', 'interpolate', 'interpolate', 'interpolate', '__init__', 'interpolate', '__init__', 'interpolate', '__init__', '__init__', '__init__', 'sum', 'pop', '__init__', '__init__', '__init__', '__init__', '__init__', 'add', 'mul', '__init__', '__init__', 'mean', 'eval', 'eval', 'where', 'join', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'plotly.graph_objects', 'plotly.figure_factory', 'plotly.offline', 'os', 'pathlib', 'gc', 'sys', 're', 'math', 'random', 'time', 'datetime', 'warnings', 'torch', 'torch.nn.functional', 'torchvision', 'torchvision.transforms.functional', 'segmentation_models_pytorch', 'tensorflow'] ['make_subplots', 'tqdm', 'pprint', 'nn', 'transforms', 'resnet18', 'summary', 'Image', 'keras', 'models', 'losses']Dict:{'numpy': ['mean', 'add', 'sum', 'array', 'where', 'unique', 'info', 'std'], 'pandas': ['isna', 'read_csv', 'eval', 'notna', 'unique', 'array'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'os': [], 'pathlib': [], 'gc': [], 'sys': [], 're': [], 'math': [], '': [], 'random': [], 'time': [], 'datetime': [], 'tqdm': [], 'pprint': ['__init__'], 'warnings': [], 'torch': ['interpolate'], 'torchvision': [], 'torchinfo': [], 'PIL': ['eval'], 'segmentation_models_pytorch': [], 'tensorflow': [], 'keras_unet_collection': []} axis_0: 2, axis_1: 1
clustering-on-numerical-and-categorical-features.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'info', 'info', 'info', 'head', 'nunique', 'nunique', 'describe', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'mode', 'mode', 'mode', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'std', 'count', 'count', 'reset_index', 'concat', 'describe', 'unique', 'mean', 'mode', 'mode', 'mode', 'max', 'min', 'mean', 'mean', 'max', 'min', 'mean', 'mean', 'sum', 'sum', 'reset_index', 'concat', 'describe', 'read_csv', 'reset_index', 'concat', 'isin', 'reset_index', 'describe', 'copy', 'unique', 'reset_index', 'reset_index', 'reset_index', 'describe', 'copy', 'astype', 'dropna', 'reset_index', 'astype', 'concat', 'select_dtypes', 'count', 'groupby', 'select_dtypes', 'count', 'groupby', 'copy', 'astype', 'astype', 'dropna', 'reset_index', 'astype', 'nunique', 'concat', 'select_dtypes', 'count', 'groupby', 'transform', 'unique', 'nunique', 'keys', 'groupby', 'describe', 'groupby', 'concat', 'keys', 'groupby', 'keys', 'groupby', 'value_counts', 'groupby', 'concat', 'keys', 'groupby', 'value_counts', 'groupby', 'concat', 'nunique', 'count', 'groupby', 'count', 'groupby', 'count', 'groupby'] ['numpy', 'pandas', 'scipy', 'matplotlib.pyplot', 'seaborn', 'matplotlib.ticker', 'plotly.express', 'plotly.graph_objects', 'os', 'sys', 'pathlib', 'gc', 're', 'math', 'random', 'time', 'datetime', 'sklearn', 'gower', 'umap', 'tensorflow', 'tensorflow_addons', 'torch', 'torch.nn', 'torch.optim', 'torch.nn.functional', 'warnings'] ['make_subplots', 'tqdm', 'Optional', 'Union', 'Tuple', 'OrderedDict', 'StratifiedKFold', 'StandardScaler', 'OrdinalEncoder', 'KPrototypes', 'AgglomerativeClustering', 'dendrogram', 'PCA', 'TSNE', 'keras', 'layers']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'isin', 'info', 'std', 'copy'], 'pandas': ['concat', 'unique', 'read_csv', 'value_counts'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'os,': [], 'sys,': [], 'pathlib,': [], 'gc': [], 're,': [], 'math,': [], 'random,': [], 'time': [], 'datetime': [], 'tqdm': [], 'typing': ['count'], 'collections': ['keys', 'copy'], 'sklearn': [], 'kmodes': [], 'gower': [], 'umap': [], 'tensorflow': [], 'tensorflow_addons': [], 'torch': [], '': [], 'warnings': []} axis_0: 4, axis_1: 6
tabnet-with-loop-feature-engineering-explained.py : ['concat', 'concat', 'read_pickle', 'read_pickle', 'read_pickle', 'read_pickle', 'reset_index', 'reset_index', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'mean', 'dropna', 'fillna', 'fillna', 'read_csv', 'merge', 'merge', 'astype', 'fillna', 'astype', 'fillna', 'nunique', 'transform', 'drop', 'drop', 'divide', 'sum', 'reset_index', 'astype', 'astype', 'copy', 'copy', 'join', 'join', 'add', 'read_pickle', 'read_pickle', 'reset_index', 'copy', 'reset_index', 'merge', 'merge', 'astype', 'fillna', 'fillna', 'concat'] ['pandas', 'numpy', 'gc', 'torch', 'plotly.express', 'riiideducation'] ['roc_auc_score', 'LabelEncoder', 'defaultdict', 'tqdm', 'TabNetClassifier', 'pyplot']Dict:{'pandas': ['concat', 'merge', 'read_pickle', 'read_csv'], 'numpy': ['mean', 'add', 'sum', 'divide', 'copy'], 'gc': [], 'sklearn': ['transform'], 'collections': ['copy'], 'tqdm': [], 'pytorch_tabnet': [], 'torch': ['mean', 'add', 'sum', 'concat', 'divide'], 'matplotlib': [], 'plotly': []} axis_0: 0, axis_1: 5
titanic-random-forest-cross-val-acc-0-83.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'nunique', 'nunique', 'nunique', 'nunique', 'copy', 'corr', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'describe', 'groupby', 'describe', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'apply', 'apply', 'max', 'value_counts', 'apply', 'idxmax', 'value_counts', 'fillna', 'sum', 'isnull', 'apply', 'notnull', 'apply', 'notnull', 'reset_index', 'groupby', 'reset_index', 'groupby', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'apply', 'apply', 'replace', 'replace', 'replace', 'replace', 'map', 'map', 'cut', 'cut', 'to_numeric', 'map', 'to_numeric', 'map', 'qcut', 'qcut', 'drop', 'drop', 'head', 'head', 'nunique', 'concat', 'nunique', 'concat', 'astype', 'apply', 'astype', 'apply', 'drop', 'drop', 'drop', 'drop', 'transform', 'round', 'set_index', 'sort_values', 'concat', 'head', 'info', 'value_counts', 'to_csv'] ['numpy', 'pandas', 'os', 'random', 'tensorflow', 'xgboost', 'matplotlib.pyplot', 'seaborn'] ['RandomForestClassifier', 'OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'roc_curve', 'auc', 'StratifiedKFold', 'OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'StandardScaler', 'train_test_split', 'classification_report', 'confusion_matrix', 'ConfusionMatrixDisplay']Dict:{'numpy': ['mean', 'max', 'sum', 'round', 'info', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'to_numeric', 'notnull', 'qcut'], 'os': ['replace'], 'random': [], 'tensorflow': ['round', 'concat'], 'xgboost': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], '=': [], 'pd': [], 'N)),': [], "columns=['Fold_{}'": [], 'for': [], 'i': [], 'in': [], 'range(1,': [], 'N': [], '+': [], '1)],': [], 'index=train_columns)': [], 'importances': []} axis_0: 0, axis_1: 7
house-price-all-about-house-price.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'concat', 'notnull', 'mean', 'std', 'where', 'head', 'drop', 'value_counts', 'sum', 'isnull', 'sort_values', 'sort_values', 'mean', 'mean', 'mean', 'std', 'skew', 'mean', 'mean', 'mean', 'std', 'skew', 'drop', 'apply', 'astype', 'astype', 'to_datetime', 'concat', 'rename', 'to_datetime', 'concat', 'rename', 'copy', 'pop', 'sum', 'isnull', 'melt', 'sort_values', 'where', 'sort_values', 'where', 'drop', 'drop', 'apply', 'sort_values', 'round', 'apply', 'sort_values', 'round', 'astype', 'notnull', 'astype', 'notnull', 'astype', 'notnull', 'astype', 'notnull', 'astype', 'notnull', 'astype', 'notnull', 'astype', 'notnull', 'astype', 'notnull', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'replace', 'replace', 'replace', 'apply', 'apply', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'apply', 'apply', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'boxplot', 'round', 'corr', 'sort_values', 'sort_values', 'drop', 'get_dummies', 'drop', 'copy', 'drop', 'drop', 'pop', 'drop', 'pop', 'round', 'concat', 'transform', '__init__', 'eval', 'squeeze', 'to_csv', 'head', 'sum', 'drop', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'warnings', 'pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'scipy.stats', 'torch', 'torch.nn', 'torch.optim', 'missingno', 'plotly.express', 'missingno', 'umap', 'umap.plot', 'plotly', 'plotly.express'] ['ColumnTransformer', 'Pipeline', 'OneHotEncoder', 'mean_squared_error', 'PCA', 'StandardScaler', 'rcParams', 'LayerConductance', 'LayerActivation', 'LayerIntegratedGradients', 'IntegratedGradients', 'DeepLift', 'GradientShap', 'NoiseTunnel', 'FeatureAblation', 'KNNImputer', 'Prophet', 'plot_plotly', 'plot_components_plotly', 'skew', 'skew', 'GradientBoostingRegressor', 'plot_partial_dependence', 'UMAP', '*']Dict:{'numpy': ['mean', 'squeeze', 'sum', 'where', 'round', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'melt', 'eval', 'concat', 'value_counts', 'get_dummies', 'notnull', 'to_datetime'], 'os': ['rename', 'replace'], 'warnings': [], 'seaborn': ['boxplot'], 'matplotlib': ['pop', '__init__', 'copy'], 'sklearn': [], 'scipy': ['__init__'], 'torch': [], 'captum': [], 'missingno': [], 'fbprophet': [], 'plotly': [], 'umap': [], 'pycaret': []} axis_0: 3, axis_1: 11
multi-cat-encodings.py : ['join', 'read_csv', 'read_csv', 'head', 'head', 'fillna', 'mode', 'fillna', 'mode', 'read_csv', 'read_csv', 'drop', 'drop', 'unique', 'unique', 'apply', 'apply', 'apply', 'apply', 'mode', 'unique', 'fillna', 'unique', 'fillna', 'replace', 'replace', 'replace', 'replace', 'unique', 'notnull', 'notnull', 'transform', 'notnull', 'notnull', 'transform', 'notnull', 'fillna', 'fillna', 'reset_index', 'value_counts', 'merge', 'fillna', 'merge', 'transform', 'transform', 'astype', 'astype', 'astype', 'astype', 'head', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'category_encoders'] ['OneHotEncoder', 'LabelEncoder', 'tqdm_notebook', 'KFold', 'LabelEncoder']Dict:{'numpy': ['unique'], 'pandas': ['read_csv', 'value_counts', 'unique', 'notnull', 'merge'], 'sklearn': ['transform'], 'tqdm': [], 'os': ['replace'], 'category_encoders': []} axis_0: 0, axis_1: 2
tpsapr22-fe-pseudo-labels-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'merge', 'astype', 'aggregate', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'merge', 'merge', 'merge', 'copy', 'head', 'to_csv', 'round', 'rename', 'concat', 'drop', 'to_csv'] ['pandas', 'numpy', 'warnings'] ['LGBMClassifier', 'StratifiedKFold', 'roc_auc_score', 'LGBMClassifier']Dict:{'pandas': ['concat', 'merge', 'read_csv'], 'numpy': ['round', 'copy'], 'warnings': [], '': []} axis_0: 0, axis_1: 0
sklearn-boost-w-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'reset_index', 'drop', 'rename', 'select_dtypes', 'concat', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['ensemble']Dict:{'pandas': ['concat', 'read_csv'], 'numpy': [], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 0
ncaaw20-eda-and-nn-lgb-catb-starter-7c65f8.py : ['fillna', 'median', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'mode', 'concat', 'copy', 'transform', 'transform', 'transform', 'concat', 'reset_index', 'mean', 'groupby', 'merge', 'reset_index', 'sort_values', 'items', '__init__', '__init__', 'get', 'get', 'get', 'get', 'get', 'get', 'items', 'items', 'mean', 'mean', 'max', 'read_csv', 'read_csv', 'keys', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'apply', 'head', 'head', 'head', 'head', 'head', 'head', 'read_csv', 'head', 'drop', 'apply', 'apply', 'apply', 'head', 'head', 'merge', 'merge', 'head', 'merge', 'head', 'merge', 'drop', 'merge', 'drop', 'head', 'merge', 'drop_duplicates', 'drop', 'merge', 'drop_duplicates', 'drop', 'head', 'merge', 'drop_duplicates', 'head', 'merge', 'drop_duplicates', 'head', 'merge', 'drop_duplicates', 'drop', 'merge', 'drop_duplicates', 'drop', 'head', 'merge', 'drop_duplicates', 'drop', 'merge', 'drop_duplicates', 'drop', 'head', 'drop', 'head', 'head', 'reset_index', 'agg', 'groupby', 'join', 'reset_index', 'agg', 'groupby', 'join', 'head', 'head', 'merge', 'merge', 'merge', 'merge', 'drop', 'head', 'merge', 'merge', 'merge', 'merge', 'drop', 'head', 'copy', 'copy', 'head', 'head', 'reset_index', 'concat', 'head', 'fillna', 'transform', 'head', 'read_csv', 'hist', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'copy', 'datetime', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'xgboost', 'lightgbm', 'optuna', 'json', 'ast', 'time', 'keras', 'tensorflow', 'math', 'warnings', 'os', 'glob', 'gc'] ['StandardScaler', 'MinMaxScaler', 'OneHotEncoder', 'shuffle', 'stats', 'train_test_split', 'StratifiedKFold', 'KFold', 'cross_val_score', 'GridSearchCV', 'RepeatedStratifiedKFold', 'StandardScaler', 'LabelEncoder', 'CatBoostRegressor', 'CatBoostClassifier', 'plot_optimization_history', 'model_selection', 'mean_squared_error', 'mean_absolute_error', 'accuracy_score', 'roc_auc_score', 'log_loss', 'classification_report', 'confusion_matrix', 'linear_model', 'Dense', 'Sequential', 'Callback', 'EarlyStopping', 'ReduceLROnPlateau', 'LambdaCallback', 'Adam', 'SGD', 'Model', 'Input', 'Layer', 'Dense', 'Concatenate', 'Reshape', 'Dropout', 'merge', 'Add', 'BatchNormalization', 'GaussianNoise', 'Embedding', 'backend', 'Layer', '*', 'BaseEstimator', 'TransformerMixin', 'LabelEncoder', 'backend']Dict:{'numpy': ['mean', 'median', 'max', 'copy'], 'pandas': ['concat', 'merge', 'read_csv'], 'matplotlib': ['get', 'hist'], 'seaborn': [], 'sklearn': ['transform', '__init__'], 'copy': ['copy'], 'datetime': [], 'scipy': ['mode'], 'plotly': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'optuna': ['__init__'], 'json': [], 'ast': [], 'time': [], 'keras': [], 'tensorflow': ['concat'], 'math': [], 'warnings': [], 'os': [], 'glob': [], 'gc': []} axis_0: 0, axis_1: 12
intro-to-time-series-forecasting.py : ['read_csv', 'reset_index', 'notna', 'drop', 'head', 'to_datetime', 'head', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'sort_values', 'shift', 'head', 'value_counts', 'drop', 'copy', 'where', 'fillna', 'fillna', 'copy', 'where', 'fillna', 'fillna', 'isna', 'fillna', 'fillna', 'mean', 'fillna', 'fillna', 'ffill', 'fillna', 'interpolate', 'fillna', 'interpolate', 'interpolate', 'interpolate', 'reset_index', 'sum', 'resample', 'reset_index', 'sum', 'resample', 'reset_index', 'sum', 'resample', 'reset_index', 'mean', 'resample', 'reset_index', 'mean', 'resample', 'reset_index', 'mean', 'resample', 'reset_index', 'mean', 'resample', 'reset_index', 'sum', 'resample', 'mean', 'rolling', 'std', 'rolling', 'mean', 'rolling', 'std', 'rolling', 'mean', 'rolling', 'std', 'rolling', 'mean', 'rolling', 'std', 'rolling', 'mean', 'rolling', 'std', 'rolling', 'mean', 'head', 'var', 'head', 'mean', 'tail', 'var', 'tail', 'concat', 'copy', 'astype', 'round', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'apply', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'diff', 'diff', 'equals', 'cumsum', 'head', 'head', 'shift', 'shift', 'shift', 'shift', 'shift', 'shift', 'shift', 'shift', 'shift', 'shift', 'shift', 'shift', 'shift', 'shift', 'shift', 'corr', 'corr', 'cumsum', 'shift', 'reset_index', 'reset_index', 'mean', 'rolling', 'reset_index', 'mean', 'rolling', 'reset_index', 'reset_index', 'concat', 'concat'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'math', 'warnings'] ['mean_absolute_error', 'mean_squared_error', 'datetime', 'date', 'adfuller', 'seasonal_decompose', 'autocorrelation_plot', 'plot_acf', 'plot_pacf', 'TimeSeriesSplit', 'ARIMA', 'VAR']Dict:{'numpy': ['mean', 'var', 'sum', 'where', 'round', 'diff', 'std', 'cumsum', 'copy'], 'pandas': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'math': [], 'warnings': [], '#': [], 'Supress': [], '': [], 'datetime': [], 'statsmodels': []} axis_0: 0, axis_1: 5
titanic-your-first-notebook-for-tabular-data.py : ['join', 'read_csv', 'read_csv', 'info', 'concat', 'drop', 'head', 'mean', 'copy', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'median', 'replace', 'replace', 'replace', 'replace', 'apply', 'drop', 'head', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'copy', 'replace', 'replace', 'replace', 'replace', 'apply', 'drop', 'info', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'read_csv', 'head', 'read_csv', 'to_csv'] ['warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'tensorflow', 'torch', 'os'] ['clear_output', 'ProfileReport', 'LabelEncoder', 'StandardScaler', 'StratifiedKFold', 'cross_validate', 'train_test_split', 'LogisticRegression', 'KNeighborsClassifier', 'SVC', 'RandomForestClassifier', 'GradientBoostingClassifier', 'HistGradientBoostingClassifier', 'StackingClassifier', 'accuracy_score', 'roc_curve', 'roc_auc_score', 'CatBoostClassifier', 'XGBClassifier', 'LGBMClassifier', 'TabNetClassifier', 'deeptable', 'deepnets']Dict:{'IPython': [], 'warnings': [], 'numpy': ['mean', 'median', 'info', 'copy'], 'pandas': ['concat', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'pandas_profiling': [], 'sklearn': [], 'catboost': [], 'xgboost': ['apply'], 'lightgbm': [], 'tensorflow': ['concat'], 'torch': ['mean', 'median', 'mode', 'concat'], 'pytorch_tabnet': [], 'deeptables': [], 'os': ['replace']} axis_0: 2, axis_1: 0
sample-voting-lb-17.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'head', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'tail', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'hist', 'clip', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'head', 'hist', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'last', 'groupby', 'mean', 'groupby', 'join', 'mean', 'median', 'median', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'tail', 'to_dict', 'set_index', 'copy', 'read_csv', 'read_csv', 'map', 'to_csv', 'head', 'read_csv', 'to_csv'] ['gc', 'numpy', 'pandas', 'xgboost'] ['tqdm']Dict:{'gc': [], 'numpy': ['mean', 'median', 'abs', 'sum', 'unique', 'clip', 'isin', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'to_datetime'], 'xgboost': [], 'tqdm': []} axis_0: 0, axis_1: 0
the-curse-of-dimensionality-dimension-reduction.py : ['max', 'concat'] ['numpy', 'pandas', 'matplotlib.pyplot', 'umap', 'umap.plot', 'plotly', 'plotly.express'] ['mnist', 'PCA', 'TruncatedSVD', 'NMF', 'LinearDiscriminantAnalysis', 'TSNE', 'UMAP']Dict:{'numpy': ['max'], 'pandas': ['concat'], 'matplotlib': [], 'keras': [], 'sklearn': [], 'umap': [], 'plotly': []} axis_0: 0, axis_1: 1
time-frequency-analysis-with-stft.py : ['read_csv', 'head', 'abs', 'shift', 'shift', 'min', 'min', 'max', 'max', 'read_csv', 'keys', 'keys', 'describe', 'copy', 'min'] ['numpy', 'pandas', 'matplotlib.colors', 'matplotlib.pyplot', 'scipy.signal', 'os', 'gc'] []Dict:{'numpy': ['abs', 'min', 'max', 'copy'], 'pandas': ['read_csv'], 'matplotlib': [], 'scipy': [], 'os': [], 'gc': []} axis_0: 0, axis_1: 0
feature-engineering-and-model-stacking.py : ['read_csv', 'read_csv', 'drop', 'drop', 'astype', 'astype', 'astype', 'concat', 'sum', 'isnull', 'mean', 'isnull', 'sum', 'isnull', 'mean', 'isnull', 'sum', 'isnull', 'mean', 'isnull', 'sum', 'isnull', 'mean', 'isnull', 'unique', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'sort_values', 'reset_index', 'sort_values', 'head', 'concat', 'sort_values', 'head', 'to_csv', 'to_csv', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'to_csv'] ['warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost'] ['uniform', 'randint', 'mean_squared_error', 'r2_score', 'train_test_split', 'GridSearchCV', 'RandomizedSearchCV', 'cross_validate', 'Pipeline', 'StandardScaler', 'RandomForestRegressor', 'GradientBoostingRegressor', 'StackingRegressor', 'ElasticNet', 'KNeighborsRegressor', 'SVR', 'CatBoostRegressor', 'LGBMRegressor', 'creation', 'discretisation', 'encoding', 'imputation', 'selection', 'transformation']Dict:{'warnings': [], 'numpy': ['mean', 'std', 'sum', 'unique'], 'pandas': ['concat', 'unique', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'scipy': ['mean', 'std'], 'sklearn': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'feature_engine': []} axis_0: 2, axis_1: 2
optiver-realized-ensemble.py : ['diff', 'sum', 'unique', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'read_parquet', 'apply', 'groupby', 'apply', 'groupby', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'apply', 'drop', 'read_parquet', 'apply', 'groupby', 'sum', 'mean', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'add_prefix', 'apply', 'drop', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'drop', 'merge', 'concat', 'join', 'read_pickle', 'fillna', 'mean', 'drop', 'unique', 'merge', 'fillna', 'mean', 'drop', 'transform', 'transform', 'squeeze', 'mean', 'read_pickle', 'read_csv', 'astype', 'astype', 'unique', 'merge', 'mean', 'drop', 'drop', 'astype', 'astype', 'read_pickle', 'read_csv', 'astype', 'astype', 'unique', 'merge', 'mean', 'drop', 'drop', 'astype', 'astype', 'transpose', 'diff', 'sum', 'unique', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'read_parquet', 'apply', 'groupby', 'apply', 'groupby', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'apply', 'drop', 'read_parquet', 'apply', 'groupby', 'sum', 'mean', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'add_prefix', 'apply', 'drop', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'drop', 'merge', 'concat', 'mean', 'unique', 'merge', 'unique', 'merge', 'read_csv', 'pivot', 'fillna', 'mean', 'head', 'array', 'sum', 'sum', 'mean', 'replace', 'replace', 'transform', 'update', 'fillna', 'mean', 'fillna', 'mean', 'astype', 'isin', 'isin', 'isin', 'isin', 'transform', 'transform', 'clip', 'drop', 'drop', 'astype', 'astype', 'info', 'read_csv', 'join', 'info', 'read_csv', 'join', 'info', 'read_csv', 'join', 'info', 'join', 'info', 'info', 'read_parquet', 'join', 'astype', 'read_parquet', 'join', 'astype', 'info', 'info', 'merge', 'join', 'diff', 'sum', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'join', 'merge', 'merge', 'sort_values', 'fillna', 'merge', 'sort_values', 'fillna', 'concat', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'merge', 'nunique', 'nunique', 'to_pickle', 'info', 'fillna', 'replace', 'merge', 'merge', 'astype', 'astype', 'join', 'info', 'read_pickle', 'fillna', 'replace', 'merge', 'merge', 'astype', 'astype', 'info', 'sum', 'sum', 'copy', 'mean', 'dropna', 'hist', 'hist', 'info', 'unique', 'query', 'query', 'info', 'read_csv', 'to_csv'] ['os', 'glob', 'pandas', 'numpy', 'scipy', 'lightgbm', 'warnings', 'pickle', 'matplotlib.pyplot', 'seaborn', 'torch', 'torch.nn', 'torch.optim', 'torch.nn.functional', 'random', 'torch', 'pandas', 'numpy', 'os', 'gc', 'joblib', 'pandas', 'pandas', 'numpy', 'pandas', 'glob', 'os', 'gc', 'matplotlib.pyplot', 'seaborn', 'numpy.matlib', 'tensorflow', 'numpy', 'lightgbm', 'warnings', 'numpy', 'pandas', 'gc', 'pathlib', 'json', 'time', 'requests', 'glob', 'os', 'joblib', 'lightgbm', 'matplotlib.pyplot', 'matplotlib.style', 'seaborn', 'warnings'] ['Parallel', 'delayed', 'KFold', 'ReduceLROnPlateau', 'TabNetPretrainer', 'TabNetRegressor', 'Metric', 'LabelEncoder', 'mean_squared_error', 'Path', 'StandardScaler', 'Pool', 'CatBoostRegressor', 'display', 'HTML', 'Parallel', 'delayed', 'preprocessing', 'model_selection', 'MinMaxScaler', 'QuantileTransformer', 'r2_score', 'seed', 'keras', 'backend', 'sigmoid', 'get_custom_objects', 'Activation', 'KFold', 'tqdm', 'Pool', 'cpu_count', 'datetime', 'relativedelta', 'FR', 'model_selection', 'venn2', 'venn3', 'pyplot', 'ScalarFormatter', 'getLogger', 'INFO', 'FileHandler', 'Formatter', 'StreamHandler', 'tqdm', 'r2_score']Dict:{'os': ['replace'], 'glob': [], 'joblib': [], 'pandas': ['to_pickle', 'read_csv', 'concat', 'read_parquet', 'read_pickle', 'unique', 'array', 'merge', 'pivot'], 'numpy': ['transpose', 'mean', 'squeeze', 'diff', 'sum', 'array', 'unique', 'clip', 'isin', 'info', 'std', 'copy'], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'warnings': [], 'pickle': [], 'matplotlib': [], 'seaborn': [], 'torch': ['transpose', 'mean', 'squeeze', 'sum', 'concat', 'unique', 'clip', 'isin', 'diff', 'std'], 'random': [], 'pytorch_tabnet': [], 'pathlib': [], 'gc': [], 'catboost': [], 'IPython': [], 'tensorflow': [], 'keras': [], 'tqdm': ['update'], 'json': [], 'multiprocessing': [], 'time': [], 'requests': ['head'], 'datetime': ['replace'], 'dateutil': [], 'matplotlib_venn': []} axis_0: 5, axis_1: 2
home-credit-with-feature-engineering.py : ['corr', 'abs', 'where', 'astype', 'bool', 'get_dummies', 'nunique', 'nunique', 'value_counts', 'where', 'isin', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'read_csv', 'read_csv', 'reset_index', 'drop', 'pop', 'drop', 'replace', 'replace', 'notnull', 'replace', 'drop', 'astype', 'astype', 'astype', 'astype', 'astype', 'mean', 'isnull', 'factorize', 'drop', 'read_csv', 'apply', 'drop', 'agg', 'groupby', 'read_csv', 'rename', 'reset_index', 'count', 'groupby', 'merge', 'rename', 'reset_index', 'nunique', 'groupby', 'merge', 'apply', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'get_dummies', 'agg', 'groupby', 'merge', 'replace', 'rename', 'reset_index', 'nunique', 'groupby', 'merge', 'replace', 'apply', 'drop', 'join', 'drop', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'read_csv', 'replace', 'replace', 'replace', 'replace', 'replace', 'drop', 'drop', 'isnull', 'drop', 'replace', 'div', 'replace', 'div', 'map', 'drop', 'replace', 'replace', 'replace', 'replace', 'nunique', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'read_csv', 'agg', 'groupby', 'groupby', 'read_csv', 'apply', 'apply', 'agg', 'groupby', 'groupby', 'read_csv', 'rename', 'reset_index', 'nunique', 'groupby', 'merge', 'rename', 'reset_index', 'nunique', 'groupby', 'merge', 'rename', 'reset_index', 'max', 'groupby', 'rename', 'reset_index', 'sum', 'groupby', 'merge', 'astype', 'drop', 'agg', 'groupby', 'groupby', 'rename', 'sub', 'notnull', 'isnull', 'concat', 'to_csv', 'join', 'join', 'join', 'join', 'join', 'to_csv'] ['numpy', 'pandas', 'time', 'gc', 'matplotlib.pyplot', 'seaborn', 'warnings', 're', 'xgboost', 'lightgbm', 'seaborn', 'matplotlib.pyplot'] ['contextmanager', 'LGBMClassifier', 'roc_auc_score', 'KFold', 'StratifiedKFold', 'CatBoostClassifier']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'where', 'isin'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'factorize', 'notnull', 'merge'], 'time': [], 'gc': [], 'contextlib': [], 'lightgbm': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'warnings': [], 're': ['sub'], 'xgboost': [], 'catboost': []} axis_0: 1, axis_1: 13
a-friendly-introduction-to-cnns-in-keras.py : ['head', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add'] ['numpy', 'pandas', 'matplotlib.pyplot', 'random', 'os', 'glob', 'zipfile', 'wandb'] ['ImageDataGenerator', 'load_img', 'plot_model', 'to_categorical', 'Sequential', 'Conv2D', 'MaxPooling2D', 'Dropout', 'Flatten', 'Dense', 'Activation', 'BatchNormalization', 'train_test_split', 'Image', 'ResNet50', 'Xception', 'Input', 'Model', 'UserSecretsClient', 'WandbCallback', 'Adam', 'EarlyStopping']Dict:{'numpy': ['add'], 'pandas': [], 'tensorflow': [], 'keras': [], 'sklearn': [], 'matplotlib': [], 'random': [], 'os': [], 'PIL': [], 'glob': [], 'zipfile': []} axis_0: 0, axis_1: 0
moa-pretrained-non-scored-targets-as-meta-features.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'copy', 'copy', 'transform', 'transform', 'concat', 'transform', 'transform', 'concat', 'concat', 'concat', 'transform', 'transform', 'concat', 'concat', 'var', 'concat', 'concat', 'copy', 'copy', 'concat', 'get_dummies', 'get_dummies', 'copy', 'copy', 'concat', 'get_dummies', 'get_dummies', 'concat', 'concat', 'concat', 'get_dummies', 'get_dummies', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'concat', 'concat', 'nunique', 'rename', 'drop', 'merge', 'reset_index', 'reset_index', 'drop', 'drop', 'drop', 'get_dummies', 'get_dummies', 'eval', 'eval', '__init__', 'sum', 'mean', '__init__', 'astype', 'reset_index', 'reset_index', 'merge', 'drop', 'astype', 'reset_index', 'reset_index', 'fillna', 'merge', 'drop', 'to_csv', 'to_csv'] ['sys', 'numpy', 'random', 'pandas', 'matplotlib.pyplot', 'os', 'copy', 'torch', 'torch.nn', 'torch.nn.functional', 'torch.optim', 'warnings', 'torch', 'torch.nn.functional'] ['MultilabelStratifiedKFold', 'preprocessing', 'log_loss', 'roc_auc_score', 'StandardScaler', 'PCA', 'load', 'dump', 'QuantileTransformer', 'VarianceThreshold', 'KMeans', '_WeightedLoss']Dict:{'sys': [], 'iterstrat': [], 'numpy': ['mean', 'var', 'sum', 'std', 'copy'], 'random': [], 'pandas': ['read_csv', 'eval', 'concat', 'get_dummies', 'merge'], 'matplotlib': [], 'os': ['rename'], 'copy': ['copy'], 'sklearn': [], 'pickle': [], 'torch': [], 'warnings': []} axis_0: 2, axis_1: 14
feature-engineering-book-sales.py : ['join', 'read_csv', 'head', 'unique', 'unique', 'unique', 'info', 'to_datetime', 'read_csv', 'info', 'unique', 'unique', 'unique', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'to_datetime', 'apply', 'to_datetime', 'apply', 'astype', 'astype', 'reset_index', 'sum', 'groupby', 'boxplot', 'reset_index', 'sum', 'groupby', 'boxplot', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'boxplot', 'get_dummies', 'get_dummies', 'read_csv', 'to_csv', 'round', 'sort_values'] ['numpy', 'pandas', 'datetime', 'os', 'seaborn', 'matplotlib.pyplot'] ['XGBRegressor', 'train_test_split']Dict:{'numpy': ['round', 'info', 'sum', 'unique'], 'pandas': ['to_datetime', 'get_dummies', 'unique', 'read_csv'], 'datetime': [], 'os': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'xgboost': ['apply'], 'sklearn': [], '=': [], '[1,': [], '2,': [], '3,': [], '4,': [], '5,': [], '6,': [], '7,': [], '8,': [], '9,': [], '10,': [], '11,': [], '12,16,17,': [], '': []} axis_0: 0, axis_1: 0
writing-processes-baseline-v2-lgbm-nn.py : ['unique', 'sample', 'isin', 'head', 'head', 'head', 'groupby', 'reset_index', 'quantile', 'quantile', 'quantile', 'kurt', 'apply', 'drop', 'apply', 'explode', 'apply', 'agg', 'groupby', 'join', 'count', 'groupby', 'fillna', 'reset_index', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'agg', 'groupby', 'join', 'count', 'groupby', 'fillna', 'reset_index', 'apply', 'explode', 'apply', 'apply', 'apply', 'reset_index', 'agg', 'groupby', 'join', 'reset_index', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'concat', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'concat', 'reset_index', 'agg', 'groupby', 'items', 'keys', 'sum', 'keys', 'sum', 'concat', 'reset_index', 'agg', 'groupby', 'items', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'to_csv', 'merge', 'merge', 'merge', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'read_csv', 'to_csv', 'head', 'head', 'merge', 'abs', 'keys', 'std', 'set_index', 'mean', 'std', 'set_index', 'mean', 'to_csv', 'clip', 'mean', 'merge', 'rename', 'head', 'sort_values', 'min', 'max', 'sort_values', 'corr', 'sort_values', 'median', 'groupby', 'boxplot', 'astype', 'items', 'copy', 'items', 'items', 'sort_values', 'to_csv'] ['warnings', 'os', 'gc', 're', 'random', 'pprint', 'pickle', 'time', 'copy', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'catboost', 'optuna', 'joblib'] ['Counter', 'defaultdict', 'tqdm', 'LabelEncoder', 'PowerTransformer', 'RobustScaler', 'FunctionTransformer', 'KFold', 'StratifiedKFold', 'GroupKFold', 'train_test_split', 'TfidfVectorizer', 'TruncatedSVD', 'PCA', 'GradientBoostingRegressor', 'HistGradientBoostingRegressor', 'RandomForestRegressor', 'ExtraTreesRegressor', 'AdaBoostRegressor', 'SVR', 'Pipeline', 'KMeans', 'Lasso', 'Ridge', 'ElasticNet', 'KNeighborsRegressor', 'mean_squared_error', 'SimpleImputer', 'TabularAutoML', 'Task']Dict:{'warnings': [], 'os': ['rename', 'replace'], 'gc': [], 're': [], 'random': ['sample'], 'collections': ['items', 'keys', 'copy'], 'pprint': [], 'pickle': [], 'time': [], 'copy': ['copy'], 'numpy': ['mean', 'median', 'quantile', 'max', 'abs', 'sum', 'min', 'unique', 'clip', 'isin', 'std', 'copy'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'optuna': [], 'joblib': [], 'lightautoml': []} axis_0: 1, axis_1: 10
future-is-here.py : ['read_csv', 'read_csv', 'array', 'unique', 'isin', 'isin', 'fillna', 'to_datetime', 'sort_values', 'astype', 'shift', 'groupby', 'astype', 'shift', 'groupby', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'factorize', 'concat', 'mean', 'groupby', 'map', 'sort_values', 'mean', 'groupby', 'mean', 'median', 'sum', 'sum', 'fillna', 'sum', 'isnull', 'concat', 'mean', 'groupby', 'mean', 'median', 'sum', 'sum', 'fillna', 'sum', 'isnull', 'concat', 'sum', 'groupby', 'reset_index', 'concat', 'mean', 'groupby', 'map', 'sort_values', 'to_csv'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'time', 'warnings', 'lightgbm', 'warnings'] ['mean_squared_error', 'SettingWithCopyWarning', 'GroupKFold', 'XGBRegressor']Dict:{'os': [], 'pandas': [], 'numpy': ['mean', 'median', 'sum', 'unique', 'isin', 'array'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'gc': [], 'time': [], 'warnings': [], 'lightgbm': [], '=': [], 'pd': [], 'np': [], "importances['feature']": [], 'xgboost': []} axis_0: 2, axis_1: 12
eda-training-a-1st-model-submission.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'sum', 'isna', 'read_csv', 'rename', 'astype', 'concat', 'reset_index', 'copy', 'transform', 'transform', 'mean', 'sum', 'mean', 'mean', 'stack', 'head', 'to_csv'] ['pandas', 'numpy', 'warnings', 'lightgbm'] ['YouTubeVideo', 'Path', 'LGBMClassifier', 'LabelEncoder', 'Pipeline', 'roc_auc_score', 'StratifiedKFold', 'CatBoostClassifier']Dict:{'IPython': [], 'pandas': ['isna', 'concat', 'read_csv'], 'pathlib': ['rename'], 'numpy': ['mean', 'stack', 'sum', 'copy'], 'warnings': [], 'lightgbm': [], 'sklearn': [], 'catboost': []} axis_0: 0, axis_1: 0
wsi-preprocessing-tiling-tissue-segmentation.py : ['read_csv', 'where', 'join', 'reset_index', 'unique', 'copy', 'pad', 'transpose', 'pad', 'transpose', 'mean', 'mean', 'join', 'join', 'join', 'join'] ['gc', 'os', 'cv2', 'zipfile', 'rasterio', 'numpy', 'math', 'pandas', 'tifffile', 'seaborn', 'matplotlib.pyplot'] ['Image', 'tqdm', 'Window', 'Dataset']Dict:{'gc': [], 'os': [], 'cv2': [], 'zipfile': [], 'rasterio': [], 'numpy': ['transpose', 'mean', 'where', 'unique', 'pad', 'copy'], 'math': [], 'pandas': ['unique', 'read_csv'], 'PIL': [], 'tifffile': [], 'seaborn': [], 'tqdm': [], 'matplotlib': [], 'torch': []} axis_0: 0, axis_1: 0
house-prices-feature-selection.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'apply', 'cut', 'astype', 'astype', 'astype', 'notna', 'astype', 'notna', 'astype', 'notna', 'astype', 'notna', 'astype', 'astype', 'astype', 'sum', 'astype', 'sum', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'gt', 'sum', 'gt', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'drop', 'drop', 'unique', 'transform', 'skew', 'rename', 'melt', 'astype', 'apply', 'reset_index', 'sort_values', 'abs', 'keys', 'mean', 'median', 'max', 'mean', 'median', 'min', 'mean', 'median', 'max', 'mean', 'median', 'min', 'mean', 'mean', 'mean', 'median', 'max', 'mean', 'median', 'min', 'mean', 'median', 'max', 'mean', 'median', 'min', 'mean', 'median', 'max', 'mean', 'median', 'min', 'mean', 'median', 'max', 'mean', 'median', 'min', 'mean', 'median', 'max', 'mean', 'median', 'min', 'mean', 'median', 'max', 'mean', 'median', 'min', 'sort_values', 'mean', 'mean', 'median', 'max', 'mean', 'median', 'min', 'mean', 'median', 'max', 'mean', 'median', 'min', 'set_index', 'sort_values', 'keys', 'to_csv'] ['numpy', 'pandas', 'warnings', 'sklearn', 'seaborn'] ['partial', 'defaultdict', 'Counter', 'chain', 'heappush', 'patch_sklearn', 'pyplot', 'spearmanr', 'pearsonr', 'hierarchy', 'squareform', 'pdist', 'clone', 'mean_squared_error', 'SimpleImputer', 'Pipeline', 'ColumnTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler', 'OneHotEncoder', 'OrdinalEncoder', 'permutation_importance', 'SequentialFeatureSelector', 'SelectKBest', 'SelectFromModel', 'RFECV', 'mutual_info_regression', 'f_regression', 'r_regression', 'StratifiedKFold', 'cross_validate', 'GridSearchCV', 'check_cv', 'Ridge', 'RidgeCV', 'HuberRegressor', 'OrthogonalMatchingPursuitCV', 'OrthogonalMatchingPursuit', 'Lasso', 'LassoCV', 'Lars', 'LarsCV', 'LassoLars', 'LassoLarsCV', 'ElasticNet', 'ElasticNetCV', 'GradientBoostingRegressor', 'BaseEstimator', 'TransformerMixin', 'SelectorMixin', 'LinearRegression', 'r2_score']Dict:{'numpy': ['mean', 'median', 'max', 'abs', 'sum', 'round', 'min', 'unique'], 'pandas': ['read_csv', 'cut', 'melt', 'notna', 'unique'], 'warnings;': [], 'warnings': [], 'functools': [], 'collections': ['keys'], 'itertools': [], 'heapq': [], 'sklearnex': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'category_encoders': [], 'mlxtend': []} axis_0: 0, axis_1: 2
tpsmar22-without-machine-learning.py : ['read_csv', 'read_csv', 'astype', 'median', 'groupby', 'merge', 'reset_index', 'to_csv', 'hist', 'hist'] ['numpy', 'pandas', 'matplotlib.pyplot'] ['MaxNLocator', 'PercentFormatter', 'cycler', 'display']Dict:{'numpy': ['median'], 'pandas': ['merge', 'read_csv'], 'matplotlib': [], 'cycler': [], 'IPython': []} axis_0: 0, axis_1: 0
recursion-2019-load-resize-and-save-images.py : ['read_csv', 'read_csv', 'head', 'tail', 'astype', 'join', 'concat', 'concat', 'apply', 'apply', 'to_csv', 'to_csv'] ['os', 'sys', 'zipfile', 'numpy', 'pandas', 'cv2', 'matplotlib.pyplot', 'rxrx.io'] ['tqdm', 'Image']Dict:{'os': [], 'sys': [], 'zipfile': [], 'numpy': [], 'pandas': ['concat', 'read_csv'], 'cv2': [], 'matplotlib': [], 'tqdm': [], 'PIL': [], 'rxrx': []} axis_0: 0, axis_1: 0
detecting-malwares-with-lgbm.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'items', 'items', 'read_csv', 'read_csv', 'nunique', 'keys', 'nunique', 'reset_index', 'value_counts', 'concat', 'reset_index', 'set_index', 'max', 'fillna', 'to_dict', 'map', 'get', 'map', 'get', 'factorize', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings', 'gc', 'time', 'sys', 'datetime', 'matplotlib.pyplot', 'seaborn', 'plotly.graph_objs'] ['KFold', 'tqdm', 'mean_squared_error', 'metrics', 'init_notebook_mode', 'iplot', 'tools']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'isin'], 'pandas': ['concat', 'factorize', 'read_csv', 'value_counts'], 'matplotlib': ['get'], 'seaborn': [], 'lightgbm': [], 'sklearn': [], 'warnings': [], 'gc': [], 'time': [], 'sys': [], 'datetime': [], 'tqdm': [], 'plotly': []} axis_0: 1, axis_1: 0
fiverr-extensive-eda.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'value_counts', 'concat', 'value_counts', 'value_counts', 'info', 'info', 'sum', 'isna', 'sum', 'isna', 'nunique', 'rename', 'concat', 'drop', 'transpose', 'describe', 'rename', 'concat', 'drop', 'transpose', 'describe', 'nunique', 'drop', 'dropna', 'corr', 'sort_values', 'value_counts', 'merge', 'isna', 'astype', 'fillna', 'array', 'drop', 'select_dtypes', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'info', 'nunique', 'nunique', 'nunique', 'nunique', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'rename', 'drop', 'corr', 'sort_values', 'rename', 'concat', 'corr', 'drop', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['colored', 'filterwarnings', 'tqdm', 'clear_output', 'collect']Dict:{'numpy': ['transpose', 'max', 'sum', 'min', 'info', 'array'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'array', 'merge'], 'termcolor': [], 'warnings': [], 'tqdm': [], 'IPython': [], 'gc': [], 'matplotlib': [], 'seaborn': []} axis_0: 5, axis_1: 7
pog-youtube-likes-svr-on-image-embedd.py : ['read_parquet', 'read_parquet', 'read_csv', 'read_parquet', 'read_parquet', 'unique', 'isin', 'astype', 'agg', 'groupby', 'merge', 'merge', 'fillna', 'fillna', 'to_datetime', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'map', 'to_dict', 'value_counts', 'map', 'to_dict', 'nunique', 'groupby', 'astype', 'rank', 'groupby', 'concat', 'get_dummies', 'concat', 'get_dummies', 'concat', 'get_dummies', 'copy', 'reset_index', 'concat', 'copy', 'reset_index', 'query', 'copy', 'reset_index', 'query', 'copy', 'reset_index', 'copy', 'query', 'query', 'query', 'query', 'query', 'query', 'astype', 'fillna', 'copy', 'reset_index', 'copy', 'query', 'query', 'query', 'query', 'astype', 'astype', 'fillna', 'fillna', 'query', 'query', 'astype', 'fillna', 'copy', 'reset_index', 'copy', 'query', 'query', 'query', 'query', 'astype', 'astype', 'fillna', 'fillna', 'query', 'query', 'mean', 'corr', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pylab', 'seaborn', 'lightgbm', 'warnings'] ['mean_absolute_error', 'PCA', 'KFold', 'SVR', 'SVC', 'SVC']Dict:{'pandas': ['read_csv', 'concat', 'value_counts', 'read_parquet', 'get_dummies', 'unique', 'merge', 'to_datetime'], 'numpy': ['mean', 'isin', 'unique', 'copy'], 'matplotlib': ['mean', 'isin', 'unique', 'copy'], 'seaborn': [], 'sklearn': [], 'cuml': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 4
nn-outputs-gaussian-distribution-directly.py : ['read_csv', 'head', 'isna', 'clip', 'apply', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'apply', 'isna', 'replace', 'apply', 'isna', 'apply', 'isna', 'apply', 'apply', 'isna', 'apply', 'isna', 'replace', 'replace', 'replace', 'apply', 'isna', 'replace', 'apply', 'isna', 'replace', 'replace', 'apply', 'astype', 'rename', 'merge', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'map', 'apply', 'merge', 'apply', 'merge', 'reset_index', 'sort_values', 'sort_values', 'sort_values', 'value_counts', 'where', 'isin', 'value_counts', 'where', 'isin', 'to_pickle', 'drop', 'unique', 'unique', 'fillna', 'astype', 'value_counts', 'unique', 'transform', 'fillna', 'std', 'std', 'std', 'std', 'reset_index', 'reset_index', 'transpose', 'stack', 'reset_index', 'reset_index', 'transpose', 'stack', 'reset_index', 'apply', 'mean', '__init__', 'subtract', 'cumsum', 'join', 'mean', 'mean', 'fillna', 'astype', 'isin', 'sum', 'transform', 'fillna', 'transform', 'reset_index', 'transpose', 'stack', 'reset_index', 'reset_index', 'transpose', 'stack', 'reset_index', 'clip', 'mean', 'diff', 'mean', 'mean'] ['math', 'numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib', 'seaborn', 'datetime', 'tqdm', 'keras', 'tensorflow', 'warnings', 'matplotlib', 'matplotlib.pyplot', 'matplotlib.cm', 'seaborn', 'tensorflow_probability', 'os'] ['nflrush', 'RandomForestRegressor', 'StandardScaler', 'LabelEncoder', 'mnist', 'Sequential', 'Dense', 'Dropout', 'Flatten', 'Conv2D', 'MaxPooling2D', 'backend', 'regularizers', 'Lambda', 'tqdm_notebook', 'font_manager', 'rc', 'animation', 'Image', 'display', 'Concatenate', 'ModelCheckpoint', 'Layer', 'glob', 'train_test_split', 'KFold', 'StratifiedKFold', 'plot_model']Dict:{'math': [], 'numpy': ['transpose', 'mean', 'stack', 'sum', 'subtract', 'where', 'unique', 'clip', 'isin', 'diff', 'std', 'cumsum'], 'pandas': ['to_pickle', 'isna', 'read_csv', 'value_counts', 'unique', 'merge'], 'matplotlib': [], 'seaborn': [], 'datetime': [], 'kaggle': [], 'tqdm': ['__init__'], 'sklearn': ['__init__'], 'keras': ['__init__'], 'tensorflow': [], 'warnings': [], 'IPython': [], 'tensorflow_probability': [], 'os': ['rename', 'replace']} axis_0: 0, axis_1: 4
feature-engineering-stacking-ensemble.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'any', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'count', 'copy', 'sample', 'dropna', 'sum', 'isnull', 'isnull', 'isnull', 'quantile', 'quantile', 'quantile', 'quantile', 'clip', 'read_csv', 'head', 'replace', 'nunique', 'fillna', 'mean', 'sort_values', 'value_counts', 'sum', 'sort_values', 'value_counts', 'sum', 'qcut', 'qcut', 'map', 'map', 'map', 'corr', 'astype', 'nunique', 'unique', 'apply', 'drop', 'rename', 'read_csv', 'drop', 'head', 'merge', 'head', 'nunique', 'drop', 'fillna', 'fillna', 'fillna', 'any', 'isna', 'map', 'map', 'get_dummies', 'concat', 'head', 'astype', 'apply', 'to_datetime', 'apply', 'to_datetime', 'apply', 'apply', 'value_counts', 'groupby', 'value_counts', 'agg', 'groupby', 'join', 'reset_index', 'agg', 'groupby', 'join', 'reset_index', 'rename', 'agg', 'groupby', 'join', 'drop', 'reset_index', 'reset_index', 'mean', 'groupby', 'merge', 'merge', 'replace', 'fillna', 'replace', 'fillna', 'rename', 'read_csv', 'drop', 'merge', 'drop', 'fillna', 'fillna', 'fillna', 'any', 'isna', 'map', 'map', 'get_dummies', 'concat', 'astype', 'apply', 'to_datetime', 'apply', 'to_datetime', 'apply', 'apply', 'reset_index', 'mean', 'groupby', 'merge', 'replace', 'fillna', 'rename', 'rename', 'read_csv', 'read_csv', 'boxplot', 'value_counts', 'min', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'unique', 'any', 'isnull', 'any', 'isnull', 'fillna', 'fillna', 'mean', 'to_csv', 'to_csv', 'head', 'reset_index', 'drop', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'transform', 'transform', 'add', 'add', 'add', 'add', 'add', 'add', 'corr', 'astype', 'apply', 'reset_index', 'to_csv'] ['numpy', 'pandas', 'datetime', 'gc', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings', 'random', 'datetime', 'xgboost', 'catboost', 'scipy', 'time', 'gc'] ['StratifiedKFold', 'cross_val_score', 'KFold', 'GridSearchCV', 'mean_squared_error', 'DecisionTreeRegressor', 'StandardScaler', 'Ridge', 'Lasso', 'LarsCV', 'RidgeCV', 'Lars', 'StackingCVRegressor', 'AdaBoostRegressor', 'DecisionTreeRegressor', 'DBSCAN', 'is_numeric_dtype', 'Sequential', 'Input', 'Dense', 'Dropout', 'BatchNormalization', 'EarlyStopping', 'ModelCheckpoint', 'rcParams']Dict:{'numpy': ['mean', 'quantile', 'any', 'max', 'add', 'sum', 'min', 'unique', 'clip', 'isin', 'copy'], 'pandas': [], 'datetime': [], 'gc': [], 'matplotlib': ['copy'], 'seaborn': ['boxplot'], 'lightgbm': [], 'sklearn': [], 'warnings': [], 'random': ['sample'], 'mlxtend': [], 'xgboost': [], 'catboost': [], 'scipy': [], 'keras': [], 'time': [], '=': [], "['months_to_date_mean',": [], "'months_to_date_min',": [], "'new_months_to_date_mean',": [], "'category_1_mean',": [], "'new_month_lag_mean',": [], "'new_purchase_amount_max',": []} axis_0: 1, axis_1: 4
credit-card-fraud-analysis-s3-e4.py : ['read_csv', 'head', 'read_csv', 'head', 'describe', 'describe', 'info', 'info', 'count', 'groupby', 'count', 'groupby', 'corr', 'corr', 'drop', 'head', 'concat', 'head', 'drop', 'read_csv', 'drop', 'head', 'read_csv', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] ['stats', 'train_test_split', 'Pipeline', 'StandardScaler', 'roc_auc_score', 'XGBClassifier', 'LogisticRegression', 'CatBoostClassifier']Dict:{'numpy': ['info'], 'pandas': ['concat', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'scipy': [], 'sklearn': [], 'xgboost': [], 'catboost': []} axis_0: 0, axis_1: 0
tps-12-21-xgb-optuna-tutorial-study-vis.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'map', 'astype', 'astype', 'sum', 'sum', 'sum', 'sum', 'set_index', 'drop', 'set_index', 'to_csv'] ['pandas', 'datatable', 'numpy', 'xgboost', 'optuna', 'plotly.express', 'gc'] ['MinMaxScaler', 'StandardScaler', 'RobustScaler', 'train_test_split', 'plot_optimization_history', 'plot_parallel_coordinate', 'plot_param_importances', 'plot_slice']Dict:{'pandas': ['read_csv'], 'datatable': [], 'numpy': ['sum', 'max', 'min'], 'xgboost': [], 'optuna': [], 'sklearn': [], 'plotly': [], 'gc': []} axis_0: 0, axis_1: 7
smart-brute-force-feature-engineering.py : ['read_parquet', 'unique', 'astype', 'apply', 'isin', 'unique', 'qcut', 'astype', 'agg', 'groupby', 'sum', 'sum', 'insert', 'sum', 'sum', 'concat', 'concat', 'product', 'read_csv', 'agg', 'groupby', 'agg', 'groupby', 'fillna', 'replace', 'read_parquet'] ['pandas', 'itertools', 'numpy'] []Dict:{'pandas': ['read_csv', 'concat', 'read_parquet', 'unique', 'qcut'], 'itertools': ['product', 'groupby'], 'numpy': ['product', 'sum', 'unique', 'isin', 'insert']} axis_0: 2, axis_1: 0
let-s-try-some-feature-engineering.py : ['map', 'to_dict', 'value_counts', 'concat', 'array', 'max', 'array'] [] []Dict:{} axis_0: 0, axis_1: 1
feature-engineering-benchmarks.py : ['sample', 'read_csv', 'sample', 'read_csv', 'drop', 'concat', 'drop', 'mean', 'std', 'diff', 'diff', 'unique', 'unique', 'diff', 'unique', 'min', 'max', 'median', 'std', 'round', 'join', 'join', 'items', 'join', 'apply', 'nunique', 'sum', 'astype', 'sum', 'astype', 'sum', 'astype', 'apply', 'mean', 'reset_index', 'replace', 'replace', 'reset_index', 'concat', 'reset_index', 'unique', 'array', 'fillna', 'concat', 'transform', 'transform', 'concat', 'mean', 'add', 'add', 'add', 'add', 'head', 'min', 'max', 'mean', 'median', 'std', 'unique', 'items', 'unique', 'map', 'mean', 'std', 'transform', 'shift', 'shift', 'concat', 'dropna', 'iterrows', 'reset_index', 'fillna', 'concat', 'mean', 'sort_values', 'copy', 'unique', 'unique', 'isin', 'update', 'update', 'items', 'mean', 'min', 'max'] ['gc', 'warnings', 'scipy', 'numpy', 'pandas', 'hdbscan', 'seaborn', 'matplotlib.pyplot', 'scikitplot'] ['tqdm', 'deepcopy', 'skew', 'kurtosis', 'gmean', 'ks_2samp', 'KMeans', 'MeanShift', 'ExtraTreesRegressor', 'ExtraTreesClassifier', 'LogisticRegression', 'ElasticNetCV', 'cross_val_score', 'LeaveOneOut', 'TruncatedSVD', 'FastICA', 'NMF', 'FactorAnalysis', 'PCA', 'SparsePCA', 'MiniBatchSparsePCA', 'KernelPCA', 'IncrementalPCA', 'LinearDiscriminantAnalysis', 'TSNE', 'GaussianRandomProjection', 'SparseRandomProjection', 'TSNE', 'scale', 'SequentialFeatureSelector', 'BaseEstimator', 'TransformerMixin', 'RegressorMixin', 'Parallel', 'delayed', 'clone', 'is_classifier', 'check_cv', 'Axes3D', 'NullFormatter', '*', '*', '*', 'Model', 'Sequential', 'train_test_split', '*', 'SymbolicTransformer']Dict:{'gc': [], '': [], 'warnings': [], 'scipy': [], 'numpy': ['mean', 'median', 'max', 'add', 'sum', 'array', 'round', 'min', 'unique', 'isin', 'diff', 'std', 'copy'], 'pandas': ['concat', 'array', 'unique', 'read_csv'], 'tqdm': ['update'], 'copy': [], 'hdbscan': [], 'sklearn': [], 'mlxtend': [], 'seaborn': [], 'matplotlib': [], 'scikitplot': [], 'mpl_toolkits': ['update'], 'keras': [], 'gplearn': []} axis_0: 1, axis_1: 12
house-price-feature-engineering-and-regression.py : ['read_csv', 'read_csv', 'head', 'sum', 'isna', 'sum', 'isna', 'sort_values', 'nunique', 'mode', 'fillna', 'fillna', 'fillna', 'drop', 'drop', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'mean', 'groupby', 'drop', 'isna', 'isna', 'fillna', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'nunique', 'unique', 'items', 'sort_values', 'transform', 'drop', 'get_dummies', 'get_dummies', 'drop', 'drop', 'drop', 'transform', 'concat', 'corr', 'drop', 'reset_index', 'sort_values', 'unstack', 'abs', 'corr', 'rename', 'drop', 'drop', 'reset_index', 'reset_index', 'fillna', 'apply', 'apply', 'apply', 'drop', 'drop', 'drop', 'transform', 'items', 'mean', 'abs', 'sort_values', 'reset_index', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['OrdinalEncoder', 'MEstimateEncoder', 'StandardScaler', 'mean_squared_error', 'cross_validate', 'GridSearchCV', 'XGBRegressor', 'LGBMRegressor', 'Lasso', 'Ridge', 'ElasticNet', 'BayesianRidge', 'SVR', 'GradientBoostingRegressor']Dict:{'numpy': ['mean', 'abs', 'sum', 'unique'], 'pandas': ['isna', 'read_csv', 'concat', 'get_dummies', 'unique'], 'matplotlib': [], 'seaborn': [], 'sklearn': ['apply'], 'category_encoders': [], 'xgboost': ['apply'], 'lightgbm': []} axis_0: 0, axis_1: 7
tps-09-single-catboostclassifier.py : ['copy', 'drop', 'copy', 'copy', 'drop', 'sum', 'isna', 'min', 'std', 'transform', 'mean', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib.lines', 'matplotlib.gridspec', 'seaborn'] ['filterwarnings', 'StandardScaler', 'Pipeline', 'SimpleImputer']Dict:{'numpy': ['mean', 'sum', 'min', 'std', 'copy'], 'pandas': ['isna'], 'matplotlib': ['copy'], 'seaborn': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 4
titanic-ship-s-log.py : ['read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'drop', 'head', 'duplicated', 'value_counts', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'transpose', 'isnull', 'apply', 'apply', 'copy', 'sum', 'isnull', 'where', 'sum', 'isnull', 'copy', 'copy', 'copy', 'copy', 'apply', 'head', 'value_counts', 'std', 'groupby', 'map', 'groupby', 'std', 'groupby', 'copy', 'copy', 'copy', 'copy', 'copy', 'apply', 'apply', 'apply', 'apply', 'copy', 'copy', 'apply', 'apply', 'map', 'groupby', 'apply', 'where', 'copy', 'copy', 'info'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['accuracy_score', 'StandardScaler', 'listdir']Dict:{'numpy': ['transpose', 'sum', 'where', 'info', 'std', 'copy'], 'pandas': ['value_counts', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'os': [], 'warnings': []} axis_0: 0, axis_1: 4
wordbatch-ridge-fm-frtl-target-encoding-lgbm.py : ['mean', 'concat', 'agg', 'groupby', 'mean', 'drop', 'fillna', 'rename', 'merge', 'rename', 'reset_index', 'fillna', 'rename', 'merge', 'rename', 'reset_index', 'join', 'join', 'sub', 'sub', 'read_csv', 'read_csv', 'copy', 'concat', 'fillna', 'fillna', 'head', 'to_datetime', 'to_datetime', 'drop', 'drop', 'astype', 'fillna', 'astype', 'apply', 'apply', 'apply', 'count', 'apply', 'count', 'apply', 'count', 'apply', 'count', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'drop', 'transform', 'where', 'transform', 'where', 'transform', 'where', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'drop', 'drop', 'transform', 'transform', 'transform', 'transform', 'drop', 'drop', 'clip', 'to_csv', 'head'] ['time', 'pandas', 'numpy', 'time', 'gc', 'string', 're', 'random', 'wordbatch', 'lightgbm', 'seaborn', 'matplotlib.pyplot'] ['stopwords', 'csr_matrix', 'hstack', 'TfidfVectorizer', 'SelectKBest', 'f_regression', 'LabelBinarizer', 'MinMaxScaler', 'StandardScaler', 'WordBag', 'FM_FTRL', 'train_test_split', 'Ridge', 'MultinomialNB']Dict:{'time': [], 'pandas': ['concat', 'merge', 'to_datetime', 'read_csv'], 'numpy': ['where', 'clip', 'mean', 'copy'], 'gc': [], 'string': [], 're': ['sub'], 'random': [], 'nltk': [], 'scipy': [], 'sklearn': [], 'wordbatch': [], 'lightgbm': [], 'seaborn': [], 'matplotlib': []} axis_0: 7, axis_1: 10
ubiquant-tf-training-baseline-with-gpu.py : ['mean', 'corr', 'mean', 'apply', 'groupby', 'read_pickle', 'reset_index', 'corr', 'reset_index', 'corr', 'reset_index', 'corr', 'concat', 'sort_values', 'to_dict', 'mean', 'groupby', 'map', 'astype', 'array', 'array', 'astype', 'to_csv'] ['pandas', 'numpy', 'os', 'tensorflow', 'tensorflow_addons', 'random', 'warnings', 'gc'] ['pearsonr', 'GroupKFold', 'backend', 'tqdm']Dict:{'pandas': ['array', 'read_pickle', 'concat'], 'numpy': ['mean', 'array'], 'os': [], 'scipy': [], 'sklearn': [], 'tensorflow': [], 'tensorflow_addons': [], 'tqdm': [], 'random': [], 'warnings': [], 'gc': []} axis_0: 0, axis_1: 0
a-very-extensive-end-to-end-project-donorschoose.py : ['read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'head', 'head', 'head', 'head', 'head', 'info', 'describe', 'describe', 'describe', 'describe', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'value_counts', 'sum', 'value_counts', 'sum', 'value_counts', 'sum', 'head', 'value_counts', 'value_counts', 'sum', 'head', 'value_counts', 'sum', 'head', 'value_counts', 'sum', 'value_counts', 'sum', 'sub', 'sub', 'dropna', 'apply', 'join', 'map', 'join', 'dropna', 'apply', 'join', 'map', 'join', 'value_counts', 'sum', 'sum', 'value_counts', 'sum', 'sum', 'value_counts', 'sum', 'sum', 'value_counts', 'sum', 'sum', 'value_counts', 'sum', 'sum', 'head', 'value_counts', 'sum', 'sum', 'reset_index', 'value_counts', 'astype', 'reset_index', 'apply', 'groupby', 'mean', 'astype', 'crosstab', 'crosstab', 'corr', 'to_datetime', 'value_counts', 'sum', 'sum', 'value_counts', 'sum', 'sum', 'value_counts', 'sum', 'sum', 'value_counts', 'sum', 'sum', 'dropna', 'apply', 'join', 'map', 'join', 'dropna', 'apply', 'join', 'map', 'join', 'dropna', 'apply', 'join', 'map', 'join', 'head', 'head', 'head', 'head', 'map', 'map', 'map', 'map', 'value_counts', 'sum', 'to_datetime', 'unstack', 'mean', 'groupby', 'sort_values', 'fillna', 'value_counts', 'sum', 'sum', 'value_counts', 'sum', 'sum', 'value_counts', 'keys', 'value_counts', 'sum', 'sum', 'value_counts', 'sum', 'sum', 'value_counts', 'sum', 'sum', 'value_counts', 'keys', 'value_counts', 'sum', 'sum', 'to_datetime', 'to_datetime', 'drop', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'join', 'apply', 'apply', 'apply', 'join', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'join', 'apply', 'apply', 'apply', 'join', 'apply', 'apply', 'apply', 'sum', 'groupby', 'mean', 'groupby', 'rename', 'sum', 'groupby', 'rename', 'count', 'groupby', 'rename', 'fillna', 'merge', 'fillna', 'merge', 'fillna', 'merge', 'fillna', 'merge', 'fillna', 'merge', 'fillna', 'merge', 'fillna', 'merge', 'fillna', 'merge', 'map', 'map', 'concat', 'astype', 'transform', 'astype', 'transform', 'astype', 'drop', 'drop'] ['pandas', 'numpy', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'plotly.offline', 'plotly.tools', 'squarify', 'warnings', 'datetime', 'warnings', 'string', 'time', 're', 'lightgbm', 'xgboost'] ['init_notebook_mode', 'iplot', 'Basemap', 'array', 'cm', 'stopwords', 'TextBlob', 'check_output', 'stopwords', 'WordCloud', 'WordCloud', 'WordCloud', 'WordCloud', 'WordCloud', 'preprocessing', 'train_test_split', 'roc_auc_score', 'Image', 'roc_curve', 'metrics', 'precision_recall_curve']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'merge', 'to_datetime', 'crosstab'], 'numpy': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'squarify': [], 'mpl_toolkits': [], 'warnings': [], 'nltk': [], 'textblob': [], 'datetime': [], 'string': [], 'time': [], 'subprocess': [], 're': ['sub'], 'wordcloud': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'IPython': []} axis_0: 0, axis_1: 7
feature-engineering-importance-testing.py : ['read_csv', 'head', 'astype', 'astype', 'astype', 'astype', 'head', 'join', 'groupby', 'max', 'round', 'mean', 'round', 'median', 'min', 'sum', 'count', 'min', 'count', 'merge', 'rename', 'reset_index', 'apply', 'head', 'unique', 'join', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'head', 'join', 'transform', 'groupby', 'shift', 'diff', 'head', 'items', 'rename', 'groupby', 'rename', 'groupby', 'head', 'select_dtypes', 'drop', 'fillna', 'mean', 'sort_values'] ['gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'xgboost'] ['preprocessing']Dict:{'gc': [], 'numpy': ['mean', 'median', 'max', 'sum', 'round', 'min', 'unique', 'diff'], 'pandas': ['merge', 'unique', 'read_csv'], 'matplotlib': [], 'xgboost': [], 'sklearn': [], '=': [], '{}': [], 'pd': [], 'importance_df': [], 'figsize=(20,': [], '7))': []} axis_0: 0, axis_1: 2
giba-countvectorizer-d-lb-1-43.py : ['read_csv', 'read_csv', 'reset_index', 'drop'] ['numpy', 'pandas', 'gc'] ['CountVectorizer', 'RandomForestRegressor']Dict:{'numpy': [], 'pandas': ['read_csv'], 'gc': [], 'sklearn': []} axis_0: 0, axis_1: 0
eda-feature-engineering-and-hyperparameter-tuning.py : ['read_csv', 'read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'isin', 'sum', 'isnull', 'head', 'sum', 'isnull', 'sum', 'isnull', 'isin', 'sum', 'isnull', 'sum', 'isnull', 'head', 'concat', 'sum', 'isnull', 'read_csv', 'head', 'head', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'describe', 'head', 'boxplot', 'round', 'mean', 'describe', 'nunique', 'unique', 'mean', 'hist', 'boxplot', 'corr', 'corr', 'head', 'sum', 'isnull', 'apply', 'apply', 'apply', 'apply', 'merge', 'merge', 'head', 'apply', 'apply', 'hist', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'head', 'apply', 'apply', 'apply', 'apply', 'apply', 'describe', 'describe', 'describe', 'head', 'corr', 'corr', 'head', 'head', 'drop', 'drop', 'head', 'items', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'optuna'] ['train_test_split', 'CatBoostRegressor', 'Pool', 'metrics', 'cv', 'accuracy_score', 'r2_score', 'mean_squared_error', 'ProteinAnalysis', 'spearmanr']Dict:{'numpy': ['mean', 'sum', 'round', 'unique', 'isin'], 'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'merge'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'sklearn': [], 'catboost': [], 'optuna': [], 'Bio': [], 'scipy': []} axis_0: 0, axis_1: 6
spaceship-titanic-eda-fe-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'sum', 'duplicated', 'sum', 'duplicated', 'drop', 'select_dtypes', 'sum', 'isna', 'sum', 'isna', 'sort_values', 'drop', 'factorize', 'unique', 'unique', 'keys', 'keys', 'dropna', 'array', 'applymap', 'corr', 'select_dtypes', 'head', 'to_csv', 'head'] ['pandas', 'numpy', 'warnings', 'missingno', 'matplotlib.pyplot', 'seaborn', 'umap', 'gc', 'matplotlib.pyplot', 'seaborn'] ['StratifiedKFold', 'pearsonr', '*']Dict:{'pandas': ['isna', 'read_csv', 'factorize', 'unique', 'array'], 'numpy': ['array', 'sum', 'unique'], 'warnings': [], 'missingno': [], 'matplotlib': [], 'seaborn': [], 'umap': [], 'pycaret': [], 'gc': []} axis_0: 0, axis_1: 1
wavenet-with-shifted-rfc-proba.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'agg', 'groupby', 'astype', 'mean', 'std', 'fillna', 'shift', 'groupby', 'fillna', 'shift', 'groupby', 'replace', 'replace', 'mean', 'concat', 'fillna', 'fillna', 'unique', 'unique', 'concat', 'get_dummies', 'astype', 'array', 'apply', 'groupby', 'array', 'apply', 'groupby', 'array', 'apply', 'groupby', 'astype', 'to_csv'] ['tensorflow', 'pandas', 'numpy', 'random', 'tensorflow_addons', 'gc', 'warnings', 'os'] ['Conv1D', 'Input', 'Dense', 'Add', 'Multiply', 'Callback', 'LearningRateScheduler', 'categorical_crossentropy', 'Adam', 'backend', 'losses', 'models', 'optimizers', 'GroupKFold', 'f1_score']Dict:{'tensorflow': [], 'pandas': ['read_csv', 'concat', 'get_dummies', 'unique', 'array'], 'numpy': ['mean', 'array', 'unique', 'std'], 'random': [], 'tensorflow_addons': [], 'gc': [], 'sklearn': [], 'warnings': [], 'os': ['replace']} axis_0: 0, axis_1: 1
crab-age-eda.py : ['join', 'read_csv', 'head', 'info', 'tail', 'sum', 'isnull', 'describe', 'corr', 'boxplot', 'sum', 'mean', 'sum', 'drop', 'map', 'astype', 'astype', 'transform', 'astype', 'astype', 'transform', 'concat', 'concat', 'drop', 'drop', 'select_dtypes', 'transform', 'transform', 'head', 'drop', 'select_dtypes', 'head', 'drop', 'sort_values', 'head', 'read_csv', 'select_dtypes'] ['numpy', 'pandas', 'os', 'pandas', 'pandas', 'matplotlib.pyplot', 'seaborn', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'lightgbm', 'optuna', 'warnings'] ['train_test_split', 'Pipeline', 'ColumnTransformer', 'StandardScaler', 'OneHotEncoder', 'LinearRegression', 'mean_absolute_error', 'OrdinalEncoder', 'PCA', 'RandomForestRegressor', 'GradientBoostingRegressor', 'CatBoostRegressor', 'TPESampler', 'RDBStorage']Dict:{'numpy': ['mean', 'info', 'sum'], 'pandas': ['concat', 'read_csv', 'isnull'], 'os': [], 'sklearn': [], 'category_encoders': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], '=': [], 'pipeline': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'optuna': [], 'warnings': []} axis_0: 0, axis_1: 7
wids-2022-eda-feature-engineering-reg-xgb.py : ['join', 'read_csv', 'head', 'info', 'describe', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'read_csv', 'head', 'info', 'describe', 'sum', 'isna', 'sum', 'isna', 'info', 'info', 'describe', 'describe', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'transform', 'transform', 'head', 'head', 'corr', 'drop', 'transform', 'transform', 'head', 'transform', 'transform', 'read_csv', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'matplotlib.pyplot', 'seaborn', 'matplotlib.pyplot', 'seaborn', 'matplotlib.pyplot', 'seaborn', 'matplotlib.pyplot', 'seaborn', 'sklearn', 'math', 'xgboost'] ['preprocessing', 'SimpleImputer', 'StandardScaler', 'train_test_split', 'LinearRegression']Dict:{'numpy': ['info', 'sum'], 'pandas': ['isna', 'read_csv', 'value_counts'], 'os': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'math': [], 'xgboost': []} axis_0: 0, axis_1: 2
amex-permutation-feature-importance.py : ['read_parquet', 'read_parquet', 'astype', 'to_datetime', 'fillna', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'concat', 'read_csv', 'astype', 'set_index', 'merge', 'astype', 'reset_index', 'sort_index', '__init__', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'keys', 'copy', 'copy', 'sort_values', 'to_csv', 'head', 'read_csv'] ['pandas', 'numpy', 'cupy', 'cudf', 'matplotlib.pyplot', 'gc', 'os', 'seaborn', 'xgboost'] ['tqdm', 'KFold']Dict:{'pandas': ['read_csv', 'concat', 'read_parquet', 'array', 'merge', 'to_datetime'], 'cupy,': [], 'cudf': [], '#': [], 'GPU': [], 'libraries': [], 'matplotlib': [], 'seaborn': [], 'tqdm': ['__init__'], 'sklearn': ['__init__'], 'xgboost': [], '=': [], '[]': []} axis_0: 0, axis_1: 1
ps3e5-wine-quality-models.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'astype', 'to_csv', 'astype', 'astype', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'select_dtypes', 'select_dtypes', 'nunique', 'mean', 'describe', 'var', 'skew', 'kurtosis', 'transpose', 'sort_values', 'sum', 'isna', 'duplicated', 'sum', 'select_dtypes', 'select_dtypes', 'nunique', 'unique', 'concat', 'head', 'sort_values', 'crosstab', 'nunique', 'unique', 'dropna', 'select_dtypes', 'select_dtypes', 'describe', 'var', 'skew', 'kurtosis', 'transpose', 'sort_values', 'skew', 'head', 'read_csv', 'head', 'concat', 'duplicated', 'drop', 'head', 'drop', 'transform', 'transform', 'copy', 'reset_index', 'copy', 'set_index', 'head', 'sum', 'head', 'astype', 'reset_index', 'copy', 'rename', 'to_csv', 'value_counts', 'head', 'reset_index', 'set_index', 'sort_index', 'to_csv', 'copy', 'reset_index', 'reset_index', 'copy', 'transform', 'transform', 'transform', 'update', 'copy', 'reset_index', 'reset_index', 'copy', 'update', 'head', 'head', 'head', 'astype', 'to_csv', 'tail', 'value_counts', 'sort_values'] ['os', 'time', 'glob', 'gc', 'pandas', 'numpy', 'xgboost', 'catboost', 'lightgbm', 'optuna', 'matplotlib', 'matplotlib.pylab', 'seaborn', 'missingno', 'warnings'] ['List', 'Set', 'Dict', 'Tuple', 'Optional', 'Path', 'impute', 'metrics', 'preprocessing', 'linear_model', 'svm', 'cluster', 'decomposition', 'model_selection', 'ensemble', 'datasets', 'plot_optimization_history', 'plot_param_importances', 'boxcox1p', 'boxcox_normmax', 'Map', 'HeatMap', 'display_html', 'display_markdown', 'display_latex', 'Fore', 'Style', 'mode', 'mode', 'mode']Dict:{'typing': [], 'os': ['rename'], 'time': [], 'pathlib': ['rename'], 'glob': [], 'gc': [], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'crosstab'], 'numpy': ['transpose', 'mean', 'var', 'sum', 'unique', 'std', 'copy'], 'sklearn': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'optuna': [], 'scipy': [], 'matplotlib': ['transpose', 'mean', 'var', 'sum', 'unique', 'std', 'copy'], 'seaborn': [], 'missingno': [], 'folium': [], 'IPython': [], 'colorama': [], 'warnings': []} axis_0: 0, axis_1: 6
commonlit-text-analysis-baseline-modeling.py : ['read_csv', 'read_csv', 'concat', 'head', 'apply', 'apply', 'apply', 'apply', 'mean', 'array', 'apply', 'mean', 'array', 'apply', 'apply', 'apply', 'drop', 'apply', 'join', 'sub', 'apply', 'join', 'sub', 'head', 'mean', 'median', 'mode', 'corr', 'abs', 'corr', 'corr', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'sum', 'cumsum', 'sum', 'rename', 'copy', 'unique', 'array', 'update', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'copy', 'mean', 'std', 'copy', 'mean', 'std', 'copy', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'join', 'join', 'melt', 'melt', 'boxplot', 'concat', 'iterrows', 'iterrows', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'copy', 'round', 'sort_values', 'reset_index', 'mean', 'groupby', 'copy', 'sample', 'sample', 'drop', 'keys', 'join', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'mean', 'to_csv'] ['scipy', 're', 'string', 'nltk', 'random', 'os', 'pymc3', 'tensorflow', 'numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib.cm', 'seaborn', 'plotly.express', 'plotly.graph_objs', 'plotly.offline', 'spacy', 'warnings', 'matplotlib', 'matplotlib.pyplot', 'matplotlib.gridspec'] ['make_subplots', 'TruncatedSVD', 'PCA', 'DBSCAN', 'Isomap', 'CountVectorizer', 'TfidfVectorizer', 'KMeans', 'SentimentIntensityAnalyzer', 'WordCloud', 'STOPWORDS', 'ngrams', 'word_tokenize', 'PorterStemmer', 'WordNetLemmatizer', 'tqdm', 'backend', 'KernelDensity', 'Pipeline', 'LinearRegression', 'DecisionTreeRegressor', 'RandomForestRegressor', 'StandardScaler', 'train_test_split', 'cross_val_score', 'one_hot', 'pad_sequences', 'Sequential', 'Dense', 'Flatten', 'Embedding']Dict:{'scipy': [], 're': ['sub'], 'string': [], 'nltk': [], 'random': ['sample'], 'os': ['rename'], 'pymc3': [], '': [], 'tensorflow': ['add', 'abs', 'concat', 'round', 'unique', 'cumsum'], 'numpy': ['mean', 'median', 'add', 'abs', 'sum', 'array', 'round', 'unique', 'std', 'cumsum', 'copy'], 'pandas': ['read_csv', 'melt', 'concat', 'value_counts', 'unique', 'array'], 'matplotlib': ['copy'], 'seaborn': ['boxplot'], 'plotly': [], 'spacy': [], 'sklearn': [], 'wordcloud': [], 'tqdm': ['update'], 'keras': [], 'warnings': []} axis_0: 0, axis_1: 0
simple-solution-for-titanic.py : ['read_csv', 'read_csv', 'head', 'info', 'info', 'describe', 'describe', 'hist', 'notnull', 'count', 'count', 'count', 'count', 'qcut', 'unique', 'astype', 'notnull', 'unique', 'unique', 'qcut', 'unique', 'astype', 'notnull', 'unique', 'unique', 'isnull', 'median', 'notnull', 'isnull', 'median', 'notnull', 'unique', 'unique', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'drop', 'drop', 'isnull', 'isnull', 'median', 'astype', 'map', 'map', 'map', 'map', 'map', 'map', 'drop', 'drop', 'unique', 'unique', 'count', 'sort_values', 'mean', 'groupby', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'drop', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'random', 'matplotlib.pyplot', 'seaborn'] ['LogisticRegression', 'SGDClassifier', 'Perceptron', 'DecisionTreeClassifier', 'RandomForestClassifier', 'SVC', 'LinearSVC', 'GaussianNB', 'KNeighborsClassifier']Dict:{'numpy': ['mean', 'median', 'info', 'unique'], 'pandas': ['read_csv', 'isnull', 'unique', 'notnull', 'qcut'], 'random': [], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 4
ecuador-store-sales-global-forecasting-lightgbm.py : ['read_csv', 'join', 'read_csv', 'join', 'rename', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'nunique', 'nunique', 'groupby', 'min', 'max', 'nunique', 'min', 'max', 'nunique', 'date_range', 'unique', 'unique', 'count', 'groupby', 'date_range', 'unique', 'unique', 'reset_index', 'reindex', 'set_index', 'fillna', 'interpolate', 'date_range', 'sum', 'sum', 'date_range', 'sort_values', 'merge', 'date_range', 'interpolate', 'sum', 'eq', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'sort_values', 'merge', 'eq', 'drop', 'apply', 'groupby', 'interpolate', 'unique', 'eq', 'unique', 'eq', 'unique', 'eq', 'eq', 'replace', 'replace', 'replace', 'apply', 'apply', 'replace', 'head', 'eq', 'eq', 'reset_index', 'rename', 'astype', 'notna', 'reset_index', 'eq', 'reset_index', 'rename', 'duplicated', 'get_dummies', 'eq', 'reset_index', 'rename', 'astype', 'eq', 'eq', 'reset_index', 'duplicated', 'get_dummies', 'reset_index', 'sum', 'groupby', 'rename', 'head', 'pivot_table', 'pivot_table', 'pivot_table', 'head', 'copy', 'fillna', 'merge', 'merge', 'merge', 'merge', 'merge', 'reset_index', 'melt', 'astype', 'eq', 'sum', 'head', 'reset_index', 'sum', 'eq', 'reset_index', 'gt', 'isin', 'std', 'reset_index', 'unique', 'where', 'reset_index', 'apply', 'lt', 'sum', 'gt', 'boxplot', 'boxplot', 'where', 'reset_index', 'apply', 'lt', 'sum', 'gt', 'boxplot', 'boxplot', 'copy', 'copy', 'reset_index', 'mean', 'reset_index', 'mean', 'reset_index', 'mean', 'nunique', 'nunique', 'sum', 'eq', 'nunique', 'groupby', 'sort_values', 'copy', 'unique', 'unique', 'eq', 'astype', 'nunique', 'nunique', 'sort_values', 'copy', 'astype', 'unique', 'unique', 'sort_values', 'unique', 'astype', 'eq', 'astype', 'copy', 'boxplot', 'eq', 'eq', 'boxplot', 'eq', 'boxplot', 'eq', 'drop', 'boxplot', 'eq', 'eq', 'copy', 'unique', 'isin', 'nunique', 'boxplot', 'eq', 'eq', 'copy', 'nunique', 'nunique', 'isin', 'unique', 'eq', 'boxplot', 'eq', 'eq', 'sort_values', 'copy', 'reset_index', 'eq', 'astype', 'factorize', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'sort_values', 'merge', 'merge', 'merge', 'merge', 'merge', 'concat', 'fillna', 'astype', 'factorize', 'isin', 'eq', 'eq', 'apply', 'apply', 'apply', 'apply', 'apply', 'head', 'unique', 'eq', 'le', 'astype', 'unique', 'eq', 'le', 'filter', 'stack', 'astype', 'filter', 'stack', 'astype', 'copy', 'copy', 'copy', 'copy', 'copy', 'keys', 'clip', 'where', 'array', 'date_range', 'sum', 'map', 'clip', 'mean', 'keys', 'sum', 'join', 'join', 'mean', 'mean', 'keys', 'assign', 'concat', 'concat', 'reset_index', 'rename_axis', 'copy', 'copy', 'copy', 'merge', 'mean', 'drop', 'head', 'copy', 'astype', 'replace', 'merge', 'head', 'to_csv'] ['os', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn'] ['TimeSeries', 'Pipeline', 'Scaler', 'InvertibleMapper', 'StaticCovariatesTransformer', 'MissingValuesFiller', 'rmsle', 'LinearRegressionModel', 'LightGBMModel', 'XGBModel', 'CatBoostModel', 'MovingAverageFilter', 'MinMaxScaler', 'OneHotEncoder', 'tqdm_notebook']Dict:{'os': ['rename', 'replace'], 'matplotlib': ['boxplot'], 'numpy': ['mean', 'stack', 'max', 'sum', 'array', 'where', 'min', 'unique', 'clip', 'isin', 'std', 'copy'], 'pandas': ['read_csv', 'date_range', 'melt', 'pivot_table', 'concat', 'notna', 'get_dummies', 'factorize', 'unique', 'array', 'merge'], 'seaborn': ['boxplot'], 'darts': [], 'sklearn': [], 'tqdm': []} axis_0: 5, axis_1: 8
starter-guide-to-build-nlp-ml-model-in-pycaret.py : ['read_csv', 'read_csv', 'head', 'to_csv', 'head', 'read_csv', 'read_csv', 'head', 'to_csv', 'head', 'read_csv', 'head', 'head', 'head', 'read_csv', 'head', 'head'] ['pandas', 'pandas', 'pandas', 'pandas'] ['*', '*', '*', '*', '*']Dict:{'pycaret': [], 'pandas': ['read_csv']} axis_0: 0, axis_1: 0
target-encoding-beginner-s-guide.py : ['read_csv', 'read_csv', 'mean', 'map', 'mean', 'groupby', 'fillna', 'drop', 'head', 'reset_index', 'mean', 'groupby', 'iterrows', 'replace', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot'] ['base', 'KFold']Dict:{'pandas': ['read_csv'], 'numpy': ['mean'], 'matplotlib': [], 'sklearn': []} axis_0: 0, axis_1: 1
dnn-and-tfidf-fit-only-on-train-0-923.py : ['read_csv', 'rename', 'replace', 'read_csv', 'concat', 'read_csv', 'value_counts', 'where', 'where', 'where', 'divide', 'mean', 'to_csv', 'head'] ['numpy', 'tensorflow', 'pandas'] ['TextVectorization', 'keras', 'layers', 'roc_auc_score', 'StratifiedKFold']Dict:{'numpy': ['mean', 'where', 'divide'], 'tensorflow': [], 'pandas': ['concat', 'read_csv', 'value_counts'], 'sklearn': []} axis_0: 1, axis_1: 0
tf-keras-nn-with-stock-embedding.py : ['diff', 'sum', 'mean', 'read_parquet', 'join', 'fillna', 'apply', 'groupby', 'fillna', 'apply', 'groupby', 'reset_index', 'agg', 'groupby', 'read_parquet', 'join', 'reset_index', 'sort_values', 'fillna', 'apply', 'groupby', 'reset_index', 'agg', 'groupby', 'fillna', 'merge', 'concat', 'read_csv', 'join', 'merge', 'head', 'read_csv', 'join', 'unique', 'fillna', 'merge', 'head', 'clip', 'head', 'to_csv'] ['pandas', 'numpy', 'pandas', 'glob', 'os', 'gc', 'matplotlib.pyplot', 'seaborn', 'tensorflow', 'numpy'] ['display', 'HTML', 'Parallel', 'delayed', 'preprocessing', 'model_selection', 'r2_score', 'keras', 'backend']Dict:{'IPython': [], 'pandas': ['read_csv', 'concat', 'read_parquet', 'unique', 'merge'], 'numpy': ['mean', 'sum', 'unique', 'clip', 'diff'], 'glob': [], 'os': [], 'gc': [], 'joblib': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'tensorflow': [], 'keras': []} axis_0: 0, axis_1: 0
feature-engineering-techniques.py : ['read_csv', 'read_csv', 'head', 'head', 'drop', 'head', 'sum', 'isna', 'fillna', 'median', 'sum', 'isna', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'sum', 'isna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'sum', 'isna', 'value_counts', 'boxplot', 'quantile', 'quantile', 'replace', 'mean', 'replace', 'mean', 'quantile', 'quantile', 'replace', 'replace', 'transform', 'transform', 'head', 'get_dummies', 'concat', 'head', 'drop', 'head', 'transform', 'transform', 'transform', 'transform', 'transform', 'head', 'corr', 'drop', 'concat'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot'] ['Image', 'LabelEncoder', 'MinMaxScaler', 'SelectKBest', 'chi2']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'get_dummies'], 'numpy': ['mean', 'median', 'sum', 'quantile'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'IPython': [], 'sklearn': []} axis_0: 0, axis_1: 6
voting-xgb-lgbm-cat.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'head', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'tail', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'hist', 'clip', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'head', 'hist', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'last', 'groupby', 'mean', 'groupby', 'join', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'tail', 'to_dict', 'set_index', 'copy', 'map', 'tail', 'to_csv', 'read_csv', 'iterrows', 'to_csv', 'head', 'tail'] ['gc', 'numpy', 'pandas', 'lightgbm', 'xgboost', 'catboost'] ['tqdm', 'VotingRegressor']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'unique', 'clip', 'isin', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'to_datetime'], 'tqdm': []} axis_0: 0, axis_1: 0
modified-wordbatch-ridge-fm-ftrl-lgb.py : ['head', 'head', 'transform', 'head', 'clip', 'to_csv', 'head'] [] []Dict:{} axis_0: 5, axis_1: 5
dataset-decomposition-techniques.py : ['read_csv', 'drop', 'head', 'describe', 'rename', 'reset_index', 'apply', 'value_counts', 'apply', 'var', 'apply', 'std', 'apply', 'mean', 'apply', 'head', 'astype', 'sort_values', 'min', 'max', 'min', 'mean', 'cov', 'abs', 'cumsum', 'sort_values', 'read_csv', 'drop', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'to_csv', 'head'] ['matplotlib.pyplot', 'plotly.graph_objs', 'pandas', 'numpy', 'lightgbm'] ['init_notebook_mode', 'iplot', 'PCA', 'SparsePCA', 'MiniBatchSparsePCA', 'KernelPCA', 'IncrementalPCA', 'GaussianRandomProjection', 'SparseRandomProjection', 'TruncatedSVD', 'FastICA', 'NMF', 'FactorAnalysis', 'train_test_split', 'RandomForestRegressor', 'StandardScaler', 'TSNE']Dict:{'plotly': [], 'matplotlib': [], 'pandas': ['read_csv', 'value_counts'], 'numpy': ['mean', 'max', 'abs', 'cov', 'var', 'min', 'std', 'cumsum'], 'sklearn': [], 'lightgbm': [], '=': [], 'model': [], 'pd': [], 'importances,': [], "'feature':": [], 'complete_features})': [], 'importances_df': [], 'ascending=[False])': [], "importances_df[:750]['feature']": []} axis_0: 1, axis_1: 1
eda-about-pressure-part-1.py : ['join', 'join', 'read_csv', 'read_csv', 'read_csv', 'map', 'head', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'isin', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['tqdm']Dict:{'numpy': ['isin'], 'pandas': ['read_csv'], 'matplotlib': ['hist'], 'seaborn': [], 'tqdm': [], 'os': []} axis_0: 0, axis_1: 1
building-predictive-models-with-sklearn-pipelines.py : ['read_csv', 'read_csv', 'drop', 'count', 'groupby', 'reset_index', 'mean', 'median', 'mode', 'fillna', 'apply', 'get', 'apply', 'select_dtypes', 'head', 'select_dtypes', 'head', 'copy', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'apply', 'apply', 'astype', 'head', 'mean', 'mean', 'drop', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'warnings', 'numpy', 'xgboost'] ['train_test_split', 'FunctionTransformer', 'BaseEstimator', 'TransformerMixin', 'DataFrameMapper', 'Pipeline', 'make_pipeline', 'FeatureUnion', 'make_union', 'DataFrameMapper', 'gen_features', 'StandardScaler', 'MinMaxScaler', 'LabelBinarizer', 'OneHotEncoder', 'gen_features', 'FunctionTransformer', 'SVR', 'SGDRegressor', 'KNeighborsRegressor', 'DecisionTreeRegressor', 'ExtraTreeRegressor', 'GradientBoostingRegressor', 'AdaBoostRegressor', 'cross_validate', 'pprint', 'mean_squared_log_error']Dict:{'pandas': ['read_csv'], 'numpy': ['mean', 'median', 'copy'], 'matplotlib': ['boxplot', 'get'], 'warnings': [], 'sklearn': [], 'sklearn_pandas': [], 'xgboost': [], 'pprint': []} axis_0: 0, axis_1: 3
ashrae-eda-fe-lightgbm-1-12.py : ['head', 'head', 'concat', 'copy', 'sort_values', 'drop_duplicates', 'rank', 'groupby', 'unstack', 'mean', 'groupby', 'map', 'to_timedelta', 'tail', 'tail', 'sum', 'isna', 'sum', 'isna', 'apply', 'groupby', 'interpolate', 'apply', 'groupby', 'interpolate', 'sum', 'isna', 'sum', 'isna', 'head', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'head', 'head', 'head', 'head', 'head', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'head', 'reset_index', 'groupby', 'reset_index', 'groupby', 'get', 'unique', 'value_counts', 'mean', 'get', 'keys', 'mean', 'groupby', 'mean', 'groupby', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'mean', 'groupby', 'sort_values', 'sum', 'isna', 'mean', 'sort_values', 'count', 'keys', 'fillna', 'fillna', 'fillna', 'fillna', 'tail', 'tail', 'to_datetime', 'to_datetime', 'head', 'date_range', 'min', 'max', 'astype', 'isin', 'astype', 'astype', 'isin', 'astype', 'query', 'drop', 'drop', 'tail', 'tail', 'replace', 'replace', 'tail', 'drop', 'head', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'gc', 'math', 'lightgbm'] ['USFederalHolidayCalendar', 'mean_squared_error', 'KFold', 'StratifiedKFold', 'GroupKFold', 'tqdm', 'LabelEncoder']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'isin', 'copy'], 'pandas': [], 'matplotlib': ['get'], 'seaborn': [], 'gc,': [], 'math': [], 'sklearn': [], 'lightgbm': [], 'tqdm': []} axis_0: 0, axis_1: 4
tps-1021-xgboost-with-twist.py : ['read_csv', 'set_index', 'head', 'read_csv', 'set_index', 'head', 'nunique', 'astype', 'astype', 'astype', 'astype', 'max', 'product', 'array', 'array', 'mean', 'astype', 'read_csv', 'to_csv', 'head'] ['warnings', 'gc', 'itertools', 'numpy', 'pandas', 'matplotlib.pyplot'] ['XGBClassifier', 'roc_auc_score', 'confusion_matrix', 'classification_report', 'StratifiedKFold']Dict:{'warnings': [], 'gc': [], 'itertools': ['product'], 'numpy': ['mean', 'array', 'product', 'max'], 'pandas': ['array', 'read_csv'], 'matplotlib': [], 'xgboost': [], 'sklearn': []} axis_0: 0, axis_1: 1
covid-19-us-ca-forecasting-top-4-notebook-6th.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'to_datetime', 'apply', 'to_datetime', 'apply', 'head', 'round', 'round', 'to_csv', 'read_csv', 'head'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot'] ['PolynomialFeatures', 'Ridge', 'Lasso', 'SGDRegressor', 'LinearRegression']Dict:{'numpy': ['round'], 'pandas': ['to_datetime', 'read_csv'], 'os': [], 'matplotlib': [], 'sklearn': []} axis_0: 0, axis_1: 0
oop-approach-to-fe-and-models.py : ['sub', 'drop', 'unique', 'keys', 'items', 'keys', 'items', 'items', 'items', 'items', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'sum', 'transform', 'transform', 'transform', 'transform', 'copy', 'copy', 'copy', 'copy', 'concat', 'astype', 'hist', 'items', 'transform', 'transform', 'transform', 'drop', 'drop', 'drop', 'items', 'items', 'items', 'mean', 'std', 'mean', 'transform', 'copy', 'items', 'transform', 'drop', 'rank', 'isin', 'astype', 'mean', 'groupby', 'sort_values', 'keys', 'rename', 'reset_index', 'rename', 'melt', 'abs', 'array', 'transform', 'drop', 'transform', 'transform', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'to_datetime', 'unique', 'unique', 'unique', 'unique', 'transform', 'transform', 'isin', 'unique', 'groupby', 'unique', 'unique', 'unique', 'groupby', 'sum', 'sum', 'sum', 'keys', 'copy', 'sum', 'sum', 'sum', 'value_counts', 'keys', 'sum', 'sum', 'sum', 'sum', 'keys', 'sum', 'sum', 'mean', 'mean', 'mean', 'mean', 'head', 'nunique', 'to_datetime', 'transform', 'transform', 'to_csv', 'value_counts'] ['numpy', 'pandas', 'os', 'copy', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'catboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'eli5', 'shap', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 're'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'defaultdict', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit', 'RepeatedStratifiedKFold', 'metrics', 'classification_report', 'confusion_matrix', 'linear_model', 'BayesianOptimization', 'HTML', 'OrdinalEncoder', 'List', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'Any', 'product', 'tqdm', 'Parallel', 'delayed', 'BaseEstimator', 'TransformerMixin']Dict:{'numpy': ['mean', 'abs', 'sum', 'array', 'unique', 'isin', 'std', 'copy'], 'pandas': ['read_csv', 'melt', 'concat', 'value_counts', 'unique', 'array', 'to_datetime'], 'os': ['rename'], 'copy': ['copy'], 'matplotlib': ['hist'], 'tqdm': [], 'sklearn': [], 'collections': ['items', 'keys', 'copy'], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'time': [], 'datetime': [], 'gc': [], 'seaborn': [], 'warnings': [], 'bayes_opt': [], 'eli5': [], 'shap': [], 'IPython': [], 'json': [], 'altair': [], 'category_encoders': [], 'networkx': [], 'typing': [], 'numba': [], 'itertools': [], 're': ['sub'], 'joblib': []} axis_0: 2, axis_1: 8
titanic-eda-xgboost-gridsearchcv.py : ['read_csv', 'read_csv', 'head', 'info', 'describe', 'sum', 'isna', 'head', 'info', 'describe', 'sum', 'isna', 'corr', 'fillna', 'value_counts', 'replace', 'value_counts', 'drop', 'fillna', 'mean', 'value_counts', 'fillna', 'drop', 'astype', 'replace', 'drop', 'get_dummies', 'drop', 'sort_values', 'sum', 'isna', 'fillna', 'median', 'fillna', 'median', 'fillna', 'value_counts', 'replace', 'drop', 'sum', 'isna', 'drop', 'astype', 'get_dummies', 'drop', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'xgboost'] ['train_test_split', 'GridSearchCV']Dict:{'pandas': ['isna', 'get_dummies', 'read_csv', 'value_counts'], 'numpy': ['mean', 'median', 'info', 'sum'], 'matplotlib': [], 'seaborn': [], 'xgboost': [], 'sklearn': []} axis_0: 0, axis_1: 7
employee-access-eda-data-cleaning.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'sum', 'isnull', 'info', 'sum', 'isnull', 'info', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'drop', 'reset_index', 'describe', 'corr', 'concat', 'concat', 'concat', 'concat', 'value_counts', 'concat', 'concat', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'concat', 'concat', 'value_counts', 'sum', 'isnull', 'isnull', 'drop'] ['numpy', 'pandas', 'os', 'warnings', 'math', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'torch', 'torch.nn', 'xgboost'] ['StandardScaler', 'train_test_split', 'f1_score', 'roc_curve', 'auc', 'accuracy_score', 'LogisticRegression', 'DecisionTreeClassifier', 'RandomForestClassifier']Dict:{'numpy': ['info', 'sum'], 'pandas': ['concat', 'value_counts', 'read_csv', 'isnull'], 'os': [], 'warnings': [], 'math': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'torch': [], 'xgboost': []} axis_0: 5, axis_1: 8
dask-with-simple-xgb.py : ['join', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'abs', 'mean', 'items', 'mean', 'std', 'array', 'head', 'copy', 'read_csv', 'head', 'apply', 'head', 'apply', 'head', 'head', 'head', 'merge', 'drop', 'head', 'sum', 'isnull', 'astype', 'head', 'to_csv', 'drop'] ['os', 'sys', 'numpy', 'pandas', 'xgboost', 'numpy', 'dask'] ['glob', 'Counter', 'tqdm', 'OneHotEncoder', 'KFold', 'dataclass', 'Client', 'wait', 'LocalCluster']Dict:{'glob': [], 'collections': ['items', 'copy'], 'os': [], 'sys': [], 'numpy': ['mean', 'std', 'abs', 'sum', 'array', 'copy'], 'pandas': ['array', 'merge', 'read_csv', 'isnull'], 'tqdm': [], 'sklearn': [], 'xgboost': [], 'dataclasses': [], 'dask': []} axis_0: 1, axis_1: 2
wids-temp-feature-engineering.py : ['join', 'read_csv', 'head', 'head', 'mean', 'corr', 'corr', 'sort_values', 'head', 'head', 'tail', 'drop', 'head'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'warnings'] []Dict:{'numpy': ['mean'], 'pandas': ['read_csv'], 'os': [], 'matplotlib': [], 'seaborn': [], 'warnings': []} axis_0: 0, axis_1: 1
amex-feature-engineering-ranking.py : ['to_datetime', 'first', 'groupby', 'last', 'groupby', 'apply', 'agg', 'groupby', 'set_index', 'tail', 'groupby', 'concat', 'concat', 'astype', 'sort_values', 'astype', 'rank', 'mean', 'abs', 'sum', 'reset_index', 'sort_values', 'astype', 'rank', 'merge'] ['gc', 'shap', 'random', 'numpy', 'pandas', 'lightgbm'] ['train_test_split', 'LGBMClassifier', 'early_stopping', 'log_evaluation', 'is_numeric_dtype']Dict:{'gc': [], 'shap': [], 'random': [], 'numpy': ['mean', 'abs', 'sum'], 'pandas': [], 'lightgbm': [], 'sklearn': [], '=': [], 'pd': [], 'X_val': [], "'mean_shap_value':": [], 'shap_means})': [], 'ascending=False)': [], "importance_df['mean_shap_value']": []} axis_0: 1, axis_1: 2
baselinemodeling.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'apply', 'assign', 'unique', 'unique', 'unique', 'all', 'join', 'join', 'sum', 'to_dict', 'add_prefix', 'update', 'add_prefix', 'keys', 'mean', 'mean', 'mean', 'mean', 'keys', 'mean', 'join', 'add_prefix', 'concat', 'unique', 'unique', 'concat', 'concat', 'concat', 'concat', 'unique', 'groupby', 'reset_index', 'apply', 'join', 'drop', 'astype', 'agg', 'groupby', 'reset_index', 'unique', 'groupby', 'reset_index', 'apply', 'join', 'drop', 'astype', 'agg', 'groupby', 'reset_index', 'unique', 'groupby', 'reset_index', 'apply', 'join', 'drop', 'astype', 'agg', 'groupby', 'reset_index', 'unique', 'groupby', 'reset_index', 'apply', 'join', 'drop', 'astype', 'agg', 'groupby', 'reset_index', 'copy', 'merge', 'merge', 'merge', 'merge', 'copy', 'merge', 'merge', 'merge', 'merge', 'merge', 'add_prefix', 'merge', 'add_prefix', 'concat', 'merge', 'add_prefix', 'merge', 'add_prefix', 'concat', 'concat', 'sum', 'isnull', 'copy', 'reset_index', 'count', 'groupby', 'merge', 'factorize', 'fillna', 'add_prefix', 'add_prefix', 'concat', 'concat', 'drop', 'drop', 'drop', 'all', 'sum', 'isnull', 'sum', 'isnull', 'array', 'array', 'copy', 'copy', 'drop', 'drop', 'hist', 'copy', 'astype', 'mean', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'astype', 'head', 'to_csv'] ['gc', 'glob', 'os', 'json', 'matplotlib.pyplot', 'pprint', 'numpy', 'pandas', 'joblib', 'scipy', 'lightgbm'] ['Parallel', 'delayed', 'tqdm', 'Image', 'TfidfVectorizer', 'SparsePCA', 'TruncatedSVD', 'LatentDirichletAllocation', 'NMF', 'Counter', 'partial', 'sqrt', 'cohen_kappa_score', 'mean_squared_error', 'confusion_matrix', 'StratifiedKFold']Dict:{'gc': [], 'glob': [], 'os': [], 'json': [], 'matplotlib': ['hist'], 'pprint': [], 'numpy': ['mean', 'sum', 'all', 'unique', 'array', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'factorize', 'unique', 'array', 'merge'], 'joblib': [], 'tqdm': ['update'], 'PIL': ['merge'], 'sklearn': [], 'scipy': [], 'collections': ['keys', 'update', 'copy'], 'functools': [], 'math': [], 'lightgbm': []} axis_0: 0, axis_1: 14
titanic-a-complete-tutorial-of-data-science.py : ['read_csv', 'head', 'tail', 'info', 'head', 'any', 'isnull', 'sum', 'any', 'isnull', 'any', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'value_counts', 'head', 'value_counts', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'hist', 'read_csv', 'head', 'tail', 'info', 'head', 'any', 'isnull', 'sum', 'any', 'isnull', 'any', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'hist', 'corr', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'map', 'hist', 'map', 'hist', 'map', 'reset_index', 'concat', 'drop', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'sort_values', 'concat', 'transform', 'fillna', 'mode', 'transform', 'fillna', 'mode', 'astype', 'reset_index', 'get_dummies', 'array', 'array', 'mean', 'astype', 'array', 'mean', 'mean', 'astype', 'array', 'mean', 'mean', 'astype', 'array', 'mean', 'rename', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'warnings'] ['accuracy_score', 'KFold', 'confusion_matrix', 'classification_report', 'plot_confusion_matrix', 'KFold', 'train_test_split', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'any', 'sum', 'info', 'array'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'array'], 'seaborn': [], 'matplotlib': ['hist'], 'sklearn': [], 'mlxtend': [], 'warnings': []} axis_0: 4, axis_1: 6
ncaam-2021-lgb-w-fe-on-three-datasets.py : ['read_csv', 'rename', 'count', 'groupby', 'rename', 'count', 'groupby', 'rename', 'count', 'groupby', 'fillna', 'join', 'join', 'rename', 'count', 'groupby', 'rename', 'count', 'groupby', 'rename', 'count', 'groupby', 'fillna', 'join', 'join', 'rename', 'rename', 'reset_index', 'join', 'apply', 'concat', 'rename', 'mean', 'groupby', 'rename', 'mean', 'groupby', 'rename', 'mean', 'groupby', 'rename', 'mean', 'groupby', 'reset_index', 'fillna', 'join', 'join', 'join', 'read_csv', 'concat', 'reset_index', 'fillna', 'mean', 'groupby', 'read_csv', 'rename', 'rename', 'rename', 'merge', 'merge', 'reset_index', 'max', 'groupby', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'drop', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'read_csv', 'concat', 'merge', 'merge', 'drop', 'merge', 'merge', 'drop', 'merge', 'merge', 'drop', 'merge', 'merge', 'drop', 'fillna', 'any', 'any', 'reset_index', 'read_csv', 'read_csv', 'copy', 'apply', 'apply', 'apply', 'copy', 'apply', 'apply', 'apply', 'drop', 'concat', 'drop', 'drop', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'reset_index', 'rename', 'reset_index', 'mean', 'groupby', 'concat', 'merge', 'drop', 'to_csv', 'head', 'apply', 'apply', 'apply', 'apply', 'merge'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm'] ['GroupKFold', 'KFold', 'log_loss']Dict:{'numpy': ['mean', 'any', 'max', 'std', 'copy'], 'pandas': ['concat', 'merge', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'lightgbm': []} axis_0: 1, axis_1: 15
vip-hint-coded.py : ['read_csv', 'fillna', 'fillna', 'mod', 'mod', 'mod', 'head', 'array', 'dot', 'dot', 'dot', 'array', 'dot', 'dot', 'transpose', 'dot', 'dot', 'transpose', 'sum', 'sum', 'unique', 'where', 'array', 'dot', 'dot', 'dot', 'array', 'dot', 'dot', 'transpose', 'dot', 'dot', 'transpose', 'sum', 'sum', 'where', 'unique'] ['matplotlib.pyplot', 'pandas', 'numpy', 'math', 'scipy'] ['choice', 'euclidean', 'expit', 'tqdm']Dict:{'matplotlib': [], 'pandas': ['array', 'unique', 'read_csv'], 'numpy': ['transpose', 'sum', 'where', 'mod', 'unique', 'dot', 'array'], 'math': [], 'scipy': [], 'random': [], 'tqdm': []} axis_0: 0, axis_1: 0
preprocessing-titanic.py : ['read_csv', 'read_csv', 'read_csv', 'describe', 'describe', 'info', 'info', 'head', 'items', 'reset_index', 'drop', 'corr', 'value_counts', 'sort_values', 'mean', 'groupby', 'value_counts', 'sort_values', 'mean', 'groupby', 'sum', 'isnull', 'skew', 'map', 'sum', 'isnull', 'skew', 'drop', 'drop', 'sort_values', 'sum', 'isnull', 'mode', 'dropna', 'fillna', 'sort_values', 'sum', 'isnull', 'median', 'dropna', 'fillna', 'reset_index', 'concat', 'head', 'map', 'corr', 'drop'] ['pandas', 'numpy', 'missingno', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['Counter', 'LogisticRegression', 'Perceptron', 'SGDClassifier', 'SVC', 'LinearSVC', 'RandomForestClassifier', 'KNeighborsClassifier', 'GaussianNB', 'DecisionTreeClassifier', 'CatBoostClassifier', 'cross_val_score', 'GridSearchCV']Dict:{'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'numpy': ['mean', 'median', 'info', 'sum'], 'missingno': [], 'collections': ['items'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'catboost': [], 'warnings': []} axis_0: 0, axis_1: 0
you-got-this-feature-engineering-and-lasso.py : ['read_csv', 'read_csv', 'copy', 'copy', 'concat', 'apply', 'dropna', 'get_dummies', 'fillna', 'mean', 'mean', 'min', 'concat', 'head', 'sort_values', 'tail', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib', 'matplotlib.pyplot'] ['scale', 'skew', 'skewtest', 'cross_val_score', 'Ridge', 'RidgeCV', 'ElasticNet', 'LassoCV', 'LassoLarsCV', 'LinearRegression']Dict:{'numpy': ['mean', 'min', 'copy'], 'pandas': ['concat', 'get_dummies', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'scipy': []} axis_0: 0, axis_1: 0
updated-debertav3-lgbm-with-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'join', 'get', 'count', 'apply', 'apply', 'apply', 'apply', 'merge', 'drop', 'head', 'head', 'mean', 'mean', 'update', 'map', 'map', 'join', 'map', 'eval', 'join', 'mean', 'head', 'drop', 'drop', 'drop', 'drop', 'mean', 'to_csv'] ['numpy', 'pandas', 'warnings', 'logging', 'os', 'shutil', 'json', 'transformers', 'torch', 'nltk', 'spacy', 're', 'lightgbm', 'random', 'os', 'numpy', 'torch'] ['AutoModel', 'AutoTokenizer', 'AutoConfig', 'AutoModelForSequenceClassification', 'DataCollatorWithPadding', 'Dataset', 'load_dataset', 'load_from_disk', 'TrainingArguments', 'Trainer', 'load_metric', 'disable_progress_bar', 'mean_squared_error', 'KFold', 'GroupKFold', 'tqdm', 'stopwords', 'Counter', 'SpellChecker']Dict:{'numpy': ['mean'], 'pandas': ['eval', 'merge', 'read_csv'], 'warnings': [], 'logging': [], 'os': [], 'shutil': [], 'json': [], 'transformers': [], 'datasets': [], 'sklearn': [], 'torch': ['mean'], 'tqdm': ['update'], 'nltk': [], 'collections': ['update', 'get'], 'spacy': [], 're': [], 'spellchecker': [], 'lightgbm': []} axis_0: 1, axis_1: 9
titanic-for-the-masses.py : ['read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'describe', 'describe', 'value_counts', 'unique', 'unique', 'corr', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'get_dummies', 'get_dummies', 'read_csv', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['train_test_split', 'roc_auc_score', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'info', 'unique'], 'pandas': ['get_dummies', 'unique', 'read_csv', 'value_counts'], 'os': [], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 0
titanic-top-4-using-networkx-feature-engineering.py : ['read_csv', 'read_csv', 'concat', 'fillna', 'sum', 'isnull', 'where', 'where', 'where', 'where', 'where', 'isnull', 'astype', 'fillna', 'notnull', 'notnull', 'notnull', 'any', 'notnull', 'set_index', 'reset_index', 'unique', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'set_index', 'items', 'reset_index', 'where', 'fillna', 'where', 'set_index', 'unique', 'sum', 'sum', 'iterrows', 'reset_index', 'set_index', 'sort_values', 'copy', 'astype', 'to_csv'] ['pandas', 'numpy', 're', 'matplotlib.pyplot', 'seaborn', 'networkx', 'pydotplus', 'warnings'] ['combinations', 'train_test_split', 'GridSearchCV', 'Pipeline', 'DecisionTreeClassifier', 'accuracy_score', 'StringIO', 'Image', 'export_graphviz']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'notnull'], 'numpy': ['any', 'sum', 'where', 'unique', 'copy'], 're': [], '': [], 'matplotlib': [], 'seaborn': [], 'networkx': [], 'itertools': [], 'sklearn': [], 'IPython': [], 'pydotplus': [], 'warnings': [], '=': [], 'pd': [], 'index=model_features)': []} axis_0: 0, axis_1: 0
two-sigma-financial-news-export.py : ['head', 'head', 'to_datetime', 'to_datetime', 'to_datetime', 'head', 'isin', 'tail', 'drop', 'tail', 'fillna', 'tail', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'datetime'] ['KMeans', 'USFederalHolidayCalendar', 'train_test_split', 'twosigmanews']Dict:{'numpy': ['isin'], 'pandas': [], 'os': [], 'sklearn': [], 'datetime': [], 'kaggle': []} axis_0: 0, axis_1: 1
the-model-3.py : ['get_dummies', 'read_csv', 'read_csv', 'reset_index', 'replace', 'median', 'groupby', 'kurtosis', 'sum', 'map', 'mean', 'std', 'fillna', 'mean', 'factorize', 'drop', 'read_csv', 'read_csv', 'agg', 'groupby', 'join', 'drop', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'read_csv', 'replace', 'replace', 'replace', 'replace', 'replace', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'read_csv', 'agg', 'groupby', 'groupby', 'read_csv', 'apply', 'apply', 'agg', 'groupby', 'groupby', 'read_csv', 'drop', 'agg', 'groupby', 'groupby', 'notnull', 'isnull', 'concat', 'to_csv', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'join', 'join', 'join', 'join', 'join'] ['numpy', 'pandas', 'gc', 'time', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['contextmanager', 'LGBMClassifier', 'roc_auc_score', 'roc_curve', 'KFold', 'StratifiedKFold']Dict:{'numpy': ['mean', 'median', 'sum', 'isin', 'std'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'factorize', 'notnull'], 'gc': [], 'time': [], 'contextlib': [], 'lightgbm': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'warnings': []} axis_0: 1, axis_1: 6
feature-engineering-step-by-step.py : ['read_csv', 'merge', 'drop', 'nunique', 'drop', 'drop', 'rename', 'fillna', 'to_numeric', 'to_datetime', 'get_dummies', 'isin', 'get_dummies', 'isin', 'get_dummies', 'isin', 'get_dummies', 'isin', 'get_dummies', 'drop'] ['pandas', 'numpy', 'json'] ['json_normalize']Dict:{'pandas': [], 'numpy': ['isin'], 'json': []} axis_0: 0, axis_1: 3
ga-v2-future-purchase-prediction.py : ['read_csv', 'json_normalize', 'merge', 'drop', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'drop', 'drop', 'astype', 'get_dummies', 'join', 'factorize', 'max', 'min', 'max', 'min', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'unique', 'unique', 'isin', 'value_counts', 'map', 'concat', 'array', 'unique', 'isin', 'isin', 'where'] ['numpy', 'pandas', 'gc', 'os', 'matplotlib.pyplot', 'warnings', 'seaborn', 'json', 'pandas.io.json', 'ast', 'lightgbm', 'seaborn'] ['confusion_matrix', 'accuracy_score', 'roc_curve', 'auc', 'json_normalize', 'GroupKFold', 'LabelEncoder', 'TimeSeriesSplit', 'KFold', 'mean_squared_error', 'accuracy_score', 'roc_auc_score', 'GroupKFold']Dict:{'numpy': ['mean', 'max', 'where', 'min', 'unique', 'isin', 'array'], 'pandas': [], 'gc': [], 'os': [], 'sklearn': [], 'matplotlib': [], 'warnings': [], 'seaborn': [], 'json': [], 'ast': [], 'lightgbm': []} axis_0: 1, axis_1: 3
spaceship-titanic-feature-engineering-baseline.py : ['join', 'read_csv', 'read_csv', 'transform', 'groupby', 'head', 'isna', 'isna', 'sum', 'head', 'sum', 'head', 'fillna', 'mode', 'any', 'isna', 'head', 'filter', 'groupby', 'any', 'notna', 'any', 'isna', 'fillna', 'mode', 'transform', 'groupby', 'head', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'head', 'any', 'isna', 'any', 'isna', 'sum', 'isna', 'sum', 'isna', 'isna', 'isna', 'isna', 'isna', 'sum', 'isna', 'sum', 'isna', 'value_counts', 'sum', 'notna', 'sum', 'isna', 'isna', 'astype', 'sum', 'isna', 'sum', 'isna', 'drop', 'drop', 'head', 'any', 'isna', 'copy', 'drop', 'concat', 'head', 'astype', 'head', 'map', 'get_dummies', 'head', 'head', 'head', 'drop', 'drop', 'drop', 'head', 'head', 'any', 'isna', 'head', 'reset_index', 'set_index', 'head', 'to_csv', 'to_csv', 'drop', 'drop', 'astype', 'copy', 'value_counts', 'drop', 'copy', 'get_dummies', 'head', 'head', 'copy', 'value_counts', 'drop', 'copy', 'value_counts', 'map', 'head', 'head', 'copy', 'value_counts', 'copy', 'copy', 'head', 'head', 'copy', 'value_counts', 'head', 'head', 'copy', 'value_counts', 'head', 'head', 'copy', 'value_counts', 'head', 'head', 'copy', 'value_counts', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['pandas', 'numpy', 'random', 'os', 'seaborn', 'matplotlib.pyplot'] ['linear_model', 'preprocessing', 'impute', 'model_selection', 'metrics', 'boxcox']Dict:{'sklearn': [], 'scipy': [], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'notna', 'get_dummies'], 'numpy': ['sum', 'any', 'copy'], 'random': [], 'os': [], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 12
ncaam-2021-diverse-model-ensemble.py : ['read_csv', 'rename', 'count', 'groupby', 'rename', 'count', 'groupby', 'rename', 'count', 'groupby', 'fillna', 'join', 'join', 'rename', 'count', 'groupby', 'rename', 'count', 'groupby', 'rename', 'count', 'groupby', 'fillna', 'join', 'join', 'rename', 'rename', 'reset_index', 'join', 'apply', 'concat', 'rename', 'mean', 'groupby', 'rename', 'mean', 'groupby', 'rename', 'mean', 'groupby', 'rename', 'mean', 'groupby', 'reset_index', 'fillna', 'join', 'join', 'join', 'read_csv', 'concat', 'reset_index', 'fillna', 'mean', 'groupby', 'read_csv', 'rename', 'rename', 'rename', 'merge', 'merge', 'reset_index', 'max', 'groupby', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'drop', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'read_csv', 'concat', 'merge', 'merge', 'drop', 'merge', 'merge', 'drop', 'merge', 'merge', 'drop', 'merge', 'merge', 'drop', 'fillna', 'any', 'any', 'reset_index', 'read_csv', 'read_csv', 'copy', 'apply', 'apply', 'apply', 'copy', 'apply', 'apply', 'apply', 'drop', 'concat', 'drop', 'drop', 'value_counts', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'reset_index', 'drop', 'drop', 'read_csv', 'rename', 'reset_index', 'mean', 'groupby', 'concat', 'merge', 'drop', 'rename', 'reset_index', 'mean', 'groupby', 'concat', 'merge', 'drop', 'to_csv', 'head', 'apply', 'apply', 'apply', 'apply', 'merge'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings', 'numpy', 'pandas', 'glob', 'os', 'gc', 'xgboost'] ['GroupKFold', 'KFold', 'log_loss', 'enable_hist_gradient_boosting', 'HistGradientBoostingRegressor', 'HistGradientBoostingClassifier', 'RandomForestClassifier', 'KFold', 'GroupKFold', 'LinearRegression', 'LogisticRegression', 'SVC', 'log_loss', 'tqdm']Dict:{'numpy': ['mean', 'any', 'max', 'std', 'copy'], 'pandas': ['concat', 'merge', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'lightgbm': [], 'warnings': [], 'tqdm': [], 'glob': [], 'os': ['rename'], 'gc': [], 'xgboost': []} axis_0: 1, axis_1: 20
tps-lightautoml-baseline-with-pseudolabels.py : ['read_excel', 'reset_index', 'rename', 'read_csv', 'where', 'where', 'where', 'value_counts', 'value_counts', 'value_counts', 'reset_index', 'concat', 'shift', 'fillna', 'shift', 'fillna', 'to_datetime', 'astype', 'isin', 'astype', 'astype', 'drop', 'astype', 'shift', 'shift', 'head', 'head', 'set_index', 'where', 'to_csv'] ['os', 'time', 'numpy', 'pandas', 'matplotlib.pyplot', 'torch', 'math'] ['mean_squared_log_error', 'TabularAutoML', 'TabularUtilizedAutoML', 'Task', 'DatetimeRole', 'ReportDeco']Dict:{'os': ['rename'], 'time': [], 'numpy': ['where', 'isin'], 'pandas': ['read_csv', 'concat', 'value_counts', 'read_excel', 'to_datetime'], 'sklearn': [], 'matplotlib': [], 'torch': ['where', 'isin', 'concat'], 'lightautoml': [], 'math': []} axis_0: 0, axis_1: 0
pytorch-disaster-eda-neural-network.py : ['update', 'read_csv', 'read_csv', 'read_csv', 'head', 'info', 'isna', 'fillna', 'mean', 'info', 'head', 'corr', 'sort_values', 'corr', 'sum', 'isnull', 'drop', 'drop', 'head', 'replace', 'replace', 'fillna', 'median', 'fillna', 'drop', 'copy', 'sum', 'drop', 'drop', 'copy', 'sum', 'drop', 'drop', 'head', 'head', 'head', 'head', 'head', 'head', 'get', 'to_numpy', 'to_numpy', 'to_numpy', 'array', 'transform', 'transform', 'transform', 'transform', 'astype', 'astype', 'astype', 'astype', '__init__', 'sum', 'eq', 'astype', 'to_csv'] ['numpy', 'pandas', 'torch', 'torch.nn', 'torch.optim', 'torch.nn.functional', 'matplotlib.pyplot', 'matplotlib', 'seaborn', 'missingno', 'sklearn', 'warnings'] ['DataLoader', 'Dataset', 'train_test_split', 'StandardScaler', 'MinMaxScaler']Dict:{'numpy': ['mean', 'median', 'sum', 'info', 'array', 'copy'], 'pandas': ['isna', 'array', 'read_csv', 'isnull'], 'torch': [], 'matplotlib': [], 'seaborn': [], 'missingno': [], 'sklearn': ['transform', '__init__'], 'warnings': []} axis_0: 0, axis_1: 10
titanic-a-complete-approach-for-data-scientists.py : ['join', 'read_csv', 'head', 'dropna', 'dropna', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'dropna', 'dropna', 'pivot', 'apply', 'replace', 'replace', 'transform', 'groupby', 'head', 'drop', 'select_dtypes', 'select_dtypes', 'transform', 'abs', 'abs', 'abs', 'abs', 'abs', 'abs', 'nlargest', 'read_csv', 'replace', 'replace', 'transform', 'groupby', 'drop', 'read_csv', 'drop', 'head', 'count', 'to_csv', 'head', 'transform', 'head', 'astype', 'head', 'transform', 'head', 'unique', 'unique', 'astype', 'head', 'unique', 'astype', 'head', 'unique'] ['string', 'numpy', 'pandas', 'seaborn', 'plotly.graph_objs', 'plotly.express', 'matplotlib.pyplot', 'pandas_profiling', 'ppscore', 'os', 're', 'collections', 'matplotlib.pyplot', 'seaborn', 'random'] ['stats', 'ztest', 'cycle', 'AutoViz_Class', 'display', 'cycle', 'stats', 'TargetEncoder', 'LeaveOneOutEncoder', 'Pipeline', 'ColumnTransformer', 'enable_iterative_imputer', 'SimpleImputer', 'IterativeImputer', 'StratifiedShuffleSplit', 'RandomizedSearchCV', 'train_test_split', 'StandardScaler', 'MinMaxScaler', 'PolynomialFeatures', 'accuracy_score', 'precision_score', 'recall_score', 'f1_score', 'log_loss', 'precision_recall_curve', 'average_precision_score', 'roc_curve', 'roc_auc_score', 'RandomForestClassifier', 'SVC', 'PCA', 'TSNE', 'XGBClassifier', 'plot_importance', 'LGBMClassifier', 'plot_importance', 'set_config', 'estimator_html_repr', 'KMeans', 'silhouette_score', 'AgglomerativeClustering', 'dendrogram', 'ward', 'silhouette_score', 'DBSCAN']Dict:{'string': [], '#': [], 'library': [], 'used': [], 'to': [], 'deal': [], 'with': [], 'text': [], 'data': [], 'numpy': ['abs', 'unique'], 'pandas': ['pivot', 'unique', 'read_csv', 'value_counts'], 'seaborn': [], 'scipy': [], 'statsmodels': [], 'plotly': [], 'itertools': [], 'matplotlib': [], 'pandas_profiling': [], 'for': [], 'automatic': [], 'EDA': [], 'autoviz': [], 'IPython': [], 'ppscore': [], 'os': ['replace'], 're': [], 'collections': [], 'category_encoders': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'random': []} axis_0: 0, axis_1: 3
update-57-4-train-inference-randomforest.py : ['abs', 'abs', 'abs', 'mean', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'head', 'reset_index', 'agg', 'groupby', 'head', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'head', 'merge', 'reset_index', 'agg', 'groupby', 'head', 'head', 'reset_index', 'agg', 'groupby', 'head', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'head', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'merge', 'merge', 'fillna', 'mean', 'drop', 'astype', 'drop', 'drop_duplicates', 'drop_duplicates', 'drop', 'drop', 'drop', 'apply'] ['numpy', 'pandas', 'pandas', 'warnings', 'amp_pd_peptide'] ['RandomForestRegressor', 'train_test_split', 'GridSearchCV', 'RandomizedSearchCV', 'metrics', 'r2_score', 'mean_squared_error', 'make_scorer', 'confusion_matrix', 'precision_score', 'recall_score', 'classification_report', 'accuracy_score', 'StratifiedKFold', 'KFold', 'cross_val_score', 'MinMaxScaler']Dict:{'numpy': ['mean', 'abs'], 'pandas': ['merge', 'read_csv'], 'sklearn': [], 'warnings': [], 'amp_pd_peptide': []} axis_0: 0, axis_1: 0
baseline-with-multiple-models.py : ['read_csv', 'head', 'array', 'abs', 'mean', 'std', 'max', 'min', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'max', 'abs', 'mean', 'abs', 'std', 'abs', 'dropna', 'mean', 'rolling', 'abs', 'dropna', 'mean', 'rolling', 'dropna', 'std', 'rolling', 'dropna', 'min', 'rolling', 'dropna', 'max', 'rolling', 'mean', 'std', 'max', 'min', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'mean', 'std', 'max', 'min', 'quantile', 'quantile', 'mean', 'std', 'quantile', 'quantile', 'std', 'max', 'quantile', 'quantile', 'std', 'min', 'quantile', 'quantile', 'diff', 'read_csv', 'read_csv', 'head', 'transform', 'head', 'items', 'update', 'concat', 'reset_index', 'mean', 'groupby', 'sort_values', 'read_csv', 'to_csv', 'describe'] ['os', 'time', 'random', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.graph_objs', 'lightgbm', 'warnings'] ['tqdm_notebook', 'BorutaPy', 'init_notebook_mode', 'iplot', 'Pipeline', 'StandardScaler', 'mean_absolute_error', 'GridSearchCV', 'KFold', 'RandomizedSearchCV', 'RFECV', 'SelectFromModel', 'LinearRegression', 'Ridge', 'DecisionTreeRegressor', 'NuSVR', 'SVR', 'KernelRidge', 'AdaBoostRegressor', 'RandomForestRegressor', 'ExtraTreesRegressor']Dict:{'os': [], 'time': [], 'random': [], 'numpy': ['mean', 'std', 'quantile', 'max', 'abs', 'min', 'diff', 'array'], 'pandas': ['concat', 'array', 'read_csv'], 'tqdm': [], 'boruta': [], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'warnings': []} axis_0: 1, axis_1: 0
automating-eda-and-feature-importance-detection.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'merge', 'isin', 'isin', 'isin', 'isin', 'isin', 'set_index', 'nlargest', 'sum', 'nsmallest', 'sum', 'merge', 'isin', 'head', 'copy', 'head', 'join', 'copy', 'head', 'head'] ['numpy', 'pandas', 'datetime', 'matplotlib.pyplot', 'seaborn', 'plotly.graph_objects', 'plotly.express', 'plotly.offline'] ['Tuple', 'make_subplots', 'AutoViz_Class', 'AutoViz_Class']Dict:{'numpy': ['isin', 'sum', 'copy'], 'pandas': ['concat', 'merge', 'read_csv'], 'datetime': [], 'typing': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'autoviz': []} axis_0: 0, axis_1: 0
titanic-a-detailed-classification-pipeline.py : ['join', 'read_csv', 'read_csv', 'head', 'head', 'info', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'head', 'info', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'value_counts', 'value_counts', 'groupby', 'head', 'value_counts', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'groupby', 'hist', 'drop', 'drop', 'apply', 'apply', 'median', 'groupby', 'apply', 'apply', 'drop', 'drop', 'drop', 'drop', 'apply', 'apply', 'drop', 'drop', 'fillna', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'median', 'sum', 'isnull', 'boxplot', 'boxplot', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'where', 'max', 'max', 'max', 'max', 'apply', 'apply', 'value_counts', 'map', 'map', 'value_counts', 'head', 'corr', 'corr', 'head', 'drop', 'drop', 'get_dummies', 'get_dummies', 'head', 'head', 'transform', 'drop', 'sort_values', 'sort_values', 'drop', 'drop', 'drop', 'mean', 'concat', 'to_csv'] ['warnings', 'numpy', 'pandas', 'math', 're', 'matplotlib.pyplot', 'seaborn', 'missingno', 'lightgbm', 'xgboost', 'os', 'pandas_profiling'] ['LogisticRegression', 'KNeighborsClassifier', 'GaussianNB', 'SVC', 'GaussianProcessClassifier', 'RBF', 'DecisionTreeClassifier', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'VotingClassifier', 'LinearDiscriminantAnalysis', 'QuadraticDiscriminantAnalysis', 'MLPClassifier', 'MinMaxScaler', 'StandardScaler', 'Normalizer', 'scale', 'LabelEncoder', 'OneHotEncoder', 'train_test_split', 'GridSearchCV', 'KFold', 'cross_val_score', 'accuracy_score', 'confusion_matrix', 'classification_report', 'precision_score', 'recall_score', 'f1_score']Dict:{'warnings': [], 'numpy': ['mean', 'median', 'quantile', 'max', 'sum', 'where', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'math': [], '': [], 're': [], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'missingno': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'os': [], 'pandas_profiling': []} axis_0: 0, axis_1: 6
a-simple-approach-to-titanic-dataset-83-2-accuracy.py : ['join', 'read_csv', 'read_csv', 'concat', 'info', 'describe', 'describe', 'hist', 'corr', 'corr', 'pivot_table', 'value_counts', 'value_counts', 'pivot_table', 'pivot_table', 'pivot_table', 'apply', 'isna', 'value_counts', 'pivot_table', 'apply', 'value_counts', 'pivot_table', 'apply', 'apply', 'replace', 'replace', 'join', 'value_counts', 'value_counts', 'pivot_table', 'head', 'apply', 'value_counts', 'apply', 'isna', 'apply', 'apply', 'apply', 'replace', 'replace', 'join', 'apply', 'fillna', 'median', 'fillna', 'median', 'dropna', 'hist', 'hist', 'astype', 'get_dummies', 'drop', 'drop', 'copy', 'drop', 'drop', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'astype', 'to_csv'] ['numpy', 'pandas', 'os', 'seaborn'] ['pyplot', 'StandardScaler', 'cross_val_score', 'GaussianNB', 'LogisticRegression', 'tree', 'KNeighborsClassifier', 'RandomForestClassifier', 'SVC', 'XGBClassifier', 'VotingClassifier']Dict:{'numpy': ['mean', 'median', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'pivot_table', 'concat', 'value_counts', 'get_dummies'], 'os': ['replace'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 0
tpsapr22-best-model-without-nn.py : ['read_csv', 'read_csv', 'read_csv', 'pivot', 'mean', 'std', 'clip', 'abs', 'kurtosis', 'sum', 'diff', 'sum', 'diff', 'sum', 'clip', 'diff', 'sum', 'clip', 'diff', 'max', 'diff', 'min', 'diff', 'sample', 'reindex', 'merge', 'min', 'groupby', 'merge', 'rename', 'groupby', 'sort_values', 'reset_index', 'mean', 'rolling', 'copy', 'mean', 'array', 'pivot', 'rename', 'groupby', 'merge', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'datetime', 'scipy.stats'] ['MaxNLocator', 'cycler', 'display', 'GroupKFold', 'cross_val_score', 'HistGradientBoostingRegressor', 'HistGradientBoostingClassifier', 'SequentialFeatureSelector', 'roc_auc_score', 'roc_curve', 'XGBClassifier', 'make_pipeline']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'array', 'min', 'clip', 'diff', 'std', 'copy'], 'pandas': ['array', 'merge', 'pivot', 'read_csv'], 'matplotlib': [], 'cycler': [], 'IPython': [], 'datetime': [], 'scipy': ['kurtosis'], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 10
story-of-a-leak.py : ['mode', 'read_csv', 'merge', 'drop', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'astype', 'apply', 'concat', 'concat', 'astype', 'merge', 'merge', 'drop', 'fillna', 'apply', 'replace', 'replace', 'to_numeric', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'to_datetime', 'unique', 'drop', 'drop', 'array', 'unique', 'isin', 'isin', 'fillna', 'factorize', 'apply', 'astype', 'astype', 'concat', 'mean', 'groupby', 'apply', 'apply', 'groupby', 'mean', 'median', 'sum', 'sum', 'fillna', 'sum', 'isnull', 'concat', 'apply', 'apply', 'groupby', 'mean', 'groupby', 'mean', 'median', 'sum', 'sum', 'fillna', 'sum', 'isnull', 'concat', 'sum', 'groupby', 'reset_index', 'concat', 'to_csv'] ['warnings', 'os', 'json', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'lightgbm', 'xgboost'] ['json_normalize', 'display', 'mean_squared_error', 'GroupKFold']Dict:{'warnings': [], 'os': ['replace'], 'json': [], 'pandas': [], 'numpy': ['mean', 'median', 'sum', 'unique', 'isin', 'array'], 'IPython': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'gc': [], 'lightgbm': [], 'xgboost': [], '=': [], 'pd': []} axis_0: 2, axis_1: 13
tps-jan22-quick-eda-xgboost.py : ['min', 'max', 'copy', 'update', 'update', 'to_datetime', 'map', 'where', 'notnull', 'fillna', 'to_datetime', 'map', 'where', 'notnull', 'fillna', 'sample', 'to_datetime', 'where', 'get_dummies', 'head', 'abs', 'abs', 'mean', 'rename', 'sort_values', 'rename', 'sort_values', 'head', 'to_csv', 'head'] [] []Dict:{'=': [], 'pd': [], "orient='index')": [], "'Gini-importance'})": [], 'ascending=False)': [], 'rot=45,': [], 'figsize=(10,5))': [], 'figsize=(12,5))': []} axis_0: 0, axis_1: 0
psp-0-676lb-in-6-seconds-with-linearmodel.py : ['count', 'max', 'nunique'] ['numpy'] ['f1_score']Dict:{'numpy': ['max'], 'sklearn': []} axis_0: 0, axis_1: 0
house-prices-eda-py.py : ['read_csv', 'info', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'astype', 'select_dtypes', 'select_dtypes', 'round', 'describe', 'reset_index', 'sum', 'isna', 'rename', 'copy', 'sort_values', 'copy', 'query', 'nlargest', 'copy', 'query', 'drop', 'info', 'corr', 'select_dtypes', 'isin', 'sort_values', 'corr', 'round', 'describe', 'round', 'describe', 'round', 'describe', 'head', 'sort_values', 'where', 'isin', 'round', 'describe', 'squeeze', 'mean', 'squeeze', 'median', 'boxplot', 'nlargest', 'rename', 'reset_index', 'round', 'value_counts'] ['matplotlib.pyplot', 'matplotlib.ticker', 'numpy', 'pandas', 'seaborn'] ['stats']Dict:{'matplotlib': [], 'numpy': ['mean', 'median', 'squeeze', 'sum', 'where', 'round', 'isin', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'value_counts'], 'seaborn': ['boxplot'], 'scipy': ['describe']} axis_0: 0, axis_1: 1
pdata1-lgb-train.py : ['sum', 'sum', 'read_pickle', 'read_csv', 'fillna', 'replace', 'merge', 'reset_index', 'copy'] ['pandas', 'numpy', 'copy', 'sys', 'util', 'joblib', 'copy', 'lightgbm', 'numpy', 'pandas', 'joblib', 'os'] ['tqdm', 'glob', 'reload', 'glob', 'reload', 'tqdm', 'model_selection']Dict:{'pandas': ['merge', 'read_pickle', 'read_csv'], 'numpy': ['sum', 'copy'], 'tqdm': [], 'glob': [], 'imp': [], 'copy': ['copy'], 'sys': [], 'util': [], 'joblib': [], 'lightgbm': [], 'sklearn': [], 'os': ['replace']} axis_0: 0, axis_1: 0
spaceship-my-starter-model.py : ['where', 'where', 'where', 'get_dummies', 'concat', 'drop', 'info'] [] []Dict:{} axis_0: 0, axis_1: 0
rapids-cudf-feature-engineering-xgb-4684de.py : ['round', 'to_datetime', 'factorize', 'sort_values', 'drop', 'agg', 'groupby', 'reset_index', 'read_parquet', 'read_parquet', 'read_parquet', 'read_csv', 'merge', 'drop_duplicates', 'merge', 'drop', 'agg', 'groupby', 'reset_index', 'factorize', 'sort_values', 'cumsum', 'merge', 'sort_values', 'to_parquet', 'to_csv'] ['cudf', 'cupy', 'xgboost', 'numpy'] ['tqdm']Dict:{'os': [], 'cudf': [], 'cupy': [], 'xgboost': [], 'numpy': ['round', 'cumsum'], 'tqdm': [], 'pandas': ['read_csv', 'read_parquet', 'factorize', 'merge', 'to_datetime']} axis_0: 0, axis_1: 5
housing-feature-engineering-stacking-ensemble.py : ['read_csv', 'read_csv', 'describe', 'head', 'mean', 'corr', 'sum', 'isnull', 'sum', 'isnull', 'unique', 'isnull', 'boxplot', 'boxplot', 'transform', 'groupby', 'fillna', 'median', 'median', 'groupby', 'update', 'fillna', 'update', 'fillna', 'isnull', 'unique', 'unique', 'rename', 'isnull', 'isnull', 'fillna', 'mode', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'mode', 'drop', 'boxplot', 'boxplot', 'isnull', 'transform', 'groupby', 'fillna', 'median', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'unique', 'unique', 'concat', 'astype', 'get_dummies', 'drop', 'drop', 'drop', 'drop', 'drop', 'mean', 'mean', 'mean', 'mean', 'array', 'array', 'array', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'os', 'statsmodels.api', 'xgboost'] ['RobustScaler', 'make_pipeline', 'LGBMRegressor', 'stats', 'RidgeCV', 'Ridge', 'cross_val_score', 'LassoCV', 'ElasticNetCV', 'StackingCVRegressor']Dict:{'numpy': ['mean', 'median', 'sum', 'unique', 'array'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'unique', 'array'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'os': ['rename'], 'sklearn': [], 'lightgbm': [], 'statsmodels': [], 'scipy': ['mode', 'describe'], 'xgboost': [], 'mlxtend': []} axis_0: 0, axis_1: 6
titanic-eda-modeling-for-beginners-top3.py : ['read_csv', 'read_csv', 'reset_index', 'concat', 'head', 'info', 'join', '_repr_html_', 'value_counts', 'count', 'mean', 'median', 'std', 'min', 'max', 'skew', 'sum', 'isnull', 'count', 'mean', 'median', 'std', 'min', 'max', 'skew', 'sum', 'isnull', 'count', 'mean', 'median', 'std', 'min', 'max', 'skew', 'sum', 'isnull', 'count', 'mean', 'median', 'std', 'min', 'max', 'skew', 'sum', 'isnull', 'set_index', 'count', 'sum', 'isnull', 'mode', 'value_counts', 'set_index', 'count', 'value_counts', 'count', 'pivot_table', 'pivot_table', 'pivot_table', 'crosstab', 'boxplot', 'head', 'pivot_table', 'pivot_table', 'crosstab', 'pivot_table', 'corr', 'pivot_table', 'pivot_table', 'pivot_table', 'cut', 'head', 'pivot_table', 'pivot_table', 'value_counts', 'apply', 'apply', 'value_counts', 'apply', 'isna', 'apply', 'value_counts', 'value_counts', 'apply', 'apply', 'replace', 'replace', 'join', 'pivot_table', 'fillna', 'median', 'fillna', 'median', 'dropna', 'drop', 'apply', 'isna', 'apply', 'apply', 'apply', 'replace', 'replace', 'join', 'apply', 'astype', 'drop', 'get_dummies', 'drop', 'notnull', 'notnull', 'drop', 'isnull', 'sort_values', 'apply', 'value_counts', 'value_counts', 'apply', 'value_counts', 'value_counts', 'get_dummies', 'drop', 'notnull', 'drop', 'isnull', 'sort_values', 'items', 'join', 'items', 'pop', 'keys', 'items', 'mean', 'reset_index', 'sort_values', 'astype', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'xgboost', 'matplotlib', 'copy', 'copy'] ['norm', 'probplot', 'skew', 'boxcox1p', 'LabelEncoder', 'OneHotEncoder', 'StandardScaler', 'RobustScaler', 'GridSearchCV', 'cross_val_score', 'KFold', 'RepeatedStratifiedKFold', 'RepeatedKFold', 'train_test_split', 'RandomizedSearchCV', 'KNeighborsClassifier', 'LogisticRegression', 'SVC', 'RandomForestClassifier', 'VotingClassifier', 'XGBClassifier', 'auc', 'accuracy_score', 'confusion_matrix', 'HTML']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'min', 'info', 'std'], 'pandas': ['isna', 'read_csv', 'isnull', 'cut', 'pivot_table', 'concat', 'value_counts', 'get_dummies', 'notnull', 'crosstab'], 'matplotlib': [], 'seaborn': ['boxplot'], 'scipy': [], 'warnings': [], 'sklearn': [], 'xgboost': ['_repr_html_', 'apply'], 'IPython': ['_repr_html_'], 'copy': []} axis_0: 0, axis_1: 7
titanic-complete-analysis-prediction.py : ['read_csv', 'read_csv', 'head', 'info', 'sum', 'isna', 'fillna', 'mean', 'astype', 'copy', 'cut', 'mean', 'hist', 'cut', 'sum', 'isna', 'unique', 'unique', 'unique', 'unique', 'unique', 'drop', 'cut', 'cut', 'get_dummies', 'drop', 'head', 'head', 'corr', 'corr', 'add', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['train_test_split', 'accuracy_score', 'confusion_matrix', 'classification_report', 'KFold', 'cross_val_score', 'cross_val_predict', 'GaussianNB', 'SVC', 'LinearSVC', 'KNeighborsClassifier', 'LogisticRegression', 'RandomForestClassifier', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'GridSearchCV']Dict:{'numpy': ['mean', 'add', 'sum', 'unique', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'cut', 'get_dummies', 'unique'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 2
efficient-prediction-of-smoker-status.py : ['join', 'read_csv', 'concat', 'info', 'info', 'duplicated', 'drop_duplicates', 'sum', 'get_dummies', 'sum', 'sample', 'head', 'drop', 'drop', 'concat', 'concat', 'mean', 'items', 'mean'] ['numpy', 'pandas', 'os', 'xgboost', 'optuna', 'xgboost', 'pandas', 'pandas', 'pandas'] ['Tuple', 'KFold', 'train_test_split', 'StratifiedKFold', 'accuracy_score', 'classification_report', 'log_loss', 'roc_auc_score', 'StandardScaler', 'MinMaxScaler', 'RobustScaler', 'LogisticRegression', 'cross_val_score', 'cross_val_predict', 'LogisticRegression', 'HistGradientBoostingClassifier', 'KMeans', 'CatBoostClassifier', 'LGBMClassifier', 'XGBClassifier', 'train_test_split', 'mean_squared_error', 'log_loss', 'IsolationForest', 'KMeans']Dict:{'numpy': ['mean', 'info', 'sum'], 'pandas': ['concat', 'get_dummies', 'read_csv'], 'os': [], 'typing': [], 'xgboost': [], 'sklearn': [], 'catboost': [], 'lightgbm': [], 'optuna': []} axis_0: 2, axis_1: 1
ai-generated-text-detection-add-new-data.py : ['map', 'read_csv', 'reset_index', 'sample', 'reset_index', 'concat', 'replace', 'read_csv', 'replace', 'concat', 'transform', 'value_counts', 'to_csv'] ['numpy', 'pandas', 'xgboost', 'language_tool_python'] ['LogisticRegression', 'XGBClassifier', 'TfidfVectorizer', 'VotingClassifier', 'SGDClassifier', 'KNeighborsClassifier', 'ProcessPoolExecutor']Dict:{'numpy': [], 'pandas': ['concat', 'read_csv', 'value_counts'], 'sklearn': [], 'xgboost': [], 'language_tool_python': [], 'concurrent': ['map']} axis_0: 1, axis_1: 0
titanic-competition-beginner-top-10.py : ['join', 'read_csv', 'read_csv', 'head', 'sum', 'isnull', 'value_counts', 'add', 'map', 'map', 'head', 'tail', 'map', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'sum', 'isnull', 'drop', 'head', 'sum', 'isnull', 'map', 'head', 'sum', 'isnull', 'head', 'sum', 'isnull', 'median', 'median', 'isnull', 'isnull', 'sum', 'isnull', 'head', 'head', 'drop', 'drop', 'head', 'drop', 'head', 'map', 'head', 'sum', 'isnull', 'median', 'median', 'isnull', 'isnull', 'fillna', 'median', 'sum', 'isnull', 'head', 'to_csv'] ['numpy', 'pandas', 'os'] ['StandardScaler', 'train_test_split', 'LogisticRegression', 'RandomForestClassifier']Dict:{'numpy': ['median', 'sum', 'add'], 'pandas': ['value_counts', 'read_csv', 'isnull'], 'sklearn': [], 'os': []} axis_0: 0, axis_1: 3
lanl-earthquake-prediction-fresh-eda.py : ['read_csv', 'array', 'array', 'mean', 'std', 'quantile', 'quantile', 'quantile', 'transpose', 'array', 'sum', 'multiply', 'unique', 'sum', 'sum', 'multiply', 'array', 'std', 'astype', 'astype', 'mean', 'mean', 'mean', 'mean', 'std', 'array', 'array', 'subtract', 'array', 'array', 'mean', 'mean', 'array', 'array', 'abs', 'sum', 'divide', 'mean', 'max', 'abs', 'divide', 'add', 'divide', 'array', 'get', 'get', 'get', 'get', 'get', '__init__', 'dot', 'sum', 'sum'] ['os', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['tqdm', 'jit', 'log', 'floor', 'KDTree', 'periodogram', 'welch', '*', '*', 'tqdm', 'train_test_split', 'backend', 'optimizers', 'GridSearchCV', 'KFold', '*', 'activations', 'regularizers', 'initializers', 'constraints', 'Layer', 'InputSpec', 'categorical_crossentropy', 'sparse_categorical_crossentropy', 'plot_model', 'model_to_dot', 'SVG']Dict:{'os': [], 'gc': [], 'numpy': ['mean', 'transpose', 'max', 'quantile', 'add', 'abs', 'sum', 'subtract', 'array', 'unique', 'dot', 'std', 'multiply', 'divide'], 'pandas': ['array', 'unique', 'read_csv'], 'tqdm': ['__init__'], 'numba': [], 'math': ['__init__'], 'sklearn': ['__init__'], 'scipy': [], 'keras': [], 'matplotlib': ['get'], 'seaborn': [], 'IPython': ['__init__'], 'warnings': []} axis_0: 0, axis_1: 2
learnings-from-the-typical-tabular-pipeline.py : ['read_csv', 'to_csv'] ['pandas'] []Dict:{'pandas': ['read_csv']} axis_0: 0, axis_1: 0
1st-place-solution-part-1-hands-on-data.py : ['read_csv', 'head', 'info', 'sum', 'isnull', 'sum', 'isna', 'duplicated', 'astype', 'astype', 'info', 'reset_index', 'pivot_table', 'sum', 'map', 'droplevel', 'rename_axis', 'reset_index', 'sum', 'mean', 'sum', 'read_csv', 'isin', 'boxplot', 'unique', 'min', 'max', 'boxplot', 'unique', 'reset_index', 'pivot_table', 'sum', 'map', 'droplevel', 'rename_axis', 'reset_index', 'unique', 'sum', 'unique', 'sum', 'read_csv', 'head', 'replace', 'replace', 'apply', 'apply', 'head', 'read_csv', 'head', 'replace', 'replace', 'fillna', 'items', 'join', 'items', 'join', 'concat', 'drop_duplicates', 'unique', 'sub', 'replace', 'apply', 'head', 'unique', 'read_csv', 'head', 'read_csv', 'dropna', 'merge', 'isin', 'isin'] ['pandas', 'numpy', 'gc', 'warnings', 'seaborn', 'matplotlib.pyplot', 're'] ['Counter', 'itemgetter']Dict:{'pandas': ['isna', 'read_csv', 'isnull', 'pivot_table', 'concat', 'unique', 'merge'], 'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'isin', 'info'], 'gc,': [], 'warnings': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'collections': ['items'], 'operator': [], 're': ['sub']} axis_0: 0, axis_1: 5
feature-engineering-naive-bayes-with-bag-of-words.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'value_counts', 'replace', 'replace', 'value_counts', 'replace', 'replace', 'value_counts', 'value_counts', 'replace', 'replace', 'replace', 'replace', 'value_counts', 'replace', 'replace', 'replace', 'replace', 'value_counts', 'value_counts', 'replace', 'replace', 'replace', 'replace', 'value_counts', 'replace', 'replace', 'replace', 'replace', 'value_counts', 'value_counts', 'any', 'isnull', 'sum', 'isnull', 'fillna', 'value_counts', 'replace', 'value_counts', 'replace', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'head', 'replace', 'replace', 'replace', 'sub', 'join', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'reset_index', 'agg', 'groupby', 'head', 'head', 'drop', 'head', 'merge', 'merge', 'head', 'head', 'head', 'join', 'join', 'drop', 'drop', 'head', 'drop', 'head', 'transform', 'transform', 'transform', 'transform', 'transform', 'fillna', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'take', 'take', 'read_csv', 'concat', 'head'] ['warnings', 'pandas', 'numpy', 'nltk', 'matplotlib.pyplot', 'seaborn', 'math', 'requests', 'pickle', 'os', 'plotly.graph_objs', 're', 'string', 'pickle', 'os', 're'] ['TfidfVectorizer', 'CountVectorizer', 'confusion_matrix', 'metrics', 'roc_curve', 'auc', 'roc_auc_score', 'GridSearchCV', 'MultinomialNB', 'train_test_split', 'coo_matrix', 'hstack', 'StandardScaler', 'Normalizer', 'StringIO', 'tqdm', 'iplot', 'init_notebook_mode', 'Counter', 'stopwords', 'PorterStemmer', 'WordNetLemmatizer', 'Word2Vec', 'KeyedVectors', 'Counter', 'WordCloud', 'tqdm', 'chain']Dict:{'warnings': [], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'merge'], 'numpy': ['take', 'sum', 'any'], 'nltk': [], 'matplotlib': [], 'seaborn': [], 'sklearn': ['transform'], 'math': [], 'scipy': [], 'io': [], 'requests': ['head'], 'pickle': [], 'tqdm': [], 'os': ['replace'], 'plotly': [], 'collections': [], 're': ['sub'], 'string': [], 'gensim': [], 'wordcloud': [], 'itertools': []} axis_0: 0, axis_1: 5
nlp-tutorial-using-python.py : ['read_csv', 'head', 'apply', 'head', 'array', 'join', 'apply', 'head', 'items', 'sort_values', 'head', 'join', 'apply', 'head', 'items', 'sort_values', 'head', 'apply', 'head', 'hist', 'hist', 'hist', 'items', 'sort_values', 'head', 'items', 'sort_values', 'head', 'items', 'sort_values', 'head', 'transform', 'head', 'head'] ['numpy', 'pandas', 'matplotlib', 'string'] ['preprocessing', 'CountVectorizer', 'TfidfVectorizer', 'train_test_split', 'KFold', 'stopwords', 'SnowballStemmer', 'pyplot', 'GaussianNB', 'BernoulliNB', 'MultinomialNB', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'accuracy_score', 'log_loss', 'GridSearchCV']Dict:{'numpy': ['array'], 'pandas': ['array', 'read_csv'], 'sklearn': ['transform'], 'nltk': [], 'matplotlib': []} axis_0: 0, axis_1: 0
titanic-prediction-top-5.py : ['join', 'read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'describe', 'describe', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'isnull', 'sort_values', 'mean', 'groupby', 'groupby', 'sort_values', 'mean', 'groupby', 'groupby', 'boxplot', 'boxplot', 'hist', 'sort_values', 'mean', 'groupby', 'groupby', 'sort_values', 'mean', 'groupby', 'groupby', 'corr', 'head', 'get_dummies', 'concat', 'drop', 'fillna', 'map', 'groupby', 'replace', 'fillna', 'median', 'drop', 'notna', 'isnull', 'isnull', 'isnull', 'apply', 'apply', 'drop', 'head', 'head', 'drop', 'transform', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'add', 'add', 'astype', 'astype', 'to_csv'] ['seaborn', 'matplotlib.pyplot', 'numpy', 'pandas', 're', 'os', 'warnings', 'keras'] ['OneHotEncoder', 'GradientBoostingClassifier', 'LogisticRegression', 'XGBClassifier', 'RandomForestClassifier', 'SVC', 'GaussianNB', 'DecisionTreeClassifier', 'KNeighborsClassifier', 'cprint', 'StandardScaler', 'Sequential', 'Dense', 'SGD']Dict:{'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'numpy': ['mean', 'median', 'add', 'sum', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'notna'], 'sklearn': [], 're': [], '': [], 'os': ['replace'], 'warnings': [], '#': [], 'For': [], 'hiding': [], 'termcolor': [], 'keras': []} axis_0: 0, axis_1: 3
riiid-lgbm-single-model-ensembling-training.py : ['concat', 'concat', 'read_pickle', 'read_pickle', 'reset_index', 'reset_index', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'mean', 'dropna', 'fillna', 'fillna', 'read_csv', 'merge', 'merge', 'astype', 'fillna', 'astype', 'fillna', 'to_feather', 'to_feather', 'drop', 'drop', 'mean', 'sum', 'reset_index', 'astype', 'astype', 'copy', 'copy', 'join', 'join', 'add', 'read_pickle', 'read_pickle', 'reset_index', 'copy', 'reset_index', 'merge', 'merge', 'astype', 'fillna', 'fillna', 'concat'] ['gc', 'joblib', 'numpy', 'pandas', 'lightgbm', 'datetime', 'riiideducation'] ['roc_auc_score', 'defaultdict', 'tqdm', 'njit', 'minimize', 'fsolve', 'time']Dict:{'gc': [], 'joblib': [], 'numpy': ['mean', 'sum', 'add', 'copy'], 'pandas': ['concat', 'merge', 'read_pickle', 'read_csv'], 'sklearn': [], 'collections': ['copy'], 'tqdm': [], 'lightgbm': [], 'numba': [], 'scipy': [], 'datetime': [], 'time': []} axis_0: 0, axis_1: 4
updrs-forecast-with-tensorflow-and-deep-learning.py : ['abs', 'abs', 'abs', 'mean', 'dropna', 'dropna', 'copy', 'drop', 'copy', 'drop', 'mean', 'fillna', 'mean', 'fillna', 'read_csv', 'read_csv', 'read_csv', 'drop', 'merge', 'pivot', 'drop', 'droplevel', 'reset_index', 'head', 'merge', 'set_index', 'head', 'sample', 'drop', 'array', 'apply'] ['tensorflow', 'numpy', 'pandas'] ['keras', 'layers']Dict:{'tensorflow': [], 'numpy': ['mean', 'abs', 'array', 'copy'], 'pandas': ['array', 'merge', 'pivot', 'read_csv']} axis_0: 0, axis_1: 4
handling-multimodal-distributions-fe-techniques.py : ['read_csv', 'head', 'read_csv', 'read_csv', 'any', 'sum', 'isna', 'any', 'sum', 'isna', 'apply', 'apply', 'boxplot', 'reset_index', 'apply', 'head', 'corr', 'head', 'sort_values', 'set_index', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'head', 'apply', 'head', 'head', 'head', 'tail', 'head', 'head', 'corr', 'nunique', 'where', 'where', 'head', 'head', 'cut', 'cut', 'head', 'sum', 'mean', 'min', 'max', 'std', 'var', 'sum', 'mean', 'min', 'max', 'std', 'var', 'head', 'concat', 'head', 'head', 'reset_index', 'isin', 'isin', 'head', 'reset_index', 'isin', 'isin', 'reset_index', 'sort_values', 'concat', 'head', 'describe', 'diff', 'copy', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings', 'featuretools'] ['stats', 'KFold', 'mean_squared_error', 'GaussianMixture']Dict:{'numpy': ['mean', 'any', 'max', 'var', 'sum', 'where', 'min', 'isin', 'diff', 'std', 'copy'], 'pandas': ['concat', 'cut', 'isna', 'read_csv'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': ['describe'], 'lightgbm': [], 'sklearn': [], 'warnings': [], 'featuretools': []} axis_0: 4, axis_1: 16
advance-house-pricing.py : ['read_csv', 'read_csv', 'concat', 'read_csv', 'unique', 'replace', 'where', 'rename', 'items', 'astype', 'items', 'astype', 'select_dtypes', 'fillna', 'select_dtypes', 'fillna', 'info', 'info', 'select_dtypes', 'mean', 'copy', 'pop', 'copy', 'select_dtypes', 'factorize', 'sort_values', 'sort_values', 'copy', 'pop', 'copy', 'pop', 'copy', 'select_dtypes', 'get_dummies', 'mul', 'sum', 'gt', 'transform', 'groupby', 'copy', 'mean', 'std', 'copy', 'mean', 'std', 'mean', 'std', 'cumsum', 'corr', 'transform', 'concat', 'transform', 'add', 'copy', 'pop', 'copy', 'pop', 'concat', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'drop', 'join', 'join', 'transform', 'to_csv'] ['os', 'warnings', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn'] ['Path', 'display', 'CategoricalDtype', 'MEstimateEncoder', 'KMeans', 'PCA', 'mutual_info_regression', 'KFold', 'cross_val_score', 'XGBRegressor', 'reduce']Dict:{'os': ['rename', 'replace'], 'warnings': [], 'pathlib': ['rename', 'replace'], 'matplotlib': [], 'numpy': ['mean', 'add', 'sum', 'where', 'unique', 'info', 'std', 'cumsum', 'copy'], 'pandas': [], 'seaborn': [], 'IPython': [], 'category_encoders': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 0
feature-engineering-random-forest.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'head', 'merge', 'value_counts', 'corr', 'max', 'groupby', 'min', 'groupby', 'median', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'quantile', 'groupby', 'quantile', 'groupby', 'quantile', 'groupby', 'max', 'groupby', 'min', 'groupby', 'quantile', 'groupby', 'head', 'merge', 'head', 'max', 'groupby', 'min', 'groupby', 'median', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'quantile', 'groupby', 'quantile', 'groupby', 'quantile', 'groupby', 'max', 'groupby', 'min', 'groupby', 'merge', 'transpose', 'transpose', 'transpose', 'transpose', 'array', 'array', 'array', 'array', 'transpose', 'transpose', 'transpose', 'transpose', 'array', 'array', 'array', 'array', 'head', 'read_csv', 'to_csv', 'head', 'array', 'sort_values'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'sklearn', 'random', 'warnings', 'statsmodels.api'] ['reduce', 'BaggingClassifier', 'RandomForestClassifier', 'LinearRegression']Dict:{'numpy': ['mean', 'median', 'transpose', 'quantile', 'max', 'std', 'min', 'info', 'array'], 'pandas': ['array', 'merge', 'read_csv', 'value_counts'], 'os': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'functools': [], 'random': [], 'warnings': [], 'statsmodels': [], '=': [], 'pd': [], 'clf': [], 'ascending=False,': [], 'inplace=True)': []} axis_0: 0, axis_1: 0
churn-analysis-with-95-accuracy.py : ['read_csv', 'head', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'product', 'sum', 'isnull', 'drop', 'sum', 'sum', 'isnull', 'product', 'sum', 'sum', 'isnull', 'drop', 'info', 'nunique', 'nunique', 'drop', 'sum', 'duplicated', 'nunique', 'nunique', 'head', 'drop', 'head', 'transform', 'read_csv', 'read_csv', 'read_csv', 'head', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'product', 'sum', 'isnull', 'mode', 'sum', 'sum', 'isnull', 'transform', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.express', 'os'] ['train_test_split', 'StandardScaler', 'MinMaxScaler', 'RobustScaler', 'PowerTransformer', 'LinearRegression', 'DecisionTreeClassifier', 'RandomForestClassifier', 'LogisticRegression', 'accuracy_score', 'precision_score', 'recall_score', 'f1_score', 'cohen_kappa_score', 'roc_auc_score', 'confusion_matrix', 'classification_report', 'LGBMImputer', 'LGBMClassifier', 'plot_importance', 'XGBClassifier', 'LGBMClassifier']Dict:{'numpy': ['sum', 'info', 'product'], 'pandas': ['read_csv', 'isnull'], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'sklearn': [], 'os': [], 'kuma_utils': [], 'lightgbm': [], 'xgboost': []} axis_0: 1, axis_1: 4
house-price-stacked-regression-top-3.py : ['reset_index', 'concat', 'read_csv', 'read_csv', 'drop', 'head', 'sum', 'isnull', 'sum', 'isnull', 'select_dtypes', 'select_dtypes', 'apply', 'fillna', 'median', 'apply', 'fillna', 'value_counts', 'drop', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'concat', 'sum', 'any', 'isnull', 'drop', 'sort_values', 'corr', 'head', 'boxplot', 'select_dtypes', 'head', 'melt', 'concat', 'map', 'describe', 'hist', 'hist', 'skew', 'kurtosis', 'skew', 'kurtosis', 'qcut', 'qcut', 'qcut', 'astype', 'astype', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'select_dtypes', 'select_dtypes', 'array', 'array', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'drop', 'drop', 'value_counts', 'value_counts', 'array', 'array', 'sort_values', 'abs', 'corr', 'concat', 'sort_values', 'apply', 'skew', 'nunique', 'concat', 'concat', 'drop', 'drop', 'head', 'items', 'array', 'array', 'array', 'items', 'array', 'array', 'mean', 'std', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'read_csv', 'concat', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'missingno', 'warnings', 'time'] ['stats', 'preprocessing', 'feature_selection', 'RandomForestRegressor', 'SequentialFeatureSelector', 'KFold', 'cross_val_score', 'cross_val_predict', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'SVR', 'mean_squared_error', 'GradientBoostingRegressor', 'StackingCVRegressor', 'StackingRegressor', 'XGBRegressor', 'LGBMRegressor']Dict:{'pandas': ['read_csv', 'isnull', 'melt', 'concat', 'value_counts', 'qcut', 'array'], 'numpy': ['mean', 'median', 'std', 'any', 'abs', 'sum', 'array'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'missingno': [], 'scipy': ['kurtosis', 'describe', 'skew'], 'sklearn': [], 'warnings': [], 'mlxtend': [], 'xgboost': ['apply'], 'lightgbm': [], 'time': []} axis_0: 0, axis_1: 15
top2-5-feature-processing-and-selection-model.py : ['join', 'read_csv', 'read_csv', 'head', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'duplicated', 'drop', 'fillna', 'mode', 'fillna', 'mode', 'head', 'apply', 'join', 'apply', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'drop', 'head', 'qcut', 'qcut', 'apply', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'head', 'value_counts', 'astype', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 're'] ['KNNImputer', 'LabelEncoder', 'StandardScaler', 'StratifiedKFold', 'cross_val_score', 'RandomizedSearchCV', 'GridSearchCV', 'LogisticRegression', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'StackingClassifier', 'KNeighborsClassifier', 'f1_score', 'recall_score', 'precision_score', 'roc_auc_score', 'XGBClassifier']Dict:{'numpy': ['sum', 'min', 'max'], 'pandas': ['qcut', 'isnull', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'os': [], 'sklearn': [], 're': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 0
feature-engineering-in-house-price-dataset.py : ['join', 'read_csv', 'head', 'info', 'select_dtypes', 'select_dtypes', 'nunique', 'nunique', 'sum', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'sum', 'duplicated', 'describe', 'describe', 'corr', 'corr', 'drop', 'select_dtypes', 'select_dtypes', 'sum', 'isna', 'any', 'isna', 'any', 'isna', 'fillna', 'mean', 'any', 'isna', 'any', 'isna', 'sum', 'isna', 'any', 'isna', 'sum', 'isna', 'fillna', 'mode', 'any', 'isna', 'select_dtypes', 'any', 'isna', 'sum', 'sum', 'isna', 'describe', 'get_dummies', 'drop', 'sort_values', 'apply', 'sort_values', 'head'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn'] ['MinMaxScaler', 'train_test_split', 'PCA']Dict:{'numpy': ['mean', 'info', 'sum', 'any'], 'pandas': ['isna', 'get_dummies', 'read_csv'], 'os': [], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 2
openvaccine-gru-lstm-gkf-augs.py : ['read_json', 'read_json', 'read_csv', 'transpose', 'array', 'applymap', 'transpose', 'array', 'copy', 'query', 'copy', 'query', 'copy', 'query', 'copy', 'query', 'concat', 'head', 'concat', 'head', 'concat', 'head', 'concat', 'head', 'merge', 'head', 'to_csv'] ['warnings', 'pandas', 'numpy', 'seaborn', 'math', 'json', 'os', 'random', 'tensorflow', 'tensorflow_addons', 'keras.backend'] ['pyplot', 'tqdm', 'train_test_split', 'StratifiedKFold', 'RepeatedStratifiedKFold']Dict:{'warnings': [], 'pandas': ['read_csv', 'read_json', 'concat', 'array', 'merge'], 'math,': [], 'json,': [], 'os,': [], 'random': [], 'matplotlib': [], 'tqdm': [], 'tensorflow': ['transpose', 'concat'], 'tensorflow_addons': [], 'keras': ['transpose'], 'sklearn': []} axis_0: 0, axis_1: 0
pss3e9-winning-model.py : ['read_csv', 'read_csv', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'tail', 'clip', 'clip', 'mean', 'groupby', 'apply', 'copy', 'reindex', 'apply', 'apply', 'round', 'mean', 'rolling', 'min', 'max', 'min', 'max', 'hist', 'drop_duplicates', 'sort_values'] ['pandas', 'numpy', 'matplotlib.pyplot', 'datetime', 'lightgbm', 'math', 'itertools'] ['BaseEstimator', 'TransformerMixin', 'KFold', 'GroupKFold', 'make_pipeline', 'Pipeline', 'ColumnTransformer', 'StandardScaler', 'RandomForestRegressor', 'VotingRegressor', 'Ridge', 'RidgeCV', 'GradientBoostingRegressor', 'mean_squared_error']Dict:{'pandas': ['isna', 'read_csv'], 'numpy': ['mean', 'max', 'sum', 'round', 'min', 'clip', 'copy'], 'matplotlib': ['hist'], 'datetime,': [], 'lightgbm,': [], 'math,': [], 'itertools': ['groupby'], 'sklearn': []} axis_0: 2, axis_1: 1
eda-and-predict-the-score-by-using-pytorch.py : ['read_csv', 'head', 'read_csv', 'info', 'describe', 'replace', 'replace', 'apply', 'sub', 'apply', 'value_counts', 'apply', 'apply', 'apply', 'describe', 'sum', 'items', 'head', 'sum', 'items', 'tail', 'sum', 'items', 'mean', 'max', 'apply', 'mean', 'max', 'mean', 'mean', 'corr', 'select_dtypes', 'apply', 'apply', 'read_csv', 'read_csv', 'reset_index', '__init__', 'mean', 'mean', 'keys', 'keys', 'keys', 'concat', 'eval'] ['pandas', 'numpy', 're', 'unicodedata', 'seaborn', 'matplotlib.pyplot', 're', 'string', 'unicodedata', 'keras', 'tensorflow', 'nltk', 'torch', 'torch.nn', 'numpy', 'pandas', 'matplotlib.pyplot', 'gc', 'os', 'transformers'] ['stopwords', 'word_tokenize', 'TextBlob', 'WordCloud', 'CountVectorizer', 'PorterStemmer', 'LabelBinarizer', 'classification_report', 'confusion_matrix', 'accuracy_score', 'train_test_split', 'ReduceLROnPlateau', 'BeautifulSoup', 'text', 'sequence', 'classification_report', 'confusion_matrix', 'accuracy_score', 'train_test_split', 'punctuation', 'pos_tag', 'wordnet', 'text', 'sequence', 'Sequential', 'Dense', 'Embedding', 'LSTM', 'Dropout', 'ReduceLROnPlateau', 'Tokenizer', 'stopwords', 'Word', 'PorterStemmer', 'WordCloud', 'STOPWORDS', 'WordNetLemmatizer', 'word_tokenize', 'sent_tokenize', 'pos_tag', 'wordnet', 'Embedding', 'LSTM', 'Dense', 'Bidirectional', 'filterwarnings', 'set_config', 'word_tokenize', 'CountVectorizer', 'CountVectorizer', 'TextBlob', 'AutoModel', 'AutoTokenizer', 'train_test_split', 'tqdm']Dict:{'pandas': ['concat', 'eval', 'read_csv', 'value_counts'], 'numpy': ['mean', 'info', 'sum', 'max'], 're': ['sub'], 'unicodedata': [], 'nltk': [], 'seaborn': [], 'matplotlib': [], 'textblob': [], 'wordcloud': [], 'sklearn': ['__init__'], 'keras': ['__init__'], 'bs4': ['__init__'], 're,string,unicodedata': [], 'string': ['__init__', 'replace'], 'tensorflow': ['__init__'], 'warnings': ['__init__'], 'transformers': [], 'torch': [], 'tqdm': ['__init__'], 'gc': [], 'os': ['replace']} axis_0: 3, axis_1: 0
lightgbm-automated-feature-engineering-easy.py : ['join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'mean', 'concat', 'replace', 'replace', 'replace', 'replace', 'replace', 'head', 'fillna', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'copy', 'notnull', 'copy', 'isnull', 'drop', 'pop', 'max', 'to_csv'] ['os', 'gc', 'pandas', 'numpy', 'lightgbm', 'featuretools', 'warnings'] ['LabelEncoder']Dict:{'os': ['replace'], 'gc': [], 'pandas': ['concat', 'notnull', 'read_csv', 'isnull'], 'numpy': ['mean', 'sum', 'max', 'copy'], 'lightgbm': [], 'featuretools': [], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 1
icecube-sensor-efficiency-feature-engineering.py : ['read_csv', 'apply', 'head', 'apply', 'head'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.express'] []Dict:{'numpy': [], 'pandas': ['read_csv'], 'seaborn': [], 'matplotlib': [], 'plotly': []} axis_0: 0, axis_1: 1
first-model-lgbm.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'concat', 'copy', 'copy', 'mean', 'rolling', 'shift', 'std', 'rolling', 'shift', 'min', 'rolling', 'shift', 'max', 'rolling', 'shift', 'concat', 'concat', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'replace', 'replace', 'fillna', 'fillna', 'concat', 'astype', 'round', 'clip', 'astype', 'round', 'clip', 'reset_index', 'mean', 'groupby', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'math', 'matplotlib.pyplot', 'seaborn', 'warnings', 'gc', 'lightgbm', 'os'] ['GroupKFold', 'KFold', 'StratifiedKFold', 'cohen_kappa_score', 'accuracy_score', 'mean_squared_error', 'f1_score', 'StandardScaler']Dict:{'numpy': ['mean', 'max', 'sum', 'round', 'min', 'clip', 'std', 'copy'], 'pandas': ['concat', 'read_csv'], 'math': [], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'gc': [], 'lightgbm': [], 'sklearn': [], 'os': ['replace']} axis_0: 0, axis_1: 0
deep-learning-in-tf-with-upsampling-lb-758.py : ['join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'mean', 'head', 'agg', 'groupby', 'merge', 'mean', 'groupby', 'merge', 'agg', 'groupby', 'mode', 'merge', 'agg', 'groupby', 'merge', 'idxmax', 'groupby', 'merge', 'mean', 'groupby', 'merge', 'idxmax', 'groupby', 'merge', 'agg', 'groupby', 'merge', 'idxmax', 'groupby', 'merge', 'mean', 'groupby', 'merge', 'merge', 'value_counts', 'merge', 'value_counts', 'merge', 'value_counts', 'merge', 'value_counts', 'fillna', 'concat', 'drop', 'pop', 'unique', 'sum', 'isnull', 'drop', 'pop', 'fillna', 'array', 'head', 'array', 'isin', 'isin', 'head', 'concat', 'unique', 'bool', 'astype', 'where', 'round', 'where', 'round', 'to_csv'] ['os', 'gc', 'pandas', 'numpy', 'tensorflow', 'matplotlib.pyplot', 'seaborn'] ['LabelEncoder', 'MinMaxScaler', 'StandardScaler', 'train_test_split', 'roc_auc_score', 'roc_curve', 'precision_recall_curve', 'confusion_matrix']Dict:{'os': [], 'gc': [], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'array', 'merge'], 'numpy': ['mean', 'sum', 'where', 'round', 'unique', 'isin', 'array'], 'tensorflow': ['concat', 'where', 'round', 'unique', 'bool'], 'sklearn': [], 'matplotlib': [], 'seaborn': []} axis_0: 1, axis_1: 5
1st-place-solution.py : ['get', '__init__', 'dot', 'sum', 'sum', 'items', 'items', 'squeeze', 'dot', 'dot', 'get', 'get', 'get', 'get', 'get', 'get', 'get', '__init__', 'sum', 'sum', 'sum', '__init__'] ['os', 'numpy', 'warnings', 'tensorflow'] ['Embedding', 'Dense', 'Input', 'Bidirectional', 'TimeDistributed', 'CuDNNGRU', 'CuDNNLSTM', 'Convolution1D', 'Conv1D', 'merge', 'Flatten', 'concatenate', 'Dropout', 'PReLU', 'Activation', 'BatchNormalization', 'GlobalMaxPool1D', 'GlobalAveragePooling1D', 'SpatialDropout1D', 'InputSpec', 'Layer', 'Model', 'initializers', 'constraints', 'optimizers', 'regularizers', 'backend']Dict:{'os': [], 'numpy': ['sum', 'dot', 'squeeze'], 'keras': [], 'warnings': [], 'tensorflow': ['squeeze']} axis_0: 0, axis_1: 5
tps-aug-22-xgb-cat-lgbm-optuna.py : ['read_csv', 'read_csv', 'read_csv', 'to_csv', 'astype', 'astype', 'astype', 'astype', 'sort_values', 'sum', 'isna', 'duplicated', 'sum', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'head', 'drop', 'concat', 'astype', 'isnull', 'astype', 'isnull', 'sort_values', 'corr', 'drop', 'round', 'sum', 'reset_index', 'sort_values', 'head', 'unique', 'sort_values', 'corr', 'drop', 'sum', 'isnull', 'unique', 'keys', 'dropna', 'sum', 'isnull', 'isnull', 'sum', 'isnull', 'isnull', 'sum', 'sum', 'isnull', 'mean', 'transform', 'transform', 'transform', 'transform', 'copy', 'copy', 'copy', 'isna', 'isna', 'mean', 'std', 'mean', 'select_dtypes', 'select_dtypes', 'head', 'head', 'select_dtypes', 'select_dtypes', 'copy', 'copy', 'astype', 'copy', 'head', 'copy', 'reset_index', 'copy', 'set_index', 'head', 'reset_index', 'set_index', 'sort_index', 'to_csv', 'mean', 'concat', 'head', 'sort_values', 'head', 'reset_index', 'copy', 'rename', 'to_csv', 'head', 'copy', 'reset_index', 'reset_index', 'copy', 'head', 'update', 'sort_values', 'head', 'sort_values', 'head', 'sort_values', 'head', 'copy', 'reset_index', 'reset_index', 'copy', 'head', 'update', 'sort_values', 'head', 'sort_values', 'head', 'head', 'astype', 'max', 'max', 'max', 'first_valid_index', 'head', 'head', 'to_csv', 'head', 'head', 'to_csv', 'head', 'read_csv', 'rename', 'read_csv', 'rename', 'read_csv', 'rename', 'read_csv', 'rename', 'head', 'head', 'head', 'head', 'merge', 'merge', 'merge', 'merge', 'head', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'rename', 'rename', 'rename', 'rename', 'head', 'merge', 'merge', 'merge', 'merge', 'head', 'corr', 'corr', 'reset_index', 'reset_index', 'copy', 'mean', 'sort_values'] ['os', 'time', 'pandas', 'numpy', 'xgboost', 'catboost', 'lightgbm', 'optuna', 'matplotlib.pylab', 'seaborn'] ['Path', 'train_test_split', 'SimpleImputer', 'KFold', 'GroupKFold', 'StratifiedKFold', 'StandardScaler', 'RobustScaler', 'PowerTransformer', 'LogisticRegression', 'HuberRegressor', 'classification_report', 'confusion_matrix', 'plot_optimization_history', 'plot_param_importances', 'cycle', 'accuracy_score', 'precision_score', 'recall_score', 'f1_score', 'roc_auc_score', 'LabelEncoder', 'OneHotEncoder', 'KNNImputer', 'WoEEncoder', 'mode', 'LogisticRegression', 'roc_auc_score', 'mean_squared_error', 'LinearRegression', 'Ridge']Dict:{'os': ['rename'], 'time': [], 'pathlib': ['rename'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'unique', 'merge'], 'numpy': ['mean', 'max', 'sum', 'round', 'unique', 'std', 'copy'], 'sklearn': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'optuna': [], 'matplotlib': ['mean', 'max', 'sum', 'round', 'unique', 'std', 'copy'], 'seaborn': [], 'itertools': [], 'feature_engine': [], 'scipy': []} axis_0: 0, axis_1: 14
optiver-a-starter-s-notebook.py : ['mode', 'drop', 'read_csv', 'drop', 'read_csv', 'head', 'count', 'nunique', 'sum', 'isnull', 'concat', 'describe', 'head', 'count', 'nunique', 'sum', 'isnull', 'concat', 'describe', 'drop', 'value_counts', 'nunique', 'value_counts', 'isna', 'pop', 'copy', 'eval', 'eval', 'eval', 'max', 'min', 'sum', 'isna', 'pop', 'mean', 'std', 'mean', 'std', 'drop'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'tensorflow', 'os', 'gc', 'optiver2023'] ['set_config', 'clone', 'FunctionTransformer', 'make_pipeline', 'TimeSeriesSplit', 'mean_absolute_error', 'XGBRegressor', 'LGBMRegressor', 'CatBoostRegressor']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'eval', 'concat', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'tensorflow': ['concat'], 'os': [], 'gc': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'optiver2023': []} axis_0: 0, axis_1: 3
titanic.py : ['join', 'read_csv', 'head', 'info', 'describe', 'sum', 'isna', 'value_counts', 'fillna', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'transform', 'groupby', 'fillna', 'median', 'value_counts', 'unstack', 'groupby', 'unstack', 'groupby', 'unstack', 'groupby', 'unstack', 'groupby', 'info', 'read_csv', 'info', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'median', 'dropna', 'info', 'join', 'get_dummies', 'drop', 'join', 'get_dummies', 'drop', 'head', 'mean', 'to_csv', 'mean', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'os'] ['GridSearchCV', 'confusion_matrix', 'accuracy_score', 'cross_val_score', 'accuracy_score', 'make_pipeline', 'LogisticRegression', 'cross_val_score', 'RandomForestClassifier', 'GaussianNB', 'MultinomialNB', 'ComplementNB', 'BernoulliNB', 'svm', 'tree']Dict:{'numpy': ['mean', 'median', 'info', 'sum'], 'pandas': ['isna', 'get_dummies', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'imblearn': [], 'warnings': [], 'os': []} axis_0: 0, axis_1: 2
eda-feature-engineering-tabular-playground.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'duplicated', 'sum', 'duplicated', 'sum', 'duplicated', 'max', 'min', 'max', 'min', 'merge', 'value_counts', 'join', '_repr_html_', 'concat', 'reset_index', 'boxplot', 'array', 'array', 'abs', 'abs', 'abs', 'mean', 'mean', 'groupby', 'mean', 'groupby', 'concat', 'reset_index', 'copy', 'applymap', 'corr', 'where', 'astype', 'bool', 'astype', 'aggregate', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'merge', 'merge', 'merge', 'factorize', 'unique', 'unique', 'keys', 'keys', 'drop', 'drop', 'drop', 'to_csv', 'to_csv', 'array', 'array', 'sort_values'] ['numpy', 'pandas', 'os', 'pandas', 'numpy', 'warnings', 'matplotlib.pyplot', 'seaborn', 'umap'] ['HTML', 'pearsonr', 'LGBMClassifier']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'where', 'min', 'unique', 'array', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'factorize', 'unique', 'array', 'merge'], 'os': [], 'warnings': [], '': [], 'IPython': ['_repr_html_'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'umap': [], 'lightgbm': ['_repr_html_']} axis_0: 0, axis_1: 0
nesp-domain-feature-engineering-baseline.py : ['read_csv', 'read_csv', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'count', 'apply', 'count', 'apply', 'apply', 'apply', 'apply', 'reset_index', 'concat', 'transform', 'isin', 'isin', 'mean', 'read_csv', 'to_csv'] ['os', 'time', 'numpy', 'pandas', 'seaborn'] ['spearmanr', 'LGBMRegressor', 'KFold', 'ProteinAnalysis', 'XGBRegressor', 'OrdinalEncoder', 'PDBParser']Dict:{'os': [], 'time': [], 'numpy': ['mean', 'isin'], 'pandas': ['concat', 'read_csv'], 'seaborn': [], 'scipy': [], 'lightgbm': [], 'sklearn': ['transform'], 'Bio': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 1
dcnv2-softmaxclassification.py : ['join', 'select_dtypes', 'fillna', 'select_dtypes', 'fillna', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'abs', 'abs', 'astype', 'sum', 'sum', 'astype', 'astype', 'astype', 'drop', 'read_csv', 'read_csv', 'read_csv', 'to_csv', 'sample', 'concat', 'drop', 'reset_index', 'unique', 'drop', 'drop', 'drop', 'drop', 'astype', 'sum', 'isnull', 'apply', 'groupby', 'sample', 'copy', 'select_dtypes', 'factorize', 'sort_values', 'sort_values', 'unique', 'apply', 'groupby', 'sample', 'unique', 'isin', 'unique', 'unique', 'keys', 'mean', 'std', 'min', 'max', 'skew', 'mean', 'std', 'min', 'max', 'skew', 'transform', 'mean', 'std', '__init__', '__init__', '__init__', 'concat', 'concat', '__init__', '__init__', '__init__', 'stack', 'squeeze', 'nunique', 'array', 'min', 'max', 'min', 'array', 'array', 'boxplot', 'sum', 'sum', 'sum', 'items', 'items', 'to_parquet', 'concat', 'sort_values', 'reset_index', 'read_csv', 'read_csv', 'read_csv', 'head', 'unique', 'to_csv', 'to_csv', 'head', 'unique', 'unique', 'hist', 'hist', 'sum', 'diff', 'copy', 'read_csv', 'reset_index', 'set_index', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'tensorflow', 'tensorboard', 'gc', 'os', 'math'] ['stats', 'MaxNLocator', 'FormatStrFormatter', 'PercentFormatter', 'RandomOverSampler', 'RandomUnderSampler', 'TomekLinks', 'SimpleImputer', 'StandardScaler', 'MinMaxScaler', 'LabelEncoder', 'RobustScaler', 'PowerTransformer', 'OneHotEncoder', 'make_pipeline', 'make_column_transformer', 'accuracy_score', 'log_loss', 'confusion_matrix', 'roc_curve', 'precision_recall_curve', 'KFold', 'StratifiedKFold', 'keras', 'layers', 'EarlyStopping', 'ReduceLROnPlateau', 'ModelCheckpoint', 'backend', 'load_model', 'datetime', 'version', 'MEstimateEncoder', 'Path', 'mutual_info_regression']Dict:{'scipy': ['skew'], 'numpy': ['mean', 'stack', 'squeeze', 'max', 'abs', 'sum', 'array', 'min', 'unique', 'isin', 'diff', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'factorize', 'unique', 'array'], 'matplotlib': ['__init__'], 'seaborn': ['boxplot'], 'imblearn': [], 'sklearn': [], 'tensorflow': ['__init__'], 'datetime': ['min', 'max', '__init__'], 'packaging': [], 'tensorboard': [], 'gc': [], 'os': [], 'math': [], 'category_encoders': [], 'pathlib': ['__init__']} axis_0: 3, axis_1: 22
moa-dnn-feature-engineering.py : ['map', 'map', 'reset_index', 'reset_index', 'drop', 'concat', 'transform', 'transform', 'copy', 'copy', 'concat', 'reset_index', 'concat', 'concat', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'clip', 'mean', 'to_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head'] ['sys', 'numpy', 'pandas', 'tensorflow', 'tensorflow.keras.backend', 'tensorflow_addons', 'random', 'os', 'warnings'] ['MultilabelStratifiedKFold', 'log_loss', 'RobustScaler', 'PCA']Dict:{'sys': [], 'iterstrat': [], 'numpy': ['mean', 'sum', 'clip', 'std', 'copy'], 'pandas': ['concat', 'read_csv'], 'tensorflow': ['mean', 'std', 'sum', 'clip'], 'tensorflow_addons': [], 'sklearn': ['transform'], 'random': [], 'os': [], 'warnings': []} axis_0: 0, axis_1: 0
satander-eda-nn-features-lgb.py : ['read_csv', 'read_csv', 'head', 'hist', 'hist', 'unique', 'quantile', 'value_counts', 'head', 'unique', 'describe', 'unique', 'unique', 'items', 'value_counts', 'items', 'value_counts', 'items', 'value_counts', 'drop', 'drop', 'drop', 'drop', 'mean', 'concat', 'mean', 'max', 'min', 'mean', 'max', 'min', 'read_csv', 'to_csv'] ['os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm'] ['NearestNeighbors', 'Ridge', 'make_scorer', 'train_test_split', 'cross_val_score', 'KFold']Dict:{'os': [], 'numpy': ['mean', 'quantile', 'max', 'min', 'unique'], 'pandas': ['concat', 'unique', 'read_csv', 'value_counts'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 10
titanic-survival-prediction.py : ['join', 'read_csv', 'info', 'describe', 'sum', 'isna', 'sum', 'sum', 'isna', 'isna', 'sum', 'isna', 'value_counts', 'sum', 'sum', 'dropna', 'boxplot', 'isna', 'apply', 'drop', 'isna', 'corr', 'read_csv', 'apply', 'drop', 'fillna', 'mean', 'drop', 'read_csv', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'graphviz', 'missingno', 'sklearn.metrics', 'warnings'] ['Waffle', 'LabelEncoder', 'StandardScaler', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'LogisticRegression', 'KNeighborsClassifier', 'SVC', 'tree', 'DecisionTreeClassifier', 'RandomForestClassifier', 'AdaBoostClassifier', 'ExtraTreesClassifier', 'BaggingClassifier', 'GradientBoostingClassifier', 'StackingClassifier', 'XGBClassifier', 'CatBoostClassifier', 'confusion_matrix', 'f1_score']Dict:{'numpy': ['mean', 'info', 'sum'], 'pandas': ['isna', 'read_csv', 'value_counts'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'os': [], 'graphviz': [], 'missingno': [], 'pywaffle': [], 'sklearn': [], 'xgboost': ['apply'], 'catboost': [], 'warnings': []} axis_0: 0, axis_1: 0
probing-private-lb.py : ['read_csv', 'read_csv', 'read_csv', 'iterrows', 'to_csv'] ['pandas', 'numpy'] []Dict:{'pandas': ['read_csv'], 'numpy': []} axis_0: 0, axis_1: 0
kaggledays-sf-2-amazon-unsupervised-encoding.py : ['transpose', 'describe', 'concat', 'reset_index', 'reset_index', 'unique', 'array', 'merge', 'head', 'agg', 'groupby', 'join', 'merge', 'head', 'reset_index', 'groupby', 'merge', 'head', 'concat', 'concat', 'to_csv'] ['numpy', 'pandas', 'os', 'itertools'] ['amazon', 'ExtraTreesClassifier', 'StratifiedKFold', 'cross_validate', 'OneHotEncoder', 'TruncatedSVD', 'TfidfVectorizer', 'CountVectorizer']Dict:{'numpy': ['transpose', 'array', 'unique'], 'pandas': ['array', 'merge', 'unique', 'concat'], 'os': [], 'catboost': [], 'sklearn': [], 'itertools': ['groupby']} axis_0: 0, axis_1: 0
1-2-supervised-learning-classification-titanic.py : ['read_csv', 'read_csv', 'head', 'tail', 'info', 'sum', 'isnull', 'describe', 'value_counts', 'count', 'groupby', 'mean', 'groupby', 'value_counts', 'crosstab', 'replace', 'mean', 'groupby', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'any', 'isnull', 'hist', 'hist', 'max', 'min', 'mean', 'crosstab', 'fillna', 'any', 'isnull', 'corr', 'drop', 'replace', 'drop', 'replace', 'head', 'value_counts', 'drop', 'crosstab', 'crosstab', 'crosstab', 'drop', 'qcut', 'mean', 'groupby', 'drop', 'drop', 'drop', 'replace', 'corr', 'mean', 'mean', 'mean', 'std', 'mean', 'abs', 'mean', 'mean', 'mean', 'mean', 'info', 'sum', 'isnull', 'replace', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'any', 'isnull', 'fillna', 'any', 'isnull', 'drop', 'replace', 'drop', 'replace', 'head', 'drop', 'drop', 'qcut', 'drop', 'drop', 'drop', 'replace', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['KNeighborsClassifier', 'LogisticRegression', 'LinearSVC', 'SVC', 'GaussianNB', 'DecisionTreeClassifier', 'RandomForestClassifier', 'GradientBoostingClassifier', 'MLPClassifier', 'train_test_split', 'metrics', 'confusion_matrix', 'cross_val_score', 'KFold', 'KFold', 'cross_val_score', 'cross_val_predict', 'GridSearchCV', 'accuracy_score', 'recall_score', 'precision_score', 'f1_score', 'classification_report', 'roc_curve', 'roc_auc_score', 'roc_curve', 'roc_auc_score', 'VotingClassifier', 'BaggingClassifier', 'AdaBoostClassifier', 'MinMaxScaler', 'StandardScaler', 'Pipeline', 'make_pipeline']Dict:{'numpy': ['mean', 'any', 'max', 'abs', 'sum', 'min', 'info', 'std'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'qcut', 'crosstab'], 'matplotlib': ['hist'], 'seaborn': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 14
task1-segmentation-interactive-3d-eda.py : ['replace', 'stack', 'max', 'max', 'astype', 'stack', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'sum', 'sum', 'array', 'median', 'median', 'median', 'read_csv', 'set_index', 'drop', 'mean', 'mean', 'mean', 'max', 'mean', 'mean', 'max'] ['tarfile', 'plotly', 'nibabel', 'os', 'albumentations', 'numpy', 'plotly.graph_objects', 'numpy', 'plotly.express', 'pandas'] ['download_plotlyjs', 'init_notebook_mode', 'plot', 'iplot', 'binary_closing', 'train_test_split', 'LogisticRegression', 'RidgeClassifier', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'roc_auc_score', 'log_loss']Dict:{'tarfile': [], 'plotly': [], 'nibabel': [], 'os': ['replace'], 'albumentations': [], 'numpy': ['mean', 'median', 'stack', 'max', 'sum', 'array'], 'skimage': [], 'pandas': ['array', 'read_csv'], 'sklearn': []} axis_0: 0, axis_1: 1
neural-network-malware-0-67.py : ['read_csv', 'keys', 'sample', 'value_counts', 'map', 'max', 'value_counts', 'to_dict', 'mean', 'isna', 'mean', 'astype', 'isna', 'astype', 'isna', 'astype', '__init__', 'array', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'read_csv', 'keys', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'os', 'gc', 'math'] ['callbacks', 'roc_auc_score', 'train_test_split', 'Sequential', 'Dense', 'Dropout', 'BatchNormalization', 'Activation', 'LearningRateScheduler', 'Adam', 'load_model']Dict:{'pandas': ['isna', 'array', 'read_csv', 'value_counts'], 'math': [], 'keras': ['__init__'], 'sklearn': ['__init__']} axis_0: 0, axis_1: 0
saint-is-all-you-need-training-private-0-801.py : ['keys', 'read_csv', 'head', 'fillna', 'astype', 'fillna', 'merge', 'transform', 'transform', 'unique', 'unique', 'apply', 'groupby', 'apply', 'groupby', '__init__', '__getitem__', '__init__', 'astype', '__init__', 'round', 'where', 'round', 'where', 'round', 'where', 'round', 'where', 'squeeze', 'mean', 'eval', 'mean'] ['psutil', 'joblib', 'random', 'logging', 'numpy', 'gc', 'pandas', 'time', 'torch', 'torch.nn'] ['tqdm', 'roc_auc_score', 'QuantileTransformer', 'Dataset', 'DataLoader']Dict:{'psutil': [], 'joblib': [], 'random': [], 'logging': [], 'tqdm': ['__init__'], 'numpy': ['mean', 'squeeze', 'where', 'round', 'unique'], 'gc': [], 'pandas': ['eval', 'merge', 'unique', 'read_csv'], 'time': [], 'sklearn': ['transform', '__init__'], 'torch': ['__init__']} axis_0: 0, axis_1: 0
tpsmay22-gradient-boosting-quickstart.py : ['read_csv', 'read_csv', 'apply', 'get', 'apply', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'to_csv', 'to_csv', 'hist'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'datetime', 'scipy.stats'] ['MaxNLocator', 'ListedColormap', 'cycler', 'display', 'KFold', 'roc_auc_score', 'roc_curve', 'HistGradientBoostingClassifier', 'VotingClassifier', 'CalibrationDisplay', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier']Dict:{'numpy': [], 'pandas': ['read_csv'], 'matplotlib': [], 'seaborn': [], 'cycler': [], 'IPython': [], 'datetime': [], 'scipy': [], 'sklearn': [], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': []} axis_0: 1, axis_1: 0
ashrae-missing-weather-data-handling.py : ['read_csv', 'reset_index', 'sum', 'isnull', 'min', 'max', 'array', 'concat', 'reset_index', 'to_datetime', 'set_index', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'reset_index', 'drop', 'min', 'max', 'array', 'concat', 'reset_index', 'to_datetime', 'set_index', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'reset_index', 'drop', 'read_csv', 'read_csv'] ['pandas', 'numpy', 'warnings', 'datetime'] []Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'array', 'to_datetime'], 'numpy': ['mean', 'max', 'sum', 'min', 'array'], 'warnings': [], 'datetime': []} axis_0: 0, axis_1: 2
sbert-feature-engineering.py : ['join', 'mean', 'read_csv', 'read_csv', 'drop', 'apply', 'apply', 'apply', 'apply', 'count', 'apply', 'count', 'apply', 'count', 'apply', 'apply', 'apply', 'apply', 'apply', 'mean', 'apply', 'mean', 'sub', 'replace', 'sub', 'join', 'sub', 'replace', 'sub', 'apply', 'apply', 'iterrows', 'items', 'concat', 'head', 'concat', 'drop', 'head', 'array', 'cut', 'copy', 'mean', 'std', 'mean', 'to_csv'] ['numpy', 'pandas', 'os', 'sys', 'random', 'warnings', 'statsmodels.api', 'seaborn', 'matplotlib.pyplot', 're', 'string', 'spacy', 'transformers', 'sentence_transformers', 'xgboost'] ['tqdm', 'Counter', 'skew', 'iqr', 'kurtosis', 'make_scorer', 'mean_squared_error', 'train_test_split', 'GridSearchCV', 'Pipeline', 'LinearRegression', 'Ridge', 'BayesianRidge', 'SVR', 'RandomForestRegressor', 'StandardScaler', 'MinMaxScaler', 'pos_tag', 'stopwords', 'word_tokenize', 'sent_tokenize', 'WordNetLemmatizer', 'SnowballStemmer', 'TextBlob', 'SentenceTransformer', 'models', 'nn', 'StratifiedKFold', 'make_pipeline', 'MaxAbsScaler']Dict:{'numpy': ['mean', 'std', 'array', 'copy'], 'pandas': ['concat', 'array', 'cut', 'read_csv'], 'os': ['replace'], 'sys': [], 'random': [], 'warnings': [], 'tqdm': [], 'collections': ['items', 'copy'], 'statsmodels': [], 'scipy': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 're': ['sub'], 'string': [], 'nltk': [], 'spacy': [], 'textblob': [], 'transformers': [], 'sentence_transformers': [], 'torch': [], 'xgboost': []} axis_0: 1, axis_1: 4
fp3-eda-fe-nlp-model-comparisons.py : ['read_csv', 'read_csv', 'read_csv', 'fillna', 'head', 'head', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'sum', 'duplicated', 'sum', 'sum', 'duplicated', 'sort_values', 'reset_index', 'copy', 'sort_values', 'iterrows', 'join', 'join', 'join', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'hist', 'transform', 'transform', 'transform', 'transform', 'to_numpy', 'to_numpy', 'to_numpy', 'copy', 'keys', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'sort_values', 'max', 'max', 'max', 'max', 'array', 'get', 'items', 'get', 'array', 'round', 'min', 'min', 'min', 'min', 'min', 'round', 'to_numpy', 'take', 'map', 'take', 'take'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'warnings', 'datetime', 'math', 'time', 're', 'spacy', 'textstat', 'lightgbm', 'pickle', 'tensorflow', 'transformers'] ['numerical_ttt_dist', 'TfidfVectorizer', 'LinearRegression', 'Ridge', 'KNeighborsRegressor', 'DecisionTreeRegressor', 'RandomForestRegressor', 'LGBMRegressor', 'MultiOutputRegressor', 'KFold', 'mean_squared_error', 'r2_score', 'StandardScaler', 'TfidfVectorizer', 'keras', 'Tokenizer', 'pad_sequences', 'TfidfVectorizer', 'BertTokenizer', 'TFBertModel', 'tqdm']Dict:{'pandas': ['isna', 'array', 'read_csv'], 'numpy': ['take', 'max', 'sum', 'round', 'min', 'array', 'copy'], 'matplotlib': ['get', 'hist'], 'seaborn': [], 'gc': [], 'warnings': [], 'datetime': [], 'math': [], 'time': [], 'featdist': [], 're': [], 'spacy': [], 'textstat': [], 'sklearn': [], 'lightgbm': [], 'pickle': [], 'tensorflow': [], 'transformers': [], 'tqdm': []} axis_0: 0, axis_1: 0
kaggler-dae-autolgb-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'astype', 'concat', 'drop', 'value_counts', 'describe', 'nunique', 'head', 'transform', 'head', 'head', 'concat', 'to_hdf', 'to_csv', 'head'] ['numpy', 'lightgbm', 'os', 'pandas', 'seaborn', 'kaggler'] ['pyplot', 'Path', 'StratifiedKFold', 'log_loss', 'simplefilter', 'AutoLGB', 'DAE', 'TargetEncoder', 'LabelEncoder']Dict:{'matplotlib': [], 'numpy': [], 'lightgbm': [], 'os': [], 'pandas': ['concat', 'read_csv', 'value_counts'], 'pathlib': [], 'seaborn': [], 'sklearn': [], 'warnings': [], 'kaggler': []} axis_0: 2, axis_1: 1
timeseries-analysis-a-complete-guide.py : ['read_csv', 'head', 'reset_index', 'notna', 'drop', 'head', 'to_datetime', 'head', 'drop', 'fillna', 'sort_values', 'shift', 'head', 'sum', 'count', 'drop', 'sum', 'isna', 'copy', 'replace', 'fillna', 'copy', 'replace', 'fillna', 'isna', 'fillna', 'fillna', 'mean', 'fillna', 'fillna', 'ffill', 'fillna', 'interpolate', 'fillna', 'interpolate', 'interpolate', 'interpolate', 'reset_index', 'sum', 'resample', 'reset_index', 'sum', 'resample', 'reset_index', 'mean', 'resample', 'reset_index', 'mean', 'resample', 'reset_index', 'mean', 'resample', 'copy', 'mean', 'rolling', 'std', 'rolling', 'mean', 'rolling', 'std', 'rolling', 'diff', 'head', 'shift', 'shift', 'shift', 'shift', 'shift', 'corr', 'corr', 'copy', 'tail', 'tail', 'filter', 'array', 'array', 'add', 'add', 'add', 'add', 'head', 'head', 'tail', 'copy', 'head'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'math', 'warnings', 'numpy', 'pandas', 'os', 'math', 'pmdarima'] ['Fore', 'mean_absolute_error', 'mean_squared_error', 'datetime', 'date', 'adfuller', 'seasonal_decompose', 'autocorrelation_plot', 'plot_acf', 'plot_pacf', 'TimeSeriesSplit', 'mean_absolute_error', 'mean_squared_error', 'Prophet', 'ARIMA', 'ARIMA', 'MinMaxScaler', 'Sequential', 'Dense', 'LSTM', 'Prophet']Dict:{'numpy': ['mean', 'add', 'sum', 'array', 'diff', 'std', 'copy'], 'pandas': [], 'seaborn': [], 'matplotlib': [], 'colorama': [], 'sklearn': [], 'math': [], 'warnings': [], '#': [], 'Supress': [], '': [], 'os': ['replace'], 'datetime': [], 'statsmodels': [], 'fbprophet': [], 'pmdarima': [], 'keras': []} axis_0: 0, axis_1: 3
titanic-machine-learning-insights-from-disaster.py : ['read_csv', 'read_csv', 'apply', 'get_dummies', 'drop', 'drop', 'align', 'replace', 'replace', 'head', 'describe', 'to_csv'] ['re', 'numpy', 'pandas', 'xgboost', 'matplotlib.pyplot', 'eli5', 'shap'] ['train_test_split', 'accuracy_score', 'recall_score', 'precision_score', 'PermutationImportance', 'pdp']Dict:{'re': [], 'numpy': [], 'pandas': ['get_dummies', 'read_csv'], 'xgboost': [], 'matplotlib': [], 'sklearn': [], 'eli5': [], 'pdpbox': [], 'shap': []} axis_0: 0, axis_1: 4
binary-classification-with-a-sdd-exploration.py : ['join', 'read_csv', 'read_csv', 'drop', 'drop', 'read_csv', 'concat', 'copy', 'fillna', 'mode', 'fillna', 'median', 'sum', 'isnull', 'copy', 'sum', 'isnull', 'head', 'read_csv', 'to_csv', 'mean', 'read_csv', 'to_csv', 'drop', 'mean', 'read_csv', 'to_csv', 'drop', 'mean', 'items', 'mean'] ['numpy', 'pandas', 'os', 'pandas', 'pandas', 'optuna', 'xgboost', 'pandas', 'xgboost', 'pandas', 'lightgbm', 'numpy', 'pandas'] ['Tuple', 'StandardScaler', 'MinMaxScaler', 'RobustScaler', 'LogisticRegression', 'cross_val_score', 'train_test_split', 'mean_squared_error', 'log_loss', 'KFold', 'train_test_split', 'StratifiedKFold', 'accuracy_score', 'classification_report', 'log_loss', 'KFold', 'train_test_split', 'StratifiedKFold', 'accuracy_score', 'classification_report', 'log_loss', 'cross_val_predict', 'LogisticRegression', 'HistGradientBoostingClassifier', 'KMeans', 'CatBoostClassifier', 'LGBMClassifier', 'XGBClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'copy'], 'pandas': ['concat', 'read_csv', 'isnull'], 'os': [], 'typing': [], 'sklearn': [], 'optuna': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 3, axis_1: 0
yaeda-yet-another-eda.py : ['read_csv', 'head', 'info', 'any', 'isnull', 'read_csv', 'head', 'info', 'any', 'isnull', 'describe', 'describe', 'hist', 'hist', 'describe', 'all', 'all', 'hist', 'hist', 'hist', 'hist', 'mean', 'mean', 'head', 'hist', 'mean', 'head', 'read_csv', 'to_csv', 'head', 'to_csv', 'head', 'to_csv', 'head', 'items', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'operator', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost'] ['describe', 'KFold', 'mean_squared_error']Dict:{'numpy': ['mean', 'info', 'any', 'all'], 'pandas': ['read_csv', 'isnull'], 'os': [], 'operator': [], 'matplotlib': ['hist'], 'seaborn': [], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], '=': [], 'sorted(feature_importances': [], 'key=operator': []} axis_0: 2, axis_1: 0
feature-engineering-sentence-paragraph-features.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'groupby', 'reset_index', 'quantile', 'quantile', 'kurt', 'apply', 'explode', 'apply', 'agg', 'groupby', 'join', 'count', 'groupby', 'fillna', 'reset_index', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'count', 'groupby', 'fillna', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'boxplot', 'boxplot', 'boxplot', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'any', 'isna', 'drop', 'drop', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'merge', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'mean', 'sort_values', 'apply', 'mean', 'to_csv', 'head'] ['gc', 'os', 'itertools', 'pickle', 're', 'time', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'copy'] ['choice', 'choices', 'reduce', 'tqdm', 'cycle', 'Counter', 'reduce', 'cycle', 'stats', 'skew', 'kurtosis', 'metrics', 'model_selection', 'preprocessing', 'linear_model', 'ensemble', 'decomposition', 'tree', 'defaultdict']Dict:{'gc': [], 'os': ['rename', 'replace'], 'itertools': [], 'pickle': [], 're': [], 'time': [], 'random': [], 'functools': [], 'tqdm': [], 'numpy': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'min', 'unique', 'std'], 'pandas': ['isna', 'read_csv', 'concat', 'unique', 'merge'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'collections': ['items', 'keys'], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'copy': []} axis_0: 2, axis_1: 8
pog-on-youtube-lgbm-ensemble.py : ['read_parquet', 'read_parquet', 'read_csv', 'unique', 'isin', 'astype', 'to_datetime', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'map', 'to_dict', 'value_counts', 'map', 'to_dict', 'nunique', 'groupby', 'astype', 'rank', 'groupby', 'copy', 'reset_index', 'concat', 'copy', 'reset_index', 'query', 'copy', 'reset_index', 'query', 'copy', 'reset_index', 'copy', 'query', 'query', 'query', 'query', 'query', 'query', 'concat', 'sort_values', 'mean', 'corr', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pylab', 'seaborn', 'lightgbm', 'warnings'] ['KFold', 'mean_absolute_error']Dict:{'pandas': ['read_csv', 'concat', 'value_counts', 'read_parquet', 'unique', 'to_datetime'], 'numpy': ['mean', 'isin', 'unique', 'copy'], 'matplotlib': ['mean', 'isin', 'unique', 'copy'], 'seaborn': [], 'sklearn': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 2
commonlit-evaluate-student-summaries-w-tfdf.py : ['read_csv', 'head', 'read_csv', 'head', 'merge', 'head', 'describe', 'info', 'apply', 'apply', 'apply', 'apply', 'apply', 'head', 'describe', 'drop', 'head', 'items', 'items', 'keys', 'keys', 'read_csv', 'read_csv', 'merge', 'head', 'head', 'head', 'to_csv', 'read_csv'] ['string', 're', 'numpy', 'pandas', 'tensorflow', 'tensorflow_decision_forests', 'seaborn', 'matplotlib.pyplot'] ['stopwords']Dict:{'string': [], 're': [], 'numpy': ['info'], 'pandas': ['merge', 'read_csv'], 'tensorflow': [], 'tensorflow_decision_forests': [], 'nltk': [], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 0
s3e17-mf-eda-clustering-adaboost.py : ['read_csv', 'head', 'drop', 'duplicated', 'drop_duplicates', 'unique', 'sum', 'isnull', 'isnull', 'transpose', 'describe', 'drop', 'boxplot', 'boxplot', 'unstack', 'groupby', 'unstack', 'groupby', 'unstack', 'groupby', 'sum', 'map', 'hist', 'sum', 'groupby', 'div', 'sum', 'reset_index', 'mean', 'groupby', 'get_dummies', 'drop', 'concat', 'corr', 'corr', 'drop', 'sort_values', 'drop', 'read_csv', 'drop', 'drop_duplicates', 'drop', 'mean', 'mean', 'mean', 'transform', 'read_csv', 'drop', 'transform', 'transform', 'drop', 'value_counts'] ['warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'shap'] ['parallel_coordinates', 'PCA', 'KMeans', 'StandardScaler', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'learning_curve', 'LabelEncoder', 'train_test_split', 'GridSearchCV', 'learning_curve', 'StandardScaler', 'LabelEncoder', 'AdaBoostClassifier', 'confusion_matrix', 'classification_report', 'roc_curve', 'precision_recall_curve', 'accuracy_score', 'average_precision_score', 'roc_auc_score', 'PCA', 'resample', 'TruncatedSVD', 'Parallel', 'delayed']Dict:{'warnings': [], 'numpy': ['transpose', 'sum', 'unique', 'mean'], 'pandas': [], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'sklearn': ['transform'], 'shap': [], 'joblib': []} axis_0: 1, axis_1: 11
house-prices-advanced-models-top-1-lgbm-regressor.py : ['read_csv', 'read_csv', 'drop', 'drop', 'head', 'describe', 'drop', 'corr', 'reset_index', 'concat', 'drop', 'sum', 'isna', 'fillna', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'apply', 'astype', 'astype', 'astype', 'sort_values', 'apply', 'dropna', 'get_dummies', 'mean', 'mean', 'mean', 'mean', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'missingno', 'lightgbm', 'warnings'] ['stats', 'skew', 'boxcox1p', 'LabelEncoder', 'KFold', 'cross_val_score', 'train_test_split', 'mean_squared_error', 'RandomForestRegressor', 'GradientBoostingRegressor', 'DataConversionWarning', 'LGBMRegressor', 'XGBRegressor', 'filterwarnings', 'boxcox1p']Dict:{'numpy': ['mean', 'median', 'sum'], 'pandas': ['concat', 'get_dummies', 'isna', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'missingno': [], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'xgboost': ['apply'], 'warnings': []} axis_0: 0, axis_1: 2
eda-feature-engineering-and-gridsearchcv.py : ['read_csv', 'read_csv', 'info', 'info', 'info', 'head', 'concat', 'reset_index', 'info', 'drop', 'head', 'set_index', 'tail', 'head', 'describe', 'sum', 'isnull', 'mean', 'median', 'max', 'min', 'max', 'min', 'quantile', 'quantile', 'quantile', 'var', 'std', 'describe', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'median', 'groupby', 'median', 'groupby', 'median', 'groupby', 'median', 'groupby', 'agg', 'groupby', 'min', 'min', 'agg', 'groupby', 'median', 'groupby', 'crosstab', 'crosstab', 'pivot_table', 'unstack', 'mean', 'groupby', 'sum', 'isnull', 'sum', 'isnull', 'info', 'isnull', 'value_counts', 'crosstab', 'median', 'groupby', 'fillna', 'sum', 'isnull', 'info', 'isnull', 'median', 'fillna', 'info', 'sum', 'isnull', 'mean', 'median', 'groupby', 'boxplot', 'notnull', 'boxplot', 'notnull', 'head', 'map', 'unique', 'map', 'map', 'head', 'boxplot', 'notnull', 'transform', 'groupby', 'fillna', 'info', 'max', 'qcut', 'qcut', 'value_counts', 'qcut', 'qcut', 'where', 'value_counts', 'crosstab', 'max', 'crosstab', 'where', 'crosstab', 'value_counts', 'where', 'notnull', 'map', 'value_counts', 'crosstab', 'info', 'where', 'get_dummies', 'info', 'drop', 'info', 'to_csv', 'info', 'tail', 'tail', 'info', 'drop', 'copy', 'drop', 'copy', 'head', 'copy', 'head', 'head', 'concat', 'nlargest', 'nlargest', 'head', 'corr', 'corr', 'drop', 'drop', 'drop', 'head', 'set_index', 'head', 'to_csv', 'head', 'drop', 'head', 'set_index', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pylab', 'matplotlib.pyplot', 'matplotlib', 'xgboost', 'seaborn', 'pandas', 'numpy', 'matplotlib', 'warnings', 'sklearn', 'scipy', 'numpy', 'json', 'sys', 'csv', 'os', 'matplotlib.pyplot'] ['make_scorer', 'accuracy_score', 'train_test_split', 'RandomForestClassifier', 'LogisticRegression', 'classification_report', 'GridSearchCV', 'confusion_matrix', 'accuracy_score', 'preprocessing', 'get_dummies', 'SGDClassifier', 'Perceptron', 'GaussianNB', 'SVC', 'LinearSVC', 'linear_model', 'SelectKBest', 'chi2', 'ExtraTreesClassifier', 'RandomizedSearchCV']Dict:{'numpy': ['mean', 'median', 'quantile', 'max', 'var', 'sum', 'where', 'min', 'unique', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'pivot_table', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull', 'qcut', 'crosstab'], 'os': [], 'sklearn': ['transform'], 'matplotlib': ['boxplot'], 'xgboost': [], 'seaborn': ['boxplot'], 'warnings': [], 'scipy': [], 'json': [], 'sys': [], 'csv': []} axis_0: 0, axis_1: 5
randomforest-tweaked-hps.py : ['to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'read_csv', 'filter', 'agg', 'sum', 'sum', 'to_numpy', 'filter', 'unique', 'filter', 'abs', 'abs', 'abs', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'unique', 'filter', 'std', 'filter', 'filter', 'filter', 'filter', 'to_numpy', 'unique', 'std', 'filter', 'std', 'filter', 'diff', 'filter', 'diff', 'mean', 'filter', 'rename', 'reset_index', 'filter', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'polars', 'datetime', 'plotly.express', 'plotly.graph_objects'] ['tqdm', 'make_subplots', 'score', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'abs', 'sum', 'unique', 'diff', 'std'], 'pandas': ['to_datetime', 'unique', 'read_csv'], 'matplotlib': [], 'polars': ['mean', 'std', 'sum', 'read_csv'], 'datetime': [], '': [], 'tqdm': [], 'plotly': [], 'metric': [], 'sklearn': []} axis_0: 0, axis_1: 0
single-xgboost-model-featureengineering.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'astype', 'astype', 'head', 'copy', 'drop', 'copy', 'copy', 'transform', 'head', 'head', 'mean', 'to_csv', 'head'] ['pandas', 'numpy', 'datatable', 'gc'] ['XGBClassifier', 'train_test_split', 'StratifiedKFold', 'roc_curve', 'auc', '*', 'filterwarnings']Dict:{'pandas': [], 'numpy': ['mean', 'max', 'sum', 'min', 'copy'], 'datatable': [], 'xgboost': [], 'sklearn': [], 'category_encoders': [], 'gc': [], 'warnings': []} axis_0: 0, axis_1: 3
robots-need-help.py : ['head', 'head', 'head', 'sum', 'isnull', 'sum', 'isnull', 'count', 'isnull', 'concat', 'transpose', 'describe', 'describe', 'describe', 'value_counts', 'value_counts', 'value_counts', 'merge', 'reset_index', 'count', 'groupby', 'pivot', 'corr', 'corr', 'mean', 'diff', 'abs', 'diff', 'mean', 'abs', 'diff', 'mean', 'groupby', 'min', 'groupby', 'max', 'groupby', 'std', 'groupby', 'groupby', 'median', 'groupby', 'skew', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'max', 'abs', 'apply', 'groupby', 'min', 'abs', 'apply', 'groupby', 'mean', 'abs', 'apply', 'groupby', 'std', 'abs', 'value_counts', 'merge', 'head', 'head', 'head', 'tail', 'unique', 'head', 'drop', 'drop', 'corr', 'fillna', 'replace', 'replace', 'fillna', 'replace', 'replace', 'transform', 'max', 'product', 'read_csv', 'join', 'to_csv', 'head', 'to_csv', 'head'] ['gc', 'os', 'logging', 'datetime', 'warnings', 'numpy', 'pandas', 'seaborn', 'itertools', 'matplotlib.pyplot', 'math'] ['LGBMClassifier', 'tqdm_notebook', 'LabelEncoder', 'StandardScaler', 'RandomForestClassifier', 'mean_squared_error', 'confusion_matrix', 'roc_auc_score', 'roc_curve', 'StratifiedKFold']Dict:{'gc': [], 'os': ['replace'], 'logging': [], 'datetime': [], 'warnings': [], 'numpy': ['transpose', 'mean', 'median', 'product', 'max', 'abs', 'sum', 'min', 'unique', 'diff', 'std'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'merge', 'pivot'], 'seaborn': [], 'itertools': ['count', 'product', 'groupby'], 'lightgbm': [], 'tqdm': [], 'matplotlib': [], 'sklearn': []} axis_0: 0, axis_1: 5
convert-to-regression-feature-test.py : ['join', 'hist', 'array', 'astype', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'value_counts', 'value_counts', 'map', 'map', 'map', 'map', 'map', 'astype', 'to_datetime', 'to_datetime', 'groupby', 'query', 'sum', 'sum', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'array', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'update', 'keys', 'groupby', 'groupby', 'copy', 'transform', 'concat', 'concat', 'transform', '__init__', 'copy', 'transform', 'concat', 'concat', 'transform', '__init__', 'mask', 'pop', 'mask', 'mask', 'mask', 'mask', 'mask', 'join', 'join', 'mean', 'mean', 'clip', 'clip', 'sum', 'sum', 'copy', 'mean', 'mean', 'hist', 'array', 'astype', 'to_csv', 'value_counts'] ['numpy', 'pandas', 'matplotlib.pyplot', 'xgboost', 'shap', 'os', 'lightgbm', 'gc', 'json', 'tensorflow'] ['XGBClassifier', 'XGBRegressor', 'plot_importance', 'CatBoostRegressor', 'pyplot', 'time', 'tqdm_notebook', 'Counter', 'stats', 'cohen_kappa_score', 'mean_squared_error', 'KFold', 'StratifiedKFold', 'StandardScaler', 'MinMaxScaler', 'OneHotEncoder', 'choice']Dict:{'numpy': ['mean', 'sum', 'array', 'unique', 'clip', 'std', 'copy'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'array', 'to_datetime'], 'matplotlib': ['hist'], 'xgboost': ['__init__'], 'catboost': [], 'shap': [], 'os': [], 'time': ['__init__'], 'tqdm': ['update', '__init__'], 'collections': ['pop', 'keys', 'update', '__init__', 'copy'], 'scipy': [], 'lightgbm': [], 'sklearn': ['transform', '__init__'], 'gc': [], 'json': [], 'tensorflow': ['unique', 'concat'], 'random': ['__init__']} axis_0: 1, axis_1: 5
1-house-prices-solution-top-1.py : ['read_csv', 'read_csv', 'head', 'head', 'sum', 'isnull', 'sort_values', 'fillna', 'apply', 'any', 'unique', 'mean', 'groupby', 'sort_values', 'to_dict', 'items', 'corr', 'sort_values', 'corr', 'corr', 'corr', 'fillna', 'transform', 'sum', 'drop', 'drop', 'reset_index', 'reset_index', 'drop', 'reset_index', 'concat', 'apply', 'astype', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'head', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'mode', 'head', 'update', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'update', 'fillna', 'sort_values', 'apply', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'reset_index', 'get_dummies', 'drop', 'drop', 'value_counts', 'drop', 'drop', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'array', 'array', 'array', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'quantile', 'quantile', 'apply', 'apply', 'to_csv', 'head', 'read_csv', 'read_csv', 'drop', 'drop', 'reset_index', 'reset_index', 'drop', 'reset_index', 'concat', 'apply', 'astype', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'mode', 'update', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'update', 'fillna', 'sort_values', 'apply', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'reset_index', 'get_dummies', 'drop', 'drop', 'value_counts', 'copy', 'drop', 'copy', 'drop', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'array', 'array', 'array', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'quantile', 'quantile', 'apply', 'apply', 'to_csv', 'head', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'scipy.stats', 'sklearn.linear_model', 'seaborn', 'os', 'warnings'] ['datetime', 'skew', 'boxcox1p', 'boxcox_normmax', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'GradientBoostingRegressor', 'SVR', 'make_pipeline', 'RobustScaler', 'KFold', 'cross_val_score', 'mean_squared_error', 'StackingCVRegressor', 'XGBRegressor', 'LGBMRegressor', 'TSNE', 'KMeans', 'PCA', 'StandardScaler', 'datetime', 'skew', 'boxcox1p', 'boxcox_normmax', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'GradientBoostingRegressor', 'SVR', 'make_pipeline', 'RobustScaler', 'KFold', 'cross_val_score', 'mean_squared_error', 'StackingCVRegressor']Dict:{'numpy': ['mean', 'median', 'quantile', 'any', 'sum', 'array', 'unique', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'array'], 'datetime': [], 'scipy': [], 'sklearn': [], 'mlxtend': [], 'xgboost': ['apply'], 'lightgbm': [], 'matplotlib': [], 'seaborn': [], 'os': [], 'warnings': []} axis_0: 0, axis_1: 12
detailed-and-typical-solution-ensemble-modeling.py : ['read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'describe', 'value_counts', 'replace', 'replace', 'sort_values', 'mean', 'groupby', 'corr', 'drop', 'drop', 'fillna', 'max', 'dropna', 'astype', 'map', 'dropna', 'astype', 'map', 'dropna', 'median', 'isnull', 'astype', 'fillna', 'median', 'dropna', 'sum', 'isnull', 'sum', 'isnull', 'head', 'cut', 'sort_values', 'mean', 'groupby', 'head', 'drop', 'qcut', 'sort_values', 'mean', 'groupby', 'astype', 'drop', 'head', 'drop', 'drop', 'sort_values', 'mean', 'groupby', 'map', 'map', 'map', 'map', 'drop', 'drop', 'crosstab', 'replace', 'replace', 'replace', 'replace', 'mean', 'groupby', 'map', 'fillna', 'drop', 'drop', 'head', 'head', 'drop', 'drop', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'concat', 'corr', 'concat', 'corr', 'concat', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'os'] ['RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'VotingClassifier', 'LinearDiscriminantAnalysis', 'LogisticRegression', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'MLPClassifier', 'SVC', 'GridSearchCV', 'cross_val_score', 'StratifiedKFold', 'learning_curve']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'info', 'std'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'qcut', 'crosstab'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'os': ['replace'], 'sklearn': []} axis_0: 0, axis_1: 13
eda-initial-exploration-and-baseline.py : ['read_csv', 'read_csv', 'head', 'concat', 'max', 'value_counts', 'value_counts', 'nunique', 'nunique', 'sort_values', 'sum', 'isna', 'sort_values', 'sum', 'isna', 'sort_values', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'astype', 'astype', 'astype', 'update', 'update', 'update', 'value_counts', 'value_counts', 'apply', 'groupby', 'apply', 'groupby', 'groupby', 'groupby', 'astype', 'astype', 'astype', 'astype', 'update', 'update', 'update', 'value_counts', 'value_counts', 'astype', 'value_counts', 'drop', 'value_counts', 'astype', 'value_counts', 'value_counts', 'dropna', 'dropna', 'dropna', 'dropna', 'sample', 'drop', 'factorize', 'head', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'nunique', 'read_csv', 'drop', 'to_csv', 'sort_values'] ['gc', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.graph_objs', 'lightgbm', 'warnings'] ['init_notebook_mode', 'iplot', 'tools', 'LabelEncoder']Dict:{'gc': [], 'numpy': ['sum', 'min', 'max'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'factorize'], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 2
top-8-without-feature-engineering.py : ['read_csv', 'read_csv', 'reset_index', 'concat', 'drop', 'head', 'apply', 'select_dtypes', 'sort_values', 'get_dummies', 'get_dummies', 'keys', 'drop', 'sum', 'drop', 'sum', 'keys', 'get_dummies', 'mean', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'array', 'array', 'array', 'read_csv', 'head', 'to_csv'] ['os', 'numpy', 'pandas', 'math', 'matplotlib.pyplot', 'seaborn', 'category_encoders', 'string', 'warnings'] ['is_string_dtype', 'is_numeric_dtype', 'is_categorical_dtype', 'norm', 'skew', 'OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'RobustScaler', 'RandomForestRegressor', 'GradientBoostingRegressor', 'ElasticNet', 'Lasso', 'BayesianRidge', 'LassoLarsIC', 'RidgeCV', 'LassoCV', 'ElasticNetCV', 'LinearRegression', 'XGBRegressor', 'LGBMRegressor', 'SVR', 'StackingCVRegressor', 'mean_squared_error', 'mean_absolute_error', 'mean_squared_log_error', 'roc_curve', 'auc', 'train_test_split', 'cross_val_score', 'StratifiedKFold', 'KFold', 'GridSearchCV', 'make_pipeline', 'boxcox1p', 'boxcox', 'datetime']Dict:{'os': [], 'numpy': ['mean', 'array', 'sum', 'std'], 'pandas': [], 'scipy': [], 'math': [], 'matplotlib': [], 'seaborn': [], 'category_encoders': [], 'sklearn': [], 'xgboost': ['apply'], 'lightgbm': [], 'mlxtend': [], 'datetime': [], 'string': [], 'warnings': []} axis_0: 0, axis_1: 4
data-science-bowl-2019-regression-to-convert-lb.py : ['join', 'hist', 'array', 'astype', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'value_counts', 'value_counts', 'map', 'map', 'map', 'map', 'map', 'astype', 'to_datetime', 'to_datetime', 'groupby', 'keys', 'keys', 'query', 'sum', 'sum', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'array', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'update', 'keys', 'groupby', 'groupby', 'copy', 'transform', 'concat', 'concat', 'transform', '__init__', 'copy', 'transform', 'concat', 'concat', 'transform', '__init__', 'mask', 'pop', 'mask', 'mask', 'mask', 'mask', 'mask', 'mean', 'mean', 'clip', 'clip', 'sum', 'sum', 'copy', 'mean', 'mean', 'max', 'hist', 'array', 'astype', 'to_csv', 'value_counts'] ['numpy', 'pandas', 'matplotlib.pyplot', 'xgboost', 'shap', 'os', 'lightgbm', 'gc', 'json', 'numpy', 'pandas', 'random', 'os', 'copy', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'catboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'eli5', 'shap', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'scipy', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 're', 'tensorflow', 'warnings'] ['XGBClassifier', 'XGBRegressor', 'plot_importance', 'CatBoostRegressor', 'pyplot', 'BayesianOptimization', 'time', 'tqdm_notebook', 'Counter', 'stats', 'cohen_kappa_score', 'mean_squared_error', 'KFold', 'StratifiedKFold', 'tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'defaultdict', 'Counter', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit', 'RepeatedStratifiedKFold', 'metrics', 'classification_report', 'confusion_matrix', 'linear_model', 'BayesianOptimization', 'HTML', 'OrdinalEncoder', 'List', 'jit', 'partial', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'Any', 'product', 'tqdm', 'Parallel', 'delayed', 'StandardScaler', 'MinMaxScaler', 'OneHotEncoder', 'choice']Dict:{'numpy': ['mean', 'max', 'sum', 'array', 'unique', 'clip', 'std', 'copy'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'array', 'to_datetime'], 'matplotlib': ['hist'], 'xgboost': [], 'catboost': [], 'bayes_opt': [], 'shap': [], 'os': [], 'time': [], 'tqdm': ['update', '__init__'], 'collections': ['pop', 'keys', 'update', '__init__', 'copy'], 'scipy': [], 'lightgbm': [], 'sklearn': ['transform', '__init__'], 'gc': [], 'json': [], 'random': ['__init__'], 'copy': ['copy'], 'datetime': [], 'seaborn': [], 'warnings': [], 'eli5': [], 'IPython': ['__init__'], 'altair': [], 'category_encoders': [], 'networkx': [], 'typing': ['__init__'], 'numba': [], 'functools': ['__init__'], 'itertools': ['__init__'], 're': [], 'joblib': ['__init__'], 'tensorflow': ['unique', 'concat']} axis_0: 1, axis_1: 5
2020-r3id-incremental-learning-pytorch-creme.py : ['read_csv', 'drop', 'sample', 'max', 'count', 'groupby', 'sum', 'max', 'count', 'groupby', 'add', 'reindex', 'max', 'count', 'groupby', 'add', 'reindex', 'unique', 'copy', 'reindex', 'copy', 'reindex', 'divide', 'divide', 'fillna', 'astype', '__init__', 'where', 'read_csv', 'copy', 'astype', 'mean', 'sum', 'astype', 'copy', 'mean', 'array', 'copy', 'sum', 'astype', 'copy', 'copy', 'mean'] ['numpy', 'pandas', 'time', 'torch', 'torch.nn', 'torch.nn.functional', 'matplotlib.pyplot', 'matplotlib.pyplot', 'riiideducation'] ['tqdm', 'roc_auc_score', 'Dataset', 'DataLoader', 'SGD', 'Adam', 'linear_model', 'optim', 'convolve']Dict:{'numpy': ['mean', 'add', 'max', 'sum', 'where', 'unique', 'array', 'divide', 'copy'], 'pandas': ['array', 'unique', 'read_csv'], 'time': [], 'tqdm': ['__init__'], 'sklearn': ['__init__'], 'torch': ['__init__'], 'creme': [], 'scipy': [], 'matplotlib': [], 'riiideducation': []} axis_0: 2, axis_1: 3
lr-model-with-feature-engineering.py : ['join', 'read_csv', 'read_csv', 'reset_index', 'concat', 'head', 'info', 'head', 'info', 'sum', 'isnull', 'sum', 'isnull', 'apply', 'groupby', 'fillna', 'median', 'fillna', 'mean', 'groupby', 'fillna', 'isnull', 'where', 'astype', 'unique', 'count', 'groupby', 'replace', 'replace', 'replace', 'astype', 'apply', 'drop', 'factorize', 'factorize', 'factorize', 'factorize', 'head', 'tail', 'drop', 'corr', 'corr', 'get_dummies', 'get_dummies', 'astype', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['RandomForestClassifier', 'accuracy_score', 'KFold', 'cross_val_score', 'LinearRegression', 'LogisticRegression', 'DecisionTreeClassifier', 'KNeighborsClassifier', 'ExtraTreesClassifier', 'LinearDiscriminantAnalysis', 'GaussianNB', 'SVC']Dict:{'numpy': ['mean', 'median', 'sum', 'where', 'unique', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'factorize', 'get_dummies', 'unique'], 'os': ['replace'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 2
titanic-eda-feature-engineering-and-predictions.py : ['join', 'read_csv', 'read_csv', 'head', 'info', 'info', 'describe', 'mean', 'groupby', 'mean', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'mean', 'groupby', 'mean', 'max', 'drop', 'drop', 'head', 'isnull', 'isnull', 'drop', 'drop', 'isnull', 'count', 'groupby', 'map', 'fillna', 'isnull', 'mean', 'mean', 'mean', 'isnull', 'apply', 'apply', 'isnull', 'mean', 'fillna', 'isnull', 'isnull', 'drop', 'count', 'groupby', 'head', 'drop', 'drop', 'concat', 'concat', 'head', 'head', 'info', 'info', 'transform', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'pandas_profiling'] ['ColumnTransformer', 'OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'SVC']Dict:{'numpy': ['mean', 'info', 'max'], 'pandas': ['concat', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'os': [], 'pandas_profiling': [], 'sklearn': []} axis_0: 0, axis_1: 11
autism-prediction-1-solution.py : ['read_csv', 'read_csv', 'isin', 'isin', 'corr', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'matplotlib.pyplot', 'seaborn'] ['classification_report', 'StratifiedKFold', 'GridSearchCV', 'preprocessing', 'figure', 'RandomOverSampler', 'ExtraTreesClassifier', 'metrics', 'LogisticRegression', 'RidgeClassifierCV']Dict:{'pandas': ['read_csv'], 'numpy': ['isin'], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'imblearn': []} axis_0: 0, axis_1: 0
keras-nn-autoencoder.py : ['read_csv', 'read_csv', 'read_csv', 'sort_values', 'sort_values', 'skew', 'skew', 'skew', 'mean', 'std', 'min', 'transform', 'transform', 'astype', 'astype', 'sum', 'isna', 'sum', 'isna', 'mean', 'std', 'mean', 'std', 'isna', 'mean', 'astype', 'astype', 'isna', 'fillna', 'fillna', 'astype', 'astype', 'value_counts', 'apply', 'apply', 'concat', 'astype', 'transform', 'astype', 'transform', 'nunique', 'concat', 'concat', 'concat', 'where', 'where', 'mean', 'pow', 'mean', 'pow', 'pow', 'update', 'update', '__init__', 'concat', 'concat', 'max', 'to_csv'] ['numpy', 'pandas', 'keras', 'random', 'tensorflow', 'keras.backend', 'gc', 'gc'] ['tqdm', 'LabelEncoder', 'OneHotEncoder', 'tqdm', 'Model', 'Dense', 'Input', 'Dropout', 'BatchNormalization', 'Activation', 'get_custom_objects', 'Adam', 'Nadam', 'Callback', 'roc_auc_score', 'concatenate', 'Adam', 'ModelCheckpoint', 'LearningRateScheduler', 'backend', 'ModelCheckpoint', 'rankdata', 'spearmanr']Dict:{'numpy': ['mean', 'max', 'sum', 'where', 'min', 'std'], 'pandas': ['concat', 'isna', 'read_csv', 'value_counts'], 'tqdm': ['update', '__init__'], 'sklearn': ['__init__'], 'keras': ['__init__'], 'random': [], 'tensorflow': ['where', 'pow', 'concat'], 'gc': [], 'scipy': ['__init__']} axis_0: 0, axis_1: 4
spaceship-titanic-0-80-xgboost-gridsearchcv.py : ['read_csv', 'read_csv', 'head', 'drop', 'drop', 'sum', 'isna', 'sort_values', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'median', 'dropna', 'fillna', 'astype', 'astype', 'get_dummies', 'get_dummies', 'drop', 'copy', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'time', 'warnings', 'lazypredict'] ['train_test_split', 'accuracy_score', 'GridSearchCV', 'LogisticRegression', 'RandomForestClassifier', 'XGBClassifier', 'LazyClassifier']Dict:{'numpy': ['median', 'sum', 'copy'], 'pandas': ['isna', 'get_dummies', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'time': [], 'sklearn': [], 'xgboost': [], 'warnings': [], 'lazypredict': []} axis_0: 1, axis_1: 3
a-statistical-analysis-ml-workflow-of-titanic.py : ['read_csv', 'read_csv', 'head', 'reset_index', 'min', 'groupby', 'rename', 'head', 'info', 'info', 'info', 'info', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'concat', 'value_counts', 'value_counts', 'concat', 'isnull', 'boxplot', 'boxplot', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'concat', 'fillna', 'sort_values', 'mean', 'groupby', 'apply', 'concat', 'sort_values', 'isnull', 'mean', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'reset_index', 'count', 'groupby', 'pivot_table', 'unique', 'map', 'hist', 'map', 'hist', 'map', 'apply', 'apply', 'describe', 'describe', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'sort_values', 'corr', 'corr', 'sort_values', 'corr', 'bool', 'corr', 'mean', 'mean', 'mean', 'sample', 'mean', 'sample', 'mean', 'mean', 'mean', 'mean', 'map', 'map', 'unique', 'apply', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'map', 'map', 'unique', 'unique', 'map', 'map', 'sample', 'value_counts', 'drop', 'drop', 'map', 'map', 'drop', 'drop', 'get_dummies', 'get_dummies', 'drop', 'drop', 'head', 'concat', 'concat', 'notnull', 'isnull', 'isnull', 'map', 'map', 'get_dummies', 'get_dummies', 'drop', 'sample', 'head', 'transform', 'head', 'astype', 'sum', 'max', 'array', 'mean', 'mean', 'mean', 'mean', 'head', 'sort_values', 'head', 'sort_values', 'get', 'astype', 'astype', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'warnings', 'os', 'seaborn', 'matplotlib.pyplot', 'seaborn', 'numpy', 'random'] ['pyplot', 'RandomForestRegressor', 'train_test_split', 'StandardScaler', 'LogisticRegression', 'mean_absolute_error', 'accuracy_score', 'classification_report', 'confusion_matrix', 'accuracy_score', 'recall_score', 'precision_score', 'classification_report', 'balanced_accuracy_score', 'unique_labels', 'confusion_matrix', 'roc_curve', 'auc', 'precision_recall_curve', 'StratifiedShuffleSplit', 'cross_val_score', 'GridSearchCV', 'StratifiedKFold', 'KNeighborsClassifier', 'pyplot', 'GridSearchCV', 'RandomizedSearchCV', 'GaussianNB', 'accuracy_score', 'SVC', 'DecisionTreeClassifier', 'GridSearchCV', 'StratifiedKFold', 'StratifiedShuffleSplit', 'RandomForestClassifier', 'classification_report', 'BaggingClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'GaussianProcessClassifier', 'VotingClassifier']Dict:{'pandas': ['read_csv', 'isnull', 'pivot_table', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull', 'array'], 'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'info', 'array'], 'matplotlib': [], 'seaborn': ['boxplot'], 'warnings': [], '##': [], 'importing': [], 'library': [], '': [], 'os': ['rename', 'replace'], 'imporing': [], 'random': ['sample'], 'sklearn': ['transform']} axis_0: 1, axis_1: 13
analysing-interactions-with-shap.py : ['read_csv', 'apply', 'get', 'apply', 'sample', 'mean', 'abs', 'where', 'round', 'sort_values', 'reset_index', 'mean', 'rolling', 'sort_values', 'reset_index', 'mean', 'rolling', 'sort_values', 'reset_index', 'mean', 'rolling', 'sort_values', 'reset_index', 'mean', 'rolling'] ['matplotlib', 'mplcyberpunk', 'pandas', 'numpy', 'matplotlib.pyplot', 'matplotlib', 'seaborn', 'shap', 'xgboost', 'warnings'] ['gridspec', 'KFold', 'cross_val_score', 'train_test_split', 'LGBMClassifier', 'roc_auc_score', 'roc_curve']Dict:{'matplotlib': [], 'mplcyberpunk': [], 'pandas': ['read_csv'], 'numpy': ['mean', 'where', 'round', 'abs'], '': [], 'seaborn': [], 'sklearn': [], 'shap': [], 'xgboost': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 0
public-lb-2-solution.py : ['read_csv', 'read_csv', 'read_csv', 'join', 'join', 'apply', 'apply', 'unique', 'map', 'map', 'apply', 'bfill', 'ffill', 'groupby', 'fillna', 'shift', 'groupby', 'apply', 'apply', 'isin', 'isin', 'isin', 'isin', 'fillna', 'concat', 'drop', 'drop', 'array', 'groupby', 'reset_index', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'apply', 'map', 'isin', 'fillna', 'isin', 'fillna', 'isin', 'fillna', 'isin', 'fillna', 'drop', 'to_csv'] ['warnings', 'gc', 'numpy', 'pandas', 'datetime', 'plotly.graph_objs', 'seaborn', 'matplotlib.pyplot', 'matplotlib', 'folium'] ['init_notebook_mode', 'LeaveOneGroupOut', 'LabelEncoder', 'KMeans', 'haversine', 'RandomForestRegressor']Dict:{'warnings': [], 'gc': [], 'numpy': ['isin', 'array', 'unique'], 'pandas': ['concat', 'array', 'unique', 'read_csv'], 'datetime': [], 'plotly': [], 'seaborn': [], 'matplotlib': [], 'sklearn': ['apply'], 'folium': [], 'haversine': []} axis_0: 1, axis_1: 9
python-kaggle-start-book-ch03-01.py : ['read_csv', 'head', 'read_csv', 'head', 'rename', 'count', 'groupby', 'head', 'merge', 'fillna', 'head'] ['pandas'] []Dict:{'pandas': ['merge', 'read_csv']} axis_0: 0, axis_1: 0
image-processing-full-explained-with-eda.py : ['read_csv', 'read_csv', 'head', 'to_numpy', 'unique', 'to_numpy', 'to_numpy', 'drop', 'dropna', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'tensorflow', 'cv2'] ['Dense', 'Conv2D', 'MaxPooling2D', 'MaxPool2D', 'Dropout', 'Flatten', 'BatchNormalization', 'InputLayer', 'train_test_split', 'image']Dict:{'numpy': ['unique', 'add'], 'pandas': ['unique', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'tensorflow': [], 'sklearn': [], 'keras': [], 'cv2': []} axis_0: 0, axis_1: 1
sleepstate-eda-baseline.py : ['test', 'read_csv', 'explode', 'agg', 'groupby', 'sample', 'all', 'head', 'diff', 'diff', 'test', 'test'] [] []Dict:{} axis_0: 0, axis_1: 0
pycaret-visualization-optimization-0-81.py : ['join', '_repr_html_', 'count', 'boxplot', 'read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'info', 'sum', 'isnull', 'value_counts', 'describe', 'describe', 'describe', 'value_counts', 'pivot_table', 'pivot_table', 'copy', 'apply', 'apply', 'copy', 'pivot_table', 'crosstab', 'pivot_table', 'crosstab', 'pivot_table', 'crosstab', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mean', 'fillna', 'apply', 'apply', 'apply', 'apply', 'fillna', 'drop', 'astype', 'astype', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'plotly.express', 'plotly.graph_objects', 'missingno', 'optuna'] ['*', 'SimpleImputer', 'accuracy_score', 'LabelEncoder', 'StratifiedKFold', 'train_test_split', 'make_subplots', 'HTML']Dict:{'pycaret': [], 'numpy': ['mean', 'info', 'sum', 'copy'], 'pandas': ['read_csv', 'isnull', 'pivot_table', 'concat', 'value_counts', 'crosstab'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'warnings': [], 'sklearn': [], 'plotly': [], 'IPython': ['_repr_html_'], 'missingno': [], 'optuna': []} axis_0: 1, axis_1: 3
learning-rate-0-04-lgbm-and-nn-on-sentences.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'head', 'value_counts', 'unique', 'quantile', 'quantile', 'kurt', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'any', 'isna', 'drop', 'drop', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'merge', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'to_csv'] ['gc', 'os', 'itertools', 'pickle', 're', 'time', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'joblib'] ['choice', 'choices', 'reduce', 'tqdm', 'cycle', 'Counter', 'reduce', 'cycle', 'stats', 'skew', 'kurtosis', 'metrics', 'model_selection', 'preprocessing', 'linear_model', 'ensemble', 'decomposition', 'tree', 'defaultdict', 'TabularAutoML', 'Task']Dict:{'gc': [], 'os': ['rename', 'replace'], 'itertools': [], 'pickle': [], 're': [], 'time': [], 'random': [], 'functools': [], 'tqdm': [], 'numpy': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'min', 'unique', 'std'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'seaborn': [], 'matplotlib': [], 'collections': ['items', 'keys'], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'lightautoml': [], 'joblib': []} axis_0: 0, axis_1: 8
automated-feature-engineering.py : ['read_csv', 'head', 'head'] ['pandas', 'featuretools'] ['datetime', '*']Dict:{'pandas': ['read_csv'], 'featuretools': [], 'datetime': []} axis_0: 0, axis_1: 0
why-your-model-is-overfitting-not-making-progress.py : ['read_csv', 'read_csv', 'concat', 'quantile', 'quantile', 'round', 'max', 'min', 'astype', 'cut', 'array', 'array', 'array', 'array', 'mode', 'read_csv', 'sort_values', 'sample', 'sample', 'isin'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'warnings', 'graphviz'] ['KernelDensity', 'itemgetter', 'roc_auc_score', 'tree']Dict:{'numpy': ['quantile', 'max', 'round', 'min', 'isin', 'array'], 'pandas': ['concat', 'array', 'cut', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'warnings': [], 'sklearn': [], 'operator': [], 'graphviz': []} axis_0: 0, axis_1: 0
amex-default-prediction-keras-starter.py : [] [] []Dict:{} axis_0: 0, axis_1: 0
top-10-eda-fe-pycaret-optuna.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'concat', 'astype', 'select_dtypes', 'astype', 'select_dtypes', 'astype', 'corr', 'select_dtypes', 'corr', 'isnull', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'copy', 'select_dtypes', 'fillna', 'fillna', 'value_counts', 'fillna', 'fillna', 'isnull', 'isnull', 'corr', 'corr', 'copy', 'select_dtypes', 'factorize', 'sort_values', 'copy', 'select_dtypes', 'factorize', 'drop', 'drop', 'rename', 'reset_index', 'select_dtypes', 'factorize', 'mean', 'copy', 'select_dtypes', 'melt', 'map', 'sum', 'gt', 'transform', 'groupby', 'get_dummies', 'mul', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'mean', 'std', 'cumsum', 'transform', 'concat', 'transform', 'add', 'copy', 'pop', 'copy', 'pop', 'concat', 'join', 'join', 'join', 'join', 'join', 'join', 'drop', 'join', 'join', 'transform', 'drop', 'drop', 'isnull', 'isnull', 'concat', 'concat', 'drop', 'drop', 'melt', 'map', 'drop', 'rename', 'reset_index', 'drop', 'drop', 'array', 'array', 'sort_values', 'set_index', 'to_csv'] ['os', 'warnings', 'matplotlib.pyplot', 'numpy', 'pandas', 'pandas_profiling', 'seaborn', 'optuna', 'plotly.express', 'plotly.figure_factory', 'plotly.offline', 'plotly.graph_objs', 'eli5'] ['Path', 'clear_output', 'display', 'CategoricalDtype', 'KMeans', 'PCA', 'mutual_info_regression', 'KFold', 'cross_val_score', 'StratifiedKFold', 'learning_curve', 'train_test_split', 'MEstimateEncoder', 'LabelEncoder', 'MEstimateEncoder', 'XGBRegressor', 'LGBMRegressor', 'CatBoostRegressor', 'GradientBoostingRegressor', 'ExtraTreesRegressor', 'TPESampler', 'make_subplots', 'mean_absolute_error', '*', 'PermutationImportance', 'mutual_info_regression', 'reduce', 'stats']Dict:{'os': ['rename'], 'warnings': [], 'pathlib': ['rename'], 'IPython': [], 'pandas': ['read_csv', 'isnull', 'melt', 'concat', 'value_counts', 'factorize', 'get_dummies', 'array'], 'matplotlib': [], 'numpy': ['mean', 'std', 'max', 'add', 'sum', 'min', 'array', 'cumsum', 'copy'], 'pandas_profiling': [], 'seaborn': [], 'sklearn': [], 'category_encoders': [], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': [], 'optuna': [], 'plotly': [], 'pycaret': [], 'eli5': [], 'scipy': [], '=': [], 'pd': [], "'feature':": [], 'X_train': [], 'importances[importances': [], '>': [], '0]': []} axis_0: 2, axis_1: 12
aug21-lightautoml-starter.py : ['read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'head', 'head', 'set_index', 'to_csv'] ['os', 'time', 'numpy', 'pandas', 'torch'] ['mean_squared_error', 'train_test_split', 'TabularAutoML', 'TabularUtilizedAutoML', 'Task', 'ReportDeco']Dict:{'os': [], 'time': [], 'numpy': [], 'pandas': ['read_csv'], 'sklearn': [], 'torch': [], 'lightautoml': []} axis_0: 0, axis_1: 0
tps-oct-2022-with-catboost-pca.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'to_parquet', 'read_parquet', 'read_csv', 'to_parquet', 'read_parquet', 'read_csv', 'drop', 'replace', 'value_counts', 'fillna', 'fillna', 'to_numpy', 'to_numpy', 'to_numpy', 'get_dummies', 'drop', 'drop', 'transform', 'transform', 'array', 'array', 'to_csv'] ['numpy', 'pandas', 'random', 'os', 'catboost'] ['StandardScaler', 'SklearnTransformerWrapper', 'train_test_split', 'pyplot']Dict:{'numpy': ['array'], 'pandas': ['read_csv', 'value_counts', 'read_parquet', 'get_dummies', 'array'], 'random': [], 'sklearn': [], 'feature_engine': [], 'matplotlib': [], 'os': ['replace'], 'catboost': []} axis_0: 2, axis_1: 13
readability-feature-engineering-non-nn-baseline.py : ['read_csv', 'head', 'read_csv', 'head', 'count', 'sub', 'join', 'join', 'array', 'apply', 'apply', 'apply', 'array', 'count', 'count', 'count', 'count', 'count', 'max', 'mean', 'reset_index', 'sample', 'cut', 'drop', 'apply', 'merge', 'merge', 'apply', 'merge', 'apply', 'merge', 'apply', 'merge', 'head', 'hist', 'head', 'mean', 'mean', 'read_csv', 'to_csv', 'array', 'mean', 'array', 'mean', 'mean', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'os', 'random', 'matplotlib.pyplot', 'seaborn', 'nltk', 'string', 're', 'math', 'sys', 'readability', 'spacy', 'gensim', 'warnings', 'textstat', 'string'] ['stopwords', 'word_tokenize', 'pos_tag', 'pos_tag_sents', 'model_selection', 'mean_squared_error', 'model_selection', 'MinMaxScaler', 'TfidfVectorizer', 'Ridge', 'GradientBoostingRegressor', 'TfidfVectorizer', 'stopwords', 'word_tokenize']Dict:{'pandas': ['array', 'cut', 'merge', 'read_csv'], 'numpy': ['mean', 'array', 'max'], 'os': [], 'random': ['sample'], 'matplotlib': ['hist'], 'seaborn': [], 'nltk': [], 'string': [], 're': ['sub'], 'math': [], 'sys': [], 'readability': [], 'spacy': [], 'sklearn': [], 'gensim': [], 'warnings': [], 'textstat': []} axis_0: 3, axis_1: 2
tps08-logisticregression-qlattice.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'corr', 'drop', 'pop', 'concat', 'astype', 'isnull', 'astype', 'isnull', 'sort_values', 'corr', 'drop', 'round', 'sum', 'reset_index', 'sort_values', 'head', 'unique', 'sort_values', 'corr', 'drop', 'sum', 'isnull', 'unique', 'keys', 'dropna', 'sum', 'isnull', 'isnull', 'sum', 'isnull', 'isnull', 'sum', 'sum', 'isnull', 'mean', 'sum', 'sum', 'isna', 'transform', 'transform', 'copy', 'copy', 'copy', 'transform', 'transform', 'array', 'abs', 'mean', 'reset_index', 'sort_values', 'to_csv', 'head', 'concat', 'head', 'drop', 'query'] ['os', 'sys', 'numpy', 'pandas', 'seaborn', 'matplotlib.pylab', 'warnings', 'missingno', 'feyn', 'shap'] ['Fore', 'Back', 'Style', 'uniform', 'LogisticRegression', 'HuberRegressor', 'RandomForestClassifier', 'ExtraTreesClassifier', 'KNeighborsClassifier', 'GaussianNB', 'LinearDiscriminantAnalysis', 'StackingClassifier', 'VotingClassifier', 'StackingClassifier', 'CatBoostClassifier', 'cross_validate', 'StratifiedKFold', 'RepeatedStratifiedKFold', 'RandomizedSearchCV', 'GridSearchCV', 'confusion_matrix', 'plot_confusion_matrix', 'classification_report', 'roc_auc_score', 'accuracy_score', 'metrics', 'LabelEncoder', 'enable_iterative_imputer', 'SimpleImputer', 'KNNImputer', 'IterativeImputer', 'preprocessing', 'OneHotEncoder', 'RobustScaler', 'PowerTransformer', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'WoEEncoder', 'train_test_split', 'FeatureImportanceTable']Dict:{'os': [], 'sys': [], 'numpy': ['mean', 'abs', 'sum', 'round', 'unique', 'array', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'unique', 'array'], 'seaborn': [], 'matplotlib': ['mean', 'sum', 'round', 'unique', 'array', 'copy'], 'colorama': [], 'scipy': ['mean'], 'sklearn': [], 'catboost': [], 'warnings': [], 'missingno': [], 'feature_engine': [], '=': [], '[]': [], 'pd': [], 'index=x_train[select_feature]': [], 'importance_df': [], 'x_train[select_feature]': [], 'ascending=True)': [], 'feyn': [], 'shap': []} axis_0: 0, axis_1: 10
attack-on-titanic-solution-no-data-leakage.py : ['read_csv', 'read_csv', 'copy', 'head', 'head', 'info', 'info', 'describe', 'dropna', 'corr', 'apply', 'replace', 'replace', 'apply', 'apply', 'apply', 'dropna', 'fillna', 'unstack', 'groupby', 'replace', 'replace', 'replace', 'replace', 'reset_index', 'concat', 'mean', 'groupby', 'sum', 'isnull', 'iterrows', 'mean', 'groupby', 'iterrows', 'sum', 'isnull', 'mean', 'groupby', 'iterrows', 'sum', 'isnull', 'mean', 'head', 'sort_values', 'isnull', 'get_dummies', 'astype', 'apply', 'select_dtypes', 'transform', 'corr', 'drop', 'corr', 'select_dtypes', 'copy', 'copy', 'pop', 'transform', 'transform', 'sum', 'isnull', 'sum', 'isnull', 'mean', 'sort_values', 'mean', 'mean', 'mean', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'matplotlib.colors', 'scipy.stats', 'optuna'] ['KNNImputer', 'kstest', 'norm', 'StandardScaler', 'train_test_split', 'cross_val_score', 'LogisticRegression', 'SVC', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'accuracy_score', 'train_test_split', 'StratifiedKFold', 'KFold', 'LightGBMPruningCallback', 'early_stopping', 'model_selection', 'VotingClassifier']Dict:{'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'numpy': ['mean', 'info', 'sum', 'copy'], 'seaborn': [], 'matplotlib': [], 'sklearn': ['transform'], 'scipy': ['mean'], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': [], 'optuna': []} axis_0: 0, axis_1: 0
ps-s3e8-2023-eda-and-submission.py : ['drop', 'read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'head', 'any', 'any', 'isna', 'any', 'any', 'isna', 'any', 'any', 'isna', 'sort_values', 'describe', 'sort_values', 'describe', 'to_dict', 'round', 'value_counts', 'to_dict', 'round', 'value_counts', 'join', 'add_suffix', 'describe', 'add_suffix', 'describe', 'concat', 'crosstab', 'crosstab', 'cut', 'crosstab', 'cut', 'sample', 'round', 'corr', 'array', 'set_index', 'astype', 'mean', 'mean', 'sort_values', 'reset_index', 'sort_values', 'reset_index', 'read_csv', 'to_csv', 'head', 'read_csv', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'math', 'warnings', 'xgboost', 'matplotlib.gridspec'] ['HTML', 'tqdm', 'Style', 'Fore', 'EarlyStopping', 'model_selection', 'OrdinalEncoder', 'mean_squared_error']Dict:{'IPython': [], 'pandas': ['isna', 'read_csv', 'cut', 'concat', 'value_counts', 'array', 'crosstab'], 'numpy': ['mean', 'round', 'array', 'any'], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'math': [], 'warnings': [], 'colorama': [], 'xgboost': [], 'sklearn': []} axis_0: 0, axis_1: 3
a-detailed-regression-guide-with-house-pricing.py : ['read_csv', 'head', 'read_csv', 'head', 'describe', 'info', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'concat', 'boxplot', 'skew', 'kurt', 'sort_values', 'corr', 'reset_index', 'copy', 'corr', 'bool', 'corr', 'drop', 'drop', 'reset_index', 'copy', 'reset_index', 'concat', 'drop', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'mean', 'astype', 'transform', 'groupby', 'fillna', 'mode', 'astype', 'astype', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'fillna', 'mode', 'fillna', 'sort_values', 'apply', 'sort_values', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'reset_index', 'get_dummies', 'drop', 'drop', 'value_counts', 'value_counts', 'value_counts', 'drop', 'drop', 'sample', 'min', 'max', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'std', 'std', 'corr', 'mean', 'iterrows', 'iterrows', 'mean', 'items', 'items', 'items', 'items', 'items', 'items', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'array', 'array', 'array', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'quantile', 'quantile', 'apply', 'apply', 'to_csv'] ['numpy', 'pandas', 'matplotlib.gridspec', 'matplotlib.pyplot', 'scipy.stats', 'sklearn.linear_model', 'matplotlib.style', 'seaborn', 'missingno', 'os', 'warnings', 'seaborn', 'matplotlib.pyplot', 'matplotlib.gridspec', 'matplotlib.style', 'seaborn'] ['datetime', 'skew', 'boxcox1p', 'boxcox_normmax', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'GradientBoostingRegressor', 'SVR', 'make_pipeline', 'RobustScaler', 'KFold', 'cross_val_score', 'mean_squared_error', 'StackingCVRegressor', 'XGBRegressor', 'LGBMRegressor', 'TSNE', 'KMeans', 'PCA', 'StandardScaler', 'stats', 'skew', 'boxcox1p', 'boxcox_normmax', 'train_test_split', 'mean_squared_error', 'LinearRegression', 'mean_squared_error', 'mean_absolute_error', 'LinearRegression', 'StratifiedKFold', 'cross_val_score', 'KFold', 'Ridge', 'mean_absolute_error', 'mean_squared_error', 'Lasso', 'ElasticNet']Dict:{'numpy': ['mean', 'quantile', 'max', 'sum', 'array', 'min', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'array'], 'matplotlib': [], 'datetime': ['min', 'max'], 'scipy': ['mode', 'describe', 'skew'], 'sklearn': [], 'mlxtend': [], 'xgboost': ['apply'], 'lightgbm': [], 'seaborn': ['boxplot'], 'missingno': [], 'os': [], 'warnings': []} axis_0: 0, axis_1: 7
tensorflow-gru-starter-0-790.py : ['read_csv', 'astype', 'read_csv', 'read_parquet', 'read_csv', 'astype', 'apply', 'sort_index', 'drop_duplicates', 'isin', 'astype', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'fillna', 'map', 'astype', 'fillna', 'map', 'astype', 'fillna', 'astype', 'astype', 'agg', 'groupby', 'array', 'fillna', 'copy', 'astype', 'concat', 'merge', 'astype', 'fillna', 'reset_index', 'sort_values', 'drop', 'sum', 'read_csv', 'nunique', 'sort_index', 'drop_duplicates', 'to_parquet', 'astype', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'array', 'array', 'read_parquet', 'concat', 'read_parquet', 'concat', 'read_csv', 'read_parquet', 'read_csv', 'astype', 'apply', 'sort_index', 'drop_duplicates', 'array', 'sum', 'read_csv', 'sort_index', 'drop_duplicates', 'nunique', 'astype', 'read_csv', 'astype', 'reset_index', 'set_index', 'to_csv', 'head', 'hist'] ['os', 'tensorflow', 'tensorflow.keras.backend', 'cupy', 'cudf', 'numpy', 'pandas', 'matplotlib.pyplot', 'gc'] []Dict:{'os': [], 'tensorflow': ['transpose', 'sum', 'cumsum'], 'cupy,': [], 'cudf': [], '#': [], 'GPU': [], 'LIBRARIES': [], 'numpy': ['transpose', 'sum', 'where', 'isin', 'array', 'cumsum', 'copy'], 'matplotlib': ['hist']} axis_0: 3, axis_1: 1
titanic-eda-modeling-lightbgm.py : ['join', 'read_csv', 'read_csv', 'info', 'info', 'drop', 'drop', 'corr', 'corr', 'value_counts', 'value_counts', 'corr', 'pivot_table', 'fillna', 'mode', 'replace', 'replace', 'replace', 'replace', 'abs', 'corr', 'head', 'sort_values', 'notnull', 'isnull', 'isnull', 'info', 'info', 'fillna', 'median', 'cut', 'cut', 'cut', 'cut', 'head', 'head', 'drop', 'copy', 'astype', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'scipy', 'warnings', 'lightgbm', 'os', 'time'] ['norm', 'OrdinalEncoder', 'train_test_split', 'GridSearchCV', 'RandomForestRegressor']Dict:{'numpy': ['median', 'info', 'abs', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'pivot_table', 'value_counts', 'notnull'], 'matplotlib': [], 'seaborn': [], 'scipy': ['median'], 'warnings': [], 'sklearn': [], 'lightgbm': [], 'os': ['replace'], 'time': []} axis_0: 0, axis_1: 3
gislr-eda-feature-processing.py : ['read_csv', 'map', 'read_parquet', 'astype', 'set_index', 'read_csv', 'read_parquet', 'set_index', 'agg', 'groupby', 'round', 'sum', 'sum', 'sort_values', 'agg', 'groupby', 'round', 'reset_index', 'sum', 'sum', 'sort_values', 'agg', 'groupby', 'astype', 'copy', 'groupby', 'isin', 'iterrows', 'unique', 'query', 'unique', '__init__', 'mean', 'std', 'interpolate', 'interpolate', 'iterrows'] ['pandas', 'os', 'json', 'numpy', 'itertools', 'tensorflow', 'torch', 'torch.nn.functional', 'torch.nn', 'seaborn', 'mediapipe', 'matplotlib.pyplot', 'plotly.express', 'plotly.graph_objects', 'IPython', 'mediapipe'] ['init_notebook_mode', 'tqdm', 'make_subplots', 'animation', 'Path', 'display', 'display', 'HTML', 'Javascript', 'Markdown', 'landmark_pb2']Dict:{'pandas': ['read_parquet', 'unique', 'read_csv'], 'itables': [], 'os': [], 'json': [], 'tqdm': ['__init__'], 'numpy': ['mean', 'sum', 'round', 'unique', 'isin', 'std', 'copy'], 'itertools': ['groupby'], 'tensorflow': ['round', 'unique'], 'torch': [], 'seaborn': [], 'mediapipe': [], 'matplotlib': [], 'plotly': ['__init__'], 'pathlib': ['__init__'], 'IPython': []} axis_0: 0, axis_1: 0
cpu-catboost-baseline-using-polars-inference.py : ['clip', 'shift', 'mean', 'std', 'sum', 'astype', 'read_csv', 'mean', 'head'] ['os', 'gc', 'sys', 'numpy', 'pandas', 'polars', 'jo_wilder'] ['CatBoostClassifier', 'Pool']Dict:{'os': [], 'gc': [], 'sys': [], 'numpy': ['mean', 'std', 'sum', 'clip'], 'pandas': ['read_csv'], 'polars': ['mean', 'read_csv', 'head', 'sum', 'std'], 'catboost': [], 'jo_wilder': []} axis_0: 0, axis_1: 0
ai4code-language-detection-and-model-tuning.py : ['update', 'insert', 'read_csv', 'read_csv', 'nunique', 'nunique', 'head', 'nunique', 'nunique', 'nunique', 'nunique', 'head', 'reset_index', 'sort_values', 'reset_index', 'count', 'groupby', 'head', 'head', 'keys', 'items', 'head', 'join', 'read_parquet', 'read_csv', 'merge', 'head', 'to_parquet', 'apply', 'nunique', 'value_counts', 'nunique', 'value_counts', 'value_counts', 'reset_index', 'value_counts', 'value_counts', 'value_counts', 'reset_index', 'merge', 'apply', 'reset_index', 'explode', 'cumsum', 'groupby', 'head', 'max', 'groupby', 'min', 'mean', 'max', 'read_parquet', 'reset_index', 'count', 'groupby', 'reset_index', 'mean', 'groupby', 'pivot', 'unique', 'sample', 'reset_index', 'isin', 'set_index', 'unique', 'set_index', 'head', 'astype', 'to_numpy', 'max', 'groupby', 'transform', 'astype', 'to_numpy', 'where', 'where', 'update', 'apply', 'groupby', 'sort_values', 'apply', 'groupby', 'sort_values', 'max', 'groupby', 'concat'] ['os', 'gc', 'wandb', 'random', 'math', 'glob', 'json', 'warnings', 'pandas', 'numpy', 'seaborn', 'matplotlib', 'matplotlib.patches', 'matplotlib.pyplot', 'matplotlib.image', 'spacy'] ['time', 'bisect', 'vstack', 'tqdm', 'cm', 'AnnotationBbox', 'OffsetImage', 'ListedColormap', 'LinearSegmentedColormap', 'Rectangle', 'display_html', 'Language', 'LanguageDetector', 'UserSecretsClient', 'GroupShuffleSplit', 'TfidfVectorizer', 'XGBRanker', 'sparse']Dict:{'os': [], 'gc': [], 'wandb': [], 'time': [], 'random': ['sample'], 'math': [], 'glob': [], 'json': [], 'bisect': [], 'scipy': [], 'tqdm': ['update'], 'warnings': [], 'pandas': ['read_csv', 'concat', 'value_counts', 'read_parquet', 'unique', 'merge', 'pivot'], 'numpy': ['mean', 'max', 'where', 'min', 'unique', 'isin', 'insert', 'cumsum'], 'seaborn': [], 'matplotlib': ['update'], 'IPython': [], 'spacy': [], 'spacy_language_detection': [], 'kaggle_secrets': [], 'sklearn': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 0
tps-oct-2021-pca-and-kmeans-feature-eng.py : ['astype', 'astype', 'astype', 'astype', 'memory_usage', 'sum', 'transform', 'concat', 'concat', 'head', 'head', 'mean', 'to_csv'] ['os', 'numpy', 'pandas', 'cudf', 'plotly.figure_factory', 'plotly.express', 'plotly.graph_objects', 'matplotlib.pyplot', 'seaborn', 'shap'] ['XGBClassifier', 'StratifiedKFold', 'roc_auc_score', 'OneHotEncoder', 'PCA', 'KMeans', 'mutual_info_regression']Dict:{'os': [], 'numpy': ['mean', 'sum'], 'pandas': ['concat'], 'cudf': [], 'xgboost': [], 'sklearn': [], 'plotly': [], 'matplotlib': [], 'seaborn': [], 'shap': []} axis_0: 0, axis_1: 4
bayesian-optimization-with-xgboost.py : ['read_csv', 'to_datetime', 'dropna', 'abs', 'abs', 'drop', 'drop', 'keys', 'sort_values', 'set_index', 'read_csv', 'to_datetime', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'xgboost', 'matplotlib.pyplot'] ['BayesianOptimization', 'mean_squared_error', 'train_test_split']Dict:{'pandas': ['to_datetime', 'read_csv'], 'numpy': ['abs'], 'matplotlib': [], 'xgboost': [], 'bayes_opt': [], 'sklearn': []} axis_0: 0, axis_1: 2
digit-recognizetion-with-python.py : ['read_csv', 'read_csv', 'head', 'drop', 'value_counts', 'describe', 'any', 'isnull', 'describe', 'any', 'isnull', 'update', 'update', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'astype', 'sum', 'max', 'product', 'max', 'take', 'concat', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'matplotlib.image', 'seaborn', 'itertools'] ['train_test_split', 'confusion_matrix', 'to_categorical', 'Sequential', 'Dense', 'Dropout', 'Flatten', 'Conv2D', 'MaxPool2D', 'Activation', 'RMSprop', 'adam', 'ImageDataGenerator', 'ReduceLROnPlateau', 'backend', 'get_custom_objects']Dict:{'pandas': ['concat', 'value_counts', 'read_csv', 'isnull'], 'numpy': ['take', 'product', 'add', 'any', 'max', 'sum'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'itertools': ['product'], 'keras': []} axis_0: 0, axis_1: 2
merging-fe-prediction-xgb-lgb-logr-linr.py : ['set_index', 'read_csv', 'set_index', 'read_csv', 'read_csv', 'head', 'info', 'info', 'head', 'concat', 'groupby', 'transform', 'count', 'fillna', 'mask', 'transform', 'sum', 'fillna', 'mask', 'fillna', 'replace', 'replace', 'replace', 'replace', 'replace', 'fillna', 'apply', 'notnull', 'median', 'groupby', 'fillna', 'apply', 'groupby', 'fillna', 'median', 'drop', 'fillna', 'fillna', 'drop', 'head', 'info', 'info', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'info', 'info', 'astype', 'map', 'astype', 'sort_values', 'abs', 'merge', 'astype', 'sort_values', 'abs', 'merge', 'fillna', 'set_index', 'astype', 'unique', 'sum', 'astype', 'astype', 'unique', 'unique', 'mean', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'head', 'hist', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'eli5', 'lightgbm', 'xgboost', 'warnings'] ['LogisticRegression', 'LinearRegression', 'train_test_split', 'confusion_matrix', 'preprocessing', 'LabelEncoder', 'StandardScaler']Dict:{'numpy': ['mean', 'median', 'max', 'abs', 'sum', 'min', 'unique', 'info'], 'pandas': ['read_csv', 'concat', 'unique', 'notnull', 'merge'], 'matplotlib': ['hist'], 'seaborn': [], 'eli5': [], 'lightgbm': [], 'xgboost': [], 'sklearn': ['transform'], 'warnings': []} axis_0: 3, axis_1: 4
ps-s3e7-2023-eda-and-submission.py : ['tail', 'read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'any', 'any', 'isna', 'any', 'any', 'isna', 'any', 'any', 'isna', 'sort_values', 'describe', 'sort_values', 'describe', 'value_counts', 'query', 'query', 'query', 'to_datetime', 'astype', 'astype', 'to_datetime', 'astype', 'astype', 'to_datetime', 'astype', 'astype', 'head', 'ne', 'drop', 'drop', 'drop', 'corr', 'set_index', 'astype', 'astype', 'ge', 'array', 'set_index', 'astype', 'drop', 'drop', 'reset_index', 'mean', 'min', 'max', 'read_csv', 'to_csv', 'head', 'read_csv', 'read_csv', 'drop', 'merge', 'drop', 'max', 'min', 'isin', 'map', 'isin', 'to_csv', 'head', 'isin'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'math', 'warnings'] ['HTML', 'tqdm', 'Style', 'Fore', 'XGBClassifier', 'StratifiedKFold', 'roc_auc_score', 'confusion_matrix', 'ConfusionMatrixDisplay', 'RocCurveDisplay']Dict:{'IPython': [], 'pandas': ['isna', 'read_csv', 'value_counts', 'array', 'merge', 'to_datetime'], 'numpy': ['mean', 'any', 'max', 'min', 'isin', 'array'], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'math': [], 'warnings': [], 'colorama': [], 'xgboost': [], 'sklearn': []} axis_0: 0, axis_1: 0
gb-vpp-whoppity-dub-dub.py : ['read_csv', 'head', 'read_csv', 'head', 'cumsum', 'groupby', 'cumsum', 'groupby', 'cumsum', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'cumsum', 'groupby', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'diff', 'groupby', 'reset_index', 'mean', 'ewm', 'groupby', 'reset_index', 'agg', 'rolling', 'groupby', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'to_numpy', 'drop', 'drop', 'transform', 'astype', 'squeeze', 'min', 'max', 'unique', 'squeeze', 'squeeze', 'squeeze', 'squeeze', 'read_csv', 'to_csv', 'median', 'round', 'clip', 'to_csv'] ['gc', 'numpy', 'pandas', 'tensorflow'] ['KFold', 'RobustScaler', 'mean_absolute_error', 'plot_model', 'Model', 'load_model', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau', 'Bidirectional', 'LSTM', 'Dense', 'Dropout', 'Input', 'Concatenate', 'Add', 'GRU']Dict:{'gc': [], 'numpy': ['mean', 'median', 'squeeze', 'max', 'round', 'min', 'unique', 'clip', 'diff', 'cumsum'], 'pandas': ['get_dummies', 'unique', 'read_csv'], 'sklearn': [], 'tensorflow': []} axis_0: 1, axis_1: 2
n-beats-dnn-for-univariate-time-series-forecast.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'info', 'head', 'nunique', 'head', 'describe', 'to_datetime', 'reset_index', 'sum', 'groupby', 'groupby', 'join', 'to_datetime', 'drop', 'reset_index', 'transform', 'describe', 'transform', 'copy', 'reset_index', 'reset_index', '__getitem__', 'keys', '__init__', '__init__', '__init__', 'stack', 'sum', '__init__', 'stack', 'sum', 'join', 'update', 'eval', 'eval', 'concat', 'isin', 'array', 'sum', 'isin', 'copy', '__getitem__', 'keys', 'keys', 'eval', 'eval', 'squeeze', 'copy', 'update', 'to_csv', 'sum', 'isnull', 'head'] ['numpy', 'pandas', 'scipy', 'matplotlib.pyplot', 'seaborn', 'matplotlib.ticker', 'plotly.express', 'plotly.graph_objects', 'os', 'sys', 'pathlib', 'gc', 're', 'math', 'random', 'time', 'datetime', 'sklearn', 'tensorflow', 'tensorflow_addons', 'torch', 'torch.nn', 'torch.optim', 'torch.nn.functional', 'warnings'] ['make_subplots', 'tqdm', 'Optional', 'Union', 'Tuple', 'OrderedDict', 'StratifiedKFold', 'StandardScaler', 'OrdinalEncoder', 'keras', 'layers']Dict:{'numpy': ['stack', 'squeeze', 'sum', 'isin', 'info', 'array', 'copy'], 'pandas': ['read_csv', 'isnull', 'eval', 'concat', 'array', 'to_datetime'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'plotly': ['__init__'], 'os,': [], 'sys,': [], 'pathlib,': [], 'gc': [], 're,': [], 'math,': [], 'random,': [], 'time': [], 'datetime': [], 'tqdm': ['update', '__init__'], 'typing': ['__getitem__', '__init__'], 'collections': ['keys', '__getitem__', 'update', '__init__', 'copy'], 'sklearn': ['transform', '__init__'], 'tensorflow': [], 'tensorflow_addons': [], 'torch': [], '': [], 'warnings': []} axis_0: 1, axis_1: 1
feature-engineering-and-feature-selection.py : ['read_csv', 'head', 'transform', 'transform', 'mean', 'std', 'corr', 'drop', 'drop'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'plotly.graph_objects', 'plotly.graph_objects', 'plotly.graph_objects', 'plotly.graph_objects', 'plotly.graph_objects'] ['express', 'make_subplots', 'make_subplots', 'PowerTransformer', 'make_subplots', 'make_subplots', 'LinearRegression', 'train_test_split', 'mean_squared_error', 'LinearRegression', 'train_test_split', 'PolynomialFeatures', 'PCA', 'KernelPCA']Dict:{'pandas': ['read_csv'], 'numpy': ['mean', 'std'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 0
decrease-in-impurity-importances.py : ['update', 'read_csv', 'read_csv', 'read_csv', 'tail', 'describe', 'fillna', 'diff', 'groupby', 'fillna', 'diff', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'fillna', 'mean', 'rolling', 'groupby', 'fillna', 'max', 'rolling', 'groupby', 'fillna', 'min', 'rolling', 'groupby', 'fillna', 'std', 'rolling', 'groupby', 'fillna', 'shift', 'groupby', 'fillna', 'diff', 'groupby', 'cumsum', 'groupby', 'cumsum', 'groupby', 'transform', 'groupby', 'copy', 'nunique', 'nunique', 'reset_index', 'array', 'unique', 'mean', 'std', 'sort_values', 'map', 'to_csv', 'head'] ['sys', 'numpy', 'pandas', 'matplotlib.pyplot', 'gc', 'warnings'] ['KFold', 'RandomForestRegressor', 'mean_absolute_error']Dict:{'sys': [], 'numpy': ['mean', 'max', 'array', 'min', 'unique', 'diff', 'std', 'cumsum', 'copy'], 'pandas': ['array', 'unique', 'read_csv'], 'matplotlib': [], 'sklearn': [], 'gc': [], 'warnings': [], '=': [], '[]': []} axis_0: 2, axis_1: 0
eda-fe-design-enefit-predict-energy.py : ['join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'join', 'apply', 'head', 'info', 'describe', 'sum', 'isnull', 'to_json', 'sum', 'isnull', 'keys', 'head', 'value_counts', 'to_json', 'keys', 'to_dict', 'value_counts', 'keys', 'to_dict', 'value_counts', 'keys', 'to_dict', 'value_counts', 'keys', 'head', 'info', 'describe', 'sum', 'isnull', 'head', 'info', 'describe', 'sum', 'isnull', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'head', 'info', 'describe', 'sum', 'isnull', 'reset_index', 'sum', 'groupby', 'head', 'info', 'describe', 'sum', 'isnull', 'mean', 'head', 'mean', 'head', 'iterrows', 'head', 'head', 'info', 'describe', 'sum', 'isnull', 'mean', 'head', 'mean', 'head', 'iterrows', 'head', 'copy', 'read_csv', 'join', 'copy', 'read_csv', 'join', 'copy', 'read_csv', 'join', 'copy', 'read_csv', 'join', 'copy', 'read_csv', 'join', 'copy', 'read_csv', 'join', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'merge', 'drop_duplicates', 'reset_index', 'agg', 'groupby', 'merge', 'to_datetime', 'to_datetime', 'astype', 'isin', 'drop', 'info', 'drop'] ['numpy', 'pandas', 'os', 'os', 'pandas', 'json', 'plotly.express', 'plotly.express', 'pandas', 'folium', 'folium', 'shap', 'matplotlib.pyplot'] ['train_test_split', 'XGBRegressor', 'plot_importance', 'plot_tree', 'mean_squared_error', 'Explainer', 'lime_tabular', 'plot_tree']Dict:{'numpy': ['mean', 'sum', 'isin', 'info', 'copy'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'merge', 'to_datetime'], 'os': [], 'json': [], 'plotly': [], 'folium': [], 'sklearn': [], 'xgboost': [], 'shap': [], 'lime': [], 'matplotlib': []} axis_0: 0, axis_1: 2
ashrae-half-and-half.py : ['read_csv', 'read_csv', 'read_csv', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'merge', 'merge', 'to_datetime', 'sort_values', 'reset_index', 'astype', 'isin', 'astype', 'drop', 'drop', 'drop', 'concat', 'sort_values', 'read_csv', 'read_csv', 'clip', 'to_csv'] ['gc', 'os', 'random', 'lightgbm', 'numpy', 'pandas', 'seaborn'] ['pyplot', 'mean_squared_error', 'LabelEncoder', 'is_datetime64_any_dtype', 'is_categorical_dtype']Dict:{'gc': [], 'os': [], 'random': [], 'lightgbm': [], 'numpy': ['max', 'sum', 'min', 'clip', 'isin'], 'pandas': [], 'seaborn': [], 'matplotlib': [], 'sklearn': []} axis_0: 1, axis_1: 3
bike-sharing-feature-engineering.py : ['read_csv', 'read_csv', 'head', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'info', 'info', 'to_datetime', 'to_datetime', 'info', 'info', 'tail', 'describe', 'corr', 'set_index', 'boxplot', 'transform', 'boxplot', 'boxplot', 'boxplot', 'hist', 'hist', 'head', 'set_index', 'quantile', 'quantile', 'any', 'dropna', 'info', 'info', 'head', 'boxplot', 'replace', 'replace', 'fillna', 'interpolate', 'interpolate', 'sum', 'isnull', 'head', 'head', 'astype', 'astype', 'info', 'head', 'concat', 'head', 'astype', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['LabelEncoder', 'train_test_split', 'MinMaxScaler', 'RandomForestRegressor', 'mean_squared_error', 'metrics', 'DecisionTreeRegressor']Dict:{'numpy': ['info', 'quantile', 'sum', 'any'], 'pandas': ['concat', 'to_datetime', 'read_csv', 'isnull'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'os': ['replace'], 'sklearn': []} axis_0: 0, axis_1: 2
mean-median-feature-engineering-house-price.py : ['drop', 'drop', 'isnull', 'isnull', 'median', 'isnull', 'median', 'isnull', 'isnull', 'transform', 'reset_index', 'concat', 'get_dummies', 'drop', 'read_csv', 'read_csv', 'head', 'mean', 'median', 'mean', 'median', 'mean', 'median', 'mean', 'median', 'read_csv', 'to_csv', 'head'] ['numpy', 'pandas', 'random', 'os', 'warnings'] ['clear_output', 'StandardScaler', 'mean_squared_error', 'TabularAutoML', 'TabularUtilizedAutoML', 'Task', 'ReportDeco']Dict:{'IPython': [], 'numpy': ['mean', 'median'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'random,os': [], 'warnings': [], 'sklearn': [], 'lightautoml': []} axis_0: 1, axis_1: 0
ridge-and-lightgbm-blending-hacking.py : ['join', 'replace', 'join', 'replace', 'replace', 'read_csv', 'join', 'hist', 'hist', 'astype', 'astype', 'astype', 'hist', 'hist', 'hist', 'astype', 'astype', 'mean', 'join', 'read_csv', 'to_csv'] ['os', 'numpy', 'pandas', 'json', 'lightgbm'] ['pyplot', 'tqdm_notebook', 'CountVectorizer', 'TfidfVectorizer', 'mean_absolute_error', 'Ridge', 'HTMLParser']Dict:{'os': ['replace'], 'numpy': ['mean'], 'pandas': ['read_csv'], 'matplotlib': [], 'json': [], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'html': []} axis_0: 0, axis_1: 0
house-prices-eda-feature-engineering.py : ['read_csv', 'read_csv', 'head', 'drop', 'head', 'head', 'concat', 'drop', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'drop', 'sum', 'isnull', '_get_numeric_data', 'fillna', 'mean', 'fillna', 'mode', 'value_counts', 'drop', 'corr', 'corr', 'corr', 'sort_values', 'drop', 'describe', 'skew', 'kurt', 'concat', 'concat', 'concat', 'concat', 'boxplot', 'corr', 'select_dtypes', 'get_dummies', 'insert', 'head', 'drop', 'head', 'array', 'head', 'insert', 'head', 'drop', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'math', 'warnings', 'numpy'] ['MinMaxScaler', 'cross_val_score', 'train_test_split', 'KFold', 'cross_val_predict', 'RandomForestRegressor', 'GradientBoostingRegressor', 'norm', 'LinearRegression', 'RidgeCV', 'Lasso', 'ElasticNetCV', 'BayesianRidge', 'LassoLarsIC', 'mean_squared_error', 'make_scorer', 'KernelRidge', 'BaseEstimator', 'TransformerMixin', 'RegressorMixin', 'clone', 'StandardScaler', 'train_test_split', 'RandomForestRegressor', 'DecisionTreeRegressor']Dict:{'numpy': ['mean', 'insert', 'sum', 'array'], 'sklearn': [], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'array'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': ['mean'], 'math': [], 'warnings': []} axis_0: 0, axis_1: 10
extensive-text-data-feature-engineering.py : ['read_csv', 'read_csv', 'fillna', 'read_csv', 'concat', 'rename', 'agg', 'groupby', 'fillna', 'rename', 'agg', 'groupby', 'join', 'join', 'rename', 'agg', 'groupby', 'join', 'astype', 'join', 'head', 'head', 'head', 'fillna', 'fillna', 'apply', 'apply', 'apply', 'apply', 'apply', 'head', 'apply', 'join', 'apply', 'apply', 'apply', 'join', 'apply', 'apply', 'apply', 'head', 'apply', 'apply', 'head', 'apply', 'apply', 'apply', 'apply', 'apply', 'head', 'apply', 'join', 'apply', 'join', 'transform', 'transform', 'transform', 'head', 'sort_values', 'transform', 'transform', 'transform', 'items', 'get', 'array', 'sum', 'sum', 'array', 'array', 'join', 'join', 'agg', 'groupby', 'rename', 'merge', 'head'] ['datetime', 'pandas', 'numpy', 'warnings', 'string'] ['TfidfVectorizer', 'LatentDirichletAllocation', 'CountVectorizer', 'sequence', 'text', 'Input', 'Embedding', 'word_tokenize', 'stopwords', 'TextBlob']Dict:{'sklearn': [], 'keras': [], 'nltk': [], 'textblob': [], 'datetime': [], 'pandas': ['concat', 'array', 'merge', 'read_csv'], 'numpy': ['array', 'sum'], 'warnings': [], 'string': []} axis_0: 2, axis_1: 3
detailed-eda-feature-engineering-ml-dl.py : ['drop', 'read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'map', 'info', 'info', 'reset_index', 'concat', 'assign', 'assign', 'nunique', 'mean', 'std', 'filter', 'mean', 'std', 'where', 'where', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'where', 'abs', 'where', 'apply', 'copy', 'drop', 'read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'reset_index', 'concat', 'assign', 'assign', 'where', 'where', 'where', 'abs', 'apply', 'mean', 'std', 'read_csv', 'mean', 'to_csv', 'read_csv', 'mean', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'tensorflow'] ['partial', 'train_test_split', 'roc_auc_score', 'RandomForestClassifier', 'SVC', 'LogisticRegression', 'PowerTransformer', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'keras']Dict:{'functools': [], 'pandas': ['concat', 'read_csv'], 'numpy': ['mean', 'abs', 'where', 'info', 'std', 'copy'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': [], 'tensorflow': []} axis_0: 0, axis_1: 2
simple-eda-and-lightgbm.py : ['read_csv', 'read_csv', 'head', 'describe', 'value_counts', 'read_csv', 'head', 'merge', 'drop', 'rename', 'head', 'pop', 'drop', 'pop', 'pop', 'pop', 'transform', 'transform', 'head', 'unique', 'mean', 'array', 'array', 'astype', 'astype', 'astype', 'astype', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'read_csv', 'copy', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'seaborn', 'lightgbm', 'matplotlib.pyplot'] ['GroupKFold', 'StratifiedKFold', 'LabelEncoder', 'metrics']Dict:{'numpy': ['mean', 'unique', 'isin', 'array', 'copy'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'array', 'merge'], 'os': ['rename'], 'seaborn': [], 'lightgbm': [], 'sklearn': [], 'matplotlib': []} axis_0: 1, axis_1: 2
optiver-2023-prediction-with-keras.py : ['read_csv', 'head', 'read_csv', 'head', 'unique', 'transpose', 'describe', 'copy', 'sum', 'isnull', 'isnull', 'head', 'sum', 'isnull', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'max', 'min', 'sum', 'head', 'describe', 'unique', 'isin', 'isin', 'isin', 'isin', 'mean', 'median', 'head', 'head', 'head', 'fillna'] ['pandas', 'optiver2023', 'numpy', 'matplotlib.pyplot', 'gc', 'tensorflow', 'keras_tuner'] ['keras', 'mean_absolute_error']Dict:{'pandas': ['eval', 'unique', 'read_csv', 'isnull'], 'optiver2023': [], 'numpy': ['transpose', 'median', 'mean', 'max', 'sum', 'min', 'unique', 'isin', 'copy'], 'tensorflow': ['transpose', 'unique'], 'matplotlib': [], 'gc': [], 'keras_tuner': [], 'sklearn': []} axis_0: 1, axis_1: 3
detailed-exploratory-data-analysis-with-python.py : ['read_csv', 'head', 'info', 'count', 'describe', 'select_dtypes', 'head', 'hist', 'corr', 'sort_values', 'corr', 'items', 'corr', 'drop', 'head', 'head', 'select_dtypes', 'boxplot', 'boxplot'] ['pandas', 'seaborn', 'matplotlib.pyplot', 'operator'] []Dict:{'pandas': ['read_csv'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'operator': []} axis_0: 0, axis_1: 1
feature-engineering-symbolic-transformation.py : ['unique', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'copy', 'copy', 'sum', 'duplicated', 'drop_duplicates', 'drop_duplicates', 'sum', 'duplicated', 'copy', 'min', 'max', 'min', 'max', 'min', 'max', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'map', 'drop', 'unique', 'map', 'to_dict', 'drop', 'transform', 'transform', 'concat', 'concat'] ['seaborn', 'matplotlib.pyplot', 'pandas', 'numpy', 'gc', 'lightgbm', 'catboost', 'xgboost', 'warnings'] ['compute_class_weight', 'train_test_split', 'log_loss', 'cohen_kappa_score', 'KFold', 'RepeatedStratifiedKFold', 'StratifiedKFold', 'StandardScaler', 'RobustScaler', 'QuantileTransformer', 'SymbolicTransformer']Dict:{'seaborn': [], 'matplotlib': [], 'pandas': ['concat', 'unique', 'read_csv'], 'numpy': ['quantile', 'max', 'sum', 'min', 'unique', 'copy'], 'gc': [], 'sklearn': ['transform'], 'lightgbm': [], 'catboost': [], 'xgboost': [], 'warnings': [], 'gplearn': []} axis_0: 2, axis_1: 0
xgboost-and-randomforest-hyper-tuning-for-beginner.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'skew', 'dropna', 'kurtosis', 'dropna', 'sort_values', 'corr', 'sum', 'isna', 'sum', 'isna', 'boxplot', 'boxplot', 'fillna', 'median', 'fillna', 'median', 'boxplot', 'boxplot', 'skew', 'dropna', 'kurtosis', 'dropna', 'sort_values', 'value_counts', 'sort_values', 'value_counts', 'skew', 'dropna', 'kurtosis', 'dropna', 'sum', 'isna', 'fillna', 'median', 'unique', 'sum', 'isna', 'drop', 'drop', 'head', 'unique', 'nunique', 'fillna', 'sum', 'isna', 'fillna', 'head', 'drop', 'drop', 'reset_index', 'drop', 'drop', 'unique', 'drop', 'drop', 'replace', 'replace', 'head', 'head', 'corr', 'sort_values', 'corr', 'drop', 'mean', 'mean', 'to_csv'] ['numpy', 'pandas', 'os', 'os', 'numpy', 'seaborn', 'matplotlib.pyplot', 'pandas', 'missingno'] ['stats', 'train_test_split', 'cross_val_score', 'RandomizedSearchCV', 'StandardScaler', 'MinMaxScaler', 'LabelEncoder', 'accuracy_score', 'XGBClassifier', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'unique'], 'pandas': ['isna', 'unique', 'read_csv', 'value_counts'], 'os': ['replace'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'missingno': [], 'scipy': ['kurtosis', 'skew'], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 0
titanic-deeplearning-tpu-optimization-h2o-automl.py : ['join', 'join', 'read_csv', 'read_csv', 'read_csv', 'info', 'info', 'head', 'compare', 'nunique', 'count', 'groupby', 'sum', 'astype', 'describe', 'describe', 'corr', 'fillna', 'median', 'fillna', 'median', 'array', 'mean', 'quantile', 'unique', 'array', 'copy', 'cut', 'unique', 'map', 'map', 'drop', 'drop', 'fillna', 'mode', 'fillna', 'mode', 'transform', 'transform', 'transform', 'query', 'reset_index', 'query', 'reset_index', 'query', 'drop', 'drop', 'copy', 'pop', 'join', 'array', 'array', 'squeeze', 'where', 'to_csv', 'head', 'add', 'add', 'add', 'add', 'add', 'drop', 'reset_index', 'query', 'reset_index', 'query', 'drop', 'drop', 'squeeze', 'where', 'to_csv', 'head', 'head', 'describe', 'describe', 'head', 'to_csv', 'head'] ['numpy', 'pandas', 'scipy', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'plotly.graph_objects', 'sklearn', 'tensorflow', 'tensorflow_addons', 'os', 'pathlib', 'gc', 'sys', 're', 'math', 'random', 'time', 'datetime', 'pprint', 'sweetviz', 'optuna', 'h2o'] ['make_subplots', 'preprocessing', 'KFold', 'StratifiedKFold', 'keras', 'layers', 'tqdm', 'KaggleDatasets', 'H2OAutoML']Dict:{'numpy': ['mean', 'median', 'squeeze', 'quantile', 'add', 'sum', 'where', 'unique', 'info', 'array', 'copy'], 'pandas': ['array', 'cut', 'unique', 'read_csv'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': [], 'tensorflow': ['add'], 'tensorflow_addons': [], 'os': [], 'pathlib': [], 'gc': [], 'sys': [], 're': [], 'math': [], '': [], 'random': [], 'time': [], 'datetime': [], 'pprint': [], 'tqdm': [], 'kaggle_datasets': [], 'sweetviz': [], 'h2o': []} axis_0: 0, axis_1: 7
eda-xgboost-catboost-lgmb-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'sum', 'isna', 'head', 'describe', 'sum', 'isna', 'head', 'describe', 'head', 'sum', 'isna', 'reset_index', 'drop', 'copy', 'sum', 'isna', 'reset_index', 'drop', 'copy', 'sum', 'isna', 'reset_index', 'value_counts', 'sum', 'isna', 'reset_index', 'value_counts', 'update', 'update', 'update', 'update', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'update', 'read_csv', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'read_csv', 'drop', 'drop', 'read_csv', 'drop', 'drop', 'min', 'min', 'read_csv', 'drop', 'drop', 'max', 'max', 'read_csv', 'drop', 'drop', 'sum', 'sum', 'read_csv', 'drop', 'drop', 'read_csv', 'drop', 'drop', 'sum', 'sum', 'drop', 'drop', 'read_csv', 'drop', 'drop'] ['os', 'joblib', 'numpy', 'pandas', 'warnings', 'matplotlib', 'matplotlib.pyplot', 'seaborn'] ['ticker', 'roc_auc_score', 'StratifiedKFold', 'LinearRegression', 'boxcox', 'XGBClassifier', 'CatBoostClassifier', 'LGBMClassifier']Dict:{'os': [], 'joblib': [], 'numpy': ['copy', 'sum', 'max', 'min'], 'pandas': ['isna', 'read_csv', 'value_counts'], 'warnings': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'scipy': [], 'xgboost': [], 'catboost': [], 'lightgbm': []} axis_0: 0, axis_1: 32
tps-mar21-eda-feature-engineering.py : ['read_csv', 'read_csv', 'drop', 'drop', 'concat', 'hist', 'sum', 'isnull', 'sum', 'isnull', 'copy', 'concat', 'boxplot', 'concat', 'unique', 'value_counts', 'copy', 'copy', 'astype', 'info', 'info', 'unique', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'concat', 'concat', 'copy', 'to_csv', 'to_csv', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 'seaborn'] ['train_test_split', 'LabelEncoder', 'OneHotEncoder', 'preprocessing', 'skew', 'boxcox']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique'], 'numpy': ['info', 'sum', 'unique', 'copy'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'warnings': [], 'sklearn': [], 'scipy': []} axis_0: 0, axis_1: 4
lightgbm-with-multiclass-focal-loss.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'where', 'clip', 'where', 'sum', 'mean', 'transform', 'unique', 'items', 'sum', 'read_csv', 'read_csv', 'read_csv', 'apply', 'nunique', 'groupby', 'drop', 'drop', 'map', 'astype', 'astype', 'sum', 'sum', 'sum', 'sum', 'set_index', 'drop', 'set_index', 'unique', 'mean', 'std', 'to_csv', 'insert', 'to_csv'] ['os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'tensorflow', 'lightgbm', 'gc'] ['keras', 'plot_model', 'filterwarnings', 'accuracy_score', 'StandardScaler', 'RobustScaler', 'MinMaxScaler', 'QuantileTransformer', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'optimize', 'special', 'Parallel', 'delayed', '_ConstantPredictor', 'LabelBinarizer', 'special']Dict:{'os': [], 'numpy': ['mean', 'max', 'sum', 'where', 'min', 'unique', 'clip', 'std', 'insert'], 'pandas': ['unique', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'tensorflow': [], 'warnings': [], 'sklearn': ['transform'], 'lightgbm': [], 'scipy': [], 'joblib': [], 'gc': []} axis_0: 0, axis_1: 10
lgbm-numeric-non-numeric-feat-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'sum', 'isna', 'sum', 'isna', 'hist', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'drop', 'reset_index', 'agg', 'groupby', 'items', 'fillna', 'reset_index', 'agg', 'groupby', 'items', 'fillna', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'apply', 'median', 'apply', 'apply', 'drop', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'groupby', 'apply', 'apply', 'apply', 'sum', 'std', 'sum', 'multiply', 'sum', 'sum', 'sum', 'reset_index', 'unique', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'drop', 'concat', 'reset_index', 'sort_values', 'agg', 'groupby', 'mean', 'array', 'drop', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 're', 'copy', 'string', 'optuna'] ['tqdm', 'LGBMRegressor', 'model_selection', 'metrics', 'LabelEncoder', 'MinMaxScaler', 'kurtosis', 'skew', 'linregress', 'jensenshannon', 'stopwords', 'KFold', 'log_evaluation', 'early_stopping', 'Counter']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'array', 'min', 'unique', 'std', 'multiply'], 'pandas': ['isna', 'read_csv', 'concat', 'unique', 'array', 'merge'], 'matplotlib': ['hist'], 'seaborn': [], 're': [], 'tqdm': [], 'copy': [], 'lightgbm': [], 'sklearn': [], 'scipy': [], 'string': [], 'nltk': [], 'optuna': [], 'collections': ['items']} axis_0: 1, axis_1: 5
titanic-problem-tutorial.py : ['join', 'read_csv', 'head', 'read_csv', 'head', 'info', 'info', 'describe', 'describe', 'round', 'corr', 'drop', 'concat', 'sum', 'isnull', 'isnull', 'fillna', 'transform', 'transform', 'array', 'transform', 'transform', 'transform', 'transform', 'mean', 'std', 'mean', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'os'] ['GridSearchCV', 'confusion_matrix', 'accuracy_score', 'cross_val_score', 'accuracy_score', 'make_pipeline', 'SimpleImputer', 'ColumnTransformer', 'OneHotEncoder', 'LabelEncoder', 'train_test_split', 'StandardScaler', 'PCA', 'LogisticRegression', 'RidgeClassifier', 'LGBMClassifier', 'GaussianNB', 'XGBClassifier', 'RandomForestClassifier', 'KNeighborsClassifier', 'SVC', 'DecisionTreeClassifier']Dict:{'numpy': ['mean', 'sum', 'array', 'round', 'info', 'std'], 'pandas': ['concat', 'array', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'imblearn': [], 'warnings': [], 'os': [], 'lightgbm': [], 'xgboost': []} axis_0: 0, axis_1: 1
feature-engineering-for-march-madness.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'apply', 'head', 'head', 'head', 'where', 'where', 'where', 'head', 'head', 'head', 'set_index', 'to_dict', 'apply', 'head', 'head', 'median', 'groupby', 'head', 'to_dict', 'apply', 'apply', 'tail', 'groupby', 'set_index', 'describe', 'fillna', 'concat', 'value_counts', 'value_counts', 'to_dict', 'get', 'get', 'apply', 'copy', 'concat', 'sort_values', 'apply', 'set_index', 'sample', 'to_dict', 'apply', 'get', 'apply', 'fillna', 'astype', 'astype', 'concat', 'head'] ['pandas', 'numpy', 'warnings'] ['Counter']Dict:{'collections': ['get', 'copy'], 'pandas': ['concat', 'read_csv', 'value_counts'], 'numpy': ['where', 'median', 'copy'], 'warnings': []} axis_0: 0, axis_1: 8
rekaggle-favorita-timeseries-feature-engineering.py : ['join', 'read_csv', 'set_index', 'read_csv', 'set_index', 'read_csv', 'set_index', 'read_csv', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'fillna', 'unstack', 'set_index', 'head', 'head', 'fillna', 'unstack', 'head', 'fillna', 'reindex', 'head', 'concat', 'head', 'fillna', 'unstack', 'set_index', 'head', 'head', 'reindex', 'reindex', 'head', 'head', 'sum', 'groupby', 'head', 'sum', 'groupby', 'head', 'reset_index', 'head', 'head', 'head', 'sum', 'groupby', 'head', 'reset_index', 'head', 'head', 'sum', 'groupby', 'head', 'date_range', 'date_range', 'date_range', 'sum', 'sum', 'sum', 'sum', 'mean', 'replace', 'sum', 'replace', 'mean', 'replace', 'sum', 'replace', 'mean', 'median', 'min', 'max', 'std', 'sum', 'mean', 'diff', 'mean', 'diff', 'sum', 'mean', 'median', 'min', 'max', 'std', 'sum', 'max', 'max', 'sum', 'max', 'max', 'sum', 'max', 'max', 'astype', 'mean', 'mean', 'date_range', 'head', 'head', 'head', 'head', 'mean', 'replace', 'head', 'diff', 'head', 'mean', 'diff', 'head', 'head', 'head', 'sum', 'head', 'max', 'head', 'max', 'head', 'head', 'max', 'head', 'head', 'date_range', 'head', 'head', 'reset_index', 'reindex', 'reset_index', 'reindex', 'concat', 'reset_index', 'reset_index', 'concat', 'head', 'join', 'join', 'reset_index', 'reindex', 'reset_index', 'reindex', 'concat', 'reset_index', 'reset_index', 'join', 'join', 'reset_index', 'reindex', 'reset_index', 'reindex', 'concat', 'reset_index', 'reset_index'] ['os', 'gc', 'pandas', 'numpy', 'lightgbm', 'py7zr', 'pickle', 'pickle'] ['date', 'timedelta', 'mean_squared_error', 'LabelEncoder']Dict:{'os': ['replace'], 'datetime': ['min', 'max'], 'gc': [], 'pandas': ['date_range', 'concat', 'read_csv'], 'numpy': ['mean', 'median', 'max', 'sum', 'min', 'diff', 'std'], 'sklearn': [], 'lightgbm': [], 'py7zr': [], 'pickle': []} axis_0: 2, axis_1: 44
rf-w-basic-feature-engineering.py : ['read_csv', 'head', 'read_csv', 'head', 'info', 'info', 'concat', 'rename', 'sum', 'isnull', 'rename', 'round', 'sum', 'isnull', 'count', 'isnull', 'rename', 'sum', 'isnull', 'rename', 'round', 'sum', 'isnull', 'count', 'isnull', 'fillna', 'mode', 'apply', 'apply', 'head', 'sort_values', 'median', 'groupby', 'rename', 'value_counts', 'concat', 'apply', 'groupby', 'fillna', 'mean', 'median', 'groupby', 'fillna', 'boxplot', 'median', 'groupby', 'round', 'apply', 'groupby', 'fillna', 'mean', 'fillna', 'concat', 'rename', 'sum', 'isnull', 'rename', 'sum', 'isnull', 'apply', 'qcut', 'value_counts', 'mean', 'groupby', 'apply', 'apply', 'mean', 'groupby', 'apply', 'value_counts', 'groupby', 'round', 'sum', 'round', 'sum', 'value_counts', 'groupby', 'round', 'sum', 'round', 'sum', 'value_counts', 'groupby', 'round', 'sum', 'round', 'sum', 'concat', 'rename', 'value_counts', 'rename', 'value_counts', 'head', 'value_counts', 'groupby', 'round', 'sum', 'round', 'sum', 'quantile', 'value_counts', 'qcut', 'round', 'round', 'round', 'max', 'head', 'value_counts', 'groupby', 'round', 'sum', 'round', 'sum', 'apply', 'head', 'value_counts', 'groupby', 'round', 'sum', 'round', 'sum', 'apply', 'drop', 'head', 'astype', 'select_dtypes', 'drop', 'transform', 'head', 'drop', 'head', 'corr', 'read_csv', 'rename', 'concat', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['StandardScaler', 'OneHotEncoder', 'ColumnTransformer', 'Pipeline', 'GridSearchCV', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'median', 'quantile', 'max', 'sum', 'round', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'qcut'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': ['apply'], 'os': ['rename']} axis_0: 0, axis_1: 8
ps3e23-eda-feature-engineering-ensemble.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'apply', 'dropna', 'copy', 'copy', 'copy', 'concat', 'reset_index', 'head', 'round', 'count', 'round', 'count', 'round', 'count', 'value_counts', 'nunique', 'nunique', 'max', 'max', 'min', 'min', 'concat', 'get_dummies', 'value_counts', 'idxmin', 'drop', 'concat', 'duplicated', 'reset_index', 'drop', 'array', 'array', 'isnull', 'copy', 'drop', 'concat', 'reset_index', 'sum', 'isna', 'fillna', 'mean', 'copy', 'copy', 'drop', 'drop', 'drop', 'items', 'array', 'array', 'nunique', 'nunique', 'copy', 'copy', 'drop', 'concat', 'transform', 'min', 'transform', 'min', 'transform', 'transform', 'reset_index', 'concat', 'concat', 'mean', 'mean', 'mean', 'mean', 'copy', 'copy', 'to_dict', 'value_counts', 'items', 'keys', 'replace', 'replace', 'nunique', 'drop', 'drop', 'copy', 'copy', 'copy', 'to_dict', 'value_counts', 'map', 'map', 'to_dict', 'value_counts', 'keys', 'astype', 'replace', 'astype', 'replace', 'drop', 'drop', 'nunique', 'astype', 'astype', 'drop', 'drop', 'astype', 'mean', 'mean', 'mean', 'corr', 'drop', 'drop', 'transform', 'array', 'array', 'astype', 'mean', 'mean', 'mean', 'astype', 'astype', 'mean', 'corrwith', 'drop', 'max', 'abs', 'max', 'abs', 'max', 'abs', 'drop', 'drop', 'nunique', 'abs', 'corr', 'transform', 'transform', 'concat', 'concat', 'array', 'array', 'astype', 'mean', 'copy', 'copy', 'transform', 'copy', 'copy', 'drop', 'drop', 'to_csv', 'to_csv', 'drop', 'astype', 'copy', 'mean', 'mean', 'reset_index', 'reset_index', 'reset_index', 'unique', 'array', 'add', 'add', 'add', 'add', 'add', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'array', 'array', 'items', 'array', 'array', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'read_csv', 'to_csv', 'head', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'min', 'max', 'min', 'copy', 'to_csv'] ['sklearn', 'numpy', 'os', 'datetime', 'pandas', 'matplotlib.pyplot', 'missingno', 'seaborn', 'concurrent.futures', 'random', 'gc', 'xgboost', 'statsmodels.api', 'math', 'optuna', 'xgboost', 'lightgbm', 're', 'warnings', 'tensorflow', 'keras'] ['PrettyTable', 'tqdm', 'tqdm', 'deepcopy', 'partial', 'combinations', 'randint', 'uniform', 'f_classif', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'FunctionTransformer', 'metrics', 'GridSearchCV', 'RandomizedSearchCV', 'combinations', 'SimpleImputer', 'train_test_split', 'cross_val_score', 'mean_squared_error', 'mean_squared_log_error', 'roc_auc_score', 'accuracy_score', 'f1_score', 'precision_recall_curve', 'log_loss', 'KMeans', 'KElbowVisualizer', 'OptimalK', 'stats', 'ttest_ind', 'boxcox', 'variance_inflation_factor', 'BaseEstimator', 'TransformerMixin', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StratifiedKFold', 'KFold', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'AdaBoostClassifier', 'BalancedRandomForestClassifier', 'make_classification', 'GaussianNB', 'enable_hist_gradient_boosting', 'DecisionTreeClassifier', 'LogisticRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'NuSVC', 'SVC', 'KNeighborsClassifier', 'KNNImputer', 'LogisticRegression', 'MLPClassifier', 'Pool', 'TfidfVectorizer', 'PCA', 'TruncatedSVD', 'Sequential', 'Dense', 'Activation', 'LeakyReLU', 'PReLU', 'ELU', 'Dropout']Dict:{'sklearn': ['transform'], 'numpy': ['mean', 'max', 'add', 'abs', 'sum', 'array', 'round', 'min', 'unique', 'std', 'copy'], 'os': ['replace'], 'datetime': [], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'array'], 'matplotlib': [], 'missingno': [], 'prettytable': ['copy'], 'seaborn': [], 'tqdm': [], 'concurrent': [], 'copy': [], 'functools': [], 'itertools': [], 'random': [], 'gc': [], 'xgboost': [], 'yellowbrick': [], 'gap_statistic': [], 'scipy': [], 'statsmodels': [], 'math': [], 'optuna': [], 'lightgbm': [], 'category_encoders': [], 'imblearn': [], 'catboost': [], 're': [], 'warnings': [], 'tensorflow': ['add', 'abs', 'concat', 'round', 'unique'], 'keras': []} axis_0: 7, axis_1: 5
predict-with-daigt-v3-train-dataset.py : ['read_csv', 'dropna', 'reset_index', 'read_csv', 'concat', 'value_counts', 'to_csv'] ['numpy', 'pandas'] ['LogisticRegression', 'TfidfVectorizer', 'VotingClassifier', 'SGDClassifier']Dict:{'numpy': [], 'pandas': ['concat', 'read_csv', 'value_counts'], 'sklearn': []} axis_0: 1, axis_1: 0
another-1-08-lb-no-leak.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'min', 'max', 'array', 'concat', 'reset_index', 'to_datetime', 'set_index', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'update', 'mean', 'groupby', 'fillna', 'update', 'reset_index', 'drop', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'sort_values', 'reset_index', 'to_datetime', 'replace', 'replace', 'replace', 'astype', 'isin', 'drop', 'merge', 'merge', 'read_csv', 'drop', 'reset_index', 'clip', 'read_csv', 'drop', 'merge', 'read_csv', 'merge', 'mean', 'read_csv', 'clip', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'lightgbm', 'datetime', 'gc', 'os'] ['LabelEncoder', 'KFold', 'StratifiedKFold', 'GroupKFold', 'tqdm_notebook', 'feels_like', 'Temp', 'metrics', 'is_datetime64_any_dtype', 'is_categorical_dtype']Dict:{'pandas': [], 'numpy': ['mean', 'max', 'sum', 'min', 'clip', 'isin', 'array'], 'matplotlib': [], 'lightgbm': [], 'sklearn': [], 'tqdm': ['update'], 'datetime': [], 'meteocalc': [], 'gc': [], 'os': ['replace']} axis_0: 1, axis_1: 3
feature-engineering-tps-2.py : ['read_csv', '__init__', 'drop', 'join', 'drop', 'skew', 'drop', 'skew', 'keys', 'replace', 'replace', 'keys', 'keys', 'keys', 'keys', 'drop', 'to_csv', 'copy', 'copy', 'copy', 'copy', 'drop', 'concat', 'concat'] ['pandas', 'os', 'numpy', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'matplotlib', 'optuna', 'json'] ['train_test_split', 'StandardScaler', 'Normalizer', 'RobustScaler', 'PowerTransformer', 'mean_squared_error', 'r2_score', 'Ridge', 'BayesianRidge', 'LinearRegression', 'Lasso', 'enable_hist_gradient_boosting', 'RandomForestRegressor', 'StackingRegressor', 'HistGradientBoostingRegressor', 'RepeatedKFold', 'KFold']Dict:{'pandas': ['concat', 'read_csv'], 'os': ['replace'], 'numpy': ['copy'], 'matplotlib': [], 'seaborn': [], 'sklearn': ['__init__'], 'xgboost': [], 'optuna': [], 'json': []} axis_0: 0, axis_1: 5
practical-machine-learning-with-pytorch-tbu.py : ['array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'add', 'subtract', 'multiply', 'array', 'array', 'dot', 'array', 'sum', 'sum', 'sum', 'array', 'array', 'array', 'array', 'array', 'array', 'squeeze', 'array', 'read_csv', 'head', 'describe', 'hist', 'unique', 'head', 'head', 'head', 'sort_values', 'groupby', 'mean', 'head', 'any', 'isnull', 'dropna', 'reset_index', 'head', 'drop', 'head', 'astype', 'map', 'astype', 'map', 'dropna', 'head', 'apply', 'head', 'head', 'to_csv', 'array', 'head', 'transform', 'transform', 'transform', 'transform', 'mean', 'mean', 'std', 'std', 'mean', 'mean', 'array', 'transform', 'head', 'sum', 'mean', 'mean', 'head', 'get_dummies', 'head', 'read_csv', 'head', 'dropna', 'drop', 'get_dummies', 'head', 'drop', 'drop', 'transform', 'transform', 'mean', 'std'] ['numpy', 'pandas', 'matplotlib.pyplot', 'numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib.pyplot', 'numpy', 'pandas', 'urllib'] ['Namespace', 'SGDRegressor', 'StandardScaler', 'train_test_split', 'Namespace', 'SGDClassifier', 'StandardScaler', 'train_test_split']Dict:{'numpy': ['mean', 'squeeze', 'any', 'add', 'sum', 'subtract', 'array', 'unique', 'dot', 'std', 'multiply'], 'pandas': ['read_csv', 'isnull', 'get_dummies', 'unique', 'array'], 'argparse': [], 'matplotlib': ['hist'], 'sklearn': [], 'urllib': []} axis_0: 7, axis_1: 7
features-application-data-open-solution.py : ['read_csv', 'head', 'unique', 'unique', 'value_counts', 'replace', 'value_counts', 'corr', 'sort_values', 'groupby', 'join', 'merge', 'rename', 'reset_index', 'agg', 'corr', 'sort_values', 'join', 'abs', 'corr', 'sort_values', 'replace', 'isnull', 'describe', 'astype', 'corr', 'sort_values', 'astype', 'corr', 'sort_values'] ['numpy', 'pandas', 'seaborn'] ['tqdm_notebook', 'joblib']Dict:{'numpy': ['abs', 'unique'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'unique', 'merge'], 'tqdm': [], 'sklearn': [], 'seaborn': []} axis_0: 0, axis_1: 1
riiid-submit.py : ['items', 'read_pickle', 'head', 'reset_index', 'sum', 'groupby', 'astype', 'head', 'read_pickle', 'head', 'read_sql', 'items', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'apply', 'join', 'join'] ['gc', 'json', 'pandas', 'sqlite3', 'riiideducation', 'time', 'xgboost', 'sys'] ['Path']Dict:{'gc': [], 'json': [], 'pandas': ['read_pickle', 'read_sql'], 'pathlib': [], 'sqlite3': [], 'riiideducation': [], 'time': [], 'xgboost': [], 'sys': []} axis_0: 0, axis_1: 1
naive-bayes-probabilistic-ml-titanic-survival.py : ['read_csv', 'read_csv', 'head', 'describe', 'replace', 'replace', 'qcut', 'query', 'query', 'dropna', 'head', 'drop', 'drop', 'head', 'fillna', 'mean', 'astype', 'to_csv', 'head'] ['warnings', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] ['pearsonr', 'GaussianNB', 'train_test_split', 'accuracy_score', 'recall_score', 'precision_score']Dict:{'warnings': [], 'numpy': ['mean'], 'pandas': ['qcut', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'scipy': [], 'sklearn': []} axis_0: 1, axis_1: 2
ion-switching-advanced-eda-and-prediction.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'head', 'head', 'describe', 'describe', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'sum', 'isna', 'nunique', 'memory_usage', 'sum', 'sum', 'sum', 'memory_usage', 'sum', 'isna', 'nunique', 'memory_usage', 'mean', 'array', 'reset_index', 'concat', 'astype', 'reset_index', 'sort_values', 'apply', 'join', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'mean', 'abs', 'diff', 'transform', 'groupby', 'median', 'abs', 'diff', 'transform', 'groupby', 'max', 'abs', 'transform', 'groupby', 'min', 'abs', 'transform', 'groupby', 'mean', 'abs', 'transform', 'groupby', 'median', 'abs', 'mean', 'mean', 'rolling', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'mean', 'abs', 'diff', 'transform', 'groupby', 'median', 'abs', 'diff', 'transform', 'groupby', 'max', 'abs', 'transform', 'groupby', 'min', 'abs', 'transform', 'groupby', 'mean', 'abs', 'transform', 'groupby', 'median', 'abs', 'mean', 'mean', 'rolling', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'transform', 'max', 'abs', 'transform', 'max', 'abs', 'astype', 'copy', 'query', 'copy', 'query', 'astype', 'copy', 'copy', 'astype', 'round', 'clip', 'astype', 'round', 'clip', 'isin', 'isin', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'astype', 'median', 'to_csv'] ['os', 'gc', 'numpy', 'pandas', 'time', 'math', 'scipy', 'seaborn', 'matplotlib.pyplot', 'lightgbm'] ['jit', 'log', 'floor', 'signal', 'butter', 'deconvolve', 'KDTree', 'Path', 'shuffle', 'colors', 'Normalize', 'tqdm', 'GroupKFold', 'KFold', 'cohen_kappa_score', 'accuracy_score', 'mean_squared_error', 'f1_score']Dict:{'os': [], 'gc': [], 'numpy': ['mean', 'median', 'max', 'abs', 'sum', 'round', 'min', 'clip', 'isin', 'diff', 'array', 'copy'], 'pandas': ['concat', 'array', 'isna', 'read_csv'], 'time': [], 'math': [], 'numba': [], 'scipy': [], 'sklearn': [], 'pathlib': [], 'seaborn': [], 'matplotlib': ['clip'], 'lightgbm': [], 'tqdm': []} axis_0: 1, axis_1: 2
tpsjan22-01-eda-which-makes-sense.py : ['read_csv', 'read_csv', 'to_datetime', 'set_index', 'count', 'groupby', 'min', 'max', 'sum', 'isna', 'agg', 'groupby', 'min', 'max', 'unstack', 'mean', 'groupby', 'unstack', 'mean', 'groupby', 'unstack', 'mean', 'groupby', 'groupby', 'hist', 'groupby', 'groupby', 'mean', 'groupby', 'groupby', 'sum', 'resample', 'min', 'max', 'groupby', 'sum', 'resample', 'mean', 'groupby', 'min', 'max', 'groupby', 'sum', 'resample', 'max', 'groupby', 'sum', 'resample', 'sum', 'resample', 'squeeze', 'squeeze', 'groupby', 'mean', 'groupby', 'max', 'groupby', 'reset_index', 'mean', 'groupby', 'date_range'] ['pandas', 'numpy', 'dateutil.easter', 'matplotlib.pyplot'] ['MaxNLocator', 'FormatStrFormatter', 'PercentFormatter', 'LinearRegression', 'TransformedTargetRegressor']Dict:{'pandas': ['isna', 'to_datetime', 'date_range', 'read_csv'], 'numpy': ['mean', 'squeeze', 'max', 'sum', 'min'], 'dateutil': [], 'matplotlib': [], 'sklearn': []} axis_0: 0, axis_1: 0
mae-1-337-with-featureengineering-xgb.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'transform', 'transform', 'concat', 'drop', 'drop_duplicates', 'concat', 'drop', 'drop', 'drop', 'describe', 'reset_index', 'astype', 'drop', 'reset_index', 'drop', 'concat', 'agg', 'groupby', 'reset_index', 'sort_values', 'mean', 'cut', 'reset_index', 'astype', 'drop', 'reset_index', 'drop', 'mean'] ['numpy', 'pandas', 'os', 'gc', 'math', 'random', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'optuna', 'warnings'] ['mean_absolute_error', 'mean_squared_error', 'roc_auc_score', 'train_test_split', 'cross_val_predict', 'KFold', 'LabelEncoder', 'StandardScaler', 'RandomForestClassifier', 'RandomForestRegressor', 'CatBoostRegressor', 'Pool']Dict:{'numpy': ['mean'], 'pandas': ['concat', 'cut', 'read_csv'], 'os': [], 'gc': [], 'math': [], 'random': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'catboost': [], 'lightgbm': [], 'xgboost': [], 'optuna': [], 'warnings': []} axis_0: 3, axis_1: 6
predicting-sales-tutorial.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'value_counts', 'value_counts', 'value_counts', 'head', 'sort_values', 'head', 'sort_values', 'sort_values', 'head', 'median', 'value_counts', 'nunique', 'nunique', 'unique', 'unique', 'map', 'unique', 'map', 'drop', 'head', 'nunique', 'nunique', 'unique', 'unique', 'unique', 'isin', 'unique', 'isin', 'map', 'map', 'head', 'to_datetime', 'unique', 'unique', 'unique', 'unique', 'array', 'array', 'head', 'astype', 'astype', 'unique', 'unique', 'unique', 'array', 'reset_index', 'rename', 'sum', 'groupby', 'head', 'fillna', 'merge', 'clip', 'sort_values', 'head', 'insert', 'head', 'drop', 'merge', 'head', 'merge', 'drop', 'head', 'merge', 'drop', 'head', 'copy', 'merge', 'tail', 'map', 'map', 'any', 'isnull', 'fillna', 'reset_index', 'to_feather', 'drop', 'drop', 'drop', 'drop', 'drop', 'to_csv', 'to_json', 'join', 'read_csv', 'reset_index', 'rename', 'sum', 'groupby', 'head', 'replace', 'head', 'copy', 'head', 'reset_index', 'rename', 'sum', 'groupby', 'replace', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'altair', 'os', 'gc', 'xgboost', 'gc', 'json'] ['preprocessing', 'product', 'tqdm_notebook', 'rcParams', 'FileLinks', 'HTML']Dict:{'numpy': ['median', 'any', 'sum', 'array', 'unique', 'clip', 'isin', 'insert', 'copy'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'unique', 'array', 'merge', 'to_datetime'], 'matplotlib': ['copy'], 'seaborn': [], 'altair': [], 'os': ['rename', 'replace'], 'sklearn': [], 'itertools': [], 'tqdm': [], 'gc': [], 'xgboost': [], 'IPython': [], 'json': [], '': [], '#': [], 'need': [], 'it': [], 'for': []} axis_0: 0, axis_1: 11
v7-estimation-of-mulliken-charges-with-open-babel.py : ['read_csv', 'head', 'unique', 'unique', 'set_index', 'sort_index', 'set_index', 'sort_index', 'head', 'sort_values', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'os', 'openbabel'] ['pearsonr', 'tqdm_notebook']Dict:{'numpy': ['unique'], 'scipy': [], 'pandas': ['unique', 'read_csv'], 'tqdm': [], 'seaborn': [], 'matplotlib': [], 'os': [], 'openbabel': []} axis_0: 0, axis_1: 0
ps4e1-advanced-feature-engineering-ensemble.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'drop', 'copy', 'copy', 'copy', 'concat', 'dropna', 'reset_index', 'head', 'round', 'count', 'round', 'count', 'round', 'count', 'value_counts', 'nunique', 'nunique', 'nunique', 'crosstab', 'max', 'max', 'min', 'min', 'concat', 'get_dummies', 'value_counts', 'idxmin', 'drop', 'concat', 'duplicated', 'reset_index', 'drop', 'array', 'array', 'isnull', 'copy', 'drop', 'concat', 'reset_index', 'sum', 'isna', 'fillna', 'mean', 'copy', 'copy', 'drop', 'drop', 'drop', 'array', 'array', 'nunique', 'copy', 'copy', 'drop', 'concat', 'transform', 'min', 'transform', 'min', 'transform', 'transform', 'reset_index', 'concat', 'concat', 'mean', 'mean', 'mean', 'mean', 'transform', 'transform', 'concat', 'concat', 'drop', 'drop', 'nunique', 'nunique', 'astype', 'astype', 'unique', 'unique', 'unique', 'unique', 'apply', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'apply', 'apply', 'copy', 'copy', 'to_dict', 'value_counts', 'items', 'keys', 'replace', 'replace', 'nunique', 'drop', 'drop', 'copy', 'copy', 'copy', 'to_dict', 'value_counts', 'map', 'map', 'to_dict', 'value_counts', 'keys', 'astype', 'replace', 'astype', 'replace', 'nunique', 'drop', 'drop', 'nunique', 'astype', 'astype', 'drop', 'drop', 'astype', 'mean', 'mean', 'mean', 'corr', 'drop', 'drop', 'transform', 'array', 'array', 'astype', 'mean', 'mean', 'mean', 'astype', 'astype', 'mean', 'corrwith', 'drop', 'max', 'abs', 'max', 'abs', 'max', 'abs', 'drop', 'drop', 'nunique', 'abs', 'corr', 'transform', 'transform', 'concat', 'concat', 'array', 'array', 'astype', 'mean', 'copy', 'copy', 'transform', 'drop', 'copy', 'copy', 'drop', 'drop', 'drop', 'copy', 'mean', 'mean', 'reset_index', 'reset_index', 'reset_index', 'unique', 'array', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'array', 'array', 'items', 'array', 'array', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'read_csv', 'to_csv', 'head', 'read_csv', 'read_csv', 'copy', 'to_csv', 'head'] ['sklearn', 'numpy', 'os', 'datetime', 'pandas', 'matplotlib.pyplot', 'missingno', 'seaborn', 'concurrent.futures', 'random', 'gc', 'xgboost', 'statsmodels.api', 'math', 'optuna', 'cmaes', 'xgboost', 'lightgbm', 're', 'warnings', 'tensorflow', 'keras'] ['PrettyTable', 'tqdm', 'tqdm', 'deepcopy', 'partial', 'combinations', 'randint', 'uniform', 'f_classif', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'FunctionTransformer', 'metrics', 'GridSearchCV', 'RandomizedSearchCV', 'combinations', 'SimpleImputer', 'train_test_split', 'cross_val_score', 'mean_squared_error', 'mean_squared_log_error', 'roc_auc_score', 'accuracy_score', 'f1_score', 'precision_recall_curve', 'log_loss', 'KMeans', 'KElbowVisualizer', 'OptimalK', 'stats', 'ttest_ind', 'boxcox', 'variance_inflation_factor', 'BaseEstimator', 'TransformerMixin', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StratifiedKFold', 'KFold', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'AdaBoostClassifier', 'BalancedRandomForestClassifier', 'make_classification', 'GaussianNB', 'enable_hist_gradient_boosting', 'DecisionTreeClassifier', 'LogisticRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'NuSVC', 'SVC', 'KNeighborsClassifier', 'KNNImputer', 'LogisticRegression', 'MLPClassifier', 'Pool', 'TfidfVectorizer', 'PCA', 'TruncatedSVD', 'Sequential', 'Dense', 'Activation', 'LeakyReLU', 'PReLU', 'ELU', 'Dropout']Dict:{'sklearn': ['transform'], 'numpy': ['mean', 'max', 'add', 'abs', 'sum', 'array', 'round', 'min', 'unique', 'std', 'copy'], 'os': ['replace'], 'datetime': [], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'array', 'crosstab'], 'matplotlib': [], 'missingno': [], 'prettytable': ['copy'], 'seaborn': [], 'tqdm': [], 'concurrent': [], 'copy': [], 'functools': [], 'itertools': [], 'random': [], 'gc': [], 'xgboost': [], 'yellowbrick': [], 'gap_statistic': [], 'scipy': [], 'statsmodels': [], 'math': [], 'optuna': [], 'cmaes': [], 'lightgbm': [], 'category_encoders': [], 'imblearn': [], 'catboost': [], 're': [], 'warnings': [], 'tensorflow': ['add', 'abs', 'concat', 'round', 'unique'], 'keras': []} axis_0: 7, axis_1: 5
titanic-simple-solution-top-12.py : ['read_csv', 'read_csv', 'head', 'sum', 'isnull', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'agg', 'groupby', 'agg', 'groupby', 'hist', 'add', 'map', 'map', 'head', 'drop', 'head', 'value_counts', 'map', 'map', 'map', 'head', 'median', 'median', 'isnull', 'isnull', 'sum', 'isnull', 'dropna', 'sum', 'isnull', 'head', 'describe', 'drop', 'head', 'add', 'map', 'map', 'head', 'drop', 'map', 'map', 'map', 'head', 'sum', 'isnull', 'median', 'median', 'isnull', 'isnull', 'fillna', 'median', 'sum', 'isnull', 'isnull', 'fillna', 'sum', 'isnull', 'head', 'head', 'to_csv', 'read_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['train_test_split', 'LogisticRegression', 'accuracy_score', 'confusion_matrix']Dict:{'pandas': ['value_counts', 'read_csv', 'isnull'], 'numpy': ['median', 'sum', 'add'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 3
foursquare-lightgbm-features-training-inference.py : ['read_csv', 'info', 'head', 'read_csv', 'info', 'head', 'astype', 'replace', 'astype', 'astype', 'replace', 'astype', 'astype', 'replace', 'astype', 'head', 'head', 'head', 'read_pickle', 'memory_usage', 'head', 'info', 'value_counts', 'nunique', 'nunique', 'head', 'value_counts', 'nunique', 'head', 'value_counts', 'nunique', 'head', 'value_counts', 'nunique', 'head', 'value_counts', 'nunique', 'head', 'value_counts', 'nunique', 'head', 'value_counts', 'nunique', 'head', 'value_counts', 'nunique', 'head', 'value_counts', 'nunique', 'head', 'value_counts', 'nunique', 'head', 'value_counts', 'nunique', 'astype', 'astype', 'apply', 'get', 'value_counts', 'value_counts', 'max', 'astype', 'to_dict', 'squeeze', 'set_index', 'nunique', 'nunique', 'astype', 'fillna', 'astype', 'apply', 'get', 'astype', 'fillna', 'astype', 'apply', 'get', 'add', 'array', 'to_dict', 'get', 'astype', 'apply', 'astype', 'apply', 'mean', 'mean', 'dot', 'describe', 'stack', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'get', 'astype', 'apply', 'get', 'array', 'array', 'astype', 'astype', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'apply', 'drop', 'astype', 'join', 'value_counts', 'describe', 'groupby', 'keys', 'get', 'get', 'sort_values', 'to_csv', 'max', 'max', 'concat', 'add_suffix', 'add_suffix', 'head', 'iterrows', 'query', 'squeeze', 'squeeze', 'describe', 'iterrows', 'join', 'head', 'to_csv'] ['numpy', 'pandas', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'tensorflow_hub', 'tensorflow', 'tensorflow_addons', 'geopy.distance', 'reverse_geocode', 'math', 'scipy', 'numba', 'warnings', 'Levenshtein', 'itertools', 'gc', 'psutil', 'sys', 'pickle', 'matplotlib'] ['backend', 'distance', 'tqdm', 'train_test_split', 'distance', 'metrics', 'cpu_count', 'BallTree', 'SequenceMatcher']Dict:{'numpy': ['mean', 'stack', 'squeeze', 'max', 'add', 'dot', 'info', 'array'], 'pandas': ['read_csv', 'concat', 'value_counts', 'read_pickle', 'array'], 'lightgbm': [], 'matplotlib': [], 'seaborn': [], 'tensorflow_hub': [], 'tensorflow': [], 'tensorflow_addons': [], 'Levenshtein': [], 'tqdm': [], 'sklearn': ['query'], 'scipy': [], 'multiprocessing': [], 'difflib': [], 'geopy': [], 'reverse_geocode': [], 'math': [], 'numba': [], 'warnings': [], 'itertools': ['groupby'], 'gc': [], 'psutil': [], 'sys': [], 'pickle': []} axis_0: 1, axis_1: 5
eda-feature-engineering-and-modeling-4th-359.py : ['read_csv', 'read_csv', 'read_csv', 'array', 'min', 'min', 'max', 'max', 'where', 'where', 'sum', 'filter', 'sum', 'filter', 'array', 'sort_index', 'value_counts', 'sort_values', 'sum', 'sum', 'sum', 'read_csv', 'read_csv', 'read_csv', 'array', 'concat', 'abs', 'mean', 'std', 'max', 'min', 'abs', 'sum', 'sum', 'sum', 'sum', 'fillna', 'pivot_table', 'reset_index', 'apply', 'sum', 'sum', 'sum', 'filter', 'merge', 'fillna', 'fillna', 'sum', 'fillna', 'pivot_table', 'reset_index', 'apply', 'sum', 'sum', 'sum', 'filter', 'merge', 'fillna', 'fillna', 'select_dtypes', 'select_dtypes', 'astype', 'astype', 'filter', 'drop', 'drop', 'drop', 'transform', 'transform', 'transform', 'transform', 'astype', 'astype', 'astype', 'astype', 'filter', 'filter', 'drop', 'drop', 'array', 'mean', 'filter', 'drop', 'transform', 'drop', 'transform', 'drop', 'transform', 'transform', 'mean', 'filter', 'drop', 'mean', 'astype', 'concat', 'astype', 'concat', 'reset_index', 'mean', 'mean', 'drop', 'reset_index', 'drop', 'concat', 'drop', 'filter', 'concat', 'drop', 'filter', 'select_dtypes', 'astype', 'astype', 'astype', 'astype', 'mean', 'read_csv', 'read_csv', 'drop', 'drop', 'drop', 'drop', 'drop', 'transform', 'concat', 'reset_index', 'reset_index', 'concat', 'reset_index', 'reset_index', 'to_csv', 'to_csv', 'read_csv', 'mean', 'mean', 'mean', 'astype', 'astype', 'read_csv', 'read_csv', 'to_csv', 'mean', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'sklearn', 'lightgbm', 'os', 'gc', 'warnings', 'gc', 'numpy', 'pandas', 'os', 'seaborn', 'lightgbm'] ['accuracy_score', 'confusion_matrix', 'RandomForestClassifier', 'StratifiedKFold', 'KNeighborsClassifier', 'StandardScaler', 'PCA', 'LogisticRegression', 'DecisionTreeClassifier', 'MinMaxScaler', 'CountVectorizer', 'StratifiedKFold', 'StratifiedShuffleSplit', 'Sequential', 'Dense', 'Activation', 'Dropout', 'SGD', 'datasets', 'train_test_split', 'tqdm', 'combinations', 'chain', 'datetime', 'gaussian_kde', 'Pool', 'pyplot', 'StratifiedKFold', 'GridSearchCV', 'RandomForestClassifier', 'LogisticRegression', 'Pipeline', 'StandardScaler', 'PCA', 'SVC']Dict:{'numpy': ['mean', 'std', 'max', 'abs', 'sum', 'where', 'min', 'array'], 'pandas': ['read_csv', 'pivot_table', 'concat', 'value_counts', 'array', 'merge'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'keras': [], 'lightgbm': [], 'tqdm': [], 'os': [], 'gc': [], 'itertools': [], 'datetime': ['min', 'max'], 'scipy': [], 'warnings': [], 'multiprocessing': []} axis_0: 1, axis_1: 41
classification-cnn-digit-recognizer.py : ['join', 'read_csv', 'read_csv', 'drop', 'info', 'describe', 'describe', 'head', 'head', 'mean', 'std', 'astype', 'astype', 'astype', 'astype', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'tensorflow'] ['keras', 'Dense', 'Flatten', 'train_test_split', 'GaussianNB', 'accuracy_score', 'RandomForestClassifier', 'model_selection', 'Sequential', 'Dense', 'Dropout', 'Lambda', 'Flatten', 'Conv2D', 'MaxPooling2D', 'train_test_split', 'backend', 'ImageDataGenerator']Dict:{'numpy': ['mean', 'info', 'std'], 'pandas': ['read_csv'], 'os': [], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'tensorflow': [], 'sklearn': [], 'keras': []} axis_0: 1, axis_1: 3
titanic-feature-engineering-and-random-forests.py : ['read_csv', 'read_csv', 'head', 'sum', 'isnull', 'sum', 'isnull', 'value_counts', 'value_counts', 'unique', 'replace', 'replace', 'replace', 'replace', 'sum', 'isnull', 'head', 'map', 'fillna', 'unique', 'head', 'map', 'astype', 'map', 'fillna', 'apply', 'astype', 'map', 'fillna', 'apply', 'head', 'sum', 'isnull', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'fillna', 'fillna', 'fillna', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'transform', 'groupby', 'corr', 'apply', 'apply', 'transform', 'transform', 'head', 'get_dummies', 'get_dummies', 'sort_values', 'mean', 'mean', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['RandomForestClassifier', 'StandardScaler', 'f1_score', 'confusion_matrix', 'classification_report', 'roc_auc_score', 'roc_curve', 'auc', 'accuracy_score', 'precision_score', 'recall_score', 'train_test_split', 'learning_curve', 'cross_val_predict', 'cross_val_score', 'cross_validate', 'StratifiedKFold', 'StratifiedShuffleSplit']Dict:{'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'unique'], 'numpy': ['mean', 'sum', 'unique'], 'sklearn': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 2
feature-engineering-on-multiple-reference-dates.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'min', 'max', 'min', 'max', 'min', 'max', 'min', 'max', 'min', 'max', 'agg', 'groupby', 'reset_index', 'apply', 'apply', 'replace', 'head', 'sort_index', 'value_counts', 'isin', 'min', 'isin', 'max', 'isin', 'unique', 'unique', 'isin', 'value_counts', 'agg', 'groupby', 'isin', 'reset_index', 'apply', 'apply', 'apply', 'apply', 'replace', 'isin', 'value_counts', 'isin', 'isin', 'agg', 'groupby', 'isin', 'head', 'mean', 'mean', 'isin', 'boxplot', 'isin', 'isin', 'drop', 'where', 'isin', 'where', 'isin', 'drop', 'concat', 'to_csv', 'merge', 'head', 'boxplot', 'join', 'boxplot', 'sort_index', 'value_counts', 'isin', 'sort_index', 'value_counts', 'isin', 'isin'] ['numpy', 'pandas', 'time', 'sys', 'datetime', 'gc', 'matplotlib.pyplot', 'seaborn', 'warnings', 'os'] ['wrap']Dict:{'numpy': ['mean', 'max', 'where', 'min', 'unique', 'isin'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'time': [], 'sys': [], 'datetime': [], 'gc': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'textwrap': [], 'warnings': [], 'os': ['replace']} axis_0: 0, axis_1: 1
simple-eda-feature-engineering-techniques.py : ['read_csv', 'read_csv', 'head', 'info', 'info', 'describe', 'hist', 'concat', 'select_dtypes', 'select_dtypes', 'concat', 'select_dtypes', 'transform', 'select_dtypes', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'mean', 'apply', 'mean', 'pop', 'drop', 'drop', 'apply', 'transform', 'concat', 'drop', 'concat', 'drop', 'copy', 'sort_values', 'corr', 'corr', 'corr', 'copy', 'corr', 'corr', 'corr', 'drop', 'drop', 'drop', 'drop', 'apply', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 're'] ['SimpleImputer', 'train_test_split', 'OneHotEncoder', 'SVC', 'accuracy_score', 'recall_score', 'f1_score', 'precision_score', 'confusion_matrix']Dict:{'pandas': ['concat', 'read_csv'], 'numpy': ['mean', 'info', 'copy'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 're': [], '#Regular': [], 'expressions': []} axis_0: 0, axis_1: 12
eda-introduction-to-ensemble-regression.py : ['read_csv', 'read_csv', 'select_dtypes', 'select_dtypes', 'drop', 'drop', 'skew', 'reset_index', 'drop', 'describe', 'skew', 'corr', 'corr', 'corr', 'reset_index', 'concat', 'info', 'fillna', 'any', 'isnull', 'sum', 'isnull', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'replace', 'replace', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'drop', 'skew', 'skew', 'drop', 'drop', 'transform', 'notnull', 'notnull', 'isnull', 'mean', 'isnull', 'array', 'mean', 'mean', 'std', 'mean', 'std', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'lightgbm', 'warnings'] ['Counter', 'LinearRegression', 'LassoCV', 'Ridge', 'LassoLarsCV', 'ElasticNetCV', 'GridSearchCV', 'cross_val_score', 'learning_curve', 'RandomForestRegressor', 'AdaBoostRegressor', 'ExtraTreesRegressor', 'GradientBoostingRegressor', 'StandardScaler', 'Normalizer', 'RobustScaler']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'notnull', 'array'], 'numpy': ['mean', 'median', 'any', 'sum', 'array', 'info', 'std'], 'matplotlib': [], 'seaborn': [], 'collections': [], 'sklearn': ['transform'], 'xgboost': [], 'lightgbm': [], 'warnings': []} axis_0: 1, axis_1: 4
machine-learning-using-turi-create.py : ['apply', 'apply', 'join', 'head', 'head', 'head'] ['turicreate', 'pandas', 'os', 'warnings', 'matplotlib.pyplot'] []Dict:{'turicreate': [], 'pandas': [], 'os': [], 'warnings': [], 'matplotlib': []} axis_0: 0, axis_1: 0
categorical-feature-engineering-2-xgb.py : ['read_csv', 'read_csv', 'read_csv', 'value_counts', 'keys', 'sort_index', 'keys', 'sort_index', 'value_counts', 'keys', 'keys', 'sort_index', 'value_counts', 'keys', 'keys', 'any', 'isnull', 'any', 'isnull', 'head', 'keys', 'sort_index', 'value_counts', 'value_counts', 'keys', 'sort_index', 'value_counts', 'value_counts', 'keys', 'sort_index', 'value_counts', 'astype', 'astype', 'replace', 'replace', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'copy', 'copy', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'drop', 'drop', 'mean', 'astype', 'mean', 'std', 'std', 'astype', 'mean', 'astype', 'mean', 'std', 'std', 'astype', 'mean', 'astype', 'mean', 'std', 'std', 'astype', 'array', 'head', 'to_csv'] ['numpy', 'pandas', 'scipy.special', 'matplotlib.pyplot', 'os'] ['SimpleImputer', 'train_test_split', 'LabelEncoder', 'metrics', 'XGBClassifier']Dict:{'numpy': ['mean', 'any', 'std', 'where', 'array', 'copy'], 'pandas': ['array', 'value_counts', 'read_csv', 'isnull'], 'scipy': [], 'matplotlib': [], 'os': ['replace'], 'sklearn': [], 'xgboost': []} axis_0: 12, axis_1: 2
m5-feature-engineering-for-beginners.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'head', 'melt', 'head', 'unique', 'unique', 'to_datetime', 'astype', 'astype', 'isin', 'head', 'groupby', 'groupby', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'transform', 'groupby', 'std', 'rolling', 'head', 'groupby', 'to_csv'] ['numpy', 'pandas', 'lightgbm', 'gc', 'os', 'matplotlib.pyplot', 'statsmodels.api'] ['datetime', 'timedelta', 'IFrame', 'YouTubeVideo']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'isin', 'std'], 'pandas': ['to_datetime', 'melt', 'unique', 'read_csv'], '': [], 'lightgbm': [], 'gc': [], 'os': [], 'matplotlib': [], 'IPython': [], 'statsmodels': []} axis_0: 0, axis_1: 0
airbnb-eda-and-xgboost.py : ['read_csv', 'read_csv', 'drop', 'concat', 'head', 'sum', 'isnull', 'info', 'drop', 'sum', 'isnull', 'head', 'value_counts', 'describe', 'astype', 'to_datetime', 'to_datetime', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'count', 'groupby', 'head', 'reset_index', 'astype', 'map', 'count', 'groupby', 'apply', 'head', 'map', 'count', 'groupby', 'dropna', 'boxplot', 'boxplot', 'value_counts', 'value_counts', 'map', 'count', 'groupby', 'reset_index', 'map', 'count', 'groupby', 'reset_index', 'boxplot', 'drop', 'concat', 'drop', 'fillna', 'apply', 'astype', 'drop', 'apply', 'astype', 'drop', 'where', 'get_dummies', 'drop', 'concat', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'datetime', 'warnings'] ['LabelEncoder', 'XGBClassifier']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'to_datetime'], 'numpy': ['where', 'info', 'sum'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'datetime': [], 'sklearn': [], 'xgboost': ['apply'], 'warnings': []} axis_0: 1, axis_1: 6
covid-19-linear-regression-and-arima.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'min', 'max', 'min', 'max', 'rename', 'rename', 'isna', 'apply', 'apply', 'nunique', 'nunique', 'drop', 'reset_index', 'sort_values', 'sum', 'groupby', 'max', 'groupby', 'set_index', 'unique', 'reset_index', 'sort_values', 'sum', 'groupby', 'max', 'groupby', 'isin', 'reset_index', 'sum', 'groupby', 'max', 'reset_index', 'sort_values', 'sum', 'groupby', 'shift', 'shift', 'unique', 'reset_index', 'sort_values', 'sum', 'groupby', 'max', 'groupby', 'isin', 'reset_index', 'sort_values', 'sum', 'groupby', 'max', 'reset_index', 'sort_values', 'sum', 'groupby', 'max', 'reset_index', 'max', 'groupby', 'unique', 'merge', 'isin', 'concat', 'fillna', 'fillna', 'fillna', 'fillna', 'to_datetime', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'copy', 'apply', 'replace', 'fillna', 'min', 'max', 'replace', 'fillna', 'copy', 'apply', 'replace', 'fillna', 'min', 'max', 'replace', 'fillna', 'reset_index', 'reset_index', 'astype', 'apply', 'astype', 'apply', 'join', 'mean', 'read_csv', 'read_csv', 'fillna', 'fillna', 'to_datetime', 'to_datetime', 'sort_values', 'sort_values', 'count', 'max', 'min', 'unique', 'unique', 'max', 'min', 'merge', 'copy', 'to_csv', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'unique'] ['numpy', 'pandas', 'os', 'pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'xgboost', 'plotly.express', 'plotly.graph_objects', 'lightgbm', 'xgboost', 'warnings', 'plotly.io', 'plotly.express', 'plotly.graph_objects', 'plotly.express', 'plotly.express', 'plotly.express', 'plotly.express', 'numpy', 'pandas', 'os', 'warnings', 'plotly.express', 'plotly.graph_objs'] ['plot_importance', 'plot_tree', 'mean_squared_error', 'mean_absolute_error', 'preprocessing', 'XGBRegressor', 'linear_model', 'plot_importance', 'plot_tree', 'RandomizedSearchCV', 'GridSearchCV', 'linear_model', 'mean_squared_error', 'make_subplots', 'auto_arima', 'make_subplots', 'SARIMAX', 'ARIMA']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'isin', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'unique', 'merge', 'to_datetime'], 'os': ['rename', 'replace'], 'seaborn': [], 'matplotlib': [], 'xgboost': [], 'sklearn': [], 'plotly': [], 'lightgbm': [], 'warnings': [], 'pyramid': [], 'statsmodels': []} axis_0: 0, axis_1: 11
ps3e20-advanced-feature-engineering-ensemble.py : ['read_csv', 'read_csv', 'drop', 'drop', 'copy', 'copy', 'head', 'round', 'count', 'round', 'count', 'mean', 'median', 'hist', 'min', 'max', 'std', 'std', 'min', 'max', 'mean', 'median', 'hist', 'min', 'max', 'std', 'std', 'min', 'max', 'nunique', 'max', 'max', 'min', 'min', 'copy', 'boxplot', 'copy', 'where', 'copy', 'boxplot', 'sum', 'isna', 'nunique', 'isnull', 'concat', 'drop', 'reset_index', 'sum', 'isna', 'fillna', 'median', 'copy', 'copy', 'drop', 'drop', 'drop', 'items', 'array', 'array', 'copy', 'insert', 'reset_index', 'agg', 'groupby', 'merge', 'fillna', 'join', 'join', 'apply', 'apply', 'unique', 'map', 'map', 'apply', 'bfill', 'ffill', 'groupby', 'fillna', 'shift', 'groupby', 'apply', 'apply', 'isin', 'isin', 'isin', 'isin', 'concat', 'drop', 'drop', 'nunique', 'max', 'max', 'min', 'min', 'concat', 'transform', 'fillna', 'fillna', 'transform', 'reset_index', 'concat', 'concat', 'mean', 'mean', 'mean', 'mean', 'transform', 'array', 'array', 'mean', 'mean', 'mean', 'mean', 'corrwith', 'drop', 'max', 'abs', 'max', 'abs', 'max', 'abs', 'mean', 'items', 'drop', 'drop', 'nunique', 'abs', 'corr', 'transform', 'transform', 'concat', 'concat', 'array', 'array', 'mean', 'drop', 'copy', 'mean', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'array', 'array', 'keys', 'items', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'read_csv', 'apply', 'transform', 'groupby', 'median', 'median', 'insert', 'unique', 'copy', 'max', 'array', 'to_csv', 'head'] ['sys', 'sklearn', 'numpy', 'os', 'pandas', 'matplotlib.pyplot', 'missingno', 'seaborn', 'folium', 'random', 'gc', 'xgboost', 'statsmodels.api', 'math', 'seaborn', 'optuna', 'xgboost', 'lightgbm', 'warnings', 'datetime'] ['tqdm', 'tqdm', 'PrettyTable', 'deepcopy', 'partial', 'combinations', 'KMeans', 'KElbowVisualizer', 'haversine', 'uniform', 'f_classif', 'LabelEncoder', 'StandardScaler', 'metrics', 'GridSearchCV', 'RandomizedSearchCV', 'train_test_split', 'mean_squared_error', 'mean_squared_log_error', 'mean_absolute_error', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'FunctionTransformer', 'PCA', 'TruncatedSVD', 'SimpleImputer', 'ColumnTransformer', 'Pipeline', 'stats', 'variance_inflation_factor', 'BaseEstimator', 'TransformerMixin', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StratifiedKFold', 'KFold', 'PassiveAggressiveRegressor', 'ARDRegression', 'RidgeCV', 'ElasticNetCV', 'TheilSenRegressor', 'RANSACRegressor', 'HuberRegressor', 'HistGradientBoostingRegressor', 'ExtraTreesRegressor', 'GradientBoostingRegressor', 'RandomForestRegressor', 'DecisionTreeRegressor', 'LinearRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool', 'KNeighborsRegressor']Dict:{'sys': [], 'sklearn': [], 'numpy': ['mean', 'median', 'std', 'max', 'abs', 'sum', 'array', 'where', 'round', 'min', 'unique', 'isin', 'insert', 'copy'], 'os': [], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'unique', 'array', 'merge'], 'matplotlib': ['boxplot', 'hist'], 'missingno': [], 'tqdm': [], 'prettytable': ['copy'], 'seaborn': ['boxplot'], 'copy': [], 'functools': [], 'itertools': [], 'yellowbrick': [], 'folium': [], 'haversine': [], 'random': [], 'gc': [], 'xgboost': [], 'scipy': [], 'statsmodels': [], 'math': [], 'optuna': [], 'lightgbm': [], 'category_encoders': [], 'imblearn': [], 'catboost': [], 'warnings': [], 'datetime': []} axis_0: 6, axis_1: 12
support-vector-machine-pca-tutorial-for-beginner.py : ['head', 'describe', 'info', 'corr', 'drop', 'transform', 'head', 'transform', 'transform', 'transform'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['load_breast_cancer', 'cross_val_score', 'train_test_split', 'Pipeline', 'StandardScaler', 'MinMaxScaler', 'accuracy_score', 'confusion_matrix', 'classification_report', 'LinearSVC', 'SVC', 'SVC', 'SVC', 'GridSearchCV', 'PCA']Dict:{'pandas': [], 'numpy': ['info'], 'matplotlib': [], 'seaborn': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 1
machine-learning-for-everyone-lb-top-5.py : ['read_csv', 'read_csv', 'head', 'info', 'items', 'reset_index', 'drop', 'fillna', 'fillna', 'info', 'info', 'sum', 'isnull', 'sum', 'isnull', 'head', 'notnull', 'isnull', 'sum', 'isnull', 'fillna', 'value_counts', 'fillna', 'median', 'sum', 'isnull', 'sum', 'isnull', 'corr', 'map', 'notnull', 'notnull', 'head', 'head', 'head', 'replace', 'map', 'astype', 'drop', 'drop', 'map', 'map', 'map', 'map', 'get_dummies', 'get_dummies', 'map', 'map', 'sum', 'isnull', 'astype', 'get_dummies', 'astype', 'get_dummies', 'drop', 'drop', 'select_dtypes', 'value_counts', 'value_counts', 'info', 'info', 'drop', 'mean', 'read_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['Counter', 'LabelEncoder', 'RandomForestClassifier', 'LinearDiscriminantAnalysis', 'LogisticRegression', 'MLPClassifier', 'SVC', 'accuracy_score', 'cross_val_score', 'StratifiedKFold', 'train_test_split', 'XGBClassifier', 'LGBMClassifier', 'stacking']Dict:{'numpy': ['mean', 'median', 'info', 'sum'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'notnull'], 'os': ['replace'], 'matplotlib': [], 'seaborn': [], 'collections': ['items'], 'warnings': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'vecstack': []} axis_0: 0, axis_1: 3
m5-forecasting-lightgbm-with-timeseries-splits.py : ['join', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'melt', 'isin', 'isin', 'drop_duplicates', 'merge', 'merge', 'melt', 'melt', 'concat', 'drop', 'merge', 'drop', 'merge', 'fillna', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'std', 'rolling', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'std', 'rolling', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'max', 'rolling', 'shift', 'transform', 'groupby', 'std', 'rolling', 'transform', 'groupby', 'std', 'rolling', 'drop', 'to_datetime', 'sort_values', 'sort_values', 'sort_values', 'mean', 'reset_index', 'pivot', 'isin', 'merge', 'concat', 'to_csv', 'head', 'mean', 'to_csv', 'head', 'sort_values'] ['warnings', 'pandas', 'numpy', 'dask.dataframe', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'dask_xgboost', 'dask.dataframe', 'gc', 'os', 'seaborn'] ['preprocessing', 'metrics', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit']Dict:{'warnings': [], 'pandas': ['to_datetime', 'read_csv', 'melt', 'concat', 'merge', 'pivot'], 'numpy': ['mean', 'max', 'sum', 'min', 'isin', 'std'], 'dask': ['rolling', 'read_csv', 'melt', 'concat', 'to_csv', 'merge', 'to_datetime', 'groupby'], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'dask_xgboost': [], 'sklearn': [], 'gc': [], 'os': []} axis_0: 0, axis_1: 1
riiid-competition-eda-feature-eng-models.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'hist', 'reset_index', 'value_counts', 'astype', 'sort_values', 'tail', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'reset_index', 'astype', 'fillna', 'copy', 'agg', 'groupby', 'copy', 'agg', 'groupby', 'merge', 'merge', 'merge', 'head', 'reset_index', 'aggregate', 'groupby', 'copy', 'info', 'sort_values', 'array', 'fillna', 'sum', 'isnull', 'std', 'drop', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'merge', 'merge', 'astype', 'fillna', 'reset_index', 'merge', 'fillna'] ['time', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn', 'os', 'plotly.express', 'plotly.graph_objects', 'warnings', 'xgboost', 'lightgbm', 'riiideducation'] ['StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit', 'ensemble']Dict:{'time': [], 'matplotlib': ['hist'], 'numpy': ['mean', 'sum', 'array', 'isin', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'array', 'merge'], 'seaborn': [], 'os': [], 'plotly': [], 'sklearn': [], 'warnings': [], '=': [], 'model': [], 'xgboost': [], 'lightgbm': [], 'riiideducation': []} axis_0: 2, axis_1: 1
preprocessing-in-chunks-with-gpu-p100-vs-t4-x2.py : ['join', 'read_csv', 'reset_index', 'sort_values', 'mode', 'agg', 'groupby', 'join', 'reset_index', 'add_prefix', 'diff', 'groupby', 'insert', 'agg', 'groupby', 'join', 'reset_index', 'merge', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'mode', 'agg', 'groupby', 'join', 'reset_index', 'add_prefix', 'diff', 'groupby', 'insert', 'agg', 'groupby', 'join', 'reset_index', 'merge', 'reset_index', 'sort_values'] ['os', 'gc', 'operator', 'numpy', 'cupy', 'pandas', 'cudf', 'time', 'warnings', 'gc', 'operator', 'numpy', 'cupy', 'pandas', 'cudf', 'time', 'warnings'] ['tqdm', 'tqdm']Dict:{'os': [], 'gc': [], 'operator': [], 'numpy': ['diff', 'insert'], 'cupy': [], 'pandas': ['merge', 'read_csv'], 'tqdm': [], 'cudf': [], 'time': [], 'warnings': [], '': []} axis_0: 0, axis_1: 0
in-depth-analysis-visualisations-avito.py : ['read_csv', 'read_csv', 'read_csv', 'fillna', 'apply', 'fillna', 'apply', 'apply', 'join', 'fillna', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'cut', 'apply', 'apply', 'apply', 'head', 'head', 'value_counts', 'value_counts', 'update', 'read_csv', 'dropna', 'iterrows', 'update', 'update', 'update', 'update', 'value_counts', 'value_counts', 'replace', 'corr', 'bool', 'boxplot', 'boxplot', 'boxplot', 'crosstab', 'crosstab', 'reset_index', 'agg', 'groupby', 'apply', 'sort_values', 'agg', 'groupby', 'update', 'update', 'update', 'update', 'nlargest', 'value_counts', 'update', 'dropna', 'dropna'] ['plotly.graph_objs', 'matplotlib.pyplot', 'plotly.plotly', 'pandas', 'numpy', 'seaborn', 'random', 'warnings', 'folium', 'zipfile', 'numpy'] ['init_notebook_mode', 'iplot', 'WordCloud', 'tools', 'date', 'StringIO', 'Image', 'display', 'HTML']Dict:{'plotly': [], 'wordcloud': [], 'matplotlib': ['boxplot'], 'datetime': ['replace'], 'pandas': ['crosstab', 'cut', 'read_csv', 'value_counts'], 'numpy': [], 'seaborn': ['boxplot'], 'random': [], '': [], 'warnings': [], 'io': [], 'folium': [], 'zipfile': [], 'PIL': [], 'IPython': []} axis_0: 0, axis_1: 1
ps-s3e14-2023-eda-and-submission.py : ['drop', 'read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'any', 'any', 'isna', 'any', 'any', 'isna', 'any', 'any', 'isna', 'describe', 'head', 'to_dict', 'round', 'value_counts', 'to_dict', 'round', 'value_counts', 'rename', 'nunique', 'rename', 'nunique', 'join', 'add_suffix', 'describe', 'add_suffix', 'describe', 'concat', 'corr', 'corr', 'drop', 'read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'sum', 'concat', 'reset_index', 'drop_duplicates', 'apply', 'apply', 'mean', 'mean', 'sort_values', 'sort_values', 'mean', 'rolling', 'drop', 'read_csv', 'to_csv', 'head', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'math', 'warnings', 'xgboost'] ['HTML', 'tqdm', 'Styler', 'Style', 'Fore', 'EarlyStopping', 'model_selection', 'metrics', 'hierarchy', 'linkage', 'dendrogram', 'squareform']Dict:{'IPython': [], 'pandas': [], 'numpy': ['mean', 'round', 'sum', 'any'], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'math': [], 'warnings': [], 'colorama': [], 'xgboost': [], 'sklearn': [], 'scipy': []} axis_0: 0, axis_1: 3
comparing-categorical-encoders.py : ['read_csv', 'dropna', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'concat', 'mean', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform'] ['pandas', 'numpy', 'category_encoders', 'catboost', 'warnings'] ['StratifiedKFold', 'roc_auc_score', 'LogisticRegression', 'Lasso']Dict:{'pandas': ['concat', 'read_csv'], 'numpy': ['mean'], 'category_encoders': [], 'sklearn': [], 'catboost': [], 'warnings': [], '': []} axis_0: 0, axis_1: 0
tps-aug22-binary-classification.py : ['join', 'sum', 'isnull', 'where', 'isna', 'sum', 'isnull', 'get_dummies', 'drop', 'drop'] ['numpy', 'pandas', 'os'] []Dict:{'numpy': ['where', 'sum'], 'pandas': ['isna', 'get_dummies', 'isnull'], 'os': []} axis_0: 0, axis_1: 1
tps-nov-21-kmeans-keras-discretization-layer.py : ['read_csv', 'read_csv', 'sum', 'any', 'isnull', 'sum', 'any', 'isnull', 'drop', 'drop', 'copy', 'describe', 'corr', 'head', 'drop', 'sort_values', 'head', 'corr', 'var', 'sample', 'sample', 'skew', 'skew', 'sort_values', 'nunique', 'sort_values', 'nunique', 'sample', 'read_excel', 'read_excel', 'read_excel', 'read_excel', 'concat', 'sort_values', 'apply', 'groupby', 'sum', 'abs', 'sum', 'head', 'sort_values', 'sample', 'corr', 'head', 'drop', 'sort_values', 'head', 'transform', 'transform', 'transform', 'copy', 'transform', 'transform', 'transform', 'concat', 'nunique', 'min', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'random', 'os', 'time', 'seaborn', 'matplotlib.pyplot', 'gc', 'datetime', 'time', 'xgbfir', 'xgboost', 'cufflinks', 'plotly.offline', 'plotly', 'plotly.express', 'plotly.graph_objs', 'plotly.offline', 'plotly.figure_factory', 'sys', 'warnings', 'tensorflow'] ['LogisticRegression', 'StratifiedKFold', 'roc_auc_score', 'MiniBatchKMeans', 'StandardScaler', 'iplot', 'make_subplots', 'RobustScaler', 'StandardScaler', 'MinMaxScaler', 'keras', 'backend', 'layers']Dict:{'pandas': ['read_excel', 'concat', 'read_csv', 'isnull'], 'numpy': ['any', 'var', 'abs', 'sum', 'min', 'copy'], 'random': ['sample'], 'os': [], 'sklearn': ['transform'], 'time': [], 'seaborn': [], 'matplotlib': [], 'gc': [], 'datetime': [], 'xgbfir': [], 'xgboost': [], 'cufflinks': [], 'plotly': [], '': [], 'sys': [], 'warnings': [], 'tensorflow': [], 'keras': []} axis_0: 0, axis_1: 4
the-power-of-normalization-and-visualization.py : ['join', 'read_csv', 'read_csv', 'head', 'info', 'skew', 'kurt', 'concat', 'boxplot', 'concat', 'boxplot', 'sort_index', 'value_counts', 'value_counts', 'apply', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'cumsum', 'fillna', 'unstack', 'value_counts', 'groupby', 'value_counts', 'fillna', 'unstack', 'value_counts', 'groupby', 'sum', 'cumsum', 'value_counts', 'value_counts', 'sort_index', 'value_counts', 'value_counts', 'sort_index', 'value_counts', 'value_counts', 'sort_index', 'value_counts', 'value_counts', 'sort_index', 'value_counts', 'value_counts', 'sort_index', 'value_counts', 'cumsum', 'fillna', 'unstack', 'value_counts', 'groupby', 'value_counts', 'cumsum', 'fillna', 'unstack', 'value_counts', 'groupby', 'insert', 'add', 'value_counts', 'fillna', 'unstack', 'value_counts', 'groupby', 'sum', 'cumsum', 'value_counts', 'concat', 'concat', 'concat', 'corr', 'nlargest', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'drop', 'drop', 'isnull', 'max', 'sum', 'isnull', 'head', 'concat', 'sort_values', 'drop', 'drop', 'concat'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'datetime', 'random', 'math', 'seaborn', 'matplotlib.pyplot', 'plotly.express', 'lightgbm', 'warnings', 'os', 'sys'] ['RandomForestRegressor', 'GradientBoostingRegressor', 'AdaBoostRegressor', 'BaggingRegressor', 'KernelRidge', 'Ridge', 'RidgeCV', 'ElasticNet', 'ElasticNetCV', 'SVR', 'StackingCVRegressor', 'LGBMRegressor', 'XGBRegressor', 'stats', 'skew', 'norm', 'boxcox1p', 'boxcox_normmax', 'GridSearchCV', 'KFold', 'cross_val_score', 'mean_squared_error', 'OneHotEncoder', 'make_pipeline', 'StandardScaler', 'RobustScaler', 'PCA']Dict:{'numpy': ['max', 'add', 'sum', 'info', 'insert', 'cumsum'], 'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'os': [], 'datetime': [], 'random': [], 'math': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'plotly': [], 'sklearn': [], 'mlxtend': [], 'lightgbm': [], 'xgboost': ['apply'], 'scipy': [], 'warnings': [], 'sys': []} axis_0: 0, axis_1: 0
nfl-injury-analysis.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'nunique', 'nunique', 'nunique', 'drop', 'reset_index', 'drop_duplicates', 'keys', 'value_counts', 'value_counts', 'keys', 'value_counts', 'keys', 'value_counts', 'value_counts', 'keys', 'value_counts', 'keys', 'value_counts', 'value_counts', 'keys', 'value_counts', 'hist', 'astype', 'boxplot', 'astype', 'copy', 'replace', 'replace', 'replace', 'replace', 'replace', 'apply', 'apply', 'drop', 'reset_index', 'drop_duplicates', 'hist', 'count', 'groupby', 'hist', 'max', 'groupby', 'keys', 'value_counts', 'value_counts', 'keys', 'value_counts', 'keys', 'value_counts', 'value_counts', 'keys', 'value_counts', 'value_counts', 'keys', 'value_counts', 'value_counts', 'keys', 'value_counts', 'keys', 'value_counts', 'transpose', 'transpose', 'array', 'unique', 'transpose', 'transpose', 'array', 'transpose', 'unique', 'count', 'copy', 'keys', 'value_counts', 'value_counts', 'keys', 'value_counts', 'value_counts', 'sum', 'sum', 'sum', 'sum', 'join', 'set_index', 'set_index', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'drop', 'drop', 'drop', 'get_dummies', 'corr', 'sum', 'crosstab', 'keys', 'boxplot', 'mean', 'groupby', 'groupby', 'groupby', 'mean', 'join', 'set_index', 'dropna', 'set_index', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'drop', 'get_dummies', 'corr', 'dropna', 'reset_index', 'merge', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'isin', 'corr', 'reset_index', 'copy', 'drop', 'get_dummies', 'drop', 'sort_values', 'rename', 'reset_index', 'max', 'groupby', 'mean', 'groupby', 'merge', 'reset_index', 'merge', 'reset_index', 'fillna', 'merge', 'drop', 'drop', 'read_csv', 'head', 'corr', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'hist', 'unique', 'reset_index', 'count', 'groupby', 'sort_values', 'sort_values', 'sort_values', 'reset_index', 'sum', 'groupby', 'sort_values', 'reset_index', 'sum', 'groupby', 'sort_values', 'reset_index', 'mean', 'groupby', 'sort_values', 'reset_index', 'mean', 'groupby', 'mean', 'mean', 'hist', 'mean', 'mean', 'sort_values', 'reset_index', 'mean', 'groupby', 'sort_values', 'reset_index', 'mean', 'groupby', 'mean', 'mean', 'hist', 'hist', 'hist', 'hist'] ['numpy', 'pandas', 'itertools', 'os', 'PIL', 'matplotlib.pyplot', 'seaborn', 'scipy.stats', 'xgboost', 'math'] ['Image', 'StratifiedKFold', 'RandomOverSampler', 'SMOTE', 'accuracy_score', 'confusion_matrix', 'cohen_kappa_score', 'Counter']Dict:{'numpy': ['transpose', 'mean', 'max', 'sum', 'unique', 'isin', 'array', 'copy'], 'pandas': ['read_csv', 'value_counts', 'get_dummies', 'unique', 'array', 'merge', 'crosstab'], 'itertools': ['count', 'groupby'], 'os': ['rename', 'replace'], 'PIL': ['merge'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'scipy': [], 'sklearn': [], 'imblearn': [], 'xgboost': [], 'collections': ['keys', 'copy'], 'math': []} axis_0: 0, axis_1: 2
covid19-creating-an-enriched-dataset.py : ['transpose', 'tail', 'join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'copy', 'to_datetime', 'rename', 'dropna', 'rename', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'drop', 'astype', 'replace', 'get', 'astype', 'replace', 'get', 'astype', 'get', 'astype', 'replace', 'any', 'isna', 'fillna', 'transform', 'groupby', 'rename', 'copy', 'copy', 'copy', 'copy', 'astype', 'replace', 'any', 'isna', 'fillna', 'transform', 'groupby', 'copy', 'copy', 'astype', 'drop', 'copy', 'replace', 'replace', 'replace', 'rename', 'drop', 'rename', 'copy', 'copy', 'to_datetime', 'fillna', 'sort_values', 'fillna', 'fillna', 'fillna', 'fillna', 'to_datetime', 'astype', 'drop', 'merge', 'rename', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'drop_duplicates', 'fillna', 'replace', 'astype', 'replace', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'notnull', 'notnull', 'notnull', 'fillna', 'where', 'rename', 'reset_index', 'min', 'groupby', 'copy', 'merge', 'notnull', 'rename', 'reset_index', 'min', 'groupby', 'copy', 'merge', 'notnull', 'drop', 'rename', 'reset_index', 'min', 'groupby', 'copy', 'merge', 'notnull', 'rename', 'reset_index', 'min', 'groupby', 'copy', 'merge', 'notnull', 'drop', 'rename', 'reset_index', 'min', 'groupby', 'copy', 'merge', 'notnull', 'rename', 'reset_index', 'min', 'groupby', 'copy', 'merge', 'notnull', 'drop', 'fillna', 'rename', 'reset_index', 'min', 'groupby', 'copy', 'merge', 'notnull', 'rename', 'reset_index', 'min', 'groupby', 'copy', 'merge', 'notnull', 'drop', 'rename', 'reset_index', 'min', 'groupby', 'copy', 'merge', 'notnull', 'rename', 'reset_index', 'min', 'groupby', 'copy', 'merge', 'notnull', 'drop', 'rename', 'reset_index', 'min', 'groupby', 'copy', 'merge', 'notnull', 'rename', 'reset_index', 'min', 'groupby', 'copy', 'merge', 'notnull', 'drop', 'min', 'min', 'min', 'min', 'fillna', 'drop', 'astype', 'drop_duplicates', 'any', 'isna', 'shift', 'shift', 'shift', 'replace', 'fillna', 'unique', 'sort_values', 'copy', 'shift', 'fillna', 'fillna', 'median', 'rolling', 'shift', 'fillna', 'shift', 'shift', 'fillna', 'median', 'rolling', 'replace', 'where', 'fillna', 'where', 'fillna', 'fillna', 'fillna', 'fillna', 'drop', 'copy', 'drop', 'astype', 'astype', 'merge', 'apply', 'astype', 'replace', 'copy', 'min', 'copy', 'min'] ['numpy', 'pandas', 'datetime', 'os', 'os'] ['is_string_dtype', 'is_numeric_dtype', 'is_categorical_dtype']Dict:{'numpy': ['transpose', 'median', 'mean', 'any', 'where', 'min', 'unique', 'copy'], 'pandas': [], 'datetime': [], 'os': ['rename', 'replace']} axis_0: 0, axis_1: 15
tps-apr22-basic-eda.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'merge', 'boxplot', 'boxplot', 'value_counts', 'mean', 'std', 'corr', 'shift', 'groupby', 'fillna', 'shift', 'groupby', 'fillna', 'head', 'isnull', 'copy', 'transform', 'read_csv', 'drop', 'drop'] ['pandas', 'numpy', 'kaggle_utils_py', 'matplotlib.pyplot', 'seaborn', 'scipy.stats', 'warnings', 'tensorflow'] ['StandardScaler', 'plot_model', 'Model', 'load_model', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau', 'GlobalMaxPooling1D', 'BatchNormalization', 'Dense', 'Dropout', 'Input', 'Concatenate', 'LSTM', 'GRU', 'Bidirectional', 'Multiply', 'roc_auc_score', 'KFold', 'GroupKFold']Dict:{'pandas': ['merge', 'value_counts', 'read_csv', 'isnull'], 'numpy': ['mean', 'std', 'copy'], 'kaggle_utils_py': [], 'sklearn': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': [], 'warnings': [], '': [], 'tensorflow': []} axis_0: 0, axis_1: 2
tps-dec-21-tensorflow-nn-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'drop', 'drop', 'drop', 'drop', 'drop', 'rename', 'rename', 'abs', 'abs', 'abs', 'abs', 'sum', 'sum', 'sum', 'sum', 'transform', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'nunique', 'drop', 'mean', 'head', 'to_csv'] ['numpy', 'pandas'] ['LabelEncoder', 'RobustScaler', 'Sequential', 'Dense', 'BatchNormalization', 'ReduceLROnPlateau', 'EarlyStopping', 'plot_model', 'StratifiedKFold', 'accuracy_score']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'min'], 'pandas': ['read_csv'], 'sklearn': [], 'tensorflow': []} axis_0: 1, axis_1: 13
mljar-automl-givemesomecredit.py : ['read_csv', 'read_csv', 'to_csv'] ['numpy', 'pandas'] ['AutoML']Dict:{'numpy': [], 'pandas': ['read_csv'], 'supervised': []} axis_0: 0, axis_1: 0
adversarial-geotab.py : ['read_csv', 'read_csv', 'head', 'concat', 'head', 'head', 'sort_values'] ['numpy', 'pandas', 'lightgbm', 'shap', 'os', 'xgboost', 'gc', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['KFold', 'model_selection', 'preprocessing', 'metrics', 'preprocessing']Dict:{'numpy': [], 'pandas': ['read_csv', 'concat'], 'lightgbm': [], 'sklearn': [], 'shap': [], 'os': [], 'xgboost': [], 'gc': [], 'matplotlib': [], 'seaborn': [], 'warnings': []} axis_0: 0, axis_1: 0
the-story-so-far-lb-0-673.py : ['read_csv', 'set_index', 'to_csv', 'to_csv', 'set_index', 'read_csv'] ['os', 'gc', 'warnings', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm'] ['partial', 'wraps', 'datetime', 'roc_auc_score', 'StratifiedKFold']Dict:{'os': [], 'gc': [], 'functools': [], 'datetime': [], 'warnings': [], 'numpy': [], 'pandas': ['read_csv'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 0
pubg-data-exploration-rf-funny-gifs.py : ['copy', 'copy', 'drop', 'items', 'items', 'get_dummies', 'sort_values', 'read_csv', 'read_csv', 'head', 'tail', 'describe', 'info', 'isnull', 'drop', 'isnull', 'transform', 'groupby', 'tail', 'fillna', 'head', 'drop', 'drop', 'head', 'drop', 'head', 'head', 'drop', 'describe', 'head', 'drop', 'head', 'drop', 'drop', 'head', 'drop', 'head', 'drop', 'nunique', 'get_dummies', 'filter', 'head', 'astype', 'astype', 'drop', 'head', 'drop', 'sample', 'drop', 'copy', 'copy', 'copy', 'round', 'corr', 'drop', 'fillna', 'transform', 'groupby', 'astype', 'astype', 'copy', 'fillna', 'head', 'clip', 'to_csv', 'head', 'tail'] ['os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'sklearn'] ['DataFrameMapper', 'LabelEncoder', 'Imputer', 'StandardScaler', 'is_string_dtype', 'is_numeric_dtype', 'forest', 'export_graphviz', 'pdp', '*', 'DataFrameSummary', 'RandomForestRegressor', 'display', 'metrics', 'hierarchy', '*', 'mean_absolute_error']Dict:{'sklearn_pandas': [], 'sklearn': [], 'pandas': ['get_dummies', 'read_csv', 'isnull'], 'os': [], 'numpy': ['round', 'clip', 'info', 'copy'], 'matplotlib': [], 'seaborn': [], 'pdpbox': [], 'plotnine': [], 'pandas_summary': [], 'IPython': [], 'scipy': [], 'fastai': []} axis_0: 0, axis_1: 1
cpu-catboost-baseline-using-polars-train.py : ['clip', 'shift', 'mean', 'std', 'sum', 'agg', 'groupby', 'read_csv', 'get', 'get', 'get', 'join', 'agg', 'groupby', 'drop', 'read_csv', 'unique', 'unique', 'query', 'query', 'astype', 'astype', 'items', 'stack', 'stack', 'astype', 'astype', 'astype'] ['os', 'gc', 'sys', 'numpy', 'pandas', 'polars', 'matplotlib.pyplot'] ['tqdm', 'f1_score', 'GroupKFold', 'CatBoostClassifier', 'Pool']Dict:{'os': [], 'gc': [], 'sys': [], 'numpy': ['mean', 'stack', 'sum', 'unique', 'clip', 'std'], 'pandas': ['unique', 'read_csv'], 'polars': ['mean', 'std', 'sum', 'read_csv'], 'tqdm': [], 'sklearn': [], 'catboost': [], 'matplotlib': ['get']} axis_0: 0, axis_1: 0
spaceship-titanic-pycaret-model-comparisons.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'drop', 'select_dtypes', 'head', 'to_csv', 'to_csv', 'to_csv', 'head'] ['pandas', 'numpy', 'warnings', 'gc', 'matplotlib.pyplot', 'seaborn'] ['*']Dict:{'pandas': ['read_csv'], 'numpy': [], 'warnings': [], 'pycaret': [], 'gc': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 1
oh-my-cat.py : ['read_csv', 'read_csv', 'head', 'unique', 'unique', 'isin', 'get_dummies', 'unique', 'map', 'to_csv', 'mean'] ['numpy', 'pandas', 'scipy', 'scipy'] ['LogisticRegression', 'tqdm_notebook', 'TransformerMixin', 'repeat', 'cross_validate']Dict:{'numpy': ['mean', 'isin', 'unique'], 'pandas': ['get_dummies', 'unique', 'read_csv'], 'sklearn': [], 'scipy': [], 'tqdm': [], 'itertools': []} axis_0: 0, axis_1: 0
tabnet-a-very-simple-regression-example.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'apply', 'fillna', 'mean', 'apply', 'fillna', 'mean', 'to_numpy', 'to_numpy', 'to_numpy', 'mean', 'mean', 'to_csv'] ['pandas', 'numpy'] ['TabNetRegressor', 'KFold', 'mean_squared_log_error']Dict:{'pandas': ['read_csv'], 'numpy': ['mean'], '': [], 'pytorch_tabnet': [], 'sklearn': []} axis_0: 4, axis_1: 0
gstore-eda-lgbm-baseline-1-4260.py : ['apply', 'apply', 'isnull', 'unique', 'max', 'min', 'mean', 'std', 'skew', 'unique', 'fillna', 'head', 'head', 'copy', 'apply', 'reset_index', 'aggregate', 'groupby', 'sort_values', 'sort_values', 'count', 'count', 'count', 'count', 'count', 'count', 'reset_index', 'aggregate', 'groupby', 'sort_values', 'reset_index', 'aggregate', 'groupby', 'sort_values', 'to_datetime', 'reset_index', 'aggregate', 'groupby', 'mean', 'mean', 'mean', 'max', 'max', 'max', 'mean', 'mean', 'mean', 'max', 'max', 'max', 'mean', 'mean', 'mean', 'max', 'max', 'max', 'reset_index', 'aggregate', 'groupby', 'sort_values', 'count', 'groupby', 'count', 'groupby', 'replace', 'reset_index', 'aggregate', 'groupby', 'sort_values', 'drop', 'reset_index', 'concat', 'to_datetime', 'apply', 'head', 'fillna', 'fillna', 'fillna', 'replace', 'head', 'head', 'head', 'head', 'drop', 'drop', 'reset_index', 'head', 'concat', 'concat', 'reset_index', 'sum', 'groupby', 'read_csv', 'join', 'set_index', 'drop', 'fillna', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'math', 'gc', 'warnings'] ['LGBMRegressor', 'train_test_split', 'mean_squared_error', 'KFold', 'StratifiedKFold', 'TfidfVectorizer', 'TruncatedSVD']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'to_datetime'], 'os': ['replace'], 'matplotlib': [], 'seaborn': [], 'math': [], 'lightgbm': [], 'sklearn': [], 'gc': [], 'warnings': []} axis_0: 1, axis_1: 7
nn-baseline.py : ['read_csv', 'merge', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'to_datetime', 'apply', 'to_datetime', 'apply', 'nunique', 'drop', 'drop', 'drop', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'astype', 'fillna', 'fillna', 'astype', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'max', 'max', 'replace', 'min', 'mean', 'sort_values', 'drop', 'drop', 'array', 'mean', 'mean', 'std', 'copy', 'apply', 'fillna', 'reset_index', 'sum', 'groupby', 'to_csv', 'mean', 'std', 'to_csv', 'mean', 'std'] ['numpy', 'pandas', 'json', 'bq_helper', 'seaborn', 'matplotlib.pyplot', 'lightgbm'] ['json_normalize', 'LabelEncoder', 'TimeSeriesSplit', 'KFold', 'mean_squared_error', 'train_test_split', 'Model', 'load_model', 'Input', 'Dropout', 'Dense', 'Embedding', 'SpatialDropout1D', 'concatenate', 'BatchNormalization', 'Flatten', 'pad_sequences', 'text', 'sequence', 'Callback', 'backend', 'Model', 'mean_squared_error', 'optimizers', 'RMSprop', 'Adam', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau']Dict:{'numpy': ['mean', 'max', 'sum', 'array', 'min', 'std', 'copy'], 'pandas': [], 'json': [], 'bq_helper': [], 'seaborn': [], 'matplotlib': [], 'lightgbm': [], 'sklearn': [], 'keras': []} axis_0: 2, axis_1: 6
logistic-regression.py : ['join', 'read_csv', 'read_csv', 'sum', 'isnull', 'drop', 'unique', 'replace', 'replace', 'astype', 'replace', 'replace', 'replace', 'astype', 'drop', 'sum', 'isnull', 'drop', 'replace', 'replace', 'astype', 'replace', 'replace', 'replace', 'astype', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['SimpleImputer', 'Pipeline', 'train_test_split', 'LogisticRegression', 'accuracy_score', 'classification_report', 'LabelEncoder', 'confusion_matrix', 'FileLink']Dict:{'numpy': ['sum', 'unique'], 'pandas': ['unique', 'read_csv', 'isnull'], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'IPython': [], 'os': ['replace']} axis_0: 0, axis_1: 3
my-first-kernel-3-699.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'fillna', 'fillna', 'fillna', 'keys', 'to_datetime', 'astype', 'map', 'map', 'transform', 'groupby', 'agg', 'groupby', 'reset_index', 'merge', 'merge', 'transform', 'groupby', 'agg', 'groupby', 'reset_index', 'merge', 'merge', 'head', 'value_counts', 'to_datetime', 'astype', 'mean', 'groupby', 'map', 'map', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'datetime', 'gc', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings'] ['StratifiedKFold', 'mean_squared_error']Dict:{'numpy': ['mean', 'isin'], 'pandas': ['read_csv', 'concat', 'value_counts', 'merge', 'to_datetime'], 'datetime': [], 'gc': [], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'sklearn': [], 'warnings': []} axis_0: 1, axis_1: 0
ibeacon-feasibility-analysis.py : ['read_csv', 'join', 'array', 'array', 'map', 'astype', 'apply', 'nunique', 'unique', 'head', 'to_csv', 'reset_index', 'nunique', 'groupby', 'fillna', 'pivot', 'head', 'value_counts', 'head', 'reset_index', 'unique', 'groupby', 'head', 'concat', 'reset_index', 'sort_values', 'head', 'interpolate', 'interpolate', 'head', 'merge', 'head', 'unique', 'reset_index', 'nunique', 'groupby', 'concat', 'reset_index', 'sort_values', 'interpolate', 'interpolate', 'merge', 'head', 'head', 'value_counts', 'astype', 'astype', 'astype', 'head', 'astype', 'unique', 'unique', 'reset_index', 'nunique', 'groupby', 'concat', 'reset_index', 'sort_values', 'interpolate', 'interpolate', 'merge', 'astype', 'head', 'head', 'reset_index', 'sort_values', 'nunique', 'groupby', 'head', 'reset_index', 'sort_values', 'nunique', 'groupby', 'count', 'groupby', 'reset_index', 'fillna', 'pivot', 'idxmax', 'reset_index', 'reset_index', 'nunique', 'groupby', 'concat', 'reset_index', 'sort_values', 'interpolate', 'interpolate', 'merge', 'merge', 'astype', 'head', 'value_counts', 'value_counts'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'glob', 'os', 'sys', 'math', 'gc', 'json', 're', 'warnings'] ['tqdm', 'dataclass']Dict:{'numpy': ['array', 'unique'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'array', 'merge', 'pivot'], 'matplotlib': [], 'seaborn': [], 'glob': [], 'os': [], 'sys': [], 'math': [], 'gc': [], 'json': [], '': [], 're': [], 'tqdm': [], 'warnings': [], '#': [], 'Supress': [], 'dataclasses': []} axis_0: 0, axis_1: 1
ieee-fraud-eda-lightgbm-baseline.py : ['join', 'head', 'fillna', 'fillna', 'value_counts', 'value_counts', 'map', 'map', 'map', 'astype', 'astype', 'astype', 'astype', 'groupby', 'transform', 'transform', 'merge', 'value_counts', 'map', 'value_counts', 'concat', 'map', 'map', 'astype', 'astype', 'hist', 'mean', 'groupby', 'mean', 'groupby', 'map', 'map', 'map', 'drop', 'sort_values', 'drop', 'sort_values', 'astype', 'keys', 'transform', 'astype', 'concat', 'merge', 'drop', 'merge', 'drop', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'copy', 'drop', 'copy', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'concat', 'mean', 'head', 'sort_values', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'warnings', 'gc', 'sys', 'os', 're', 'matplotlib.pyplot', 'lightgbm', 'optuna', 'seaborn'] ['LabelEncoder', 'KFold', 'train_test_split', 'roc_auc_score']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'copy'], 'pandas': ['concat', 'merge', 'read_csv', 'value_counts'], 'warnings': [], 'gc,': [], 'sys': [], 'os': [], 're': [], 'matplotlib': ['hist'], 'sklearn': [], 'lightgbm': [], 'optuna': [], 'seaborn': []} axis_0: 1, axis_1: 11
lightgbm-goss-dart-parameter-tuning.py : ['get_dummies', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings', 'time', 'sys', 'datetime', 'matplotlib.pyplot', 'seaborn', 'gc'] ['KFold', 'mean_squared_error', 'BayesianRidge', 'contextmanager', 'SettingWithCopyWarning', 'tqdm_notebook']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'isin'], 'pandas': [], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'sklearn': [], 'warnings': [], 'time': [], 'sys': [], 'datetime': [], 'contextlib': [], 'gc': [], 'tqdm': []} axis_0: 1, axis_1: 0
spaceship-complete-template-for-classification.py : ['read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'value_counts', 'value_counts', 'corr', 'corr', 'abs', 'select_dtypes', 'fillna', 'astype', 'fillna', 'mean', 'fillna', 'fillna', 'astype', 'fillna', 'mean', 'fillna', 'get_dummies', 'drop', 'drop', 'drop', 'head', 'map', 'set_index', 'astype', 'astype', 'ge', 'array', 'set_index', 'astype', 'drop', 'reset_index', 'mean'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 're', 'math', 'warnings', 'time', 'matplotlib.pyplot', 'seaborn', 'pandas'] ['HTML', 'Counter', 'tqdm', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'StandardScaler', 'MinMaxScaler', 'LabelEncoder', 'roc_auc_score', 'accuracy_score', 'confusion_matrix', 'ConfusionMatrixDisplay', 'RocCurveDisplay', 'XGBClassifier', 'Style', 'Fore', 'hierarchy', 'dendrogram', 'linkage', 'squareform', 'SimpleImputer']Dict:{'IPython': [], 'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'array'], 'numpy': ['transpose', 'mean', 'abs', 'sum', 'array'], 'matplotlib': [], 'seaborn': [], 'gc': [], 're': [], 'collections': [], 'tqdm': [], 'math': [], 'sklearn': [], 'warnings': [], 'time': [], 'xgboost': [], 'colorama': [], 'scipy': []} axis_0: 0, axis_1: 3
tensorflow-tutorial-and-housing-price-prediction.py : ['mean', 'std', 'tail'] ['tensorflow', 'numpy', 'os', 'sys', 'matplotlib.pyplot', 'pandas', 'seaborn', 'cv2', 'IPython'] ['keras', 'Conv2D', 'MaxPooling2D', 'Dropout', 'Flatten', 'Dense', 'urllib']Dict:{'tensorflow': [], 'numpy': ['mean', 'std'], 'os': [], 'sys': [], 'matplotlib': [], 'pandas': [], 'seaborn': [], 'cv2': [], 'IPython': [], 'six': []} axis_0: 2, axis_1: 0
all-best-models.py : ['read_csv', 'read_csv', 'copy', 'info', 'sample', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'median', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'qcut', 'cut', 'astype', 'value_counts', 'apply', 'value_counts', 'info', 'info', 'sample', 'get_dummies', 'head', 'sum', 'isnull', 'info', 'sum', 'isnull', 'info', 'describe', 'head', 'mean', 'groupby', 'crosstab', 'boxplot', 'boxplot', 'boxplot', 'hist', 'hist', 'hist', 'boxplot', 'boxplot', 'map', 'map', 'max', 'map', 'hist', 'corr', 'mean', 'mean', 'mean', 'std', 'sort_values', 'iterrows', 'mean', 'mean', 'groupby', 'mean', 'groupby', 'iterrows', 'astype', 'sum', 'max', 'product', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'info', 'astype', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'read_csv', 'sort_values', 'read_csv', 'join', 'sort_values', 'transpose', 'mode', 'array', 'to_csv', 'value_counts', 'sample'] ['sys', 'os', 'pandas', 'matplotlib', 'numpy', 'scipy', 'IPython', 'sklearn', 'random', 'time', 'warnings', 'matplotlib', 'matplotlib.pyplot', 'matplotlib.pylab', 'seaborn', 'itertools', 'graphviz'] ['stats', 'display', 'check_output', 'svm', 'tree', 'linear_model', 'neighbors', 'naive_bayes', 'ensemble', 'discriminant_analysis', 'gaussian_process', 'XGBClassifier', 'OneHotEncoder', 'LabelEncoder', 'feature_selection', 'model_selection', 'metrics', 'scatter_matrix']Dict:{'sys': [], '#access': [], 'to': [], 'system': [], 'parameters': [], 'https://docs': [], 'os': [], 'scipy': [], 'pandas': [], 'matplotlib': ['transpose', 'mean', 'boxplot', 'median', 'product', 'max', 'sum', 'array', 'sample', 'hist', 'info', 'std', 'copy'], '#collection': [], 'of': [], 'functions': [], 'for': [], 'scientific': [], 'and': [], 'publication-ready': [], 'visualization': [], 'numpy': ['transpose', 'mean', 'median', 'product', 'max', 'sum', 'array', 'info', 'std', 'copy'], 'IPython': [], 'sklearn': [], 'machine': [], 'learning': [], 'algorithms': [], 'random': ['sample'], 'time': [], 'warnings': [], 'subprocess': [], 'xgboost': ['apply'], 'seaborn': ['boxplot'], 'itertools': ['product', 'groupby'], 'graphviz': [], '': []} axis_0: 1, axis_1: 2
spaceship-titanic-wonderful-notebook.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'unique', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'drop', 'drop', 'value_counts', 'sum', 'isnull', 'fillna', 'median', 'fillna', 'median', 'fillna', 'fillna', 'mean', 'groupby', 'info', 'nunique', 'sort_values', 'abs', 'corrwith', 'corr', 'abs', 'corr', 'head', 'unique', 'copy', 'drop', 'info', 'replace', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'sklearn.metrics'] ['Pipeline', 'ColumnTransformer', 'StandardScaler', 'MinMaxScaler', 'OrdinalEncoder', 'OneHotEncoder', 'train_test_split', 'StratifiedShuffleSplit', 'classification_report', 'confusion_matrix', 'linear_model', 'tree', 'DecisionTreeClassifier', 'RandomForestRegressor', 'LogisticRegression', 'PolynomialFeatures', 'XGBClassifier', 'SVC', 'mean', 'std', 'make_classification', 'KFold', 'GridSearchCV', 'RandomForestClassifier', 'accuracy_score', 'GridSearchCV', 'CatBoostClassifier', 'Pool']Dict:{'numpy': [], 'pandas': ['isnull', 'unique', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'os': ['replace'], 'sklearn': [], 'xgboost': [], 'catboost': []} axis_0: 0, axis_1: 3
spaceship-titanic-the-mystery.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'sum', 'duplicated', 'sum', 'isna', 'sum', 'isna', 'nunique', 'value_counts', 'drop', 'drop', 'copy', 'isna', 'sum', 'isna', 'drop', 'median', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'cut', 'cut', 'value_counts', 'astype', 'astype', 'drop', 'drop', 'astype', 'apply', 'astype', 'apply', 'apply', 'value_counts', 'unique', 'apply', 'value_counts', 'astype', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'cut', 'astype', 'cut', 'astype', 'astype', 'astype', 'apply', 'apply', 'apply', 'value_counts', 'unique', 'apply', 'value_counts', 'drop', 'drop', 'astype', 'astype', 'transform', 'info', 'drop', 'head', 'head', 'copy', 'copy', 'median', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'cut', 'cut', 'astype', 'astype', 'drop', 'drop', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'value_counts', 'unique', 'apply', 'value_counts', 'astype', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'cut', 'astype', 'cut', 'astype', 'astype', 'astype', 'apply', 'apply', 'apply', 'value_counts', 'unique', 'apply', 'value_counts', 'drop', 'drop', 'astype', 'astype', 'copy', 'copy', 'items', 'mean', 'mean', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings', 'optuna', 'xgboost', 'gc'] ['tqdm', 'train_test_split', 'StratifiedKFold', 'LabelEncoder', 'RandomForestClassifier', 'LGBMClassifier', 'HTML', 'display', 'XGBClassifier', 'LightGBMPruningCallback', 'plot_optimization_history', 'plot_param_importances', 'log_loss', 'accuracy_score']Dict:{'numpy': ['mean', 'median', 'sum', 'unique', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'cut', 'value_counts', 'unique'], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'warnings': [], 'optuna': [], 'IPython': [], 'xgboost': ['apply'], 'gc': []} axis_0: 0, axis_1: 3
stacked-regressions-top-4-on-leaderboard.py : ['read_csv', 'read_csv', 'head', 'head', 'drop', 'drop', 'drop', 'reset_index', 'concat', 'drop', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'corr', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'drop', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'apply', 'astype', 'astype', 'astype', 'transform', 'sort_values', 'apply', 'dropna', 'head', 'get_dummies', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'xgboost', 'lightgbm'] ['stats', 'norm', 'skew', 'check_output', 'LabelEncoder', 'boxcox1p', 'ElasticNet', 'Lasso', 'BayesianRidge', 'LassoLarsIC', 'RandomForestRegressor', 'GradientBoostingRegressor', 'KernelRidge', 'make_pipeline', 'RobustScaler', 'BaseEstimator', 'TransformerMixin', 'RegressorMixin', 'clone', 'KFold', 'cross_val_score', 'train_test_split', 'mean_squared_error']Dict:{'numpy': ['mean', 'median', 'std', 'sum'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'scipy': [], 'subprocess': [], 'sklearn': [], 'xgboost': [], 'lightgbm': []} axis_0: 0, axis_1: 4
automl-evalml-jane-street-market-prediction.py : ['read_csv', 'read_csv', 'mean', 'isnull', 'mean', 'isnull', 'fillna', 'median', 'where', 'drop', 'drop', 'to_csv', 'set_index'] ['evalml', 'pandas', 'numpy'] ['AutoMLSearch']Dict:{'evalml': [], 'pandas': ['read_csv', 'isnull'], 'numpy': ['mean', 'median', 'where']} axis_0: 0, axis_1: 0
feature-engineering-eda.py : ['join', 'read_csv', 'head', 'sort_values', 'corr', 'drop', 'head', 'sum', 'isna', 'describe', 'drop', 'drop', 'corr', 'fillna', 'median', 'sort_values', 'median', 'groupby', 'sum', 'isna', 'head', 'sum', 'isna', 'head', 'sum', 'isna', 'value_counts', 'fillna', 'mode', 'fillna', 'median', 'head', 'sum', 'isna', 'fillna', 'fillna', 'fillna', 'drop', 'head', 'sum', 'isna', 'drop', 'fillna', 'fillna', 'mode', 'head', 'drop', 'drop', 'sum', 'isna', 'head', 'sum', 'isna', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'drop', 'sort_values', 'sum', 'isna', 'transform'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['stats', 'norm', 'skew', 'LabelEncoder']Dict:{'numpy': ['median', 'sum'], 'pandas': ['isna', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'os': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 8
tps-december-xgbclassifier.py : ['join', 'read_csv', 'read_csv', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'head', 'sum', 'isna', 'unique', 'unique', 'drop', 'drop', 'tail', 'drop', 'sum', 'sum', 'sum', 'sum', 'abs', 'abs', 'abs', 'abs', 'transform', 'round', 'round', 'mean', 'mode', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'optuna', 'warnings', 'os', 'gc'] ['patch_sklearn', 'train_test_split', 'RandomForestClassifier', 'partial', 'LabelEncoder', 'StratifiedKFold', 'stats', 'preprocessing', 'accuracy_score', 'XGBClassifier', 'accuracy_score', 'XGBClassifier']Dict:{'sklearnex': [], 'numpy': ['mean', 'max', 'abs', 'sum', 'round', 'min', 'unique'], 'pandas': ['isna', 'unique', 'read_csv'], 'sklearn': [], 'functools': [], 'optuna': [], 'warnings': [], 'os': [], 'gc': [], 'scipy': ['mode'], 'xgboost': []} axis_0: 0, axis_1: 7
tips-for-making-the-informative-visualization.py : [] ['matplotlib.pyplot'] []Dict:{'matplotlib': []} axis_0: 0, axis_1: 0
nn-feature-engineering-with-genetic-programming.py : ['read_csv', 'items', 'replace', 'factorize', 'replace', 'factorize', 'items', 'replace', 'unique', 'items', 'replace', 'astype', 'replace', 'replace', 'replace', 'unique', 'replace', 'replace', 'astype', 'astype', 'items', 'replace', 'replace', 'replace', 'replace', 'apply', 'replace', 'replace', 'unique', 'astype', 'replace', 'replace', 'fillna', 'apply', 'replace', 'replace', 'replace', 'astype', 'to_datetime', 'to_datetime', 'apply', 'to_datetime', 'factorize', 'factorize', 'factorize', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'std', 'groupby', 'std', 'groupby', 'std', 'groupby', 'std', 'groupby', 'astype', 'astype', 'drop', 'pop', 'pop', 'pop', 'head', 'to_numpy', 'transform', 'where', 'mean'] ['tqdm', 'numpy', 'pandas', 'warnings', 'matplotlib.pyplot'] ['StandardScaler', 'display', 'Model', '*', 'ReduceLROnPlateau', 'EarlyStopping', 'nflrush']Dict:{'tqdm': ['std'], 'numpy': ['mean', 'where', 'unique', 'std'], 'pandas': ['to_datetime', 'factorize', 'unique', 'read_csv'], 'warnings': [], 'sklearn': ['transform'], 'IPython': [], 'keras': [], 'matplotlib': [], 'kaggle': []} axis_0: 1, axis_1: 0
awesome-ds-for-beginners-with-titanic-exploration.py : ['read_csv', 'head', 'describe', 'hist', 'unique', 'head', 'head', 'head', 'sort_values', 'groupby', 'mean', 'head', 'any', 'isnull', 'dropna', 'reset_index', 'head', 'drop', 'head', 'astype', 'map', 'astype', 'map', 'dropna', 'head', 'apply', 'head', 'head', 'to_csv'] ['pandas'] []Dict:{'pandas': ['unique', 'read_csv', 'isnull']} axis_0: 0, axis_1: 3
eda-preprocessing-processing-evaluation.py : ['read_csv', 'read_csv', 'head', 'describe', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'describe', 'describe', 'value_counts', 'value_counts', 'describe', 'join', 'value_counts', 'items', 'value_counts', 'describe', 'describe', 'concat', 'describe', 'describe', 'describe', 'describe', 'describe', 'describe', 'describe', 'describe', 'describe', 'drop', 'boxplot', 'head', 'describe', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'describe', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'describe', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'describe', 'describe', 'value_counts', 'describe', 'join', 'head', 'value_counts', 'items', 'head', 'value_counts', 'value_counts', 'head', 'head', 'replace', 'replace', 'replace', 'replace', 'join', 'head', 'head', 'replace', 'replace', 'replace', 'replace', 'join', 'concat', 'describe', 'describe', 'describe', 'describe', 'concat', 'describe', 'describe', 'describe', 'head', 'head', 'head', 'head', 'concat', 'describe', 'describe', 'describe', 'describe', 'describe', 'items', 'items', 'items', 'items', 'items', 'concat', 'items', 'concat', 'describe', 'describe', 'describe', 'describe', 'describe', 'join', 'value_counts', 'items', 'describe', 'hist', 'head', 'head', 'replace', 'replace', 'replace', 'replace', 'join', 'head', 'value_counts', 'value_counts', 'items', 'describe', 'describe'] ['pandas', 'numpy', 'matplotlib.pyplot', 'collections', 'warnings', 'matplotlib.pyplot'] ['twosigmanews', 'datetime', 'WordCloud', 'WordCloud', 'WordCloud', 'Counter', 'Counter']Dict:{'pandas': ['concat', 'read_csv', 'value_counts'], 'numpy': [], 'matplotlib': ['boxplot', 'hist'], 'collections': ['items'], 'warnings': [], 'kaggle': [], 'datetime': ['replace'], 'wordcloud': []} axis_0: 1, axis_1: 6
disaster-tweets-feature-engineering-and-svc.py : ['read_csv', 'head', 'read_csv', 'head', 'join', 'join', 'drop', 'drop', 'sum', 'isnull', 'sort_values', 'fillna', 'fillna', 'fillna', 'fillna', 'join', 'drop', 'transform', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'warnings', 'matplotlib.pyplot', 'seaborn', 'nltk'] ['WordCloud', 'TweetTokenizer', 'WordNetLemmatizer', 'CountVectorizer', 'train_test_split', 'classification_report', 'plot_confusion_matrix', 'SVC']Dict:{'numpy': ['sum'], 'pandas': ['read_csv', 'isnull'], 'warnings': [], 'matplotlib': [], 'seaborn': [], 'wordcloud': [], 'nltk': [], 'sklearn': []} axis_0: 0, axis_1: 3
mm-ncaaw-lgb-xgb-regr.py : ['read_csv', 'read_csv', 'drop', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'map', 'map', 'read_csv', 'rename', 'rename', 'reset_index', 'concat', 'reset_index', 'sum', 'groupby', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'drop', 'rename', 'copy', 'reset_index', 'concat', 'read_csv', 'copy', 'map', 'map', 'map', 'read_csv', 'read_csv', 'rename', 'rename', 'reset_index', 'concat', 'reset_index', 'sum', 'groupby', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'map', 'map', 'drop', 'drop', 'mean', 'std', 'head', 'sort_values', 'astype', 'round', 'unique', 'sum', 'astype', 'astype', 'unique', 'unique', 'head', 'info', 'hist', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'eli5', 'lightgbm', 'xgboost', 'gc', 'warnings'] ['LogisticRegression', 'LinearRegression', 'StandardScaler', 'shuffle', 'GridSearchCV', 'KFold', 'train_test_split', 'preprocessing', 'confusion_matrix']Dict:{'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'numpy': ['mean', 'sum', 'round', 'unique', 'info', 'std', 'copy'], 'matplotlib': ['hist'], 'seaborn': [], 'eli5': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'gc': [], 'warnings': []} axis_0: 0, axis_1: 13
text-classification-tf-idf-vs-word2vec-vs-bert.py : ['join', 'read_csv', 'sort_values', 'count', 'groupby', 'reset_index', 'sub', 'join', 'apply', 'head', 'transform', 'unique', 'sort_values', 'unique', 'unique', 'join'] ['numpy', 'pandas', 'os', 'json', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 're', 'nltk', 'gensim', 'gensim.downloader', 'transformers'] ['feature_extraction', 'model_selection', 'naive_bayes', 'pipeline', 'manifold', 'preprocessing', 'lime_text', 'models', 'layers', 'preprocessing', 'backend', 'feature_selection', 'metrics', 'accuracy_score', 'classification_report', 'confusion_matrix', 'plot_confusion_matrix', 'plot_decision_regions']Dict:{'numpy': ['unique'], 'pandas': ['unique', 'read_csv'], 'os': [], 'json': [], 'matplotlib': [], 'seaborn': [], 're': ['sub'], 'nltk': [], 'sklearn': [], 'lime': [], 'gensim': [], 'tensorflow': [], 'transformers': [], 'mlxtend': []} axis_0: 0, axis_1: 0
advance-regression-house-price-prediction-top-2.py : ['read_csv', 'read_csv', 'head', 'head', 'describe', 'info', 'info', 'sort_values', 'sum', 'isna', 'sort_values', 'sum', 'isna', 'concat', 'sort_values', 'sum', 'isna', 'sort_values', 'sum', 'isna', 'concat', 'drop', 'select_dtypes', 'head', 'select_dtypes', 'head', 'drop', 'drop', 'select_dtypes', 'select_dtypes', 'boxplot', 'melt', 'map', 'skew', 'kurt', 'corr', 'bool', 'corr', 'reset_index', 'drop', 'reset_index', 'concat', 'astype', 'astype', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'update', 'fillna', 'update', 'fillna', 'transform', 'groupby', 'fillna', 'mode', 'sort_values', 'sum', 'isna', 'sum', 'select_dtypes', 'sort_values', 'apply', 'boxplot', 'boxplot', 'value_counts', 'value_counts', 'value_counts', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'assign', 'select_dtypes', 'select_dtypes', 'get_dummies', 'concat', 'drop', 'quantile', 'quantile', 'drop', 'drop', 'value_counts', 'drop', 'drop', 'transform', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'array', 'keys', 'read_csv', 'quantile', 'quantile', 'apply', 'apply', 'to_csv'] ['warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['StandardScaler', 'MinMaxScaler', 'PolynomialFeatures', 'RobustScaler', 'train_test_split', 'LinearRegression', 'Lasso', 'Ridge', 'ElasticNet', 'LassoCV', 'RidgeCV', 'ElasticNetCV', 'RFE', 'GridSearchCV', 'KFold', 'RandomizedSearchCV', 'StratifiedKFold', 'cross_val_score', 'r2_score', 'skew', 'boxcox_normmax', 'boxcox1p', 'make_pipeline', 'mean_squared_error', 'SVR', 'GradientBoostingRegressor', 'XGBRFRegressor', 'XGBRegressor', 'LGBMRegressor', 'StackingCVRegressor', 'RandomForestRegressor', 'AdaBoostRegressor', 'BaggingRegressor', 'ExtraTreesRegressor']Dict:{'warnings': [], 'numpy': ['mean', 'median', 'quantile', 'sum', 'array', 'info', 'std'], 'pandas': ['isna', 'read_csv', 'melt', 'concat', 'value_counts', 'get_dummies', 'array'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'scipy': [], 'xgboost': [], 'lightgbm': [], 'mlxtend': []} axis_0: 0, axis_1: 11
eda-weird-images-with-new-updates.py : ['read_csv', 'read_csv', 'head', 'sort_values', 'head', 'sort_values', 'head', 'sort_values', 'head', 'sort_values', 'sum', 'idxmax', 'idxmax', 'idxmax', 'sample', 'filter', 'min', 'median', 'max', 'filter', 'filter', 'filter'] ['seaborn', 'matplotlib.pyplot', 'numpy', 'pandas', 'gc', 'os', 'PIL'] ['stats', 'Pool', 'ImageOps', 'ImageFilter', 'tqdm', 'WordCloud']Dict:{'seaborn': [], 'matplotlib': [], 'numpy': ['median', 'sum', 'max', 'min'], 'pandas': ['read_csv'], 'gc': [], 'os': [], 'PIL': [], 'scipy': [], 'multiprocessing': [], 'tqdm': [], 'wordcloud': []} axis_0: 1, axis_1: 0
jpx-eda-feature-engineering-options.py : ['read_csv', 'read_csv', 'head', 'read_csv', 'value_counts', 'astype', 'read_csv', 'join', 'unique', 'read_csv', 'isin', 'pivot', 'corr', 'pivot', 'mean', 'groupby', 'mean', 'groupby', 'rename', 'unstack', 'sum', 'groupby', 'rename', 'unstack', 'sum', 'groupby', 'to_datetime', 'astype', 'to_datetime', 'astype', 'map', 'to_datetime', 'to_datetime', 'astype', 'map', 'to_datetime', 'map', 'to_datetime', 'astype', 'map', 'to_datetime', 'to_datetime', 'max', 'hist', 'hist', 'mean', 'groupby', 'mean', 'groupby', 'to_datetime', 'to_datetime', 'sum', 'sum', 'sum', 'sum', 'mean', 'groupby', 'groupby', 'astype', 'set_index', 'array', 'astype', 'set_index', 'array', 'to_parquet', 'to_parquet', 'mean', 'std'] ['jpx_tokyo_market_prediction', 'numpy', 'pandas', 'matplotlib.pyplot', 'pickle', 'mibian'] ['tqdm', 'datetime']Dict:{'jpx_tokyo_market_prediction': [], 'numpy': ['mean', 'max', 'sum', 'array', 'unique', 'isin', 'std'], 'pandas': ['to_datetime', 'read_csv', 'value_counts', 'unique', 'array', 'pivot'], 'matplotlib': ['hist'], 'tqdm': [], 'datetime': ['max'], 'pickle': [], 'mibian': []} axis_0: 0, axis_1: 0
simple-and-intermediate-eda-modeling-for-titanic.py : ['join', 'read_csv', 'read_csv', 'head', 'value_counts', 'sum', 'isna', 'isna', 'info', 'describe', 'value_counts', 'select_dtypes', 'unique', 'drop', 'corr', 'crosstab', 'reset_index', 'isnull', 'replace', 'replace', 'replace', 'fillna', 'mode', 'mean', 'std', 'sum', 'isnull', 'copy', 'astype', 'fillna', 'mean', 'max', 'max', 'count', 'count', 'get_dummies', 'head', 'drop', 'sum', 'isna', 'sum', 'isna', 'drop', 'mean', 'mean', 'items', 'read_csv', 'astype', 'drop', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'os'] ['DecisionTreeClassifier', 'RandomForestClassifier', 'KNeighborsClassifier', 'make_pipeline', 'SelectKBest', 'f_classif', 'RandomForestClassifier', 'AdaBoostClassifier', 'SVC', 'PolynomialFeatures', 'StandardScaler', 'train_test_split', 'f1_score', 'confusion_matrix', 'classification_report', 'learning_curve', 'GridSearchCV', 'RandomizedSearchCV']Dict:{'numpy': ['mean', 'max', 'sum', 'unique', 'info', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'value_counts', 'get_dummies', 'unique', 'crosstab'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': [], 'os': ['replace']} axis_0: 0, axis_1: 2
semi-supervised-classification-using-autoencoders.py : ['read_csv', 'apply', 'head', 'reset_index', 'value_counts', 'apply', 'rename', 'sample', 'reset_index', 'sample', 'drop', 'where', 'where', 'where', 'where', 'drop', 'add', 'add', 'add', 'read_csv', 'read_csv', 'apply', 'apply', 'apply', 'apply', 'fillna', 'fillna', 'median', 'qcut', 'mean', 'std', 'sum', 'isnull', 'astype', 'cut', 'apply', 'replace', 'replace', 'replace', 'replace', 'astype', 'map', 'map', 'fillna', 'astype', 'map', 'astype', 'drop', 'drop', 'drop', 'drop', 'transform', 'transform', 'add', 'add', 'add', 'read_csv', 'to_csv', 'head'] ['matplotlib.pyplot', 'pandas', 'numpy', 'seaborn', 're'] ['Input', 'Dense', 'Model', 'Sequential', 'regularizers', 'train_test_split', 'LogisticRegression', 'classification_report', 'accuracy_score', 'TSNE', 'preprocessing', 'display', 'Image', 'HTML']Dict:{'keras': [], 'sklearn': [], 'matplotlib': [], 'pandas': ['read_csv', 'isnull', 'cut', 'value_counts', 'qcut'], 'numpy': ['mean', 'median', 'add', 'sum', 'where', 'std'], 'seaborn': [], 'IPython': [], 're': [], '': []} axis_0: 0, axis_1: 2
amex-lgbm-feature-engineering.py : ['read_csv', 'round', 'head', 'sort_values', 'agg', 'groupby', 'set_index', 'tail', 'groupby', 'concat', 'drop', 'sort_index', 'set_index', 'tail', 'groupby', 'concat', 'array', 'array', 'sum', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'read_csv', 'mean', 'to_csv'] ['gc', 'numpy', 'pandas', 'seaborn', 'lightgbm', 'matplotlib.pyplot'] ['StratifiedKFold', 'train_test_split', 'LGBMClassifier', 'early_stopping', 'log_evaluation']Dict:{'gc': [], 'numpy': ['mean', 'sum', 'round', 'array', 'cumsum'], 'pandas': ['concat', 'array', 'read_csv'], 'seaborn': [], 'lightgbm': [], 'matplotlib': [], 'sklearn': []} axis_0: 1, axis_1: 4
pubg-finish-placement-prediction-playground.py : ['product', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'info', 'sort_values', 'sum', 'isnull', 'dropna', 'drop', 'describe', 'nunique', 'value_counts', 'first', 'groupby', 'apply', 'value_counts', 'first', 'groupby', 'query', 'describe', 'groupby', 'groupby', 'count', 'groupby', 'describe', 'groupby', 'concat', 'groupby', 'groupby', 'concat', 'describe', 'groupby', 'describe', 'groupby', 'nlargest', 'nunique', 'unique', 'unique', 'unique', 'unique', 'sort_values', 'reset_index', 'count', 'groupby', 'astype', 'sort_index', 'value_counts', 'hist', 'hist', 'query', 'head', 'min', 'head', 'max', 'any', 'nunique', 'groupby', 'copy', 'max', 'cut', 'mean', 'groupby', 'hist', 'unique', 'query', 'copy', 'cut', 'mean', 'groupby', 'hist', 'describe', 'groupby', 'copy', 'cut', 'mean', 'groupby', 'sort_values', 'min', 'copy', 'cut', 'mean', 'groupby', 'hist', 'concat', 'describe', 'sum', 'groupby', 'describe', 'sum', 'groupby', 'copy', 'cut', 'mean', 'groupby', 'hist', 'copy', 'astype', 'mean', 'groupby', 'hist', 'copy', 'astype', 'mean', 'groupby', 'hist', 'concat', 'describe', 'describe', 'copy', 'cut', 'mean', 'groupby', 'hist', 'copy', 'cut', 'mean', 'groupby', 'hist', 'head', 'query', 'copy', 'cut', 'mean', 'groupby', 'hist', 'copy', 'cut', 'quantile', 'quantile', 'quantile', 'astype', 'astype', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'query', 'mean', 'query', 'mean', 'concat', 'crosstab', 'apply', 'apply', 'crosstab', 'apply', 'apply', 'describe', 'nunique', 'max', 'groupby', 'groupby', 'unique', 'concat', 'head', 'head', 'groupby', 'sum', 'groupby', 'sum', 'concat', 'describe', 'describe', 'nlargest', 'nlargest', 'groupby', 'mean', 'min', 'max', 'corr', 'sum', 'sum', 'sum', 'unique', 'count', 'groupby', 'reset_index', 'reset_index', 'groupby', 'rank', 'rank', 'rank', 'select_dtypes', 'fillna', 'drop', 'drop', 'drop', 'drop', 'groupby', 'groupby', 'reset_index', 'concat', 'rename', 'sum', 'rename', 'max', 'rename', 'mean', 'merge', 'reset_index', 'rename', 'sum', 'copy', 'reset_index', 'first', 'groupby', 'sort_values', 'rank', 'groupby', 'merge', 'head', 'reset_index', 'concat', 'mean', 'rename', 'max', 'rename', 'min', 'select_dtypes', 'merge', 'drop', 'groupby', 'rename', 'rank', 'concat', 'groupby', 'reset_index', 'rename', 'max', 'merge', 'drop', 'copy', 'groupby', 'rank', 'merge', 'copy', 'groupby', 'rank', 'merge', 'nunique', 'drop', 'apply', 'concat', 'get_dummies', 'drop', 'apply', 'apply', 'sort_values', 'sum', 'isnull', 'factorize', 'head', 'reset_index', 'notnull', 'reset_index', 'drop', 'isnull', 'pop', 'copy', 'drop', 'drop', 'reset_index', 'sort_values', 'max', 'groupby', 'rank', 'concat', 'clip', 'describe', 'read_csv', 'apply', 'apply', 'merge', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'itertools', 'gc', 'os', 'sys', 'lightgbm'] ['GroupKFold', 'minmax_scale']Dict:{'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'get_dummies', 'factorize', 'unique', 'notnull', 'merge', 'crosstab'], 'numpy': ['mean', 'product', 'quantile', 'any', 'max', 'sum', 'min', 'unique', 'clip', 'info', 'copy'], 'matplotlib': ['hist'], 'seaborn': [], 'itertools': ['count', 'product', 'groupby'], 'gc': [], 'os': ['rename'], 'sys': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 23
playgrounds3e15-eda-baseline.py : [] [] []Dict:{} axis_0: 6, axis_1: 3
ps3e14-eda-transformers-ensemble.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'drop', 'concat', 'reset_index', 'head', 'count', 'mean', 'median', 'mean', 'median', 'hist', 'hist', 'min', 'max', 'std', 'std', 'min', 'max', 'std', 'std', 'nunique', 'max', 'max', 'min', 'min', 'nunique', 'boxplot', 'corr', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'concat', 'concat', 'mean', 'mean', 'drop', 'drop', 'nunique', 'transform', 'array', 'array', 'array', 'mean', 'groupby', 'to_dict', 'map', 'map', 'mean', 'get_dummies', 'value_counts', 'idxmin', 'drop', 'concat', 'drop', 'duplicated', 'transform', 'array', 'array', 'array', 'mean', 'groupby', 'to_dict', 'map', 'map', 'mean', 'astype', 'astype', 'nunique', 'max', 'mean', 'mean', 'transform', 'transform', 'concat', 'concat', 'drop', 'drop', 'corr', 'drop', 'drop', 'corr', 'abs', 'corr', 'transform', 'transform', 'concat', 'concat', 'array', 'array', 'array', 'mean', 'groupby', 'to_dict', 'map', 'map', 'mean', 'drop', 'drop', 'transform', 'drop', 'copy', 'mean', 'abs', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'array', 'array', 'keys', 'items', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'read_csv', 'to_csv'] ['sys', 'sklearn', 'numpy', 'os', 'pandas', 'matplotlib.pyplot', 'missingno', 'seaborn', 'random', 'gc', 'xgboost', 'statsmodels.api', 'math', 'seaborn', 'optuna', 'xgboost', 'lightgbm', 'warnings', 'tensorflow', 'keras'] ['PrettyTable', 'deepcopy', 'partial', 'combinations', 'KMeans', 'KElbowVisualizer', 'uniform', 'f_classif', 'LabelEncoder', 'StandardScaler', 'metrics', 'GridSearchCV', 'RandomizedSearchCV', 'train_test_split', 'mean_squared_error', 'mean_squared_log_error', 'mean_absolute_error', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'FunctionTransformer', 'PCA', 'TruncatedSVD', 'stats', 'variance_inflation_factor', 'BaseEstimator', 'TransformerMixin', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StratifiedKFold', 'KFold', 'PassiveAggressiveRegressor', 'ARDRegression', 'RidgeCV', 'ElasticNetCV', 'TheilSenRegressor', 'RANSACRegressor', 'HuberRegressor', 'HistGradientBoostingRegressor', 'ExtraTreesRegressor', 'GradientBoostingRegressor', 'RandomForestRegressor', 'DecisionTreeRegressor', 'LinearRegression', 'CatBoost', 'CatBoostRegressor', 'Pool', 'KNeighborsRegressor', 'combinations', 'Sequential', 'Dense', 'LeakyReLU', 'PReLU', 'ELU', 'Dropout', 'backend']Dict:{'sys': [], 'sklearn': [], 'numpy': ['mean', 'median', 'std', 'max', 'add', 'abs', 'min', 'array', 'copy'], 'os': [], 'pandas': ['read_csv', 'concat', 'value_counts', 'get_dummies', 'array'], 'matplotlib': ['boxplot', 'hist'], 'missingno': [], 'prettytable': ['copy'], 'seaborn': ['boxplot'], 'copy': [], 'functools': [], 'itertools': [], 'yellowbrick': [], 'random': [], 'gc': [], 'xgboost': [], 'scipy': [], 'statsmodels': [], 'math': [], 'optuna': [], 'lightgbm': [], 'category_encoders': [], 'imblearn': [], 'catboost': [], 'warnings': [], 'tensorflow': ['abs', 'add', 'concat'], 'keras': []} axis_0: 4, axis_1: 6
detailed-examination-for-house-price-top-10.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'tail', 'info', 'describe', 'corr', 'to_dict', 'sort_values', 'items', 'boxplot', 'head', 'tail', 'info', 'describe', 'concat', 'head', 'sum', 'isnull', 'concat', 'fillna', 'transform', 'groupby', 'interpolate', 'astype', 'fillna', 'transform', 'groupby', 'interpolate', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'apply', 'apply', 'apply', 'apply', 'apply', 'fillna', 'transform', 'sort_values', 'apply', 'head', 'head', 'get_dummies', 'sum', 'isnull', 'concat', 'interpolate', 'interpolate', 'corr', 'head', 'sort_values', 'to_dict', 'sort_values', 'items', 'boxplot', 'head', 'skew', 'kurt', 'skew', 'kurt', 'cumsum', 'concat', 'drop', 'corr', 'head', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'head', 'drop', 'value_counts', 'drop', 'drop', 'transform', 'transform', 'transform', 'reset_index', 'concat', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'warnings', 'os'] ['skew', 'boxcox1p', 'boxcox_normmax', 'boxcox', 'inv_boxcox', 'MLPRegressor', 'train_test_split', 'RandomizedSearchCV', 'KFold', 'GridSearchCV', 'r2_score', 'mean_absolute_error', 'mean_squared_error', 'StandardScaler', 'RobustScaler', 'LabelEncoder', 'PowerTransformer', 'GradientBoostingRegressor', 'StackingRegressor', 'RandomForestRegressor', 'ExtraTreesRegressor', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'KFold', 'cross_val_score', 'make_pipeline', 'DecisionTreeRegressor', 'DBSCAN', 'NearestNeighbors', 'PCA']Dict:{'numpy': ['info', 'sum', 'cumsum'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'scipy': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'lightgbm': [], 'xgboost': [], 'sklearn': ['transform'], 'warnings': [], 'os': []} axis_0: 3, axis_1: 7
godaddy-with-autogluon-automl-lb-1-0944.py : ['read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'to_datetime', 'to_numpy', 'astype', 'min', 'max', 'min', 'to_numpy', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'groupby', 'to_numpy', 'sum', 'mean', 'copy', 'shift', 'groupby', 'shift', 'groupby', 'to_numpy', 'notna', 'reset_index', 'sort_values', 'transform', 'groupby', 'transform', 'groupby', 'shift', 'groupby', 'to_numpy', 'diff', 'groupby', 'to_numpy', 'sample', 'to_numpy', 'max', 'min', 'max', 'copy', 'copy', 'to_numpy', 'to_numpy', 'groupby', 'to_numpy', 'to_numpy', 'to_csv'] ['os', 'warnings', 'sys', 'numpy', 'torch', 'pandas', 'matplotlib.pyplot'] ['tqdm', 'TabularDataset', 'TabularPredictor']Dict:{'os,warnings,sys': [], 'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'diff', 'copy'], 'torch': ['mean', 'max', 'sum', 'concat', 'min', 'unique', 'diff'], 'tqdm': [], 'pandas': ['read_csv', 'concat', 'notna', 'unique', 'to_datetime'], 'autogluon': [], 'matplotlib': []} axis_0: 0, axis_1: 0
ps-s3e12-global-optimisation.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'concat', 'head', 'cut', 'get_dummies', 'concat', 'drop', 'drop', 'transform', 'items', 'copy', 'round', 'round', 'to_csv', 'copy', 'to_csv', 'keys', 'read_csv', 'rename', 'concat', 'keys', 'read_csv', 'rename', 'concat', 'head', 'sum', 'max', 'keys', 'squeeze', 'copy', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'itertools', 'warnings', 'plotly.express', 'time', 'umap', 'eli5'] ['SMOTE', 'minimize', 'train_test_split', 'GridSearchCV', 'RandomizedSearchCV', 'StratifiedKFold', 'PredefinedSplit', 'accuracy_score', 'confusion_matrix', 'recall_score', 'precision_score', 'f1_score', 'roc_auc_score', 'plot_confusion_matrix', 'plot_roc_curve', 'roc_curve', 'StandardScaler', 'MinMaxScaler', 'OneHotEncoder', 'LabelEncoder', 'mutual_info_classif', 'PCA', 'ColumnTransformer', 'Pipeline', 'SimpleImputer', 'PermutationImportance', 'resample', 'LinearRegression', 'LogisticRegression', 'KNeighborsClassifier', 'SVC', 'DecisionTreeClassifier', 'RandomForestClassifier', 'ExtraTreesClassifier', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'GaussianNB']Dict:{'numpy': ['squeeze', 'max', 'sum', 'round', 'copy'], 'pandas': ['concat', 'get_dummies', 'cut', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'imblearn': [], 'itertools': [], 'warnings': [], 'plotly': [], 'time': [], 'umap': [], 'scipy': [], 'sklearn': [], 'eli5': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 1, axis_1: 7
pg-s3-e20-eda-modeling.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'head', 'describe', 'sum', 'isna', 'sum', 'isna', 'nunique', 'count', 'describe', 'concat', 'assign', 'assign', 'boxplot', 'boxplot', 'corr', 'join', 'join', 'apply', 'apply', 'unique', 'map', 'map', 'apply', 'mean', 'isnull', 'drop', 'fillna', 'mean', 'bfill', 'ffill', 'groupby', 'fillna', 'shift', 'groupby', 'apply', 'apply', 'isin', 'fillna', 'concat', 'drop', 'copy', 'concat', 'corr', 'sort_values', 'drop', 'mean', 'mean', 'mean', 'read_csv', 'insert', 'apply', 'unique', 'copy', 'max', 'head', 'copy', 'array', 'head', 'array', 'copy', 'copy', 'copy', 'copy', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['pandas', 'numpy', 'geopandas', 'datetime', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'optuna', 'haversine', 'warnings', 're'] ['haversine', 'f_oneway', 'StandardScaler', 'LabelEncoder', 'KMeans', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'roc_auc_score', 'accuracy_score', 'confusion_matrix', 'ConfusionMatrixDisplay', 'RocCurveDisplay', 'classification_report', 'RFECV', 'SVC', 'RandomForestRegressor', 'RandomForestClassifier', 'XGBRegressor', 'XGBClassifier', 'CatBoostRegressor', 'CatBoostClassifier', 'Lasso', 'Ridge', 'LogisticRegression', 'GradientBoostingRegressor', 'GradientBoostingClassifier', 'LGBMClassifier', 'LGBMRegressor', 'RepeatedStratifiedKFold', 'StratifiedKFold', 'KFold', 'TimeSeriesSplit', 'GroupKFold', 'LeaveOneGroupOut', 'KNNImputer', 'SimpleImputer', 'ExtraTreesRegressor', 'RandomForestRegressor', 'GradientBoostingRegressor', 'HistGradientBoostingRegressor', 'VotingRegressor', 'StackingRegressor', 'AdaBoostRegressor', 'KNeighborsRegressor', 'Ridge', 'Lasso', 'HuberRegressor', 'PLSRegression', 'MLPRegressor', 'mean_squared_error', 'roc_auc_score', 'roc_curve', 'euclidean_distances', 'Pipeline', 'make_pipeline', 'BaseEstimator', 'TransformerMixin', 'ClassifierMixin', 'FunctionTransformer', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'ColumnTransformer', 'CalibratedClassifierCV', 'dendrogram', 'linkage', 'squareform', 'XGBRegressor', 'LGBMRegressor', 'CatBoostRegressor', 'Style', 'Fore']Dict:{'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'unique', 'array'], 'numpy': ['mean', 'max', 'sum', 'array', 'unique', 'isin', 'insert', 'copy'], 'geopandas': [], 'haversine': [], 'datetime': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'scipy': [], 'sklearn': [], 'optuna': [], 'xgboost': ['apply'], 'catboost': [], 'lightgbm': [], 'warnings': [], 're': [], 'colorama': []} axis_0: 3, axis_1: 9
towards-tf-idf-in-logs-features.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'describe', 'hist', 'value_counts', 'count', 'groupby', 'boxplot', 'describe', 'reset_index', 'max', 'groupby', 'merge', 'value_counts', 'head', 'merge', 'head', 'reset_index', 'mean', 'groupby', 'boxplot', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'any', 'isna', 'drop', 'drop', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'head', 'head', 'merge', 'merge', 'any', 'isna', 'merge', 'head', '__len__', '__len__', 'mean', 'mean', 'head', 'mean', 'head', 'to_csv', 'mean', 'sort_values', 'mean', 'head', 'mean', 'to_csv'] ['gc', 'os', 'itertools', 'pickle', 're', 'time', 'warnings', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'optuna', 'random'] ['choice', 'choices', 'reduce', 'tqdm', 'cycle', 'venn2', 'Counter', 'reduce', 'tqdm', 'cycle', 'stats', 'skew', 'kurtosis', 'metrics', 'model_selection', 'preprocessing', 'linear_model', 'ensemble', 'decomposition', 'tree', 'defaultdict', 'LabelEncoder']Dict:{'gc': [], 'os': ['rename'], 'itertools': [], 'pickle': [], 're': [], 'time': [], 'warnings': [], 'random': [], 'functools': [], 'tqdm': ['__len__'], 'numpy': ['mean', 'any', 'max', 'abs', 'sum', 'unique', 'std'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'matplotlib_venn': [], 'collections': ['items', 'keys', '__len__'], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'optuna': []} axis_0: 4, axis_1: 6
moa-pca-feature-engineering-keras-neural-net.py : ['read_csv', 'read_csv', 'reset_index', 'drop', 'reset_index', 'read_csv', 'drop', 'map', 'map', 'map', 'map', 'quantile', 'clip', 'quantile', 'clip', 'concat', 'concat', 'transform', 'transform', 'transform', 'transform', 'concat', 'concat', 'drop', 'mean', 'clip', 'read_csv', 'to_csv'] ['sys', 'numpy', 'pandas', 'matplotlib.pyplot', 'tensorflow', 'tensorflow.keras.layers', 'tensorflow_addons'] ['MultilabelStratifiedKFold', 'tqdm_notebook', 'LabelEncoder', 'PCA']Dict:{'sys': [], 'iterstrat': [], 'numpy': ['mean', 'quantile', 'clip'], 'pandas': ['concat', 'read_csv'], 'matplotlib': [], 'tqdm': [], 'sklearn': ['transform'], 'tensorflow': [], 'tensorflow_addons': []} axis_0: 5, axis_1: 5
3-simple-ideas-ensemble.py : ['read_csv', 'read_csv', 'unique', 'unique', 'value_counts', 'unique', 'reset_index', 'median', 'boxplot', 'melt', 'unique', 'reset_index', 'median', 'boxplot', 'melt', 'nunique', 'median', 'nunique', 'median', 'mean', 'std', 'median', 'mean', 'std', 'median', 'astype', 'round', 'clip', 'astype', 'round', 'clip', 'astype', 'round', 'clip', 'astype', 'round', 'clip', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'copy', 'copy', 'sort_values', 'astype', 'round', 'clip', 'mean', 'mean', 'mean', 'read_csv', 'array', 'round', 'to_csv', 'head'] ['numpy', 'pandas', 'lightgbm', 'xgboost', 'matplotlib.pyplot', 'seaborn', 'time', 'datetime'] ['*', 'f1_score', 'Pool', 'CatBoostRegressor', 'KFold']Dict:{'numpy': ['mean', 'median', 'array', 'round', 'unique', 'clip', 'isin', 'std', 'copy'], 'pandas': ['read_csv', 'melt', 'concat', 'value_counts', 'unique', 'array'], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'time': [], 'datetime': []} axis_0: 1, axis_1: 1
zzzs-viz-for-non-wear-events.py : ['read_parquet', 'astype', 'apply', 'to_datetime', 'tz_localize', 'copy', 'set_index', 'resample', 'merge', 'unique', 'agg', 'rolling', 'agg', 'rolling', 'astype', 'mean', 'rolling', 'sort_index', 'sort_index', 'diff', 'astype', 'apply', 'to_datetime', 'tz_localize', 'sort_values', 'set_index', 'clip', 'agg', 'rolling', 'astype', 'agg', 'rolling', 'astype', 'agg', 'rolling', 'astype', 'agg', 'rolling', 'agg', 'rolling', 'astype', 'astype', 'astype', 'abs', 'diff', 'astype', 'agg', 'rolling', 'astype', 'max', 'rolling', 'reset_index', 'read_csv', 'apply', 'to_datetime', 'tz_localize', 'apply', 'groupby', 'sum', 'isna', 'ffill', 'merge', 'ffill', 'merge', 'ffill', 'merge', 'ffill', 'merge', 'select_dtypes'] ['numpy', 'pandas', 'plotly.graph_objects', 'gc', 'warnings'] ['simplefilter']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['isna', 'read_csv', 'read_parquet', 'unique', 'merge', 'to_datetime'], 'plotly': [], 'gc': [], 'warnings': []} axis_0: 0, axis_1: 0
tpsapr22-lgbm-lstm.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'value_counts', 'unique', 'info', 'transpose', 'describe', 'rename', 'concat', 'corr', 'merge', 'drop', 'corr', 'drop', 'boxplot', 'pivot_table', 'set_index', 'drop_duplicates', 'sum', 'sort_values', 'query', 'query', 'transpose', 'describe', 'transpose', 'describe', 'agg', 'groupby', 'drop_duplicates', 'transpose', 'describe', 'transpose', 'describe', 'isin', 'transpose', 'describe', 'isin', 'transpose', 'describe', 'pivot_table', 'reset_index', 'nunique', 'groupby', 'drop_duplicates', 'sum', 'transpose', 'describe', 'transpose', 'describe', 'astype', 'astype', 'astype', 'astype', 'drop_duplicates', 'concat', 'abs', 'set_index', 'drop_duplicates', 'agg', 'groupby', 'mean', 'median', 'join', 'join', 'add_prefix', 'groupby', 'rank', 'nunique', 'groupby', 'merge', 'droplevel', 'apply', 'groupby', 'concat', 'set_index', 'drop_duplicates', 'agg', 'groupby', 'mean', 'median', 'join', 'join', 'add_prefix', 'groupby', 'rank', 'nunique', 'groupby', 'merge', 'clip', 'concat', 'drop', 'concat', 'rename', 'drop', 'corr', 'std', 'copy', 'where', 'drop', 'drop', 'corr', 'query', 'rank', 'groupby', 'query', 'rename', 'concat', 'any', 'drop', 'transform', 'concat', 'mean', 'to_csv', 'rename', 'reset_index'] ['numpy', 'pandas', 'gc', 'seaborn', 'matplotlib.pyplot'] ['iqr', 'skew', 'kurtosis', 'mode', 'rfft', 'filterwarnings', 'colored', 'BaseEstimator', 'TransformerMixin', 'Pipeline', 'DataFrameMapper', 'gen_features', 'FunctionTransformer', 'RobustScaler', 'StandardScaler', 'GridSearchCV', 'GroupKFold', 'cross_val_score', 'PCA', 'precision_score', 'recall_score', 'f1_score', 'roc_auc_score', 'accuracy_score', 'DecisionTreeClassifier', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier']Dict:{'numpy': ['transpose', 'mean', 'median', 'any', 'abs', 'sum', 'where', 'unique', 'clip', 'isin', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'pivot_table', 'concat', 'value_counts', 'unique', 'merge'], 'scipy': [], 'warnings': [], 'termcolor': [], 'gc;': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'sklearn': [], 'sklearn_pandas': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 9, axis_1: 8
tps-sep-2021-null-eda.py : ['read_csv', 'read_csv', 'astype', 'isnull', 'count', 'astype', 'isnull', 'count', 'sum', 'isnull', 'to_dict', 'count', 'groupby', 'items', 'keys', 'keys', 'sum', 'isnull', 'to_dict', 'count', 'groupby', 'items', 'keys', 'keys', 'copy', 'corr', 'items', 'to_dict', 'value_counts', 'copy', 'to_dict', 'value_counts', 'keys', 'copy', 'fillna', 'mean', 'to_dict', 'value_counts', 'keys', 'copy', 'fillna', 'to_dict', 'value_counts', 'keys', 'copy', 'to_dict', 'value_counts', 'keys', 'copy', 'to_dict', 'value_counts', 'keys', 'items', 'to_dict', 'value_counts', 'keys', 'apply', 'apply', 'to_dict', 'value_counts', 'keys'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 'gc'] ['StratifiedKFold', 'classification_report', 'LGBMClassifier', 'roc_auc_score', 'confusion_matrix', 'enable_iterative_imputer', 'IterativeImputer']Dict:{'pandas': ['value_counts', 'read_csv', 'isnull'], 'numpy': ['mean', 'sum', 'copy'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': [], 'lightgbm': [], 'gc': []} axis_0: 0, axis_1: 2
combining-your-model-with-a-model-without-outlier.py : ['head', 'head', 'sort_values', 'read_csv', 'merge', 'head', 'to_csv'] ['numpy', 'pandas', 'time', 'lightgbm'] ['StratifiedKFold', 'KFold', 'mean_squared_error', 'log_loss']Dict:{'numpy': [], 'pandas': ['merge', 'read_csv'], 'time': [], 'lightgbm': [], 'sklearn': []} axis_0: 2, axis_1: 0
house-price-prediction-regression-model.py : ['join', 'read_csv', 'head', 'describe', 'sum', 'isnull', 'round', 'mean', 'isnull', 'copy', 'where', 'isnull', 'mean', 'groupby', 'head', 'unique', 'mean', 'groupby', 'copy', 'unique', 'copy', 'median', 'groupby', 'copy', 'hist', 'copy', 'unique', 'copy', 'unique', 'boxplot', 'unique', 'copy', 'median', 'groupby', 'read_csv', 'head', 'sum', 'isnull', 'round', 'mean', 'isnull', 'copy', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'round', 'mean', 'isnull', 'median', 'where', 'isnull', 'fillna', 'head', 'head'] ['numpy', 'pandas', 'os', 'pandas', 'numpy', 'seaborn', 'matplotlib.pyplot'] []Dict:{'numpy': ['mean', 'median', 'sum', 'where', 'round', 'unique', 'copy'], 'pandas': ['unique', 'read_csv', 'isnull'], 'os': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist']} axis_0: 0, axis_1: 1
feature-engineering-aggregation-functions.py : ['read_csv', 'read_csv', 'read_csv', 'isin', 'unique', 'median', 'mean', 'std', 'max', 'min', 'std', 'max', 'min', 'mean', 'std', 'var', 'sum', 'abs', 'mean', 'std', 'abs', 'mean', 'median', 'max', 'min', 'sum', 'max', 'sum', 'min', 'unique', 'sum', 'max', 'sum', 'min', 'unique', 'sum', 'diff', 'sum', 'abs', 'sum', 'sum', 'abs', 'sum', 'abs', 'sum', 'sum', 'unique', 'max', 'max', 'min', 'max', 'min', 'min', 'max', 'min', 'mean', 'sum', 'sum', 'sum', 'mean', 'abs', 'diff', 'median', 'mean', 'std', 'mean', 'std', 'var', 'skew', 'kurtosis', 'mean', 'sum', 'abs', 'diff', 'max', 'mean', 'max', 'mean', 'mean', 'where', 'mean', 'where', 'unique', 'sum', 'value_counts', 'sum', 'unique', 'sum', 'unique', 'sum', 'unique', 'dot', 'quantile', 'where', 'diff', 'max', 'max', 'min', 'sum', 'sum', 'groupby', 'to_parquet', 'to_parquet', 'sort_values', 'read_csv', 'to_csv'] ['random', 'seaborn', 'numpy', 'pandas', 'lightgbm', 'warnings', 'matplotlib.pyplot', 'glob', 'os', 'gc'] ['figure']Dict:{'random': [], 'seaborn': [], 'numpy': ['mean', 'median', 'quantile', 'max', 'var', 'abs', 'sum', 'where', 'min', 'unique', 'dot', 'isin', 'diff', 'std'], 'pandas': ['unique', 'read_csv', 'value_counts'], 'lightgbm': [], 'warnings': [], 'matplotlib': [], 'glob': [], 'os': [], 'gc': []} axis_0: 1, axis_1: 0
exploratory-tutorial-titanic.py : ['read_csv', 'read_csv', 'describe', 'tail', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sum', 'isnull', 'sum', 'isnull', 'boxplot', 'isnull', 'isnull', 'hist', 'isnull', 'isnull', 'head', 'value_counts', 'isnull', 'concat', 'isnull', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'map', 'isnull', 'factorize', 'map', 'sum', 'drop', 'get_dummies', 'drop', 'isnull', 'isnull', 'value_counts', 'drop', 'isnull', 'isnull', 'value_counts', 'where', 'where', 'drop', 'drop', 'get_dummies', 'get_dummies', 'mean', 'std', 'mean', 'std', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'sklearn.linear_model', 'matplotlib.pyplot', 're', 'xgboost', 'xgboost'] ['GridSearchCV', 'StandardScaler', 'train_test_split', 'mean_absolute_error', 'make_scorer', 'learning_curve', 'roc_curve', 'auc', 'accuracy_score', 'KNeighborsClassifier', 'RandomForestClassifier', 'LogisticRegression', 'SVC', 'VotingClassifier']Dict:{'numpy': ['mean', 'sum', 'where', 'isin', 'std'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'factorize', 'get_dummies'], 'sklearn': [], 'matplotlib': ['boxplot', 'hist'], 're': [], 'xgboost': []} axis_0: 0, axis_1: 11
zzz-in-depth-explore-spectrograms-fast-ai.py : ['update', 'sum', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'nunique', 'describe', 'sum', 'sum', 'isna', 'reset_index', 'sort_values', 'reset_index', 'sum', 'isnull', 'read_parquet', 'head', 'read_parquet', 'head', 'reset_index', 'std', 'groupby', 'reset_index', 'std', 'groupby', 'copy', 'to_datetime', 'set_index', 'reset_index', 'sort_values', 'diff', 'dropna', 'boxplot', 'reset_index', 'astype', 'reset_index', 'astype', 'isin', 'unique', 'merge', 'where', 'fillna', 'eq', 'fillna', 'notna', 'drop', 'head', 'head', 'to_parquet', 'to_parquet'] ['os', 're', 'gc', 'wandb', 'random', 'math', 'warnings', 'pandas', 'numpy', 'seaborn', 'matplotlib', 'matplotlib.patches', 'matplotlib.pyplot', 'matplotlib.image', 'matplotlib.dates'] ['glob', 'tqdm', 'time', 'is_string_dtype', 'is_numeric_dtype', 'spectrogram', 'cm', 'MaxNLocator', 'AnnotationBbox', 'OffsetImage', 'UserSecretsClient', 'add_datepart']Dict:{'os': [], 're': [], 'gc': [], 'wandb': [], 'random': [], 'math': [], 'glob': [], 'tqdm': ['update'], 'time': [], 'warnings': [], 'pandas': [], 'numpy': ['sum', 'where', 'unique', 'isin', 'diff', 'std', 'copy'], 'scipy': [], 'seaborn': ['boxplot'], 'matplotlib': ['update'], 'kaggle_secrets': [], 'fastai': []} axis_0: 0, axis_1: 0
flavours-of-physics-basic-model.py : ['read_csv', 'read_csv', 'max', 'max', 'min', 'min', 'to_csv'] ['lightgbm', 'pandas', 'numpy'] ['train_test_split']Dict:{'lightgbm': [], 'pandas': ['read_csv'], 'numpy': ['min', 'max'], 'sklearn': []} axis_0: 0, axis_1: 4
playground-series-february-21.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'info', 'sum', 'sum', 'isna', 'sum', 'isna', 'select_dtypes', 'describe', 'select_dtypes', 'describe', 'sum', 'duplicated', 'duplicated', 'drop', 'select_dtypes', 'value_counts', 'select_dtypes', 'corr', 'join', 'drop', 'drop', 'copy', 'copy', 'drop', 'drop', 'transform', 'reset_index', 'drop', 'round', 'mean', 'abs', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 're', 'sys', 'gc', 'os', 'shap', 'featuretools', 'matplotlib.pyplot', 'seaborn', 'catboost', 'lightgbm'] ['display', 'stats', 'tqdm', 'KFold', 'LinearRegression', 'LinearSVR', 'train_test_split', 'KFold', 'mean_squared_error', 'mean_absolute_error', 'ColumnTransformer', 'MinMaxScaler', 'Normalizer', 'MaxAbsScaler', 'StandardScaler', 'PowerTransformer', 'QuantileTransformer', 'LabelEncoder', 'OneHotEncoder', 'OrdinalEncoder', 'XGBRegressor']Dict:{'numpy': ['mean', 'abs', 'sum', 'round', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'value_counts'], 're': [], 'sys,': [], 'gc,': [], 'os': [], 'IPython': [], 'scipy': ['describe'], 'shap': [], 'featuretools': [], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'sklearn': [], 'catboost': [], 'lightgbm': [], 'xgboost': []} axis_0: 1, axis_1: 11
riiid-answer-correctness-prediction-lgbm.py : ['drop', 'groupby', 'copy', 'agg', 'groupby', 'copy', 'agg', 'read_csv', 'concat', 'to_numeric', 'to_numeric', 'to_numeric', 'to_numeric', 'to_numeric', 'to_numeric', 'astype', 'drop', 'fillna', 'merge', 'info', 'fillna', 'apply', 'merge', 'merge', 'drop', 'fillna', 'sort_values', 'info', 'info', 'fillna', 'apply', 'cumsum', 'groupby', 'assign', 'diff', 'diff', 'apply', 'merge', 'merge', 'fillna'] ['numpy', 'pandas', 'category_encoders', 'gc', 'datatable', 'lightgbm', 'matplotlib.pyplot', 'riiideducation'] ['LabelEncoder', 'preprocessing', 'metrics', 'roc_auc_score']Dict:{'numpy': ['info', 'copy', 'cumsum', 'diff'], 'pandas': ['concat', 'to_numeric', 'merge', 'read_csv'], 'category_encoders': [], 'gc': [], 'sklearn': [], 'datatable': [], 'lightgbm': [], 'matplotlib': [], 'riiideducation': []} axis_0: 0, axis_1: 1
stacking-house-prices-walkthrough-to-top-5.py : ['read_csv', 'read_csv', 'drop', 'drop', 'head', 'drop', 'reset_index', 'concat', 'drop', 'sum', 'isnull', 'sort_values', 'drop', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'sum', 'isnull', 'drop', 'drop', 'sum', 'isnull', 'drop', 'corr', 'boxplot', 'map', 'unique', 'boxplot', 'map', 'unique', 'boxplot', 'map', 'unique', 'boxplot', 'get_dummies', 'head', 'boxplot', 'cut', 'unique', 'astype', 'drop', 'get_dummies', 'head', 'boxplot', 'get_dummies', 'head', 'boxplot', 'map', 'drop', 'boxplot', 'cut', 'unique', 'astype', 'drop', 'get_dummies', 'head', 'boxplot', 'cut', 'unique', 'astype', 'drop', 'get_dummies', 'head', 'boxplot', 'cut', 'unique', 'astype', 'drop', 'get_dummies', 'head', 'boxplot', 'cut', 'unique', 'astype', 'drop', 'get_dummies', 'head', 'boxplot', 'map', 'drop', 'drop', 'boxplot', 'boxplot', 'boxplot', 'map', 'unique', 'boxplot', 'boxplot', 'boxplot', 'map', 'unique', 'boxplot', 'cut', 'unique', 'astype', 'drop', 'get_dummies', 'head', 'boxplot', 'astype', 'get_dummies', 'head', 'boxplot', 'astype', 'get_dummies', 'head', 'boxplot', 'map', 'get_dummies', 'head', 'boxplot', 'boxplot', 'boxplot', 'drop', 'cut', 'unique', 'astype', 'drop', 'get_dummies', 'head', 'boxplot', 'get_dummies', 'head', 'boxplot', 'map', 'unique', 'boxplot', 'get_dummies', 'head', 'boxplot', 'get_dummies', 'head', 'boxplot', 'boxplot', 'apply', 'drop', 'get_dummies', 'head', 'boxplot', 'get_dummies', 'head', 'boxplot', 'drop', 'boxplot', 'map', 'unique', 'boxplot', 'get_dummies', 'head', 'boxplot', 'get_dummies', 'head', 'boxplot', 'qcut', 'unique', 'astype', 'drop', 'get_dummies', 'head', 'boxplot', 'get_dummies', 'head', 'boxplot', 'boxplot', 'cut', 'unique', 'astype', 'drop', 'get_dummies', 'head', 'boxplot', 'map', 'unique', 'get_dummies', 'head', 'boxplot', 'map', 'unique', 'get_dummies', 'head', 'boxplot', 'apply', 'cut', 'astype', 'drop', 'get_dummies', 'head', 'boxplot', 'apply', 'cut', 'unique', 'astype', 'drop', 'get_dummies', 'head', 'boxplot', 'apply', 'drop', 'boxplot', 'drop', 'boxplot', 'get_dummies', 'head', 'boxplot', 'get_dummies', 'head', 'boxplot', 'get_dummies', 'head', 'boxplot', 'boxplot', 'map', 'map', 'apply', 'drop', 'get_dummies', 'head', 'boxplot', 'boxplot', 'qcut', 'unique', 'astype', 'drop', 'get_dummies', 'head', 'boxplot', 'get_dummies', 'head', 'boxplot', 'get_dummies', 'head', 'boxplot', 'map', 'get_dummies', 'head', 'boxplot', 'map', 'apply', 'drop', 'boxplot', 'drop', 'boxplot', 'get_dummies', 'head', 'boxplot', 'get_dummies', 'head', 'boxplot', 'map', 'drop', 'head', 'boxplot', 'map', 'unique', 'boxplot', 'map', 'unique', 'boxplot', 'map', 'get_dummies', 'head', 'boxplot', 'drop', 'boxplot', 'get_dummies', 'head', 'boxplot', 'get_dummies', 'head', 'boxplot', 'map', 'get_dummies', 'head', 'boxplot', 'get_dummies', 'head', 'skew', 'skew', 'sort_values', 'apply', 'dropna', 'copy', 'copy', 'transform', 'transform', 'mean', 'mean', 'apply', 'apply', 'pop', 'mean', 'apply', 'apply', 'pop', 'insert', 'insert', 'pop', 'head', 'head', 'drop', 'drop', 'pop', 'insert', 'pop', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'warnings', 'xgboost', 'xgboost', 'xgboost'] ['HTML', 'Image', 'display', 'stats', 'skew', 'norm', 'boxcox1p', 'pearsonr', 'ElasticNet', 'Lasso', 'BayesianRidge', 'LassoLarsIC', 'RandomForestRegressor', 'GradientBoostingRegressor', 'ExtraTreesRegressor', 'KernelRidge', 'make_pipeline', 'RobustScaler', 'StandardScaler', 'LabelEncoder', 'SelectFromModel', 'SelectKBest', 'chi2', 'model_selection', 'KFold', 'cross_val_score', 'train_test_split', 'GridSearchCV', 'ShuffleSplit']Dict:{'IPython': [], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'get_dummies', 'unique', 'qcut'], 'numpy': ['mean', 'median', 'sum', 'unique', 'insert', 'copy'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': [], 'sklearn': [], 'xgboost': [], 'warnings': []} axis_0: 0, axis_1: 35
dataiteam-titanic-eda.py : ['join', 'read_csv', 'read_csv', 'head', 'describe', 'info', 'value_counts', 'value_counts', 'hist', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'items', 'reset_index', 'drop', 'reset_index', 'concat', 'head', 'any', 'isnull', 'sum', 'isnull', 'isnull', 'boxplot', 'fillna', 'isnull', 'isnull', 'fillna', 'mean', 'isnull', 'corr', 'map', 'map', 'hist', 'map', 'map', 'isnull', 'corr', 'isnull', 'median', 'median', 'isnull', 'head', 'head', 'replace', 'head', 'drop', 'head', 'get_dummies', 'head', 'head', 'head', 'head', 'get_dummies', 'head', 'head', 'get_dummies', 'head', 'head', 'replace', 'replace', 'replace', 'replace', 'head', 'head', 'get_dummies', 'head', 'astype', 'get_dummies', 'head', 'astype', 'get_dummies', 'head', 'drop', 'drop', 'head', 'drop', 'astype', 'concat', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'os'] ['Counter', 'train_test_split', 'StratifiedKFold', 'GridSearchCV', 'LogisticRegression', 'SVC', 'RandomForestClassifier', 'VotingClassifier', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'accuracy_score']Dict:{'numpy': ['mean', 'median', 'any', 'sum', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'collections': ['items'], 'warnings': [], 'os': ['replace'], 'sklearn': []} axis_0: 0, axis_1: 0
comprehensive-python-and-d3-js-favorita-analytics.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'any', 'isnull', 'any', 'isnull', 'any', 'isnull', 'any', 'isnull', 'head', 'head', 'value_counts', 'value_counts', 'unique', 'pivot', 'dropna', 'groupby', 'unstack', 'groupby', 'unstack', 'head', 'groupby', 'unstack', 'head', 'read_json', 'unique', 'head', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'update', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'update', 'head', 'groupby', 'unstack', 'head'] ['IPython.display', 'json', 'pandas', 'seaborn', 'squarify', 'missingno', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'numpy'] ['pyplot', 'display', 'HTML', 'Javascript', 'Template']Dict:{'IPython': [], 'json': [], 'pandas': ['read_csv', 'isnull', 'read_json', 'value_counts', 'unique', 'pivot'], 'seaborn': [], 'squarify': [], 'missingno': [], 'plotly': [], 'numpy': ['unique', 'any'], 'matplotlib': [], 'string': []} axis_0: 0, axis_1: 0
enefit-xgboost-starter.py : ['head', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'read_csv', 'join', 'to_datetime', 'to_datetime', 'round', 'astype', 'merge', 'reset_index', 'agg', 'groupby', 'apply', 'drop', 'rename', 'tz_localize', 'to_datetime', 'round', 'astype', 'merge', 'reset_index', 'agg', 'groupby', 'to_datetime', 'merge', 'merge', 'merge', 'merge', 'merge', 'astype', 'copy', 'merge', 'reset_index', 'notnull', 'isin', 'isin', 'sort_values', 'to_datetime', 'rename', 'merge', 'rename', 'insert', 'pop', 'copy', 'copy'] ['pandas', 'numpy', 'json', 'seaborn', 'matplotlib.pyplot', 'xgboost', 'lightgbm', 'torch', 'enefit'] ['Fore', 'Style', 'init', 'Nominatim']Dict:{'pandas': ['notnull', 'merge', 'to_datetime', 'read_csv'], 'numpy': ['round', 'insert', 'isin', 'copy'], 'json': [], 'seaborn': [], 'matplotlib': [], 'colorama': [], 'xgboost': [], 'lightgbm': [], 'torch': ['round', 'isin'], 'geopy': [], '=': [], 'pd': [], 'clf': [], "'importance':": [], 'importance_data': [], 'ascending=False)': [], 'enefit': []} axis_0: 0, axis_1: 1
tps-dec-2021-visualization-with-t-sne.py : ['join', 'read_csv', 'drop', 'rename', 'abs', 'abs', 'apply', 'apply', 'mean', 'max', 'min', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'drop'] ['numpy', 'pandas', 'gc', 'matplotlib.pyplot', 'os'] ['LogisticRegression', 'accuracy_score', 'KFold', 'RobustScaler', 'TSNE']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'min'], 'pandas': ['read_csv'], 'cuml': [], 'sklearn': [], 'gc': [], 'matplotlib': [], 'os': ['rename']} axis_0: 0, axis_1: 6
pg-s3-e17-eda-modeling.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'concat', 'drop', 'drop', 'head', 'describe', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'corr', 'drop', 'head', 'replace', 'replace', 'drop', 'drop', 'mean', 'mean', 'mean', 'apply', 'mean', 'apply', 'mean', 'apply', 'mean', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'lightgbm', 'optuna.integration.lightgbm', 'matplotlib.pyplot', 'seaborn', 'numpy', 'scipy.stats', 'math', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'warnings', 'lightgbm', 'optuna'] ['preprocessing', 'MinMaxScaler', 'StandardScaler', 'MaxAbsScaler', 'RobustScaler', 'PowerTransformer', 'QuantileTransformer', 'OrdinalEncoder', 'LabelEncoder', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'RFE', 'RFECV', 'permutation_importance', 'mean_absolute_error', 'mean_squared_error', 'mean_squared_log_error', 'r2_score', 'roc_curve', 'confusion_matrix', 'classification_report', 'accuracy_score', 'auc', 'roc_auc_score', 'GaussianNB', 'LogisticRegression', 'tree', 'RandomForestClassifier', 'SVC', 'XGBClassifier', 'CatBoostClassifier', 'LGBMClassifier', 'DecisionTreeClassifier', 'KNeighborsClassifier', 'VotingClassifier', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'SVC', 'Style', 'Fore', 'OneHotEncoder', 'StandardScaler', 'SMOTE']Dict:{'numpy': ['transpose', 'sum', 'mean'], 'pandas': ['concat', 'read_csv', 'isnull'], 'os': ['replace'], 'lightgbm': [], 'optuna': [], 'matplotlib': [], 'seaborn': [], 'scipy': ['describe'], 'math': [], 'sklearn': [], 'plotly': [], 'warnings': [], 'xgboost': ['apply'], 'catboost': [], 'colorama': [], 'imblearn': [], 'tqdm': []} axis_0: 0, axis_1: 1
jane-eda-feature-selection.py : ['read_csv', 'read_csv', 'head', 'head', 'sort_values', 'sum', 'isna', 'value_counts', 'cumsum', 'mean', 'mean', 'mean', 'mean', 'std', 'std', 'std', 'std', 'min', 'min', 'min', 'min', 'corr', 'corr', 'fillna', 'fillna', 'mean', 'cumsum', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'drop', 'drop', 'drop', 'sample', 'fillna', 'drop', 'sample'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'shap'] ['PCA', 'RobustScaler', 'RandomForestClassifier', 'KMeans']Dict:{'pandas': ['isna', 'read_csv', 'value_counts'], 'numpy': ['mean', 'sum', 'min', 'std', 'cumsum'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'shap': []} axis_0: 6, axis_1: 10
kidney-stone-eda-prediction-7-model-2-nn.py : ['read_csv', 'drop', 'drop', 'boxplot', 'value_counts', 'corr', 'drop', 'corr', 'sort_values', 'drop', 'drop', 'sort_values', 'nlargest', 'transform', 'read_csv', 'transform', 'head', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'xgboost', 'lightgbm', 'catboost', 'tensorflow', 'warnings'] ['train_test_split', 'StandardScaler', 'SMOTE', 'accuracy_score', 'classification_report', 'confusion_matrix', 'LogisticRegression', 'SVC', 'RandomForestClassifier', 'GradientBoostingClassifier', 'MLPClassifier', 'StackingCVClassifier', 'keras', 'layers', 'Adam', 'EarlyStopping', 'ReduceLROnPlateau']Dict:{'pandas': ['read_csv', 'value_counts'], 'numpy': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'sklearn': [], 'imblearn': [], 'mlxtend': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'tensorflow': [], 'warnings': []} axis_0: 0, axis_1: 2
feature-engineering-by-k-means.py : ['read_csv', 'read_csv', 'info', 'sum', 'isnull', 'sum', 'isnull', 'head', 'head', 'value_counts', 'value_counts', 'value_counts', 'fillna', 'median', 'fillna', 'median', 'drop', 'drop', 'fillna', 'fillna', 'median', 'head', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'drop', 'drop', 'drop', 'drop', 'join', 'get_dummies', 'join', 'get_dummies', 'join', 'get_dummies', 'join', 'get_dummies', 'drop', 'drop', 'concat', 'drop', 'drop', 'array', 'drop', 'drop', 'head', 'drop', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'numpy'] ['StratifiedKFold', 'KMeans', 'xmeans', 'kmeans_plusplus_initializer', 'draw_clusters', 'AdaBoostClassifier', 'BaggingClassifier', 'ExtraTreesClassifier', 'GradientBoostingClassifier', 'RandomForestClassifier', 'VotingClassifier']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'array'], 'matplotlib': [], 'numpy': ['median', 'info', 'array', 'sum'], 'sklearn': [], 'pyclustering': []} axis_0: 1, axis_1: 12
feature-engineering-and-forward-feature-selection.py : ['join', 'read_csv', 'read_csv', 'drop', 'isna', 'keys', 'apply', 'apply', 'get', 'get', 'get', 'get', 'isin', 'value_counts', 'value_counts', 'isin', 'value_counts', 'value_counts', 'isin', 'value_counts', 'value_counts', 'isin', 'value_counts', 'value_counts', 'fillna', 'fillna', 'fillna', 'fillna', 'map', 'map', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'map', 'map', 'map', 'map', 'map', 'drop', 'apply', 'apply', 'concat', 'to_dict', 'value_counts', 'map', 'astype', 'map', 'astype', 'astype', 'astype', 'astype', 'astype', 'concat', 'to_dict', 'agg', 'groupby', 'astype', 'map', 'astype', 'map', 'concat', 'rename', 'reset_index', 'agg', 'groupby', 'to_dict', 'astype', 'map', 'astype', 'map', 'fillna', 'fillna', 'reset_index', 'concat', 'cut', 'cut', 'astype', 'astype', 'concat', 'factorize', 'max', 'astype', 'astype', 'read_csv', 'read_csv', 'stack', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'math', 'matplotlib.pyplot', 'lightgbm', 'warnings', 'os'] ['LabelEncoder', 'KFold', 'train_test_split', 'mean_squared_error']Dict:{'pandas': ['isna', 'read_csv', 'cut', 'concat', 'value_counts', 'factorize'], 'numpy': ['isin', 'stack', 'max'], 'seaborn': [], 'sklearn': [], 'math': [], 'matplotlib': ['get'], 'lightgbm': [], 'warnings': [], 'os': ['rename']} axis_0: 2, axis_1: 2
natural-language-processing-nlp-for-beginners.py : ['transform', 'transform', 'read_csv', 'dropna', 'head', 'describe', 'describe', 'groupby', 'map', 'head', 'apply', 'head', 'describe', 'describe', 'join', 'join', 'head', 'apply', 'head', 'apply', 'update', 'apply', 'update', 'transform', 'transform', 'transform'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'string'] ['CountVectorizer', 'stopwords', 'Counter', 'train_test_split', 'CountVectorizer', 'TfidfTransformer', 'MultinomialNB', 'metrics', 'TfidfTransformer', 'Pipeline', 'LogisticRegression']Dict:{'pandas': ['read_csv'], 'numpy': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'string': [], 'nltk': [], 'collections': ['update']} axis_0: 0, axis_1: 1
house-prices-prediction-using-rfr.py : ['read_csv', 'read_csv', 'head', 'describe', 'skew', 'kurt', 'corr', 'corr', 'corr', 'sort_values', 'concat', 'drop', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'drop', 'max', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'head', 'fillna', 'fillna', 'mode', 'fillna', 'drop', 'max', 'sum', 'isnull', 'sort_values', 'apply', 'get_dummies', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'sklearn.metrics', 'math', 'seaborn', 'warnings'] ['preprocessing', 'norm', 'skew', 'RandomForestRegressor']Dict:{'numpy': ['sum', 'max'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'matplotlib': [], 'sklearn': ['apply'], 'math': [], 'scipy': [], 'seaborn': [], 'warnings': []} axis_0: 1, axis_1: 4
overfitting-the-private-leaderboard.py : ['head', 'head', 'sum', 'isnull', 'sum', 'isnull', 'count', 'isnull', 'concat', 'transpose', 'describe', 'value_counts', 'mean', 'mean', 'mean', 'mean', 'std', 'std', 'std', 'std', 'mean', 'mean', 'mean', 'mean', 'min', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'min', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'skew', 'skew', 'skew', 'skew', 'kurtosis', 'kurtosis', 'kurtosis', 'kurtosis', 'skew', 'skew', 'skew', 'skew', 'kurtosis', 'kurtosis', 'kurtosis', 'kurtosis', 'tail', 'head', 'head', 'head', 'mean', 'abs', 'concat', 'concat', 'concat', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv'] ['gc', 'os', 'logging', 'datetime', 'warnings', 'numpy', 'pandas', 'seaborn', 'lightgbm', 'matplotlib.pyplot'] ['tqdm_notebook', 'mean_squared_error', 'roc_auc_score', 'roc_curve', 'StratifiedKFold', 'signal', 'FastICA', 'PCA']Dict:{'gc': [], 'os': [], 'logging': [], 'datetime': [], 'warnings': [], 'numpy': ['transpose', 'mean', 'max', 'abs', 'sum', 'min', 'isin', 'std'], 'pandas': ['isnull', 'concat', 'value_counts'], 'seaborn': [], 'lightgbm': [], 'tqdm': [], 'matplotlib': [], 'sklearn': [], 'scipy': []} axis_0: 23, axis_1: 26
important-features-and-insights.py : ['read_csv', 'describe', 'sum', 'isnull', 'duplicated', 'value_counts', 'corr', 'corr', 'read_csv', 'head', 'drop', 'diff', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'head', 'head', 'read_csv', 'merge', 'tail', 'copy', 'pad', 'abs', 'abs', 'mean', 'drop', 'interpolate', 'interpolate', 'transform'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'matplotlib.style', 'warnings', 'plotly.offline', 'plotly.graph_objs', 'pycaret', 'sklearn', 'sklearn.preprocessing', 'sklearn.pipeline', 'sklearn.compose', 'numpy', 'scipy.signal', 'seaborn'] ['init_notebook_mode', 'iplot', 'gmean', '*', 'setup', 'compare_models', 'blend_models', 'finalize_model', 'predict_model', 'plot_model', 'PCA', 'classification_report', 'plot_confusion_matrix', 'TransformerMixin', 'BaseEstimator']Dict:{'numpy': ['mean', 'abs', 'sum', 'pad', 'diff', 'copy'], 'pandas': ['isnull', 'merge', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'plotly': [], 'scipy': [], 'pycaret': [], 'sklearn': []} axis_0: 0, axis_1: 3
openvaccine-eda-feature-engineering-with-forgi.py : ['read_json', 'join', 'read_json', 'join', 'read_csv', 'join', 'apply', 'min', 'apply', 'min', 'apply', 'min', 'apply', 'min', 'apply', 'min', 'apply', 'max', 'apply', 'max', 'apply', 'max', 'apply', 'max', 'apply', 'max', 'apply', 'mean', 'apply', 'mean', 'apply', 'mean', 'apply', 'mean', 'apply', 'mean', 'apply', 'std', 'apply', 'std', 'apply', 'std', 'apply', 'std', 'apply', 'std', 'reset_index', 'nunique', 'nunique', 'value_counts', 'reset_index', 'apply', 'apply', 'corr', 'isna', 'corr', 'isna', 'get', 'get', 'array', 'apply', 'drop', 'reset_index', 'concat', 'corr', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib.colors', 'seaborn', 'colorsys', 'math', 'forgi.graph.bulge_graph', 'forgi.visual.mplotlib', 'forgi.threedee.utilities.vector', 'forgi', 'RNA', 'os', 'warnings'] ['OneHotEncoder', 'cm']Dict:{'numpy': ['mean', 'max', 'std', 'min', 'array'], 'pandas': ['isna', 'read_csv', 'read_json', 'concat', 'value_counts', 'array'], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'colorsys': [], 'math': [], 'forgi': [], 'RNA': [], 'os': [], 'warnings': []} axis_0: 0, axis_1: 5
xgboost-with-minimal-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'head', 'reset_index', 'aggregate', 'groupby', 'head', 'reset_index', 'aggregate', 'groupby', 'head', 'reset_index', 'mean', 'groupby', 'head', 'reset_index', 'agg', 'groupby', 'mode', 'head', 'reset_index', 'agg', 'groupby', 'mode', 'head', 'merge', 'head', 'merge', 'head', 'merge', 'head', 'reset_index', 'agg', 'groupby', 'head', 'reset_index', 'agg', 'groupby', 'head', 'merge', 'head', 'reset_index', 'agg', 'groupby', 'head', 'reset_index', 'agg', 'groupby', 'head', 'merge', 'head', 'merge', 'head', 'merge', 'head', 'head', 'merge', 'head', 'head', 'merge', 'head', 'fillna', 'set_index', 'drop', 'head', 'head', 'drop', 'set_index', 'head', 'reset_index', 'reset_index', 'head', 'merge', 'merge', 'merge', 'merge', 'set_index', 'set_index', 'drop', 'astype', 'astype', 'head', 'reset_index', 'head', 'read_csv', 'head', 'merge', 'head', 'drop', 'astype', 'head', 'itertuples', 'reset_index', 'head', 'to_csv'] ['pandas', 'gc', 'xgboost'] ['stats', 'stats']Dict:{'pandas': ['merge', 'read_csv'], 'gc': [], 'scipy': ['mode'], 'xgboost': []} axis_0: 0, axis_1: 4
tpsjun21-feature-engineering.py : ['read_csv', 'read_csv', 'info', 'head', 'info', 'head', 'drop', 'value_counts', 'drop', 'value_counts', 'describe', 'drop', 'describe', 'drop', 'corr', 'drop', 'info', 'sort_index', 'value_counts'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] []Dict:{'numpy': ['info'], 'pandas': ['read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 5
comprehensive-data-exploration-with-python.py : ['read_csv', 'describe', 'skew', 'kurt', 'concat', 'concat', 'concat', 'boxplot', 'concat', 'boxplot', 'corr', 'nlargest', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'drop', 'drop', 'isnull', 'max', 'sum', 'isnull', 'concat', 'sort_values', 'drop', 'drop', 'concat', 'get_dummies'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'warnings'] ['norm', 'StandardScaler', 'stats']Dict:{'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'numpy': ['sum', 'max'], 'scipy': ['describe', 'skew'], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 7
the-fallacy-of-encoding-assetcode.py : ['drop', 'assign', 'drop', 'join', 'array', 'cumprod', 'date_range', 'product', 'head', 'set_index', 'sort_values', 'reset_index', 'assign', 'reset_index', 'apply', 'groupby', 'shift', 'assign', 'reset_index', 'apply', 'groupby', 'shift', 'assign', 'reset_index', 'apply', 'groupby', 'shift', 'assign', 'reset_index', 'apply', 'groupby', 'shift', 'assign', 'reset_index', 'apply', 'groupby', 'shift', 'dropna', 'reset_index'] ['numpy', 'lightgbm', 'matplotlib.pyplot', 'pandas', 'shap', 'random', 'string', 'itertools'] ['preprocessing', 'twosigmanews']Dict:{'numpy': ['array', 'product', 'cumprod'], 'lightgbm': [], 'matplotlib': [], 'pandas': ['date_range', 'array'], 'shap': [], 'sklearn': [], 'kaggle': [], 'random;': [], 'random': [], 'string': [], 'itertools': ['product', 'groupby']} axis_0: 1, axis_1: 2
tps-april-tensorflow-bi-lstm.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'info', 'info', 'describe', 'merge', 'shift', 'groupby', 'fillna', 'to_numpy', 'drop', 'drop', 'transform', 'transform', 'unique', 'squeeze', 'squeeze', 'mean', 'to_csv'] ['numpy', 'pandas', 'os', 'tensorflow', 'time', 'logging', 'gc', 'matplotlib.pyplot'] ['RobustScaler', 'StandardScaler', 'roc_auc_score', '*', '*', '*', 'KFold', 'GroupKFold', 'AUC']Dict:{'numpy': ['mean', 'info', 'squeeze', 'unique'], 'pandas': ['merge', 'unique', 'read_csv'], 'os': [], 'tensorflow': [], 'time,': [], 'logging,': [], 'gc': [], 'sklearn': [], 'matplotlib': []} axis_0: 0, axis_1: 2
updated-exponentially-weighted-ensemble.py : ['join', 'read_csv', 'sort_values', 'astype', 'head', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'read_csv', 'sort_values', 'astype', 'head', 'head', 'astype', 'to_csv', 'head'] ['numpy', 'pandas', 'os'] []Dict:{'numpy': [], 'pandas': ['read_csv'], 'os': []} axis_0: 0, axis_1: 0
starter-simple-models-xgb-lgb-cat.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'tail', 'info', 'sum', 'isnull', 'describe', 'corr', 'var', 'std', 'hist', 'boxplot', 'update', 'head', 'tail', 'info', 'describe', 'set_index', 'set_index', 'reset_index', 'concat', 'shift', 'shift', 'shift', 'shift', 'drop', 'to_datetime', 'astype', 'isin', 'astype', 'astype', 'astype', 'astype', 'astype', 'drop', 'drop', 'copy', 'head', 'copy', 'head', 'copy', 'head', 'copy', 'head', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['os', 'random', 'datetime', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'lightgbm', 'catboost', 'warnings'] ['XGBRegressor', 'LGBMRegressor', 'CatBoostRegressor', 'GridSearchCV']Dict:{'os': [], ',': [], 'random': [], 'datetime': [], 'numpy': ['var', 'sum', 'isin', 'info', 'std', 'copy'], 'pandas': ['concat', 'to_datetime', 'read_csv', 'isnull'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 1
foursquare-location-matching-xgboost.py : ['read_csv', 'to_string', 'sum', 'memory_usage', 'head', 'read_csv', 'to_string', 'sum', 'memory_usage', 'head', 'read_csv', 'to_string', 'sum', 'memory_usage', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'read_json', 'replace', 'replace', 'replace', 'replace', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'sort_values', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'drop', 'drop', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'to_string', 'skew', 'skew', 'apply', 'apply', 'drop', 'drop', 'min', 'max', 'min', 'min', 'max', 'min', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'to_string', 'sum', 'memory_usage', 'head', 'to_string', 'sum', 'memory_usage', 'head', 'drop', 'drop', 'to_string'] ['time', 'psutil', 'os', 'gc', 'math', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly', 'plotly.express', 'plotly.graph_objects', 'operator'] ['cos', 'asin', 'sqrt', 'pi', 'make_subplots', 'init_notebook_mode', 'iplot', 'train_test_split', 'KFold', 'cross_val_score', 'GridSearchCV', 'RepeatedStratifiedKFold', 'XGBClassifier', 'reduce', 'lru_cache']Dict:{'time,': [], 'psutil,': [], 'os,': [], 'gc': [], 'math': [], 'numpy': ['sum', 'max', 'min'], 'pandas': ['isna', 'read_json', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': [], 'xgboost': ['apply'], 'operator': [], 'functools': []} axis_0: 0, axis_1: 0
lstm-rnn-with-feature-engineering.py : ['reindex', 'groupby', 'groupby', 'sum', 'sum', 'fillna', 'agg', 'diff', 'astype', 'items', 'keys', 'sum', 'sum', 'sum', 'sum', 'sum', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'read_csv', 'isin', 'sort_values', 'tail', 'groupby', 'unique', 'read_csv', 'read_csv', 'sort_values', 'read_csv', 'apply', 'groupby', 'isin', 'unique', 'merge', 'tail', 'groupby', 'isin', 'unique', 'unique', 'merge', 'reset_index', 'isin', 'reset_index', 'apply', 'groupby', 'any', 'isin', 'concat', 'get_dummies', 'merge', 'isin', 'merge', 'isin', 'mean', 'std', 'mean', 'std', 'tail', 'groupby', 'tail', 'groupby', 'update', 'reset_index', 'astype', 'groupby', 'merge', 'copy', 'copy', '__init__', 'mode', 'mode', 'mode', 'mode', 'abs', 'add', 'add', 'items', 'apply', 'mode', 'to_csv'] ['datetime', 'gc', 'keras.backend', 'tensorflow', 'numpy', 'pandas', 'scipy'] ['Sequential', 'Dense', 'LSTM', 'Embedding', 'SpatialDropout1D', 'Masking', 'Bidirectional', 'Dropout', 'train_test_split', 'KFold', 'StratifiedKFold', 'datetime', '*', 'partial', 'metrics', 'Counter']Dict:{'keras': ['mean', 'any', 'abs', 'sum', 'std', 'update'], 'datetime': ['__init__'], 'sklearn': [], 'gc': [], 'tensorflow': ['add', 'abs', 'unique', 'concat'], 'numpy': ['mean', 'any', 'add', 'abs', 'sum', 'unique', 'isin', 'diff', 'std', 'copy'], 'pandas': ['read_csv', 'concat', 'get_dummies', 'unique', 'merge'], 'scipy': [], 'functools': ['__init__'], 'collections': ['items', 'keys', 'update', '__init__', 'copy']} axis_0: 2, axis_1: 2
house-prices-advanced-stacking-tutorial.py : ['reset_index', 'concat', 'drop', 'read_csv', 'read_csv', 'info', 'sample', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'apply', 'groupby', 'fillna', 'mode', 'apply', 'groupby', 'fillna', 'median', 'skew', 'kurt', 'mean', 'median', 'max', 'reset_index', 'sort_values', 'unstack', 'abs', 'corr', 'drop', 'rename', 'drop', 'drop', 'reset_index', 'sort_values', 'unstack', 'abs', 'corr', 'drop', 'rename', 'drop', 'drop', 'head', 'round', 'corr', 'drop', 'round', 'corr', 'drop', 'value_counts', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'drop', 'reset_index', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'drop', 'get_dummies', 'nunique', 'concat', 'drop', 'dropna', 'dropna', 'dropna', 'dropna', 'skew', 'kurt', 'skew', 'skew', 'keys', 'skew', 'keys', 'value_counts', 'drop', 'drop', 'drop', 'drop', 'items', 'mean', 'std', 'keys', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['datetime', 'probplot', 'boxcox1p', 'boxcox_normmax', 'RobustScaler', 'KFold', 'cross_val_score', 'mean_squared_error', 'make_pipeline', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'GradientBoostingRegressor', 'SVR', 'StackingCVRegressor', 'XGBRegressor', 'LGBMRegressor']Dict:{'datetime': ['max'], 'numpy': ['mean', 'median', 'max', 'abs', 'sum', 'round', 'info', 'std'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'mlxtend': [], 'xgboost': ['apply'], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 7
xgb-with-feature-engineering-lb-0-14482.py : ['read_csv', 'reset_index', 'concat', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'concat', 'read_csv', 'reset_index', 'sort_values', 'drop_duplicates', 'apply', 'astype', 'subtract', 'to_datetime', 'to_datetime', 'concat', 'merge', 'map', 'merge', 'drop', 'drop', 'sort_values', 'reset_index', 'drop_duplicates', 'sort_values', 'reset_index', 'drop_duplicates', 'read_csv', 'map', 'reset_index', 'concat', 'join', 'read_csv', 'reset_index', 'concat', 'merge', 'merge', 'astype', 'astype', 'astype', 'astype', 'fillna', 'fillna', 'clip', 'to_csv'] ['numpy', 'pandas', 'gc', 'xgboost', 'pandas', 'numpy', 'sklearn'] ['check_output', 'Pool', 'cpu_count', '*']Dict:{'numpy': ['subtract', 'clip'], 'pandas': ['concat', 'merge', 'to_datetime', 'read_csv'], 'subprocess': [], 'multiprocessing': [], 'gc;': [], 'gc': [], 'xgboost': [], 'sklearn': []} axis_0: 4, axis_1: 0
getting-started-with-tensorflow-decision-forests.py : ['apply', 'get', 'apply', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'join', 'read_csv', 'read_csv', 'head', 'describe', 'isnull', 'head', 'head', 'keys', 'keys', 'read_csv', 'to_csv', 'head'] ['os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'tensorflow', 'tensorflow_decision_forests'] []Dict:{'os': [], 'numpy': [], 'pandas': ['read_csv', 'isnull'], 'matplotlib': ['get'], 'seaborn': [], 'tensorflow': [], 'tensorflow_decision_forests': []} axis_0: 0, axis_1: 0
lb-57-2-ensemble-randomforest-svr-linear.py : ['abs', 'abs', 'abs', 'mean', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'head', 'reset_index', 'agg', 'groupby', 'head', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'head', 'merge', 'reset_index', 'agg', 'groupby', 'head', 'head', 'reset_index', 'agg', 'groupby', 'head', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'head', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'merge', 'merge', 'fillna', 'mean', 'drop', 'astype', 'drop', 'drop', 'drop', 'drop', 'drop_duplicates', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'apply'] ['numpy', 'pandas', 'pandas', 'warnings', 'amp_pd_peptide'] ['RandomForestRegressor', 'DecisionTreeRegressor', 'Lasso', 'train_test_split', 'GridSearchCV', 'RandomizedSearchCV', 'metrics', 'r2_score', 'mean_squared_error', 'make_scorer', 'confusion_matrix', 'precision_score', 'recall_score', 'classification_report', 'accuracy_score', 'StratifiedKFold', 'KFold', 'cross_val_score', 'MinMaxScaler', 'SVR']Dict:{'numpy': ['mean', 'abs'], 'pandas': ['merge', 'read_csv'], 'sklearn': [], 'warnings': [], 'amp_pd_peptide': []} axis_0: 0, axis_1: 0
titanic-machine-learning-logistic-regression.py : ['read_csv', 'read_csv', 'head', 'set_index', 'set_index', 'head', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sort_values', 'drop', 'drop', 'head', 'sum', 'isnull', 'value_counts', 'fillna', 'drop', 'sum', 'isnull', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'mean', 'groupby', 'corr', 'apply', 'apply', 'unique', 'info', 'map', 'head', 'drop', 'apply', 'select_dtypes', 'select_dtypes', 'get_dummies', 'concat', 'info', 'drop', 'transform', 'transform'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['SimpleImputer', 'train_test_split', 'StandardScaler', 'LogisticRegression', 'accuracy_score', 'confusion_matrix', 'classification_report', 'plot_confusion_matrix']Dict:{'numpy': ['mean', 'info', 'sum', 'unique'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique'], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 6
elo-merchant-category-recommendation-lgbm.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'agg', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'read_csv', 'map', 'map', 'to_datetime', 'astype', 'fillna', 'fillna', 'fillna', 'agg', 'groupby', 'merge', 'merge', 'head', 'to_datetime', 'to_datetime', 'astype', 'to_datetime', 'to_datetime', 'astype', 'read_csv', 'map', 'map', 'to_datetime', 'astype', 'fillna', 'fillna', 'fillna', 'agg', 'groupby', 'merge', 'merge', 'to_datetime', 'to_datetime', 'astype', 'to_datetime', 'to_datetime', 'astype', 'head', 'sum', 'isnull', 'sort_values', 'concat', 'sum', 'isnull', 'sort_values', 'concat', 'value_counts', 'mean', 'groupby', 'map', 'map', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'time', 'warnings', 'os', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'datetime', 'gc', 'lightgbm'] ['urllib', 'norm', 'skew', 'StandardScaler', 'shuffle', 'Pipeline', 'FeatureUnion', 'Lasso', 'mean_squared_log_error', 'mean_squared_error', 'r2_score', 'mean_absolute_error', 'train_test_split', 'metrics', 'confusion_matrix', 'reciprocal', 'uniform', 'StratifiedKFold', 'KFold', 'cross_val_score', 'cross_val_predict', 'cross_validate', 'GridSearchCV', 'RandomizedSearchCV', 'OneHotEncoder', 'LabelEncoder', 'feature_selection', 'model_selection', 'metrics', 'BaseEstimator', 'TransformerMixin', 'check_array', 'sparse']Dict:{'numpy': ['mean', 'isin', 'info', 'sum'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'merge', 'to_datetime'], 'os': [], 'time': [], 'warnings': [], 'six': [], 'matplotlib': [], 'seaborn': [], 'datetime': [], 'scipy': [], 'sklearn': [], 'gc': [], 'lightgbm': []} axis_0: 1, axis_1: 2
extensive-eda-feature-engineering-xgboost.py : ['to_markdown', 'head', 'info', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'merge', 'drop', 'to_csv', 'copy', 'head', 'describe', 'to_datetime', 'sort_values', 'min', 'max', 'reset_index', 'sort_values', 'head', 'boxplot', 'describe', 'min', 'max', 'quantile', 'quantile', 'where', 'min', 'max', 'boxplot', 'describe', 'quantile', 'where', 'min', 'max', 'reset_index', 'unique', 'reset_index', 'unique', 'reset_index', 'unique', 'unique', 'unique', 'unique', 'unique', 'apply', 'apply', 'unique', 'unique', 'nunique', 'reset_index', 'pivot_table', 'sum', 'sum', 'nunique', 'reset_index', 'pivot_table', 'sum', 'sum', 'reset_index', 'head', 'sort_values', 'reset_index', 'head', 'sort_values', 'nunique', 'reset_index', 'pivot_table', 'sum', 'sum', 'reset_index', 'head', 'sort_values', 'reset_index', 'head', 'sort_values', 'unique', 'reset_index', 'nunique', 'groupby', 'head', 'unique', 'reset_index', 'aggregate', 'groupby', 'reset_index', 'aggregate', 'groupby', 'pivot_table', 'sum', 'pivot_table', 'sum', 'reset_index', 'aggregate', 'groupby', 'reset_index', 'pivot_table', 'quantile', 'where', 'quantile', 'where', 'read_csv', 'read_csv', 'clip', 'array', 'unique', 'unique', 'astype', 'astype', 'astype', 'sort_values', 'reset_index', 'head', 'reset_index', 'concat', 'agg', 'groupby', 'reset_index', 'head', 'merge', 'fillna', 'clip', 'head', 'tail', 'copy', 'merge', 'fillna', 'drop', 'drop', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'fillna', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'fillna', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'fillna', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'fillna', 'drop', 'drop', 'drop', 'clip', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'matplotlib.gridspec', 'gc', 'time', 'os', 'warnings', 'xgboost', 'xgboost'] ['stats', 'colored', 'product', 'RandomForestRegressor', 'mean_squared_error']Dict:{'numpy': ['quantile', 'max', 'sum', 'where', 'min', 'unique', 'clip', 'info', 'array', 'copy'], 'pandas': ['read_csv', 'pivot_table', 'concat', 'unique', 'array', 'merge', 'to_datetime'], 'seaborn': ['boxplot'], 'matplotlib': ['copy'], 'scipy': ['describe'], 'termcolor': [], 'gc,time,os': [], 'warnings': [], 'itertools': [], 'sklearn': [], 'xgboost': []} axis_0: 1, axis_1: 2
tutorial-for-classification.py : ['read_csv', 'read_csv', 'head', 'sample', 'head', 'sample', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'value_counts', 'reset_index', 'value_counts', 'groupby', 'reset_index', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'head', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'groupby', 'reset_index', 'iterrows', 'value_counts', 'groupby', 'reset_index', 'iterrows', 'concat', 'head', 'astype', 'transform', 'astype', 'isna', 'isna', 'isna', 'isna', 'transpose', 'crosstab', 'replace', 'replace', 'replace', 'replace', 'mean', 'groupby', 'mean', 'groupby', 'value_counts', 'groupby', 'sort_values', 'reset_index', 'value_counts', 'groupby', 'sort_values', 'reset_index', 'mean', 'groupby', 'astype', 'map', 'dropna', 'median', 'isnull', 'astype', 'value_counts', 'groupby', 'reset_index', 'map', 'head', 'head', 'sort_values', 'crosstab', 'to_csv', 'to_csv', 'mean', 'sort_values', 'head', 'corr', 'astype', 'to_csv'] ['datetime', 'pandas', 'numpy', 'sys', 'os', 'random', 'matplotlib.pyplot', 'seaborn', 'plotly.graph_objs', 'plotly.figure_factory', 'scipy', 'xgboost'] ['Path', 'tools', 'download_plotlyjs', 'init_notebook_mode', 'plot', 'iplot', 'train_test_split', 'KFold', 'GridSearchCV', 'metrics', 'roc_auc_score', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'CatBoostClassifier', 'SVC', 'LabelEncoder', 'DecisionTreeRegressor', 'tree']Dict:{'datetime': [], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'crosstab'], 'numpy': ['transpose', 'median', 'sum', 'mean'], 'sys': [], 'os': ['replace'], 'random': ['sample'], 'pathlib': ['replace'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'scipy': [], 'sklearn': [], 'catboost': [], 'xgboost': []} axis_0: 2, axis_1: 3
top-10-house-price-regression-competition-nb.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'reset_index', 'concat', 'copy', 'astype', 'fillna', 'fillna', 'mode', 'copy', 'copy', 'select_dtypes', 'sum', 'isna', 'isna', 'isna', 'isna', 'isna', 'copy', 'copy', 'select_dtypes', 'apply', 'skew', 'apply', 'apply', 'query', 'copy', 'get_dummies', 'copy', 'transform', 'copy', 'copy', 'max', 'copy', 'reset_index', 'max', 'items', 'items', 'items', 'mean', 'std', 'concat', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'scipy.stats', 'optuna'] ['KNeighborsRegressor', 'StandardScaler', 'setup', 'compare_models', 'KFold', 'cross_val_score', 'CatBoostRegressor', 'BayesianRidge', 'HuberRegressor', 'Ridge', 'OrthogonalMatchingPursuit', 'LGBMRegressor', 'GradientBoostingRegressor', 'XGBRegressor']Dict:{'numpy': ['mean', 'max', 'sum', 'std', 'copy'], 'pandas': ['concat', 'get_dummies', 'isna', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'sklearn': ['apply'], 'scipy': ['mode', 'skew'], 'pycaret': [], 'catboost': [], 'lightgbm': [], 'xgboost': ['apply'], 'optuna': []} axis_0: 1, axis_1: 4
stacking-models-and-new-features-for-arc.py : ['read_csv', 'set_index', 'head', 'replace', 'replace', 'replace', 'replace', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'array', 'array', 'array', 'array', 'array', 'sum', 'array', 'sum', 'array', 'astype', 'head', 'describe', 'sum', 'to_csv', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'json', 'matplotlib.pyplot', 'numpy', 'pdb', 'warnings'] ['Path', 'colors', 'LGBMClassifier', 'XGBClassifier', 'XGBRegressor', 'CatBoostClassifier', 'RandomForestClassifier', 'ExtraTreesClassifier', 'GradientBoostingClassifier', 'BaggingClassifier', 'StackingClassifier', 'LogisticRegression', 'ConvergenceWarning']Dict:{'numpy': ['array', 'sum', 'unique'], 'pandas': ['array', 'unique', 'read_csv'], 'os': ['replace'], 'json': [], 'pathlib': ['replace'], 'matplotlib': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'pdb': [], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 0
house-prices-prediction.py : ['read_csv', 'read_csv', 'info', 'drop', 'describe', 'select_dtypes', 'select_dtypes', 'value_counts', 'reset_index', 'sum', 'isnull', 'select_dtypes', 'corr', 'sum', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'concat', 'head', 'astype', 'astype', 'astype', 'astype', 'apply', 'apply', 'drop', 'drop', 'sort_values', 'sum', 'isnull', 'replace', 'replace', 'fillna', 'fillna', 'sum', 'sum', 'isnull', 'astype', 'astype', 'astype', 'transform', 'astype', 'astype', 'transform', 'astype', 'head', 'head', 'transform', 'transform', 'astype', 'mean', 'std', 'head', 'to_csv'] ['pandas', 'plotly.express', 'cufflinks', 'pandas', 'cufflinks', 'cufflinks', 'plotly.graph_objects', 'plotly.graph_objects', 'plotly.graph_objects', 'plotly.express', 'seaborn', 'numpy', 'matplotlib.pyplot', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.express', 'numpy', 'numpy'] ['Path', 'SimpleImputer', 'datetime', 'ColumnTransformer', 'OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'LazyRegressor', 'shuffle', 'LGBMRegressor', 'train_test_split', 'cross_val_score', 'ShuffleSplit']Dict:{'pathlib': ['replace'], 'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'plotly': [], 'cufflinks': [], 'seaborn': [], 'numpy': ['mean', 'info', 'std', 'sum'], 'matplotlib': [], 'sklearn': [], 'datetime': ['replace'], 'lazypredict': [], 'lightgbm': []} axis_0: 0, axis_1: 2
fulltimeseriesvalid-lstm-lgbm-goss-dart-v2.py : ['sum', 'isna', 'sum', 'isna', 'sample', 'transform', 'groupby', 'fillna', 'median', 'transform', 'groupby', 'fillna', 'median', 'transform', 'groupby', 'fillna', 'median', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'median', 'sort_values', 'head', 'shift', 'shift', 'concat', 'dropna', 'concat', 'reset_index', 'reset_index', 'to_datetime', 'drop', 'tail', 'groupby', 'ewm', 'unique', 'rolling', 'mean', 'unique', 'groupby', 'map', 'concat', 'drop', 'unique', 'mean', 'mean', 'unique', 'groupby', 'map', 'concat', 'drop', 'unique', 'mean', 'rolling', 'std', 'rolling', 'mean', 'rolling', 'std', 'rolling', 'unique', 'groupby', 'map', 'concat', 'drop', 'unique', 'mean', 'unique', 'groupby', 'map', 'concat', 'drop', 'merge', 'merge', 'merge', 'merge', 'head', 'tail', 'astype', 'astype', 'astype', 'tail', 'drop', 'drop', 'factorize', 'sum', 'groupby', 'mean', 'std', 'drop', 'sort_values', 'drop', 'drop', 'sort_values', 'drop', 'drop', 'sort_values', 'drop', 'head', 'head', 'sum', 'isna', 'fillna', 'median', 'head', 'unique', 'reset_index', 'concat', 'head', 'head', 'tail', 'groupby', 'head', 'concat', 'sum', 'groupby', 'mean', 'std', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'concat', 'sum', 'groupby', 'mean', 'std', 'concat', 'sum', 'groupby', 'mean', 'std', 'concat', 'sum', 'groupby', 'mean', 'std', 'concat', 'astype', 'concat', 'sum', 'groupby', 'mean', 'std', 'drop', 'to_datetime', 'concat', 'max', 'merge', 'merge', 'merge', 'merge', 'fillna', 'median', 'transform', 'fillna', 'merge', 'isnull', 'isnull', 'isnull', 'isnull', 'notnull', 'concat'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'gc', 'seaborn', 'matplotlib.pyplot'] ['Sequential', 'Dense', 'Dropout', 'LSTM', 'GRU', 'Embedding', 'twosigmanews', 'tqdm', 'set_random_seed', 'Pool', 'train_test_split', 'StandardScaler', 'callbacks', 'LogisticRegression']Dict:{'pandas': ['isna', 'isnull', 'concat', 'factorize', 'unique', 'notnull', 'merge', 'to_datetime'], 'numpy': ['mean', 'median', 'add', 'max', 'sum', 'unique', 'std'], 'matplotlib': [], 'seaborn': [], 'keras': [], 'lightgbm': [], 'kaggle': [], 'tqdm': [], 'gc': [], 'tensorflow': [], 'multiprocessing': [], 'sklearn': []} axis_0: 1, axis_1: 24
gresearch-simple-lgb-starter.py : ['join', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'join', 'astype', 'read_csv', 'join', 'head', 'info', 'sum', 'isna', 'info', 'unique', 'hist', 'query', 'query', 'query', 'set_index', 'astype', 'astype', 'dropna', 'merge', 'max', 'min', 'mean', 'median', 'query', 'query', 'query', 'query', 'join', 'sort_values', 'unique', 'query', 'query', 'query', 'query', 'query', 'join', 'sum', 'sum', 'sum', 'sum', 'join', 'copy', 'query', 'unique', 'query', 'unique', 'join', 'query'] ['numpy', 'pandas', 'gc', 'pathlib', 'joblib', 'pathlib', 'json', 'glob', 'time', 'datetime', 'lightgbm', 'matplotlib.pyplot', 'matplotlib.style', 'seaborn', 'warnings', 'os', 'gresearch_crypto'] ['tqdm', 'stats', 'Pool', 'cpu_count', 'XGBRegressor', 'venn2', 'venn3', 'pyplot', 'ScalarFormatter']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'min', 'unique', 'info', 'copy'], 'pandas': ['isna', 'merge', 'unique', 'read_csv'], 'gc': [], 'pathlib': [], 'tqdm': [], 'joblib': [], 'json': [], 'glob': [], 'time': [], 'datetime': [], 'scipy': [], 'multiprocessing': [], 'xgboost': [], 'lightgbm': [], 'matplotlib': [], 'matplotlib_venn': [], 'seaborn': [], 'warnings': [], 'os': [], 'gresearch_crypto': []} axis_0: 0, axis_1: 4
tps-01-2022-weather-eda-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'astype', 'astype', 'astype', 'astype', 'head', 'mean', 'groupby', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'transform', 'copy', 'update', 'mean', 'abs', 'abs', 'abs', 'mean', 'std', 'array', 'mean', 'mean', 'mean', 'std', 'round', 'mean', 'to_csv', 'copy', 'update', 'mean', 'abs', 'abs', 'abs', 'mean', 'std', 'array', 'mean', 'mean', 'mean', 'std', 'round', 'mean', 'to_csv', 'copy', 'update', 'mean', 'abs', 'abs', 'abs', 'mean', 'std', 'array', 'mean', 'mean', 'mean', 'std', 'round', 'mean', 'to_csv', 'copy', 'update', 'mean', 'abs', 'abs', 'abs', 'mean', 'std', 'array', 'mean', 'mean', 'mean', 'std', 'round', 'mean', 'to_csv', 'copy', 'update', 'mean', 'abs', 'abs', 'abs', 'mean', 'std', 'array', 'mean', 'mean', 'mean', 'std', 'round', 'mean', 'to_csv', 'copy', 'update', 'mean', 'abs', 'abs', 'abs', 'mean', 'std', 'array', 'mean', 'mean', 'mean', 'std', 'round', 'mean', 'to_csv', 'copy', 'update', 'mean', 'abs', 'abs', 'abs', 'mean', 'std', 'array', 'mean', 'mean', 'mean', 'std', 'round', 'mean', 'to_csv', 'copy', 'update', 'mean', 'abs', 'abs', 'abs', 'mean', 'std', 'array', 'mean', 'mean', 'mean', 'std', 'round', 'mean', 'to_csv', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'copy', 'update', 'mean', 'abs', 'abs', 'abs', 'mean', 'std', 'array', 'mean', 'mean', 'mean', 'std', 'round', 'mean', 'to_csv', 'head'] ['numpy', 'pandas', 'seaborn', 'optuna', 'shap'] ['TimeSeriesSplit', 'OrdinalEncoder', 'StandardScaler', 'pyplot', 'CatBoostRegressor']Dict:{'numpy': ['mean', 'std', 'abs', 'round', 'array', 'copy'], 'pandas': ['array', 'merge', 'read_csv'], 'sklearn': ['transform'], 'matplotlib': [], 'seaborn': [], 'optuna': [], 'catboost': [], 'shap': []} axis_0: 0, axis_1: 18
scrabble-eda-fe-modeling.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'head', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'isna', 'sum', 'sum', 'duplicated', 'sum', 'sum', 'duplicated', 'sum', 'sum', 'duplicated', 'sum', 'sum', 'duplicated', 'fillna', 'apply', 'apply', 'apply', 'apply', 'apply', 'count', 'fillna', 'unique', 'get_dummies', 'isna', 'fillna', 'astype', 'replace', 'fillna', 'astype', 'copy', 'agg', 'groupby', 'join', 'isin', 'isin', 'concat', 'reset_index', 'reset_index', 'drop', 'head', 'isin', 'replace', 'value_counts', 'merge', 'merge', 'drop', 'to_datetime', 'merge', 'astype', 'astype', 'head', 'nunique', 'drop', 'drop', 'fillna', 'fillna', 'to_feather', 'to_feather', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'nunique', 'read_feather', 'read_feather', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'replace', 'value_counts', 'replace', 'value_counts', 'keys', 'mean', 'mean', 'read_csv', 'isna', 'to_csv', 'hist', 'hist', 'sort_values', 'mean', 'mean', 'read_csv', 'to_csv', 'hist', 'hist'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'warnings', 'datetime', 'math', 'textstat', 'lightgbm', 'optuna'] ['numerical_ttt_dist', 'categorical_ttt_dist', 'LinearRegression', 'Ridge', 'DecisionTreeRegressor', 'RandomForestRegressor', 'StandardScaler', 'cross_val_score', 'KFold', 'clone', 'r2_score', 'mean_squared_error']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'get_dummies', 'read_feather', 'unique', 'merge', 'to_datetime'], 'numpy': ['mean', 'sum', 'unique', 'isin', 'copy'], 'matplotlib': ['hist'], 'seaborn': [], 'gc': [], 'warnings': [], 'datetime': [], 'math': [], 'featdist': [], 'textstat': [], 'sklearn': [], 'lightgbm': [], 'optuna': []} axis_0: 0, axis_1: 5
exploring-the-consumer-patterns-ml-pipeline.py : ['read_csv', 'merge', 'drop', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'count', 'info', 'to_datetime', 'astype', 'apply', 'head', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'astype', 'fillna', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'nunique', 'select_dtypes', 'unique', 'sum', 'isnull', 'nunique', 'drop', 'nunique', 'drop', 'nunique', 'min', 'mean', 'median', 'max', 'mean', 'std', 'value_counts', 'isin', 'value_counts', 'isin', 'value_counts', 'value_counts', 'crosstab', 'isin', 'value_counts', 'value_counts', 'crosstab', 'isin', 'value_counts', 'isin', 'value_counts', 'map', 'isin', 'value_counts', 'value_counts', 'map', 'crosstab', 'isin', 'value_counts', 'value_counts', 'isin', 'value_counts', 'crosstab', 'isin', 'value_counts', 'isin', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'sort_values', 'reset_index', 'value_counts', 'rename', 'rename', 'astype', 'reset_index', 'sum', 'groupby', 'astype', 'reset_index', 'count', 'groupby', 'astype', 'crosstab', 'sum', 'join', 'value_counts', 'value_counts', 'value_counts', 'reset_index', 'value_counts', 'reset_index', 'nlargest', 'sum', 'groupby', 'corr', 'crosstab', 'sum', 'reset_index', 'value_counts', 'drop', 'reset_index', 'reset_index', 'count', 'groupby', 'drop', 'reset_index', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'corr', 'agg', 'groupby', 'keys', 'groupby', 'agg', 'groupby', 'head', 'join', 'head'] ['os', 'random', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'squarify', 'plotly.graph_objs', 'json'] ['kurtosis', 'skew', 'init_notebook_mode', 'iplot', 'plot', 'json_normalize', 'datetime', 'preprocessing']Dict:{'os': ['rename'], '#': [], "it's": [], 'a': [], 'operational': [], 'system': [], 'library,': [], 'to': [], 'set': [], 'some': [], 'informations': [], 'random': [], 'is': [], 'generate': [], 'values': [], 'pandas': [], 'numpy': ['mean', 'median', 'max', 'sum', 'min', 'unique', 'isin', 'info', 'std'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'squarify': [], 'better': [], 'understand': [], 'proportion': [], 'of': [], 'categorys': [], '-': [], 'treemap': [], 'layout': [], 'algorithm': [], 'plotly': [], 'json': [], 'convert': [], 'in': [], 'df': [], 'datetime': ['min', 'max'], 'sklearn': []} axis_0: 0, axis_1: 6
mechanisms-of-action-moa-tutorial.py : ['read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'any', 'sum', 'isnull', 'info', 'head', 'select_dtypes', 'head', 'select_dtypes', 'mean', 'std', 'mean', 'std', 'copy', 'mean', 'mean', 'copy', 'drop', 'sort_values', 'sum', 'copy', 'drop', 'sort_values', 'sum', 'map', 'map', 'transform', 'head', 'head', 'drop', 'head', 'drop', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'head', 'head', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'head', 'head', 'copy', 'copy', 'concat', 'get_dummies', 'get_dummies', 'head', 'head', 'concat', 'concat', 'head', 'head', 'reset_index', 'reset_index', 'reset_index', 'drop', 'drop', 'mean', 'copy', 'astype', 'mean', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'copy', 'copy', 'copy', 'head', 'to_csv', 'max', 'value_counts'] ['warnings', 'sys', 'datetime', 'gc', 'numpy', 'pandas', 'tensorflow', 'tensorflow.keras.backend', 'seaborn', 'matplotlib.pyplot'] ['MultilabelStratifiedKFold', 'time', 'ReduceLROnPlateau', 'ModelCheckpoint', 'EarlyStopping', 'layers', 'log_loss', 'WeightNormalization', 'PCA', 'QuantileTransformer', 'KMeans', 'VarianceThreshold', 'regularizers']Dict:{'warnings': [], 'sys': [], 'iterstrat': [], 'time': [], 'datetime': [], 'gc': [], 'numpy': ['mean', 'any', 'max', 'sum', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'tensorflow': [], 'sklearn': [], 'tensorflow_addons': [], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 14
enefit-pebop-baseline.py : ['unique', 'reset_index', 'rename', 'rename', 'drop', 'join', 'rename', 'drop', 'join', 'drop', 'mean', 'mean', 'filter', 'drop', 'mean', 'mean', 'filter', 'drop', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'rename', 'rename', 'rename', 'rename', 'rename', 'rename', 'rename', 'concat', 'set_index', 'astype', 'mean', 'std', 'drop', 'mean', 'read_csv', 'pivot_table', 'to_datetime', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'drop', 'notnull', 'gt', 'drop', 'drop', 'rename', 'unique', 'concat', 'unique', 'concat', 'unique', 'concat', 'clip', 'clip'] ['os', 'gc', 'pickle', 'numpy', 'pandas', 'polars', 'matplotlib.pyplot', 'lightgbm', 'optuna', 'enefit'] ['cross_val_score', 'cross_validate', 'mean_absolute_error', 'TransformedTargetRegressor', 'VotingRegressor']Dict:{'os': ['rename'], 'gc': [], 'pickle': [], 'numpy': ['mean', 'std', 'unique', 'clip'], 'pandas': ['read_csv', 'pivot_table', 'concat', 'unique', 'notnull', 'to_datetime'], 'polars': ['mean', 'concat', 'std', 'read_csv'], 'matplotlib': [], 'sklearn': [], 'lightgbm': [], 'optuna': [], 'enefit': []} axis_0: 0, axis_1: 1
ps-s3-ep23-eda-modeling-submission.py : ['read_csv', 'read_csv', 'read_csv', 'describe', 'info', 'describe', 'drop_duplicates', 'drop', 'drop_duplicates', 'drop', 'drop_duplicates', 'drop', 'drop_duplicates', 'drop', 'drop_duplicates', 'drop', 'merge', 'drop', 'drop', 'merge', 'drop', 'drop', 'drop', 'drop_duplicates', 'value_counts', 'corr', 'drop', 'drop', 'cumsum', 'map', 'mean', 'groupby', 'nunique', 'drop', 'drop', 'map', 'drop', 'items', 'keys', 'keys', 'drop', 'mean', 'mean', 'apply', 'mean', 'to_csv', 'apply', 'mean', 'to_csv', 'drop', 'apply', 'map', 'drop', 'apply', 'mean', 'mean', 'apply', 'mean', 'to_csv', 'apply', 'mean', 'to_csv'] ['pandas', 'numpy', 're', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'optuna'] ['tqdm', 'partial', 'mode', 'DecisionTreeClassifier', 'plot_tree', 'MinMaxScaler', 'StandardScaler', 'LabelEncoder', 'FunctionTransformer', 'make_pipeline', 'Pipeline', 'PCA', 'KMeans', 'ColumnTransformer', 'KNNImputer', 'OneVsRestClassifier', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'RepeatedStratifiedKFold', 'roc_auc_score', 'roc_curve', 'RocCurveDisplay', 'cohen_kappa_score', 'log_loss', 'f1_score', 'LinearDiscriminantAnalysis', 'QuadraticDiscriminantAnalysis', 'KNeighborsClassifier', 'RFE', 'RFECV', 'IsotonicRegression', 'CalibrationDisplay', 'PartialDependenceDisplay', 'permutation_importance', 'LogisticRegression', 'Counter', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'SVC', 'LGBMClassifier', 'XGBClassifier', 'CatBoostClassifier', 'TSNE']Dict:{'pandas': ['merge', 'read_csv', 'value_counts'], 'numpy': ['mean', 'info', 'cumsum'], 'tqdm': [], 're': [], 'functools': [], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': [], 'collections': ['items', 'keys'], 'lightgbm': [], 'xgboost': ['apply'], 'catboost': [], 'optuna': []} axis_0: 0, axis_1: 0
santander-eda-and-prediction.py : ['head', 'head', 'sum', 'isnull', 'sum', 'isnull', 'count', 'isnull', 'concat', 'transpose', 'describe', 'value_counts', 'mean', 'mean', 'mean', 'mean', 'std', 'std', 'std', 'std', 'mean', 'mean', 'mean', 'mean', 'min', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'min', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'skew', 'skew', 'skew', 'skew', 'kurtosis', 'kurtosis', 'kurtosis', 'kurtosis', 'skew', 'skew', 'skew', 'skew', 'kurtosis', 'kurtosis', 'kurtosis', 'kurtosis', 'tail', 'head', 'transpose', 'head', 'sort_values', 'transpose', 'head', 'sort_values', 'head', 'head', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv'] ['gc', 'os', 'logging', 'datetime', 'warnings', 'numpy', 'pandas', 'seaborn', 'lightgbm', 'matplotlib.pyplot'] ['tqdm_notebook', 'mean_squared_error', 'roc_auc_score', 'roc_curve', 'StratifiedKFold']Dict:{'gc': [], 'os': [], 'logging': [], 'datetime': [], 'warnings': [], 'numpy': ['transpose', 'mean', 'max', 'sum', 'min', 'isin', 'std'], 'pandas': ['isnull', 'concat', 'value_counts'], 'seaborn': [], 'lightgbm': [], 'tqdm': [], 'matplotlib': [], 'sklearn': []} axis_0: 23, axis_1: 24
feature-engineering-4-house-prices-last-submission.py : ['read_csv', 'read_csv', 'concat', 'read_csv', 'unique', 'replace', 'where', 'rename', 'items', 'astype', 'items', 'astype', 'select_dtypes', 'sum', 'isnull', 'fillna', 'isnull', 'select_dtypes', 'sum', 'isnull', 'fillna', 'isnull', 'info', 'info', 'select_dtypes', 'mean', 'copy', 'pop', 'copy', 'select_dtypes', 'factorize', 'sort_values', 'sort_values', 'copy', 'pop', 'copy', 'pop', 'select_dtypes', 'copy', 'select_dtypes', 'get_dummies', 'mul', 'sum', 'gt', 'transform', 'groupby', 'factorize', 'factorize', 'copy', 'mean', 'std', 'copy', 'mean', 'std', 'mean', 'std', 'cumsum', 'transform', 'concat', 'transform', 'add', 'copy', 'pop', 'copy', 'pop', 'concat', 'join', 'join', 'join', 'join', 'join', 'join', 'drop', 'join', 'join', 'transform', 'to_csv'] ['os', 'warnings', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn', 'optuna'] ['Path', 'display', 'CategoricalDtype', 'MEstimateEncoder', 'CatBoostEncoder', 'KMeans', 'PCA', 'mutual_info_regression', 'KFold', 'cross_val_score', 'XGBRegressor', 'reduce']Dict:{'os': ['rename', 'replace'], 'warnings': [], 'pathlib': ['rename', 'replace'], 'matplotlib': [], 'numpy': ['mean', 'add', 'sum', 'where', 'unique', 'info', 'std', 'cumsum', 'copy'], 'pandas': [], 'seaborn': [], 'IPython': [], 'category_encoders': [], 'sklearn': [], 'xgboost': [], 'optuna': []} axis_0: 4, axis_1: 1
tps-feb-2021-3gbdts-ensemble-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'info', 'mean', 'keys', 'copy', 'copy', 'transform', 'concat', 'concat', 'concat', 'concat', 'head', 'head', 'reset_index', 'reset_index', 'copy', 'copy', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'copy', 'to_csv', 'head'] ['os', 'sys', 'time', 'random', 'logging', 'typing', 'seaborn', 'numpy', 'pandas', 'category_encoders', 'xgboost', 'lightgbm'] ['Path', 'contextmanager', 'pyplot', 'KFold', 'mean_squared_log_error', 'mean_squared_error', 'CatBoost', 'Pool']Dict:{'os': [], 'sys': [], 'time': [], 'random': [], 'logging': ['info'], 'typing': [], 'pathlib': [], 'contextlib': [], 'matplotlib': [], 'seaborn': [], 'numpy': ['mean', 'info', 'copy'], 'pandas': ['concat', 'read_csv'], 'category_encoders': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 4
titanic-ensemble-modeling.py : ['read_csv', 'read_csv', 'items', 'reset_index', 'drop', 'reset_index', 'concat', 'fillna', 'sum', 'isnull', 'info', 'sum', 'isnull', 'head', 'describe', 'corr', 'map', 'notnull', 'notnull', 'sum', 'isnull', 'fillna', 'median', 'skew', 'map', 'skew', 'mean', 'groupby', 'sum', 'isnull', 'fillna', 'map', 'corr', 'isnull', 'median', 'median', 'head', 'head', 'replace', 'map', 'astype', 'drop', 'map', 'map', 'map', 'map', 'get_dummies', 'get_dummies', 'head', 'head', 'describe', 'sum', 'isnull', 'head', 'notnull', 'isnull', 'get_dummies', 'head', 'replace', 'replace', 'head', 'get_dummies', 'astype', 'get_dummies', 'drop', 'head', 'drop', 'astype', 'drop', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'concat', 'corr', 'concat', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['Counter', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'VotingClassifier', 'LinearDiscriminantAnalysis', 'LogisticRegression', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'MLPClassifier', 'SVC', 'GridSearchCV', 'cross_val_score', 'StratifiedKFold', 'learning_curve']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'notnull'], 'numpy': ['mean', 'median', 'sum', 'info', 'std'], 'matplotlib': [], 'seaborn': [], 'collections': ['items'], 'sklearn': []} axis_0: 1, axis_1: 6
titanic-pytorch-nn-tutorial.py : ['read_csv', 'read_csv', 'concat', 'map', 'astype', 'unique', 'astype', 'apply', 'astype', 'fillna', '__init__', 'drop', 'drop', 'drop', 'drop', 'eval', 'read_csv', 'astype', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'torch', 'torch.nn', 'torch.optim', 'torchvision', 'random', 'tensorflow', 'time'] ['lr_scheduler', 'Variable', 'datasets', 'models', 'transforms', 'functional', 'tqdm', 'StratifiedKFold', 'StandardScaler', 'accuracy_score']Dict:{'numpy': ['unique'], 'pandas': ['concat', 'eval', 'unique', 'read_csv'], 'os': [], 'torch': ['__init__'], 'torchvision': [], 'random': [], 'tensorflow': ['unique', 'concat'], 'time': [], 'tqdm': ['__init__'], 'sklearn': ['__init__']} axis_0: 0, axis_1: 2
blend-boosting-for-home-credit-default-risk.py : ['read_csv', 'head', 'corr', 'head', 'to_csv', 'copy', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'seaborn'] []Dict:{'pandas': ['read_csv'], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 0
resnet18-0-772-public-lb.py : ['__init__', 'eval', '__init__', 'squeeze', '__init__', 'eval', 'groupby', 'map', 'groupby', 'array', 'update', 'replace', 'count', 'count', 'add', 'unique', 'sum', 'sum', 'map', 'hist', 'replace', 'items', 'map', 'keys', 'keys', 'read_csv', 'reset_index', 'where', 'read_csv', 'copy', 'concat', 'join', 'to_csv', 'head', 'read_csv'] ['sklearn.feature_extraction.text', 'regex'] ['*', 'tqdm', 'BertTokenizer', 'AutoConfig', 'AutoModel', 'StratifiedKFold']Dict:{'fastai': [], 'tqdm': ['update', '__init__'], 'sklearn': ['__init__'], 'transformers': [], 'regex': []} axis_0: 0, axis_1: 0
pppm-tokenclassificationmodel-train-8th-place.py : ['items', 'read_csv', 'reset_index', 'sample', 'map', 'groupby', 'join', 'join', 'read_csv', 'to_numpy', 'unique', 'unique', 'copy', 'apply', 'agg', 'groupby', 'apply', 'join', 'agg', 'to_numpy', 'join', 'map', 'set_index', 'map', 'set_index', 'to_numpy', 'iterrows', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'reset_index', 'reset_index', 'reset_index', 'merge', 'merge', 'map', 'rename', 'map', 'head', 'groupby', 'info', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'array', 'array', 'items', '__init__', 'squeeze', 'mean', 'min', 'max', 'abs', 'info', 'eval', 'items', 'mean', 'mean', 'info', 'items', 'mean', 'update', 'info', 'array', 'info', 'info', 'info', 'array', 'info', 'reset_index', 'reset_index', 'to_numpy', 'explode', 'array', 'info', 'info', 'info', 'array', 'reset_index', 'rename', 'explode', 'to_pickle', 'concat', 'info', 'to_numpy', 'to_numpy', 'info', 'reset_index', 'info', 'to_numpy', 'to_numpy', 'info', 'to_pickle'] ['os', 'os', 'random', 'numpy', 'torch', 'pandas', 're', 'pandas', 'nltk', 'random', 'os', 'gc', 'random', 'warnings', 'numpy', 'scipy', 'torch'] ['annotations', '_Logger', 'getLogger', 'INFO', 'StreamHandler', 'FileHandler', 'Formatter', 'StratifiedGroupKFold', 'ndarray', 'PorterStemmer', 'WordNetLemmatizer', 'stopwords', 'CountVectorizer', 'AutoTokenizer', 'DataFrame', 'Tensor', 'Dataset', 'PreTrainedTokenizer', 'Tensor', 'Module', 'AutoModel', 'AutoConfig', 'Tensor', 'Module', 'Optimizer', '_Loss', '_Logger', 'reduce', 'ndarray', 'inference_mode', 'nn', 'AdamW', 'DataLoader', 'Dataset', '_LRScheduler', 'display', 'get_linear_schedule_with_warmup', 'get_cosine_schedule_with_warmup']Dict:{'__future__': ['__init__'], 'os': ['rename'], 'random': ['sample'], 'numpy': ['mean', 'squeeze', 'max', 'min', '__init__', 'copy'], 'torch': ['__init__'], 'log': [], 'logging': ['__init__'], 'pandas': ['iterrows', 'squeeze', '__init__', 'copy', 'to_pickle', 'items', 'map', 'head', 'apply', 'sample', 'reset_index', 'set_index', 'info', 'update', 'abs', 'eval', 'rename', 'min', 'to_numpy', 'groupby', 'mean', 'max', 'agg', 'merge', 'join', 'explode'], 'sklearn': [], 're': [], 'nltk': [], 'transformers': [], 'gc': [], 'warnings': [], 'functools': ['__init__'], 'scipy': [], 'IPython': ['__init__']} axis_0: 0, axis_1: 1
top-10-0-10943-stacking-mice-and-brutal-force.py : ['read_csv', 'drop', 'drop', 'reset_index', 'apply', 'astype', 'astype', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'assign', 'array', 'transform', 'transform', 'reset_index', 'concat', 'concat', 'assign', 'array', 'array', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'array', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'read_csv', 'apply', 'astype', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'fillna', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'array', 'transform', 'transform', 'reset_index', 'concat', 'concat', 'array', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'array', 'read_csv', 'concat', 'quantile', 'quantile', 'apply', 'apply', 'to_csv'] ['numpy', 'pandas', 'datetime', 'random', 'matplotlib.pyplot', 'lightgbm'] ['GridSearchCV', 'KFold', 'OneHotEncoder', 'LabelEncoder', 'RandomForestRegressor', 'GradientBoostingRegressor', 'KernelRidge', 'Ridge', 'Lasso', 'ElasticNet', 'SVR', 'make_pipeline', 'RobustScaler', 'PCA', 'scale']Dict:{'numpy': ['mean', 'array', 'quantile'], 'pandas': ['concat', 'array', 'read_csv'], 'datetime': [], 'random': [], 'matplotlib': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 19
top-1-predict-future-sales-features-lightgbm.py : ['factorize', 'to_numeric', 'astype', 'sum', 'memory_usage', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'to_datetime', 'replace', 'isin', 'unique', 'unique', 'product', 'unique', 'unique', 'array', 'agg', 'groupby', 'merge', 'astype', 'astype', 'astype', 'drop', 'concat', 'fillna', 'fillna', 'head', 'query', 'sub', 'sub', 'copy', 'apply', 'to_numpy', 'array', 'apply', 'drop', 'rename', 'drop', 'apply', 'factorize', 'merge', 'merge', 'sub', 'sub', 'copy', 'sub', 'sub', 'isin', 'apply', 'isin', 'isin', 'apply', 'isin', 'factorize', 'merge', 'sub', 'sub', 'sub', 'sub', 'apply', 'apply', 'apply', 'merge', 'drop', 'transform', 'groupby', 'min', 'astype', 'astype', 'transform', 'groupby', 'min', 'assign', 'to_datetime', 'concat', 'rename', 'max', 'groupby', 'rename', 'min', 'groupby', 'rename', 'rename', 'min', 'groupby', 'rename', 'min', 'groupby', 'rename', 'min', 'groupby', 'rename', 'min', 'groupby', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'min', 'drop', 'clip', 'fillna', 'replace', 'clip', 'fillna', 'replace', 'clip', 'fillna', 'replace', 'clip', 'fillna', 'reset_index', 'rename', 'max', 'groupby', 'query', 'concat', 'merge', 'isna', 'drop', 'drop', 'mean', 'groupby', 'reset_index', 'merge', 'transform', 'groupby', 'mean', 'mean', 'rename', 'agg', 'groupby', 'query', 'reset_index', 'concat', 'merge', 'merge', 'map', 'map', 'map', 'factorize', 'merge', 'query', 'isin', 'pivot_table', 'transpose', 'map', 'map', 'reset_index', 'rename', 'nunique', 'groupby', 'query', 'reset_index', 'rename', 'nunique', 'groupby', 'merge', 'fillna', 'drop', 'astype', 'pivot_table', 'rename', 'min', 'groupby', 'merge', 'join', 'rename', 'transform', 'groupby', 'pct_change', 'clip', 'reset_index', 'merge', 'query', 'mean', 'ewm', 'mean', 'expanding', 'mean', 'rolling', 'set_index', 'reset_index', 'rename', 'astype', 'agg', 'groupby', 'isin', 'astype', 'agg', 'isin', 'concat', 'merge', 'astype', 'pivot_table', 'rename', 'min', 'groupby', 'merge', 'reset_index', 'join', 'join', 'join', 'to_numpy', 'agg', 'ewm', 'groupby', 'merge', 'min', 'min', 'drop', 'rename', 'merge', 'isna', 'join', 'reset_index', 'rename', 'agg', 'groupby', 'merge', 'fillna', 'rename', 'min', 'groupby', 'merge', 'to_pickle', 'drop', 'sub', 'sub', 'apply', 'rename', 'clip', 'sum', 'unique', 'query', 'sum', 'query', 'merge', 'drop', 'clip', 'read_csv', 'merge', 'astype', 'to_pickle', 'read_pickle', 'clip', 'drop', 'drop', 'drop', 'drop', 'read_pickle', 'clip', 'drop', 'clip', 'drop', 'read_csv', 'merge', 'equals', 'to_csv'] ['gc', 'itertools', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn', 're', 're', 'matplotlib.pyplot', 'seaborn', 're', 'warnings', 'pandas', 'warnings', 'lightgbm', 'joblib'] ['fuzz', 'stopwords', 'Day', 'MonthBegin', 'MonthEnd', 'AgglomerativeClustering', 'PCA', 'silhouette_score', 'stopwords', 'CountVectorizer', 'SelectKBest', 'f_regression', 'remove']Dict:{'gc': [], 'itertools': ['product', 'groupby'], 'matplotlib': [], 'numpy': ['transpose', 'mean', 'product', 'max', 'sum', 'min', 'unique', 'clip', 'isin', 'array', 'copy'], 'pandas': ['to_pickle', 'isna', 'read_csv', 'pivot_table', 'concat', 'factorize', 'to_numeric', 'read_pickle', 'unique', 'array', 'merge', 'to_datetime'], 'seaborn': [], 're': ['sub'], 'fuzzywuzzy': [], 'nltk': [], 'sklearn': [], 'warnings': [], 'lightgbm': [], 'joblib': [], 'os': []} axis_0: 3, axis_1: 4
jane-street-eda-regime-tags-clusters.py : ['info', 'query', 'info', 'head', 'agg', 'groupby', 'mean', 'mean', 'agg', 'groupby', 'mean', 'cumprod', 'head', 'pct_change', 'reset_index', 'sort_values', 'hist', 'astype', 'read_csv', 'copy', 'iterrows', 'iterrows', 'replace', 'astype', 'query'] ['datatable', 'lightgbm', 'numpy', 'pandas', 'matplotlib.pyplot', 'stumpy', 'yfinance', 'matplotlib', 'matplotlib.cm', 'missingno', 'seaborn'] ['hierarchy', 'spearmanr']Dict:{'datatable': [], 'lightgbm': [], 'numpy': ['mean', 'info', 'cumprod', 'copy'], 'pandas': ['read_csv'], 'matplotlib': [], 'stumpy': [], 'yfinance': [], 'scipy': [], 'missingno': [], '=': [], 'model': [], 'seaborn': []} axis_0: 0, axis_1: 0
what-s-wrong-with-station-32.py : ['drop', 'read_csv', 'dropna', 'read_csv', 'sort_index', 'read_csv', 'keys', 'fillna', 'max', 'fillna', 'min', 'head'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] []Dict:{'numpy': ['min', 'max'], 'pandas': ['read_csv'], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 3
feature-importance-using-the-lasso.py : ['read_csv', 'copy', 'select_dtypes', 'drop', 'fillna', 'mean', 'std'] ['pandas', 'numpy', 'eli5'] ['linear_model']Dict:{'pandas': ['read_csv'], '': [], 'numpy': ['mean', 'std', 'copy'], 'sklearn': [], 'eli5': []} axis_0: 1, axis_1: 1
bi-lstm-model-pressure-predict-gpu-infer.py : ['join', 'join', 'join', 'read_csv', 'read_csv', 'read_csv', 'head', 'unique', 'cumsum', 'groupby', 'cumsum', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'head', 'drop', 'drop', 'transform', 'squeeze', 'squeeze', 'head', 'to_csv', 'median', 'mean', 'head', 'to_csv', 'round', 'clip', 'head', 'to_csv'] ['warnings', 'sklearn.exceptions', 'pandas', 'numpy', 'os', 'glob', 'random', 'gc', 'tensorflow'] ['display', 'tqdm', 'preprocessing', 'keras', 'mean_absolute_error']Dict:{'warnings': [], 'sklearn': [], 'IPython': [], 'tqdm': [], 'pandas': ['get_dummies', 'unique', 'read_csv'], 'numpy': ['mean', 'median', 'squeeze', 'round', 'unique', 'clip', 'cumsum'], 'os': [], 'glob': [], 'random': [], 'gc': [], 'tensorflow': []} axis_0: 1, axis_1: 2
optiver-realized-volatility-lgbm-baseline.py : ['diff', 'sum', 'unique', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'read_parquet', 'apply', 'groupby', 'apply', 'groupby', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'apply', 'drop', 'read_parquet', 'apply', 'groupby', 'sum', 'mean', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'add_prefix', 'apply', 'drop', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'drop', 'merge', 'concat', 'mean', 'drop', 'drop', 'astype', 'astype', 'unique', 'merge', 'unique', 'merge', 'to_csv'] ['os', 'glob', 'pandas', 'numpy', 'scipy', 'lightgbm', 'warnings'] ['Parallel', 'delayed', 'KFold']Dict:{'os': [], 'glob': [], 'joblib': [], 'pandas': ['read_csv', 'concat', 'read_parquet', 'unique', 'merge'], 'numpy': ['mean', 'sum', 'unique', 'diff', 'std'], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 0
temperature-forecasting-analysis.py : ['join', 'read_csv', 'read_csv', 'concat', 'drop', 'head', 'info', 'describe', 'sum', 'isnull', 'corr', 'hist', 'drop', 'to_datetime', 'astype', 'astype', 'apply', 'astype', 'merge', 'nunique', 'unique', 'boxplot', 'drop', 'merge', 'reset_index', 'mean', 'groupby', 'rename', 'reset_index', 'sort_values', 'merge', 'merge', 'corr', 'drop', 'merge', 'corr', 'merge', 'merge', 'merge', 'drop', 'drop', 'merge', 'merge', 'drop', 'drop', 'drop', 'drop', 'transform', 'drop', 'concat', 'merge', 'merge', 'drop', 'merge', 'merge', 'add', 'add', 'add', 'add', 'add', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'os', 'pandas', 'numpy', 'seaborn', 'plotly.express', 'matplotlib.pyplot', 'warnings'] ['train_test_split', 'SimpleImputer', 'LabelEncoder', 'StandardScaler', 'KNeighborsClassifier', 'accuracy_score', 'GridSearchCV', 'RandomizedSearchCV', 'RandomForestClassifier', 'OneHotEncoder', 'CatBoostClassifier', 'mean_squared_error', 'LinearRegression', 'LinearRegression', 'XGBRegressor', 'RepeatedKFold', 'cross_val_score', 'mean_squared_error', 'GridSearchCV', 'LinearBoostRegressor', 'StandardScaler', 'MinMaxScaler', 'MLPRegressor', 'keras', 'layers', 'Sequential']Dict:{'numpy': ['mean', 'add', 'sum', 'unique', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'merge', 'to_datetime'], 'os': ['rename'], 'seaborn': ['boxplot'], 'plotly': [], 'matplotlib': ['boxplot', 'hist'], 'sklearn': [], 'catboost': [], 'warnings': [], 'xgboost': ['apply'], 'lineartree': [], 'tensorflow': ['add']} axis_0: 0, axis_1: 16
eda-and-feature-engineering-tutorial-youtube-data.py : ['read_parquet', 'read_parquet', 'info', 'info', 'unique', 'unique', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'describe', 'describe', 'drop', 'drop', 'nunique', 'nunique', 'drop', 'select_dtypes', 'concat', 'concat', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'describe', 'drop', 'drop', 'concat', 'concat', 'drop', 'drop', 'unique', 'drop', 'drop', 'drop', 'drop', 'drop', 'agg', 'groupby', 'rename', 'agg', 'groupby', 'agg', 'groupby', 'drop', 'drop', 'drop', 'copy', 'copy', 'rename', 'agg', 'groupby', 'join', 'join', 'join', 'copy', 'copy', 'copy', 'copy', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'copy', 'copy'] ['numpy', 'pandas', 're', 'seaborn', 'matplotlib.pyplot', 'sys'] ['KFold', 'LGBMImputer']Dict:{'numpy': ['sum', 'unique', 'isin', 'info', 'copy'], 'pandas': ['isnull', 'concat', 'read_parquet', 'unique', 'to_datetime'], 're': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'sys': [], 'kuma_utils': []} axis_0: 2, axis_1: 0
creating-player-stats-using-tracking-data.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'rename', 'merge', 'sub', 'mul', 'merge', 'mean', 'groupby', 'head', 'max', 'groupby', 'min', 'groupby', 'mean', 'groupby', 'merge', 'rename', 'head', 'merge', 'isin', 'sort_values'] ['pandas', 'seaborn', 'matplotlib.pyplot'] []Dict:{'pandas': ['merge', 'read_csv'], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 0
titanic-survivor-prediction-0-804-top-8.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'sum', 'isnull', 'sum', 'isnull', 'value_counts', 'value_counts', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'replace', 'replace', 'replace', 'replace', 'drop', 'drop', 'drop', 'head', 'mean', 'to_csv', 'read_csv', 'mean', 'to_csv', 'read_csv', 'mean', 'to_csv', 'read_csv', 'mean', 'head', 'to_csv', 'read_csv', 'head', 'mean', 'to_csv', 'read_csv', 'mean', 'to_csv', 'read_csv', 'astype', 'to_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'qcut', 'qcut', 'qcut', 'qcut', 'drop', 'drop', 'select_dtypes', 'select_dtypes', 'to_csv'] ['numpy', 'pandas', 'os', 'warnings', 'matplotlib.pyplot', 'seaborn', 'keras', 'tensorflow', 'time'] ['StandardScaler', 'LogisticRegression', 'classification_report', 'cross_val_score', 'GridSearchCV', 'RandomForestClassifier', 'classification_report', 'SVC', 'cross_val_score', 'SGDClassifier', 'cross_val_score', 'DecisionTreeClassifier', 'cross_val_score', 'GaussianNB', 'cross_val_score', 'RandomForestClassifier', 'GradientBoostingClassifier', 'DecisionTreeClassifier', 'XGBClassifier', 'LGBMClassifier', 'Pipeline', 'ColumnTransformer', 'StandardScaler', 'SimpleImputer', 'OneHotEncoder', 'LabelEncoder', 'classification_report', 'KNeighborsClassifier', 'GridSearchCV', 'accuracy_score']Dict:{'numpy': ['mean', 'info', 'sum'], 'pandas': ['qcut', 'value_counts', 'read_csv', 'isnull'], 'os': ['replace'], 'warnings': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'keras': [], 'tensorflow': [], 'time': [], 'xgboost': [], 'lightgbm': []} axis_0: 0, axis_1: 0
titanic-leaderboard-a-score-0-8-is-great.py : ['read_csv', 'value_counts', 'keys', 'keys', 'get', 'read_csv', 'keys', 'head', 'value_counts'] ['pandas', 'matplotlib.pyplot'] ['Counter']Dict:{'pandas': ['read_csv', 'value_counts'], '': [], 'matplotlib': ['get'], 'collections': ['keys', 'get']} axis_0: 0, axis_1: 0
house-prices-regression-predictive-analysis.py : ['read_csv', 'read_csv', 'unique', 'any', 'isna', 'isna', 'drop', 'describe', 'value_counts', 'drop_duplicates', 'drop_duplicates', 'drop', 'drop', 'iterrows', 'fillna', 'fillna', 'median', 'any', 'isna', 'any', 'isna', 'min', 'max', 'min', 'max', 'min', 'max', 'min', 'max', 'count', 'count', 'replace', 'replace', 'astype', 'where', 'where', 'drop', 'drop', 'copy', 'array', 'transform', 'array', 'boxplot', 'copy', 'copy', 'transform', 'transform', 'transform', 'get_dummies', 'concat', 'drop', 'concat', 'drop', 'update', 'mean', 'items', 'items', 'update', 'mean', 'items', 'update', 'mean', 'items', 'transform', 'transform', 'to_csv', 'head', 'sort_values', 'head', 'sort_values'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'warnings', 'warnings', 'warnings'] ['is_numeric_dtype', 'is_object_dtype', 'PowerTransformer', 'LabelEncoder', 'train_test_split', 'KFold', 'cross_val_score', 'GridSearchCV', 'StandardScaler', 'LinearRegression', 'SGDRegressor', 'Ridge', 'Lasso', 'ElasticNet', 'BayesianRidge', 'RANSACRegressor', 'HuberRegressor', 'RandomForestRegressor', 'AdaBoostRegressor', 'BaggingRegressor', 'GradientBoostingRegressor', 'ExtraTreesRegressor', 'KNeighborsRegressor', 'DecisionTreeRegressor', 'XGBRegressor', 'PCA', 'KernelPCA', 'mean_squared_error', 'r2_score', 'mean_squared_error', 'make_scorer', 'Pipeline', 'SelectKBest', 'f_regression', 'f_classif', 'StandardScaler', 'PCA', 'GridSearchCV']Dict:{'numpy': ['mean', 'median', 'any', 'max', 'where', 'min', 'unique', 'array', 'copy'], 'pandas': [], 'sklearn': ['transform'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'xgboost': [], 'warnings': []} axis_0: 0, axis_1: 11
simple-nn-with-good-results-tps-nov-21.py : ['read_csv', 'read_csv', 'drop', 'drop', 'skew', 'skew', 'median', 'median', 'var', 'var', 'mean', 'mean', 'std', 'std', 'median', 'median', 'skew', 'skew', 'max', 'max', 'var', 'var', 'copy', 'copy', 'copy', 'transform', 'transform', 'concat', 'update', 'mean', 'std', 'nunique', 'min', 'read_csv', 'mean', 'to_csv', 'head'] ['numpy', 'pandas', 'tensorflow', 'random', 'os', 'matplotlib.pyplot'] ['StandardScaler', 'MinMaxScaler', 'make_pipeline', 'make_column_transformer', 'keras', 'layers', 'callbacks', 'roc_auc_score', 'log_loss', 'KFold', 'StratifiedKFold', 'StandardScaler', 'RobustScaler', 'PowerTransformer']Dict:{'numpy': ['mean', 'median', 'max', 'var', 'min', 'std', 'copy'], 'pandas': ['concat', 'read_csv'], 'sklearn': ['transform'], 'tensorflow': ['concat'], 'random': [], 'os': [], 'matplotlib': []} axis_0: 0, axis_1: 28
house-prices-advanced-feature-engineering.py : ['read_csv', 'read_csv', 'head', 'head', 'corr', 'corr', 'reset_index', 'drop', 'skew', 'skew', 'reset_index', 'concat', 'sum', 'isnull', 'sort_values', 'drop', 'astype', 'astype', 'astype', 'replace', 'transform', 'groupby', 'fillna', 'mode', 'replace', 'mode', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'sort_values', 'sum', 'isnull', 'drop', 'drop', 'copy', 'drop', 'transform', 'reset_index', 'concat', 'apply', 'round', 'astype', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'reset_index', 'get_dummies', 'apply', 'round', 'apply', 'apply', 'apply', 'apply', 'apply', 'transform', 'mean', 'abs', 'sort_values', 'tail', 'drop', 'drop', 'transform', 'var', 'var', 'drop', 'drop', 'tail', 'keys', 'sort_values'] ['pandas', 'warnings', 'matplotlib.pyplot', 'numpy', 'seaborn', 'shap', 'xgboost', 'optuna', 'optuna'] ['stats', 'CatBoostEncoder', 'KNNImputer', 'StandardScaler', 'CatBoostRegressor', 'Pool', 'Lasso', 'SelectFromModel', 'plot_parallel_coordinate']Dict:{'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'warnings': [], 'matplotlib': [], 'numpy': ['mean', 'var', 'abs', 'sum', 'round', 'copy'], 'seaborn': [], 'scipy': ['mode', 'skew'], 'category_encoders': [], 'sklearn': [], 'catboost': [], 'shap': [], '=': [], 'pd': [], 'shap_sum': [], "['column_name',": [], "'shap_importance']": [], 'importance_df': [], 'ascending=False)': [], 'xgboost': [], 'optuna': [], 'list(importances': []} axis_0: 2, axis_1: 6
a-new-baseline-for-dsb-2019-catboost-model.py : ['divide', 'sum', 'divide', 'sum', 'sum', 'multiply', 'sum', 'multiply', 'divide', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'value_counts', 'value_counts', 'map', 'map', 'map', 'astype', 'to_datetime', 'to_datetime', 'groupby', 'query', 'sum', 'sum', 'copy', 'mean', 'update', 'groupby', 'head', 'groupby', 'astype', 'round', 'to_csv', 'head'] ['numpy', 'pandas', 'datetime'] ['CatBoostClassifier', 'time', 'tqdm_notebook', 'confusion_matrix', 'KFold']Dict:{'numpy': ['mean', 'sum', 'round', 'multiply', 'divide', 'copy'], 'pandas': ['to_datetime', 'read_csv', 'value_counts'], 'datetime': [], 'catboost': [], 'time': [], 'tqdm': ['update'], 'sklearn': []} axis_0: 0, axis_1: 0
insane-feature-engineering.py : ['diff', 'sum', 'fillna', 'merge', 'merge', 'merge', 'merge', 'agg', 'groupby', 'rename', 'agg', 'groupby', 'rename', 'agg', 'groupby', 'rename', 'agg', 'groupby', 'rename', 'fillna', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'rename', 'mean', 'groupby', 'rename', 'median', 'groupby', 'rename', 'count', 'groupby', 'rename', 'min', 'groupby', 'rename', 'max', 'groupby', 'rename', 'std', 'groupby', 'rename', 'quantile', 'groupby', 'rename', 'quantile', 'groupby', 'rename', 'nunique', 'groupby', 'rename', 'groupby', 'rename', 'first', 'groupby', 'rename', 'last', 'groupby', 'abs', 'read_parquet', 'min', 'max', 'rename', 'sum', 'groupby', 'join', 'merge', 'reset_index', 'concat', 'keys', 'read_parquet', 'rename', 'rename', 'sum', 'groupby', 'agg', 'groupby', 'rename', 'join', 'rename', 'count', 'groupby', 'merge', 'reset_index', 'concat', 'keys', 'mean', 'groupby', 'to_dict', 'std', 'groupby', 'to_dict', 'median', 'groupby', 'to_dict', 'apply', 'apply', 'apply', 'read_csv', 'merge', 'merge', 'to_csv'] ['os', 'glob', 'numpy', 'pandas'] ['reduce', 'Pool', 'tqdm']Dict:{'os': ['rename'], 'glob': [], 'functools': [], 'multiprocessing': [], 'numpy': ['mean', 'median', 'quantile', 'max', 'abs', 'sum', 'min', 'diff', 'std'], 'pandas': ['read_parquet', 'concat', 'merge', 'read_csv'], 'tqdm': []} axis_0: 0, axis_1: 21
rob-sleep-prediction-eda-baseline.py : ['read_csv', 'to_datetime', 'read_csv', 'read_csv', 'to_datetime', 'read_csv', 'info', 'head', 'describe', 'copy', 'map', 'where', 'notnull', 'fillna', 'drop', 'copy', 'apply', 'reset_index', 'drop', 'drop', 'head', 'to_csv', 'drop', 'head', 'to_csv', 'to_csv', 'head', 'to_csv', 'mean', 'to_csv'] ['pandas', 'numpy', 'holidays', 'scipy', 'matplotlib.pyplot', 'seaborn', 'plotly.express'] ['datetime', 'tqdm', 'partial', 'DecisionTreeClassifier', 'plot_tree', 'MinMaxScaler', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'GroupKFold', 'roc_auc_score', 'roc_curve', 'RocCurveDisplay', 'cohen_kappa_score', 'log_loss', 'mean_squared_error', 'KNeighborsClassifier', 'KNeighborsRegressor', 'RFE', 'RFECV', 'IsotonicRegression', 'CalibrationDisplay', 'LogisticRegression', 'RandomForestClassifier', 'HistGradientBoostingRegressor', 'GradientBoostingRegressor', 'SVC', 'SVR', 'LGBMClassifier', 'LGBMRegressor', 'XGBClassifier', 'XGBRegressor', 'CatBoostClassifier', 'CatBoostRegressor', 'LinearRegression', 'Lasso', 'Ridge', 'ElasticNet', 'LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'SGDRegressor']Dict:{'pandas': ['notnull', 'to_datetime', 'read_csv'], 'numpy': ['mean', 'info', 'where', 'copy'], 'datetime': [], 'tqdm': [], 'holidays': [], 'functools': [], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'xgboost': ['apply'], 'catboost': []} axis_0: 0, axis_1: 0
ps-s3e11-2023-eda-and-submission.py : ['replace', 'replace', 'read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'any', 'any', 'isna', 'any', 'any', 'isna', 'any', 'any', 'isna', 'describe', 'head', 'to_dict', 'round', 'value_counts', 'to_dict', 'round', 'value_counts', 'rename', 'nunique', 'rename', 'nunique', 'join', 'add_suffix', 'describe', 'add_suffix', 'describe', 'concat', 'sum', 'sum', 'corr', 'drop', 'sum', 'duplicated', 'sum', 'duplicated', 'concat', 'clip', 'replace', 'concat', 'reset_index', 'drop_duplicates', 'apply', 'apply', 'mean', 'mean', 'sort_values', 'sort_values', 'mean', 'rolling', 'drop', 'read_csv', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'math', 'warnings', 'xgboost'] ['HTML', 'tqdm', 'Styler', 'Style', 'Fore', 'EarlyStopping', 'model_selection', 'metrics', 'combinations']Dict:{'IPython': [], 'pandas': [], 'numpy': ['mean', 'any', 'sum', 'round', 'clip'], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'math': [], 'warnings': [], 'colorama': [], 'xgboost': [], 'sklearn': [], 'itertools': []} axis_0: 0, axis_1: 3
titanic-survival-prediction-top-10.py : ['read_csv', 'read_csv', 'head', 'head', 'astype', 'drop', 'drop', 'reset_index', 'concat', 'head', 'sum', 'isna', 'drop', 'head', 'corr', 'copy', 'select_dtypes', 'sum', 'isna', 'isna', 'isna', 'isna', 'isna', 'fillna', 'fillna', 'median', 'sum', 'isna', 'copy', 'info', 'get_dummies', 'head', 'head', 'where', 'drop', 'head', 'copy', 'max', 'copy', 'reset_index', 'max', 'astype', 'items', 'items', 'mean', 'items', 'sort_values', 'rename', 'astype', 'astype', 'astype', 'apply', 'head', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'tensorflow', 'optuna'] ['StandardScaler', 'KFold', 'cross_val_score', 'LogisticRegression', 'RandomForestClassifier', 'GradientBoostingClassifier', 'KNeighborsRegressor', 'GaussianNB', 'LGBMClassifier', 'XGBClassifier', 'CatBoostClassifier']Dict:{'pandas': ['concat', 'get_dummies', 'isna', 'read_csv'], 'numpy': ['mean', 'median', 'max', 'sum', 'where', 'info', 'copy'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'lightgbm': [], 'xgboost': ['apply'], 'catboost': [], 'tensorflow': ['where', 'concat'], 'optuna': []} axis_0: 0, axis_1: 1
challenging-data-points-cosine-similarity.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'value_counts', 'concat', 'apply', 'nunique', 'apply', 'nunique', 'apply', 'nunique', 'copy', 'concat', 'any', 'mode', 'drop', 'where', 'to_csv', 'head', 'read_csv', 'read_csv', 'copy', 'copy', 'transform', 'drop', 'copy', 'copy', 'drop', 'drop', 'drop', 'copy', 'array', 'array', 'items', 'copy', 'copy', 'array', 'array', 'reset_index', 'reset_index', 'mean', 'mean', 'reset_index', 'reset_index', 'reset_index', 'unique', 'array', 'copy', 'copy', 'copy', 'copy', 'copy', 'array', 'array', 'items', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'read_csv', 'to_csv', 'head'] ['sklearn', 'numpy', 'os', 'datetime', 'pandas', 'matplotlib.pyplot', 'missingno', 'seaborn', 'concurrent.futures', 'random', 'gc', 'xgboost', 'statsmodels.api', 'math', 'optuna', 'xgboost', 'lightgbm', 're', 'warnings'] ['PrettyTable', 'tqdm', 'tqdm', 'deepcopy', 'partial', 'combinations', 'randint', 'uniform', 'f_classif', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'FunctionTransformer', 'metrics', 'GridSearchCV', 'RandomizedSearchCV', 'combinations', 'SimpleImputer', 'train_test_split', 'cross_val_score', 'mean_squared_error', 'mean_squared_log_error', 'roc_auc_score', 'accuracy_score', 'f1_score', 'precision_recall_curve', 'log_loss', 'KMeans', 'KElbowVisualizer', 'OptimalK', 'stats', 'ttest_ind', 'boxcox', 'variance_inflation_factor', 'BaseEstimator', 'TransformerMixin', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StratifiedKFold', 'KFold', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'AdaBoostClassifier', 'BalancedRandomForestClassifier', 'make_classification', 'GaussianNB', 'enable_hist_gradient_boosting', 'DecisionTreeClassifier', 'LogisticRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'NuSVC', 'SVC', 'KNeighborsClassifier', 'KNNImputer', 'LogisticRegression', 'MLPClassifier', 'Pool', 'TfidfVectorizer', 'PCA', 'TruncatedSVD', 'cosine_similarity']Dict:{'sklearn': [], 'numpy': ['mean', 'any', 'array', 'where', 'unique', 'std', 'copy'], 'os': [], 'datetime': [], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'array'], 'matplotlib': [], 'missingno': [], 'prettytable': ['copy'], 'seaborn': [], 'tqdm': [], 'concurrent': [], 'copy': [], 'functools': [], 'itertools': [], 'random': [], 'gc': [], 'xgboost': [], 'yellowbrick': [], 'gap_statistic': [], 'scipy': [], 'statsmodels': [], 'math': [], 'optuna': [], 'lightgbm': [], 'category_encoders': [], 'imblearn': [], 'catboost': [], 're': [], 'warnings': []} axis_0: 6, axis_1: 12
groupkfold-cross-validation-tsflex.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'pivot_table', 'reset_index', 'median', 'groupby', 'fillna', 'reset_index', 'rename', 'copy', 'merge', 'factorize', 'read_csv', 'fillna', 'merge', 'fillna', 'merge', 'astype', 'merge', 'fillna', 'fillna', 'concat', 'reset_index', 'sample', 'clip', 'clip', 'read_csv', 'set_index', 'fillna', 'merge', 'fillna', 'merge', 'merge', 'fillna', 'round', 'clip', 'mean', 'concat', 'astype', 'astype', 'concat', 'fillna', 'merge', 'to_csv'] ['numpy', 'pandas', 'glob', 'pathlib'] ['tqdm', '*', 'base_features', 'emg_features', 'FeatureCollection', 'MultipleFeatureDescriptors', 'seglearn_feature_dict_wrapper', 'GroupKFold']Dict:{'numpy': ['mean', 'median', 'round', 'clip', 'copy'], 'pandas': ['read_csv', 'pivot_table', 'concat', 'factorize', 'merge'], 'tqdm': [], 'sklearn': [], 'glob': [], 'seglearn': [], 'tsflex': [], 'pathlib': []} axis_0: 0, axis_1: 1
time-x-strategy-eda.py : ['unique', 'pivot', 'mean', 'mean', 'mean', 'transpose', 'mean', 'mean'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'random', 'warnings', 'matplotlib'] ['PCA']Dict:{'numpy': ['mean', 'unique', 'transpose'], 'pandas': ['unique', 'pivot'], 'matplotlib': [], 'seaborn': [], 'random': [], 'warnings': [], 'sklearn': []} axis_0: 3, axis_1: 2
feature-engineering-xgboost.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'set_index', 'read_csv', 'boxplot', 'min', 'max', 'boxplot', 'median', 'map', 'map', 'map', 'drop', 'array', 'unique', 'unique', 'astype', 'astype', 'astype', 'sort_values', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'clip', 'fillna', 'astype', 'astype', 'astype', 'concat', 'fillna', 'merge', 'merge', 'merge', 'astype', 'astype', 'astype', 'astype', 'copy', 'merge', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'apply', 'astype', 'fillna', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'astype', 'drop', 'astype', 'map', 'astype', 'iterrows', 'astype', 'iterrows', 'transform', 'groupby', 'transform', 'groupby', 'any', 'isnull', 'fillna', 'info', 'to_pickle', 'read_pickle', 'drop', 'drop', 'drop', 'clip', 'clip', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'time', 'sys', 'gc', 'pickle'] ['product', 'LabelEncoder', 'XGBRegressor', 'plot_importance']Dict:{'numpy': ['median', 'any', 'max', 'min', 'unique', 'clip', 'info', 'array', 'copy'], 'pandas': ['to_pickle', 'read_csv', 'isnull', 'concat', 'read_pickle', 'unique', 'array', 'merge'], 'itertools': [], 'sklearn': ['transform'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'xgboost': [], 'time': [], 'sys': [], 'gc': [], 'pickle': []} axis_0: 0, axis_1: 19
automl-beginner-housing-prices-using-pycaret.py : ['read_csv', 'read_csv', 'head', 'head', 'read_csv', 'to_csv', 'head'] ['numpy', 'pandas'] ['*']Dict:{'numpy': [], 'pandas': ['read_csv'], 'pycaret': []} axis_0: 0, axis_1: 0
feature-engineering-corrected-manhattan-distance.py : ['read_csv', 'abs', 'abs', 'dropna', 'abs', 'abs', 'apply', 'sum'] ['numpy', 'pandas', 'os', 'math', 'seaborn', 'matplotlib.pyplot'] []Dict:{'numpy': ['abs', 'sum'], 'pandas': ['read_csv'], 'os': [], 'math': [], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 0
catboost-training-0-609-performance.py : ['read_csv', 'read_csv', 'read_csv', 'merge', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'merge', 'head', 'drop', 'drop', 'fillna', 'read_csv', 'to_csv'] ['warnings', 'os', 'gc', 're', 'random', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['Counter', 'skew', 'kurtosis', 'tqdm', 'TruncatedSVD', 'mean_squared_error', 'GridSearchCV', 'RandomForestRegressor', 'GradientBoostingRegressor', 'CatBoostRegressor', 'KFold', 'StratifiedKFold', 'GroupKFold', 'train_test_split']Dict:{'warnings': [], 'os': ['rename'], 'gc': [], 're': [], 'random': [], 'collections': ['items'], 'numpy': ['mean', 'max', 'abs', 'unique', 'std'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'sklearn': [], 'catboost': []} axis_0: 0, axis_1: 6
tps-aug22-an-xgb-starter.py : ['read_csv', 'read_csv', 'set_index', 'set_index', 'apply', 'filter', 'apply', 'filter', 'nunique', 'mean', 'mean', 'transform', 'array', 'pop', 'mean', 'array', 'mean', 'array', 'eval', 'head', 'drop_duplicates', 'sort_values', 'reset_index', 'mean', 'mean', 'to_csv'] ['pandas', 'numpy', 'xgboost', 'humanize', 'category_encoders', 'warnings', 'matplotlib.pyplot'] ['HTML', 'print', 'track', 'io', 'Pipeline', 'ColumnTransformer', 'BaseEstimator', 'TransformerMixin', 'FunctionTransformer', 'TargetEncoder', 'GroupKFold', 'cross_validate', 'RFECV', 'ParameterGrid', 'defaultdict', 'FunctionTransformer', 'make_pipeline', 'OneHotEncoder', 'SimpleImputer']Dict:{'IPython': [], 'pandas': ['array', 'eval', 'read_csv'], 'numpy': ['mean', 'array'], 'xgboost': [], 'humanize': [], 'category_encoders': [], 'warnings': [], 'rich': [], 'skimage': [], 'matplotlib': [], 'sklearn': [], 'collections': ['pop']} axis_0: 0, axis_1: 2
dota-eda-fe-and-models.py : ['to_json', 'join', 'read_csv', 'read_csv', 'read_csv', 'head', 'value_counts', 'head', 'any', 'isnull', 'sum', 'isnull', 'value_counts', 'value_counts', 'rename', 'reset_index', 'value_counts', 'value_counts', 'astype', 'hist', 'hist', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'count', 'groupby', 'hist', 'hist', 'hist', 'rank', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'reset_index', 'drop', 'reset_index', 'copy', 'sum', 'sum', 'sum', 'sum', 'std', 'std', 'std', 'std', 'mean', 'mean', 'mean', 'mean', 'reset_index', 'drop', 'reset_index', 'copy', 'join', 'keys', 'get', 'set_index', 'set_index', 'join', 'set_index', 'sum', 'sum', 'sum', 'sum', 'std', 'std', 'std', 'std', 'mean', 'mean', 'mean', 'mean', 'reset_index', 'reset_index', 'copy', 'read_csv', 'to_csv', 'head', 'hist'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'datetime', 'lightgbm', 'os', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'xgboost', 'lightgbm', 'json', 'ast', 'time', 'eli5', 'shap', 'statsmodels.api', 'warnings', 'altair', 'plotly.graph_objs', 'warnings', 'ujson', 'collections'] ['stats', 'train_test_split', 'StratifiedKFold', 'KFold', 'cross_val_score', 'GridSearchCV', 'RepeatedStratifiedKFold', 'StandardScaler', 'model_selection', 'accuracy_score', 'roc_auc_score', 'metrics', 'linear_model', 'PermutationImportance', 'tqdm_notebook', 'SequentialFeatureSelector', 'plot_sequential_feature_selection', 'NearestNeighbors', 'GenericUnivariateSelect', 'SelectPercentile', 'SelectKBest', 'f_classif', 'mutual_info_classif', 'RFE', 'CatBoostClassifier', 'v3', 'HTML', 'tools', 'init_notebook_mode', 'iplot']Dict:{'numpy': ['mean', 'any', 'sum', 'isin', 'std', 'copy'], 'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'matplotlib': ['get', 'hist'], 'seaborn': [], 'datetime': [], 'lightgbm': [], 'scipy': [], 'sklearn': [], 'os': ['rename'], 'plotly': [], 'xgboost': [], 'json': [], 'ast': [], 'time': [], 'eli5': [], 'shap': [], 'tqdm': [], 'mlxtend': [], 'statsmodels': [], 'warnings': [], 'catboost': [], 'altair': [], '': [], 'IPython': [], 'ujson': [], 'collections': []} axis_0: 1, axis_1: 2
mnist-top-5-using-cnn-accuracy-0-997.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'info', 'info', 'astype', 'transform', 'transform', 'astype', 'transform', 'transform', '__init__', 'max', 'sum', 'eval', 'max', 'sum', 'max', 'copy', 'astype', 'head', 'to_csv'] ['warnings', 'torch', 'torchvision', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'torch.optim', 'torch.nn'] ['DataLoader', 'Dataset', 'ConcatDataset', 'transforms', 'train_test_split']Dict:{'warnings': [], '': [], 'torch': [], 'torchvision': [], 'pandas': ['eval', 'read_csv'], 'numpy': ['info', 'sum', 'max', 'copy'], 'matplotlib': [], 'seaborn': [], 'sklearn': ['__init__']} axis_0: 0, axis_1: 0
ps-s3-ep4-eda-modeling.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'head', 'describe', 'head', 'describe', 'value_counts', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'corr', 'drop', 'copy', 'reset_index', 'drop', 'copy', 'reset_index', 'concat', 'drop', 'drop', 'mean', 'sort_values', 'apply', 'mean', 'head', 'apply', 'mean', 'to_csv', 'mean', 'sort_values', 'apply', 'mean', 'head', 'apply', 'mean', 'to_csv', 'apply', 'mean', 'boxplot', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'get_dummies', 'get_dummies', 'concat', 'drop', 'concat', 'drop', 'drop', 'drop', 'mean', 'mean', 'apply', 'mean', 'reset_index', 'drop', 'mean', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'plotly.express'] ['tqdm', 'DecisionTreeClassifier', 'plot_tree', 'MinMaxScaler', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'roc_auc_score', 'roc_curve', 'RocCurveDisplay', 'KNeighborsClassifier', 'RFE', 'LogisticRegression', 'RandomForestClassifier', 'SVC', 'LGBMClassifier', 'XGBClassifier', 'CatBoostClassifier']Dict:{'pandas': ['concat', 'get_dummies', 'read_csv', 'value_counts'], 'numpy': ['mean', 'info', 'where', 'copy'], 'tqdm': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'xgboost': ['apply'], 'catboost': []} axis_0: 0, axis_1: 0
titanic-practice-by-davidcoxon.py : ['read_csv', 'read_csv', 'info', 'sum', 'isnull', 'describe', 'describe', 'head', 'tail', 'map', 'map', 'map', 'map', 'fillna', 'fillna', 'head', 'boxplot', 'boxplot', 'median', 'groupby', 'isnull', 'isnull', 'mean', 'isnull', 'mean', 'astype', 'qcut', 'astype', 'qcut', 'astype', 'qcut', 'mean', 'groupby', 'map', 'mean', 'groupby', 'median', 'groupby', 'isnull', 'get_dummies', 'concat', 'get_dummies', 'concat', 'map', 'astype', 'apply', 'cut', 'cut', 'get_dummies', 'astype', 'concat', 'get_dummies', 'astype', 'concat', 'value_counts', 'qcut', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'get_dummies', 'concat', 'get_dummies', 'concat', 'map', 'astype', 'median', 'groupby', 'isnull', 'cut', 'cut', 'get_dummies', 'concat', 'get_dummies', 'concat', 'hist', 'astype', 'dropna', 'hist', 'map', 'max', 'boxplot', 'where', 'where', 'astype', 'apply', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'astype', 'notnull', 'fillna', 'map', 'map', 'fillna', 'astype', 'get_dummies', 'astype', 'concat', 'get_dummies', 'astype', 'concat', 'replace', 'replace', 'head', 'apply', 'value_counts', 'get_dummies', 'astype', 'concat', 'get_dummies', 'astype', 'concat', 'get_dummies', 'astype', 'concat', 'get_dummies', 'astype', 'concat', 'where', 'astype', 'median', 'groupby', 'isnull', 'astype', 'qcut', 'astype', 'qcut', 'get_dummies', 'concat', 'get_dummies', 'concat', 'get_dummies', 'astype', 'concat', 'get_dummies', 'astype', 'concat', 'sum', 'isnull', 'describe', 'mean', 'groupby', 'map', 'map', 'map', 'map', 'head', 'fillna', 'fillna', 'corr', 'sort_values', 'head', 'to_csv', 'fillna', 'fillna', 'sort_values', 'head', 'set_index', 'to_csv', 'fillna', 'fillna', 'sort_values', 'sort_values', 'mean', 'std', 'mean', 'std', 'fillna', 'fillna', 'fillna', 'to_csv', 'head', 'fillna', 'fillna', 'head', 'fillna', 'fillna', 'head', 'to_csv', 'fillna', 'fillna', 'head', 'to_csv', 'fillna', 'fillna', 'head', 'to_csv', 'fillna', 'fillna', 'to_csv', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['KFold', 'AdaBoostClassifier', 'BaggingClassifier', 'ExtraTreesClassifier', 'GradientBoostingClassifier', 'RandomForestClassifier', 'VotingClassifier', 'LinearDiscriminantAnalysis', 'LogisticRegression', 'Perceptron', 'SGDClassifier', 'LogisticRegression', 'PassiveAggressiveClassifier', 'RidgeClassifierCV', 'accuracy_score', 'auc', 'classification_report', 'confusion_matrix', 'mean_squared_error', 'precision_score', 'recall_score', 'roc_curve', 'cross_val_score', 'cross_val_predict', 'cross_validate', 'train_test_split', 'GridSearchCV', 'KFold', 'learning_curve', 'RandomizedSearchCV', 'StratifiedKFold', 'OneVsRestClassifier', 'GaussianNB', 'KNeighborsClassifier', 'MLPClassifier', 'GridSearchCV', 'SVC', 'LinearSVC', 'DecisionTreeClassifier', 'ensemble', 'linear_model', 'neighbors', 'svm', 'tree', 'randint', 'XGBClassifier', 'LogisticRegression', 'DecisionTreeClassifier', 'VotingClassifier']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'where', 'min', 'info', 'std'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'get_dummies', 'notnull', 'qcut'], 'os': ['replace'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'sklearn': [], 'scipy': ['mean', 'median', 'std'], 'xgboost': ['apply'], 'warnings': [], '=': [], 'pd': [], "columns=['Feature_Importance'],": [], 'ascending=False,': [], 'inplace=True)': []} axis_0: 0, axis_1: 24
commonlit-readability-eda-modeling.py : ['join', 'read_csv', 'read_csv', 'head', 'head', 'sum', 'isnull', 'value_counts', 'value_counts', 'replace', 'replace', 'fillna', 'apply', 'value_counts', 'sum', 'isna', 'info', 'drop', 'info', 'nlargest', 'value_counts', 'value_counts', 'boxplot', 'boxplot', 'boxplot', 'apply', 'corr', 'max', 'boxplot', 'min', 'drop', 'corr', 'round', 'round', 'join', 'join', 'apply', 'apply', 'join', 'apply', 'apply', 'corr', 'head', 'apply', 'concat', 'drop', 'read_csv', 'concat', 'drop', 'drop', 'fillna', 'apply', 'apply', 'transform', 'apply', 'apply', 'apply', 'apply', 'drop', 'transform', 'concat', 'drop', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 're', 'matplotlib.pyplot', 'seaborn', 'math', 'plotly.express', 'statsmodels.api', 'nltk'] ['KMeans', 'f_oneway', 'ols', 'TfidfVectorizer', 'LatentDirichletAllocation', 'word_tokenize', 'stopwords', 'SnowballStemmer', 'LinearRegression', 'LabelEncoder', 'CountVectorizer', 'train_test_split', 'mean_squared_error', 'r2_score']Dict:{'numpy': ['max', 'sum', 'round', 'min', 'info'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts'], 'os': ['replace'], 're': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'math': [], 'plotly': [], 'sklearn': [], 'scipy': [], 'statsmodels': [], 'nltk': []} axis_0: 3, axis_1: 11
quora-eda-model-selection-roc-pr-plots.py : ['fillna', 'read_csv', 'head', 'info', 'count', 'groupby', 'count', 'groupby', 'fillna', 'concat', 'abs', 'apply', 'apply', 'apply', 'head', 'round', 'astype', 'round', 'max', 'head', 'unique', 'apply', 'transform', 'round', 'fillna', 'read_csv', 'apply', 'apply', 'apply', 'head', 'transform', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools'] ['check_output', 'TfidfVectorizer', 'HashingVectorizer', 'TSNE', 'display', 'HTML', 'MinMaxScaler', 'parallel_coordinates', 'LogisticRegression', 'precision_recall_curve', 'auc', 'roc_curve', 'GridSearchCV', 'train_test_split', 'MinMaxScaler']Dict:{'numpy': ['max', 'abs', 'round', 'unique', 'info'], 'pandas': [], 'seaborn': [], 'matplotlib': [], 'subprocess': [], 'plotly': [], 'sklearn': ['transform'], 'IPython': []} axis_0: 1, axis_1: 4
titanic-end-to-end-ml-workflow-top-7.py : ['read_csv', 'read_csv', 'head', 'tail', 'unique', 'unique', 'set_index', 'set_index', 'dropna', 'dropna', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'sum', 'isna', 'round', 'sum', 'isna', 'round', 'sum', 'isna', 'round', 'sum', 'isna', 'fillna', 'fillna', 'get', 'value_counts', 'groupby', 'isna', 'isna', 'isna', 'isna', 'mean', 'corr', 'isna', 'fillna', 'fillna', 'mean', 'mean', 'astype', 'round', 'astype', 'round', 'get', 'get', 'value_counts', 'map', 'map', 'value_counts', 'aggregate', 'groupby', 'aggregate', 'groupby', 'sum', 'groupby', 'astype', 'sum', 'astype', 'mean', 'sum', 'sum', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'groupby', 'astype', 'sum', 'apply', 'unique', 'sum', 'sum', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'groupby', 'iterrows', 'replace', 'replace', 'replace', 'replace', 'drop', 'drop', 'value_counts', 'value_counts', 'map', 'map', 'join', 'get_dummies', 'join', 'get_dummies', 'drop', 'drop', 'cut', 'cut', 'cut', 'cut', 'cut', 'astype', 'cut', 'astype', 'drop', 'drop', 'boxplot', 'map', 'map', 'boxplot', 'map', 'map', 'boxplot', 'map', 'map', 'map', 'map', 'hist', 'cut', 'cut', 'cut', 'astype', 'cut', 'astype', 'drop', 'drop', 'get', 'get', 'map', 'map', 'drop', 'drop', 'corr', 'drop', 'mean', 'mean', 'std', 'set_index', 'sort_values', 'sort_values', 'sort_values', 'mean', 'reset_index', 'rename', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'time', 'warnings'] ['RFECV', 'StratifiedShuffleSplit', 'cross_validate', 'GridSearchCV', 'cross_val_score', 'LinearRegression', 'LogisticRegression', 'RidgeClassifier', 'SGDClassifier', 'PassiveAggressiveClassifier', 'GaussianProcessClassifier', 'SVC', 'LinearSVC', 'NuSVC', 'KNeighborsClassifier', 'RadiusNeighborsClassifier', 'GaussianNB', 'MultinomialNB', 'BernoulliNB', 'ComplementNB', 'DecisionTreeClassifier', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'BaggingClassifier', 'ExtraTreesClassifier', 'VotingClassifier', 'MLPClassifier', 'XGBClassifier']Dict:{'pandas': ['isna', 'read_csv', 'cut', 'value_counts', 'get_dummies', 'unique'], 'numpy': ['mean', 'max', 'sum', 'round', 'min', 'unique', 'std'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'get', 'hist'], 'sklearn': [], 'xgboost': ['apply'], 'time': [], 'warnings': []} axis_0: 0, axis_1: 0
no-leakage-dnn-prediction-feature-engineering.py : ['read_csv', 'tail', 'fillna', 'map', 'to_datetime', 'info', 'read_csv', 'replace', 'where', 'drop_duplicates', 'std', 'skew', 'kurtosis', 'to_datetime', 'where', 'where', 'where', 'where', 'where', 'merge', 'mean', 'groupby', 'reset_index', 'std', 'groupby', 'reset_index', 'merge', 'merge', 'drop', 'fillna', 'fillna', 'head', 'head', 'unique', 'map', 'mean', 'map', 'fillna', 'map', 'merge', 'fillna', 'rank', 'apply', 'drop', 'merge', 'fillna', 'unique', 'copy', 'head'] ['numpy', 'pandas', 'tensorflow', 'jpx_tokyo_market_prediction'] ['layers', 'keras', 'BatchNormalization', 'Sequential', 'Model', 'Input', 'Embedding', 'Dense', 'Flatten', 'Concatenate', 'Reshape', 'backend', 'regularizers', 'Adam', 'EarlyStopping', 'ModelCheckpoint', 'l2', 'Loss', 'StandardScaler', 'GroupKFold']Dict:{'numpy': ['mean', 'where', 'unique', 'info', 'std', 'copy'], 'pandas': ['to_datetime', 'merge', 'unique', 'read_csv'], 'tensorflow': [], 'keras': [], 'sklearn': [], 'jpx_tokyo_market_prediction': []} axis_0: 1, axis_1: 6
cnn-transformer-enc-rnn-feature-eng-data-aug.py : ['read_json', 'read_json', 'read_csv', 'head', 'transpose', 'array', 'applymap', 'array', 'array', 'array', 'read_csv', 'head', 'copy', 'isin', 'merge', 'map', 'to_dict', 'set_index', 'transpose', 'array', '__init__', 'transpose', 'transpose', 'copy', 'update', '__init__', 'copy', 'update', 'fillna', 'transpose', 'array', 'transpose', 'array', 'mean', 'mean', 'reset_index', 'mean', 'groupby', 'concat', 'head', 'merge', 'mean', 'copy', 'query', 'copy', 'query', 'mean', 'array', 'mean', 'array', 'mean', 'array', 'mean', 'array', 'copy', 'head', 'head', 'to_csv'] ['os', 'sys', 'json', 'math', 'random', 'numpy', 'pandas', 'gc', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'plotly.graph_objects', 'tensorflow', 'tensorflow_addons', 'tensorflow.keras.backend', 'tensorflow.keras.layers', 'warnings'] ['tqdm', 'train_test_split', 'KFold', 'StratifiedKFold', 'GroupKFold', 'KMeans', 'TqdmCallback']Dict:{'os': [], '': [], 'sys': [], 'json': [], 'math': [], 'random': [], 'numpy': ['transpose', 'mean', 'isin', 'array', 'copy'], 'pandas': ['read_csv', 'read_json', 'concat', 'array', 'merge'], 'gc': [], 'tqdm': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': [], 'tensorflow': [], 'tensorflow_addons': [], 'warnings': []} axis_0: 0, axis_1: 2
u-s-pppm-simple-ensemble-baseline.py : ['read_pickle', 'info', 'read_csv', 'read_csv', 'head', 'head', 'map', 'head', 'head', 'items', '__init__', 'sum', 'eval', 'items', 'replace', 'mean', 'read_csv', 'join', 'read_csv', 'join', 'apply', 'eval', '__init__', 'update', 'mean', 'replace', 'mean', 'to_csv', 'head'] ['os', 'os', 'gc', 'math', 'time', 'random', 'scipy', 'numpy', 'pandas', 'torch', 'torch.nn', 'torch.nn.functional', 'tokenizers', 'transformers', 'warnings'] ['preprocessing', 'model_selection', 'dataclass', 'Optional', 'tqdm', 'DataLoader', 'Dataset', 'AdamW', 'AutoConfig', 'AutoModel', 'AutoTokenizer', 'get_cosine_schedule_with_warmup', 'AutoTokenizer', 'AutoModel', 'AutoConfig', 'get_linear_schedule_with_warmup', 'get_cosine_schedule_with_warmup', 'getLogger', 'INFO', 'StreamHandler', 'FileHandler', 'Formatter', 'MinMaxScaler']Dict:{'os': ['replace'], 'gc': [], 'math': [], 'time': [], 'random': [], 'scipy': [], 'numpy': ['mean', 'info', 'sum'], 'pandas': ['eval', 'read_pickle', 'read_csv'], 'sklearn': ['__init__'], 'dataclasses': ['__init__'], 'typing': ['__init__'], 'tqdm': ['update', '__init__'], 'torch': ['__init__'], 'tokenizers': [], 'transformers': [], 'warnings': [], '': []} axis_0: 1, axis_1: 1
time-series-tps-eda-xgb-simplified.py : ['read_csv', 'head', 'read_csv', 'head', 'info', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'duplicated', 'describe', 'describe', 'describe', 'min', 'max', 'min', 'max', 'nunique', 'unique', 'unique', 'unique', 'head', 'reset_index', 'sum', 'groupby', 'describe', 'boxplot', 'boxplot', 'boxplot', 'sum', 'groupby', 'reset_index', 'rename', 'sum', 'groupby', 'reset_index', 'rename', 'sum', 'groupby', 'unique', 'info', 'get_dummies', 'get_dummies', 'drop', 'drop', 'reset_index', 'sort_values', 'read_csv', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'warnings'] ['LabelEncoder', 'OneHotEncoder', 'train_test_split', 'mean_absolute_error', 'mean_squared_error', 'r2_score']Dict:{'numpy': ['max', 'sum', 'min', 'unique', 'info'], 'pandas': ['get_dummies', 'unique', 'read_csv', 'isnull'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': [], 'warnings': []} axis_0: 0, axis_1: 2
compact-feature-engineering-lgbm-py-version.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'to_csv', 'drop', 'merge', 'drop', 'merge', 'drop', 'merge', 'drop', 'merge', 'pop', 'concat', 'to_csv', 'pow', 'pow', 'pow', 'pow', 'read_csv', 'merge', 'pow', 'pow', 'pow', 'pow', 'isin', 'rank', 'groupby', 'astype', 'astype', 'pivot_table', 'join', 'reset_index', 'merge', 'rank', 'groupby', 'astype', 'astype', 'pivot_table', 'join', 'reset_index', 'merge', 'drop', 'head', 'agg', 'groupby', 'join', 'join', 'join', 'join', 'head', 'read_csv', 'merge', 'drop', 'merge', 'drop', 'head', 'read_csv', 'reset_index', 'pivot_table', 'reset_index', 'pivot_table', 'merge', 'merge', 'items', 'pow', 'pow', 'pow', 'pow', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'drop', 'head', 'pow', 'pow', 'pow', 'pow', 'pow', 'pow', 'drop', 'reset_index', 'pivot_table', 'reset_index', 'pivot_table', 'merge', 'merge', 'head', 'rename', 'read_csv', 'rename', 'read_csv', 'read_csv', 'merge', 'merge', 'head', 'astype', 'mean', 'groupby', 'abs', 'groupby', 'abs', 'mean', 'map', 'concat', 'unique', 'keys', 'drop', 'reset_index', 'head', 'sort_values', 'mean', 'groupby', 'mean', 'groupby', 'abs', 'map', 'mean', 'map', 'to_csv', 'items', 'head', 'sort_values', 'mean', 'groupby'] ['numpy', 'pandas', 'lightgbm', 'os', 'gc'] ['tqdm_notebook', 'train_test_split', 'KFold', 'StratifiedKFold', 'GroupKFold', 'preprocessing']Dict:{'tqdm': [], 'numpy': ['mean', 'isin', 'abs', 'unique'], 'pandas': ['read_csv', 'pivot_table', 'concat', 'unique', 'merge'], 'sklearn': [], 'lightgbm': [], 'os': ['rename'], 'gc': []} axis_0: 2, axis_1: 4
lanl-earthquake-prediction-new-features.py : ['read_csv', 'array', 'array', 'mean', 'std', 'quantile', 'quantile', 'quantile', 'transpose', 'array', 'divide', 'sum', 'sum', 'multiply', 'array', 'std', 'array', 'array', 'divide', 'array', 'mean', 'mean', 'array', 'cumsum', 'mean', 'array', 'sum', 'sum', 'array'] ['os', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['tqdm', 'jit', 'log', 'floor', 'KDTree', 'periodogram', 'welch', '*', '*', 'tqdm', 'train_test_split', 'backend', 'optimizers', 'GridSearchCV', 'KFold', '*', 'activations', 'regularizers', 'initializers', 'constraints', 'Layer', 'InputSpec', 'categorical_crossentropy', 'sparse_categorical_crossentropy', 'plot_model', 'model_to_dot', 'SVG']Dict:{'os': [], 'gc': [], 'numpy': ['mean', 'transpose', 'divide', 'quantile', 'sum', 'array', 'std', 'multiply', 'cumsum'], 'pandas': ['array', 'read_csv'], 'tqdm': [], 'numba': [], 'math': [], 'sklearn': [], 'scipy': [], 'keras': [], 'matplotlib': [], 'seaborn': [], 'IPython': [], 'warnings': []} axis_0: 0, axis_1: 1
train-lgbm-on-google-colab-to-be-used-in-kaggle.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'filter', 'to_datetime', 'unique', 'concat', 'unique', 'concat', 'unique', 'concat', 'unique', 'concat', 'unique', 'concat', 'unique', 'concat', 'rename', 'join', 'drop', 'join', 'drop', 'filter', 'rename', 'drop', 'mean', 'mean', 'filter', 'join', 'join', 'drop', 'join', 'drop', 'mean', 'mean', 'filter', 'join', 'join', 'join', 'drop', 'filter', 'drop', 'sum', 'drop', 'sum', 'join', 'rename', 'join', 'rename', 'join', 'rename', 'mean', 'transpose', 'std', 'transpose', 'drop', 'concat', 'set_index', 'astype', 'drop', 'drop', 'drop', 'clip', 'clip', 'notnull', 'keys', 'apply', 'join', 'join', 'join', 'items', 'join'] ['warnings', 'os', 'gc', 'pickle', 'numpy', 'pandas', 'polars', 'plotly.express', 'lightgbm', 'holidays', 'datetime', 'joblib', 'os'] ['drive', 'VotingRegressor']Dict:{'google': [], 'warnings': [], 'os': ['rename'], 'gc': [], 'pickle': [], 'numpy': ['transpose', 'mean', 'sum', 'unique', 'clip', 'std'], 'pandas': ['read_csv', 'concat', 'unique', 'notnull', 'to_datetime'], 'polars': ['mean', 'read_csv', 'sum', 'concat', 'apply', 'std'], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'holidays': [], 'datetime': [], 'joblib': []} axis_0: 0, axis_1: 3
titanic-competition-step-by-step-using-xgboost.py : ['read_csv', 'read_csv', 'reset_index', 'concat', 'drop', 'drop_duplicates', 'drop', 'info', 'info', 'unique', 'value_counts', 'value_counts', 'pivot_table', 'astype', 'reset_index', 'mean', 'groupby', 'unique', 'sort_values', 'duplicated', 'pivot_table', 'sum', 'astype', 'reset_index', 'mean', 'groupby', 'dropna', 'hist', 'dropna', 'dropna', 'hist', 'dropna', 'boxplot', 'dropna', 'reset_index', 'mean', 'groupby', 'pivot_table', 'sum', 'astype', 'sort_values', 'reset_index', 'mean', 'groupby', 'pivot_table', 'sum', 'astype', 'value_counts', 'unique', 'hist', 'dropna', 'hist', 'dropna', 'boxplot', 'value_counts', 'reset_index', 'mean', 'groupby', 'pivot_table', 'sum', 'astype', 'corr', 'sum', 'isnull', 'boxplot', 'median', 'groupby', 'apply', 'isnull', 'idxmax', 'value_counts', 'replace', 'unique', 'fillna', 'drop', 'value_counts', 'reset_index', 'mean', 'groupby', 'apply', 'sort_values', 'reset_index', 'mean', 'groupby', 'map', 'rename', 'count', 'groupby', 'head', 'apply', 'unique', 'map', 'value_counts', 'boxplot', 'boxplot', 'cut', 'value_counts', 'quantile', 'quantile', 'astype', 'max', 'cut', 'value_counts', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'astype', 'astype', 'sum', 'isnull', 'apply', 'isnull', 'mean', 'replace', 'fillna', 'map', 'apply', 'apply', 'map', 'cut', 'cut', 'apply', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'drop', 'astype', 'astype', 'drop', 'head', 'get_dummies', 'get_dummies', 'align', 'corr', 'unique', 'sum', 'unique', 'head', 'sum', 'head', 'apply', 'head', 'to_csv', 'head', 'head', 'mean', 'sort_values', 'head'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot'] ['XGBClassifier', 'train_test_split', 'StratifiedKFold', 'GridSearchCV', 'accuracy_score', 'precision_score', 'recall_score', 'roc_curve', 'auc', 'LabelEncoder', 'XGBClassifier']Dict:{'pandas': ['read_csv', 'isnull', 'cut', 'pivot_table', 'concat', 'value_counts', 'get_dummies', 'unique'], 'numpy': ['mean', 'median', 'quantile', 'max', 'sum', 'unique', 'info'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'xgboost': ['apply'], 'sklearn': []} axis_0: 2, axis_1: 12
house-prices-begginer-top-7.py : ['read_csv', 'read_csv', 'drop', 'drop', 'reset_index', 'drop', 'describe', 'head', 'describe', 'skew', 'kurt', 'reset_index', 'concat', 'sum', 'isnull', 'sort_values', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'apply', 'fillna', 'mode', 'transform', 'groupby', 'fillna', 'mode', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'select_dtypes', 'select_dtypes', 'head', 'head', 'apply', 'sort_values', 'mean', 'sort_values', 'apply', 'mean', 'sort_values', 'apply', 'apply', 'apply', 'apply', 'drop', 'mod', 'concat', 'boxplot', 'corr', 'nlargest', 'drop', 'get_dummies', 'value_counts', 'copy', 'drop', 'copy', 'drop', 'items', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'array', 'array', 'array', 'read_csv', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'warnings', 'os'] ['norm', 'boxcox1p', 'boxcox_normmax', 'StandardScaler', 'stats', 'stats', 'norm', 'skew', 'skew', 'boxcox1p', 'skew', 'datetime', 'RobustScaler', 'KFold', 'cross_val_score', 'mean_squared_error', 'make_scorer', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'make_pipeline', 'LinearRegression', 'GradientBoostingRegressor', 'SVR', 'StackingCVRegressor', 'LinearRegression', 'XGBRegressor', 'LGBMRegressor']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'array'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'numpy': ['mean', 'median', 'sum', 'array', 'mod', 'std', 'copy'], 'scipy': [], 'sklearn': [], 'warnings': [], 'os': [], 'datetime': [], 'mlxtend': [], 'xgboost': ['apply'], 'lightgbm': []} axis_0: 0, axis_1: 7
useful-new-features-and-a-optimised-model.py : ['read_csv', 'cumsum', 'copy', 'mean', 'std', 'max', 'min', 'sum', 'sum', 'abs', 'mean', 'std', 'max', 'min', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'min', 'abs', 'std', 'std', 'std', 'std', 'mean', 'mean', 'mean', 'mean', 'min', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'max', 'abs', 'min', 'max', 'abs', 'min', 'abs', 'sum', 'mean', 'diff', 'mean', 'diff', 'mean', 'diff', 'mean', 'diff', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'mean', 'abs', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'ewm', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'std', 'max', 'min', 'sum', 'sum', 'abs', 'mean', 'std', 'max', 'min', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'min', 'abs', 'std', 'std', 'std', 'std', 'mean', 'mean', 'mean', 'mean', 'min', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'max', 'abs', 'min', 'max', 'abs', 'min', 'abs', 'sum', 'mean', 'diff', 'mean', 'diff', 'mean', 'diff', 'mean', 'diff', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'mean', 'abs', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'ewm', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'mean', 'mean', 'std', 'rolling', 'transform', 'read_csv', 'read_csv', 'mean', 'std', 'max', 'min', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'min', 'abs', 'std', 'std', 'std', 'std', 'mean', 'mean', 'mean', 'mean', 'min', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'max', 'abs', 'min', 'max', 'abs', 'min', 'abs', 'sum', 'mean', 'diff', 'mean', 'diff', 'mean', 'diff', 'mean', 'diff', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'mean', 'abs', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'ewm', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'mean', 'mean', 'std', 'rolling', 'transform', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'max', 'array', 'max', 'array', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'gc'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'NuSVR', 'SVR', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'mean_squared_error', 'mean_absolute_error', 'Ridge', 'RidgeCV', 'CatBoostRegressor', 'hilbert', 'hann', 'convolve', 'BayesianOptimization']Dict:{'numpy': ['mean', 'quantile', 'max', 'abs', 'sum', 'array', 'min', 'isin', 'diff', 'std', 'cumsum', 'copy'], 'pandas': ['concat', 'array', 'read_csv'], 'os': [], 'matplotlib': [], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'gc': [], 'catboost': [], 'seaborn': [], 'warnings': [], 'scipy': [], 'bayes_opt': []} axis_0: 1, axis_1: 1
jpx-lgbmranker-learning-from-past-jpx-competition.py : ['read_csv', 'to_datetime', 'set_index', 'read_csv', 'to_datetime', 'set_index', 'concat', 'read_csv', 'concat', 'add_prefix', 'shift', 'groupby', 'join', 'drop', 'set_index', 'reset_index', 'add_prefix', 'mean', 'rolling', 'groupby', 'reset_index', 'set_index', 'merge', 'reset_index', 'fillna', 'astype', 'fillna', 'rank', 'groupby', 'qcut', 'sort_values', 'sort_values', 'drop', 'drop', 'value_counts', 'value_counts', 'sort_values', 'read_csv', 'to_datetime', 'set_index', 'read_csv', 'to_datetime', 'set_index', 'concat', 'concat', 'rank', 'astype', 'drop', 'drop', 'merge', 'to_datetime', 'set_index', 'concat', 'copy', 'reset_index', 'set_index', 'merge', 'reset_index', 'fillna', 'transform', 'tail', 'drop'] ['sys', 'warnings', 'time', 'os', 'copy', 'gc', 're', 'random', 'pickle', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn', 'jpx_tokyo_market_prediction'] ['display', 'json_normalize', 'pprint', 'Path', 'tqdm', 'datetime', 'timedelta', 'OrdinalEncoder', 'LGBMRanker']Dict:{'sys,': [], 'warnings,': [], 'time,': [], 'os,': [], 'copy,': [], 'gc,': [], 're,': [], 'random': [], 'pickle': [], 'IPython': [], 'matplotlib': [], 'numpy': ['mean', 'copy'], 'pandas': [], 'seaborn': [], 'pprint': [], 'pathlib': [], 'tqdm': [], 'datetime': [], 'sklearn': ['transform'], 'lightgbm': [], 'jpx_tokyo_market_prediction': []} axis_0: 3, axis_1: 8
feature-engineering-lightgbm-model-starter-kit.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'apply', 'apply', 'head', 'max', 'head', 'head', 'apply', 'head', 'astype', 'astype', 'head', 'apply', 'apply', 'head', 'head', 'head', 'head', 'mean', 'median', 'mode', 'mean', 'median', 'mode', 'mean', 'median', 'mode', 'round', 'round', 'head', 'apply', 'head', 'apply', 'join', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'lightgbm'] ['linear_model']Dict:{'numpy': ['mean', 'median', 'round', 'max'], 'pandas': ['read_csv'], 'os': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 0
eda-and-additional-feat-distance-adress-zip.py : ['read_csv', 'read_csv', 'head', 'nunique', 'describe', 'round', 'head', 'query', 'apply', 'query', 'reset_index', 'apply', 'apply', 'query', 'query', 'query', 'query', 'query', 'transpose', 'head', 'query'] ['pandas', 'geopandas', 'geopy', 'pandas'] ['Point', 'GeoDataFrame', 'radians', 'cos', 'sin', 'asin', 'sqrt']Dict:{'pandas': ['read_csv'], 'shapely': [], 'geopandas': [], 'math': [], 'geopy': []} axis_0: 0, axis_1: 3
gru-with-simplified-feature-engineering.py : ['read_csv', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'reindex', 'set_index', 'fillna', 'reset_index', 'map', 'unique', 'reindex', 'set_index', 'fillna', 'reset_index', 'pivot_table', 'reset_index', 'add', 'add', 'add', 'add', 'add', 'unique', 'rename', 'transform'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'tensorflow', 'random', 'optiver2023'] ['Sequential', 'EarlyStopping', 'ModelCheckpoint', 'Input', 'Dense', 'GRU', 'Dropout', 'mean_absolute_error', 'mean_squared_error', 'StandardScaler']Dict:{'os': ['rename'], 'pandas': ['unique', 'pivot_table', 'read_csv'], 'numpy': ['add', 'max', 'sum', 'min', 'unique'], 'matplotlib': [], 'tensorflow': ['unique', 'add'], 'random': [], 'keras': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 0
linear-nonlinear-scaling.py : ['join', 'read_csv', 'copy', 'describe', 'mean', 'std', 'skew', 'kurtosis', 'boxplot', 'copy', 'boxplot', 'copy', 'boxplot', 'copy', 'boxplot', 'copy', 'boxplot', 'copy', 'quantile', 'quantile', 'clip', 'boxplot', 'copy', 'boxplot', 'copy', 'boxplot', 'copy', 'boxplot'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'scipy.stats', 'warnings'] ['rcParams', 'StandardScaler', 'MinMaxScaler', 'RobustScaler', 'PowerTransformer', 'PowerTransformer', 'QuantileTransformer']Dict:{'numpy': ['mean', 'quantile', 'clip', 'std', 'copy'], 'pandas': ['read_csv'], 'os': [], 'seaborn': ['boxplot'], 'matplotlib': ['copy'], 'scipy': ['kurtosis', 'describe', 'skew'], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 1
siim-covid-19-detection-10-step-tutorial-1.py : ['read_csv', 'read_csv', 'read_csv', 'replace', 'count', 'sum', 'isnull', 'sum', 'isnull', 'apply', 'apply', 'rename', 'merge', 'value_counts', 'value_counts', 'sum', 'sum', 'unique', 'unique', 'unique', 'unique', 'duplicated', 'duplicated', 'sort_values', 'isin', 'replace', 'value_counts', 'sum', 'head', 'head', 'head', 'iterrows', 'iterrows', 'iterrows', 'to_csv', 'min', 'max', 'astype', 'array'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'matplotlib', 'pydicom', 'cv2', 'ast', 'warnings', 'matplotlib.pyplot', 'seaborn', 'cv2'] ['glob']Dict:{'numpy': ['max', 'sum', 'min', 'unique', 'isin', 'array'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'unique', 'array', 'merge'], 'os': ['rename', 'replace'], 'matplotlib': [], 'pydicom': [], 'cv2': [], 'ast': [], 'warnings': [], 'seaborn': [], 'glob': []} axis_0: 0, axis_1: 1
autism-prediction-77-8-feature-engineering.py : ['join', 'read_csv', 'read_csv', 'set_index', 'head', 'nunique', 'info', 'describe', 'sum', 'sum', 'items', 'transform', 'transform', 'astype', 'astype', 'sample', 'concat', 'sample', 'concat', 'head', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'warnings', 'os'] ['datetime', 'roc_auc_score', 'roc_curve', 'train_test_split', 'GridSearchCV', 'cross_val_score', 'GroupKFold', 'LabelEncoder', 'Normalizer', 'KBinsDiscretizer', 'GaussianNB', 'BernoulliNB', 'LogisticRegression', 'RandomForestClassifier', 'SVC', 'KNeighborsClassifier', 'GradientBoostingClassifier', 'XGBClassifier', 'BernoulliNB']Dict:{'numpy': ['info', 'sum'], 'pandas': ['concat', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'datetime': [], 'sklearn': [], 'xgboost': [], 'warnings': [], 'os': []} axis_0: 0, axis_1: 2
storesales-ts-starter.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'value_counts', 'head', 'head', 'value_counts', 'head', 'head', 'to_datetime', 'apply', 'apply', 'apply', 'to_datetime', 'apply', 'apply', 'apply', 'transform', 'transform', 'where', 'where', 'where', 'to_csv'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'warnings'] ['preprocessing', 'XGBRegressor', 'LinearRegression', 'mean_squared_log_error', 'train_test_split']Dict:{'os': [], 'pandas': ['to_datetime', 'read_csv', 'value_counts'], 'numpy': ['where'], 'matplotlib': [], 'sklearn': [], 'xgboost': ['apply'], 'warnings': []} axis_0: 0, axis_1: 0
how-to-save-time-and-memory-with-big-datasets.py : ['read_csv', 'read_csv', 'copy', 'head', 'tail', 'read_csv', 'read_csv', 'info', 'info', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'info', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'read_csv', 'read_csv', 'read_csv'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'warnings', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'plotly.figure_factory', 'datetime', 'os', 'time', 'gc'] ['norm', 'StandardScaler', 'stats', 'KFold', 'mean_absolute_error']Dict:{'pandas': ['read_csv'], 'matplotlib': [], 'seaborn': [], 'numpy': ['info', 'min', 'max', 'copy'], 'scipy': [], 'sklearn': [], 'warnings': [], '': [], 'plotly': [], 'datetime': [], 'os': [], 'time': [], 'gc': []} axis_0: 0, axis_1: 0
ingv-challenge-fast-feature-engineering.py : ['read_csv', 'map', 'head', 'min', 'median', 'max', 'apply', 'min', 'median', 'max', 'hist', 'read_csv', 'astype', 'set_index', 'head', 'map', 'quantile', 'map', 'quantile', 'boxplot', 'to_csv', 'head', 'read_csv', 'fillna', 'head', 'sort_values', 'tail', 'sort_values', 'min', 'concat', 'map', 'join', 'product', 'concat', 'agg', 'product', 'sum', 'isna', 'fillna', 'abs', 'mean', 'copy', 'copy', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'array', 'astype', 'read_csv', 'concat', 'sum', 'isna', 'fillna', 'abs', 'agg', 'quantile', 'sum', 'isna', 'copy', 'fillna', 'head', 'nunique', 'drop', 'drop', 'concat', 'copy', 'mean', 'array', 'mean', 'array', 'transpose', 'sum', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'concat', 'drop', 'value_counts', 'sort_values', 'reset_index', 'head'] ['numpy', 'scipy', 'scipy.signal', 'pandas', 'matplotlib.pyplot', 'seaborn', 'gc', 'pickle', 'os', 'itertools', 'datetime', 'psutil', 'lightgbm'] ['partial', 'Pool', 'KFold', 'train_test_split', 'mean_absolute_error', 'r2_score']Dict:{'numpy': ['transpose', 'median', 'mean', 'product', 'quantile', 'max', 'abs', 'sum', 'min', 'isin', 'array', 'copy'], 'scipy': [], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'array'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'gc,': [], 'pickle,': [], 'os,': [], 'itertools,': [], 'datetime': [], 'functools': [], 'psutil': [], 'multiprocessing': [], 'sklearn': [], 'lightgbm': []} axis_0: 5, axis_1: 4
how-divergence-the-train-test-distributions-are.py : ['read_csv', 'read_csv', 'reset_index', 'concat', 'head', 'isnull', 'astype', 'astype', 'median', 'groupby', 'mean', 'apply', 'groupby', 'fillna', 'median', 'isnull', 'fillna', 'isnull', 'mean', 'groupby', 'fillna', 'transform', 'groupby', 'value_counts', 'head', 'unique', 'head', 'head', 'head', 'replace', 'get_dummies', 'head', 'drop', 'head', 'tail', 'unique', 'value_counts', 'unique', 'value_counts', 'unique', 'unique', 'unique', 'unique', 'unique', '__contains__', 'value_counts', 'unique', '__contains__', 'value_counts'] ['numpy', 'pandas', 'warnings', 'matplotlib.pyplot'] ['log2', 'distance', 'mutual_info_classif']Dict:{'numpy': ['mean', 'median', 'unique'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique'], 'math': [], 'scipy': [], 'warnings': [], 'sklearn': [], 'matplotlib': []} axis_0: 0, axis_1: 1
riiid-answer-correctness-prediction-keras-nn.py : ['read_csv', 'sort_values', 'read_csv', 'read_csv', 'reset_index', 'astype', 'fillna', 'groupby', 'copy', 'agg', 'groupby', 'copy', 'agg', 'merge', 'merge', 'replace', 'fillna', 'astype', 'merge', 'merge', 'astype', 'fillna', 'astype', 'replace', 'fillna'] ['numpy', 'pandas', 'tensorflow', 'tensorflow.keras.backend', 'gc', 'riiideducation'] ['roc_auc_score', 'Input', 'Dense', 'KFold']Dict:{'numpy': ['copy'], 'pandas': ['merge', 'read_csv'], 'sklearn': [], 'tensorflow': [], 'gc': [], 'riiideducation': []} axis_0: 0, axis_1: 0
magic-feature-engineering-unfinished.py : ['read_csv', 'copy', 'drop', 'corr', 'corr', 'mean', 'copy', 'drop', 'corr', 'corr', 'mean', 'astype', 'astype', 'copy', 'drop', 'head', 'astype', 'astype'] ['numpy', 'pandas'] ['KFold', 'roc_auc_score', 'make_pipeline', 'GaussianNB', 'QuantileTransformer']Dict:{'numpy': ['mean', 'copy'], 'pandas': ['read_csv'], 'sklearn': []} axis_0: 0, axis_1: 3
bot-generated-baseline-kernel-id-26988.py : ['read_csv', 'copy', 'read_csv', 'value_counts', 'drop', 'drop', 'head', 'describe', 'keys', 'join', 'sum', 'isna', '_get_numeric_data', 'corr', '_get_numeric_data', 'transform', 'transform', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mode', 'fillna', 'mode', 'transform', 'transform', 'hist', 'astype', 'sum', 'max', 'product', 'to_csv', 'head'] ['xgboost', 'pandas', 'numpy', 'itertools', 'os', 'matplotlib.pyplot', 'seaborn'] ['confusion_matrix', 'roc_auc_score', 'roc_curve', 'auc', 'RandomForestClassifier', 'ExtraTreesClassifier', 'TfidfVectorizer', 'train_test_split', 'KFold', 'LogisticRegression', 'DecisionTreeClassifier', 'LabelEncoder', 'Counter', 'WordCloud', 'STOPWORDS']Dict:{'sklearn': ['transform'], 'xgboost': [], 'collections': ['keys', 'copy'], 'pandas': ['isna', 'read_csv', 'value_counts'], 'numpy': ['mean', 'product', 'max', 'sum', 'copy'], 'itertools': ['product'], 'os': [], '': [], 'wordcloud': [], 'matplotlib': ['hist'], 'seaborn': []} axis_0: 0, axis_1: 3
pawpular-eda-understanding-model-w-b.py : ['update', 'read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'apply', 'describe', 'describe', 'hist', 'hist', 'describe', 'hist', 'describe', 'hist', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'reset_index', 'sample', 'reset_index', 'copy', 'sort_values', 'sort_values', 'sum', 'apply', 'join', 'apply', 'join', 'drop', '__init__', 'mean', 'stack', 'read_csv'] ['gc', 'os', 'glob', 'sys', 'cv2', 'imageio', 'joblib', 'math', 'random', 'wandb', 'math', 'numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib.patches', 'seaborn', 'matplotlib', 'timm', 'torch', 'transformers', 'torch.nn', 'torch.nn.functional', 'pytorch_lightning', 'warnings', 'wandb'] ['kstest', 'qqplot', 'colored', 'cpu_count', 'tqdm', 'StratifiedKFold', 'pearsonr', 'DataLoader', 'Dataset', 'StratifiedKFold', 'r2_score', 'mean_squared_error', 'WandbLogger', 'ModelCheckpoint', 'HorizontalFlip', 'VerticalFlip', 'IAAPerspective', 'ShiftScaleRotate', 'CLAHE', 'RandomRotate90', 'Transpose', 'ShiftScaleRotate', 'Blur', 'OpticalDistortion', 'GridDistortion', 'HueSaturationValue', 'IAAAdditiveGaussianNoise', 'GaussNoise', 'MotionBlur', 'MedianBlur', 'IAAPiecewiseAffine', 'RandomResizedCrop', 'IAASharpen', 'IAAEmboss', 'RandomBrightnessContrast', 'Flip', 'OneOf', 'Compose', 'Normalize', 'Cutout', 'CoarseDropout', 'ShiftScaleRotate', 'CenterCrop', 'Resize', 'ToTensorV2']Dict:{'gc': [], 'os': [], 'glob': [], 'sys': [], 'cv2': [], 'imageio': [], 'joblib': [], 'math': [], 'random': ['sample'], 'wandb': [], 'numpy': ['mean', 'stack', 'sum', 'info', 'copy'], 'pandas': ['read_csv'], 'scipy': ['__init__'], 'matplotlib': [], 'statsmodels': [], 'seaborn': ['boxplot'], 'termcolor': ['__init__'], 'multiprocessing': ['__init__'], 'tqdm': ['update', '__init__'], 'sklearn': ['__init__'], 'timm': [], 'torch': ['__init__'], 'transformers': [], 'pytorch_lightning': [], 'albumentations': [], 'warnings': []} axis_0: 0, axis_1: 1
improve-a-fixed-model-using-feature-engineering.py : ['read_csv', 'head', 'drop', 'nsmallest', 'describe', 'sum', 'isna', 'sum', 'duplicated', 'info', 'quantile', 'quantile', 'dropna', 'drop', 'head', 'corr', 'corr', 'add', 'corr', 'nsmallest', 'sort_values', 'head', 'reset_index', 'unique', 'copy', 'rename', 'rename', 'rename', 'rename', 'concat', 'concat', 'drop', 'concat', 'head', 'drop', 'nsmallest', 'reset_index', 'rename_axis', 'head', 'rename_axis', 'head', 'sum', 'isna', 'merge', 'sum', 'isna', 'nsmallest', 'reset_index', 'rename_axis', 'head', 'head', 'merge', 'corr', 'corr', 'drop', 'head', 'sort_values', 'abs', 'drop', 'head', 'sort_values', 'head', 'drop', 'nsmallest'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'sklearn'] ['Fore', 'Style', 'init', 'RandomForestRegressor', 'cross_val_score', 'MinMaxScaler', 'PCA']Dict:{'numpy': ['quantile', 'add', 'abs', 'sum', 'unique', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'unique', 'merge'], 'matplotlib': [], 'seaborn': [], 'colorama': [], 'sklearn': []} axis_0: 0, axis_1: 7
lung-volume-calculus-with-trapezoidal-rule.py : ['sum', 'map', 'array', 'array', 'read_csv', 'keys', 'corr', 'to_pickle'] ['os', 'numpy', 'pandas', 'pydicom', 'matplotlib.pyplot'] ['label', 'regionprops', 'clear_border', 'tqdm', 'Pool']Dict:{'os': [], 'numpy': ['array', 'sum'], 'pandas': ['to_pickle', 'array', 'read_csv'], 'pydicom': [], 'skimage': [], 'tqdm': [], 'multiprocessing': [], 'matplotlib': []} axis_0: 0, axis_1: 0
tps-jan22-catboost-using-pycaret.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'select_dtypes', 'apply', 'to_dict', 'stack', 'map', 'astype', 'isin', 'astype', 'isin', 'astype', 'isin', 'astype', 'drop', 'apply', 'clip', 'map', 'map', 'clip', 'map', 'clip', 'get_dummies', 'get_dummies', 'where', 'where', 'drop', 'abs', 'abs', 'abs', 'mean', 'where', 'where', 'astype', 'transpose', 'array', 'read_csv', 'to_csv'] [] []Dict:{} axis_0: 0, axis_1: 2
97-on-mnist-with-a-single-decision-tree-t-sne.py : ['read_csv', 'read_csv', 'concat', 'read_csv', 'head', 'sort_index', 'value_counts', 'to_csv', 'head', 'sort_index', 'value_counts'] ['os', 'numpy', 'pandas', 'random', 'pydotplus', 'matplotlib', 'matplotlib.pyplot', 'seaborn'] ['Image', 'TSNE', 'accuracy_score', 'StringIO', 'TruncatedSVD', 'train_test_split', 'DecisionTreeClassifier', 'export_graphviz']Dict:{'os': [], 'numpy': [], 'pandas': ['concat', 'read_csv', 'value_counts'], 'random': [], 'pydotplus': [], 'matplotlib': [], 'seaborn': [], 'IPython': [], 'sklearn': []} axis_0: 0, axis_1: 0
2nd-place-solution.py : ['sort_values', 'read_csv', 'read_csv', 'read_csv', 'astype', 'rank', 'groupby', 'reset_index', 'reset_index', 'value_counts', 'astype', 'fillna', 'map', 'astype', 'fillna', 'map', 'quantile', 'quantile', 'quantile', 'quantile', 'diff', 'groupby', 'diff', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'merge', 'astype', 'rank', 'groupby', 'merge', 'min', 'max', 'mean', 'drop', 'copy', 'copy', 'merge', 'reset_index', 'drop_duplicates', 'merge', 'concat', 'concat', 'max', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'isin', 'isin', 'sort_values', 'sort_values', 'copy', 'copy', 'copy', 'copy', 'concat', 'concat', 'merge', 'merge', 'max', 'to_csv'] ['random', 'os', 'gc', 'numpy', 'pandas', 'lightgbm', 'matplotlib.pyplot', 'seaborn'] ['KFold', 'GroupKFold', 'mean_squared_error', 'LinearRegression', 'PolynomialFeatures', 'early_stopping', 'log_evaluation']Dict:{'random,': [], 'os,': [], 'gc': [], 'numpy': ['mean', 'quantile', 'max', 'min', 'isin', 'diff', 'copy'], 'pandas': ['concat', 'merge', 'read_csv', 'value_counts'], 'sklearn': [], 'lightgbm': [], 'matplotlib': [], 'seaborn': []} axis_0: 1, axis_1: 5
correct-time-aware-cross-validation-scheme.py : ['to_csv', 'read_csv', 'read_csv', 'sort_values', 'head', 'to_csv', 'astype', 'fillna', 'to_csv', 'astype', 'fillna', 'astype', 'mean', 'apply', 'astype', 'astype', 'astype', 'astype', 'mean'] ['numpy', 'pandas'] ['hstack', 'CountVectorizer', 'TimeSeriesSplit', 'cross_val_score', 'GridSearchCV', 'roc_auc_score', 'LogisticRegression']Dict:{'numpy': ['mean'], 'pandas': ['read_csv'], 'scipy': [], 'sklearn': []} axis_0: 0, axis_1: 0
null-data-auto-feature-engineering.py : ['read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'astype', 'isnull', 'isnull', 'median', 'isnull', 'sum', 'isnull', 'head'] ['numpy', 'pandas'] []Dict:{'numpy': ['median', 'sum'], 'pandas': ['read_csv', 'isnull']} axis_0: 0, axis_1: 0
training-3rd-place-solution.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'sort_values', 'read_csv', 'fillna', 'where', 'where', 'array', 'array', 'array', 'array', 'mean', 'mean', 'array', 'array', 'array', 'array', 'drop', 'drop', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sort_values', 'median', 'boxplot', 'unique', 'max', 'min', 'isin', 'isin', 'array', 'array', 'array', 'sum', 'mean', 'array', 'array', 'array'] ['os', 'random', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'gresearch_crypto', 'time', 'datetime', 'pickle', 'gc'] ['tqdm']Dict:{'os': [], 'random': [], 'pandas': ['array', 'unique', 'read_csv'], 'numpy': ['mean', 'median', 'max', 'sum', 'where', 'min', 'unique', 'isin', 'array'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'lightgbm': [], 'gresearch_crypto': [], 'time': [], 'datetime': [], 'pickle': [], 'gc': [], 'tqdm': []} axis_0: 1, axis_1: 4
1-36-simple-lightgbm.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'rename', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sum', 'groupby', 'read_csv', 'reset_index', 'count', 'groupby', 'rename', 'read_csv', 'reset_index', 'sum', 'groupby', 'rename', 'read_csv', 'reset_index', 'sum', 'groupby', 'rename', 'read_csv', 'read_csv', 'copy', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'fillna', 'merge', 'merge', 'merge', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'map', 'map', 'map', 'map', 'map', 'map', 'info', 'sum', 'isnull', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'map', 'reset_index', 'sum', 'groupby', 'copy', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'fillna', 'merge', 'merge', 'merge', 'map', 'map', 'map', 'map', 'map', 'map', 'clip', 'clip', 'clip', 'clip', 'fillna'] ['numpy', 'pandas', 'lightgbm', 'mlb', 'gc', 'optuna.integration.lightgbm'] ['Path', 'mean_absolute_error', 'timedelta', 'reduce', 'tqdm']Dict:{'numpy': ['max', 'sum', 'min', 'unique', 'clip', 'info', 'copy'], 'pandas': ['merge', 'unique', 'read_csv', 'isnull'], 'pathlib': ['rename'], 'sklearn': [], 'datetime': ['min', 'max'], 'functools': [], 'tqdm': [], 'lightgbm': [], 'mlb': [], 'gc': [], 'optuna': []} axis_0: 0, axis_1: 0
feature-engineering-validation-strategy.py : ['mode', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'fillna', 'boxplot', 'boxplot', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'reset_index', 'aggregate', 'groupby', 'merge', 'astype', 'astype', 'astype', 'astype', 'drop', 'drop', 'where', 'where'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost'] ['model_selection', 'preprocessing']Dict:{'numpy': ['where', 'sum'], 'pandas': ['merge', 'read_csv', 'isnull'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 4
ensemble-submission-with-on-line-fe.py : ['mean', 'mean', 'mean', 'mean', 'sum', 'where'] ['numpy', 'pandas', 'gresearch_crypto', 'os', 'gc', 'pickle', 'time', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'collections'] ['tqdm', 'datetime', 'deque']Dict:{'numpy': ['mean', 'where', 'sum'], 'pandas': [], 'gresearch_crypto': [], 'tqdm': [], 'os': [], 'gc': [], 'pickle': [], 'time': [], 'datetime': [], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'collections': []} axis_0: 1, axis_1: 0
ps-s3e10-2023-eda-and-submission.py : ['read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'any', 'any', 'isna', 'any', 'any', 'isna', 'any', 'any', 'isna', 'describe', 'head', 'to_dict', 'round', 'value_counts', 'to_dict', 'round', 'value_counts', 'rename', 'nunique', 'rename', 'nunique', 'join', 'add_suffix', 'describe', 'add_suffix', 'describe', 'concat', 'value_counts', 'corr', 'set_index', 'astype', 'astype', 'ge', 'array', 'set_index', 'astype', 'apply', 'apply', 'mean', 'mean', 'sort_values', 'sort_values', 'astype', 'query', 'query', 'read_csv', 'to_csv', 'head', 'read_csv', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'math', 'warnings', 'xgboost'] ['tqdm', 'Styler', 'Style', 'Fore', 'EarlyStopping', 'model_selection', 'roc_auc_score', 'confusion_matrix', 'ConfusionMatrixDisplay', 'RocCurveDisplay', 'log_loss', 'calibration_curve', 'IsotonicRegression', 'LogisticRegression']Dict:{'pandas': [], 'numpy': ['mean', 'round', 'array', 'any'], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'math': [], 'warnings': [], 'colorama': [], 'xgboost': [], 'sklearn': []} axis_0: 0, axis_1: 3
who-gets-adopted.py : ['read_csv', 'copy', 'head', 'info', 'sum', 'isnull', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'boxplot', 'agg', 'groupby', 'boxplot', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'update', 'update', 'update', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'update', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'update', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'update', 'join', 'fillna', 'join', 'fillna'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'plotly.plotly', 'plotly.graph_objs', 'plotly'] ['norm', 'tools', 'WordCloud']Dict:{'pandas': ['value_counts', 'read_csv', 'isnull'], 'numpy': ['info', 'sum', 'copy'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': [], 'plotly': [], 'wordcloud': []} axis_0: 0, axis_1: 0
pytorch-transformer-public-14th-private-22nd.py : ['copy', 'copy', 'copy', 'copy', 'take', 'take', 'take', 'take', 'copy', 'take', 'copy', 'take', '__init__', '__init__', '__init__', 'transpose', 'transpose', 'transpose', 'transpose', 'transpose', 'sum', '__init__', 'squeeze', 'cumsum', 'clip', 'fillna', 'fillna', 'mod', 'mod', 'to_datetime', 'mod', 'copy', 'drop_duplicates', 'copy', 'copy', 'drop', 'merge', 'astype', 'astype', 'fillna', 'merge', 'mod', 'mod', 'drop', 'replace', 'fillna', 'drop', 'drop', 'transform', 'reset_index', 'drop', 'set_index', 'copy', 'replace', 'fillna', 'transform', 'set_index', 'eval', 'eval', 'add', 'eval', 'add', 'eval', 'sum', 'drop_duplicates', 'sort_values', 'groupby', 'unique', 'isin', 'unique', 'astype', 'astype', 'astype', 'copy', 'copy', 'read_csv', 'array', 'array', 'astype', 'astype', 'astype', 'astype', 'apply', 'isin', 'array', 'copy', 'copy', 'copy', 'copy', 'mean', 'cumsum', 'concat', 'eval', 'mean', 'squeeze'] ['copy', 'csv', 'time', 'numpy', 'pandas', 'torch', 'torch.nn', 'torch.nn.functional'] ['Optional', 'Tuple', 'List', 'Dict', 'Type', 'GroupKFold', 'StandardScaler', 'Module', 'Dropout', 'Linear', 'LayerNorm', 'Parameter', 'xavier_uniform_', 'constant_', 'xavier_normal_', 'ModuleList', 'gaussian_filter1d', 'nflrush']Dict:{'copy': ['copy'], 'csv': [], 'time': [], 'typing': ['__init__'], 'numpy': ['transpose', 'mean', 'take', 'squeeze', 'add', 'sum', 'mod', 'unique', 'clip', 'isin', 'array', 'cumsum', 'copy'], 'pandas': ['read_csv', 'eval', 'concat', 'unique', 'array', 'merge', 'to_datetime'], 'torch': ['eval', 'apply', '__init__'], 'sklearn': ['transform', '__init__'], 'kaggle': []} axis_0: 7, axis_1: 5
openvaccine-lstm-fastai.py : ['read_json', 'read_json', 'read_csv', 'nunique', 'sum', 'max', 'sum', 'sample', 'unique', 'unique', 'unique', 'apply', 'apply', 'reset_index', 'reset_index', 'astype', 'array', 'reset_index', 'explode', 'apply', 'astype', 'array', 'reset_index', 'explode', 'apply', 'drop', 'drop', 'array', 'concat', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot'] ['*', 'tqdm', 'nn', 'KFold']Dict:{'fastai': [], 'pandas': ['read_csv', 'read_json', 'concat', 'unique', 'array'], 'numpy': ['unique', 'sum', 'max', 'array'], 'tqdm': [], 'torch': [], 'sklearn': [], 'matplotlib': []} axis_0: 2, axis_1: 6
house-price-prediction-using-xgboost.py : ['read_csv', 'read_csv', 'concat', 'read_csv', 'unique', 'replace', 'where', 'rename', 'items', 'astype', 'items', 'astype', 'select_dtypes', 'fillna', 'select_dtypes', 'fillna', 'info', 'info', 'select_dtypes', 'mean', 'copy', 'pop', 'copy', 'select_dtypes', 'factorize', 'sort_values', 'sort_values', 'copy', 'pop', 'copy', 'pop', 'copy', 'select_dtypes', 'get_dummies', 'mul', 'sum', 'gt', 'transform', 'groupby', 'copy', 'mean', 'std', 'copy', 'mean', 'std', 'mean', 'std', 'cumsum', 'corr', 'transform', 'concat', 'transform', 'add', 'copy', 'pop', 'copy', 'pop', 'concat', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'drop', 'join', 'join', 'transform', 'to_csv'] ['os', 'warnings', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn'] ['Path', 'display', 'CategoricalDtype', 'MEstimateEncoder', 'KMeans', 'PCA', 'mutual_info_regression', 'KFold', 'cross_val_score', 'XGBRegressor', 'reduce']Dict:{'os': ['rename', 'replace'], 'warnings': [], 'pathlib': ['rename', 'replace'], 'matplotlib': [], 'numpy': ['mean', 'add', 'sum', 'where', 'unique', 'info', 'std', 'cumsum', 'copy'], 'pandas': [], 'seaborn': [], 'IPython': [], 'category_encoders': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 0
titanic-machine-learning-from-disaster.py : ['read_csv', 'read_csv', 'head', 'head', 'info', 'describe', 'rename', 'nunique', 'select_dtypes', 'nunique', 'select_dtypes', 'sum', 'duplicated', 'sum', 'duplicated', 'sum', 'duplicated', 'sum', 'duplicated', 'rename', 'sum', 'isnull', 'sum', 'isnull', 'rename', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'drop', 'replace', 'replace', 'replace', 'value_counts', 'value_counts', 'value_counts', 'reset_index', 'groupby', 'reset_index', 'groupby', 'value_counts', 'sample', 'value_counts', 'agg', 'cut', 'cut', 'value_counts', 'value_counts', 'value_counts', 'agg', 'value_counts', 'crosstab', 'dropna', 'dropna', 'copy', 'drop', 'copy', 'drop', 'head', 'rename', 'sum', 'isnull', 'sum', 'isnull', 'median', 'median', 'isnull', 'isnull', 'fillna', 'median', 'fillna', 'median', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'duplicated', 'sum', 'duplicated', 'drop', 'drop', 'skew', 'select_dtypes', 'get_dummies', 'get_dummies', 'replace', 'drop', 'rename', 'drop', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['stats', 'SVC', 'GaussianNB', 'KNeighborsClassifier', 'LogisticRegression', 'DecisionTreeClassifier', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'StackingClassifier', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'SimpleImputer', 'train_test_split', 'GridSearchCV', 'LabelEncoder', 'OneHotEncoder', 'StandardScaler', 'RobustScaler', 'accuracy_score', 'recall_score', 'precision_score', 'f1_score', 'confusion_matrix', 'SMOTE', 'chi2_contingency', 'f_oneway']Dict:{'numpy': ['median', 'info', 'sum', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'value_counts', 'get_dummies', 'crosstab'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'scipy': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'imblearn': []} axis_0: 0, axis_1: 0
integratedgradients-tensorflow-w-b.py : ['read_csv', 'read_csv', 'read_csv', 'value_counts', 'value_counts', 'select_dtypes', 'drop', 'drop', 'copy', 'copy', 'get_dummies', 'drop', 'get_dummies', 'drop', 'drop', 'concat', 'drop', 'concat', 'concat', 'transform', 'transform', 'astype', 'astype', 'astype', 'to_csv', 'add', 'add', 'add', 'add', 'add', 'add', 'astype', 'to_csv', 'head'] ['tensorflow', 'tensorflow', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'wandb'] ['confusion_matrix', 'PathExplainerTF', 'set_up_environment', 'PathExplainerTF', 'scatter_plot', 'summary_plot', 'train_test_split', 'StandardScaler', 'Input', 'Dense', 'Dropout', 'relu', 'sigmoid', 'Adam', 'UserSecretsClient', 'datetime', 'WandbCallback', 'display']Dict:{'tensorflow': [], 'numpy': ['add', 'copy'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'sklearn': ['transform'], 'path_explain': [], 'keras': [], 'wandb': [], 'kaggle_secrets': [], 'datetime': [], 'IPython': []} axis_0: 1, axis_1: 2
playgrounds3e22-eda-baseline.py : ['read_csv', 'test', 'read_csv', 'read_csv', 'read_csv', 'test', 'head', 'head', 'test', 'head', 'test', 'reindex', 'test', 'test', 'items', 'test', 'drop', 'drop', 'transpose', 'describe', 'info', 'concat', 'nunique', 'nunique', 'test', 'nunique', 'sum', 'isna', 'sum', 'isna', 'test', 'sum', 'isna', 'concat', 'drop_duplicates'] [] []Dict:{} axis_0: 12, axis_1: 12
preprocessing-deep-learning-input-from-rna-string.py : ['read_json', 'read_json', 'head', 'head', 'head', 'read_csv', 'head', 'array', 'array', 'array', 'head', 'to_csv', 'read_csv', 'head', 'unique', 'head', 'transpose', 'array', 'astype', 'array', 'read_csv', 'query', 'array', 'mean', 'array', 'mean', 'array', 'mean', 'astype', 'astype', 'astype', 'mean', 'max', 'sum', 'sum', 'abs', 'where', 'squeeze', 'to_csv', 'head', 'tail', 'to_csv'] ['os', 'glob', 'sys', 'numpy', 'pandas', 'subprocess', 'arnie.utils'] ['tqdm', 'Pool', 'MEA', 'bpps', 'display', 'draw_struct']Dict:{'os': [], 'glob': [], 'sys': [], 'numpy': ['transpose', 'mean', 'squeeze', 'max', 'abs', 'sum', 'where', 'unique', 'array'], 'pandas': ['array', 'unique', 'read_json', 'read_csv'], 'tqdm': [], 'subprocess': [], 'multiprocessing': [], 'arnie': [], 'IPython': [], 'draw': []} axis_0: 7, axis_1: 0
beginner-s-guide-to-audio-data.py : ['read_csv', 'read_csv', 'head', 'unique', 'unique', 'count', 'groupby', 'reindex', 'unstack', 'sort_values', 'sum', 'unstack', 'value_counts', 'value_counts', 'apply', 'apply', 'hist', 'hist', 'pad', 'max', 'min', 'unique', 'set_index', 'set_index', 'apply', 'array', 'join', 'read_csv', 'to_csv', 'pad', 'array', 'join', 'read_csv', 'to_csv', 'array', 'join', 'read_csv', 'to_csv'] ['numpy', 'os', 'shutil', 'IPython', 'matplotlib', 'matplotlib.pyplot', 'pandas', 'seaborn', 'IPython.display', 'wave', 'librosa', 'numpy', 'scipy', 'librosa'] ['tqdm_notebook', 'StratifiedKFold', 'wavfile', 'losses', 'models', 'optimizers', 'relu', 'softmax', 'EarlyStopping', 'LearningRateScheduler', 'ModelCheckpoint', 'TensorBoard', 'ReduceLROnPlateau', 'Convolution1D', 'Dense', 'Dropout', 'GlobalAveragePooling1D', 'GlobalMaxPool1D', 'Input', 'MaxPool1D', 'concatenate', 'Sequence', 'to_categorical', 'Convolution2D', 'GlobalAveragePooling2D', 'BatchNormalization', 'Flatten', 'GlobalMaxPool2D', 'MaxPool2D', 'concatenate', 'Activation', 'Sequence', 'to_categorical', 'backend']Dict:{'numpy': ['max', 'sum', 'min', 'unique', 'pad', 'array'], 'os': [], 'shutil': [], 'IPython': [], 'matplotlib': ['hist'], 'pandas': ['array', 'unique', 'read_csv', 'value_counts'], 'seaborn': [], 'tqdm': [], 'sklearn': [], 'wave': [], 'scipy': [], 'librosa': [], 'keras': []} axis_0: 2, axis_1: 6
play-s3e5-eda-models.py : ['read_csv', 'read_csv', 'value_counts', 'count', 'count', 'count', 'count', 'count', 'count', 'sum', 'isnull', 'to_dict', 'count', 'groupby', 'items', 'keys', 'keys', 'sum', 'isnull', 'to_dict', 'count', 'groupby', 'items', 'keys', 'keys', 'drop', 'drop', 'copy', 'reset_index', 'concat', 'describe', 'describe', 'corr', 'read_csv', 'copy', 'reset_index', 'concat', 'read_csv', 'copy', 'reset_index', 'concat', 'drop_duplicates', 'reset_index', 'rename', 'copy', 'set_index', 'set_index', 'set_index', 'set_index', 'set_index', 'set_index', 'set_index', 'set_index', 'set_index', 'set_index', 'astype', 'astype', 'copy', 'copy', 'astype', 'astype', 'astype', 'astype', 'astype'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'warnings', 'warnings', 'umap', 'numpy', 'scipy'] ['KFold', 'StratifiedKFold', 'roc_auc_score', 'LGBMClassifier', 'early_stopping', 'log_evaluation', 'confusion_matrix', 'CalibrationDisplay', 'roc_curve', 'SymLogNorm', 'OLS', 'add_constant', 'LabelEncoder', 'LeaveOneOutEncoder', 'KFold', 'StratifiedKFold', 'cohen_kappa_score', 'LGBMClassifier', 'early_stopping', 'log_evaluation', 'LabelEncoder', 'confusion_matrix', 'LGBMRegressor', 'partial']Dict:{'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'numpy': ['sum', 'copy'], 'matplotlib': [], 'seaborn': [], 'gc': [], 'warnings': [], 'sklearn': [], 'lightgbm': [], 'statsmodels': [], 'umap': [], 'category_encoders': [], 'functools': [], 'scipy': []} axis_0: 0, axis_1: 4
titanic-eda-machine-deep-learning.py : ['read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'sum', 'isnull', 'sum', 'isnull', 'value_counts', 'value_counts', 'head', 'value_counts', 'value_counts', 'map', 'head', 'map', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'map', 'max', 'map', 'max', 'map', 'max', 'get', 'get', 'value_counts', 'value_counts', 'value_counts', 'fillna', 'head', 'map', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'map', 'max', 'map', 'map', 'get', 'head', 'get', 'head', 'value_counts', 'value_counts', 'value_counts', 'map', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'map', 'max', 'map', 'head', 'head', 'drop', 'drop', 'drop', 'drop', 'fillna', 'value_counts', 'isnull', 'fillna', 'value_counts', 'isnull', 'value_counts', 'isnull', 'value_counts', 'isnull', 'head', 'head', 'copy', 'drop', 'transform', 'transform', 'mean', 'insert', 'insert', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'drop', 'fillna', 'value_counts', 'isnull', 'fillna', 'value_counts', 'isnull', 'head', 'transform', 'transform', 'copy', 'drop', 'mean', 'array', 'array', 'array', 'to_csv', 'read_csv', 'head'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'missingno', 'plotly.express', 'tensorflow', 'tensorflow'] ['StandardScaler', 'MinMaxScaler', 'MaxAbsScaler', 'RobustScaler', 'Normalizer', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'GaussianNB', 'SVC', 'KFold', 'cross_val_score', 'GradientBoostingClassifier']Dict:{'pandas': ['array', 'value_counts', 'read_csv', 'isnull'], 'numpy': ['mean', 'max', 'sum', 'info', 'array', 'insert', 'copy'], 'seaborn': [], 'matplotlib': ['get'], 'missingno': [], 'plotly': [], 'sklearn': [], 'tensorflow': []} axis_0: 0, axis_1: 3
no-magic-hacks-just-fast-feature-engineering.py : ['read_csv', 'read_csv', 'to_dict', 'mean', 'groupby', 'cumsum', 'var', 'copy', 'diff', 'diff', 'transpose', 'astype', 'copy', 'abs', 'abs', 'diff', 'min', 'diff', 'min', 'diff', 'min', 'cumsum', 'max', 'std', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'sum', 'sum', 'sum', 'max', 'std', 'skew', 'mean', 'cumsum', 'cumsum', 'sum', 'astype', 'transpose', 'astype', 'astype', 'astype', 'astype', 'transform', 'hist', 'hist', 'hist', 'hist', 'hist'] ['random', 'os', 'pickle', 'scipy', 'math', 'time', 'joblib', 'numpy', 'pandas'] ['signal', 'interpolate', 'pyplot', 'tqdm', 'RobustScaler']Dict:{'random,': [], 'os,': [], 'pickle,': [], 'scipy,': [], 'math,': [], 'time,': [], 'joblib': [], 'numpy': ['mean', 'transpose', 'max', 'abs', 'var', 'sum', 'min', 'diff', 'std', 'cumsum', 'copy'], 'pandas': ['read_csv'], 'scipy': [], 'matplotlib': [], 'tqdm': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 2
eda-fe-xgboost-a-complete-guide-on-titanic.py : ['read_csv', 'read_csv', 'head', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'unique', 'count', 'groupby', 'query', 'unique', 'count', 'groupby', 'query', 'unique', 'count', 'groupby', 'query', 'unique', 'count', 'groupby', 'query', 'unique', 'count', 'groupby', 'query', 'unique', 'count', 'groupby', 'query', 'unique', 'count', 'groupby', 'query', 'unique', 'count', 'groupby', 'query', 'unique', 'count', 'groupby', 'query', 'describe', 'sum', 'isnull', 'sum', 'isnull', 'median', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'median', 'fillna', 'median', 'sum', 'isnull', 'sum', 'isnull', 'apply', 'apply', 'drop', 'drop', 'fillna', 'fillna', 'sum', 'isnull', 'get_dummies', 'get_dummies', 'astype', 'read_csv', 'array', 'to_csv'] ['warnings', 'numpy', 'pandas', 'lightgbm', 'xgboost', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'plotly.graph_objs', 'plotly.offline', 'pandas_profiling', 'sweetviz'] ['LinearRegression', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'preprocessing', 'LabelEncoder', 'StandardScaler', 'confusion_matrix', 'classification_report', 'make_subplots', 'parallel_coordinates', 'autocorrelation_plot', 'plot_acf', 'plot_pacf', 'seasonal_decompose', 'IFrame']Dict:{'warnings': [], 'numpy': ['median', 'array', 'sum', 'unique'], 'pandas': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'pandas_profiling': [], 'statsmodels': [], 'sweetviz': [], 'IPython': []} axis_0: 0, axis_1: 2
lightgbm-predictions-explained-with-shap-0-796.py : ['mean', 'get_dummies', 'read_csv', 'read_csv', 'reset_index', 'replace', 'median', 'groupby', 'kurtosis', 'sum', 'map', 'median', 'mean', 'prod', 'max', 'min', 'std', 'apply', 'factorize', 'drop', 'read_csv', 'read_csv', 'agg', 'groupby', 'join', 'drop', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'read_csv', 'replace', 'replace', 'replace', 'replace', 'replace', 'agg', 'groupby', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'read_csv', 'agg', 'groupby', 'groupby', 'read_csv', 'apply', 'apply', 'agg', 'groupby', 'groupby', 'read_csv', 'drop', 'agg', 'groupby', 'groupby', 'mean', 'concat', 'mean', 'to_csv', 'read_csv', 'to_csv', 'reset_index', 'head', 'sort_values', 'agg', 'groupby', 'reset_index', 'head', 'sort_values', 'agg', 'groupby', 'sum', 'reset_index', 'sort_values', 'agg', 'groupby'] ['numpy', 'pandas', 'shap', 'gc', 'time', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['contextmanager', 'LGBMClassifier', 'roc_auc_score', 'roc_curve', 'KFold', 'StratifiedKFold']Dict:{'numpy': ['mean', 'median', 'std', 'max', 'sum', 'min', 'prod'], 'pandas': ['concat', 'get_dummies', 'factorize', 'read_csv'], 'shap': [], 'gc': [], 'time': [], 'contextlib': [], 'lightgbm': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'warnings': []} axis_0: 2, axis_1: 12
titanic-solution-rf-base-model-1.py : ['join', 'read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'apply', 'replace', 'replace', 'replace', 'replace', 'astype', 'head', 'drop', 'astype', 'drop', 'to_csv'] ['numpy', 'pandas', 'os', 're'] ['make_pipeline', 'make_column_transformer', 'SimpleImputer', 'KBinsDiscretizer', 'OneHotEncoder', 'LogisticRegression', 'cross_val_score', 'train_test_split', 'RandomForestClassifier']Dict:{'numpy': ['sum'], 'pandas': ['read_csv', 'isnull'], 'os': ['replace'], 'sklearn': ['apply'], 're': []} axis_0: 0, axis_1: 0
tps-september-2021-eda.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'sum', 'isna', 'describe', 'head', 'sum', 'isna', 'head', 'sum', 'isna', 'reset_index', 'drop', 'copy', 'sum', 'isna', 'reset_index', 'drop', 'copy', 'sum', 'isna', 'reset_index', 'value_counts', 'sum', 'isna', 'reset_index', 'value_counts', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'update', 'sum', 'isna', 'sum', 'isna', 'reset_index', 'agg', 'groupby', 'update', 'read_csv', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'read_csv', 'drop', 'drop', 'read_csv', 'drop', 'drop', 'min', 'min', 'read_csv', 'drop', 'drop', 'max', 'max', 'read_csv', 'drop', 'drop', 'sum', 'sum', 'read_csv', 'drop', 'drop', 'read_csv', 'drop', 'drop', 'sum', 'sum', 'drop', 'drop', 'read_csv', 'drop', 'drop'] ['os', 'joblib', 'numpy', 'pandas', 'warnings', 'matplotlib', 'matplotlib.pyplot', 'seaborn'] ['ticker', 'roc_auc_score', 'StratifiedKFold', 'LinearRegression', 'boxcox', 'XGBClassifier', 'CatBoostClassifier', 'LGBMClassifier']Dict:{'os': [], 'joblib': [], 'numpy': ['copy', 'sum', 'max', 'min'], 'pandas': ['isna', 'read_csv', 'value_counts'], 'warnings': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'scipy': [], 'xgboost': [], 'catboost': [], 'lightgbm': []} axis_0: 0, axis_1: 34
pytorch-basic-starter-code-fog-with-lstm.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'fillna', 'concat', 'head', 'fillna', 'concat', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'apply', 'fillna', 'head', 'head', 'mean', 'rolling', 'head', 'mean', 'rolling', 'head', 'mean', 'rolling', 'head', 'mean', 'rolling', 'head', 'mean', 'rolling', 'head', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', '__init__', 'clip', 'array', 'array', 'to_csv', 'head'] ['numpy', 'pandas', 'xgboost', 'glob', 'lightgbm', 'torch'] ['*', 'RobustScaler', 'normalize', 'Dataset', 'DataLoader', 'nn']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'clip', 'array'], 'pandas': ['concat', 'array', 'read_csv'], 'sklearn': ['__init__'], 'xgboost': [], 'glob': [], 'lightgbm': [], 'torch': []} axis_0: 0, axis_1: 0
lanl-earthquake-eda-and-prediction.py : ['join', 'head', 'array', 'abs', 'cumsum', 'copy', 'mean', 'std', 'max', 'min', 'sum', 'sum', 'abs', 'mean', 'std', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'min', 'abs', 'std', 'std', 'std', 'std', 'mean', 'mean', 'mean', 'mean', 'min', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'max', 'abs', 'min', 'max', 'abs', 'min', 'abs', 'sum', 'mean', 'diff', 'mean', 'diff', 'mean', 'diff', 'mean', 'diff', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'abs', 'quantile', 'abs', 'quantile', 'abs', 'quantile', 'abs', 'mean', 'abs', 'std', 'abs', 'kurtosis', 'skew', 'median', 'mean', 'abs', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'mean', 'mean', 'rolling', 'ewm', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'mean', 'mean', 'std', 'rolling', 'subtract', 'quantile', 'quantile', 'dropna', 'std', 'rolling', 'dropna', 'mean', 'rolling', 'mean', 'std', 'max', 'min', 'quantile', 'quantile', 'quantile', 'quantile', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'mean', 'std', 'max', 'min', 'quantile', 'quantile', 'quantile', 'quantile', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'head', 'transform', 'head', 'read_csv', 'read_csv', 'transform', 'tail', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv'] ['gc', 'os', 'time', 'logging', 'datetime', 'warnings', 'numpy', 'pandas', 'seaborn', 'xgboost', 'lightgbm', 'matplotlib.pyplot'] ['stats', 'hann', 'tqdm_notebook', 'hilbert', 'convolve', 'NuSVR', 'SVR', 'CatBoostRegressor', 'KernelRidge', 'mean_squared_error', 'LabelEncoder', 'mean_absolute_error', 'StandardScaler', 'LinearRegression', 'KFold', 'StratifiedKFold', 'RepeatedKFold']Dict:{'gc': [], 'os': [], 'time': [], 'logging': [], 'datetime': [], 'warnings': [], 'numpy': ['mean', 'median', 'quantile', 'max', 'abs', 'sum', 'subtract', 'array', 'min', 'isin', 'diff', 'std', 'cumsum', 'copy'], 'pandas': ['concat', 'array', 'read_csv'], 'seaborn': [], 'xgboost': [], 'lightgbm': [], 'scipy': [], 'tqdm': [], 'matplotlib': [], 'sklearn': [], 'catboost': []} axis_0: 1, axis_1: 0
lightautoml-stacks-your-subs.py : ['read_csv', 'head', 'read_csv', 'head', 'clip', 'read_csv', 'reset_index', 'head', 'head', 'drop', 'mean', 'std', 'drop', 'mean', 'std', 'head', 'to_csv'] ['warnings', 'os', 'time', 'requests', 'numpy', 'pandas', 'torch'] ['display', 'HTML', 'Javascript', 'log_loss', 'TabularAutoML', 'TabularUtilizedAutoML', 'Task', 'ReportDeco']Dict:{'warnings': [], 'IPython': [], 'os': [], 'time': [], 'requests': ['head'], 'numpy': ['mean', 'std', 'clip'], 'pandas': ['read_csv'], 'sklearn': [], 'torch': ['mean', 'std', 'clip'], 'lightautoml': []} axis_0: 0, axis_1: 0
simple-eda-and-multi-class-classification.py : ['read_csv', 'read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'select_dtypes', 'corr', 'mean'] ['pandas', 'numpy', 'matplotlib.pyplot', 'plotly.express', 'seaborn', 'gc', 're', 'math', 'warnings', 'time', 'lightgbm'] ['HTML', 'Counter', 'tqdm', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'roc_auc_score', 'accuracy_score', 'confusion_matrix', 'ConfusionMatrixDisplay', 'RocCurveDisplay', 'LGBMRegressor', 'XGBRegressor', 'CatBoostRegressor', 'Style', 'Fore', 'init_notebook_mode', 'iplot', 'LabelEncoder', 'TSNEVisualizer', 'f1_score']Dict:{'IPython': [], 'pandas': ['read_csv', 'isnull'], 'numpy': ['transpose', 'sum', 'mean'], 'matplotlib': [], 'plotly': [], 'seaborn': [], 'gc': [], 're': [], 'collections': [], 'tqdm': [], 'math': [], 'sklearn': [], 'warnings': [], 'time': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'colorama': [], 'yellowbrick': []} axis_0: 0, axis_1: 1
kerastuner-baseline.py : ['abs', 'abs', 'abs', 'isna', 'pop', 'keys', 'map', 'copy', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'unique', 'replace', 'head', 'merge', 'corr', 'sort_values', 'astype', 'stack', 'apply', 'groupby', 'sort_values', 'head', 'tail', 'unique', 'apply', 'to_csv', 'head'] ['numpy', 'pandas', 'tensorflow', 'keras_tuner', 'math', 'matplotlib.pyplot', 'seaborn'] ['LearningRateScheduler']Dict:{'numpy': ['stack', 'unique', 'abs', 'copy'], 'pandas': ['isna', 'merge', 'unique', 'read_csv'], 'tensorflow': [], 'keras_tuner': [], 'math': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 0
beginner-s-guide-to-audio-data-2.py : ['read_csv', 'read_csv', 'sample', 'sample', 'isin', 'count', 'groupby', 'sort_values', 'value_counts', 'value_counts', 'apply', 'apply', 'head', 'sort_values', 'isin', 'hist', 'hist', 'query', 'pad', 'max', 'min', 'head', 'unique', 'set_index', 'set_index', 'apply', 'head', 'array', 'join', 'to_csv', 'array', 'join', 'read_csv', 'to_csv', 'pad', 'astype', 'mean', 'std', 'array', 'join', 'to_csv', 'array', 'join', 'read_csv', 'to_csv'] ['numpy', 'os', 'shutil', 'warnings', 'IPython', 'matplotlib', 'matplotlib.pyplot', 'pandas', 'seaborn', 'IPython.display', 'wave', 'librosa', 'numpy', 'scipy', 'librosa'] ['tqdm_notebook', 'StratifiedKFold', 'wavfile', 'losses', 'models', 'optimizers', 'relu', 'softmax', 'EarlyStopping', 'LearningRateScheduler', 'ModelCheckpoint', 'TensorBoard', 'ReduceLROnPlateau', 'Convolution1D', 'Dense', 'Dropout', 'GlobalAveragePooling1D', 'GlobalMaxPool1D', 'Input', 'MaxPool1D', 'concatenate', 'Sequence', 'to_categorical', 'Convolution2D', 'GlobalAveragePooling2D', 'BatchNormalization', 'Flatten', 'GlobalMaxPool2D', 'MaxPool2D', 'concatenate', 'Activation', 'Sequence', 'to_categorical', 'backend']Dict:{'numpy': ['mean', 'max', 'array', 'pad', 'min', 'unique', 'isin', 'std'], 'os': [], 'shutil': [], 'warnings': [], 'IPython': [], 'matplotlib': ['hist'], 'pandas': ['array', 'unique', 'read_csv', 'value_counts'], 'seaborn': [], 'tqdm': [], 'sklearn': [], 'wave': [], 'scipy': [], 'librosa': [], 'keras': []} axis_0: 2, axis_1: 4
wids-datathon-2023-forecasting-with-lgbm.py : ['update', 'read_csv', 'head', 'read_csv', 'head', 'to_datetime', 'to_datetime', 'count', 'groupby', 'reset_index', 'groupby', 'reset_index', 'groupby', 'concat', 'groupby', 'nunique', 'unique', 'unique', 'unique', 'unique', 'concat', 'groupby', 'nunique', 'unique', 'unique', 'unique', 'unique', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'set_index', 'copy', 'fillna', 'sort_values', 'ffill', 'sort_values', 'transform', 'copy', 'head', 'apply', 'max', 'min', 'array', 'reset_index', 'apply', 'groupby', 'tail', 'sort_values', 'tail', 'sort_values', 'head', 'sort_values', 'head', 'sort_values', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings', 'wandb'] ['preprocessing', 'mean_squared_error', 'FunctionTransformer', 'datetime', 'timedelta', 'UserSecretsClient', 'log_summary', 'wandb_callback']Dict:{'numpy': ['max', 'sum', 'min', 'unique', 'array', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'array', 'to_datetime'], 'matplotlib': [], 'seaborn': [], 'sklearn': ['transform'], 'datetime': ['min', 'max'], 'lightgbm': [], 'warnings': [], '#': [], 'Supress': [], 'kaggle_secrets': [], 'wandb': []} axis_0: 4, axis_1: 0
nfl-starter-lgb-feature-engg.py : ['read_csv', 'head', 'replace', 'apply', 'apply', 'head', 'array', 'array', 'transform', 'round', 'sum', 'any', 'isnull', 'transform', 'sum', 'round'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'random', 'lightgbm', 'tqdm', 'gc'] ['nflrush', 'preprocessing', 'KFold', 'norm']Dict:{'os': ['replace'], 'pandas': ['array', 'read_csv', 'isnull'], 'kaggle': [], 'numpy': ['round', 'array', 'sum', 'any'], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'random': [], 'lightgbm': [], 'tqdm,': [], 'gc': [], 'scipy': []} axis_0: 0, axis_1: 0
amex-feature-engg-gpu-or-cpu-process-in-chunks.py : ['astype', 'astype', 'apply', 'to_numeric', 'to_numeric', 'astype', 'sub', 'add', 'mul', 'read_parquet', 'read_parquet', 'isin', 'sort_index', 'drop_duplicates', 'read_csv', 'astype', 'astype', 'apply', 'set_index', 'astype', 'reset_index', 'reset_index', 'concat', 'concat', 'sort_index', 'reset_index', 'drop', 'fillna', 'fillna', 'mul', 'sum', 'sum', 'groupby', 'sum', 'last', 'groupby', 'groupby', 'agg', 'join', 'last', 'agg', 'join', 'drop', 'last', 'max', 'all', 'last', 'min', 'max', 'min', 'fillna', 'max', 'min', 'fillna', 'last', 'mean', 'fillna', 'fillna', 'ffill', 'bfill', 'groupby', 'groupby', 'concat', 'sort_index', 'reset_index', 'last', 'groupby', 'concat', 'fillna', 'fillna', 'unique', 'head', 'to_parquet', 'head', 'to_parquet'] ['pandas', 'numpy', 'gc', 'os', 'cupy', 'cudf'] []Dict:{'pandas': ['read_csv', 'concat', 'read_parquet', 'to_numeric', 'unique'], 'gc,': [], 'os': []} axis_0: 2, axis_1: 6
bacteria-image-conv2d-cv-grad-cam.py : ['read_csv', 'read_csv', 'read_csv', 'drop_duplicates', 'reset_index', 'reset_index', 'nunique', 'transform', 'drop', 'sample', 'groupby', 'astype', 'value_counts', 'drop', 'sort_index', 'query', 'astype', 'drop', 'sort_index', 'astype', 'transform', 'transform', 'astype', 'astype', 'astype', 'transform', 'astype', 'transpose', 'array', 'transpose', 'array', 'mode', 'sort_index', 'value_counts', 'to_csv', 'head', 'sort_index', 'value_counts', 'to_csv', 'head', 'reset_index', 'reset_index', 'merge', 'sort_index', 'value_counts', 'to_csv', 'squeeze', 'squeeze', 'astype', 'squeeze'] ['matplotlib.pyplot'] ['register_line_cell_magic', 'expand_dims', 'Model', 'minimize']Dict:{'IPython': [], 'matplotlib': [], 'numpy': [], 'keras': [], 'scipy': []} axis_0: 5, axis_1: 0
ps3e17-eda-ensemble-ml-pipeline-shap.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'select_dtypes', 'head', 'describe', 'transpose', 'rename', 'nunique', 'transpose', 'sum', 'isna', 'corr', 'astype', 'corr', 'astype', 'drop', 'drop', 'concat', 'corr', 'abs', 'fillna', 'unique', 'value_counts', 'unique', 'drop', 'drop', 'boxplot', 'drop', 'copy', 'sum', 'transform', 'copy', 'concat', 'select_dtypes', 'transform', 'transform', 'replace', 'replace', 'replace', 'astype', 'astype', 'astype', 'transform', 'astype', 'astype', 'transform', 'concat', 'concat', 'drop', 'drop', 'replace', 'concat', 'copy', 'reset_index', 'drop', 'reset_index', 'reset_index', 'transform', 'drop', 'drop', 'head', 'keys', 'items', 'sample', 'map', 'map', 'read_csv', 'join', 'to_csv', 'apply', 'apply', 'mean', 'mean', 'sort_values', 'sort_values', 'array', 'array', 'melt', 'sort_values', 'items', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'keys', 'min', 'max', 'min', 'keys', 'array', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'keys', 'stack', 'astype', 'ge', 'mean', 'read_csv', 'join', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'random', 'gc', 'time', 'math', 'seaborn', 'shap', 'optuna', 'lightgbm', 'xgboost', 'warnings'] ['deepcopy', 'partial', 'combinations', 'BaseEstimator', 'TransformerMixin', 'train_test_split', 'StratifiedKFold', 'KFold', 'roc_auc_score', 'StandardScaler', 'MinMaxScaler', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'OneHotEncoder', 'FunctionTransformer', 'LabelEncoder', 'ColumnTransformer', 'RandomUnderSampler', 'enable_iterative_imputer', 'SimpleImputer', 'KNNImputer', 'IterativeImputer', 'PCA', 'NMF', 'Pipeline', 'make_pipeline', 'make_column_transformer', 'make_column_selector', 'EarlyStopping', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'BalancedRandomForestClassifier', 'NuSVC', 'SVC', 'LogisticRegressionCV', 'LogisticRegression', 'KNeighborsClassifier', 'LogisticRegression', 'MLPClassifier', 'GaussianProcessClassifier', 'RBF', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool', 'RFE', 'RFECV', 'permutation_importance', 'Style', 'Fore', 'hierarchy', 'dendrogram', 'linkage', 'squareform', 'RocCurveDisplay', 'confusion_matrix', 'ConfusionMatrixDisplay']Dict:{'numpy': ['transpose', 'mean', 'stack', 'max', 'abs', 'sum', 'array', 'min', 'unique', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'melt', 'concat', 'value_counts', 'unique', 'array'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'random': ['sample'], 'os': ['rename', 'replace'], 'copy': [], 'functools': [], 'itertools': [], 'gc': [], 'time': [], 'math': [], 'sklearn': [], 'category_encoders': [], 'imblearn': [], 'shap': [], 'optuna': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'warnings': [], 'colorama': [], 'scipy': []} axis_0: 5, axis_1: 18
simple-exploration-notebook-2-connect.py : ['mode', 'read_json', 'head', 'read_json', 'value_counts', 'value_counts', 'value_counts', 'to_datetime', 'value_counts', 'to_datetime', 'value_counts', 'value_counts', 'count', 'groupby', 'mean', 'hist', 'apply', 'value_counts', 'apply', 'value_counts', 'iterrows', 'join', 'join', 'join', 'join'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['Basemap', 'cm', 'WordCloud']Dict:{'numpy': ['mean'], 'pandas': ['to_datetime', 'read_json', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'mpl_toolkits': [], 'wordcloud': []} axis_0: 0, axis_1: 0
ubiquant-feature-exploration.py : ['head', 'info', 'sum', 'sum', 'isnull', 'sample', 'set_index', 'round', 'sort_values', 'rank', 'unstack', 'rank', 'groupby', 'pivot', 'reset_index', 'shift', 'corrwith', 'mean', 'mean', 'keys', 'to_csv', 'describe', 'sort_values', 'sort_values', 'sort_values', 'rank', 'groupby', 'pivot', 'reset_index', 'unstack', 'corrwith', 'mean', 'keys', 'abs', 'to_csv', 'describe', 'sort_values', 'sort_values', 'sort_values', 'join', 'sort_values', 'join'] ['warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'multiprocessing'] ['spearmanr']Dict:{'warnings': [], 'numpy': ['mean', 'abs', 'sum', 'round', 'info'], 'pandas': ['pivot', 'isnull'], 'matplotlib': [], 'seaborn': [], 'multiprocessing': [], 'scipy': []} axis_0: 1, axis_1: 2
nm-llm-detect-ai-text-correcttypo-1.py : ['map', 'map', 'read_csv', 'replace', 'value_counts', 'sample', 'join', 'join', 'join', 'apply', 'apply', 'apply', 'drop', 'to_csv', 'read_csv', 'read_csv'] ['numpy', 'pandas', 'random', 'os', 'sys', 're', 'joblib', 'language_tool_python'] ['LogisticRegression', 'MultinomialNB', 'TfidfVectorizer', 'VotingClassifier', 'SGDClassifier', 'train_test_split', 'accuracy_score', 'roc_auc_score', 'GridSearchCV', 'make_scorer', 'accuracy_score', 'ProcessPoolExecutor']Dict:{'numpy': [], 'pandas': ['read_csv', 'value_counts'], 'sklearn': [], 'random,os,sys': [], 'concurrent': ['map'], 're': [], 'joblib': [], 'language_tool_python': []} axis_0: 2, axis_1: 3
titanic-hyperparameter-tuning-with-gridsearchcv.py : ['read_csv', 'read_csv', 'sample', 'sample', 'concat', 'drop', 'drop', 'sum', 'isna', 'drop', 'hist', 'value_counts', 'fillna', 'fillna', 'mean', 'replace', 'replace', 'replace', 'drop', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'drop', 'apply', 'head', 'concat', 'get_dummies', 'drop', 'astype', 'to_csv', 'round', 'astype', 'to_csv'] ['os', 'random', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'lightgbm', 'catboost'] ['train_test_split', 'GridSearchCV', 'accuracy_score', 'DecisionTreeClassifier', 'RandomForestClassifier', 'LabelEncoder', 'StandardScaler', 'LogisticRegression', 'SVC', 'AdaBoostClassifier', 'KNeighborsClassifier']Dict:{'os': ['replace'], 'random': ['sample'], 'numpy': ['mean', 'round', 'sum'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': ['hist'], 'seaborn': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'sklearn': []} axis_0: 0, axis_1: 7
eda-advanced-house-prediction.py : ['read_csv', 'head', 'info', 'sum', 'isnull', 'round', 'mean', 'isnull', 'copy', 'where', 'isnull', 'median', 'groupby', 'head', 'unique', 'copy', 'median', 'groupby', 'median', 'groupby', 'copy', 'hist', 'copy', 'copy', 'unique', 'boxplot', 'head', 'unique', 'copy', 'median', 'groupby'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] []Dict:{'pandas': ['unique', 'read_csv', 'isnull'], 'numpy': ['mean', 'median', 'sum', 'where', 'round', 'unique', 'info', 'copy'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot']} axis_0: 0, axis_1: 0
titanic-competition-top-1.py : ['read_csv', 'read_csv', 'concat', 'info', 'head', 'info', 'info', 'describe', 'nunique', 'unique', 'copy', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'copy', 'rename', 'copy', 'notnull', 'map', 'map', 'corr', 'nlargest', 'value_counts', 'copy', 'isnull', 'nlargest', 'value_counts', 'copy', 'map', 'nlargest', 'value_counts', 'items', 'value_counts', 'copy', 'copy', 'isnull', 'map', 'map', 'unique', 'copy', 'items', 'value_counts', 'iterrows', 'value_counts', 'unique', 'unique', 'unique', 'astype', 'copy', 'corr', 'copy', 'transform', 'groupby', 'fillna', 'mean', 'notnull', 'transform', 'groupby', 'fillna', 'mean', 'drop', 'copy', 'isnull', 'map', 'copy', 'astype', 'iterrows', 'value_counts', 'iterrows', 'value_counts', 'astype', 'get_dummies', 'drop', 'join', 'mean', 'std', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'head', 'head', 'copy', 'value_counts', 'value_counts', 'sort_values', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'concat', 'reset_index', 'copy', 'map', 'value_counts', 'value_counts', 'map', 'pipe', 'pipe', 'head', 'map', 'pipe', 'pipe', 'pipe', 'head', 'value_counts', 'value_counts', 'map', 'pipe', 'pipe', 'pipe', 'pipe', 'head', 'value_counts', 'value_counts', 'map', 'pipe', 'pipe', 'unique', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'copy', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'value_counts', 'rename', 'value_counts', 'rename', 'reset_index', 'sort_values', 'tail', 'reset_index', 'sort_values', 'tail', 'concat', 'pipe', 'pipe', 'pipe', 'copy', 'isin', 'map', 'map', 'pipe', 'pipe', 'pipe', 'head', 'map', 'pipe', 'pipe', 'pipe', 'pipe', 'unique', 'unique', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'copy', 'sort_values', 'sort_values', 'head', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'value_counts', 'copy', 'copy', 'copy', 'copy', 'abs', 'items', 'boxplot', 'copy', 'copy', 'pipe', 'pipe', 'pipe', 'sort_index', 'concat', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot'] ['HTML', 'display', 'GradientBoostingClassifier', 'ShuffleSplit', 'RepeatedKFold', 'train_test_split', 'GridSearchCV', 'cross_val_score']Dict:{'IPython': [], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull'], 'numpy': ['mean', 'abs', 'unique', 'isin', 'info', 'std', 'copy'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'sklearn': []} axis_0: 0, axis_1: 1
beginners-lightautoml-houseprices-predictor.py : ['read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'head', 'to_csv'] ['warnings', 'os', 'time', 'requests', 'numpy', 'pandas', 'torch'] ['display', 'HTML', 'Javascript', 'mean_squared_error', 'TabularAutoML', 'TabularUtilizedAutoML', 'Task', 'ReportDeco']Dict:{'warnings': [], 'IPython': [], 'os': [], 'time': [], 'requests': ['head'], 'numpy': [], 'pandas': ['read_csv'], 'sklearn': [], 'torch': [], 'lightautoml': []} axis_0: 0, axis_1: 0
godaddy-add-external-data.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'head', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'drop', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'tail', 'unique', 'reset_index', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'read_csv', 'merge', 'head', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'reset_index', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'tail', 'to_dict', 'set_index', 'copy', 'map', 'read_csv', 'concat', 'fillna', 'drop', 'fillna', 'read_csv', 'astype', 'head', 'read_csv', 'astype', 'head', 'apply', 'head', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'map', 'map', 'head', 'drop', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'os', 'lightgbm', 'xgboost', 'catboost'] ['HTML', 'tqdm', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'IPython': [], 'gc': [], 'numpy': ['mean', 'abs', 'sum', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'os': [], 'tqdm': []} axis_0: 0, axis_1: 4
eda-hyperparameters-xgboost-92.py : ['join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'copy', 'to_datetime', 'drop', 'rename', 'agg', 'groupby', 'sum', 'copy', 'copy', 'to_datetime', 'drop', 'astype', 'merge', 'rename', 'agg', 'groupby', 'nlargest', 'groupby', 'reset_index', 'merge', 'sum', 'boxplot', 'boxplot', 'map', 'map', 'head', 'astype', 'apply', 'apply', 'apply', 'head', 'rename', 'agg', 'groupby', 'unique', 'array', 'unique', 'unique', 'fillna', 'merge', 'merge', 'merge', 'merge', 'clip', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'copy', 'fillna', 'merge', 'rename', 'agg', 'groupby', 'fillna', 'merge', 'drop', 'rename', 'agg', 'groupby', 'fillna', 'merge', 'drop', 'rename', 'agg', 'groupby', 'fillna', 'merge', 'drop', 'agg', 'groupby', 'transform', 'copy', 'map', 'reset_index', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'clip', 'clip', 'clip', 'clip', 'isin', 'drop', 'drop', 'clip', 'clip', 'clip', 'clip', 'clip', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'matplotlib.ticker', 'os', 'time', 'os', 'pickle'] ['mean_squared_error', 'LabelEncoder', 'product', 'StandardScaler', 'RandomizedSearchCV', 'XGBRegressor', 'LinearRegression', 'XGBRegressor', 'plot_importance']Dict:{'pandas': ['read_csv', 'unique', 'array', 'merge', 'to_datetime'], 'numpy': ['sum', 'unique', 'clip', 'isin', 'array', 'copy'], 'matplotlib': [], 'sklearn': [], 'os': ['rename'], 'time': [], 'itertools': [], 'xgboost': [], 'pickle': []} axis_0: 0, axis_1: 13
eda-basic-fe-and-lgb.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'head', 'value_counts', 'crosstab', 'crosstab', 'round', 'value_counts', 'round', 'value_counts', 'mean', 'groupby', 'crosstab', 'crosstab', 'value_counts', 'crosstab', 'agg', 'groupby', 'value_counts', 'crosstab', 'isnull', 'isnull', 'boxplot', 'boxplot', 'boxplot', 'agg', 'groupby', 'hist', 'hist', 'hist', 'boxplot', 'boxplot', 'agg', 'groupby', 'hist', 'hist', 'hist', 'hist', 'hist', 'agg', 'groupby', 'agg', 'groupby', 'fillna', 'mean', 'fillna', 'mean', 'unique', 'astype', 'unique', 'astype', 'transform', 'astype', 'transform', 'astype', 'head', 'fillna', 'fillna', 'drop', 'drop', 'copy', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'datetime', 'lightgbm', 'os', 'xgboost', 'lightgbm', 'os', 'matplotlib.pyplot'] ['stats', 'hstack', 'csr_matrix', 'train_test_split', 'StratifiedKFold', 'WordCloud', 'Counter', 'stopwords', 'ngrams', 'StandardScaler', 'LabelEncoder']Dict:{'numpy': ['mean', 'round', 'unique', 'copy'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'unique', 'crosstab'], 'seaborn': ['boxplot'], 'datetime': [], 'lightgbm': [], 'scipy': ['mean', 'astype', 'copy'], 'sklearn': ['transform'], 'wordcloud': [], 'collections': ['copy'], 'nltk': [], 'os': [], 'xgboost': [], 'matplotlib': ['boxplot', 'hist']} axis_0: 0, axis_1: 2
target-engineering-cv-fast-ai-multi-target.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', '__init__', 'unique', 'unique', 'unique', 'cumprod', 'mean', 'groupby', 'cumprod', 'mean', 'groupby', 'hist', 'apply', 'groupby', 'qcut', 'astype', 'mean', 'std', 'head', 'sort_values', 'std', 'astype', 'astype', 'astype', 'astype', 'astype', 'mean', 'fillna', '__init__', 'astype', 'eval', 'sum', 'astype', 'astype'] ['janestreet', 'datatable', 'numpy', 'pandas', 'matplotlib.pyplot', 'torch', 'torch.nn', 'torch.nn.functional', 'pytorch_lightning', 'warnings', 'numpy', 'gc'] ['LogisticRegression', 'Pipeline', 'roc_auc_score', 'cross_val_score', 'SimpleImputer', 'StandardScaler', 'FunctionTransformer', 'MinMaxScaler', 'ColumnTransformer', 'set_config', 'tqdm', 'KFold', '_BaseKFold', 'indexable', '_num_samples', '_deprecate_positional_args', 'TabularDataLoaders', 'TabularLearner', 'fit_one_cycle', 'lr_find']Dict:{'janestreet': [], 'datatable': [], 'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'std', 'cumprod'], 'pandas': ['qcut', 'eval', 'unique'], 'matplotlib': ['hist'], 'torch': [], 'pytorch_lightning': [], 'sklearn': ['__init__'], 'tqdm': ['__init__'], 'warnings': [], 'gc': [], 'fastai': []} axis_0: 0, axis_1: 0
xgboost-vs-linear-regression-vs-svm.py : ['read_csv', 'read_csv', 'drop', 'sort_values', 'sum', 'isna', 'drop', 'sort_values', 'abs', 'corrwith', 'drop', 'sample', 'corrwith', 'abs', 'corrwith', 'corr', 'corrwith', 'drop', 'sum', 'isna', 'fillna', 'mean', 'fillna', 'mode', 'array', 'sample', 'describe', 'unique', 'unique', 'sort_values', 'sum', 'isna', 'drop', 'boxplot', 'sort_values', 'unique', 'head', 'get_dummies', 'concat', 'get_dummies', 'concat', 'to_csv'] ['os', 'pandas', 'matplotlib.pyplot', 'numpy', 'seaborn'] ['LinearRegression', 'SVR', 'RandomForestRegressor', 'train_test_split', 'MinMaxScaler', 'LabelEncoder', 'XGBRegressor', 'filterwarnings']Dict:{'os': [], 'pandas': ['isna', 'read_csv', 'concat', 'get_dummies', 'unique', 'array'], 'matplotlib': ['boxplot'], 'numpy': ['mean', 'abs', 'sum', 'unique', 'array'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': [], 'warnings': []} axis_0: 0, axis_1: 6
from-eda-to-the-top-lb-0-367.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'nunique', 'min', 'count', 'min', 'count', 'unique', 'unique', 'to_datetime', 'to_datetime', 'to_datetime', 'map', 'abs', 'max', 'hist', 'count', 'groupby', 'count', 'groupby', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'min', 'max', 'min', 'max', 'abs', 'abs', 'abs', 'abs', 'min', 'min', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'round', 'round', 'reset_index', 'mean', 'groupby', 'reset_index', 'count', 'groupby', 'merge', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'mean', 'groupby', 'merge', 'merge', 'reset_index', 'mean', 'groupby', 'reset_index', 'count', 'groupby', 'merge', 'join', 'join', 'merge', 'merge', 'concat', 'round', 'round', 'sort_index', 'set_index', 'count', 'rolling', 'isnull', 'merge', 'merge', 'rename', 'reset_index', 'shift', 'set_index', 'reset_index', 'drop', 'mean', 'rolling', 'groupby', 'set_index', 'reset_index', 'agg', 'groupby', 'set_index', 'fillna', 'merge', 'fillna', 'merge', 'concat', 'rename', 'reset_index', 'shift', 'set_index', 'reset_index', 'drop', 'mean', 'rolling', 'groupby', 'set_index', 'reset_index', 'agg', 'groupby', 'set_index', 'fillna', 'merge', 'fillna', 'merge', 'read_csv', 'read_csv', 'read_csv', 'concat', 'merge', 'merge', 'head', 'count', 'round', 'round', 'round', 'round', 'round', 'mean', 'round', 'mean', 'abs', 'abs', 'abs', 'sort_values', 'tail', 'sort_values', 'tail', 'keys', 'merge', 'fillna', 'sort_values', 'sort_values', 'iterrows', 'head', 'min', 'max', 'to_csv', 'mean', 'mean', 'boxplot', 'reset_index', 'mean', 'groupby', 'min', 'max', 'mean'] ['numpy', 'pandas', 'datetime', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'warnings'] ['timedelta', 'train_test_split', 'PCA', 'MiniBatchKMeans']Dict:{'numpy': ['mean', 'max', 'abs', 'round', 'min', 'unique'], 'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'merge', 'to_datetime'], 'datetime': [], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'xgboost': [], 'sklearn': [], 'warnings': []} axis_0: 6, axis_1: 2
water-quality-prediction-complete-eda-insights.py : ['sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'read_csv', 'median', 'mean', 'median', 'mean', 'median', 'boxplot', 'drop', 'corr', 'drop', 'where', 'mean', 'where', 'mean', 'where', 'mean', 'where', 'mean', 'head', 'drop', 'drop', 'min', 'max', 'min', 'max', 'min', 'max', 'min', 'max'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'math', 'warnings', 'matplotlib.cm'] ['HTML', 'tqdm', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'train_test_split', 'StandardScaler', 'RandomForestRegressor', 'mean_absolute_error', 'Style', 'Fore']Dict:{'IPython': [], 'pandas': ['read_csv', 'isnull'], 'numpy': ['transpose', 'median', 'mean', 'max', 'sum', 'where', 'min'], 'matplotlib': [], 'seaborn': ['boxplot'], 'gc': [], 'tqdm': [], 'math': [], 'sklearn': [], 'colorama': [], 'warnings': [], '=': [], 'rf': []} axis_0: 0, axis_1: 0
tps-apr22-tfv2.py : ['read_csv', 'sort_values', 'head', 'read_csv', 'sort_values', 'head', 'read_csv', 'sort_values', 'head', 'read_csv', 'head', 'fillna', 'shift', 'groupby', 'fillna', 'shift', 'groupby', 'reset_index', 'mean', 'rolling', 'groupby', 'reset_index', 'std', 'rolling', 'groupby', 'reset_index', 'sum', 'rolling', 'groupby', 'fillna', 'reset_index', 'rename', 'agg', 'groupby', 'drop_duplicates', 'merge', 'apply', 'drop', 'drop', 'drop', 'transform', 'transform', 'copy', 'copy', 'squeeze', 'squeeze', 'mean', 'to_csv', 'head', 'median', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'tensorflow'] ['tqdm', 'roc_auc_score', 'StratifiedKFold', 'QuantileTransformer', 'plot_model', 'Model', 'load_model', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau', 'GlobalAveragePooling1D', 'GlobalMaxPooling1D', 'Add', 'Bidirectional', 'LSTM', 'GRU', 'Input', 'BatchNormalization', 'Dense', 'Concatenate', 'Multiply']Dict:{'gc': [], 'numpy': ['mean', 'median', 'squeeze', 'sum', 'std', 'copy'], 'pandas': ['merge', 'read_csv'], 'tqdm': [], 'sklearn': ['transform'], 'tensorflow': []} axis_0: 2, axis_1: 3
don-t-forget-the-feature-engineering.py : ['copy', 'where', 'copy', 'drop', 'drop', 'transform', 'reindex', 'transform', 'read_csv', 'read_csv', 'reset_index', 'concat', 'astype', 'copy', 'drop', 'concat', 'concat', 'concat', 'reset_index', 'concat', 'concat', 'copy', 'drop', 'notnull', 'copy', 'drop', 'isnull', 'read_csv', 'concat', 'to_csv'] ['numpy', 'pandas', 'category_encoders', 'gc', 'h2o'] ['OneHotEncoder', 'VarianceThreshold', 'StratifiedKFold', 'H2OGeneralizedLinearEstimator']Dict:{'numpy': ['where', 'copy'], 'pandas': ['notnull', 'concat', 'read_csv', 'isnull'], 'sklearn': [], 'category_encoders': [], 'gc': [], 'h2o': []} axis_0: 2, axis_1: 10
titanic-eda-feature-engineering-ensemble-top-5.py : ['read_csv', 'read_csv', 'head', 'info', 'astype', 'astype', 'value_counts', 'value_counts', 'cut', 'apply', 'crosstab', 'sum', 'reset_index', 'concat', 'info', 'replace', 'to_dict', 'astype', 'median', 'groupby', 'isnull', 'apply', 'isnull', 'qcut', 'astype', 'fillna', 'mean', 'groupby', 'isnull', 'apply', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'fillna', 'mode', 'fillna', 'mean', 'groupby', 'isnull', 'qcut', 'astype', 'drop', 'sum', 'isnull', 'get_dummies', 'transform', 'transform', 'transform', 'astype', 'astype', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['norm', 'LabelEncoder', 'RandomForestClassifier', 'LogisticRegression', 'SVC', 'DecisionTreeClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'StandardScaler', 'confusion_matrix', 'cross_val_score', 'StratifiedKFold', 'GridSearchCV', 'enable_hist_gradient_boosting', 'HistGradientBoostingClassifier', 'StackingClassifier', 'KNeighborsClassifier', 'XGBClassifier', 'train_test_split', 'LabelEncoder']Dict:{'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'get_dummies', 'qcut', 'crosstab'], 'numpy': ['mean', 'median', 'max', 'sum', 'min', 'info'], 'matplotlib': [], 'seaborn': [], 'scipy': ['mean', 'median'], 'sklearn': ['transform'], 'xgboost': ['apply'], 'warnings': []} axis_0: 1, axis_1: 2
lgb-data-augmentation-starter.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'head', 'sum', 'memory_usage', 'max', 'min', 'all', 'fillna', 'astype', 'fillna', 'sum', 'astype', 'astype', 'astype', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'sort_values', 'set_index', 'set_index', 'head', 'copy', 'head', 'drop', 'copy', 'fillna', 'fillna', 'transform', 'transform', 'copy', 'copy', 'add_prefix', 'concat', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'mean', 'to_csv', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'warnings', 'datetime', 'warnings', 'gc', 'lightgbm', 'matplotlib.pyplot', 'seaborn'] ['KFold', 'StratifiedKFold', 'TimeSeriesSplit', 'roc_auc_score', 'LabelEncoder']Dict:{'numpy': ['mean', 'max', 'sum', 'all', 'min', 'isin', 'std', 'copy'], 'pandas': ['concat', 'merge', 'read_csv'], 'sklearn': ['transform'], 'os': [], 'warnings': [], 'datetime': [], 'gc': [], 'lightgbm': [], 'matplotlib': [], 'seaborn': []} axis_0: 1, axis_1: 2
feature-engineering-outliers-handling-ensembling.py : ['read_csv', 'read_csv', 'read_csv', 'reset_index', 'sum', 'isnull', 'nunique', 'value_counts', 'value_counts', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'head', 'head', 'unique', 'mean', 'isnull', 'boxplot', 'boxplot', 'hist', 'hist', 'mean', 'std', 'mean', 'std', 'quantile', 'quantile', 'quantile', 'quantile', 'value_counts', 'unique', 'astype', 'astype', 'head', 'drop', 'drop', 'apply', 'where', 'astype', 'apply', 'where', 'apply', 'where', 'astype', 'apply', 'where', 'head', 'unique', 'apply', 'sub', 'concat', 'unique', 'apply', 'sub', 'drop', 'drop', 'apply', 'apply', 'head', 'drop', 'drop', 'value_counts', 'value_counts', 'where', 'where', 'head', 'head', 'sum', 'mean', 'isnull', 'hist', 'hist', 'boxplot', 'boxplot', 'quantile', 'quantile', 'quantile', 'quantile', 'mean', 'isnull', 'unique', 'value_counts', 'mean', 'isnull', 'mean', 'isnull', 'copy', 'sample', 'dropna', 'sum', 'isnull', 'isnull', 'isnull', 'where', 'isnull', 'mean', 'std', 'fillna', 'mean', 'isnull', 'mean', 'isnull', 'fillna', 'mode', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'median', 'where', 'max', 'max', 'head', 'sum', 'isnull', 'value_counts', 'count', 'groupby', 'tail', 'sort_values', 'count', 'groupby', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'value_counts', 'value_counts', 'get_dummies', 'unique', 'unique', 'unique', 'to_dict', 'mean', 'groupby', 'map', 'map', 'map', 'transform', 'transform', 'transform', 'mean', 'concat', 'where', 'concat', 'sort_values', 'head', 'sort_values', 'sort_values', 'abs', 'sort_values'] ['pandas', 'numpy', 'scipy', 're', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'matplotlib.pyplot', 'xgboost', 'warnings'] ['stats', 'train_test_split', 'MinMaxScaler', 'DecisionTreeClassifier', 'cross_val_score', 'LogisticRegression', 'AdaBoostClassifier', 'RandomForestClassifier', 'roc_auc_score', 'metrics']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique'], 'numpy': ['mean', 'median', 'quantile', 'max', 'abs', 'sum', 'where', 'min', 'unique', 'isin', 'std', 'copy'], 'scipy': ['mode'], 're': ['sub'], 'plotly': [], 'matplotlib': ['boxplot', 'hist'], 'sklearn': [], 'xgboost': [], 'warnings': [], '=': [], 'pd': [], 'training_vars': [], 'ascending=False)': []} axis_0: 0, axis_1: 9
citeseq-rna-to-protein-encoder-decoder-nn.py : ['join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'read_hdf', '__init__', '__init__', '__init__', '__init__', 'sum', 'count', 'sum', 'count', 'sum', 'count', 'update', 'update', 'eval', 'update', 'update', 'eval', 'array', 'mean', 'read_csv', 'any', 'isna', 'round', 'to_csv'] ['os', 'gc', 'pickle', 'pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'torch', 'torch.nn', 'torch.nn.functional'] ['Fore', 'Back', 'Style', 'MaxNLocator', 'tqdm', 'KFold', 'mean_squared_error', 'AdamW', 'lr_scheduler', 'DataLoader', 'Dataset']Dict:{'os,': [], 'gc,': [], 'pickle': [], 'pandas': ['isna', 'read_csv', 'eval', 'read_hdf', 'array'], 'matplotlib': ['__init__'], 'seaborn': [], 'numpy': ['mean', 'any', 'sum', 'round', 'array'], 'colorama': ['__init__'], 'tqdm': ['update', '__init__'], 'sklearn': ['__init__'], 'torch': ['__init__']} axis_0: 1, axis_1: 0
nlp-the-simplest-way.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'value_counts', 'apply', 'head', 'array', 'join', 'apply', 'head', 'join', 'apply', 'head', 'transform', 'transform', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'string'] ['CountVectorizer', 'TfidfVectorizer', 'word_tokenize', 'stopwords', 'PorterStemmer', 'LogisticRegression', 'train_test_split', 'f1_score']Dict:{'numpy': ['array'], 'pandas': ['array', 'read_csv', 'value_counts'], 'os': [], 'sklearn': [], 'nltk': []} axis_0: 0, axis_1: 0
surface-recognition-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'max', 'nunique', 'groupby', 'value_counts', 'merge', 'boxplot', 'apply', 'array', 'array', 'array', 'mean', 'abs', 'diff', 'mean', 'diff', 'abs', 'diff', 'fillna', 'cumsum', 'fillna', 'cumsum', 'fillna', 'cumsum', 'mean', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'max', 'abs', 'head', 'sort_values', 'to_csv', 'value_counts', 'nunique', 'groupby', 'groupby', 'to_csv', 'value_counts', 'to_csv', 'value_counts'] ['os', 'time', 'math', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'warnings'] ['LabelEncoder', 'GroupKFold']Dict:{'os': [], 'time': [], 'math': [], 'numpy': ['mean', 'std', 'max', 'abs', 'min', 'diff', 'array', 'cumsum'], 'pandas': ['array', 'merge', 'read_csv', 'value_counts'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'sklearn': [], 'lightgbm': [], 'warnings': [], '=': [], 'pd': [], 'clf': [], 'ascending=False,': [], 'inplace=True)': []} axis_0: 0, axis_1: 4
debertav3-lgbm-no-autocorrect.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'join', 'get', 'count', 'apply', 'apply', 'apply', 'apply', 'merge', 'drop', 'head', 'head', 'mean', 'mean', 'update', 'join', 'apply', 'apply', 'map', 'map', 'join', 'apply', 'map', 'eval', 'join', 'mean', 'mean', 'head', 'drop', 'drop', 'drop', 'drop', 'mean', 'to_csv'] ['numpy', 'pandas', 'warnings', 'logging', 'os', 'gc', 'shutil', 'json', 'transformers', 'torch', 'nltk', 'spacy', 're', 'lightgbm', 'random', 'os', 'numpy', 'torch'] ['List', 'AutoModel', 'AutoTokenizer', 'AutoConfig', 'AutoModelForSequenceClassification', 'DataCollatorWithPadding', 'Dataset', 'load_dataset', 'load_from_disk', 'TrainingArguments', 'Trainer', 'load_metric', 'disable_progress_bar', 'mean_squared_error', 'KFold', 'GroupKFold', 'tqdm', 'stopwords', 'Counter', 'SpellChecker']Dict:{'typing': ['count'], 'numpy': ['mean'], 'pandas': ['eval', 'merge', 'read_csv'], 'warnings': [], 'logging': [], 'os': [], 'gc': [], 'shutil': [], 'json': [], 'transformers': [], 'datasets': [], 'sklearn': [], 'torch': ['mean'], 'tqdm': ['update'], 'nltk': [], 'collections': ['update', 'get'], 'spacy': [], 're': [], 'spellchecker': [], 'lightgbm': []} axis_0: 1, axis_1: 13
titanic-prediction-eda-hyperparameter.py : ['read_csv', 'head', 'describe', 'sum', 'isnull', 'drop', 'head', 'fillna', 'mean', 'fillna', 'mode', 'info', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'boxplot', 'value_counts', 'nlargest', 'drop', 'value_counts', 'nlargest', 'drop', 'corr', 'unique', 'replace', 'replace', 'replace', 'unique', 'drop', 'head', 'map', 'head', 'sum', 'isnull', 'read_csv', 'head', 'replace', 'replace', 'replace', 'unique', 'map', 'drop', 'head', 'sum', 'isnull', 'head', 'array', 'insert', 'head', 'drop', 'head', 'to_csv', 'head'] ['numpy', 'pandas', 'seaborn', 'warnings', 'matplotlib.pyplot', 'pandas'] ['scatter_matrix', 'accuracy_score', 'confusion_matrix', 'classification_report', 'train_test_split', 'LogisticRegression', 'DecisionTreeClassifier', 'GridSearchCV', 'GradientBoostingClassifier', 'RandomForestClassifier', 'SVC', 'KNeighborsClassifier']Dict:{'numpy': ['mean', 'sum', 'array', 'unique', 'info', 'insert'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'unique', 'array'], 'seaborn': ['boxplot'], 'warnings': [], 'matplotlib': ['boxplot'], 'sklearn': []} axis_0: 0, axis_1: 2
tpsjan22-10-advanced-linear-model-with-cci.py : ['read_csv', 'read_csv', 'read_csv', 'set_index', 'read_csv', 'set_index', 'to_datetime', 'head', 'mean', 'mean', 'abs', 'abs', 'apply', 'apply', 'drop', 'drop', 'concat', 'concat', 'map', 'concat', 'map', 'concat', 'concat', 'apply', 'concat', 'astype', 'astype', 'transform', 'copy', 'update', 'mean', 'mean', 'mean', 'mean', 'mean', 'copy', 'hist', 'hist', 'copy', 'round', 'to_csv'] ['pandas', 'numpy', 'pickle', 'itertools', 'gc', 'math', 'matplotlib.pyplot', 'dateutil.easter', 'scipy.stats'] ['MaxNLocator', 'FormatStrFormatter', 'PercentFormatter', 'datetime', 'date', 'timedelta', 'StandardScaler', 'MinMaxScaler', 'GroupKFold', 'Ridge', 'mean_squared_error', 'ColumnTransformer', 'make_pipeline']Dict:{'pandas': ['concat', 'to_datetime', 'read_csv'], 'numpy': ['mean', 'round', 'abs', 'copy'], 'pickle': [], 'itertools': [], 'gc': [], 'math': [], 'matplotlib': [], 'dateutil': [], 'datetime': [], 'sklearn': [], 'scipy': []} axis_0: 0, axis_1: 8
lightgbm-model-explained-by-shap.py : ['read_csv', 'read_csv', 'drop', 'concat', 'get_dummies', 'count', 'groupby', 'map', 'mean', 'groupby', 'read_csv', 'get_dummies', 'get_dummies', 'get_dummies', 'concat', 'merge', 'reset_index', 'count', 'groupby', 'map', 'mean', 'groupby', 'read_csv', 'concat', 'astype', 'get_dummies', 'concat', 'count', 'groupby', 'map', 'mean', 'groupby', 'read_csv', 'concat', 'get_dummies', 'count', 'groupby', 'map', 'mean', 'groupby', 'read_csv', 'concat', 'get_dummies', 'count', 'groupby', 'map', 'mean', 'groupby', 'read_csv', 'count', 'groupby', 'map', 'mean', 'groupby', 'read_csv', 'read_csv', 'factorize', 'merge', 'reset_index', 'merge', 'reset_index', 'merge', 'reset_index', 'merge', 'reset_index', 'merge', 'reset_index', 'merge', 'reset_index', 'merge', 'reset_index', 'merge', 'reset_index', 'merge', 'reset_index', 'merge', 'reset_index', 'value_counts', 'describe', 'value_counts', 'describe', 'describe', 'filter', 'describe', 'hist', 'describe', 'describe', 'filter', 'describe', 'filter', 'describe', 'filter', 'describe', 'describe', 'clip', 'min', 'max', 'to_csv'] ['pandas', 'numpy', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'gc', 'warnings', 'shap'] ['MinMaxScaler', 'LabelEncoder', 'train_test_split', 'accuracy_score', 'roc_auc_score', 'confusion_matrix', 'VarianceThreshold']Dict:{'pandas': ['read_csv', 'concat', 'value_counts', 'get_dummies', 'factorize', 'merge'], 'numpy': ['mean', 'min', 'max', 'clip'], 'sklearn': [], 'lightgbm': [], 'matplotlib': ['hist'], 'seaborn': [], 'gc': [], 'warnings': [], 'shap': []} axis_0: 0, axis_1: 10
tps-09-simple-blend-stacking-xgb-lgbm-catb.py : ['copy', 'drop', 'copy', 'copy', 'drop', 'sum', 'isna', 'min', 'std', 'skew', 'median', 'fillna', 'transform', 'mean', 'keys', 'to_csv', 'mean', 'copy', 'to_csv', 'keys', 'to_csv', 'copy', 'mean', 'drop', 'mean', 'copy', 'to_csv'] ['numpy', 'pandas'] ['filterwarnings', 'skew', 'StandardScaler', 'Pipeline', 'SimpleImputer']Dict:{'numpy': ['mean', 'median', 'sum', 'min', 'std', 'copy'], 'pandas': ['isna'], 'warnings': [], 'scipy': [], 'sklearn': []} axis_0: 0, axis_1: 7
feature-importance-of-lightgbm.py : ['read_csv', 'all', 'sum', 'sum', 'any', 'assign', 'astype', 'astype', 'idxmax', 'items', 'groupby', 'max', 'groupby', 'join', 'assign', 'join', 'join', 'drop', 'assign', 'join', 'join', 'join', 'join', 'mean', 'std', 'min', 'max', 'sum', 'rename', 'sum', 'mean', 'mean', 'astype', 'mean', 'groupby', 'set_index', 'read_csv', 'astype', 'round', 'mean', 'array', 'astype', 'join', 'to_csv', 'sort_values'] ['numpy', 'pandas', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['StratifiedKFold']Dict:{'numpy': ['mean', 'any', 'max', 'sum', 'array', 'all', 'round', 'min', 'std'], 'pandas': ['array', 'read_csv'], 'lightgbm': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'warnings': []} axis_0: 1, axis_1: 5
ensamble-methods-on-regression.py : ['read_csv', 'read_csv', 'head', 'drop', 'drop', 'drop', 'reset_index', 'concat', 'drop', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'drop', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'groupby', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'corr', 'apply', 'astype', 'astype', 'astype', 'transform', 'sort_values', 'apply', 'dropna', 'head', 'get_dummies', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'mean', 'std', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'xgboost', 'lightgbm'] ['stats', 'norm', 'skew', 'LabelEncoder', 'boxcox1p', 'ElasticNet', 'Lasso', 'BayesianRidge', 'LassoLarsIC', 'RandomForestRegressor', 'GradientBoostingRegressor', 'KernelRidge', 'make_pipeline', 'RobustScaler', 'BaseEstimator', 'TransformerMixin', 'RegressorMixin', 'clone', 'KFold', 'cross_val_score', 'train_test_split', 'mean_squared_error']Dict:{'numpy': ['mean', 'median', 'std', 'sum'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'scipy': [], 'sklearn': [], 'xgboost': [], 'lightgbm': []} axis_0: 0, axis_1: 3
2022-march-mania-quick-eda-fe.py : ['join', 'read_csv', 'to_numeric', 'head', 'sort_index', 'value_counts', 'read_csv', 'to_numeric', 'head', 'sort_index', 'value_counts', 'read_csv', 'head', 'hist', 'hist', 'hist', 'sum', 'set_index', 'read_csv', 'head', 'read_csv', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'read_csv', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'read_csv', 'head', 'hist', 'describe', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'unstack', 'read_csv', 'head', 'hist', 'describe', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'unstack', 'read_csv', 'head', 'hist', 'describe', 'agg', 'groupby', 'join', 'read_csv', 'head', 'hist', 'describe', 'agg', 'groupby', 'join', 'read_csv', 'head', 'agg', 'groupby', 'join', 'unstack', 'unstack', 'unstack', 'read_csv', 'head', 'agg', 'groupby', 'join', 'unstack', 'unstack', 'unstack', 'read_csv', 'head', 'agg', 'groupby', 'join', 'read_csv', 'head', 'agg', 'groupby', 'join', 'head', 'hist', 'agg', 'groupby', 'join', 'head', 'hist', 'agg', 'groupby', 'join', 'copy', 'merge', 'copy', 'merge', 'any', 'any', 'isnull', 'read_csv', 'apply', 'apply', 'merge', 'isin', 'isin', 'isin', 'isin', 'isna', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isna', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isna', 'isin', 'isin', 'isin', 'isin', 'isna', 'copy', 'where', 'where', 'where', 'where', 'where', 'where', 'map', 'map', 'copy', 'where', 'where', 'where', 'where', 'where', 'where', 'map', 'map', 'concat', 'astype', 'astype', 'astype', 'read_csv', 'read_csv', 'head', 'unstack', 'agg', 'groupby', 'isin', 'head', 'unstack', 'agg', 'groupby', 'isin', 'read_csv', 'head', 'sort_values', 'read_csv', 'head', 'read_csv', 'read_csv', 'head', 'read_csv', 'read_csv', 'head', 'merge', 'read_csv', 'head', 'read_csv', 'head', 'head', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'head', 'tail', 'sort_values', 'count', 'groupby', 'tail', 'sort_values', 'count', 'groupby', 'tail', 'sort_values', 'count', 'groupby', 'tail', 'sort_values', 'count', 'groupby', 'read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'merge', 'head', 'merge', 'head', 'head', 'head', 'apply', 'apply', 'head', 'apply', 'apply', 'head', 'value_counts', 'value_counts', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'read_csv', 'head', 'read_csv', 'head', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'merge', 'count', 'groupby', 'count', 'groupby', 'rename', 'head', 'merge', 'count', 'groupby', 'count', 'groupby', 'rename', 'head', 'read_csv', 'head', 'read_csv', 'head', 'to_dict', 'head', 'head', 'merge', 'rename', 'head', 'merge', 'rename', 'merge', 'rename', 'rename', 'head', 'merge', 'rename', 'rename', 'head', 'head', 'value_counts', 'corr', 'corr'] ['numpy', 'pandas', 'tubesml', 'seaborn', 'matplotlib.pyplot', 'mm_data_manipulation', 'os', 'seaborn'] []Dict:{'numpy': ['mean', 'any', 'sum', 'where', 'isin', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'to_numeric', 'merge'], 'tubesml': [], 'seaborn': [], 'matplotlib': ['hist'], 'mm_data_manipulation': [], 'os': ['rename'], 'IPython': [], 'bracketeer': []} axis_0: 0, axis_1: 4
under-sample-with-multiple-runs.py : ['copy', 'to_csv', 'copy', 'to_csv', 'copy', 'to_csv'] ['os', 'numpy', 'pandas', 'xgboost', 'gc'] ['preprocessing', 'KMeansSMOTE', 'SMOTE', 'RandomOverSampler', 'RandomOverSampler']Dict:{'os': [], 'numpy': ['copy'], 'pandas': [], 'sklearn': [], 'xgboost': [], 'gc': [], 'imblearn': []} axis_0: 0, axis_1: 1
model-stacking-feature-engineering-and-eda.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'join', 'join', 'join', 'head', 'describe', 'min', 'max', 'unique', 'unique', 'isin', 'isin', 'query', 'groupby', 'sort_values', 'agg', 'unique', 'unique', 'merge', 'fillna', 'head', 'describe', 'apply', 'apply', 'mean', 'groupby', 'sum', 'groupby', 'mean', 'groupby', 'sum', 'groupby', 'mean', 'groupby', 'sum', 'groupby', 'boxplot', 'query', 'shift', 'groupby', 'sort_values', 'fillna', 'agg', 'groupby', 'sort_values', 'min', 'max', 'merge', 'min', 'rolling', 'max', 'rolling', 'mean', 'rolling', 'std', 'rolling', 'apply', 'groupby', 'sort_values', 'fillna', 'shift', 'groupby', 'sort_values', 'fillna', 'head', 'describe', 'copy', 'query', 'copy', 'query', 'copy', 'query', 'dropna', 'dropna', 'dropna', 'dropna', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'drop', 'astype', 'drop', 'astype', 'astype', 'astype', 'drop_duplicates', 'concat', 'merge', 'drop', 'astype', 'unique', 'median', 'isnull', 'fillna', 'mean', 'drop', 'drop', 'drop', 'head', 'describe', 'sort_values', 'round', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'head', 'head', 'drop', 'clip', 'to_csv', 'head'] ['datetime', 'warnings', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'catboost'] ['Pool', 'CatBoostRegressor', 'XGBRegressor', 'plot_importance', 'mean_squared_error', 'LinearRegression', 'KNeighborsRegressor', 'RandomForestRegressor', 'StandardScaler', 'MinMaxScaler']Dict:{'datetime': [], 'warnings': [], 'numpy': ['mean', 'median', 'max', 'sum', 'round', 'min', 'unique', 'clip', 'isin', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'merge'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'catboost': [], 'xgboost': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 8
week2-encoding-feature-engineering.py : ['read_csv', 'read_csv', 'concat', 'select_dtypes', 'copy', 'groupby', 'rename', 'reset_index', 'merge', 'drop', 'array', 'unique', 'isin', 'isin', 'concat', 'to_csv', 'to_csv', 'to_csv', 'read_csv', 'read_csv', 'concat', 'select_dtypes', 'copy', 'get_dummies', 'array', 'unique', 'isin', 'isin', 'concat', 'to_csv', 'read_csv', 'read_csv', 'concat', 'select_dtypes', 'copy', 'factorize', 'array', 'unique', 'isin', 'isin', 'concat', 'to_csv', 'mean', 'count', 'groupby', 'mean', 'groupby', 'map', 'fillna', 'sort_index', 'count', 'groupby', 'mean', 'groupby', 'map', 'concat', 'fillna', 'sort_index', 'read_csv', 'read_csv', 'concat', 'select_dtypes', 'copy', 'drop', 'drop', 'head', 'array', 'unique', 'isin', 'isin', 'concat', 'to_csv', 'read_csv', 'read_csv', 'concat', 'select_dtypes', 'copy', 'groupby', 'rename', 'reset_index', 'merge', 'drop', 'drop', 'head', 'array', 'unique', 'isin', 'isin', 'concat', 'to_csv', 'to_csv', 'to_csv', 'read_csv', 'read_csv', 'concat', 'select_dtypes', 'copy', 'groupby', 'rename', 'reset_index', 'merge', 'drop', 'array', 'unique', 'isin', 'isin', 'concat', 'to_csv', 'to_csv', 'to_csv', 'read_csv', 'read_csv', 'concat', 'select_dtypes', 'copy', 'get_dummies', 'array', 'unique', 'isin', 'isin', 'concat', 'to_csv', 'read_csv', 'read_csv', 'concat', 'select_dtypes', 'copy', 'factorize', 'array', 'unique', 'isin', 'isin', 'concat', 'to_csv', 'to_csv', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'warnings', 'gc', 'os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'time', 'warnings', 'lightgbm', 'os'] ['norm', 'StandardScaler', 'stats', 'mean_squared_error', 'SettingWithCopyWarning', 'GroupKFold', 'OneHotEncoder', 'KFold', 'OneHotEncoder']Dict:{'pandas': [], 'matplotlib': [], 'seaborn': [], 'numpy': ['mean', 'unique', 'isin', 'array', 'copy'], 'scipy': [], 'sklearn': [], 'warnings': [], '': [], 'gc': [], 'os': ['rename'], 'time': [], 'lightgbm': [], '=': [], 'pd': []} axis_0: 9, axis_1: 6
titanic-submission.py : ['join', 'reset_index', 'concat', 'drop', 'sum', 'isnull', 'read_csv', 'read_csv', 'read_csv', 'head', 'tail', 'info', 'describe', 'median', 'groupby', 'median', 'apply', 'groupby', 'fillna', 'median', 'fillna', 'median', 'groupby', 'fillna', 'apply', 'notnull', 'replace', 'replace', 'replace', 'value_counts', 'drop', 'qcut', 'qcut', 'map', 'transform', 'groupby', 'replace', 'replace', 'replace', 'unique', 'unique', 'unique', 'unique', 'median', 'groupby', 'median', 'groupby', 'mean', 'drop', 'drop', 'items', 'drop', 'sort_values', 'drop', 'astype', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'scipy', 'scipy.stats', 'statsmodels', 'numbers', 'pandas', 'matplotlib.pyplot', 'seaborn', 'sklearn', 'sklearn.model_selection', 'sklearn.metrics', 'xgboost', 'lightgbm', 'catboost', 'sklearn.preprocessing', 'sklearn.neighbors', 'sklearn.impute', 'warnings', 'missingno', 'string', 'catboost', 'optuna'] ['LabelEncoder', 'LogisticRegression', 'KNeighborsClassifier', 'GaussianNB', 'SVC', 'DecisionTreeClassifier', 'RandomForestClassifier', 'BaggingClassifier', 'GradientBoostingClassifier', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'unique', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'notnull', 'qcut'], 'os': ['replace'], 'scipy': ['describe'], 'statsmodels': [], 'numbers': [], 'matplotlib': [], 'seaborn': [], 'sklearn': ['apply'], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': [], 'warnings': [], 'missingno': [], 'string': [], 'optuna': []} axis_0: 0, axis_1: 5
model-validation-in-a-competition.py : ['read_csv', 'read_csv', 'sort_values', 'items', 'apply', 'astype', 'fillna', 'join', 'apply', 'astype', 'fillna', 'join', 'transform', 'astype', 'mean', 'to_csv', 'mean', 'std', 'apply', 'astype', 'astype', 'astype', 'astype', 'crosstab', 'apply', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'max', 'min', 'astype', 'astype', 'max', 'min', 'astype', 'astype', 'max', 'min', 'transform', 'apply', 'apply', 'apply', 'round', 'mean', 'round', 'std'] ['os', 'pickle', 'numpy', 'pandas', 'eli5', 'seaborn'] ['hstack', 'TfidfVectorizer', 'StandardScaler', 'TimeSeriesSplit', 'cross_val_score', 'GridSearchCV', 'roc_auc_score', 'LogisticRegression', 'pyplot', 'display_html']Dict:{'os': [], 'pickle': [], 'numpy': ['mean', 'max', 'round', 'min', 'std'], 'pandas': ['crosstab', 'read_csv'], 'scipy': [], 'eli5': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'IPython': []} axis_0: 0, axis_1: 5
the-plasticc-astronomy-classification-demo.py : ['abs', 'items', 'update', 'get', 'corr', 'bool', 'array', 'array', 'array', 'array', 'transform', 'cumsum', 'astype', 'sum'] ['os', 'numpy', 'matplotlib.pyplot', 'multiprocessing', 'cesium.featurize', 'sklearn', 'seaborn', 'warnings'] ['display', 'HTML', 'Counter', 'OrderedDict', 'itemgetter', 'Table', 'TimeSeries', 'tnrange', 'tqdm_notebook', 'StratifiedShuffleSplit', 'PCA', 'RandomForestClassifier', 'confusion_matrix']Dict:{'IPython': [], 'os': [], 'collections': ['items', 'update', 'get'], 'numpy': ['abs', 'sum', 'cumsum', 'array'], 'operator': [], 'matplotlib': ['get'], 'astropy': [], 'multiprocessing': [], 'cesium': [], 'tqdm': [], 'sklearn': [], '': [], 'seaborn': [], 'warnings': []} axis_0: 0, axis_1: 1
house-price-advanced-regression-techniques.py : ['read_csv', 'read_csv', 'concat', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'sort_values', 'head', 'sort_values', 'describe', 'isnull', 'isnull', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'sum', 'isnull', 'unique', 'fillna', 'sum', 'isnull', 'unique', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'head', 'sort_values', 'describe', 'isnull', 'abs', 'all', 'apply', 'apply', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'apply', 'boxplot', 'get_dummies', 'copy', 'apply', 'isnull', 'drop', 'abs', 'all', 'drop', 'mean', 'median', 'transform', 'head', 'sort_values', 'describe', 'isnull', 'fillna', 'fillna', 'median', 'fillna', 'median', 'fillna', 'fillna', 'median', 'fillna', 'fillna', 'median', 'fillna', 'fillna', 'median', 'fillna', 'median', 'to_csv', 'corr', 'head', 'sort_values', 'corrwith', 'corr', 'where', 'abs', 'sort_values', 'copy', 'drop', 'apply', 'apply', 'apply', 'apply', 'any', 'isin', 'map', 'apply', 'apply', 'copy', 'items', 'astype', 'items', 'drop', 'copy', 'copy', 'abs', 'copy', 'all', 'drop', 'mean', 'round', 'sort_values', 'head', 'sort_values', 'transform', 'drop', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['train_test_split', 'RandomForestRegressor', 'GradientBoostingRegressor', 'XGBRegressor', 'ElasticNet', 'Lasso', 'DecisionTreeRegressor', 'RandomizedSearchCV', 'StackingRegressor', 'cross_val_score', 'KFold', 'LinearRegression', 'StandardScaler', 'svm', 'ExtraTreesRegressor', 'stats', 'mean_squared_error', 'mean_absolute_error', 'r2_score', 'train_test_split']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'unique'], 'numpy': ['mean', 'median', 'any', 'abs', 'sum', 'all', 'where', 'round', 'unique', 'isin', 'copy'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': ['apply'], 'scipy': ['describe']} axis_0: 0, axis_1: 11
optiver-features-torch-dnn-infer-tabular.py : ['read_csv', 'dropna', 'reset_index', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'diff', 'groupby', 'diff', 'groupby', 'shift', 'groupby', 'pct_change', 'groupby', 'diff', 'groupby', 'replace', 'agg', 'agg', 'items', 'map', 'to_dict', 'median', 'groupby', 'std', 'groupby', 'min', 'groupby', 'max', 'groupby', 'median', 'groupby', 'std', 'groupby', 'min', 'groupby', 'max', 'groupby', 'astype', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'sum', 'sum', 'isnull', 'join', 'sum', 'sum', 'concat', 'reset_index', 'sort_values', 'tail', 'groupby', 'fillna', 'clip', 'mean', 'head', 'mean', 'round'] ['gc', 'os', 'time', 'warnings', 'joblib', 'numpy', 'pandas', 'torch', 'cudf', 'glob', 'optiver2023'] ['combinations', 'simplefilter', 'mean_absolute_error', 'KFold', 'TimeSeriesSplit', 'njit', 'prange', 'TabularModel']Dict:{'gc': [], '': [], '#': [], 'Garbage': [], 'collection': [], 'for': [], 'memory': [], 'management': [], 'os': ['replace'], 'Operating': [], 'system-related': [], 'functions': [], 'time': [], 'Time-related': [], 'warnings': [], 'Handling': [], 'itertools': [], 'joblib': [], 'For': [], 'saving': [], 'and': [], 'loading': [], 'models': [], 'numpy': ['mean', 'median', 'max', 'sum', 'round', 'min', 'clip', 'diff', 'std'], 'pandas': ['concat', 'eval', 'read_csv', 'isnull'], 'sklearn': [], 'numba': [], 'torch': ['mean', 'median', 'max', 'sum', 'concat', 'round', 'min', 'clip', 'diff', 'std'], 'glob': [], 'pytorch_tabular': [], 'optiver2023': []} axis_0: 1, axis_1: 2
eda-about-u-in.py : ['join', 'reset_index', 'reset_index', 'reset_index', 'join', 'read_csv', 'read_csv', 'read_csv', 'unique', 'reset_index', 'hist', 'hist', 'hist', 'hist', 'reset_index', 'isin', 'unique', 'hist', 'hist', 'hist', 'hist', 'isin', 'isin'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['tqdm']Dict:{'numpy': ['isin', 'unique'], 'pandas': ['unique', 'read_csv'], 'matplotlib': ['hist'], 'seaborn': [], 'tqdm': [], 'os': []} axis_0: 0, axis_1: 0
automated-model-tuning.py : ['read_csv', 'sample', 'select_dtypes', 'array', 'astype', 'drop', 'head', 'get', 'get', 'get', 'get', 'read_csv', 'copy', 'map', 'reset_index', 'sort_values', 'keys', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'astype', 'astype', 'head', 'copy', 'idxmax', 'copy', 'idxmax', 'value_counts', 'value_counts', 'read_csv', 'read_csv', 'array', 'astype', 'drop', 'drop', 'map', 'map', 'to_csv', 'to_csv'] ['pandas', 'numpy', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'csv', 'ast', 'json', 'altair'] ['KFold', 'train_test_split', 'roc_auc_score', 'STATUS_OK', 'default_timer', 'hp', 'sample', 'tpe', 'Trials', 'fmin']Dict:{'pandas': ['array', 'read_csv', 'value_counts'], 'numpy': ['array', 'copy'], 'lightgbm': [], 'sklearn': [], 'matplotlib': ['get'], 'seaborn': [], 'csv': [], 'hyperopt': [], 'timeit': [], 'ast': [], 'json': [], 'altair': []} axis_0: 0, axis_1: 0
extensive-eda-and-modelling-geotab-inertsection.py : ['join', 'read_csv', 'read_csv', 'head', 'sum', 'isnull', '_get_numeric_data', 'dropna', 'unique', 'tail', 'sort_values', 'mean', 'groupby', 'tail', 'sort_values', 'mean', 'groupby', 'tail', 'sort_values', 'mean', 'groupby', 'tail', 'sort_values', 'mean', 'groupby', 'tail', 'sort_values', 'mean', 'groupby', 'tail', 'sort_values', 'mean', 'groupby', 'tail', 'sort_values', 'mean', 'groupby', 'tail', 'sort_values', 'mean', 'groupby', 'tail', 'sort_values', 'mean', 'groupby', 'tail', 'sort_values', 'mean', 'groupby', 'tail', 'sort_values', 'mean', 'groupby', 'tail', 'sort_values', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'unique', 'mean', 'groupby', 'mean', 'groupby', 'sort_index', 'unique', 'mean', 'groupby', 'mean', 'groupby', 'sort_index', 'unique', 'mean', 'groupby', 'mean', 'groupby', 'sort_index', 'unique', 'mean', 'groupby', 'mean', 'groupby', 'sort_index', 'count', 'groupby', 'reset_index', 'count', 'groupby', 'reset_index', 'count', 'groupby', 'reset_index', 'count', 'groupby', 'reset_index', 'get_dummies', 'get_dummies', 'concat', 'concat', 'get_dummies', 'get_dummies', 'concat', 'concat', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'folium', 'os'] ['HeatMap', 'CatBoostRegressor']Dict:{'numpy': ['mean', 'sum', 'unique'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'unique'], 'matplotlib': [], 'folium': [], 'os': [], 'catboost': []} axis_0: 0, axis_1: 4
house-prices-feature-engeneering-eda.py : ['read_csv', 'read_csv', 'set_index', 'concat', 'drop', 'select_dtypes', 'copy', 'select_dtypes', 'unique', 'copy', 'median', 'groupby', 'copy', 'hist', 'skew', 'hist', 'corr', 'sort_values', 'nlargest', 'select_dtypes', 'select_dtypes', 'sum', 'isnull', 'round', 'sum', 'isnull', 'unique', 'drop', 'unique', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'sum', 'isnull', 'round', 'sum', 'isnull', 'unique', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'drop', 'merge', 'add_prefix', 'get_dummies', 'merge', 'drop', 'set_index', 'read_csv', 'read_csv', 'concat', 'rename', 'to_csv'] ['pandas', 'numpy', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'scipy.stats', 'xgboost'] ['ensemble', 'tree', 'linear_model', 'OrdinalEncoder', 'OneHotEncoder', 'StandardScaler', 'KNeighborsRegressor', 'StandardScaler', 'train_test_split', 'KFold', 'GridSearchCV', 'LinearRegression', 'ElasticNet', 'mean_absolute_error', 'mean_squared_error', 'mean_squared_log_error', 'RandomForestRegressor']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'unique', 'merge'], 'numpy': ['median', 'sum', 'round', 'unique', 'copy'], 'matplotlib': ['hist'], 'seaborn': [], 'scipy': ['skew'], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 5
riiid-eda-and-feature-importance.py : ['read_csv', 'describe', 'unique', 'sum', 'isnull', 'pivot_table', 'pivot_table', 'pivot_table', 'array', 'min', 'max', 'mean', 'squeeze', 'mode', 'skew', 'kurtosis', 'array', 'min', 'max', 'array', 'min', 'max', 'corr', 'mean', 'groupby', 'array', 'min', 'max', 'max', 'mean', 'drop', 'fillna', 'mean'] ['dabl', 'matplotlib.pyplot', 'seaborn', 'numpy', 'plotly.express', 'plotly.graph_objects', 'warnings', 'pandas', 'eli5'] ['RandomForestClassifier', 'PermutationImportance']Dict:{'dabl': [], 'matplotlib': [], 'seaborn': [], 'numpy': ['mean', 'squeeze', 'max', 'sum', 'min', 'unique', 'array'], 'plotly': [], 'warnings': [], 'pandas': ['read_csv', 'isnull', 'pivot_table', 'unique', 'array'], 'sklearn': [], 'eli5': []} axis_0: 0, axis_1: 1
kaggledays-sf-1-amazon-baseline.py : ['head', 'head', 'apply', 'unique', 'groupby', 'groupby', 'transpose', 'describe', 'transform', 'to_csv'] ['numpy', 'pandas', 'os', 'itertools'] ['amazon', 'LogisticRegression', 'OneHotEncoder', 'cross_validate']Dict:{'numpy': ['transpose', 'unique'], 'pandas': ['unique'], 'os': [], 'catboost': [], 'itertools': ['groupby'], 'sklearn': []} axis_0: 0, axis_1: 0
feature-engineering-w-xgboost-87-auc-in-10-mins.py : ['read_csv', 'read_csv', 'head', 'select_dtypes', 'select_dtypes', 'drop', 'head', 'drop', 'select_dtypes', 'select_dtypes', 'get_dummies', 'drop', 'sort_values', 'skew', 'concat', 'drop', 'copy', 'head', 'concat', 'read_csv', 'read_csv', 'head', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'drop', 'select_dtypes', 'select_dtypes', 'get_dummies', 'drop', 'copy', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'sklearn.metrics', 'statsmodels.api', 'pylab', 'warnings'] ['CalibratedClassifierCV', 'StandardScaler', 'RobustScaler', 'QuantileTransformer', 'boxcox', 'median_abs_deviation', 'train_test_split', 'roc_auc_score', 'log_loss', 'VarianceThreshold', 'mutual_info_classif', 'RFECV', 'SelectKBest', 'f_classif', 'Counter', 'confusion_matrix', 'RandomForestClassifier', 'XGBClassifier', 'XGBRFClassifier', 'model_selection', 'LogisticRegression', 'stats', 'norm', 'precision_recall_curve', 'auc', 'roc_curve']Dict:{'pandas': ['concat', 'get_dummies', 'read_csv'], 'numpy': ['copy'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'scipy': [], 'collections': ['copy'], 'xgboost': [], 'statsmodels': [], 'pylab': ['copy'], 'warnings': []} axis_0: 1, axis_1: 6
cluster-analysis-tsne-mds-isomap.py : ['astype', 'replace', 'astype', 'replace', 'astype', 'replace', 'astype', 'astype', 'query', 'astype', 'agg', 'groupby', 'join', 'fillna', 'drop', 'drop', 'drop', 'read_csv', 'info', 'fillna', 'fillna', 'info', 'query', 'drop', 'drop', 'transform', 'transform', 'transform', 'items', 'items'] ['numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'warnings', 'time'] ['LabelEncoder', 'RobustScaler', 'StandardScaler', 'MinMaxScaler', 'clone', 'TSNE', 'MDS', 'Isomap']Dict:{'numpy': ['info'], 'pandas': ['read_csv'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': [], 'time': []} axis_0: 0, axis_1: 6
tuning-automated-feature-engineering-exploratory.py : ['drop', 'reset_index', 'sort_values', 'read_csv', 'drop', 'reset_index', 'sort_values', 'read_csv', 'drop', 'reset_index', 'sort_values', 'read_csv', 'drop', 'reset_index', 'sort_values', 'read_csv', 'drop', 'reset_index', 'sort_values', 'read_csv', 'drop', 'reset_index', 'sort_values', 'read_csv', 'drop', 'reset_index', 'sort_values', 'read_csv', 'drop', 'reset_index', 'sort_values', 'read_csv', 'unique', 'copy', 'replace', 'to_timedelta', 'head', 'drop', 'dropna', 'to_timedelta', 'drop', 'to_timedelta', 'drop', 'to_timedelta', 'to_timedelta', 'drop', 'drop', 'to_timedelta', 'to_timedelta', 'drop', 'drop', 'head', 'hist', 'dropna', 'hist', 'dropna', 'value_counts', 'head', 'dropna', 'dropna', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'rename', 'head', 'dropna', 'isin', 'rename', 'mode', 'mode', 'sum', 'dropna', 'head', 'value_counts', 'value_counts', 'dropna', 'reset_index', 'sort_values', 'head', 'sample', 'align', 'to_csv', 'to_csv'] ['pandas', 'numpy', 'featuretools', 'warnings', 're', 'matplotlib.pyplot', 'seaborn', 'random'] ['Boolean', 'Datetime', 'DatetimeTimeIndex', 'Discrete', 'Index', 'Numeric', 'Variable', 'Id', 'AggregationPrimitive', 'make_agg_primitive', 'datetime', 'timedelta', 'Counter', 'selection']Dict:{'pandas': ['to_timedelta', 'unique', 'read_csv', 'value_counts'], 'numpy': ['isin', 'sum', 'unique', 'copy'], 'featuretools': [], 'warnings': [], '': [], 're': [], 'matplotlib': ['hist'], 'seaborn': [], 'datetime': [], 'collections': ['copy'], 'random': ['sample']} axis_0: 0, axis_1: 0
simple-end-to-end-ml-workflow-top-5-score.py : ['read_csv', 'read_csv', 'concat', 'info', 'head', 'describe', 'sum', 'isnull', 'corr', 'bool', 'value_counts', 'dropna', 'dropna', 'dropna', 'dropna', 'apply', 'fillna', 'mean', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'reset_index', 'drop', 'tail', 'hist', 'qcut', 'head', 'map', 'map', 'apply', 'value_counts', 'sum', 'isnull', 'describe', 'apply', 'groupby', 'fillna', 'median', 'hist', 'qcut', 'replace', 'replace', 'describe', 'fillna', 'mode', 'replace', 'head', 'fillna', 'map', 'value_counts', 'apply', 'head', 'drop', 'transform', 'mean', 'reset_index', 'sort_values', 'head', 'map', 'sort_values', 'transpose', 'sort_values', 'merge', 'merge', 'merge', 'merge', 'mean', 'reset_index', 'sort_values', 'sort_values', 'drop', 'drop', 'transform', 'mean', 'reset_index', 'sort_values', 'head', 'mean', 'reset_index', 'sort_values', 'head', 'mean', 'mean', 'mean', 'mean', 'concat', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'sys', 'warnings'] ['LabelEncoder', 'StandardScaler', 'KNeighborsClassifier', 'LogisticRegression', 'RandomForestClassifier', 'SVC', 'XGBClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'AdaBoostClassifier', 'GaussianProcessClassifier', 'GaussianNB', 'BaggingClassifier', 'VotingClassifier', 'cross_val_score', 'GridSearchCV', 'cross_val_predict', 'model_selection']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'qcut', 'merge'], 'numpy': ['transpose', 'median', 'mean', 'max', 'sum', 'min', 'info'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 'xgboost': ['apply'], 'sys': [], 'warnings': [], '=': [], 'pd': [], 'index=None)': [], 'ascending=False)': [], "'Importance',": [], "'Features',": [], "'Reds_r',": [], 'titles)': [], 'gbc_imp': [], "on='Feature')": [], 'importances': []} axis_0: 0, axis_1: 5
price-prediction-with-model-stacking-tensorflow.py : ['read_csv', 'read_csv', 'concat', 'nunique', 'sum', 'isna', 'value_counts', 'items', 'min', 'max', 'mean', 'median', 'to_html', 'to_html', 'copy', 'rename', 'copy', 'sort_values', 'keys', 'map', 'unique', 'head', 'corr', 'quantile', 'quantile', 'where', 'where', 'notna', 'corr', 'copy', 'join', 'drop', 'join', 'drop', 'value_counts', 'sum', 'isnull', 'fillna', 'sum', 'isnull', 'fillna', 'mean', 'pipe', 'pipe', 'pipe', 'pipe', 'head', 'corr', 'join', 'drop', 'select_dtypes', 'mean', 'std', 'astype', 'drop', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'head', 'copy', 'drop', 'map', 'drop', 'map', 'drop', 'drop', 'to_html', 'map', 'map', 'map', 'drop', 'map', 'map', 'map', 'drop', 'map', 'drop', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'head', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'head', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'to_html', 'head', 'get_dummies', 'drop', 'add_prefix', 'join', 'quantile', 'quantile', 'where', 'where', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'to_html', 'head', 'round', 'mean', 'round', 'mean', 'abs', 'keys', 'boxplot', 'boxplot', 'to_csv', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'head', 'pow'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'optuna', 'xgboost', 'warnings', 'tensorflow', 'math'] ['plot_tree', 'mean_squared_error', 'StackingRegressor', 'GridSearchCV', 'train_test_split', 'RepeatedKFold', 'KFold', 'cross_val_score', 'QuantileTransformer', 'display', 'HTML', 'StackingRegressor', 'GradientBoostingRegressor', 'RandomForestRegressor', 'linear_model', 'SVR', 'make_pipeline', 'StandardScaler', 'partial']Dict:{'numpy': ['mean', 'median', 'quantile', 'max', 'abs', 'sum', 'where', 'round', 'min', 'unique', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'notna', 'get_dummies', 'unique'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'optuna': [], 'xgboost': [], 'warnings': [], 'sklearn': [], 'IPython': [], 'tensorflow': ['pow', 'abs', 'concat', 'where', 'round', 'unique'], 'math': ['pow'], 'functools': []} axis_0: 0, axis_1: 1
lightgbm-fe-1-19.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'to_datetime', 'astype', 'astype', 'mean', 'groupby', 'isnull', 'apply', 'isnull', 'apply', 'astype', 'astype', 'astype', 'astype', 'drop', 'read_csv', 'merge', 'transform', 'read_csv', 'merge', 'to_datetime', 'astype', 'astype', 'apply', 'apply', 'astype', 'astype', 'astype', 'astype', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'lightgbm', 'gc'] ['LabelEncoder', 'mean_squared_error', 'KFold', 'StratifiedKFold', 'tqdm']Dict:{'numpy': ['mean'], 'pandas': ['merge', 'to_datetime', 'read_csv', 'isnull'], 'os': [], 'sklearn': [], 'lightgbm': [], 'tqdm': [], 'gc': []} axis_0: 0, axis_1: 0
ps-s3-ep5-eda-modeling.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'info', 'head', 'describe', 'head', 'describe', 'value_counts', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'corr', 'drop', 'corr', 'drop', 'copy', 'reset_index', 'drop', 'copy', 'reset_index', 'concat', 'copy', 'drop', 'drop', 'mean', 'mode', 'astype', 'head', 'to_csv', 'copy', 'drop', 'drop', 'mean', 'sort_values', 'apply', 'mean', 'mode', 'astype', 'head', 'to_csv', 'copy', 'drop', 'drop', 'mean', 'sort_values', 'apply', 'mean', 'mode', 'astype', 'head', 'to_csv', 'copy', 'mean', 'mode', 'astype', 'head', 'to_csv', 'mean', 'mode', 'astype', 'head', 'to_csv', 'copy', 'copy', 'copy', 'astype', 'astype', 'mean', 'mode', 'astype', 'head', 'to_csv'] ['pandas', 'numpy', 'scipy', 'matplotlib.pyplot', 'seaborn', 'plotly.express'] ['tqdm', 'partial', 'DecisionTreeClassifier', 'plot_tree', 'OneVsRestClassifier', 'MinMaxScaler', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'roc_auc_score', 'roc_curve', 'RocCurveDisplay', 'cohen_kappa_score', 'KNeighborsClassifier', 'RFE', 'LogisticRegression', 'RandomForestClassifier', 'SVC', 'LGBMClassifier', 'XGBClassifier', 'XGBRegressor', 'CatBoostClassifier']Dict:{'pandas': ['concat', 'read_csv', 'value_counts'], 'numpy': ['mean', 'info', 'copy'], 'tqdm': [], 'functools': [], 'scipy': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'xgboost': ['apply'], 'catboost': []} axis_0: 0, axis_1: 0
new-york-city-taxi-fare-prediction-eda-baseline.py : ['join', 'read_csv', 'info', 'nunique', 'to_csv', 'info', 'sum', 'isnull', 'describe', 'min', 'max', 'hist', 'mode', 'mode', 'head', 'sort_values', 'hist', 'mean', 'hist', 'min', 'max', 'describe', 'head', 'head', 'head', 'head', 'head', 'head', 'median', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'os', 'random', 'numpy', 'seaborn', 'matplotlib.pyplot'] ['train_test_split', 'mean_squared_error', 'LinearRegression', 'r2_score', 'Ridge', 'RandomForestRegressor', 'XGBRegressor']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'min', 'info'], 'pandas': ['read_csv', 'isnull'], 'seaborn': [], 'matplotlib': ['hist'], 'os': [], 'random': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 1
tps-feb-2022-02-feature-engineering.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'sum', 'isnull', 'mul', 'mean', 'isnull', 'concat', 'rename', 'sort_values', 'reset_index', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'copy', 'copy', 'drop', 'drop', 'sum', 'duplicated', 'value_counts', 'sum', 'all', 'copy', 'select_dtypes', 'mean', 'std', 'median', 'var', 'min', 'max', 'skew', 'kurt', 'quantile', 'quantile', 'quantile', 'sum', 'replace', 'fillna', 'dropna', 'copy', 'copy', 'info', 'head', 'filter', 'drop', 'drop', 'drop', 'sort_values', 'unique', 'sort_values', 'drop', 'drop', 'transform', 'transform', 'transform', 'transform', 'max', 'max', 'concat', 'concat', 'mean', 'std', 'sort_values', 'array', 'max', 'to_csv', 'drop', 'round', 'filter', 'filter', 'reset_index', 'sort_values', 'mean', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'replace', 'fillna', 'copy', 'copy', 'info', 'head', 'filter', 'drop', 'drop', 'drop', 'sort_values', 'drop', 'filter', 'reset_index', 'sort_values', 'mean', 'copy', 'copy', 'astype', 'round', 'astype', 'round', 'info', 'head', 'filter', 'drop', 'filter', 'reset_index', 'sort_values', 'mean', 'copy', 'copy', 'transform', 'info', 'head', 'filter', 'drop', 'filter', 'reset_index', 'sort_values', 'mean', 'copy', 'copy', 'transform', 'get_dummies', 'get_dummies', 'drop', 'drop', 'info', 'head', 'filter', 'drop', 'filter', 'reset_index', 'sort_values', 'mean'] ['warnings', 'random', 'os', 'gc', 'torch', 'math', 'sklearn.exceptions', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'joblib', 'xgboost', 'scikitplot'] ['train_test_split', 'KFold', 'StratifiedKFold', 'StandardScaler', 'MinMaxScaler', 'RobustScaler', 'MaxAbsScaler', 'QuantileTransformer', 'LabelEncoder', 'normalize', 'SimpleImputer', 'metrics', 'datetime', 'KMeans', 'PCA', 'KElbowVisualizer', 'SilhouetteVisualizer', 'compute_sample_weight', 'stats', 'hierarchy', 'factorial', 'mode', 'relativedelta']Dict:{'warnings': [], 'random': [], 'os': ['rename', 'replace'], 'gc': [], 'torch': ['mean', 'median', 'quantile', 'max', 'var', 'mul', 'sum', 'concat', 'all', 'round', 'min', 'unique', 'std'], 'math': [], 'sklearn': [], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'array'], '': [], 'numpy': ['mean', 'median', 'quantile', 'max', 'var', 'sum', 'array', 'all', 'round', 'min', 'unique', 'info', 'std', 'copy'], 'matplotlib': [], 'seaborn': [], 'joblib': [], 'xgboost': [], 'scikitplot': [], 'datetime': ['min', 'max', 'replace'], 'yellowbrick': [], 'scipy': []} axis_0: 2, axis_1: 37
nfl-player-contact-detection-helmet-track-ftrs.py : ['join', 'join', 'join', 'astype', 'astype', 'astype', 'astype', 'sort_index', 'concat', 'unique', 'value_counts', 'join', 'join', 'join', 'array', 'mean', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'reset_index', 'sort_values', 'rename', 'drop', 'merge', 'drop', 'rename', 'merge', 'astype', 'astype', 'astype', 'notnull', 'isna', 'isna', 'reset_index', 'astype', 'apply', 'apply', 'groupby', 'apply', 'groupby', 'read_csv', 'read_csv', 'rename', 'apply', 'groupby', 'rename', 'apply', 'groupby', 'astype', 'astype', 'astype', 'astype', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'astype', 'astype', 'astype', 'astype', 'merge', 'merge', 'rename', 'rename', 'abs', 'abs', 'to_csv', 'join', 'where', 'astype', 'to_csv', 'head'] ['os', 'torch', 'os', 'gc', 'subprocess', 'numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib.patches', 'cv2', 'xgboost', 'torch', 'cupy', 'cudf'] ['Video', 'display', 'minimize', 'glob', 'tqdm', 'GroupKFold', 'roc_auc_score', 'matthews_corrcoef', 'ForestInference']Dict:{'os': ['rename'], 'torch': ['mean', 'abs', 'concat', 'where', 'unique'], 'gc': [], 'subprocess': [], 'numpy': ['mean', 'abs', 'where', 'unique', 'array'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'notnull', 'array', 'merge'], 'matplotlib': [], 'IPython': [], 'scipy': [], 'cv2': [], 'glob': [], 'tqdm': [], 'sklearn': [], 'xgboost': []} axis_0: 1, axis_1: 2
tps-mar-2021-stacked-starter.py : ['read_csv', 'read_csv', 'unique', 'unique', 'transform', 'transform', 'transform', 'transform', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'warnings'] ['LeaveOneOutEncoder', 'LabelEncoder', 'LGBMClassifier', 'XGBClassifier', 'CatBoostClassifier', 'RidgeClassifier', 'SGDClassifier', 'CalibratedClassifierCV', 'enable_hist_gradient_boosting', 'HistGradientBoostingClassifier', 'StratifiedKFold', 'roc_auc_score', 'expit', 'CalibratedClassifierCV']Dict:{'pandas': ['unique', 'read_csv'], 'numpy': ['unique'], 'category_encoders': [], 'sklearn': [], 'warnings': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'scipy': []} axis_0: 0, axis_1: 0
riiid-answer-correctness-prediction-eda-modeling.py : ['read_csv', 'head', 'sum', 'isnull', 'reset_index', 'value_counts', 'astype', 'tail', 'sort_values', 'reset_index', 'value_counts', 'sort_values', 'reset_index', 'value_counts', 'astype', 'tail', 'sort_values', 'reset_index', 'value_counts', 'sort_values', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'astype', 'tail', 'sort_values', 'reset_index', 'value_counts', 'sort_values', 'reset_index', 'value_counts', 'sort_values', 'reset_index', 'value_counts', 'sort_values', 'unique', 'read_csv', 'head', 'sum', 'isnull', 'explode', 'merge', 'reset_index', 'count', 'groupby', 'drop', 'drop_duplicates', 'reset_index', 'value_counts', 'astype', 'sort_values', 'reset_index', 'value_counts', 'astype', 'sort_values', 'reset_index', 'value_counts', 'astype', 'sort_values', 'reset_index', 'explode', 'reset_index', 'value_counts', 'astype', 'tail', 'sort_values', 'read_csv', 'head', 'sum', 'isnull', 'reset_index', 'value_counts', 'astype', 'tail', 'sort_values', 'reset_index', 'value_counts', 'astype', 'sort_values', 'reset_index', 'value_counts', 'sort_values', 'read_csv', 'read_csv', 'keys', 'groupby', 'copy', 'agg', 'groupby', 'copy', 'agg', 'merge', 'merge', 'astype', 'fillna', 'fillna', 'replace', 'fillna', 'transform', 'transform', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'merge', 'merge', 'astype', 'fillna', 'fillna', 'transform', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype'] ['numpy', 'pandas', 'plotly.express', 'plotly.graph_objs', 'optuna', 'riiideducation'] ['make_subplots', 'roc_auc_score', 'train_test_split', 'LGBMClassifier', 'TPESampler', 'RFE', 'DecisionTreeClassifier']Dict:{'numpy': ['sum', 'unique', 'copy'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'unique', 'merge'], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'optuna': [], 'riiideducation': []} axis_0: 0, axis_1: 1
automl-beginner-easiest-titanic-solution-ever.py : ['read_csv', 'read_csv', 'apply', 'apply', 'map', 'map', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'to_csv'] ['pandas', 'numpy'] ['classification', 'blend_models', 'stack_models']Dict:{'pandas': ['read_csv'], 'pycaret': [], 'numpy': []} axis_0: 0, axis_1: 0
real-or-not-nlp-with-twitter-disaster-tweets.py : ['update', 'read_csv', 'read_csv', 'read_csv', 'head', 'sum', 'duplicated', 'value_counts', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'nunique', 'unique', 'unique', 'value_counts', 'head', 'value_counts', 'head', 'value_counts', 'head', 'sort_values', 'mean', 'groupby', 'head', 'sort_values', 'mean', 'groupby', 'nunique', 'nunique', 'value_counts', 'value_counts', 'isin', 'sort_values', 'mean', 'groupby', 'mean', 'fillna', 'fillna', 'apply', 'apply', 'sort_values', 'mean', 'groupby', 'mean', 'read_csv', 'astype', 'merge', 'to_csv', 'sub', 'sub', 'sub', 'join', 'join', 'join', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'sort_values', 'drop', 'corr', 'join', 'head', 'sort_values', 'join', 'head', 'sort_values', 'join', 'head', 'sort_values', 'join', 'map', 'join', 'sort_values', 'head', 'join', 'map', 'join', 'sort_values', 'head', 'join', 'add_suffix', 'transform', 'join', 'add_suffix', 'transform', 'transform', 'transform', 'transform', 'sort_values', 'dot', 'transpose', 'sum', 'mean', 'sort_values', 'dot', 'transpose', 'sum', 'mean', 'sort_values', 'dot', 'transpose', 'sum', 'transform', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'drop', 'drop', 'copy', 'to_csv', 'mean', 'sort_values', 'transpose', 'sort_values', 'transpose', 'insert', 'insert', 'mean', 'copy', 'to_csv', 'sort_values', 'transpose', 'sort_values', 'transpose', 'abs', 'head', 'sort_values', 'reset_index', 'rename_axis', 'value_counts'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'string', 're', 'category_encoders'] ['STOPWORDS', 'FreqDist', 'word_tokenize', 'bigrams', 'CountVectorizer', 'TfidfVectorizer', 'LogisticRegression', 'Pipeline', 'MinMaxScaler', 'f1_score', 'confusion_matrix', 'cross_val_score', 'ShuffleSplit', 'RFECV', 'GridSearchCV']Dict:{'numpy': ['transpose', 'mean', 'abs', 'sum', 'unique', 'dot', 'isin', 'insert', 'copy'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'unique', 'merge'], 'matplotlib': [], 'seaborn': [], 'string': [], 're': ['sub'], 'wordcloud': [], 'nltk': [], 'category_encoders': [], 'sklearn': ['transform']} axis_0: 3, axis_1: 0
house-prices-prediction-beginner-to-advanced.py : ['join', 'read_csv', 'read_csv', 'copy', 'copy', 'head', 'info', 'astype', 'drop', 'astype', 'drop', 'astype', 'astype', 'astype', 'astype', 'boxplot', 'head', 'boxplot', 'drop', 'boxplot', 'hist', 'transpose', 'describe', 'drop', 'drop', 'corr', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'count', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'count', 'value_counts', 'sum', 'isnull', 'sum', 'isnull', 'count', 'value_counts', 'sum', 'isnull', 'sum', 'isnull', 'count', 'drop', 'drop', 'fillna', 'fillna', 'sum', 'isnull', 'fillna', 'value_counts', 'sum', 'isnull', 'fillna', 'value_counts', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'count', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'count', 'sum', 'isnull', 'fillna', 'median', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'median', 'sum', 'isnull', 'boxplot', 'boxplot', 'median', 'groupby', 'sort_values', 'reset_index', 'astype', 'astype', 'drop', 'merge', 'concat', 'sort_values', 'mean', 'groupby', 'reset_index', 'merge', 'concat', 'head', 'drop', 'drop', 'head', 'head', 'corr', 'corr', 'drop', 'drop', 'corr', 'corr', 'corr', 'corr', 'drop', 'drop', 'drop', 'drop', 'corr', 'head', 'info', 'info', 'drop', 'copy', 'copy', 'copy', 'copy', 'get_dummies', 'get_dummies', 'head', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'sort_values', 'sort_values', 'head', 'head', 'head', 'head', 'concat', 'head', 'head', 'mean', 'drop', 'concat', 'head', 'mean', 'drop', 'head', 'mean', 'drop', 'mean', 'drop', 'head', 'mean', 'drop', 'mean', 'drop', 'head', 'mean', 'drop', 'mean', 'drop', 'copy', 'concat', 'rename', 'head', 'to_csv'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 'statsmodels.api', 'scipy.stats', 'pylab', 'statsmodels.api', 'statsmodels.formula.api', 'matplotlib.pyplot'] ['norm', 'StandardScaler', 'train_test_split', 'LinearRegression', 'mean_squared_error', 'linear_model', 'mean_squared_error']Dict:{'os': ['rename', 'replace'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'merge'], 'numpy': ['transpose', 'median', 'mean', 'sum', 'info', 'copy'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'warnings': [], 'scipy': ['describe'], 'statsmodels': [], 'pylab': ['transpose', 'mean', 'boxplot', 'median', 'sum', 'hist', 'info', 'copy'], 'sklearn': []} axis_0: 2, axis_1: 29
data-cleaning-eda-and-feature-engineering.py : ['read_csv', 'read_csv', 'head', 'head', 'sum', 'isnull', 'drop_duplicates', 'reset_index', 'read_csv', 'read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'min', 'max', 'mean', 'median', 'sort_index', 'value_counts', 'sum', 'sum', 'min', 'max', 'mean', 'median', 'hist', 'hist', 'sum', 'groupby', 'sum', 'groupby', 'min', 'max', 'mean', 'median', 'hist', 'hist', 'map', 'map', 'sort_index', 'value_counts', 'hist', 'hist', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'unique', 'unique', 'unique', 'array', 'agg', 'groupby', 'std', 'median', 'mean', 'std', 'fillna', 'merge', 'max', 'sum', 'isnull', 'head', 'astype', 'clip', 'sort_index', 'value_counts', 'agg', 'groupby', 'median', 'mean', 'std', 'median', 'mean', 'std', 'fillna', 'merge', 'max', 'sum', 'isnull', 'head', 'agg', 'groupby', 'median', 'mean', 'std', 'median', 'mean', 'std', 'fillna', 'merge', 'max', 'sum', 'isnull', 'head', 'astype', 'astype', 'head', 'head', 'head', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'info', 'isnull', 'max', 'sum', 'isnull', 'head', 'info', 'isnull', 'max', 'sum', 'isnull', 'head', 'max', 'head', 'concat', 'head', 'max', 'sum', 'isnull', 'info', 'nunique', 'groupby', 'cumsum', 'astype', 'fillna', 'map', 'fillna', 'nunique', 'groupby', 'cumsum', 'astype', 'fillna', 'map', 'fillna', 'nunique', 'groupby', 'cumsum', 'astype', 'fillna', 'map', 'fillna', 'sum', 'groupby', 'cumsum', 'astype', 'fillna', 'map', 'fillna', 'head', 'groupby', 'astype', 'fillna', 'cumsum', 'head', 'drop', 'reset_index', 'reset_index', 'head', 'head', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'gc', 'matplotlib'] ['check_output', 'pyplot', 'product', 'tqdm_notebook']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'array', 'min', 'unique', 'clip', 'info', 'std', 'cumsum'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'array', 'merge'], 'subprocess': [], 'gc': [], 'matplotlib': [], '': [], 'itertools': [], 'tqdm': []} axis_0: 0, axis_1: 1
explained-model-for-optiver-2023.py : ['__init__', 'unique', 'unique', 'unique', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'info', 'sum', 'memory_usage', 'info', 'info', 'read_csv', 'dropna', 'reset_index', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'map', 'pct_change', 'groupby', 'diff', 'groupby', 'diff', 'groupby', 'apply', 'diff', 'agg', 'agg', 'shift', 'groupby', 'pct_change', 'groupby', 'diff', 'groupby', 'eval', 'replace', 'items', 'map', 'to_dict', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'join', 'mean', 'copy', 'fillna', 'apply', 'groupby', 'fillna', 'unique', 'join', 'mean', 'sum', 'sum', 'concat', 'reset_index', 'sort_values', 'tail', 'groupby', 'mean', 'clip', 'mean', 'mean', 'round'] ['gc', 'os', 'time', 'warnings', 'joblib', 'lightgbm', 'numpy', 'pandas', 'polars', 'numpy', 'lightgbm', 'numpy', 'gc', 'tensorflow', 'tensorflow.keras.backend', 'tensorflow.keras.layers', 'optiver2023'] ['combinations', 'simplefilter', 'mean_absolute_error', 'KFold', 'TimeSeriesSplit', 'KFold', '_BaseKFold', 'indexable', '_num_samples', '_deprecate_positional_args', 'njit', 'prange', 'mean_absolute_error', 'KFold', 'l2', 'Callback', 'ReduceLROnPlateau', 'ModelCheckpoint', 'EarlyStopping']Dict:{'gc': [], '': [], 'os': ['replace'], 'time': [], 'warnings': [], 'itertools': [], 'joblib': [], 'lightgbm': [], 'numpy': ['mean', 'median', 'max', 'diff', 'sum', 'round', 'min', 'unique', 'clip', 'info', 'std', 'copy'], 'pandas': ['concat', 'eval', 'unique', 'read_csv'], 'sklearn': ['__init__'], 'polars': ['mean', 'median', 'map', 'max', 'read_csv', 'sum', 'concat', 'apply', 'tail', 'min', 'std'], 'numba': []} axis_0: 1, axis_1: 2
features-based-on-nulls-and-lgbm-model.py : ['read_csv', 'read_csv', 'sum', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'reset_index', 'value_counts', 'value_counts', 'apply', 'round', 'reset_index', 'unique', 'groupby', 'reset_index', 'sort_values', 'apply', 'count', 'value_counts', 'round', 'mul', 'value_counts', 'apply', 'count', 'round', 'mul', 'value_counts', 'round', 'mul', 'value_counts', 'mean', 'std', 'mean', 'std', 'to_datetime', 'to_datetime', 'mean', 'to_datetime', 'to_datetime', 'mean', 'drop', 'drop', 'unique', 'unique', 'notnull', 'notnull', 'transform', 'notnull', 'notnull', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'read_csv', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'gc', 'os', 'time', 'sys', 'datetime', 'lightgbm'] ['LabelEncoder', 'KFold', 'StratifiedKFold', 'RepeatedKFold', 'accuracy_score', 'classification_report', 'roc_auc_score']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'notnull', 'to_datetime'], 'matplotlib': [], 'seaborn': [], 'numpy': ['mean', 'sum', 'round', 'unique', 'isin', 'std'], 'gc': [], 'os': [], 'time': [], 'sys': [], 'datetime': [], 'sklearn': [], 'lightgbm': []} axis_0: 1, axis_1: 11
simple-stacking-approach-top-12-score.py : ['read_csv', 'read_csv', 'info', 'info', 'head', 'drop', 'drop', 'drop', 'reset_index', 'concat', 'drop', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'corr', 'bool', 'fillna', 'fillna', 'fillna', 'mode', 'apply', 'groupby', 'fillna', 'median', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'astype', 'info', 'sort_values', 'apply', 'dropna', 'head', 'select_dtypes', 'drop', 'transform', 'get_dummies', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'reset_index', 'sort_values', 'head', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'lightgbm', 'sys', 'warnings'] ['stats', 'norm', 'skew', 'mode', 'boxcox1p', 'LabelEncoder', 'Lasso', 'Ridge', 'RidgeCV', 'ElasticNet', 'make_pipeline', 'RobustScaler', 'BaseEstimator', 'TransformerMixin', 'RegressorMixin', 'clone', 'KFold', 'cross_val_score', 'train_test_split', 'mean_squared_error', 'GridSearchCV', 'LinearRegression', 'GradientBoostingRegressor', 'KernelRidge', 'Pool', 'CatBoostRegressor', 'cv']Dict:{'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'numpy': ['mean', 'median', 'info', 'sum'], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'statistics': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'sys': [], 'warnings': []} axis_0: 0, axis_1: 2
youtube-feature-engineering-for-beginners.py : ['read_parquet', 'read_parquet', 'read_csv', 'reset_index', 'concat', 'drop', 'head', 'fillna', 'apply', 'to_dict', 'mean', 'groupby', 'map', 'fillna', 'to_dict', 'mean', 'groupby', 'map', 'fillna', 'info', 'to_datetime', 'tz_localize', 'hist', 'apply', 'to_dict', 'mean', 'groupby', 'map', 'fillna', 'to_dict', 'mean', 'groupby', 'map', 'fillna', 'hist', 'head', 'mean', 'groupby', 'reset_index', 'reset_index', 'sort_values', 'mean', 'groupby', 'to_dict', 'mean', 'groupby', 'map', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'add', 'count', 'count', 'count', 'count', 'add', 'count', 'unique', 'unique', 'mean', 'rename', 'reset_index', 'reset_index', 'sort_values', 'to_dict', 'mean', 'groupby', 'map', 'fillna', 'add', 'count', 'reset_index', 'rename', 'sort_values', 'head', 'head', 'count', 'apply', 'hist', 'mean', 'keys', 'rename', 'reset_index', 'sort_values', 'corrwith', 'drop', 'select_dtypes', 'drop', 'select_dtypes', 'notnull', 'drop', 'isnull', 'drop', 'transform', 'read_parquet', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'statistics'] ['PowerTransformer', 'LabelEncoder', 'Counter', 'PowerTransformer', 'StandardScaler', 'train_test_split', 'Ridge', 'KNeighborsRegressor', 'BayesianRidge', 'DecisionTreeRegressor', 'SVR', 'RandomForestRegressor', 'mean_absolute_error']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'read_parquet', 'unique', 'notnull', 'to_datetime'], 'numpy': ['mean', 'info', 'unique', 'add'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 'collections': ['keys'], 'statistics': ['mean', 'groupby']} axis_0: 0, axis_1: 1
use-tf-decision-forests-to-submit-to-tds-sep-22.py : ['join', 'drop', 'read_csv', 'drop', 'read_csv', 'head', 'head', 'describe', 'isnull', 'keys', 'keys', 'read_csv', 'to_csv', 'head', 'read_csv', 'to_csv', 'head'] ['os', 'numpy', 'pandas', 'matplotlib.pyplot', 'plotly.express', 'plotly.graph_objects', 'seaborn', 'tensorflow', 'tensorflow_decision_forests'] ['ProfileReport']Dict:{'os': [], 'numpy': [], 'pandas': ['read_csv', 'isnull'], 'matplotlib': [], 'plotly': [], 'seaborn': [], 'tensorflow': [], 'tensorflow_decision_forests': [], 'pandas_profiling': []} axis_0: 0, axis_1: 2
minimal-lstm-nb-svm-baseline-ensemble.py : ['read_csv', 'read_csv', 'copy', 'to_csv'] ['numpy', 'pandas'] []Dict:{'numpy': ['copy']} axis_0: 0, axis_1: 0
zzzs-ensemble-model-cmi.py : ['min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'agg', 'rolling', 'agg', 'rolling', 'astype', 'mean', 'rolling', 'sort_index', 'sort_index', 'diff', 'astype', 'apply', 'to_datetime', 'tz_localize', 'sort_values', 'set_index', 'clip', 'agg', 'rolling', 'astype', 'agg', 'rolling', 'astype', 'agg', 'rolling', 'astype', 'agg', 'rolling', 'agg', 'rolling', 'astype', 'astype', 'astype', 'abs', 'diff', 'astype', 'agg', 'rolling', 'astype', 'agg', 'rolling', 'agg', 'rolling', 'astype', 'agg', 'rolling', 'astype', 'median', 'rolling', 'abs', 'astype', 'min', 'rolling', 'astype', 'max', 'rolling', 'abs', 'diff', 'astype', 'mean', 'rolling', 'abs', 'diff', 'astype', 'max', 'rolling', 'reset_index', 'dropna', 'read_parquet', 'astype', 'read_parquet', 'unique', 'drop', 'value_counts', 'stack', 'mean', 'stack', 'median', 'round', 'head', 'sort_values', 'sort_values', 'sort_values', 'mean', 'concat', 'head', 'sort_values', 'read_parquet', 'drop', 'median', 'rolling', 'ffill', 'bfill', 'mean', 'rolling', 'diff', 'replace', 'dropna', 'diff', 'sort_values', 'astype', 'agg', 'groupby', 'agg', 'groupby', 'sort_values', 'concat', 'concat', 'reset_index', 'to_csv'] ['numpy', 'pandas', 'numba', 'xgboost', 'lightgbm', 'gc', 'plotly.express', 'warnings'] ['groupby', 'train_test_split', 'is_datetime64_ns_dtype', 'RandomForestClassifier', 'GradientBoostingClassifier', 'MinMaxScaler', 'RandomUnderSampler', 'Parallel', 'delayed', 'score', 'simplefilter']Dict:{'numpy': ['mean', 'median', 'stack', 'max', 'abs', 'round', 'min', 'unique', 'clip', 'diff'], 'pandas': [], 'itertools': [], 'sklearn': [], 'numba': [], 'xgboost': [], 'lightgbm': [], 'imblearn': [], 'joblib': [], 'gc': [], 'plotly': [], 'metric': [], 'warnings': []} axis_0: 2, axis_1: 1
complete-eda-and-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'info', 'copy', 'drop', 'select_dtypes', 'copy', 'select_dtypes', 'dropna', 'dropna', 'corr', 'corr', 'sort_values', 'dropna', 'drop', 'drop', 'reset_index', 'head', 'sort_values', 'sum', 'isnull', 'drop', 'drop', 'select_dtypes', 'value_counts', 'drop', 'select_dtypes', 'value_counts', 'drop', 'sum', 'isnull', 'copy', 'drop', 'select_dtypes', 'boxplot', 'dropna', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'sum', 'sum', 'isnull', 'sum', 'isnull', 'sort_values', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'fillna', 'transform', 'groupby', 'fillna', 'mode', 'transform', 'groupby', 'fillna', 'median', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'apply', 'map', 'map', 'map', 'map', 'get_dummies'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] []Dict:{'numpy': ['median', 'info', 'sum', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'warnings': []} axis_0: 0, axis_1: 10
m5-lgbm-fe.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'notnull', 'pipe', 'pipe', 'pipe', 'melt', 'isin', 'isin', 'drop_duplicates', 'replace', 'merge', 'merge', 'replace', 'melt', 'melt', 'concat', 'drop', 'merge', 'drop', 'merge', 'fillna', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'std', 'rolling', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'transform', 'groupby', 'skew', 'rolling', 'shift', 'transform', 'groupby', 'kurt', 'rolling', 'shift', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'max', 'rolling', 'shift', 'transform', 'groupby', 'std', 'rolling', 'transform', 'groupby', 'std', 'rolling', 'drop', 'to_datetime', 'astype', 'astype', 'isin', 'reset_index', 'pivot', 'isin', 'merge', 'concat', 'to_csv'] ['pandas', 'numpy', 'dask.dataframe', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'gc', 'joblib', 'warnings'] ['preprocessing', 'metrics']Dict:{'pandas': ['read_csv', 'melt', 'concat', 'notnull', 'pivot', 'merge', 'to_datetime'], 'numpy': ['mean', 'max', 'sum', 'min', 'isin', 'std'], 'dask': ['rolling', 'read_csv', 'melt', 'concat', 'to_csv', 'merge', 'to_datetime', 'groupby'], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'sklearn': [], 'gc': [], 'joblib': [], 'warnings': []} axis_0: 0, axis_1: 0
features-which-distinguish-train-from-test.py : ['read_csv', 'read_csv', 'to_datetime', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'factorize', 'concat', 'drop', 'reset_index', 'sort_values', 'mean', 'groupby', 'sort_values', 'concat', 'drop', 'reset_index', 'sort_values', 'mean', 'groupby', 'sort_values'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'time', 'warnings', 'lightgbm'] ['mean_squared_error', 'SettingWithCopyWarning', 'KFold', 'GridSearchCV']Dict:{'os': [], 'pandas': [], 'numpy': ['mean'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'gc': [], 'time': [], 'warnings': [], 'lightgbm': []} axis_0: 2, axis_1: 2
what-is-mfcc.py : ['abs', 'max', 'max', 'max', 'abs', 'max'] ['soundfile', 'matplotlib.pyplot', 'librosa', 'numpy'] ['Audio', 'specshow']Dict:{'soundfile': [], 'matplotlib': [], 'IPython': [], 'librosa': [], 'numpy': ['abs', 'max']} axis_0: 0, axis_1: 0
titanic-rf.py : ['read_csv', 'read_csv', 'head', 'sum', 'isnull', 'fillna', 'mean', 'sum', 'isnull', 'unique', 'apply', 'head', 'drop', 'fillna', 'head', 'get_dummies', 'head', 'sum', 'isnull', 'apply', 'head', 'drop', 'fillna', 'fillna', 'mean', 'sum', 'isnull', 'fillna', 'mean', 'get_dummies', 'head', 'unique', 'unique', 'astype', 'to_csv'] ['numpy', 'matplotlib.pyplot', 'pandas', 'seaborn'] ['RandomForestClassifier', 'train_test_split', 'AdaBoostClassifier', 'make_classification', 'tree']Dict:{'numpy': ['mean', 'sum', 'unique'], 'matplotlib': [], 'pandas': ['get_dummies', 'unique', 'read_csv', 'isnull'], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 2
bridging-gaps-linking-sectors-through-pca.py : ['read_csv', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'max', 'groupby', 'min', 'groupby', 'min', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'first', 'groupby', 'first', 'groupby', 'last', 'groupby', 'last', 'groupby', 'dropna', 'read_csv', 'pivot_table', 'reset_index', 'set_index', 'fillna', 'fillna', 'sum', 'set_index', 'reset_index', 'merge', 'tail', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'where', 'astype', 'eval', 'max', 'min', 'sum', 'get_dummies', 'rename', 'concat', 'read_csv', 'drop', 'tail', 'merge', 'drop', 'tail', 'drop', 'min', 'max', 'mean'] ['pandas', 'numpy', 'lightgbm', 'gc', 'warnings', 'joblib', 'os', 'pandas', 'numpy'] ['combinations', 'KFold', 'mean_absolute_error', 'simplefilter', 'StratifiedKFold', 'Counter', 'GroupKFold']Dict:{'pandas': ['read_csv', 'eval', 'pivot_table', 'concat', 'get_dummies', 'merge'], 'numpy': ['mean', 'median', 'max', 'sum', 'where', 'min', 'std'], 'lightgbm': [], 'gc': [], 'itertools': [], 'warnings': [], 'sklearn': [], 'joblib': [], 'os': ['rename'], 'collections': []} axis_0: 0, axis_1: 5
house-prices-permutation-importance-example.py : ['read_csv', 'fillna', 'mean'] ['pandas', 'numpy', 'eli5'] ['RandomForestRegressor', 'PermutationImportance', 'RFE', 'itemgetter']Dict:{'pandas': ['read_csv'], '': [], 'numpy': ['mean'], 'sklearn': [], 'eli5': [], 'operator': []} axis_0: 0, axis_1: 0
2-deberta-1-roberta-analysis-and-using.py : ['eval', 'items', 'where', 'where', 'read_csv', 'read_csv', 'head', 'items', '__init__', 'copy', 'read_csv', 'reset_index', 'merge', 'sort_values', 'drop', 'map', 'apply', 'head', 'head', 'items', '__init__', 'sum', 'copy', 'map', 'head', 'replace', 'head', 'items', '__init__', 'update', 'mean', 'copy', 'map', 'head', 'replace', 'head', 'concat', 'assign', 'head', 'mean', 'mean', 'mean', 'mean', 'assign', 'head', 'mean', 'mean', 'head', 'head', 'to_csv'] ['os', 'gc', 'random', 'numpy', 'pandas', 'seaborn', 'torch', 'torch.nn', 'torch.nn.functional', 'warnings'] ['MinMaxScaler', 'dataclass', 'tqdm', 'DataLoader', 'Dataset', 'AutoModelForSequenceClassification', 'AutoTokenizer', 'AutoConfig', 'AutoModel']Dict:{'os': ['replace'], 'gc': [], 'random': [], 'numpy': ['where', 'mean', 'sum', 'copy'], 'pandas': ['concat', 'eval', 'merge', 'read_csv'], 'seaborn': [], 'sklearn': ['__init__'], 'dataclasses': ['__init__'], 'tqdm': ['update', '__init__'], 'torch': ['__init__'], 'transformers': [], 'warnings': [], '': []} axis_0: 0, axis_1: 20
house-pricing-predictions.py : ['join', 'read_csv', 'read_csv', 'head', 'head', 'drop', 'drop', 'skew', 'kurt', 'skew', 'kurt', 'drop', 'select_dtypes', 'boxplot', 'drop', 'head', 'drop', 'reset_index', 'concat', 'head', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sort_values', 'drop', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'select_dtypes', 'apply', 'apply', 'apply', 'astype', 'astype', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'transform', 'sort_values', 'apply', 'dropna', 'head', 'select_dtypes', 'dropna', 'get_dummies', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'reset_index', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'warnings', 'matplotlib.pyplot', 'seaborn', 'numpy', 'pandas', 'os'] ['SimpleImputer', 'train_test_split', 'ColumnTransformer', 'Pipeline', 'OneHotEncoder', 'RandomForestRegressor', 'mean_absolute_error', 'XGBRegressor', 'LassoCV', 'metrics', 'GradientBoostingRegressor', 'make_pipeline', 'KFold', 'GridSearchCV', 'cross_val_score', 'stats', 'norm', 'skew', 'boxcox1p', 'boxcox_normmax', 'LabelEncoder', 'datetime', 'RobustScaler', 'KFold', 'cross_val_score', 'mean_squared_error', 'make_scorer', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'make_pipeline', 'LinearRegression', 'KernelRidge', 'GradientBoostingRegressor', 'SVR', 'StackingCVRegressor', 'LinearRegression', 'XGBRegressor', 'LGBMRegressor']Dict:{'numpy': ['mean', 'median', 'std', 'sum'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'sklearn': [], 'xgboost': ['apply'], 'warnings': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': [], 'os': [], 'datetime': [], 'mlxtend': [], 'lightgbm': []} axis_0: 0, axis_1: 4
don-t-overfit-i-try.py : ['head', 'sort_values', 'sum', 'isnull', 'value_counts', 'drop', 'drop', 'reset_index', 'head', 'nunique', 'drop', 'abs', 'corr', 'where', 'astype', 'bool', 'factorize', 'select_dtypes', 'drop', 'cumsum', 'reset_index', 'notnull', 'reset_index', 'drop', 'isnull', 'drop', 'pop', 'pop', 'value_counts', 'concat', 'get_dummies', 'concat', 'get_dummies', 'clip', 'clip', 'to_csv', 'sum', 'hist', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'os', 'sys'] ['load_boston', 'RFE', 'RandomForestClassifier', 'preprocessing', 'PCA', 'KMeans', 'KNeighborsClassifier', 'LogisticRegression', 'Lasso', 'RepeatedStratifiedKFold', 'RFE', 'RFECV', 'metrics']Dict:{'pandas': ['isnull', 'concat', 'value_counts', 'factorize', 'get_dummies', 'notnull'], 'numpy': ['abs', 'sum', 'where', 'clip', 'cumsum'], 'matplotlib': ['hist'], 'seaborn': [], 'gc,os,sys': [], 'sklearn': [], 'imblearn': []} axis_0: 0, axis_1: 11
titanic-eda-model-custompipelines.py : ['read_csv', 'read_csv', 'drop', 'info', 'describe', 'value_counts', 'sort_index', 'agg', 'groupby', 'sum', 'agg', 'groupby', 'sum', 'sum', 'agg', 'groupby', 'sum', 'sum', 'boxplot', 'agg', 'groupby', 'median', 'mean', 'sum', 'isna', 'agg', 'groupby', 'assign', 'median', 'mean', 'sum', 'copy', 'copy', 'apply', 'isin', 'fillna', 'fillna', 'drop', 'reset_index', 'median', 'groupby', 'merge', 'fillna', 'drop', 'reset_index', 'median', 'groupby', 'merge', 'fillna', 'drop', 'qcut', 'qcut', 'copy', 'cut', 'cut', 'transform', 'sum', 'isna', 'describe', 'transform', 'sum', 'isna', 'keys', 'items', 'concat', 'head', 'read_csv', 'tail', 'read_csv', 'to_csv', 'reset_index'] ['numpy', 'pandas', 'regex', 'matplotlib.pyplot', 'seaborn'] ['mode', 'sqldf', 'filterwarnings', 'colored', 'tqdm', 'DataFrameMapper', 'gen_features', 'make_column_selector', 'BaseEstimator', 'TransformerMixin', 'make_pipeline', 'Pipeline', 'FunctionTransformer', 'LabelEncoder', 'StandardScaler', 'RobustScaler', 'OrdinalEncoder', 'SimpleImputer', 'KFold', 'GridSearchCV', 'GradientBoostingClassifier', 'RandomForestClassifier', 'StackingClassifier', 'XGBClassifier', 'LGBMClassifier', 'SVC', 'DecisionTreeClassifier', 'LogisticRegression', 'precision_score', 'recall_score', 'accuracy_score', 'roc_auc_score', 'f1_score', 'classification_report', 'confusion_matrix']Dict:{'numpy': ['mean', 'median', 'sum', 'isin', 'info', 'copy'], 'scipy': [], 'pandas': ['isna', 'read_csv', 'cut', 'concat', 'value_counts', 'qcut', 'merge'], 'pandasql': [], 'regex': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'warnings': [], 'termcolor': [], 'tqdm': [], 'sklearn_pandas': [], 'sklearn': [], 'xgboost': [], 'lightgbm': []} axis_0: 2, axis_1: 3
fpe-no-fancy-stuff.py : ['read_csv', 'apply', 'head', 'read_csv', 'apply', 'head', 'map', 'value_counts', 'drop', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'replace', 'join', 'get', 'sub', 'sub', 'sub', 'replace', 'array', 'sum', 'sum', 'mean', 'copy', 'drop_duplicates', 'head', 'copy', 'drop_duplicates', 'head', 'copy', 'drop_duplicates', 'head', 'copy', 'drop_duplicates', 'head', 'sub', 'set_index', 'array', 'merge', 'head', 'set_index', 'array', 'merge', 'head', 'set_index', 'array', 'merge', 'head', 'set_index', 'array', 'merge', 'head', 'array', 'merge', 'drop', 'head', 'array', 'merge', 'drop', 'head', 'array', 'merge', 'drop', 'head', 'array', 'merge', 'drop', 'head', 'merge', 'merge', 'head', 'merge', 'merge', 'head', 'apply', 'head', 'apply', 'head', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'head', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'head', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'head', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'head', 'transform', 'transform', 'head', 'drop', 'drop', 'fillna', 'fillna', 'transform', 'transform', 'copy', 'copy', 'read_csv', 'to_csv', 'head'] ['gc', 'pickle', 'numpy', 'pandas', 're', 'nltk', 'string', 'lightgbm'] ['tqdm', 'TextBlob', 'Counter', 'wordnet', 'stopwords', 'WordNetLemmatizer', 'log_loss', 'LabelEncoder', 'StratifiedKFold', 'QuantileTransformer', 'XGBClassifier', 'LogisticRegression']Dict:{'gc': [], 'pickle': [], 'numpy': ['mean', 'array', 'sum', 'copy'], 'pandas': ['array', 'merge', 'read_csv', 'value_counts'], 'tqdm': [], 're': ['sub'], 'nltk': [], 'string': [], 'textblob': [], 'collections': ['get', 'copy'], 'sklearn': [], 'lightgbm': [], 'xgboost': ['apply']} axis_0: 1, axis_1: 9
top-6-housing-with-xgboost.py : ['join', 'read_csv', 'read_csv', 'dropna', 'drop', 'nunique', 'copy', 'copy', 'copy', 'to_csv', 'read_csv', 'dropna', 'drop', 'head', 'head'] ['numpy', 'pandas', 'os'] ['XGBRegressor', 'Pipeline', 'SimpleImputer', 'OneHotEncoder', 'mean_absolute_error', 'train_test_split', 'GridSearchCV', 'ColumnTransformer', 'RandomForestRegressor', 'cross_val_score', 'GridSearchCV', 'SimpleImputer']Dict:{'numpy': ['copy'], 'pandas': ['read_csv'], 'os': [], 'xgboost': [], 'sklearn': []} axis_0: 2, axis_1: 2
pandas-slow-xyz-fast-parallel-geometry-features.py : ['read_csv', 'read_csv', 'read_csv', 'unique', 'mean', 'mean', 'dot', 'isin', 'nunique', 'replace', 'array', 'mean', 'dot', 'array', 'dot', 'dot', 'array', 'dot', 'groupby', 'head', 'sort_values', 'head', 'sort_values', 'groupby', 'get', 'concat', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'math', 'warnings', 'ase', 'ase.visualize', 'multiprocessing'] ['tqdm', 'tqdm_notebook', 'svd', 'norm', 'Pool', 'Atoms']Dict:{'numpy': [], 'pandas': ['concat', 'array', 'unique', 'read_csv'], 'tqdm': [], 'matplotlib': ['get'], 'math': [], 'multiprocessing': [], 'warnings': [], 'ase': []} axis_0: 0, axis_1: 2
optiver-gpu-speedsup-feature-eng-torch-dnn.py : ['read_csv', 'dropna', 'reset_index', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'diff', 'groupby', 'diff', 'groupby', 'shift', 'groupby', 'pct_change', 'groupby', 'diff', 'groupby', 'replace', 'agg', 'agg', 'items', 'map', 'to_dict', 'median', 'groupby', 'std', 'groupby', 'min', 'groupby', 'max', 'groupby', 'median', 'groupby', 'std', 'groupby', 'min', 'groupby', 'max', 'groupby', 'astype', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'sum', 'sum', 'isnull', 'hist', 'min', 'max', 'sample', 'sample', 'join', 'mean', 'sample', 'sample', 'join', 'sum', 'sum', 'concat', 'reset_index', 'sort_values', 'tail', 'groupby', 'fillna', 'clip', 'mean', 'head', 'mean', 'round'] ['gc', 'os', 'time', 'warnings', 'joblib', 'numpy', 'pandas', 'torch', 'cudf', 'optiver2023'] ['combinations', 'simplefilter', 'mean_absolute_error', 'KFold', 'TimeSeriesSplit', 'njit', 'prange', 'TabularModel', 'DataConfig', 'OptimizerConfig', 'TrainerConfig', 'ExperimentConfig', 'FTTransformerConfig', 'TabTransformerConfig', 'mean_absolute_error']Dict:{'gc': [], '': [], '#': [], 'Garbage': [], 'collection': [], 'for': [], 'memory': [], 'management': [], 'os': ['replace'], 'Operating': [], 'system-related': [], 'functions': [], 'time': [], 'Time-related': [], 'warnings': [], 'Handling': [], 'itertools': [], 'joblib': [], 'For': [], 'saving': [], 'and': [], 'loading': [], 'models': [], 'numpy': ['mean', 'median', 'max', 'sum', 'round', 'min', 'clip', 'diff', 'std'], 'pandas': ['concat', 'eval', 'read_csv', 'isnull'], 'sklearn': [], 'numba': [], 'torch': ['mean', 'median', 'max', 'sum', 'concat', 'round', 'min', 'clip', 'diff', 'std'], 'pytorch_tabular': [], 'optiver2023': []} axis_0: 1, axis_1: 2
sales-time-series-eda-feature-engineering.py : ['read_csv', 'head', 'read_csv', 'concat', 'head', 'tail', 'concat', 'read_csv', 'head', 'read_csv', 'tail', 'read_csv', 'tail', 'read_csv', 'tail', 'replace', 'set_index', 'sum', 'isnull', 'max', 'skew', 'kurt', 'set_index', 'mean', 'rolling', 'sum', 'groupby', 'mean', 'rolling', 'mean', 'rolling', 'unique', 'mean', 'groupby', 'mean', 'groupby', 'unique', 'mean', 'groupby', 'mean', 'groupby', 'unique', 'mean', 'groupby', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'astype', 'sort_values', 'sum', 'groupby', 'sum', 'corr', 'set_index', 'query', 'drop', 'sum', 'groupby', 'reset_index', 'set_index', 'set_index', 'reset_index', 'shift', 'head', 'corr', 'drop', 'set_index', 'rename', 'first', 'groupby', 'join', 'join', 'fillna', 'head', 'drop', 'notnull', 'drop', 'get_dummies', 'astype', 'get_dummies', 'set_index', 'reset_index', 'unstack', 'head', 'head', 'mean', 'mean', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'mean', 'groupby', 'join', 'drop', 'first', 'groupby', 'join', 'fillna', 'drop', 'head', 'head', 'reset_index', 'stack', 'copy', 'reset_index', 'stack', 'clip', 'reset_index', 'stack', 'copy', 'reset_index', 'stack', 'clip', 'reset_index', 'stack', 'copy', 'reset_index', 'stack', 'clip', 'reset_index', 'stack', 'copy', 'reset_index', 'stack', 'clip', 'reset_index', 'stack', 'copy', 'reset_index', 'stack', 'clip'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'warnings', 'math', 'datetime', 'xgboost'] ['norm', 'linregress', 'preprocessing', 'stats', 'periodogram', 'CalendarFourier', 'DeterministicProcess', 'LinearRegression', 'metrics', 'train_test_split', 'Ridge', 'mean_squared_log_error', 'LinearRegression', 'mean_squared_log_error', 'SVR', 'MultiOutputRegressor', 'RandomForestRegressor', 'MultiOutputRegressor']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'unique', 'notnull'], 'matplotlib': [], 'seaborn': [], 'numpy': ['mean', 'stack', 'max', 'sum', 'unique', 'clip', 'copy'], 'scipy': [], 'sklearn': [], 'warnings': [], 'math': [], 'datetime': [], 'statsmodels': [], 'xgboost': []} axis_0: 0, axis_1: 1
feature-engineering-prepare-data.py : ['join', 'unique', 'apply', 'get', 'apply', 'get', 'abs', 'abs', 'abs', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'filter', 'shift', 'shift', 'shift', 'shift', 'concat', 'join', 'array', 'array'] ['numpy', 'pandas', 'polars', 'gc', 'joblib', 'os', 'seaborn', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'numpy', 'pandas'] ['tqdm', 'timedelta', 'date']Dict:{'numpy': ['diff', 'abs', 'unique', 'array'], 'pandas': ['array', 'unique', 'concat'], 'polars': ['concat', 'apply'], 'gc': [], 'tqdm': [], 'joblib': [], 'datetime': [], 'os': [], 'seaborn': [], 'matplotlib': ['get']} axis_0: 0, axis_1: 0
7-coolest-packages-top-kagglers-are-using.py : ['head'] ['warnings', 'matplotlib.pyplot', 'numpy', 'optuna', 'pandas', 'seaborn', 'datatable', 'optuna', 'shap', 'xgboost'] ['by', 'f', 'sum']Dict:{'warnings': [], 'matplotlib': [], 'numpy': [], 'optuna': [], 'pandas': [], 'seaborn': [], 'datatable': [], '': [], '#': [], 'pip': [], 'install': [], 'shap': [], 'xgboost': []} axis_0: 0, axis_1: 0
an-economic-oriented-feature-engineering.py : ['astype', 'astype', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'sum', 'duplicated', 'copy', 'duplicated', 'sort_values', 'unique', 'drop_duplicates', 'head', 'sum', 'duplicated', 'head', 'isin', 'isin', 'head', 'head', 'head', 'sum', 'duplicated', 'sub', 'sub', 'sub', 'sub', 'sort_values', 'unique', 'min', 'max', 'min', 'max', 'copy', 'isin', 'sum', 'groupby', 'reset_index', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'head', 'sum', 'duplicated', 'copy', 'duplicated', 'unique', 'read_csv', 'sum', 'duplicated', 'duplicated', 'drop', 'sum', 'duplicated', 'copy', 'duplicated', 'drop_duplicates', 'merge', 'merge', 'merge', 'head', 'info', 'describe', 'to_datetime', 'describe', 'drop', 'describe', 'copy', 'nunique', 'groupby', 'min', 'max', 'describe', 'boxplot', 'boxplot', 'describe', 'boxplot', 'median', 'describe', 'describe', 'describe', 'describe', 'unique', 'isin', 'boxplot', 'unique', 'describe', 'boxplot', 'boxplot', 'describe', 'describe', 'boxplot', 'sort_values', 'mean', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'merge', 'merge', 'merge', 'merge', 'astype', 'head', 'mean', 'groupby', 'reset_index', 'sum', 'groupby', 'merge', 'sum', 'groupby', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'copy', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'sum', 'groupby', 'reset_index', 'pivot_table', 'sort_values', 'pivot_table', 'sort_values', 'sum', 'groupby', 'reset_index', 'pivot_table', 'sort_values', 'pivot_table', 'sort_values', 'sum', 'groupby', 'reset_index', 'pivot_table', 'sort_values', 'pivot_table', 'sort_values', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'pivot_table', 'sort_values', 'pivot_table', 'sort_values', 'copy', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'sum', 'groupby', 'reset_index', 'sort_values', 'cumsum', 'sum', 'sum', 'sort_values', 'cumsum', 'sum', 'sum', 'sum', 'groupby', 'reset_index', 'sort_values', 'cumsum', 'sum', 'sum', 'sort_values', 'cumsum', 'sum', 'sum', 'sum', 'groupby', 'isin', 'reset_index', 'nunique', 'boxplot', 'unique', 'sum', 'groupby', 'isin', 'reset_index', 'pivot_table', 'sort_values', 'pivot_table', 'sort_values', 'copy', 'isin', 'boxplot', 'boxplot', 'boxplot', 'unique', 'sum', 'isin', 'unique', 'copy', 'isin', 'max', 'groupby', 'reset_index', 'count', 'groupby', 'sum', 'unique', 'sum', 'isin', 'unique', 'copy', 'isin', 'max', 'groupby', 'reset_index', 'count', 'groupby', 'max', 'groupby', 'reset_index', 'isin', 'sum', 'groupby', 'isin', 'reset_index', 'pivot_table', 'sum', 'groupby', 'isin', 'reset_index', 'pivot_table', 'pivot_table', 'nunique', 'groupby', 'isin', 'unique', 'isin', 'unique', 'isin', 'sum', 'groupby', 'isin', 'reset_index', 'pivot_table', 'pivot_table', 'sum', 'groupby', 'isin', 'isin', 'reset_index', 'pivot_table', 'pivot_table', 'array', 'unique', 'unique', 'concat', 'unique', 'sort_values', 'groupby', 'min', 'max', 'reset_index', 'merge', 'fillna', 'groupby', 'min', 'max', 'reset_index', 'merge', 'fillna', 'groupby', 'min', 'max', 'reset_index', 'merge', 'fillna', 'astype', 'astype', 'astype', 'mean', 'groupby', 'mean', 'groupby', 'sum', 'isin', 'unique', 'copy', 'drop', 'merge', 'merge', 'copy', 'isin', 'merge', 'astype', 'unique', 'unique', 'unique', 'isin', 'isin', 'isin', 'to_datetime', 'array', 'drop', 'merge', 'groupby', 'mean', 'min', 'max', 'reset_index', 'merge', 'groupby', 'mean', 'min', 'max', 'reset_index', 'merge', 'groupby', 'mean', 'min', 'max', 'reset_index', 'merge', 'astype', 'copy', 'merge', 'notna', 'sort_values', 'fillna', 'groupby', 'sort_values', 'fillna', 'copy', 'shift', 'groupby', 'fillna', 'replace', 'drop', 'merge', 'copy', 'shift', 'groupby', 'fillna', 'replace', 'drop', 'merge', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'expanding', 'groupby', 'reset_index', 'mean', 'expanding', 'groupby', 'drop', 'merge', 'fillna', 'sort_values', 'copy', 'to_csv', 'drop', 'head', 'sum', 'groupby', 'reset_index', 'shift', 'shift', 'drop', 'mean', 'expanding', 'mean', 'expanding', 'drop', 'merge', 'fillna', 'sum', 'groupby', 'drop', 'reset_index', 'fillna', 'groupby', 'fillna', 'shift', 'groupby', 'shift', 'groupby', 'fillna', 'replace', 'drop', 'reset_index', 'mean', 'expanding', 'groupby', 'reset_index', 'mean', 'expanding', 'groupby', 'drop', 'merge', 'fillna', 'fillna', 'sum', 'groupby', 'reset_index', 'fillna', 'shift', 'groupby', 'fillna', 'replace', 'shift', 'groupby', 'fillna', 'replace', 'drop', 'reset_index', 'mean', 'expanding', 'groupby', 'reset_index', 'mean', 'expanding', 'groupby', 'drop', 'merge', 'fillna', 'sum', 'groupby', 'fillna', 'reset_index', 'shift', 'groupby', 'fillna', 'replace', 'drop', 'reset_index', 'mean', 'expanding', 'groupby', 'drop', 'merge', 'sum', 'groupby', 'fillna', 'reset_index', 'shift', 'groupby', 'fillna', 'replace', 'drop', 'reset_index', 'mean', 'expanding', 'groupby', 'drop', 'merge', 'sum', 'groupby', 'fillna', 'reset_index', 'shift', 'groupby', 'fillna', 'replace', 'drop', 'reset_index', 'mean', 'expanding', 'groupby', 'drop', 'merge', 'sum', 'groupby', 'fillna', 'reset_index', 'shift', 'groupby', 'fillna', 'replace', 'drop', 'reset_index', 'mean', 'expanding', 'groupby', 'drop', 'merge', 'drop', 'info', 'info', 'sort_values', 'to_csv', 'drop', 'copy', 'shift', 'mean', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'shift', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'shift', 'groupby', 'merge', 'reset_index', 'shift', 'groupby', 'drop', 'fillna', 'to_csv', 'drop', 'copy', 'shift', 'mean', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'shift', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'shift', 'groupby', 'merge', 'reset_index', 'shift', 'groupby', 'drop', 'fillna', 'to_csv', 'drop', 'copy', 'shift', 'mean', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'shift', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'shift', 'groupby', 'merge', 'reset_index', 'shift', 'groupby', 'drop', 'fillna', 'to_csv', 'drop', 'copy', 'mean', 'groupby', 'shift', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'shift', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'shift', 'groupby', 'merge', 'reset_index', 'mean', 'groupby', 'shift', 'groupby', 'merge', 'reset_index', 'drop', 'fillna', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'os', 're', 'datetime', 'gc'] ['ListedColormap', 'Calendar', 'product']Dict:{'pandas': ['read_csv', 'pivot_table', 'concat', 'notna', 'unique', 'array', 'merge', 'to_datetime'], 'numpy': ['mean', 'median', 'max', 'sum', 'min', 'unique', 'isin', 'info', 'array', 'cumsum', 'copy'], 'matplotlib': ['copy'], 'seaborn': ['boxplot'], 'os': ['replace'], 're': ['sub'], 'datetime': [], 'calendar': [], 'itertools': [], 'gc': []} axis_0: 0, axis_1: 0
eda-and-feature-engineering-gbm-84-accuracy.py : ['read_csv', 'read_csv', 'copy', 'copy', 'reset_index', 'concat', 'head', 'info', 'describe', 'sum', 'isnull', 'sum', 'duplicated', 'value_counts', 'crosstab', 'sum', 'groupby', 'crosstab', 'query', 'count', 'query', 'count', 'query', 'count', 'query', 'count', 'corr', 'describe', 'map', 'map', 'describe', 'mean', 'groupby', 'mean', 'groupby', 'map', 'corr', 'crosstab', 'corr', 'crosstab', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'mean', 'sum', 'isnull', 'value_counts', 'isnull', 'count', 'drop', 'sum', 'isnull', 'boxplot', 'head', 'count', 'groupby', 'head', 'get_dummies', 'head', 'drop', 'corr', 'drop', 'head', 'corr', 'drop', 'astype', 'head', 'head', 'drop', 'mean', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'read_csv', 'head', 'head', 'concat', 'head', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'random', 'missingno', 'warnings', 'xgboost', 'lightgbm'] ['cross_val_score', 'preprocessing', 'LabelEncoder', 'train_test_split', 'metrics', 'confusion_matrix', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'VotingClassifier', 'LogisticRegression', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'MLPClassifier', 'GaussianNB', 'SVC', 'GridSearchCV', 'StratifiedKFold', 'learning_curve']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'crosstab'], 'numpy': ['mean', 'median', 'sum', 'info', 'copy'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'random': [], 'missingno': [], 'warnings': [], 'sklearn': [], 'xgboost': [], 'lightgbm': []} axis_0: 1, axis_1: 1
siim-fisabio-rsna-covid-19-detection-starter.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'replace', 'apply', 'head', 'rename', 'sort_index', 'value_counts', 'sum', 'to_csv'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'matplotlib', 'pydicom', 'cv2', 'ast', 'warnings'] []Dict:{'os': ['rename', 'replace'], 'pandas': ['read_csv', 'value_counts'], 'numpy': ['sum'], 'matplotlib': [], 'pydicom': [], 'cv2': [], 'ast': [], 'warnings': []} axis_0: 0, axis_1: 0
riiid-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'astype', 'merge', 'fillna', 'shift', 'groupby', 'fillna', 'to_dict', 'astype', 'set_index', 'tail', 'groupby', 'mean', 'mean', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'value_counts', 'reset_index', 'fillna', 'astype', 'reset_index', 'drop', 'map', 'nunique', 'groupby', 'drop', 'read_pickle', 'map', 'merge', 'drop', 'agg', 'groupby', 'head', 'groupby', 'diff', 'groupby', 'diff', 'groupby', 'drop', 'merge', 'head', 'shift', 'groupby', 'agg', 'groupby', 'drop', 'shift', 'groupby', 'agg', 'groupby', 'drop', 'shift', 'groupby', 'agg', 'groupby', 'drop', 'head', 'groupby', 'drop', 'merge', 'head', 'groupby', 'drop', 'merge', 'head', 'mean', 'groupby', 'isna', 'mean', 'groupby', 'agg', 'groupby', 'astype', 'map', 'map', 'groupby', 'where', 'fillna', 'fillna', 'astype', 'isna', 'map', 'isna', 'isna', 'map', 'isna', 'fillna', 'fillna', 'fillna', 'agg', 'groupby', 'shift', 'groupby', 'fillna', 'head', 'groupby', 'drop', 'merge', 'head', 'corr', 'mean', 'mean', 'mean', 'shift', 'groupby', 'fillna', 'head', 'groupby', 'drop', 'merge', 'head', 'groupby', 'drop', 'merge', 'shift', 'groupby', 'cumsum', 'groupby', 'head', 'groupby', 'drop', 'merge', 'fillna', 'head', 'mean', 'groupby', 'hist', 'sample', 'sample', 'where', 'where', 'where', 'where', 'cumsum', 'groupby', 'groupby', 'shift', 'groupby', 'head', 'groupby', 'drop', 'merge', 'fillna', 'head', 'hist', 'sample', 'sample', 'astype', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'gc', 'pickle', 'joblib'] ['tqdm']Dict:{'pandas': ['isna', 'read_csv', 'value_counts', 'read_pickle', 'merge'], 'numpy': ['where', 'diff', 'cumsum', 'mean'], 'matplotlib': ['hist'], 'seaborn': [], 'lightgbm': [], 'tqdm': [], 'gc': [], 'pickle': [], 'joblib': []} axis_0: 0, axis_1: 0
plasticc-comprehensive-eda-with-gp.py : ['read_csv', 'read_csv', 'groupby', 'drop', 'merge', 'agg', 'merge', 'agg', 'merge', 'agg', 'merge', 'agg', 'merge', 'agg', 'merge', 'agg', 'merge', 'agg', 'merge', 'agg', 'fillna', 'mean', 'drop', 'map', 'drop', 'transform', 'drop', 'concat'] ['numpy', 'pandas', 'os', 'gplearn', 'keras', 'warnings', 'seaborn'] ['SymbolicTransformer', 'to_categorical']Dict:{'numpy': ['mean'], 'pandas': ['concat', 'merge', 'read_csv'], 'os': [], 'gplearn': [], 'keras': [], '': [], 'warnings': [], 'seaborn': []} axis_0: 0, axis_1: 5
5-solution-ps3e13-ensemble.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'replace', 'copy', 'corr', 'corr', 'reset_index', 'concat', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'astype', 'copy', 'transform', 'sum', 'items', 'astype', 'replace', 'astype', 'reset_index', 'drop', 'reset_index', 'astype', 'reset_index', 'drop', 'head', 'mean', 'array', 'array', 'unique', 'fillna', 'keys', 'items', 'keys', 'mean', 'mean', 'std', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'astype', 'read_csv', 'join', 'sort_values', 'join', 'to_csv'] ['numpy', 'pandas', 'plotly.express', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'random', 'gc', 'optuna', 'xgboost', 'lightgbm', 'warnings'] ['deepcopy', 'partial', 'combinations', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StandardScaler', 'MinMaxScaler', 'train_test_split', 'StratifiedKFold', 'KFold', 'RepeatedStratifiedKFold', 'roc_auc_score', 'accuracy_score', 'log_loss', 'StandardScaler', 'PCA', 'NMF', 'UMAP', 'TSNE', 'Parallel', 'delayed', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'BalancedRandomForestClassifier', 'NuSVC', 'SVC', 'KNeighborsClassifier', 'LogisticRegression', 'MLPClassifier', 'GaussianProcessClassifier', 'RBF', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool']Dict:{'numpy': ['mean', 'sum', 'array', 'unique', 'std', 'copy'], 'pandas': ['concat', 'array', 'unique', 'read_csv'], 'plotly': [], 'matplotlib': [], 'seaborn': [], 'random': [], 'os': ['replace'], 'copy': [], 'functools': [], 'itertools': [], 'gc': [], 'category_encoders': [], 'imblearn': [], 'sklearn': [], 'umap': [], 'optuna': [], 'joblib': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'warnings': []} axis_0: 7, axis_1: 20
voting-classifier-for-prediction.py : ['join', 'read_csv', 'fillna', 'fillna', 'fillna', 'fillna', 'mean', 'fillna', 'fillna', 'fillna', 'transform', 'replace', 'replace', 'replace'] ['numpy', 'pandas', 'os', 'pandas', 'seaborn', 'matplotlib.pyplot'] ['train_test_split', 'VotingClassifier', 'DecisionTreeClassifier', 'LinearDiscriminantAnalysis', 'SGDClassifier', 'SVC', 'MLPClassifier', 'RandomForestClassifier', 'GradientBoostingClassifier', 'LogisticRegression', 'confusion_matrix', 'LabelEncoder']Dict:{'numpy': ['mean'], 'pandas': ['read_csv'], 'os': ['replace'], 'sklearn': ['transform'], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 0
feature-engineering-with-mol2vec.py : ['keys', 'head'] ['sys', 'numpy', 'pandas', 'os', 'pybel'] ['tqdm_notebook', 'Chem', 'mol2alt_sentence', 'Word2Vec']Dict:{'sys': [], 'numpy': [], 'pandas': [], 'os': [], 'tqdm': [], 'rdkit': [], 'mol2vec': [], 'pybel': [], 'gensim': []} axis_0: 0, axis_1: 0
house-price-prediction-eda-model-training.py : ['join', 'mean', 'isna', 'read_csv', 'head', 'info', 'copy', 'tail', 'sum', 'isnull', 'sum', 'isnull', 'unique', 'fillna', 'mean', 'sum', 'isnull', 'value_counts', 'drop', 'fillna', 'unique', 'fillna', 'mean', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'unique', 'fillna', 'fillna', 'unique', 'fillna', 'fillna', 'fillna', 'unique', 'fillna', 'unique', 'fillna', 'unique', 'drop', 'fillna', 'drop', 'head', 'value_counts', 'head', 'astype', 'astype', 'head', 'unique', 'head', 'to_csv', 'read_csv', 'head', 'drop', 'transform', 'head', 'read_csv', 'head', 'drop', 'head', 'fillna', 'mean', 'fillna', 'fillna', 'mean', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'unique', 'fillna', 'fillna', 'fillna', 'unique', 'fillna', 'unique', 'fillna', 'unique', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'mean', 'sum', 'isnull', 'transform', 'head', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['LabelEncoder', 'StandardScaler', 'AdaBoostRegressor']Dict:{'numpy': ['mean', 'sum', 'unique', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'value_counts', 'unique'], 'os': [], 'matplotlib': [], 'seaborn': [], 'warnings': [], '': [], '#': [], 'remove': [], 'all': [], 'from': [], 'the': [], 'output': [], 'sklearn': []} axis_0: 0, axis_1: 5
lgbm-xgb-essemble.py : ['copy', 'value_counts', 'unique', 'read_csv', 'read_csv', 'read_csv', 'merge', 'transform', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'merge', 'merge', 'quantile', 'quantile', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', 'any', 'isna', 'mode', 'fillna', 'any', 'isna', 'mode', 'fillna', 'mean', 'mean', 'unique', 'agg', 'sum', 'join', 'join', 'join', 'join', 'filter', 'agg', 'concat', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'apply', 'median', 'apply', 'drop', 'join', 'agg', 'sum', 'mean', 'std', 'median', 'min', 'max', 'quantile', 'join', 'agg', 'join', 'shift', 'filter', 'agg', 'max', 'median', 'mean', 'std', 'sum', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'join', 'shift', 'filter', 'count', 'agg', 'mean', 'std', 'count', 'median', 'max', 'first', 'last', 'join', 'filter', 'count', 'agg', 'mean', 'std', 'median', 'max', 'first', 'last', 'join', 'astype', 'mean', 'apply', 'groupby', 'unique', 'merge', 'rename', 'apply', 'explode', 'apply', 'agg', 'groupby', 'join', 'reset_index', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'rename', 'reset_index', 'agg', 'groupby', 'isin', 'merge', 'reset_index', 'agg', 'groupby', 'isin', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'read_csv', 'merge', 'drop', 'merge', 'merge', 'merge', 'merge', 'merge', 'drop', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'merge', 'drop', 'to_csv'] ['warnings', 'gc', 'ctypes', 'os', 'itertools', 'pickle', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 're', 'random', 'pprint', 'time', 'copy', 'lightgbm', 'torch', 'polars', 'optuna', 'pandas'] ['LGBMRegressor', 'XGBRegressor', 'TfidfVectorizer', 'LinearRegression', 'Lasso', 'Ridge', 'ElasticNet', 'mean_absolute_error', 'mean_squared_error', 'accuracy_score', 'CountVectorizer', 'MultinomialNB', 'LabelEncoder', 'PowerTransformer', 'RobustScaler', 'FunctionTransformer', 'KFold', 'StratifiedKFold', 'GroupKFold', 'train_test_split', 'TruncatedSVD', 'PCA', 'GradientBoostingRegressor', 'HistGradientBoostingRegressor', 'RandomForestRegressor', 'ExtraTreesRegressor', 'AdaBoostRegressor', 'SVR', 'Pipeline', 'KMeans', 'KNeighborsRegressor', 'mean_squared_error', 'SimpleImputer', 'metrics', 'choice', 'choices', 'reduce', 'partial', 'tqdm', 'cycle', 'Counter', 'stats', 'skew', 'kurtosis', 'BertTokenizer', 'Counter', 'defaultdict', 'tqdm', 'sqrt', 'model_selection', 'defaultdict', 'LabelEncoder']Dict:{'warnings': [], 'gc': [], 'ctypes': [], 'os': ['rename', 'replace'], 'itertools': [], 'pickle': [], 'numpy': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'seaborn': [], 'matplotlib': [], 're': [], 'random': [], 'pprint': [], 'time': [], 'copy': ['copy'], 'lightgbm': [], 'torch': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'concat', 'mode', 'min', 'unique', 'isin', 'std'], 'polars': ['mean', 'median', 'quantile', 'read_csv', 'any', 'first', 'max', 'sum', 'last', 'apply', 'concat', 'min', 'count', 'std'], 'optuna': [], 'xgboost': ['apply'], 'sklearn': ['transform'], 'functools': [], 'tqdm': [], 'collections': ['items', 'keys', 'copy'], 'scipy': [], 'transformers': [], 'math': []} axis_0: 1, axis_1: 14
data-science-bowl-tricks-for-uncovering-the-data.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'sum', 'isnull', 'head', 'unique', 'reset_index', 'agg', 'groupby', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'sum', 'memory_usage', 'max', 'min', 'all', 'fillna', 'astype', 'fillna', 'sum', 'astype', 'astype', 'astype', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'nunique', 'nunique', 'nunique', 'to_datetime', 'to_datetime', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'unique', 'mean', 'unique', 'mean'] ['numpy', 'pandas', 'plotly.graph_objects', 'plotly.express', 'plotly.offline', 'plotly.figure_factory', 'matplotlib.patches', 'matplotlib.pyplot', 'matplotlib.patches', 'os', 'plotly.offline', 'plotly.graph_objects', 'gc', 'plotly.offline'] ['iplot', 'tools', 'make_subplots']Dict:{'numpy': ['mean', 'max', 'sum', 'all', 'min', 'unique'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'unique', 'to_datetime'], 'plotly': [], 'matplotlib': [], 'os': [], 'gc': []} axis_0: 0, axis_1: 0
pubg-feature-engineering.py : ['read_csv', 'read_csv', 'head', 'isna', 'transform', 'groupby', 'drop', 'head', 'head', 'head', 'corr', 'head', 'corr', 'head', 'corr', 'head', 'corr'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['preprocessing', 'OneHotEncoder']Dict:{'numpy': [], 'pandas': ['isna', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'sklearn': ['transform'], 'warnings': []} axis_0: 0, axis_1: 1
simple-eda-and-xgb-baseline-with-full-dataset.py : ['drop', 'read_csv', 'drop', 'read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'select_dtypes', 'select_dtypes', 'corr', 'head', 'head', 'concat', 'get_dummies', 'drop', 'concat', 'get_dummies', 'concat', 'drop', 'mean', 'sort_values', 'apply', 'mean', 'apply', 'mean', 'read_csv', 'head', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'math', 'warnings'] ['HTML', 'tqdm', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'LGBMRegressor', 'XGBRegressor', 'CatBoostRegressor', 'Style', 'Fore', 'mean_squared_error']Dict:{'IPython': [], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'numpy': ['transpose', 'sum', 'mean'], 'matplotlib': [], 'seaborn': [], 'gc': [], 'tqdm': [], 'math': [], 'sklearn': [], 'warnings': [], 'lightgbm': [], 'xgboost': ['apply'], 'catboost': [], 'colorama': [], '=': [], 'list()': []} axis_0: 0, axis_1: 0
time-series-forecasting-with-lstm-autoencoders.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'join', 'join', 'join', 'head', 'describe', 'min', 'max', 'unique', 'unique', 'isin', 'isin', 'groupby', 'sort_values', 'agg', 'query', 'shift', 'groupby', 'sort_values', 'head', 'describe', 'reset_index', 'pivot_table', 'head', 'iterrows', 'head', 'drop', 'drop', 'head', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'head', 'drop', 'drop', 'head', 'add', 'add', 'add', 'drop_duplicates', 'merge', 'fillna', 'drop', 'head', 'head', 'head', 'head', 'clip', 'to_csv', 'head', 'clip', 'to_csv', 'head'] ['os', 'warnings', 'random', 'numpy', 'pandas', 'matplotlib.pyplot', 'tensorflow', 'tensorflow.keras.layers'] ['mean_squared_error', 'train_test_split', 'optimizers', 'Sequential', 'Model']Dict:{'os,': [], 'warnings,': [], 'random': [], 'numpy': ['max', 'add', 'min', 'unique', 'clip', 'isin'], 'pandas': ['merge', 'pivot_table', 'unique', 'read_csv'], 'matplotlib': [], 'sklearn': [], 'tensorflow': []} axis_0: 0, axis_1: 6
ai-ml-ds-training-l1t-titanic-decision-tree.py : ['read_csv', 'info', 'read_csv', 'tail', 'read_csv', 'applymap', 'pivot_table', 'applymap', 'pivot_table', 'sum', 'isnull', 'describe', 'unique', 'astype', 'fillna', 'head', 'replace', 'astype', 'fillna', 'replace', 'pop', 'info', 'info', 'astype', 'astype', 'to_csv', 'hist', 'mean'] ['numpy', 'pandas', 'matplotlib.pyplot'] ['DecisionTreeClassifier', 'plot_tree', 'confusion_matrix']Dict:{'numpy': ['mean', 'info', 'sum', 'unique'], 'pandas': ['unique', 'pivot_table', 'read_csv', 'isnull'], 'matplotlib': ['hist'], 'sklearn': []} axis_0: 0, axis_1: 0
automating-feature-engineering-part-i.py : ['read_csv', 'copy', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'drop', 'shift', 'groupby', 'drop', 'concat', 'read_parquet', 'apply', 'to_datetime', 'isin', 'drop', 'astype', 'to_parquet', 'read_csv', 'set_index', 'drop'] ['os', 'numpy', 'pandas', 'pprint', 'kxy'] ['UserSecretsClient']Dict:{'os': [], 'numpy': ['isin', 'copy'], 'pandas': ['concat', 'read_parquet', 'to_datetime', 'read_csv'], 'pprint': [], 'kxy': [], 'kaggle_secrets': []} axis_0: 0, axis_1: 1
complete-guide-for-titanic-survival-prediction.py : ['join', 'read_csv', 'read_csv', 'info', 'describe', 'mean', 'mean', 'isna', 'isna', 'mean', 'mean', 'isna', 'isna', 'fillna', 'fillna', 'fillna', 'value_counts', 'value_counts', 'transpose', 'hist', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'concat', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'concat', 'map', 'hist', 'cut', 'cut', 'astype', 'astype', 'replace', 'replace', 'fillna', 'fillna', 'replace', 'replace', 'astype', 'map', 'astype', 'map', 'info', 'info', 'corr', 'corr', 'drop', 'std', 'head', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'corr', 'drop', 'copy', 'drop', 'head', 'max', 'mean', 'std', 'boxplot', 'mean', 'mean', 'mean', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'to_csv', 'sort_values'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'pandas', 'xgboost', 'lightgbm', 'xgboost'] ['ExtraTreesClassifier', 'SelectKBest', 'chi2', 'train_test_split', 'LogisticRegression', 'SVC', 'LinearSVC', 'KNeighborsClassifier', 'GaussianNB', 'DecisionTreeClassifier', 'RandomForestClassifier', 'train_test_split', 'metrics', 'svm', 'RFE', 'KFold', 'cross_val_score', 'cross_val_predict', 'confusion_matrix', 'GridSearchCV', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'XGBClassifier', 'VotingClassifier', 'BaggingClassifier']Dict:{'numpy': ['transpose', 'mean', 'max', 'info', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'cut', 'concat', 'value_counts'], 'os': ['replace'], '': [], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': [], 'lightgbm': []} axis_0: 0, axis_1: 26
titanic-the-only-notebook-you-need-to-see.py : ['read_csv', 'read_csv', 'head', 'apply', 'astype', 'apply', 'astype', 'head', 'apply', 'apply', 'apply', 'apply', 'fillna', 'fillna', 'median', 'qcut', 'mean', 'std', 'sum', 'isnull', 'astype', 'cut', 'apply', 'replace', 'replace', 'replace', 'replace', 'astype', 'map', 'map', 'fillna', 'astype', 'map', 'astype', 'drop', 'drop', 'drop', 'head', 'corr', 'astype', 'drop', 'read_csv', 'read_csv', 'read_csv', 'head', 'copy', 'apply', 'to_csv', 'head', 'copy', 'apply', 'to_csv', 'head', 'get', 'read_csv', 'read_csv', 'sub', 'sub', 'read_csv', 'to_csv', 'to_csv', 'head'] ['pandas', 'numpy', 're', 'sklearn', 'xgboost', 'seaborn', 'matplotlib.pyplot', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'warnings', 'numpy', 'pandas', 'os', 're', 'warnings', 'io', 'requests'] ['RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'SVC']Dict:{'pandas': ['qcut', 'cut', 'read_csv', 'isnull'], 'numpy': ['mean', 'median', 'sum', 'std', 'copy'], 're': ['sub'], 'sklearn': [], 'xgboost': [], 'seaborn': [], 'matplotlib': ['get'], 'plotly': [], 'warnings': [], 'os': ['replace'], 'io': [], 'requests': ['head', 'get']} axis_0: 0, axis_1: 1
explained-tuned-debertav3-lgbm.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'join', 'get', 'count', 'update', 'apply', 'apply', 'apply', 'apply', 'apply', 'merge', 'drop', 'head', 'head', 'mean', 'mean', 'update', 'map', 'map', 'join', 'map', 'eval', 'join', 'mean', 'head', 'drop', 'drop', 'drop', 'drop', 'mean', 'to_csv'] ['numpy', 'pandas', 'warnings', 'logging', 'os', 'shutil', 'json', 'transformers', 'torch', 'nltk', 'spacy', 're', 'lightgbm', 'random', 'os', 'numpy', 'torch'] ['List', 'AutoModel', 'AutoTokenizer', 'AutoConfig', 'AutoModelForSequenceClassification', 'DataCollatorWithPadding', 'Dataset', 'load_dataset', 'load_from_disk', 'TrainingArguments', 'Trainer', 'load_metric', 'disable_progress_bar', 'mean_squared_error', 'KFold', 'GroupKFold', 'tqdm', 'stopwords', 'word_tokenize', 'TreebankWordDetokenizer', 'Counter', 'Speller', 'SpellChecker']Dict:{'typing': [], 'numpy': ['mean'], 'pandas': ['eval', 'merge', 'read_csv'], 'warnings': [], '': [], '#': [], '👉': [], 'Importing': [], 'the': [], 'module': [], 'logging': [], 'os': [], 'shutil': [], 'json': [], 'transformers': [], 'library': [], 'datasets': [], 'sklearn': [], 'torch': ['mean'], 'tqdm': [], 'nltk': [], 'collections': [], 'spacy': [], 're': [], 'autocorrect': [], 'spellchecker': [], 'lightgbm': []} axis_0: 1, axis_1: 6
tps-jan-happy-new-year.py : ['array', 'read_csv', 'read_csv', 'head', 'to_datetime', 'to_datetime', 'describe', 'unique', 'min', 'max', 'min', 'max', 'value_counts', 'value_counts', 'pivot', 'set_index', 'head', 'unstack', 'mean', 'groupby', 'set_index', 'unstack', 'mean', 'groupby', 'set_index', 'head', 'mean', 'groupby', 'set_index', 'reset_index', 'sum', 'groupby', 'unique', 'head', 'sort_values', 'mean', 'groupby', 'set_index', 'mean', 'groupby', 'set_index', 'apply', 'mean', 'groupby', 'set_index', 'pivot_table', 'mean', 'reset_index', 'unstack', 'divide', 'sum', 'rename', 'pivot_table', 'mean', 'divide', 'sum', 'pivot_table', 'mean', 'divide', 'sum'] ['numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'warnings', 'bar_chart_race'] ['cycler', 'display', 'HTML']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'array', 'divide'], 'pandas': ['to_datetime', 'read_csv', 'pivot_table', 'value_counts', 'unique', 'array', 'pivot'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'cycler': [], 'IPython': [], 'bar_chart_race': []} axis_0: 3, axis_1: 0
feature-engineering-cleaned-title-ocr.py : ['read_csv', 'drop', 'head', 'read_csv', 'astype', 'astype', 'where', 'where', 'head', 'to_csv', 'read_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'sklearn', 'cv2', 're', 'nltk', 'cudf', 'cuml', 'cupy', 'gc'] ['dump', 'load', 'tqdm', '*', 'SnowballStemmer', 'WordNetLemmatizer', 'tqdm', 'TfidfVectorizer', 'CountVectorizer', 'NearestNeighbors']Dict:{'pandas': ['read_csv'], 'numpy': ['where'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'cv2': [], 'joblib': [], 'tqdm': [], 're': [], 'nltk': [], 'cudf,': [], 'cuml,': [], 'cupy': [], 'cuml': [], 'gc': []} axis_0: 0, axis_1: 1
machine-failure-baseline-submission-notebook.py : ['drop', 'read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'concat', 'drop', 'to_numpy', 'drop', 'to_numpy', 'to_numpy', 'read_csv', 'head'] ['statistics', 'optuna', 'plotly', 'polars', 'numpy', 'plotly.figure_factory'] ['*', '*', 'as_discrete', 'model_selection', 'roc_auc_score', 'Pool', 'CatBoostClassifier', 'EShapCalcType', 'EFeaturesSelectionAlgorithm', 'train_test_split']Dict:{'statistics': [], 'optuna': [], 'plotly': [], 'polars': ['concat', 'head', 'read_csv'], 'numpy': [], 'lets_plot': [], 'sklearn': [], 'catboost': []} axis_0: 0, axis_1: 0
house-prices-competition.py : ['read_csv', 'read_csv', 'concat', 'read_csv', 'unique', 'replace', 'where', 'rename', 'items', 'astype', 'items', 'astype', 'select_dtypes', 'fillna', 'select_dtypes', 'fillna', 'info', 'info', 'select_dtypes', 'mean', 'copy', 'pop', 'copy', 'select_dtypes', 'factorize', 'sort_values', 'sort_values', 'copy', 'pop', 'copy', 'pop', 'copy', 'select_dtypes', 'get_dummies', 'mul', 'sum', 'gt', 'transform', 'groupby', 'copy', 'mean', 'std', 'copy', 'mean', 'std', 'mean', 'std', 'cumsum', 'corr', 'transform', 'concat', 'transform', 'add', 'copy', 'pop', 'copy', 'pop', 'concat', 'join', 'join', 'join', 'join', 'join', 'drop', 'join', 'join', 'transform', 'to_csv'] ['os', 'warnings', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn'] ['Path', 'display', 'CategoricalDtype', 'MEstimateEncoder', 'KMeans', 'PCA', 'mutual_info_regression', 'KFold', 'cross_val_score', 'XGBRegressor', 'figure', 'reduce']Dict:{'os': ['rename', 'replace'], 'warnings': [], 'pathlib': ['rename', 'replace'], 'matplotlib': [], 'numpy': ['mean', 'add', 'sum', 'where', 'unique', 'info', 'std', 'cumsum', 'copy'], 'pandas': [], 'seaborn': [], 'IPython': [], 'category_encoders': [], 'sklearn': [], 'xgboost': []} axis_0: 4, axis_1: 1
moa-tabnet-with-pca-rank-gauss.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'reset_index', 'reset_index', 'array', 'concat', 'var', 'concat', 'min', 'max', 'min', 'mean', 'std', 'apply', 'dropna', 'apply', 'apply', 'concat', 'get_dummies', 'array', 'drop', 'drop', 'reset_index', 'reset_index', 'mean', 'min', 'stack', 'mean', 'mean', 'read_csv', 'reset_index', 'mean', 'merge', 'fillna', 'to_csv', 'head'] ['os', 'sys', 'copy', 'tqdm', 'pickle', 'random', 'warnings', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'torch', 'torch.optim'] ['stats', 'GaussRankScaler', 'PCA', 'LabelEncoder', 'roc_auc_score', 'log_loss', 'QuantileTransformer', 'VarianceThreshold', 'MultilabelStratifiedKFold', 'nn', 'functional', '_WeightedLoss', 'DataLoader', 'Dataset', 'ReduceLROnPlateau', 'Metric', 'TabNetRegressor', 'Fore']Dict:{'os': [], 'sys': [], 'copy': [], 'tqdm': ['std'], 'pickle': [], 'random': [], 'warnings': [], 'numpy': ['mean', 'stack', 'max', 'var', 'array', 'min', 'std'], 'pandas': ['read_csv', 'concat', 'get_dummies', 'array', 'merge'], 'scipy': [], 'gauss_rank_scaler': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'iterstrat': [], 'torch': [], 'pytorch_tabnet': [], 'colorama': []} axis_0: 0, axis_1: 0
catboost-approach.py : ['read_csv', 'read_csv', 'astype', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'set_index', 'set_index', 'read_csv', 'astype', 'to_csv', 'head'] ['lightgbm', 'xgboost', 'pandas'] ['RandomForestClassifier', 'SVC', '*', '*', 'HTML', 'display', 'train_test_split', 'KFold', 'cross_val_score', 'cross_val_predict', 'accuracy_score', 'f1_score']Dict:{'lightgbm': [], 'xgboost': [], 'sklearn': [], 'fastai': [], 'IPython': [], 'pandas': ['read_csv']} axis_0: 0, axis_1: 0
predict-future-sales-top-11-solution.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'array', 'clip', 'groupby', 'reset_index', 'agg', 'rename', 'clip', 'merge', 'fillna', 'merge', 'to_csv', 'head', 'groupby', 'reset_index', 'agg', 'head', 'merge', 'sum', 'isna', 'clip', 'fillna', 'set_index', 'to_csv', 'set_index', 'astype', 'clip', 'fillna', 'to_csv', 'merge', 'set_index', 'head', 'set_index', 'to_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'concat', 'read_csv', 'merge', 'drop', 'rename', 'drop', 'drop', 'rename', 'rename', 'drop_duplicates', 'copy', 'rename', 'merge', 'fillna', 'head', 'groupby', 'agg', 'reset_index', 'rename', 'merge', 'fillna', 'head', 'groupby', 'agg', 'reset_index', 'rename', 'merge', 'head', 'groupby', 'agg', 'reset_index', 'rename', 'merge', 'head', 'join', 'copy', 'mean', 'groupby', 'rename', 'mean', 'groupby', 'rename', 'merge', 'merge', 'concat', 'head', 'head', 'copy', 'rename', 'merge', 'fillna', 'groupby', 'agg', 'reset_index', 'rename', 'merge', 'fillna', 'drop', 'merge', 'head', 'clip', 'fillna', 'astype', 'astype', 'astype', 'clip', 'clip', 'set_index', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'time'] ['sqrt', 'loadtxt', 'product', 'tqdm', 'preprocessing', 'plot_tree', 'pyplot', 'train_test_split', 'accuracy_score', 'mean_squared_error', 'KFold', 'TfidfVectorizer']Dict:{'numpy': [], 'pandas': ['isna', 'read_csv', 'concat', 'unique', 'array', 'merge'], 'matplotlib': [], 'seaborn': [], 'xgboost': [], 'time': [], 'math': [], 'itertools': [], 'tqdm': [], 'sklearn': []} axis_0: 0, axis_1: 5
stochastic-gradient-boosting-with-xgboost.py : [] ['numpy', 'pandas', 'matplotlib'] ['read_csv', 'XGBClassifier', 'GridSearchCV', 'StratifiedKFold', 'LabelEncoder', 'pyplot']Dict:{'numpy': [], 'pandas': [], 'xgboost': [], 'sklearn': [], 'matplotlib': []} axis_0: 0, axis_1: 0
machine-learning-on-board-titanic-17-algothim.py : ['read_csv', 'read_csv', 'head', 'head', 'copy', 'info', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'describe', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'median', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'median', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'drop', 'head', 'qcut', 'cut', 'astype', 'value_counts', 'apply', 'value_counts', 'info', 'info', 'head', 'head', 'boxplot', 'boxplot', 'map', 'max', 'corr', 'get_dummies', 'head', 'head', 'sort_values', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'scipy', 'pylab', 'warnings'] ['train_test_split', 'classification_report', 'LinearRegression', 'accuracy_score', 'confusion_matrix', 'LabelEncoder', 'metrics', 'model_selection', 'roc_curve', 'DecisionTreeClassifier', 'roc_curve', 'auc', 'RandomForestClassifier', 'LogisticRegression', 'KNeighborsClassifier', 'GaussianNB', 'SVC', 'NuSVC', 'LinearSVC', 'RadiusNeighborsClassifier', 'PassiveAggressiveClassifier', 'BernoulliNB', 'ExtraTreeClassifier', 'BaggingClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'LinearDiscriminantAnalysis', 'QuadraticDiscriminantAnalysis']Dict:{'numpy': ['median', 'max', 'sum', 'info', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'value_counts', 'get_dummies', 'qcut'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': [], 'sklearn': [], 'pylab': ['median', 'boxplot', 'max', 'sum', 'info', 'copy'], 'warnings': []} axis_0: 0, axis_1: 2
what-a-decision-tree-cannot-see-ver-2.py : ['read_csv', 'pipe', 'mean', 'mean', 'pipe'] ['numpy', 'pandas', 'lightgbm', 'seaborn', 'matplotlib.pyplot'] ['mean_squared_error', 'roc_auc_score', 'StratifiedKFold', 'KFold', 'train_test_split', 'train_test_split', 'urllib', 'skew', 'kurtosis', 'mode', 'tree', 'RandomForestRegressor', 'DecisionTreeRegressor', 'StringIO', 'Image', 'export_graphviz', 'SVG', 'Source', 'Image', 'StandardScaler', 'MinMaxScaler', 'Image']Dict:{'numpy': ['mean'], 'pandas': ['read_csv'], 'lightgbm': [], 'sklearn': [], 'six': [], 'seaborn': [], 'matplotlib': [], 'scipy': [], 'IPython': [], 'graphviz': ['pipe']} axis_0: 0, axis_1: 6
feature-engineering-types.py : ['read_csv', 'head', 'unique', 'read_csv', 'map', 'head', 'unique', 'read_csv', 'map', 'head', 'read_csv', 'head', 'read_csv', 'cut', 'head', 'read_csv', 'head', 'read_csv', 'head'] ['numpy', 'pandas'] []Dict:{'numpy': ['unique'], 'pandas': ['cut', 'unique', 'read_csv']} axis_0: 0, axis_1: 0
predicting-the-survival-of-titanic-top-6.py : ['join', 'read_csv', 'read_csv', 'concat', 'copy', 'copy', 'head', 'sum', 'isnull', 'sort_values', 'rename', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'min', 'max', 'describe', 'drop', 'select_dtypes', 'rename', 'sum', 'isnull', 'isnull', 'corr', 'sort_values', 'sort_values', 'rename', 'skew', 'concat', 'apply', 'map', 'rename', 'replace', 'unique', 'value_counts', 'rename', 'sum', 'reset_index', 'unique', 'value_counts', 'rename', 'sum', 'reset_index', 'crosstab', 'reset_index', 'crosstab', 'sum', 'rename', 'value_counts', 'unique', 'value_counts', 'rename', 'sum', 'reset_index', 'cut', 'astype', 'fillna', 'mean', 'unique', 'value_counts', 'reset_index', 'sum', 'reset_index', 'corr', 'unique', 'unique', 'unique', 'unique', 'unique', 'replace', 'replace', 'replace', 'unique', 'unique', 'unique', 'unique', 'dropna', 'dropna', 'dropna', 'dropna', 'read_csv', 'read_csv', 'unique', 'apply', 'concat', 'apply', 'apply', 'apply', 'apply', 'unique', 'unique', 'head', 'head', 'sum', 'isnull', 'copy', 'apply', 'notnull', 'notnull', 'astype', 'apply', 'cut', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'head', 'drop', 'concat', 'get_dummies', 'concat', 'mean', 'std', 'sort_values', 'items', 'sort_values', 'join', 'set_index', 'sort_values', 'to_csv'] ['os', 're', 'pickle', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly', 'plotly.graph_objs', 'plotly.io', 'plotly.express', 'cufflinks', 'warnings'] ['make_subplots', 'iplot', 'init_notebook_mode', 'StratifiedKFold', 'cross_validate', 'cross_val_score', 'train_test_split', 'StandardScaler', 'LabelEncoder', 'RandomForestClassifier', 'RandomForestRegressor', 'XGBClassifier', 'KNeighborsClassifier', 'LogisticRegression', 'DecisionTreeClassifier', 'accuracy_score', 'enable_iterative_imputer', 'KNNImputer', 'IterativeImputer', 'BaggingClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'GridSearchCV', 'SVC']Dict:{'os': ['rename', 'replace'], 're': [], 'pickle': [], 'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull', 'crosstab'], 'matplotlib': [], 'seaborn': [], 'plotly': [], '': [], 'cufflinks': [], 'sklearn': [], 'xgboost': ['apply'], 'warnings': []} axis_0: 1, axis_1: 12
titanic-xgboost.py : ['read_csv', 'read_csv', 'head', 'concat', 'crosstab', 'mean', 'groupby', 'assign', 'apply', 'notnull', 'map', 'max', 'map', 'max', 'astype', 'cut', 'agg', 'groupby', 'replace', 'replace', 'replace', 'agg', 'groupby', 'fillna', 'map', 'agg', 'groupby', 'fillna', 'agg', 'groupby', 'astype', 'fillna', 'map', 'agg', 'groupby', 'astype', 'fillna', 'agg', 'groupby', 'astype', 'map', 'astype', 'agg', 'groupby', 'astype', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'astype', 'agg', 'groupby', 'corr', 'astype', 'head', 'get_dummies', 'get_dummies', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'xgboost', 'warnings'] ['LogisticRegression', 'SVC', 'LinearSVC', 'GradientBoostingClassifier', 'RandomForestClassifier', 'AdaBoostClassifier', 'KNeighborsClassifier', 'GaussianNB', 'Perceptron', 'SGDClassifier', 'DecisionTreeClassifier', 'StandardScaler', 'OneHotEncoder', 'LabelEncoder', 'model_selection', 'StackingClassifier']Dict:{'numpy': ['mean', 'std', 'max'], 'pandas': ['read_csv', 'cut', 'concat', 'get_dummies', 'notnull', 'crosstab'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'xgboost': [], 'mlxtend': [], 'warnings': []} axis_0: 0, axis_1: 1
vowpal-wabbit-tutorial-blazingly-fast-learning.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'head', 'value_counts', 'value_counts', 'head', 'head', 'head', 'join', 'join', 'join', 'join', 'join', 'join', 'where', 'join', 'join', 'join', 'join', 'read_csv', 'read_csv', 'read_csv', 'map', 'replace', 'replace', 'join', 'array', 'to_csv', 'max', 'apply', 'max', 'apply', 'max', 'apply', 'replace', 'replace', 'join', 'join'] ['warnings', 'os', 're', 'pickle', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['tqdm', 'csr_matrix', 'fetch_20newsgroups', 'load_files', 'LabelEncoder', 'OneHotEncoder', 'train_test_split', 'LogisticRegression', 'classification_report', 'accuracy_score', 'log_loss', 'roc_auc_score', 'roc_curve', 'confusion_matrix']Dict:{'warnings': [], 'os': ['replace'], 're': [], 'pickle': [], 'numpy': ['where', 'array', 'max'], 'pandas': ['array', 'read_csv', 'value_counts'], 'tqdm': [], 'scipy': ['max'], 'sklearn': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 0
smoker-status-xgb-lgbm-cat-dart-ensembling.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'head', 'head', 'corr', 'corr', 'nunique', 'nunique', 'boxplot', 'drop', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'query', 'astype', 'head', 'concat', 'drop', 'mean', 'mean', 'sort_values', 'reset_index', 'to_csv', 'head'] ['numpy', 'pandas', 'warnings', 'os', 'matplotlib.pyplot', 'seaborn', 'optuna', 'imblearn'] ['CatBoostClassifier', 'Pool', 'XGBClassifier', 'LGBMClassifier', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'cross_validate', 'accuracy_score', 'roc_auc_score', 'confusion_matrix', 'RandomForestClassifier', 'GradientBoostingClassifier', 'VotingClassifier', 'StackingClassifier', 'AdaBoostClassifier', 'HistGradientBoostingClassifier', 'RandomOverSampler', 'RandomUnderSampler']Dict:{'numpy': ['mean'], 'pandas': ['concat', 'read_csv'], 'warnings': [], 'os': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'catboost': [], 'xgboost': [], 'lightgbm': [], 'sklearn': [], 'optuna': [], 'imblearn': []} axis_0: 0, axis_1: 2
commonlit-basic-feature-engineering-on-raw-text.py : ['mode', 'read_csv', 'read_csv', 'apply', 'apply', 'apply', 'apply', 'apply', 'count', 'apply', 'count', 'apply', 'count', 'apply', 'count', 'apply', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'head', 'corr', 'drop', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'plotly.offline', 'matplotlib.pyplot', 'seaborn', 'plotly.graph_objs', 'string'] ['pos_tag', 'stopwords', 'TweetTokenizer', 'json_normalize', 'tools', 'tqdm']Dict:{'numpy': ['mean'], 'pandas': [], 'plotly': [], 'matplotlib': [], 'seaborn': [], 'string': [], 'nltk': [], 'tqdm': []} axis_0: 0, axis_1: 2
amp-park-neural-network-datapipline-pytorch.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'reset_index', 'agg', 'groupby', 'head', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'head', 'merge', 'reset_index', 'agg', 'groupby', 'head', 'head', 'reset_index', 'agg', 'groupby', 'head', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'head', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'merge', 'merge', 'fillna', 'mean', 'head', 'abs', 'abs', 'abs', 'mean', 'drop', '__init__', 'eval', 'drop_duplicates', 'drop_duplicates', 'drop', 'eval', 'drop', 'astype', 'eval', 'apply'] ['pandas', 'numpy', 'torch', 'torch.nn', 'torch.optim', 'warnings', 'amp_pd_peptide'] ['ProfileReport', 'fast_eda', 'train_test_split', 'MinMaxScaler', 'DataLoader', 'TensorDataset']Dict:{'pandas': ['eval', 'merge', 'read_csv'], 'numpy': ['mean', 'abs'], 'ydata_profiling': [], 'fasteda': [], 'sklearn': ['__init__'], 'torch': ['__init__'], 'warnings': [], 'amp_pd_peptide': []} axis_0: 0, axis_1: 0
forest-cover-type-eda-baseline-model.py : ['read_csv', 'read_csv', 'head', 'info', 'map', 'drop', 'map', 'map', 'to_csv'] ['numpy', 'pandas', 'plotly.graph_objs', 'matplotlib.pyplot', 'seaborn'] ['init_notebook_mode', 'iplot', 'Counter', 'parallel_coordinates', 'PCA', 'ensemble', 'RandomForestClassifier']Dict:{'numpy': ['info'], 'pandas': [], 'plotly': [], 'collections': [], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 1
weird-patterns-in-unique-values-across-time-ids.py : ['head', 'count', 'groupby', 'nunique', 'groupby', 'mean', 'mean', 'mean', 'mean', 'items', 'items', 'count', 'groupby', 'nunique', 'groupby', 'count', 'groupby', 'nunique', 'groupby', 'mean', 'agg', 'groupby', 'mean', 'map', 'nunique', 'groupby', 'count', 'groupby', 'agg', 'groupby', 'mean', 'agg', 'groupby', 'mean', 'agg', 'groupby', 'std', 'agg', 'groupby', 'min', 'agg', 'groupby', 'max', 'cumsum', 'agg', 'groupby', 'mean', 'cumsum', 'agg', 'groupby', 'mean', 'nunique', 'groupby', 'mean', 'agg', 'groupby', 'mean', 'map', 'nunique', 'groupby', 'count', 'groupby', 'agg', 'groupby', 'mean', 'agg', 'groupby', 'mean', 'agg', 'groupby', 'std', 'agg', 'groupby', 'min', 'agg', 'groupby', 'max', 'clip', 'agg', 'groupby', 'mean'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'random', 'warnings'] []Dict:{'numpy': ['mean', 'max', 'min', 'clip', 'std', 'cumsum'], 'pandas': [], 'matplotlib': [], 'seaborn': [], 'random': [], 'warnings': []} axis_0: 0, axis_1: 0
start-from-here-quest-complete-eda-fe.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'describe', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'value_counts', 'value_counts', 'value_counts', 'sum', 'value_counts', 'sum', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'head', 'sort_values', 'count', 'groupby', 'sub', 'join', 'join', 'keys', 'sub', 'apply', 'apply', 'replace', 'replace', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform'] ['pandas', 'numpy', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'plotly.offline', 'cufflinks', 're', 'nltk', 'string', 'gc', 'os'] ['init_notebook_mode', 'iplot', 'venn2', 'FreqDist', 'word_tokenize', 'stopwords', 'TfidfVectorizer', 'TruncatedSVD']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique'], 'numpy': ['sum', 'unique'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'cufflinks': [], 'matplotlib_venn': [], 're': ['sub'], 'nltk': [], 'string': [], 'gc': [], 'sklearn': ['transform'], 'os': ['replace']} axis_0: 0, axis_1: 2
complete-intraday-feature-exploration.py : ['update', 'astype', 'multiply', 'nunique', 'groupby', 'query', 'value_counts', 'query', 'cumsum', 'cumsum', 'copy', 'query', 'value_counts', 'map', 'map', 'multiply', 'map', 'map', 'clip', 'divide', 'clip', 'divide', 'mean', 'rolling', 'map', 'diff', 'divide', 'divide', 'divide', 'map', 'map', 'multiply', 'map'] ['numpy', 'pandas', 'pickle', 'matplotlib.pyplot', 'warnings'] ['tqdm']Dict:{'numpy': ['mean', 'cumsum', 'clip', 'diff', 'multiply', 'divide', 'copy'], 'pandas': ['value_counts'], 'pickle': [], 'matplotlib': [], 'tqdm': ['update'], 'warnings': []} axis_0: 2, axis_1: 0
tps-mar-fast-workflow-using-scikit-learn-intelex.py : ['read_csv', 'read_csv', 'read_csv', 'shift', 'shift', 'shift', 'shift', 'shift', 'shift', 'shift', 'mean', 'expanding', 'map', 'map', 'map', 'map', 'map', 'map', 'fillna', 'drop', 'drop', 'drop', 'to_csv'] ['pandas', 'numpy', 'warnings', 'gc', 'matplotlib.pyplot', 'eli5', 'eli5'] ['HTML', 'sin', 'cos', 'pi', 'default_timer', 'patch_sklearn', 'train_test_split', 'PermutationImportance', 'RandomForestRegressor', 'unpatch_sklearn', 'PermutationImportance', 'RandomForestRegressor', 'patch_sklearn', 'RandomForestRegressor', 'unpatch_sklearn', 'RandomForestRegressor']Dict:{'pandas': ['read_csv'], 'numpy': ['mean'], 'warnings': [], 'gc': [], 'IPython': [], 'math': [], 'timeit': [], 'matplotlib': [], 'sklearnex': [], 'sklearn': [], 'eli5': []} axis_0: 0, axis_1: 0
santander-customer-transaction-eda.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'drop', 'drop', 'sum', 'sum', 'isnull', 'head', 'sum', 'sum', 'isnull', 'drop', 'head', 'corr', 'drop', 'corr', 'drop', 'drop', 'describe', 'join', 'drop', 'to_csv', 'drop', 'drop', 'qcut', 'round', 'round', 'round', 'drop', 'round', 'mean', 'round', 'std', 'drop', 'drop', 'drop', 'round', 'mean', 'round', 'std', 'mean', 'transform', 'value_counts', 'groupby', 'groupby', 'value_counts', 'groupby', 'groupby', 'droplevel'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.offline', 'plotly.graph_objs', 'warnings', 'os'] ['RandomForestClassifier', 'GridSearchCV', 'StratifiedKFold', 'LabelEncoder', 'OneHotEncoder', 'roc_auc_score', 'make_scorer', 'GaussianMixture', 'RobustScaler', 'PCA']Dict:{'numpy': ['mean', 'round', 'std', 'sum'], 'pandas': ['qcut', 'value_counts', 'read_csv', 'isnull'], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'sklearn': ['transform'], 'warnings': [], 'os': [], '=': [], 'grid': [], 'forest': []} axis_0: 0, axis_1: 15
feature-engineering-lighgbm-with-f1-macro.py : ['astype', 'replace', 'astype', 'replace', 'astype', 'replace', 'astype', 'astype', 'query', 'astype', 'agg', 'groupby', 'join', 'drop', 'drop', 'drop', 'copy', 'unique', 'sum', 'astype', 'sum', 'unique', 'sum', 'idxmax', 'astype', 'drop', 'read_csv', 'read_csv', 'fillna', 'fillna', 'info', 'concat', 'drop', 'info', 'concat', 'get_dummies', 'astype', 'mean', 'groupby', 'mean', 'groupby', 'join', 'info', 'query', 'drop', 'drop', 'drop', 'concat', 'corr', 'corr', 'info', 'unique', 'sum', 'transform', 'mean', 'array', 'std', 'array', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'mean', 'groupby', 'isin', 'sort_values', 'read_csv', 'copy', 'copy', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'warnings', 'lightgbm'] ['LabelEncoder', 'train_test_split', 'f1_score', 'Parallel', 'delayed', 'clone', 'VotingClassifier', 'LabelEncoder', 'VotingClassifier', 'LabelEncoder', 'StratifiedKFold', 'precision_score', 'recall_score', 'classification_report', 'datetime']Dict:{'numpy': ['mean', 'sum', 'array', 'unique', 'isin', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'concat', 'get_dummies', 'unique', 'array'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': [], 'lightgbm': [], '=': [], 'pd': [], 'X': [], '': [], 'clf_final': [], 'datetime': ['replace']} axis_0: 1, axis_1: 14
comprehensive-machine-learning-through-titanic.py : ['read_csv', 'head', 'info', 'describe', 'hist', 'reset_index', 'value_counts', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'max', 'min', 'mean', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'reset_index', 'value_counts', 'rename', 'apply', 'sort_values', 'map', 'hist', 'boxplot', 'map', 'hist', 'boxplot', 'map', 'hist', 'boxplot', 'corr', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'corr', 'head', 'head', 'mean', 'groupby', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'apply', 'groupby', 'fillna', 'mean', 'head', 'drop', 'get_dummies', 'head', 'drop', 'sort_values'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'matplotlib.pyplot', 'pandas_profiling', 'plotly', 'plotly.graph_objs'] ['init_notebook_mode', 'iplot', 'train_test_split', 'RandomForestClassifier', 'LogisticRegression', 'average_precision_score', 'cross_val_score', 'precision_recall_curve', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'confusion_matrix', 'accuracy_score', 'GaussianNB', 'roc_curve', 'f1_score', 'auc', 'SVC']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'pandas_profiling': [], 'plotly': [], 'sklearn': []} axis_0: 0, axis_1: 2
how-to-detect-white-noise-and-random-walks-in-ts.py : ['read_csv', 'head', 'shift', 'shift', 'shift', 'head', 'drop', 'diff', 'diff', 'items', 'items'] ['warnings', 'matplotlib.pyplot', 'numpy', 'pandas', 'seaborn'] ['rcParams', 'plot_acf', 'RandomForestRegressor', 'train_test_split', 'adfuller']Dict:{'warnings': [], 'matplotlib': ['items'], 'numpy': ['diff'], 'pandas': ['read_csv'], 'seaborn': [], 'statsmodels': [], 'sklearn': []} axis_0: 0, axis_1: 1
exploring-categorical-encodings.py : ['to_json', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'max', 'apply', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'sort_index', 'value_counts', 'unique', 'sort_index', 'value_counts', 'items', 'copy', 'copy', 'value_counts', 'isin', 'isin', 'array', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'transform', 'reset_index', 'transform', 'unique', 'unique', 'keys', 'keys', 'map', 'transform', 'copy', 'transform', 'transform', 'transform', 'transform', 'rank', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'join', 'read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'any', 'any', 'isnull', 'any', 'any', 'isnull', 'nunique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'drop', 'drop', 'apply', 'mean', 'iterrows', 'sort_values', 'apply', 'mean', 'iterrows', 'sort_values', 'sort_values', 'to_csv', 'read_csv', 'read_csv', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'astype', 'astype', 'copy', 'apply', 'apply', 'replace', 'astype', 'apply', 'apply', 'apply', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'eli5', 'shap', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'altair', 'category_encoders'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit', 'metrics', 'linear_model', 'BayesianOptimization', 'HTML', 'OrdinalEncoder', 'WOEEncoder', 'TargetEncoder', 'SumEncoder', 'MEstimateEncoder', 'BackwardDifferenceEncoder', 'LeaveOneOutEncoder', 'HelmertEncoder', 'CatBoostEncoder', 'JamesSteinEncoder', 'OneHotEncoder', 'List', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'product', 'v5', 'HTML']Dict:{'numpy': ['mean', 'any', 'max', 'sum', 'array', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'array'], 'os': ['replace'], 'matplotlib': [], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'catboost': [], 'gc': [], 'seaborn': [], 'warnings': [], 'bayes_opt': [], 'eli5': [], 'shap': [], 'IPython': [], 'json': [], 'altair': [], 'networkx': [], 'category_encoders': [], 'typing': ['copy'], 'numba': [], 'itertools': []} axis_0: 1, axis_1: 4
feature-engineering-catboost.py : ['join', 'read_csv', 'read_csv', 'concat', 'reset_index', 'sort_values', 'qcut', 'value_counts', 'map', 'get_dummies', 'sum', 'isnull', 'sum', 'isnull', 'concat', 'rename', 'round', 'sort_values', 'drop', 'min', 'max', 'mean', 'std', 'skew', 'apply', 'apply', 'apply', 'apply', 'min', 'max', 'mean', 'std', 'skew', 'min', 'max', 'mean', 'std', 'skew', 'min', 'max', 'mean', 'max', 'max', 'min', 'max', 'mean', 'std', 'skew', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'mean', 'rolling', 'shift', 'groupby', 'mean', 'rolling', 'shift', 'groupby', 'mean', 'rolling', 'shift', 'groupby', 'mean', 'rolling', 'shift', 'groupby', 'where', 'notnull', 'notnull', 'where', 'notnull', 'reset_index', 'shift', 'agg', 'groupby', 'sort_values', 'merge', 'hist', 'hist', 'hist', 'sort_values', 'skew', 'where', 'to_pickle', 'head', 'reset_index', 'reset_index', 'drop', 'drop', 'where', 'astype', 'transform', 'astype', 'to_csv'] ['matplotlib.pyplot', 'numpy', 'pandas', 'tqdm', 'joblib', 'os', 'pickle5'] ['BaseEstimator', 'TransformerMixin', 'SelectFromModel', 'RandomForestRegressor', 'KFold', 'LabelEncoder', 'KNNImputer', 'CatBoostRegressor', 'TargetEncoder', 'mean_squared_error']Dict:{'matplotlib': ['hist'], 'sklearn': [], 'numpy': ['mean', 'max', 'sum', 'where', 'round', 'min', 'std'], 'pandas': ['to_pickle', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'notnull', 'qcut', 'merge'], 'tqdm': ['std'], 'catboost': [], 'category_encoders': [], 'joblib': [], 'os': ['rename']} axis_0: 0, axis_1: 29
foursquare-lgb-catboost.py : ['read_csv', 'head', 'drop', 'apply', 'astype', 'apply', 'astype', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'round', 'round', 'apply', 'apply', 'to_dict', 'value_counts', 'map', 'fillna', 'astype', 'join', 'add', 'add', 'add', 'add', 'fillna', 'groupby', 'reset_index', 'to_dict', 'value_counts', 'map', 'to_dict', 'value_counts', 'map', 'to_dict', 'value_counts', 'map', 'copy', 'mean', 'apply', 'apply', 'apply', 'apply', 'copy', 'mean', 'apply', 'apply', 'apply', 'apply', 'concat', 'drop_duplicates', 'apply', 'drop', 'concat', 'concat', 'drop', 'reset_index', 'fillna', 'astype', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'max', 'apply', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'apply', 'apply', 'drop', 'apply', 'drop', 'apply', 'drop', 'map', 'astype', 'isnull', 'apply', 'astype', 'isnull', 'drop', 'min', 'max', 'min', 'max', 'max', 'max', 'astype', 'drop', 'replace', 'fillna', 'reset_index', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'astype', 'read_csv', 'groupby', 'join', 'isin', 'map', 'map', 'join', 'to_dict', 'set_index', 'groupby', 'join', 'isin', 'read_csv', 'drop', 'merge', 'to_csv', 'head'] ['pandas', 'numpy', 'os', 'gc', 'random', 'warnings', 'pickle', 'reverse_geocode', 'string', 'Levenshtein', 'difflib', 'time', 'joblib'] ['patch_sklearn', 'tqdm', 'GroupKFold', 'unidecode', 'NearestNeighbors', 'AutoTokenizer', 'radians', 'sin', 'cos', 'sqrt', 'atan2', 'CatBoostClassifier']Dict:{'sklearnex': [], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'merge'], 'numpy': ['mean', 'add', 'max', 'sum', 'round', 'min', 'isin', 'copy'], 'tqdm': [], 'os': ['replace'], 'gc': [], 'random': [], 'sklearn': [], 'warnings': [], 'pickle': [], 'unidecode': [], 'reverse_geocode': [], 'string': [], 'Levenshtein': [], 'difflib': [], 'transformers': [], 'time': [], 'joblib': [], 'math': [], 'catboost': []} axis_0: 0, axis_1: 28
spaceship-titanic-10-models.py : ['read_csv', 'read_csv', 'head', 'info', 'value_counts', 'agg', 'groupby', 'sort_values', 'sum', 'isnull', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'sort_values', 'sum', 'isnull', 'value_counts', 'apply', 'unique', 'head', 'map', 'map', 'map', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'drop', 'head', 'describe', 'corr', 'sum', 'isnull', 'drop', 'mean', 'head', 'sort_values', 'sum', 'isnull', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'apply', 'unique', 'map', 'map', 'map', 'replace', 'replace', 'replace', 'replace', 'drop', 'head', 'sum', 'isnull', 'concat', 'replace', 'replace', 'rename', 'to_csv'] ['pandas', 'numpy', 'warnings', 'matplotlib.pyplot', 'seaborn'] ['train_test_split', 'KNeighborsClassifier', 'accuracy_score', 'AdaBoostClassifier', 'GaussianNB', 'DecisionTreeClassifier', 'MultinomialNB', 'SVC', 'RandomForestClassifier', 'MLPClassifier', 'GradientBoostingClassifier', 'LogisticRegression']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique'], 'numpy': ['mean', 'info', 'sum', 'unique'], 'warnings': [], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 4
data-science-bowl-2019-eda-and-baseline.py : ['head', 'drop_duplicates', 'merge', 'update', 'value_counts', 'value_counts', 'update', 'sort_values', 'value_counts', 'to_datetime', 'count', 'groupby', 'count', 'groupby', 'count', 'groupby', 'head', 'nunique', 'unique', 'unique', 'to_datetime', 'min', 'max', 'min', 'max', 'update', 'value_counts', 'update', 'unstack', 'count', 'groupby', 'nunique', 'isin', 'unique', 'isin', 'unique', 'nunique', 'drop', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'value_counts', 'value_counts', 'map', 'map', 'map', 'map', 'map', 'astype', 'to_datetime', 'to_datetime', 'groupby', 'query', 'sum', 'sum', 'copy', 'update', 'copy', 'update', 'copy', 'mean', 'update', 'keys', 'groupby', 'nunique', 'head', 'groupby', 'nunique', 'head', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'sum', 'transform', 'groupby', 'sum', 'sum', 'unique', 'where', 'where', 'keys', 'keys', 'items', 'keys', 'items', 'items', 'items', 'items', 'transform', 'transform', 'transform', 'transform', 'copy', 'copy', 'copy', 'copy', 'concat', 'astype', 'hist', 'hist', 'items', 'transform', 'transform', 'transform', 'drop', 'drop', 'drop', 'items', 'items', 'items', 'mean', 'std', 'mean', 'transform', 'copy', 'items', 'transform', 'drop', 'rank', 'isin', 'astype', 'mean', 'groupby', 'sort_values', 'keys', 'rename', 'reset_index', 'rename', 'melt', 'array', 'transform', 'drop', 'transform', 'transform', 'cut', 'cut', 'where', 'where', 'astype', 'to_csv', 'head'] ['pandas', 'numpy', 'seaborn', 'matplotlib.style', 'matplotlib.pylab', 'calendar', 'warnings', 'datetime', 'lightgbm', 'xgboost', 'copy', 'time', 'random', 'scipy'] ['time', 'tqdm_notebook', 'Counter', 'stats', 'GroupKFold', 'Any', 'jit', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'product', 'BaseEstimator', 'TransformerMixin', 'OrdinalEncoder', 'partial']Dict:{'pandas': ['cut', 'melt', 'concat', 'value_counts', 'unique', 'array', 'merge', 'to_datetime'], 'numpy': ['mean', 'max', 'sum', 'array', 'where', 'min', 'unique', 'isin', 'std', 'copy'], 'seaborn': [], 'matplotlib': ['mean', 'max', 'sum', 'array', 'where', 'min', 'unique', 'hist', 'isin', 'std', 'copy'], 'calendar': [], 'warnings': [], 'datetime': [], 'time': [], 'tqdm': ['update'], 'collections': ['items', 'keys', 'update', 'copy'], 'scipy': [], 'sklearn': [], 'typing': [], 'numba': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'itertools': [], 'copy': ['copy'], 'random': [], 'category_encoders': [], 'functools': []} axis_0: 4, axis_1: 8
0-908-don-t-try-this-at-home.py : ['read_csv', 'reset_index', 'sample', 'reset_index', 'concat', 'replace', 'read_csv', 'concat', 'transform', 'value_counts', 'to_csv'] ['numpy', 'pandas', 'xgboost'] ['LogisticRegression', 'XGBClassifier', 'TfidfVectorizer', 'VotingClassifier', 'SGDClassifier', 'KNeighborsClassifier']Dict:{'numpy': [], 'pandas': ['concat', 'read_csv', 'value_counts'], 'sklearn': [], 'xgboost': []} axis_0: 1, axis_1: 0
amex-data-preprocessing-eda-feature-engineering.py : ['read_feather', 'read_csv', 'head', 'head', 'any', 'isna', 'any', 'duplicated', 'nunique', 'value_counts', 'value_counts', 'rename', 'info', 'value_counts', 'unique', 'dropna', 'value_counts', 'value_counts', 'value_counts', 'unique', 'dropna', 'value_counts', 'value_counts', 'value_counts', 'unique', 'dropna', 'value_counts', 'value_counts', 'value_counts', 'unique', 'dropna', 'value_counts', 'value_counts', 'value_counts', 'unique', 'dropna', 'value_counts', 'value_counts', 'value_counts', 'unique', 'dropna', 'value_counts', 'value_counts', 'value_counts', 'unique', 'dropna', 'value_counts', 'value_counts', 'value_counts', 'unique', 'dropna', 'value_counts', 'value_counts', 'value_counts', 'unique', 'dropna', 'value_counts', 'value_counts', 'value_counts', 'unique', 'dropna', 'value_counts', 'value_counts', 'value_counts', 'unique', 'dropna', 'value_counts', 'value_counts', 'value_counts', 'describe', 'select_dtypes', 'sum', 'isnull', 'corr', 'describe', 'select_dtypes', 'sum', 'isnull', 'corr', 'describe', 'select_dtypes', 'sum', 'isnull'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'missingno', 'plotly.graph_objects', 'plotly.offline', 'plotly.express', 'random', 'plotly.figure_factory'] ['download_plotlyjs', 'init_notebook_mode', 'plot', 'iplot', 'make_subplots']Dict:{'numpy': ['info', 'unique', 'sum', 'any'], 'pandas': ['isna', 'read_csv', 'isnull', 'value_counts', 'read_feather', 'unique'], 'seaborn': [], 'matplotlib': [], 'missingno': [], 'plotly': [], 'random': []} axis_0: 0, axis_1: 0
simple-eda-and-xgb-baseline-in-2mins.py : ['read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'value_counts', 'select_dtypes', 'select_dtypes', 'value_counts', 'value_counts', 'corr', 'drop', 'rename', 'rename', 'set_index', 'astype', 'astype', 'ge', 'array', 'set_index', 'astype', 'reset_index', 'mean'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 're', 'math', 'warnings', 'time'] ['HTML', 'Counter', 'tqdm', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'StandardScaler', 'MinMaxScaler', 'LabelEncoder', 'roc_auc_score', 'accuracy_score', 'confusion_matrix', 'ConfusionMatrixDisplay', 'RocCurveDisplay', 'XGBClassifier', 'Style', 'Fore']Dict:{'IPython': [], 'pandas': ['array', 'value_counts', 'read_csv', 'isnull'], 'numpy': ['transpose', 'array', 'sum', 'mean'], 'matplotlib': [], 'seaborn': [], 'gc': [], 're': [], 'collections': [], 'tqdm': [], 'math': [], 'sklearn': [], 'warnings': [], 'time': [], 'xgboost': [], 'colorama': []} axis_0: 0, axis_1: 1
titanic-randomforest-simple-feature-engineering.py : ['read_csv', 'read_csv', 'info', 'head', 'info', 'head', 'sum', 'isnull', 'sum', 'isnull', 'corr', 'sort_values', 'median', 'groupby', 'median', 'apply', 'groupby', 'fillna', 'median', 'apply', 'groupby', 'fillna', 'median', 'isnull', 'fillna', 'sort_values', 'isnull', 'median', 'groupby', 'fillna', 'drop', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'value_counts', 'value_counts', 'drop', 'drop', 'corr', 'corr', 'transform', 'groupby', 'transform', 'groupby', 'drop', 'drop', 'head', 'head', 'replace', 'replace', 'replace', 'replace', 'drop', 'drop', 'head', 'transform', 'transform', 'astype', 'astype', 'transform', 'transform', 'astype', 'astype', 'transform', 'transform', 'astype', 'astype', 'transform', 'transform', 'astype', 'astype', 'tail', 'concat', 'concat', 'drop', 'drop', 'head', 'tail', 'sum', 'isnull', 'sum', 'isnull', 'transform', 'transform', 'head', 'head', 'drop', 'read_csv', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['RandomForestClassifier', 'OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'roc_curve', 'auc', 'StratifiedKFold', 'enable_hist_gradient_boosting', 'HistGradientBoostingRegressor', 'HistGradientBoostingClassifier', 'RandomizedSearchCV', 'GridSearchCV', 'accuracy_score']Dict:{'numpy': ['median', 'info', 'sum'], 'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 12
random-forest-starter-with-numerical-features.py : ['read_json', 'head', 'apply', 'apply', 'apply', 'to_datetime', 'head', 'read_json', 'apply', 'apply', 'apply', 'to_datetime', 'to_csv'] ['numpy', 'pandas'] ['check_output', 'RandomForestClassifier', 'train_test_split', 'log_loss']Dict:{'numpy': [], 'pandas': ['to_datetime', 'read_json'], 'subprocess': [], 'sklearn': []} axis_0: 0, axis_1: 0
wids-2022-eda-feature-engineering.py : ['join', 'update', 'read_csv', 'read_csv', 'head', 'head', 'isna', 'apply', 'apply', 'select_dtypes', 'select_dtypes', 'mean', 'isna', 'describe', 'min', 'max', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'corr', 'describe', 'value_counts', 'mean', 'mean', 'mean', 'groupby', 'fillna', 'mean', 'mean', 'groupby', 'apply', 'apply', 'head', 'select_dtypes', 'mean', 'groupby', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'os', 'gc', 'copy', 'numpy', 'pandas', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'shap', 'optuna', 'optuna.integration.lightgbm', 'warnings', 'wandb'] ['LabelEncoder', 'KFold', 'RepeatedKFold', 'mean_squared_error', 'stats', 'StandardScaler']Dict:{'numpy': ['mean', 'min', 'max'], 'pandas': ['isna', 'read_csv', 'value_counts'], 'os': [], 'gc': [], 'copy': [], 'sklearn': [], 'lightgbm': [], 'matplotlib': [], 'seaborn': [], 'scipy': ['describe'], 'shap': [], 'optuna': [], 'warnings': [], 'wandb': []} axis_0: 0, axis_1: 4
eda-on-basic-data-and-lgb-in-progress.py : ['read_csv', 'merge', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'to_datetime', 'apply', 'to_datetime', 'apply', 'nunique', 'drop', 'drop', 'drop', 'astype', 'head', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'sum', 'hist', 'isna', 'reset_index', 'sum', 'groupby', 'isna', 'hist', 'value_counts', 'nunique', 'sum', 'sum', 'sum', 'sum', 'head', 'fillna', 'boxplot', 'count', 'groupby', 'count', 'groupby', 'count', 'groupby', 'sum', 'groupby', 'min', 'max', 'min', 'max', 'head', 'sort_values', 'agg', 'groupby', 'mean', 'groupby', 'sum', 'groupby', 'mean', 'groupby', 'sum', 'groupby', 'hist', 'fillna', 'hist', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'fillna', 'fillna', 'astype', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'mean', 'mean', 'mean', 'mean', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'sort_values', 'drop', 'drop', 'copy', 'apply', 'fillna', 'reset_index', 'sum', 'groupby', 'to_csv'] ['numpy', 'pandas', 'json', 'bq_helper', 'seaborn', 'matplotlib.pyplot', 'lightgbm'] ['json_normalize', 'LabelEncoder', 'TimeSeriesSplit', 'KFold', 'mean_squared_error']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'copy'], 'pandas': [], 'json': [], 'bq_helper': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'lightgbm': [], 'sklearn': []} axis_0: 0, axis_1: 6
feature-engineering-lgbm-dkt-saks-saint.py : ['concat', 'concat', 'copy', 'copy', 'copy', 'copy', 'copy', 'array', 'array', 'array', 'read_pickle', 'read_pickle', 'reset_index', 'reset_index', 'mean', 'dropna', 'reset_index', 'agg', 'groupby', 'reset_index', 'tail', 'groupby', 'reset_index', 'tail', 'groupby', 'reset_index', 'read_csv', 'fillna', 'factorize', 'merge', 'merge', 'fillna', 'fillna', 'merge', 'merge', 'merge', 'merge', 'fillna', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'items', 'groupby', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'max', 'groupby', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'to_numpy', 'max', '__init__', 'transpose', 'transpose', '__init__', '__init__', '__init__', 'max', 'max', '__init__', '__init__', '__init__', '__init__', '__init__', 'max', 'max', 'max', 'max', 'array', 'merge', 'reset_index', 'merge', 'astype', 'fillna', 'fillna', 'copy'] ['pickle', 'pandas', 'numpy', 'gc', 'lightgbm', 'optuna', 'matplotlib.pyplot', 'tensorflow', 'riiideducation'] ['roc_auc_score', 'defaultdict', 'deque', 'tqdm', 'Sequential', 'Model', 'Dense', 'Dropout', 'LSTM', 'Masking', 'Embedding', 'Concatenate', 'Input', 'concatenate', 'AUC', 'backend', 'Lambda', 'multiply', 'Reshape', 'Sequence', 'pad_sequences']Dict:{'pickle': [], 'pandas': ['read_csv', 'concat', 'factorize', 'read_pickle', 'array', 'merge'], 'numpy': ['transpose', 'mean', 'max', 'array', 'copy'], 'gc': [], 'sklearn': ['__init__'], 'collections': ['__init__', 'copy'], 'tqdm': ['__init__'], 'lightgbm': [], 'optuna': [], 'matplotlib': [], 'tensorflow': ['__init__'], 'riiideducation': []} axis_0: 0, axis_1: 4
titanic-survival.py : ['join', 'read_csv', 'read_csv', 'info', 'unique', 'unique', 'select_dtypes', 'transform', 'info', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os'] ['enable_iterative_imputer', 'IterativeImputer', 'OneHotEncoder', 'GridSearchCV', 'make_column_transformer', 'make_pipeline', 'RandomForestClassifier']Dict:{'numpy': ['info', 'unique'], 'pandas': ['unique', 'read_csv'], 'os': [], 'sklearn': []} axis_0: 0, axis_1: 0
eda-feature-engineer-and-baseline-lgbm.py : ['join', 'read_csv', 'read_csv', 'head', 'head', 'reset_index', 'sum', 'isnull', 'astype', 'sort_values', 'head', 'corr', 'head', 'reset_index', 'value_counts', 'sort_values', 'reset_index', 'agg', 'groupby', 'nunique', 'nunique', 'isna', 'keys', 'apply', 'apply', 'get', 'get', 'get', 'get', 'isin', 'value_counts', 'value_counts', 'isin', 'value_counts', 'value_counts', 'isin', 'value_counts', 'value_counts', 'isin', 'value_counts', 'value_counts', 'map', 'map', 'map', 'map', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'map', 'map', 'map', 'map', 'map', 'drop', 'drop', 'apply', 'apply', 'fillna', 'fillna', 'apply', 'concat', 'to_dict', 'value_counts', 'map', 'astype', 'map', 'astype', 'astype', 'astype', 'astype', 'astype', 'concat', 'to_dict', 'agg', 'groupby', 'astype', 'map', 'astype', 'map', 'concat', 'rename', 'reset_index', 'agg', 'groupby', 'to_dict', 'astype', 'map', 'astype', 'map', 'fillna', 'fillna', 'reset_index', 'concat', 'cut', 'cut', 'astype', 'astype', 'concat', 'factorize', 'max', 'astype', 'astype', 'drop', 'drop', 'read_csv', 'stack', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'math', 'matplotlib.pyplot', 'lightgbm', 'warnings', 'os'] ['LabelEncoder', 'KFold', 'mean_squared_error']Dict:{'pandas': ['isna', 'read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'factorize'], 'numpy': ['isin', 'stack', 'sum', 'max'], 'seaborn': [], 'sklearn': [], 'math': [], 'matplotlib': ['get'], 'lightgbm': [], 'warnings': [], 'os': ['rename']} axis_0: 2, axis_1: 4
online-fe-lgbm-feval-importances.py : ['sum', 'sum', 'sum', 'sum', 'read_csv', 'read_parquet', 'read_parquet', 'unique', 'unique', 'unique', 'unique', 'isin', 'isin', 'astype', 'map', 'astype', 'map', 'array', 'max', 'array', 'array', 'pivot', 'mean', 'mean', 'sort_values', 'median', 'boxplot', 'array'] ['gresearch_crypto', 'pandas', 'numpy', 'os', 'gc', 'pickle', 'time', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings'] ['datetime']Dict:{'gresearch_crypto': [], 'pandas': ['read_csv', 'read_parquet', 'unique', 'array', 'pivot'], 'numpy': ['mean', 'median', 'max', 'sum', 'unique', 'isin', 'array'], 'os': [], 'gc': [], 'pickle': [], 'time': [], 'datetime': ['max'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'lightgbm': [], 'warnings': [], '=': [], '[]': []} axis_0: 2, axis_1: 1
tps-march-a-complete-study.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'drop', 'select_dtypes', 'select_dtypes', 'reset_index', 'concat', 'drop', 'abs', 'corr', 'bool', 'corrwith', 'sort_values', 'count', 'groupby', 'sort_values', 'count', 'groupby', 'sort_values', 'count', 'groupby', 'sort_values', 'count', 'groupby', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'sort_values', 'count', 'groupby', 'sort_values', 'count', 'groupby', 'unique', 'unique', 'transform', 'transform', 'transform', 'transform', 'head', 'to_csv', 'to_csv', 'concat', 'head', 'describe', 'head', 'to_csv', 'head', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['plotly.express', 'plotly.graph_objects', 'plotly.figure_factory', 'matplotlib.pyplot', 'seaborn', 'math', 'lightgbm', 'optuna', 'numpy', 'pandas', 'os', 'warnings', 'h2o'] ['make_subplots', 'Fore', 'ProfileReport', 'metrics', 'stats', 'tqdm', 'deepcopy', 'RandomForestRegressor', 'XGBRegressor', 'LGBMRegressor', 'LabelEncoder', 'GridSearchCV', 'KFold', 'cross_val_score', 'Trial', 'visualization', 'train_test_split', 'f1_score', 'confusion_matrix', 'accuracy_score', 'mean_squared_error', 'CatBoostEncoder', 'LeaveOneOutEncoder', 'LabelEncoder', 'deepcopy', 'LGBMClassifier', 'XGBClassifier', 'roc_auc_score', 'CatBoostClassifier', 'RidgeClassifier', 'StratifiedKFold', 'expit', 'CalibratedClassifierCV', 'expit', 'CalibratedClassifierCV', 'H2OAutoML', 'expit', 'CalibratedClassifierCV']Dict:{'plotly': [], 'matplotlib': [], 'colorama': [], 'pandas_profiling': [], 'seaborn': [], 'sklearn': [], 'scipy': [], 'math': [], 'tqdm': [], 'copy': [], 'xgboost': ['apply'], 'lightgbm': [], 'optuna': [], 'numpy': ['abs', 'unique'], 'pandas': ['concat', 'unique', 'read_csv'], 'os': [], 'category_encoders': [], 'warnings': [], 'catboost': [], 'h2o': []} axis_0: 1, axis_1: 3
google-quest-first-data-introduction.py : ['join', 'head', 'head', 'sum', 'isna', 'sum', 'isna', 'value_counts', 'value_counts', 'join', 'join', 'join', 'join', 'join', 'join', 'corr', 'unique', 'unique', 'unique', 'unique', 'count', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'clip', 'value_counts', 'value_counts', 'map', 'map', 'map', 'map'] ['gc', 'os', 'random', 'sys', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'plotly.express', 'plotly.figure_factory', 'lightgbm', 'xgboost', 'catboost', 'numpy', 'pandas', 'os'] ['Path', 'tqdm_notebook', 'display', 'HTML', 'tools', 'subplots', 'preprocessing', 'KFold', 'WordCloud', 'cdist']Dict:{'gc': [], 'os': [], 'pathlib': [], 'random': [], 'sys': [], 'tqdm': [], 'numpy': ['sum', 'unique', 'clip'], 'pandas': ['isna', 'unique', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'IPython': [], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'wordcloud': [], 'scipy': []} axis_0: 2, axis_1: 0
lightgbm-feature-engineering-kfold.py : ['read_csv', 'read_csv', 'array', 'unique', 'isin', 'isin', 'fillna', 'to_datetime', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'factorize', 'concat', 'mean', 'groupby', 'map', 'sort_values', 'mean', 'groupby', 'mean', 'median', 'sum', 'sum', 'fillna', 'sum', 'isnull', 'concat', 'mean', 'groupby', 'mean', 'median', 'sum', 'sum', 'fillna', 'sum', 'isnull', 'concat', 'sum', 'groupby', 'reset_index', 'concat', 'mean', 'groupby', 'map', 'sort_values', 'to_csv'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'time', 'warnings', 'lightgbm', 'warnings'] ['mean_squared_error', 'SettingWithCopyWarning', 'GroupKFold']Dict:{'os': [], 'pandas': [], 'numpy': ['mean', 'median', 'sum', 'unique', 'isin', 'array'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'gc': [], 'time': [], 'warnings': [], 'lightgbm': [], '=': [], 'pd': [], 'np': [], "importances['feature']": []} axis_0: 2, axis_1: 12
extensive-poverty-eda-feature-engineering-and-lgb.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'any', 'isnull', 'sum', 'isnull', 'any', 'isnull', 'sum', 'isnull', 'nunique', 'nunique', 'reset_index', 'agg', 'groupby', 'head', 'unique', 'drop_duplicates', 'mean', 'groupby', 'boxplot', 'agg', 'groupby', 'agg', 'groupby', 'boxplot', 'copy', 'multiply', 'sum', 'drop', 'value_counts', 'unique', 'unique', 'unique', 'unique', 'apply', 'apply', 'apply', 'apply', 'unique', 'unique', 'unique', 'unique', 'apply', 'apply', 'fillna', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'fillna', 'fillna', 'transform', 'transform', 'transform', 'transform', 'drop', 'drop', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm'] ['train_test_split', 'LabelEncoder', 'StratifiedKFold']Dict:{'numpy': ['mean', 'any', 'sum', 'unique', 'multiply', 'copy'], 'pandas': ['isnull', 'unique', 'read_csv', 'value_counts'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 8
the-hitchhiker-s-guide-to-the-kaggle.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'apply', 'join', 'join', 'join', 'apply', 'sort_index', 'value_counts', 'rename', 'drop', 'value_counts', 'sort_index', 'value_counts', 'unstack', 'value_counts', 'groupby', 'apply', 'unique', 'round', 'value_counts', 'fillna', 'unstack', 'value_counts', 'groupby', 'value_counts', 'count', 'groupby', 'value_counts', 'round', 'round', 'drop', 'rename', 'drop', 'apply', 'fillna', 'drop', 'corr', 'bool', 'rename', 'dropna', 'drop', 'rename', 'update', 'value_counts', 'apply', 'fillna', 'drop', 'concat', 'corr', 'value_counts', 'drop', 'rename', 'drop', 'value_counts', 'drop', 'fillna', 'unstack', 'value_counts', 'groupby', 'dropna', 'drop', 'value_counts', 'drop', 'fillna', 'unstack', 'value_counts', 'groupby', 'dropna', 'drop', 'update', 'value_counts', 'drop', 'update', 'value_counts', 'drop', 'update', 'value_counts', 'drop', 'update', 'value_counts', 'drop', 'value_counts', 'drop', 'value_counts', 'groupby', 'count', 'groupby', 'drop', 'rename', 'drop', 'fillna', 'concat', 'unique', 'unique', 'unique', 'value_counts', 'unique', 'value_counts', 'groupby', 'drop', 'rename', 'drop', 'fillna', 'concat', 'unique', 'unique', 'unique', 'value_counts', 'unique', 'value_counts', 'groupby', 'drop', 'value_counts', 'fillna', 'unstack', 'value_counts', 'groupby', 'update', 'fillna', 'unstack', 'value_counts', 'groupby', 'drop', 'apply', 'fillna', 'unstack', 'value_counts', 'groupby', 'rename', 'fillna', 'unstack', 'value_counts', 'groupby', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'fillna', 'unstack', 'value_counts', 'groupby', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'map', 'dropna', 'fillna', 'unstack', 'mean', 'groupby', 'fillna', 'unstack', 'value_counts', 'groupby', 'value_counts', 'value_counts', 'drop', 'update', 'value_counts', 'drop', 'update', 'value_counts', 'drop', 'value_counts', 'fillna', 'unstack', 'value_counts', 'groupby', 'fillna', 'unstack', 'value_counts', 'groupby'] ['numpy', 'pandas', 'os', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'missingno', 'networkx', 'plotly.graph_objects', 'numpy', 'plotly.graph_objects'] ['display', 'HTML', 'Waffle', 'make_subplots', 'Video', 'Waffle']Dict:{'numpy': ['mean', 'round', 'unique'], 'pandas': ['concat', 'unique', 'read_csv', 'value_counts'], 'os': ['rename'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'missingno': [], 'networkx': [], 'IPython': [], 'pywaffle': []} axis_0: 23, axis_1: 6
tpsjan22-05-keras-quickstart.py : ['array', 'array', 'array', 'read_csv', 'read_csv', 'to_datetime', 'head', 'read_csv', 'set_index', 'abs', 'abs', 'apply', 'concat', 'concat', 'concat', 'map', 'concat', 'map', 'concat', 'concat', 'apply', 'concat', 'astype', 'astype', 'transform', 'mean', 'transform', 'mean', 'date_range', 'set_index', 'transform', 'transform', 'copy', 'to_csv', 'hist', 'hist', 'copy', 'round', 'to_csv', 'transform', 'max', 'hist', 'mean', 'std', 'mean', 'abs', 'groupby', 'mean', 'count', 'std', 'std', 'mean', 'abs', 'apply', 'min', 'groupby', 'mean', 'unique', 'unique'] ['pandas', 'numpy', 'pickle', 'itertools', 'gc', 'math', 'matplotlib.pyplot', 'dateutil.easter', 'scipy.stats', 'tensorflow'] ['MaxNLocator', 'FormatStrFormatter', 'PercentFormatter', 'datetime', 'date', 'StandardScaler', 'MinMaxScaler', 'GroupKFold', 'make_pipeline', 'Model', 'ReduceLROnPlateau', 'LearningRateScheduler', 'EarlyStopping', 'Dense', 'Input', 'InputLayer', 'Add']Dict:{'pandas': ['read_csv', 'date_range', 'concat', 'unique', 'array', 'to_datetime'], 'numpy': ['mean', 'max', 'abs', 'array', 'round', 'min', 'unique', 'std', 'copy'], 'pickle': [], 'itertools': ['count', 'groupby'], 'gc': [], 'math': [], 'matplotlib': [], 'dateutil': [], 'datetime': ['min', 'max'], 'scipy': [], 'sklearn': [], 'tensorflow': []} axis_0: 0, axis_1: 8
feature-engineering-pred.py : ['read_csv', 'astype', 'sort_values', 'read_csv', 'fillna', 'read_csv', 'median', 'mean', 'dropna', 'std', 'rolling', 'array', 'array', 'head', 'concat', 'head', 'concat', 'head', 'tail', 'head', 'astype', 'drop', 'array', 'head', 'drop', 'drop', 'head', 'drop', 'drop', 'drop', 'concat', 'mean', 'std'] ['numpy', 'pandas', 'matplotlib.pyplot', 'pandas', 'os', 'dask.dataframe', 'librosa', 'pywt', 'scipy', 'itertools', 'gc', 'lightgbm', 'gc', 'lightgbm', 'math'] ['glob', 'feature_calculators', 'Parallel', 'delayed', 'tqdm_notebook', 'mean_absolute_error', 'LGBMRegressor', 'CatBoostRegressor', 'XGBRegressor', 'StandardScaler', 'cross_val_score', 'train_test_split', 'StratifiedKFold', 'MinMaxScaler', 'StandardScaler', 'scale', 'mean_absolute_error', 'KFold', 'StratifiedKFold']Dict:{'numpy': ['mean', 'median', 'array', 'std'], 'pandas': ['concat', 'array', 'read_csv'], 'matplotlib': [], 'glob': [], 'os': [], 'dask': ['concat', 'rolling', 'read_csv'], 'tsfresh': [], 'librosa': [], 'pywt': [], 'joblib': [], 'tqdm': [], 'scipy': [], 'itertools': [], 'gc': [], 'sklearn': [], 'lightgbm': [], 'catboost': [], 'xgboost': [], 'math': [], '': []} axis_0: 2, axis_1: 4
k-thu-t-feature-engineering.py : ['head', 'get', 'array', 'get', 'array', 'map', 'apply', 'head', 'apply', 'mean', 'std', 'min', 'max', 'min', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean'] ['json', 'pandas', 'numpy', 'sys', 'requests', 'matplotlib.pyplot', 'numpy', 'sys', 'reverse_geocoder', 'user_agents', 'statsmodels.api', 'numpy'] ['reduce', 'CountVectorizer', 'CountVectorizer', 'euclidean', 'image_to_string', 'Image', 'BytesIO', 'datetime', 'StandardScaler', 'beta', 'shapiro', 'MinMaxScaler', 'VarianceThreshold', 'make_classification', 'SelectKBest', 'f_classif', 'LogisticRegression', 'cross_val_score', 'RandomForestClassifier', 'LinearSVC', 'SelectFromModel', 'cross_val_score', 'make_pipeline', 'SequentialFeatureSelector']Dict:{'json': [], 'pandas': ['array'], 'functools': [], 'numpy': ['mean', 'max', 'array', 'min', 'std'], 'sklearn': [], 'scipy': [], 'sys': [], 'pytesseract': [], 'PIL': [], 'requests': ['head', 'get'], 'io': [], 'matplotlib': ['get'], 'reverse_geocoder': [], 'datetime': ['min', 'max'], 'user_agents': [], 'statsmodels': [], 'mlxtend': []} axis_0: 0, axis_1: 0
lgbm-multiple-classifier-with-max-depth-6.py : ['read_csv', 'head', 'isna', 'clip', 'apply', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'apply', 'isna', 'replace', 'apply', 'isna', 'apply', 'isna', 'apply', 'apply', 'isna', 'apply', 'isna', 'replace', 'replace', 'replace', 'apply', 'isna', 'replace', 'apply', 'isna', 'replace', 'replace', 'apply', 'astype', 'rename', 'merge', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'map', 'apply', 'merge', 'apply', 'merge', 'reset_index', 'sort_values', 'sort_values', 'sort_values', 'value_counts', 'where', 'isin', 'value_counts', 'where', 'isin', 'to_pickle', 'drop', 'drop', 'unique', 'unique', 'fillna', 'astype', 'value_counts', 'unique', 'transform', 'fillna', 'std', 'std', 'std', 'std', 'reset_index', 'reset_index', 'transpose', 'stack', 'reset_index', 'reset_index', 'transpose', 'stack', 'reset_index', 'apply', 'mean', 'stack', 'cumsum', 'max', 'mean', 'mean', 'mean', 'astype', 'reset_index', 'agg', 'groupby', 'head', 'sort_values', 'tail', 'sort_values', 'quantile', 'drop', 'fillna', 'astype', 'isin', 'sum', 'transform', 'fillna', 'transform', 'reset_index', 'transpose', 'stack', 'reset_index', 'reset_index', 'transpose', 'stack', 'reset_index', 'clip', 'mean', 'diff', 'mean', 'mean'] ['numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib', 'seaborn', 'datetime', 'tqdm', 'keras', 'warnings'] ['nflrush', 'RandomForestRegressor', 'StandardScaler', 'LabelEncoder', 'tqdm_notebook', 'LGBMClassifier', 'train_test_split', 'KFold']Dict:{'numpy': ['transpose', 'mean', 'stack', 'quantile', 'max', 'sum', 'where', 'unique', 'clip', 'isin', 'diff', 'std', 'cumsum'], 'pandas': ['to_pickle', 'isna', 'read_csv', 'value_counts', 'unique', 'merge'], 'matplotlib': [], 'seaborn': [], 'datetime': [], 'kaggle': [], 'tqdm': [], 'sklearn': [], 'keras': [], 'warnings': [], 'lightgbm': []} axis_0: 0, axis_1: 2
pytorch-nn-cyclelr-k-fold-0-897-lightgbm-0-899.py : ['read_csv', 'read_csv', 'head', 'drop', 'drop', 'transform', 'mode', 'mode', 'mode', 'mode', 'abs', '__init__', 'array', 'array', 'array', 'astype', 'astype', 'astype', 'astype', 'eval', 'drop', 'drop', 'array', 'array', 'astype', 'astype', 'astype', 'astype', 'concat', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'time', 'matplotlib.pyplot', 'torch', 'torch.nn', 'torch.nn.functional', 'torch.optim', 'lightgbm', 'os'] ['StratifiedKFold', 'roc_auc_score', 'train_test_split', 'StandardScaler', 'Variable', 'Dataset', 'DataLoader', 'mean_squared_error', 'StandardScaler', 'Optimizer']Dict:{'numpy': ['abs', 'array'], 'pandas': ['concat', 'array', 'eval', 'read_csv'], 'time': [], 'sklearn': ['transform', '__init__'], 'matplotlib': [], 'torch': [], 'lightgbm': [], 'os': []} axis_0: 1, axis_1: 0
ieee-fraud-detection-feature-engineering.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'drop', 'date_range', 'min', 'max', 'apply', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'isin', 'astype', 'read_csv', 'merge', 'merge', 'apply', 'apply', 'apply', 'replace', 'replace', 'apply', 'map', 'apply', 'astype', 'map', 'map', 'map', 'concat', 'value_counts', 'std', 'isin', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'astype', 'astype', 'astype', 'astype', 'keys', 'concat', 'agg', 'groupby', 'reset_index', 'merge', 'merge', 'agg', 'groupby', 'reset_index', 'merge', 'merge', 'sum', 'isna', 'sum', 'isna', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'concat', 'to_dict', 'value_counts', 'map', 'map', 'map', 'map', 'to_pickle', 'to_pickle'] ['gc', 'os', 'logging', 'datetime', 'warnings', 'pickle', 'optuna', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm'] ['tqdm_notebook', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'train_test_split', 'roc_auc_score', 'preprocessing', 'USFederalHolidayCalendar']Dict:{'gc,': [], 'os,': [], 'logging,': [], 'datetime,': [], 'warnings,': [], 'pickle,': [], 'optuna': [], 'numpy': ['max', 'sum', 'where', 'min', 'isin', 'std'], 'pandas': [], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'tqdm': [], 'sklearn': []} axis_0: 0, axis_1: 3
gbt5f.py : ['read_csv', 'apply', 'fillna', 'reset_index', 'sort_values', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'apply', 'fillna', 'max', 'max', 'min', 'min', 'merge', 'astype', 'fillna', 'max', 'reset_index', 'concat', 'max', 'std', 'value_counts', 'fillna', 'value_counts', 'read_csv', 'fillna', 'drop_duplicates', 'drop', 'merge', 'cummax', 'groupby', 'describe', 'read_csv', 'head', 'drop', 'merge', 'merge', 'reset_index', 'sort_values', 'value_counts', 'value_counts', 'read_csv', 'fillna', 'max', 'copy', 'to_datetime', 'value_counts', 'max', 'merge', 'describe', 'read_csv', 'fillna', 'max', 'to_datetime', 'drop', 'merge', 'describe', 'read_csv', 'merge', 'notnull', 'isnull', 'merge', 'notnull', 'notnull', 'notnull', 'notnull', 'drop', 'read_csv', 'read_csv', 'rename', 'merge', 'transform', 'apply', 'join', 'merge', 'read_csv', 'drop', 'fillna', 'describe', 'replace', 'replace', 'replace', 'describe', 'nunique', 'drop_duplicates', 'max', 'to_datetime', 'merge', 'drop_duplicates', 'drop', 'merge', 'read_csv', 'to_datetime', 'rename', 'replace', 'cummax', 'groupby', 'cummax', 'groupby', 'read_csv', 'rename', 'drop', 'concat', 'merge', 'describe', 'notnull', 'describe', 'read_csv', 'rename', 'fillna', 'drop', 'unique', 'reindex', 'reset_index', 'concat', 'melt', 'to_datetime', 'drop', 'merge', 'describe', 'transform', 'groupby', 'sum', 'reset_index', 'sort_values', 'reset_index', 'drop_duplicates', 'nunique', 'transpose', 'transpose', 'describe', 'astype', 'describe', 'drop_duplicates', 'notnull', 'corr', 'to_datetime', 'describe', 'min', 'describe', 'notnull', 'transform', 'groupby', 'min', 'drop', 'drop_duplicates', 'merge', 'clip', 'fillna', 'drop', 'std', 'value_counts', 'mean', 'ewm', 'transform', 'groupby', 'diff', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'transform', 'groupby', 'transform', 'groupby', 'diff', 'transform', 'groupby', 'mean', 'rolling', 'transform', 'groupby', 'transform', 'groupby', 'diff', 'transform', 'groupby', 'mean', 'rolling', 'transform', 'groupby', 'transform', 'groupby', 'diff', 'transform', 'groupby', 'mean', 'rolling', 'transform', 'groupby', 'transform', 'groupby', 'diff', 'transform', 'groupby', 'mean', 'rolling', 'transform', 'groupby', 'transform', 'groupby', 'diff', 'transform', 'groupby', 'mean', 'rolling', 'transform', 'groupby', 'describe', 'reset_index', 'sort_values', 'nunique', 'get_dummies', 'concat', 'describe', 'describe', 'astype', 'copy', 'cummax', 'groupby', 'shift', 'cummax', 'groupby', 'clip', 'copy', 'transform', 'groupby', 'shift', 'copy', 'cummax', 'groupby', 'shift', 'cummax', 'groupby', 'clip', 'copy', 'transform', 'groupby', 'shift', 'concat', 'concat', 'to_numeric', 'to_numeric', 'reset_index', 'sort_values', 'mean', 'copy', 'copy', 'copy', 'transform', 'mean', 'clip', 'abs', 'set_index', 'sum', 'sort_values', 'head', 'reset_index', 'reset_index', 'sort_values', 'mean', 'copy', 'copy', 'transform', 'mean', 'clip', 'abs', 'set_index', 'sum', 'sort_values', 'head', 'reset_index', 'array', 'join', 'join', 'mean', 'concat', 'to_csv', 'describe', 'describe', 'mean', 'reset_index', 'drop_duplicates', 'stack', 'stack', 'mean', 'drop_duplicates', 'clip', 'drop_duplicates', 'sort_values', 'sort_values', 'min', 'astype', 'astype', 'describe', 'max', 'read_csv', 'drop', 'merge', 'fillna', 'fillna', 'read_csv', 'drop', 'merge', 'copy', 'corr', 'copy', 'to_csv', 'describe', 'copy', 'copy', 'read_csv', 'read_csv', 'fillna', 'copy', 'fillna', 'sort_values', 'head', 'merge', 'head', 'merge', 'round', 'round', 'head', 'describe', 'merge', 'where', 'where', 'head', 'sort_values', 'last', 'groupby', 'round', 'round', 'unique', 'sort_values', 'concat', 'isin', 'to_csv', 'describe', 'describe', 'copy', 'drop', 'drop', 'merge', 'describe', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'drop_duplicates', 'set_index', 'set_index', 'describe', 'read_csv', 'describe', 'to_csv'] ['numpy', 'pandas', 'os', 'gc', 'lightgbm', 'xgboost', 'catboost', 'matplotlib.pyplot', 'seaborn'] ['date', 'datetime', 'timedelta', 'mean_squared_error', 'LabelEncoder', 'OneHotEncoder', 'StandardScaler', 'KNeighborsRegressor', 'NearestNeighbors', 'Ridge', 'nnls', '*']Dict:{'numpy': ['transpose', 'mean', 'stack', 'max', 'abs', 'sum', 'array', 'where', 'round', 'min', 'unique', 'clip', 'isin', 'diff', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'melt', 'concat', 'value_counts', 'get_dummies', 'to_numeric', 'unique', 'notnull', 'array', 'merge', 'to_datetime'], 'os,': [], 'gc': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'matplotlib': [], 'seaborn': [], 'datetime': ['min', 'max'], 'sklearn': [], 'scipy': []} axis_0: 4, axis_1: 30
feature-engineering-and-lightgbm-starter.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'fillna', 'fillna', 'mean', 'agg', 'groupby', 'droplevel', 'rename', 'reset_index', 'merge', 'merge', 'head', 'agg', 'groupby', 'droplevel', 'rename', 'reset_index', 'merge', 'merge', 'head', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'concat', 'concat', 'sum', 'isnull', 'fillna', 'mean', 'copy', 'concat', 'mean', 'groupby', 'map', 'sort_values', 'to_csv', 'head'] ['os', 'gc', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'warnings'] ['mean_squared_error', 'KFold']Dict:{'os': ['rename'], 'gc': [], 'numpy': ['mean', 'sum', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'merge'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'lightgbm': [], 'warnings': [], '=': [], 'pd': [], "importances['gain']": [], "importances['feature']": []} axis_0: 1, axis_1: 2
tps-aug-simple-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'concat', 'astype', 'isnull', 'astype', 'isnull', 'sort_values', 'corr', 'drop', 'round', 'sum', 'reset_index', 'sort_values', 'head', 'unique', 'sort_values', 'corr', 'drop', 'sum', 'isnull', 'unique', 'keys', 'dropna', 'sum', 'isnull', 'isnull', 'sum', 'isnull', 'isnull', 'sum', 'sum', 'isnull', 'mean', 'transform', 'transform', 'transform', 'transform', 'copy', 'copy', 'copy', 'read_csv', 'to_csv', 'read_csv', 'to_csv'] ['sys', 'os', 'sys', 'joblib', 'numpy', 'pandas', 'gc', 'warnings'] ['LGBMClassifier', 'KNNImputer', 'roc_auc_score', 'GaussianNB', 'WoEEncoder', 'StandardScaler', 'StratifiedKFold', 'LGBMImputer', 'LogisticRegression', 'HuberRegressor']Dict:{'sys;': [], 'sys': [], 'os': [], 'joblib': [], 'numpy': ['mean', 'sum', 'round', 'unique', 'copy'], 'pandas': ['concat', 'unique', 'read_csv', 'isnull'], 'gc;': [], 'gc': [], 'lightgbm': [], 'sklearn': [], 'feature_engine': [], 'kuma_utils': [], 'warnings;': [], 'warnings': []} axis_0: 0, axis_1: 6
house-prices-top-4.py : ['read_csv', 'read_csv', 'read_csv', 'copy', 'describe', 'describe', 'rename', 'reset_index', 'unique', 'sort_values', 'rename', 'reset_index', 'unique', 'sort_values', 'rename', 'sort_values', 'merge', 'rename', 'reset_index', 'sum', 'isna', 'sort_values', 'rename', 'reset_index', 'sum', 'isna', 'sort_values', 'concat', 'copy', 'replace', 'fillna', 'fillna', 'mode', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'copy', 'query', 'copy', 'query', 'drop', 'copy', 'reset_index', 'sample', 'reset_index', 'reset_index', 'mean', 'abs', 'items', 'sort_values', 'items', 'mean', 'copy', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'mean', 'concat', 'sample', 'copy', 'transform', 'transform', 'transform', 'transform', 'transform', 'sample', 'copy', 'copy', 'reset_index', 'reset_index', 'copy', 'update', 'mean', 'std', 'rename', 'reset_index', 'copy', 'mean', 'to_csv', 'sample', 'mean', 'to_csv', 'sample'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'shap', 'xgboost', 'catboost', 'lightgbm', 'warnings'] ['model_selection', 'preprocessing', 'impute', 'metrics', '*', '*', 'TargetEncoder', 'CatBoostEncoder', 'GLMMEncoder', 'CountEncoder', 'LOFOImportance', 'Dataset', 'plot_importance', 'kernel_ridge', 'linear_model', 'neighbors', 'naive_bayes', 'ensemble', 'svm', 'neural_network']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'unique', 'merge'], 'numpy': ['mean', 'abs', 'sum', 'unique', 'std', 'copy'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'feature_engine': [], 'category_encoders': [], 'shap': [], 'lofo': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 4
molecular-properties-eda-and-models.py : ['to_json', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'max', 'apply', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'groupby', 'abs', 'mean', 'map', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'nunique', 'nunique', 'nunique', 'nunique', 'describe', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'sort_index', 'value_counts', 'cut', 'astype', 'hist', 'unique', 'unique', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'isin', 'isin', 'merge', 'drop', 'rename', 'apply', 'apply', 'apply', 'apply', 'hist', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'transform', 'head', 'drop', 'drop', 'to_csv', 'head', 'hist'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'altair'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'metrics', 'linear_model', 'HTML', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'product', 'v5', 'HTML']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'min', 'unique', 'isin', 'std'], 'pandas': ['read_csv', 'cut', 'concat', 'value_counts', 'unique', 'merge'], 'os': ['rename'], 'matplotlib': ['hist'], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'catboost': [], 'gc': [], 'seaborn': [], 'warnings': [], 'IPython': [], 'json': [], 'altair': [], 'networkx': [], 'numba': [], 'itertools': []} axis_0: 2, axis_1: 5
resampling-strategies-for-imbalanced-datasets.py : ['read_csv', 'value_counts', 'value_counts', 'sample', 'concat', 'value_counts', 'value_counts', 'sample', 'concat', 'value_counts', 'value_counts', 'value_counts', 'unique'] ['numpy', 'pandas', 'imblearn'] ['XGBClassifier', 'train_test_split', 'accuracy_score', 'confusion_matrix', 'pyplot', 'make_classification', 'PCA', 'RandomUnderSampler', 'RandomOverSampler', 'TomekLinks', 'ClusterCentroids', 'SMOTE', 'SMOTETomek']Dict:{'numpy': ['unique'], 'pandas': ['concat', 'unique', 'read_csv', 'value_counts'], 'xgboost': [], 'sklearn': [], 'matplotlib': [], 'imblearn': []} axis_0: 2, axis_1: 0
titanic-analysis-and-modeling.py : ['read_csv', 'read_csv', 'head', 'info', 'describe', 'describe', 'mean', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'sum', 'isnull', 'sort_values', 'drop', 'sum', 'isna', 'sum', 'isnull', 'sort_values', 'drop', 'sum', 'isna', 'sum', 'duplicated', 'mean', 'groupby', 'mean', 'groupby', 'value_counts', 'value_counts', 'boxplot', 'boxplot', 'map', 'hist', 'describe', 'describe', 'describe', 'describe', 'boxplot', 'boxplot', 'map', 'hist', 'map', 'map', 'map', 'drop', 'drop', 'drop', 'drop', 'drop', 'mean', 'std', 'sum', 'isnull', 'isna', 'astype', 'fillna', 'mode', 'sum', 'isna', 'sum', 'isna', 'unique', 'apply', 'concat', 'apply', 'apply', 'unique', 'value_counts', 'value_counts', 'astype', 'value_counts', 'count', 'groupby', 'map', 'drop', 'head', 'cut', 'mean', 'groupby', 'value_counts', 'head', 'sum', 'isna', 'sum', 'isna', 'fillna', 'median', 'head', 'cut', 'mean', 'groupby', 'value_counts', 'qcut', 'mean', 'groupby', 'value_counts', 'astype', 'head', 'drop', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'head', 'head', 'drop', 'copy', 'drop', 'items', 'sort_values', 'mean', 'std', 'sort_values', 'to_csv'] ['numpy', 'pandas', 're', 'seaborn', 'os', 'warnings'] ['pyplot', 'style', 'RandomForestClassifier', 'GradientBoostingClassifier', 'DecisionTreeClassifier', 'XGBClassifier', 'KNeighborsClassifier', 'LogisticRegression', 'SVC', 'GridSearchCV', 'train_test_split', 'cross_val_score', 'cross_val_predict', 'accuracy_score', 'confusion_matrix', 'roc_auc_score', 'roc_curve', 'r2_score', 'f1_score', 'precision_score', 'recall_score', 'precision_recall_curve', 'DataConversionWarning']Dict:{'numpy': ['mean', 'median', 'sum', 'unique', 'info', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'unique', 'qcut'], 're': [], 'seaborn': ['boxplot'], 'matplotlib': [], 'sklearn': [], 'xgboost': ['apply'], 'os': [], 'warnings': [], '=': [], 'model': []} axis_0: 0, axis_1: 3
ps-s03e10-a-complete-eda.py : ['read_csv', 'read_csv', 'read_csv', 'max', 'pop', 'pop', 'head', 'value_counts', 'value_counts', 'sum', 'duplicated', 'sum', 'duplicated', 'sum', 'duplicated', 'sum', 'duplicated', 'round', 'sum', 'duplicated', 'sum', 'duplicated', 'to_numpy', 'copy', 'query', 'query', 'cut', 'mean', 'groupby', 'concat', 'assign', 'assign', 'assign', 'reset_index', 'query', 'query', 'query', 'select_dtypes', 'corr', 'select_dtypes', 'corr', 'eval', 'eval', 'copy', 'copy', 'copy', 'concat', 'concat', 'transform', 'transform', 'isin', 'mean', 'mean', 'melt', 'melt', 'copy', 'le', 'copy', 'ge', 'keys', 'keys', 'get', 'get', 'ge', 'ge', 'keys', 'keys', 'get', 'get', 'copy', 'get', 'copy', 'get', 'copy', 'copy', 'get', 'get', 'get', 'get', 'copy', 'read_csv', 'mean', 'to_csv'] ['math', 'matplotlib', 'matplotlib', 'matplotlib.cm', 'matplotlib.colors', 'matplotlib.pyplot', 'matplotlib.ticker', 'lightgbm', 'numpy', 'pandas', 'seaborn', 'scipy', 'warnings', 'warnings'] ['HTML', 'time', 'timedelta', 'Fore', 'Style', 'early_stopping', 'log_evaluation', 'cycler', 'MaxNLocator', 'DropCorrelatedFeatures', 'TSNE', 'ks_2samp', 'StratifiedKFold', 'LogisticRegression', 'SklearnTransformerWrapper', 'RobustScaler', 'StandardScaler', 'log_loss', 'LGBMClassifier', 'RepeatedStratifiedKFold', 'f1_score', 'balanced_accuracy_score', 'LogisticRegression', 'IsotonicRegression']Dict:{'IPython': [], 'time': [], 'datetime': ['max'], 'colorama': [], 'lightgbm': [], 'math': [], 'matplotlib': [], 'numpy': ['mean', 'max', 'sum', 'round', 'isin', 'copy'], 'pandas': ['read_csv', 'cut', 'melt', 'eval', 'concat', 'value_counts'], 'seaborn': [], 'scipy': [], 'warnings': [], 'cycler': [], 'feature_engine': [], 'openTSNE': [], 'sklearn': []} axis_0: 1, axis_1: 0
jpx-stock-market-2021-dec-03.py : ['map', 'concat', 'merge', 'drop', 'read_csv', 'read_csv', 'set_index', 'head', 'sort_values', 'agg', 'groupby', 'isin', 'unique', 'apply', 'apply', 'sort_values', 'mean', 'groupby', 'sum', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'value_counts', 'fillna', 'multiply', 'sort_index', 'cumprod', 'sort_index', 'pivot_table', 'isin', 'sort_values', 'groupby', 'first_valid_index', 'groupby', 'describe', 'pct_change', 'divide'] ['pandas', 'numpy', 'seaborn', 'base64', 'mplfinance', 'warnings'] ['pyplot', 'BytesIO', 'HTML', 'Pool', 'cpu_count']Dict:{'pandas': ['read_csv', 'pivot_table', 'concat', 'value_counts', 'unique', 'merge'], 'numpy': ['mean', 'divide', 'sum', 'unique', 'isin', 'multiply', 'cumprod'], 'matplotlib': [], 'seaborn': [], 'base64': [], 'io': [], 'mplfinance': [], 'ipywidgets': [], 'multiprocessing': [], 'warnings': []} axis_0: 1, axis_1: 0
catboost-only-tune-score-lb1-3827.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'head', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'drop', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'tail', 'unique', 'reset_index', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'head', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'reset_index', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'tail', 'to_dict', 'set_index', 'copy', 'map', 'read_csv', 'concat', 'fillna', 'drop', 'fillna', 'read_csv', 'astype', 'head', 'read_csv', 'astype', 'head', 'apply', 'head', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'map', 'map', 'head', 'drop', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'os', 'lightgbm', 'xgboost', 'catboost'] ['tqdm', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'os': [], 'tqdm': []} axis_0: 0, axis_1: 4
mercari-eda-and-nlp-feature-engineering.py : ['read_csv', 'head', 'drop', 'astype', 'astype', 'info', 'unique', 'unique', 'hist', 'hist', 'hist', 'hist', 'value_counts', 'describe', 'groupby', 'fillna', 'update', 'fillna', 'update', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'array', 'array', 'mean', 'groupby', 'mean', 'array', 'array', 'read_csv', 'drop', 'sub', 'sub', 'transform', 'transform', 'transform', 'transform', 'count', 'groupby', 'count', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'map', 'map', 'map', 'map', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 're'] ['CountVectorizer', 'OneHotEncoder', 'Counter', 'TruncatedSVD', 'train_test_split', 'LinearRegression', 'cross_validate', 'mean_squared_log_error', 'make_scorer', 'KFold', 'KFold', 'RandomForestRegressor']Dict:{'pandas': ['array', 'unique', 'read_csv', 'value_counts'], 'numpy': ['mean', 'info', 'array', 'unique'], 'matplotlib': ['hist'], 'sklearn': [], 'collections': ['update'], 're': ['sub']} axis_0: 0, axis_1: 4
tps-sep-eda-and-starter.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'info', 'describe', 'isnull', 'sum', 'isna', 'rename', 'apply', 'corr', 'head', 'info', 'describe', 'sum', 'isna', 'rename', 'apply', 'corr', 'read_csv', 'read_csv', 'read_csv', 'to_csv', 'copy', 'to_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'copy', 'to_csv', 'min', 'max', 'min', 'array', 'sort_values'] ['pandas', 'numpy', 'plotly.express', 'seaborn', 'matplotlib.pyplot', 'lightgbm'] ['tqdm', 'KFold', 'roc_auc_score', 'ProfileReport']Dict:{'pandas': ['isna', 'array', 'read_csv', 'isnull'], 'numpy': ['max', 'sum', 'min', 'info', 'array', 'copy'], 'plotly': [], 'seaborn': [], 'tqdm': [], 'matplotlib': [], 'sklearn': [], 'lightgbm': [], 'pandas_profiling': []} axis_0: 0, axis_1: 0
tps-feb-22-eda-modelling.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'sum', 'count', 'sum', 'isna', 'describe', 'head', 'sum', 'count', 'sum', 'isna', 'describe', 'head', 'drop', 'drop', 'sort_values', 'describe', 'concat', 'nunique', 'nunique', 'nunique', 'reset_index', 'value_counts', 'mean', 'std', 'min', 'max', 'mean', 'std', 'min', 'max', 'mean', 'head', 'concat', 'sort_values', 'mean', 'head', 'concat', 'sort_values', 'mean', 'head', 'concat', 'sort_values', 'copy', 'astype', 'squeeze', 'to_csv', 'head', 'copy', 'astype', 'squeeze', 'to_csv', 'head', 'copy', 'astype', 'squeeze', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'time', 'warnings'] ['StratifiedKFold', 'accuracy_score', 'train_test_split', 'mode', 'XGBClassifier', 'CatBoostClassifier', 'LGBMClassifier', 'ticker', 'LabelEncoder']Dict:{'numpy': ['mean', 'squeeze', 'max', 'sum', 'min', 'std', 'copy'], 'pandas': ['concat', 'isna', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': [], 'scipy': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'time': [], 'warnings': []} axis_0: 1, axis_1: 11
classification-using-tensorflow-decision-forests.py : ['read_csv', 'read_csv', 'sample', 'sample', 'drop', 'value_counts', 'value_counts', 'fillna', 'fillna', 'fillna', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'tensorflow_decision_forests'] ['roc_auc_score']Dict:{'numpy': [], '': [], 'pandas': ['read_csv', 'value_counts'], 'matplotlib': [], 'tensorflow_decision_forests': [], 'sklearn': []} axis_0: 0, axis_1: 2
new-features-xgb-upsampling-bayesopt.py : ['transform', 'concat', 'concat', 'mean', 'std', 'read_csv', 'drop', 'drop', 'read_csv', 'drop', 'drop', 'astype', 'astype', 'astype', 'drop', 'drop', 'transform', 'transform', 'concat', 'concat', 'concat', 'concat', 'mean', 'std', 'mean', 'to_csv'] ['numpy', 'pandas', 'gc', 'warnings', 'xgboost', 'gc', 'time'] ['print_function', 'BayesianOptimization', 'StratifiedKFold', 'log_loss', 'matthews_corrcoef', 'roc_auc_score', 'XGBClassifier', 'jit', 'LabelEncoder', 'MinMaxScaler', 'datetime', 'Categorical_encoder']Dict:{'__future__': [], 'numpy': ['mean', 'std'], 'pandas': ['concat', 'read_csv'], 'gc': [], 'warnings': [], 'bayes_opt': [], 'sklearn': ['transform'], 'xgboost': [], 'numba': [], 'time': [], 'datetime': [], 'mlbox': [], '=': [], 'sorted([(trn_df': [], 'imp)': [], 'for': [], 'i,': [], 'imp': [], 'in': [], 'enumerate(imp_df': []} axis_0: 4, axis_1: 13
2021-survey-job-title-data-scientist.py : ['join', 'read_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'value_counts', 'count', 'dropna', 'reset_index', 'value_counts', 'sum', 'rename', 'items', 'items', 'update', 'to_csv', 'to_csv', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'sort_index', 'sort_index', 'sort_index', 'sort_index', 'sort_index', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'copy', 'replace', 'replace', 'replace', 'isin', 'isin', 'isin', 'isin', 'isin', 'copy', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'isin', 'isin', 'isin', 'isin', 'isin', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'any', 'notna', 'replace', 'replace', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'copy', 'replace', 'replace', 'copy', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'copy', 'replace', 'replace', 'copy', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'keys', 'keys', 'keys', 'keys', 'to_numeric', 'median', 'to_numeric', 'to_csv'] ['os', 'numpy', 'pandas', 'seaborn', 'plotly.express', 'plotly.graph_objects', 'warnings', 'plotly_express'] ['init_notebook_mode']Dict:{'os': ['rename', 'replace'], 'numpy': ['median', 'any', 'sum', 'isin', 'copy'], 'pandas': ['notna', 'to_numeric', 'read_csv', 'value_counts'], 'seaborn': [], 'plotly': [], 'warnings': [], 'plotly_express': []} axis_0: 0, axis_1: 0
tps-may-22-eda-lgbm-model.py : ['read_csv', 'read_csv', 'head', 'head', 'info', 'set_index', 'rename', 'reset_index', 'value_counts', 'value_counts', 'reset_index', 'set_index', 'corr', 'value_counts', 'sum', 'count', 'sum', 'set_index', 'value_counts', 'fillna', 'head', 'head', 'head', 'apply', 'head', 'head', 'apply', 'copy', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'apply', 'drop', 'value_counts', 'drop', 'head', 'round', 'round', 'mean', 'mean', 'round', 'median', 'drop', 'sort_values', 'drop', 'rename', 'reset_index', 'stack', 'set_index', 'boxplot', 'rank', 'mean', 'read_csv', 'rank', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'string'] ['LGBMClassifier', 'roc_auc_score', 'accuracy_score', 'StratifiedKFold', 'ConfusionMatrixDisplay', 'confusion_matrix']Dict:{'numpy': ['mean', 'median', 'stack', 'sum', 'round', 'info', 'copy'], 'pandas': ['read_csv', 'value_counts'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'string': [], 'lightgbm': [], 'sklearn': []} axis_0: 0, axis_1: 2
store-item-demand-forecasting.py : ['read_csv', 'read_csv', 'concat', 'head', 'quantile', 'min', 'max', 'describe', 'nunique', 'nunique', 'nunique', 'groupby', 'agg', 'groupby', 'astype', 'astype', 'head', 'agg', 'groupby', 'sort_values', 'head', 'transform', 'groupby', 'shift', 'transform', 'groupby', 'mean', 'rolling', 'shift', 'replace', 'transform', 'groupby', 'mean', 'ewm', 'shift', 'tail', 'get_dummies', 'abs', 'abs', 'abs', 'sum', 'isna', 'isna', 'set_index', 'set_index', 'set_index'] ['numpy', 'pandas', 'seaborn', 'lightgbm', 'statsmodels.api', 'itertools', 'warnings'] ['pyplot', 'SimpleExpSmoothing', 'mean_absolute_error', 'ExponentialSmoothing', 'SARIMAX', 'ARIMA', 'seasonal_decompose']Dict:{'numpy': ['mean', 'quantile', 'max', 'abs', 'sum', 'min'], 'pandas': ['concat', 'get_dummies', 'isna', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'statsmodels': [], 'sklearn': [], 'itertools': ['groupby'], 'warnings': []} axis_0: 1, axis_1: 0
attention-feature-engineering-augmentation.py : ['round', 'clip', 'round', 'clip', 'sum', 'sum', 'sum', 'sum', 'get', 'get', 'get', 'get', 'get', '__init__', 'dot', 'sum', 'sum', 'sum', '__init__', 'get', 'get', 'get', 'get', 'sum', 'sum', 'items', 'items', 'read_csv', 'set_index', 'head', 'mean', 'std', 'unique', 'copy', 'copy', 'sum', 'array', 'abs', 'sum', 'divide', 'mean', 'max', 'abs', 'divide', 'add', 'divide', 'mean', 'mean', 'array', 'array', 'sum', 'multiply', 'unique', 'sum', 'sum', 'multiply', 'array', 'divide', 'sum', 'sum', 'multiply', 'array', 'sum', 'multiply', 'std', 'astype', 'astype', 'mean', 'mean', 'mean', 'mean', 'std', 'array', 'array', 'subtract', 'divide', 'array', 'transform', 'eval', 'astype', 'astype', 'read_csv', 'set_index', 'head', 'array', 'transform', 'read_csv', 'head', 'astype', 'squeeze', 'mean', 'to_csv', 'head'] ['pandas', 'pyarrow.parquet', 'os', 'numpy', 'tensorflow', 'tensorflow'] ['*', 'Model', 'tqdm', 'train_test_split', 'backend', 'optimizers', 'GridSearchCV', 'StratifiedKFold', 'RepeatedStratifiedKFold', '*', 'MinMaxScaler', 'jit', 'log', 'floor', 'KDTree', 'periodogram', 'welch']Dict:{'pandas': ['array', 'eval', 'unique', 'read_csv'], 'pyarrow': [], 'os': [], '': [], 'numpy': ['mean', 'squeeze', 'max', 'add', 'abs', 'sum', 'subtract', 'array', 'round', 'unique', 'clip', 'dot', 'std', 'multiply', 'divide', 'copy'], 'keras': [], 'tqdm': [], 'sklearn': ['__init__'], 'numba': [], 'math': ['__init__'], 'scipy': [], 'tensorflow': ['squeeze', 'add', 'abs', 'subtract', 'round', 'unique', 'multiply', 'divide']} axis_0: 1, axis_1: 7
elo-world.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'map', 'read_csv', 'to_datetime', 'get_dummies', 'get_dummies', 'agg', 'groupby', 'join', 'reset_index', 'astype', 'agg', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'groupby', 'agg', 'join', 'reset_index', 'agg', 'groupby', 'join', 'reset_index', 'mean', 'groupby', 'agg', 'groupby', 'reset_index', 'reset_index', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'to_csv', 'to_csv', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings', 'time', 'sys', 'datetime', 'matplotlib.pyplot', 'seaborn'] ['KFold', 'mean_squared_error']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'isin'], 'pandas': ['read_csv', 'concat', 'get_dummies', 'merge', 'to_datetime'], 'matplotlib': [], 'seaborn': [], 'lightgbm': [], 'sklearn': [], 'warnings': [], 'time': [], 'sys': [], 'datetime': []} axis_0: 1, axis_1: 0
tps-april-sklearn-pycaret-for-newbies.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'concat', 'to_dict', 'round', 'mean', 'groupby', 'dropna', 'fillna', 'map', 'fillna', 'unique', 'map', 'fillna', 'unique', 'round', 'mean', 'fillna', 'mean', 'fillna', 'unique', 'drop', 'info', 'get_dummies', 'concat', 'drop', 'drop', 'info', 'astype', 'round', 'round', 'drop', 'concat', 'to_csv', 'astype', 'round', 'round', 'keys', 'drop', 'concat', 'to_csv', 'concat', 'astype', 'info', 'info', 'read_csv', 'to_csv', 'head'] ['pandas', 'matplotlib', 'matplotlib.pyplot', 'numpy', 'seaborn', 'os', 'sklearn', 'seaborn', 'matplotlib.pyplot', 'numpy', 'sklearn'] ['train_test_split', 'accuracy_score', 'tree', 'DecisionTreeClassifier', 'roc_curve', 'roc_auc_score', 'pyplot', 'tree', 'DecisionTreeClassifier', 'roc_curve', 'roc_auc_score', 'accuracy_score', 'confusion_matrix', 'pyplot', 'datetime', 'version', '*']Dict:{'pandas': ['concat', 'get_dummies', 'unique', 'read_csv'], 'matplotlib': [], 'numpy': ['mean', 'round', 'info', 'unique'], 'seaborn': [], 'os': [], 'sklearn': [], 'datetime': [], 'pycaret': []} axis_0: 0, axis_1: 6
tps-mar-22-fe-lama-lightautoml.py : ['read_csv', 'head', 'info', 'read_csv', 'head', 'info', 'read_csv', 'head', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'drop', 'astype', 'round', 'all', 'all', 'to_csv', 'describe', 'hist', 'hist'] ['os', 'time', 'numpy', 'pandas', 'torch', 'holidays', 'datetime', 'matplotlib.pyplot'] ['display', 'HTML', 'Javascript', 'log_loss', 'accuracy_score', 'train_test_split', 'TabularAutoML', 'TabularUtilizedAutoML', 'Task', 'ReportDeco', 'MaxNLocator', 'PercentFormatter']Dict:{'IPython': [], 'os': [], 'time': [], 'numpy': ['round', 'info', 'all'], 'pandas': ['to_datetime', 'read_csv'], 'sklearn': [], 'torch': ['round', 'all'], 'lightautoml': [], 'holidays': [], 'datetime': [], 'matplotlib': []} axis_0: 0, axis_1: 1
jane-street-eda-of-day-0-and-feature-importance.py : ['cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'array', 'min', 'max', 'min', 'max', 'skew', 'kurtosis', 'array', 'sum', 'min', 'max', 'max', 'array', 'min', 'max', 'reset_index', 'query', 'array', 'min', 'max', 'array', 'min', 'max', 'cumprod', 'mean', 'groupby', 'cumprod', 'mean', 'groupby', 'cumprod', 'mean', 'groupby', 'cumprod', 'mean', 'groupby', 'cumprod', 'mean', 'groupby', 'reset_index', 'query', 'array', 'min', 'max', 'count', 'groupby', 'array', 'min', 'max', 'value_counts', 'cumsum', 'reset_index', 'query', 'reset_index', 'query', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'concat', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'array', 'min', 'max', 'concat', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'read_csv', 'sum', 'value_counts', 'sum', 'groupby', 'count', 'groupby', 'mean', 'max', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'cumsum', 'describe', 'sum', 'isnull', 'sum', 'groupby', 'sum', 'isnull', 'agg', 'groupby', 'merge', 'mean', 'concat', 'fillna', 'mean', 'concat', 'corr', 'corr', 'concat', 'corr', 'drop_duplicates', 'sort_values', 'unstack'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'plotly.graph_objects', 'dabl', 'datatable', 'missingno', 'warnings', 'os', 'gc', 'eli5'] ['lag_plot', 'Image', 'curve_fit', 'curve_fit', 'RandomForestRegressor', 'PermutationImportance']Dict:{'numpy': ['mean', 'max', 'cumsum', 'sum', 'min', 'array', 'cumprod'], 'pandas': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'dabl': [], 'datatable': [], 'missingno': [], 'warnings': [], 'os': [], 'IPython': [], 'gc': [], '': [], 'scipy': [], 'sklearn': [], 'eli5': []} axis_0: 1, axis_1: 1
titanic-tutorial.py : ['join', 'read_csv', 'read_csv', 'copy', 'head', 'transpose', 'describe', 'info', 'sum', 'isnull', 'value_counts', 'median', 'groupby', 'isnull', 'apply', 'count', 'boxplot', 'fillna', 'mode', 'count', 'drop', 'sum', 'isnull', 'mean', 'groupby', 'mean', 'groupby', 'head', 'drop', 'info', 'fillna', 'median', 'median', 'groupby', 'isnull', 'apply', 'info', 'drop', 'info', 'astype', 'map', 'astype', 'map', 'head', 'head', 'drop', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn'] ['train_test_split', 'accuracy_score', 'DecisionTreeClassifier', 'GridSearchCV', 'LogisticRegression', 'RandomForestClassifier']Dict:{'numpy': ['transpose', 'median', 'mean', 'sum', 'info', 'copy'], 'pandas': ['isnull', 'read_csv', 'value_counts'], 'os': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': ['apply']} axis_0: 0, axis_1: 6
top-3-5-lightgbm-with-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'sum', 'memory_usage', 'astype', 'all', 'round', 'to_numeric', 'to_numeric', 'sum', 'memory_usage', 'unique', 'isin', 'apply', 'unique', 'drop', 'head', 'drop', 'agg', 'groupby', 'head', 'isna', 'fillna', 'apply', 'value_counts', 'apply', 'head', 'drop', 'unique', 'unique', 'unique', 'array', 'agg', 'groupby', 'reset_index', 'rename', 'merge', 'head', 'agg', 'groupby', 'reset_index', 'rename', 'merge', 'head', 'concat', 'drop', 'fillna', 'head', 'merge', 'merge', 'merge', 'sum', 'isnull', 'nunique', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'reset_index', 'rename', 'merge', 'copy', 'merge', 'drop_duplicates', 'fillna', 'head', 'sum', 'drop', 'drop', 'drop', 'mean', 'clip', 'fillna', 'replace', 'fillna', 'replace', 'drop', 'drop', 'info', 'drop', 'drop', 'drop', 'clip', 'to_csv'] ['numpy', 'pandas', 'warnings', 'gc', 'seaborn', 'matplotlib', 'matplotlib.pyplot', 'lightgbm'] ['LabelEncoder', 'product']Dict:{'numpy': ['mean', 'sum', 'all', 'round', 'unique', 'clip', 'isin', 'info', 'array', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'to_numeric', 'unique', 'array', 'merge'], 'warnings': [], 'sklearn': [], 'itertools': [], 'gc': [], 'seaborn': [], 'matplotlib': [], 'lightgbm': []} axis_0: 0, axis_1: 12
titanic-tutorial-for-beginners-2020.py : ['read_csv', 'read_csv', 'head', 'tail', 'describe', 'info', 'concat', 'value_counts', 'sum', 'isnull', 'any', 'isnull', 'head', 'corr', 'bool', 'value_counts', 'value_counts', 'value_counts', 'nunique', 'count', 'groupby', 'crosstab', 'mean', 'groupby', 'value_counts', 'copy', 'value_counts', 'crosstab', 'mean', 'groupby', 'crosstab', 'crosstab', 'factorize', 'crosstab', 'mean', 'groupby', 'mean', 'groupby', 'crosstab', 'max', 'min', 'mean', 'agg', 'groupby', 'reset_index', 'apply', 'groupby', 'fillna', 'mean', 'replace', 'replace', 'qcut', 'head', 'head', 'crosstab', 'head', 'any', 'isnull', 'reset_index', 'head', 'head', 'factorize', 'head', 'mean', 'groupby', 'max', 'min', 'mean', 'mean', 'groupby', 'qcut', 'head', 'head', 'value_counts', 'sum', 'isnull', 'isnull', 'isnull', 'isnull', 'head', 'factorize', 'crosstab', 'isnull', 'sort_values', 'isnull', 'isnull', 'factorize', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'head', 'copy', 'apply', 'head', 'get_dummies', 'head', 'transform', 'mean', 'sort_values', 'head', 'drop', 'boxplot', 'tail', 'sort_values', 'transpose', 'sort_values', 'merge', 'merge', 'merge', 'merge', 'mean', 'reset_index', 'sort_values', 'sort_values', 'set_index', 'head', 'transform', 'mean', 'sort_values', 'head', 'drop', 'boxplot', 'mean', 'sort_values', 'head', 'drop', 'boxplot', 'mean', 'mean', 'concat', 'to_csv', 'concat', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'missingno', 'sys', 'warnings', 'warnings'] ['LabelEncoder', 'OneHotEncoder', 'StandardScaler', 'KNeighborsClassifier', 'LogisticRegression', 'RandomForestClassifier', 'SVC', 'XGBClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'AdaBoostClassifier', 'GaussianProcessClassifier', 'GaussianNB', 'BaggingClassifier', 'VotingClassifier', 'cross_val_score', 'GridSearchCV', 'cross_val_predict', 'model_selection', 'OneHotEncoder', 'LabelEncoder']Dict:{'numpy': ['transpose', 'mean', 'any', 'max', 'sum', 'min', 'info', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'factorize', 'get_dummies', 'qcut', 'merge', 'crosstab'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'missingno': [], 'sklearn': ['transform'], 'xgboost': ['apply'], 'sys': [], 'warnings': [], '=': [], 'pd': [], "index=fi['Features'])": [], 'ascending=True)': [], "'Importance',": [], "'Features',": [], 'title,': [], '20)': [], 'gbc_imp': [], "on='Feature')": [], 'importances': [], 'ascending=False)': [], 'importance[-381:]': []} axis_0: 0, axis_1: 4
explained-critical-point-rnn.py : ['__init__', 'isna', 'dropna', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'read_parquet', 'read_csv', 'read_csv', 'unique', '__init__', '__init__', 'reset_index', 'reset_index', 'copy', 'mean', 'std', 'median', 'max', 'min', 'astype', 'unique', 'eval', 'astype', 'clip', 'astype', 'clip', 'concat', 'reset_index', 'sort_values', 'astype', 'fillna', 'mean', 'to_csv'] ['pandas', 'numpy', 'gc', 'time', 'json', 'matplotlib.pyplot', 'os', 'joblib', 'random', 'math', 'sklearn', 'sklearn.model_selection', 'torch', 'torch.nn.functional', 'pyarrow', 'ctypes'] ['datetime', 'tqdm', 'interp1d', 'pi', 'sqrt', 'exp', 'nn', 'Tensor', 'DataLoader', 'Dataset', 'SubsetRandomSampler', 'average_precision_score', 'CosineLRScheduler', 'ParquetFile']Dict:{'pandas': ['isna', 'read_csv', 'eval', 'concat', 'read_parquet', 'unique'], 'numpy': ['mean', 'median', 'max', 'sum', 'min', 'unique', 'clip', 'std', 'copy'], 'gc': [], '': [], '#': [], 'Import': [], 'garbage': [], 'collection': [], 'for': [], 'memory': [], 'management': [], '🗑️': [], 'time': [], 'module': [], 'time-related': [], 'operations': [], '⏰': [], 'json': [], 'JSON': [], 'handling': [], 'data': [], '📝': [], 'datetime': [], 'matplotlib': [], 'os': [], 'operating': [], 'system': [], 'functions': [], '📂': [], 'joblib': [], 'job': [], '(de)serialization': [], '🧰': [], 'random': [], 'generating': [], 'numbers': [], '🎲': [], 'math': [], 'mathematical': [], '➗': [], 'tqdm': [], 'scipy': [], 'sklearn,': [], 'sklearn': [], 'scikit-learn': [], 'ML': [], 'tasks': [], '🧪📊': [], 'torch': [], 'PyTorch': [], 'deep': [], 'learning': [], '🔥': [], 'timm': [], 'pyarrow': [], 'ctypes': [], 'Python': [], 'library': [], 'calling': [], 'C': [], '📄': []} axis_0: 2, axis_1: 0
case-studies-of-financial-feature-engineering.py : ['read_csv', 'read_csv', 'reset_index', 'replace', 'median', 'groupby', 'mean', 'std', 'kurtosis', 'sum', 'std', 'kurtosis', 'map', 'mean', 'std', 'fillna', 'mean', 'get_dummies', 'read_csv', 'read_csv', 'agg', 'groupby', 'join', 'drop', 'agg', 'groupby', 'head', 'read_csv', 'apply', 'apply', 'read_csv', 'replace', 'replace', 'corr', 'sort_values'] ['pandas', 'numpy', 'seaborn', 'tqdm', 'gc'] []Dict:{'pandas': ['get_dummies', 'read_csv'], 'numpy': ['mean', 'median', 'std', 'sum'], 'seaborn': [], 'tqdm': ['std'], 'gc': []} axis_0: 0, axis_1: 10
1-tps-sep-21-autogluon-missing-values.py : ['join', 'array', 'array', 'array', 'array', 'read_csv', 'read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'info', 'info', 'value_counts', 'value_counts', 'value_counts', 'drop', 'drop', 'to_csv', 'to_csv', 'drop', 'drop', 'sum', 'isna', 'min', 'std', 'sum', 'isna', 'min', 'std', 'copy', 'to_csv', 'copy', 'copy', 'copy', 'astype', 'read_csv', 'read_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.figure_factory', 'plotly.express', 'os'] ['log_loss', 'accuracy_score', 'mean_squared_error', 'mean_absolute_error', 'roc_auc_score', 'roc_curve', 'auc', 'LabelEncoder', 'minmax_scaling', 'MinMaxScaler', 'StandardScaler', 'train_test_split', 'cross_val_score', 'StratifiedKFold', 'KFold', 'LeaveOneGroupOut', 'Pipeline', 'SimpleImputer', 'TabularDataset', 'TabularPredictor']Dict:{'numpy': ['sum', 'array', 'min', 'info', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'value_counts', 'array'], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'sklearn': [], 'mlxtend': [], 'os': [], 'autogluon': []} axis_0: 0, axis_1: 8
bayesian-optimization-for-lightgbm.py : ['read_csv', 'merge', 'drop', 'astype', 'apply', 'to_datetime', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'nunique', 'drop', 'drop', 'drop', 'astype', 'fillna', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'sort_values', 'drop', 'drop', 'array', 'max', 'array', 'max', 'array', 'max', 'array', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv', 'copy', 'apply', 'fillna', 'reset_index', 'sum', 'groupby', 'to_csv', 'apply', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv', 'copy', 'apply', 'fillna', 'reset_index', 'sum', 'groupby', 'to_csv'] ['os', 'json', 'numpy', 'pandas', 'time', 'gc', 'psutil', 'warnings', 'time', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'lightgbm', 'lightgbm'] ['json_normalize', 'datetime', 'LabelEncoder', 'BayesianOptimization', 'roc_auc_score', 'mean_squared_error', 'KFold', 'cross_val_score', 'train_test_split', 'mean_squared_error', 'KFold', 'StratifiedKFold', 'model_selection', 'preprocessing', 'metrics', 'StratifiedKFold']Dict:{'os': [], 'json': [], 'numpy': ['mean', 'max', 'sum', 'isin', 'array', 'copy'], 'pandas': [], 'time': [], 'datetime': ['max'], 'gc': [], 'psutil': [], 'sklearn': [], 'warnings': [], 'lightgbm': [], 'bayes_opt': [], 'matplotlib': [], 'seaborn': []} axis_0: 2, axis_1: 6
detailed-and-full-solution-step-by-step-80-score.py : ['read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'astype', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'describe', 'astype', 'astype', 'drop', 'astype', 'astype', 'drop', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'value_counts', 'replace', 'replace', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'corr', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'reset_index', 'concat', 'drop', 'sum', 'isnull', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'median', 'iterrows', 'isna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'sum', 'isnull', 'value_counts', 'isna', 'fillna', 'drop', 'astype', 'head', 'astype', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'head', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'sort_values', 'mean', 'astype', 'concat', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.express', 'plotly.graph_objects', 'warnings'] ['make_subplots', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'VotingClassifier', 'LinearDiscriminantAnalysis', 'LogisticRegression', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'MLPClassifier', 'SVC', 'GridSearchCV', 'cross_val_score', 'StratifiedKFold', 'learning_curve', 'XGBClassifier', 'CatBoostClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'unique', 'info', 'std'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'plotly': [], 'warnings': [], 'sklearn': [], 'xgboost': [], 'catboost': []} axis_0: 0, axis_1: 5
deeper-feature-engineering-fr.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'to_datetime', 'reset_index', 'count', 'groupby', 'pivot_table', 'fillna', 'agg', 'groupby', 'fillna', 'reset_index', 'agg', 'groupby', 'pivot_table', 'fillna', 'reset_index', 'agg', 'groupby', 'unique', 'set_index', 'unique', 'set_index', 'transform', 'groupby', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'reset_index', 'reset_index', 'agg', 'groupby', 'value_counts', 'merge', 'map', 'reset_index', 'last', 'groupby', 'merge', 'map', 'merge', 'reset_index', 'drop', 'merge', 'to_csv', 'value_counts'] ['numpy', 'pandas', 'os', 'lightgbm', 'gc'] ['KFold', 'StratifiedKFold', 'LabelEncoder', 'cohen_kappa_score']Dict:{'numpy': ['unique'], 'pandas': ['read_csv', 'pivot_table', 'value_counts', 'unique', 'merge', 'to_datetime'], 'os': [], 'sklearn': [], 'lightgbm': [], 'gc': []} axis_0: 0, axis_1: 0
reach-top-10-with-simple-model-on-housing-prices.py : ['read_csv', 'read_csv', 'describe', 'drop', 'drop', 'drop', 'corr', 'corr', 'reset_index', 'concat', 'drop', 'sum', 'isnull', 'sort_values', 'drop', 'notnull', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'groupby', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'count', 'groupby', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'value_counts', 'fillna', 'mode', 'value_counts', 'drop', 'fillna', 'fillna', 'mode', 'fillna', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'value_counts', 'apply', 'astype', 'astype', 'astype', 'transform', 'sort_values', 'apply', 'dropna', 'head', 'get_dummies', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'xgboost', 'lightgbm'] ['stats', 'norm', 'skew', 'LabelEncoder', 'boxcox1p', 'ElasticNet', 'Lasso', 'BayesianRidge', 'LassoLarsIC', 'RandomForestRegressor', 'GradientBoostingRegressor', 'KernelRidge', 'make_pipeline', 'RobustScaler', 'BaseEstimator', 'TransformerMixin', 'RegressorMixin', 'clone', 'KFold', 'cross_val_score', 'train_test_split', 'mean_squared_error']Dict:{'numpy': ['mean', 'median', 'std', 'sum'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'notnull'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'scipy': [], 'sklearn': [], 'xgboost': [], 'lightgbm': []} axis_0: 0, axis_1: 2
molecular-geometry-feature-engineering-eda.py : ['read_csv', 'read_csv', 'mean', 'mean', 'dot', 'unique', 'mean', 'dot', 'sum', 'array', 'dot', 'dot', 'array', 'dot', 'head', 'sort_values', 'head', 'sort_values', 'head', 'sort_values', 'head', 'sort_values', 'head', 'sort_values', 'head', 'sort_values'] ['numpy', 'pandas', 'matplotlib.pyplot', 'math', 'ase', 'ase.visualize', 'warnings'] ['tqdm_notebook', 'svd', 'Atoms']Dict:{'numpy': [], 'pandas': ['array', 'unique', 'read_csv'], 'tqdm': [], 'matplotlib': [], 'math': [], 'ase': [], 'warnings': []} axis_0: 0, axis_1: 2
ps-s03e07-a-complete-eda.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'rename', 'map', 'map', 'map', 'map', 'fillna', 'fillna', 'value_counts', 'value_counts', 'value_counts', 'reset_index', 'mean', 'groupby', 'sort_values', 'value_counts', 'groupby', 'reset_index', 'rename', 'copy', 'clip', 'quantile', 'query', 'query', 'cut', 'mean', 'groupby', 'concat', 'assign', 'assign', 'assign', 'assign', 'assign', 'reset_index', 'reset_index', 'mean', 'groupby', 'sort_values', 'value_counts', 'groupby', 'reset_index', 'rename', 'drop', 'rename', 'to_datetime', 'astype', 'drop', 'copy', 'rename', 'to_datetime', 'reset_index', 'rename', 'groupby', 'reset_index', 'mean', 'groupby', 'isnull', 'apply', 'groupby', 'unique', 'apply', 'drop', 'rename', 'to_datetime', 'astype', 'drop', 'reset_index', 'mean', 'groupby', 'sort_values', 'copy', 'query', 'copy', 'rename', 'sum', 'isnull', 'rename', 'sum', 'isnull', 'rename', 'sum', 'isnull', 'rename', 'sum', 'isnull', 'rename', 'sum', 'isnull', 'concat', 'sum', 'duplicated', 'sum', 'duplicated', 'sum', 'duplicated', 'sum', 'duplicated', 'select_dtypes', 'corr', 'select_dtypes', 'corr', 'copy', 'copy', 'copy', 'mean', 'read_csv', 'mean'] ['math', 'matplotlib', 'matplotlib', 'matplotlib.cm', 'matplotlib.colors', 'matplotlib.pyplot', 'matplotlib.ticker', 'lightgbm', 'numpy', 'pandas', 'seaborn', 'scipy', 'warnings'] ['HTML', 'time', 'timedelta', 'Fore', 'Style', 'early_stopping', 'log_evaluation', 'cycler', 'MaxNLocator', 'StratifiedKFold', 'roc_auc_score', 'accuracy_score', 'confusion_matrix', 'LGBMClassifier', 'LogisticRegression']Dict:{'IPython': [], 'time': [], 'datetime': [], 'colorama': [], 'lightgbm': [], 'math': [], 'matplotlib': [], 'numpy': ['mean', 'quantile', 'sum', 'unique', 'clip', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'unique', 'to_datetime'], 'seaborn': [], 'scipy': [], 'warnings': [], 'cycler': [], 'sklearn': []} axis_0: 1, axis_1: 2
random-forest-using-gridsearchcv.py : ['read_csv', 'read_csv', 'head', 'corr', 'bool', 'crosstab', 'crosstab', 'crosstab', 'boxplot', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'fillna', 'fillna', 'value_counts', 'fillna', 'fillna', 'value_counts', 'fillna', 'describe', 'fillna', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'astype', 'astype', 'get_dummies', 'get_dummies', 'to_csv'] ['numpy', 'pandas', 're', 'matplotlib.pyplot', 'seaborn'] ['chi2_contingency', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'RandomForestClassifier', 'accuracy_score', 'SVC', 'check_output']Dict:{'numpy': ['sum'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'crosstab'], 're': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': [], 'sklearn': [], 'subprocess': []} axis_0: 0, axis_1: 2
what-if-we-approach-this-as-text-classification.py : ['update', 'read_csv', 'read_csv', 'copy', 'head', 'astype', 'head', 'concat', 'sum', 'sum', 'reset_index', 'sum', 'head', 'fillna', 'fillna', 'head', 'head', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'replace', 'value_counts', 'to_csv', 'head'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'category_encoders', 'warnings'] ['LogisticRegression', 'GridSearchCV', 'StratifiedKFold', 'log_loss', 'make_scorer', 'TSNE']Dict:{'numpy': ['sum', 'copy'], 'pandas': ['concat', 'read_csv', 'value_counts'], 'seaborn': [], 'matplotlib': [], 'category_encoders': [], 'sklearn': [], 'warnings': []} axis_0: 1, axis_1: 8
spaceship-titanic-eda-feature-engineering.py : ['read_csv', 'head', 'info', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'head', 'sum', 'isna', 'isna', 'agg', 'groupby', 'value_counts', 'count', 'groupby', 'isna', 'isna', 'mean', 'groupby', 'isna', 'isna', 'fillna', 'mean', 'groupby', 'value_counts', 'groupby', 'isna', 'fillna', 'isna', 'isna', 'fillna', 'sum', 'isna', 'head', 'agg', 'groupby', 'isna', 'isna', 'isna', 'sum', 'isna', 'isna', 'describe', 'head', 'isna', 'isna', 'isna', 'isna', 'isna', 'fillna', 'mean', 'quantile', 'quantile', 'clip', 'drop', 'unique', 'drop', 'isna', 'sort_values', 'mean', 'groupby', 'isna', 'isna', 'isna', 'value_counts', 'fillna', 'head', 'drop', 'reindex', 'assign', 'head', 'boxplot', 'astype', 'head'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'numpy'] ['GridSearchCV', 'RandomizedSearchCV', 'accuracy_score', 'classification_report', 'confusion_matrix', 'tree']Dict:{'pandas': ['isna', 'unique', 'read_csv', 'value_counts'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'numpy': ['mean', 'quantile', 'sum', 'unique', 'clip', 'info'], 'sklearn': []} axis_0: 0, axis_1: 2
feature-engineering-2-aggregation-functions.py : ['diff', 'sum', 'read_parquet', 'read_parquet', 'read_parquet', 'unique', 'isin', 'isin', 'isnull', 'merge', 'reset_index', 'agg', 'groupby', 'read_csv', 'head', 'merge', 'groupby', 'diff', 'sum', 'median', 'mean', 'std', 'max', 'min', 'std', 'max', 'min', 'mean', 'std', 'var', 'sum', 'abs', 'mean', 'std', 'abs', 'mean', 'median', 'max', 'min', 'sum', 'max', 'sum', 'min', 'unique', 'sum', 'max', 'sum', 'min', 'unique', 'sum', 'diff', 'sum', 'abs', 'sum', 'sum', 'abs', 'sum', 'abs', 'sum', 'sum', 'unique', 'max', 'max', 'min', 'max', 'min', 'min', 'max', 'min', 'mean', 'sum', 'sum', 'sum', 'mean', 'abs', 'diff', 'median', 'mean', 'std', 'mean', 'std', 'var', 'skew', 'kurtosis', 'mean', 'sum', 'abs', 'diff', 'max', 'mean', 'max', 'mean', 'mean', 'where', 'mean', 'where', 'unique', 'sum', 'value_counts', 'sum', 'unique', 'sum', 'unique', 'sum', 'unique', 'dot', 'quantile', 'where', 'diff', 'max', 'max', 'min', 'sum', 'sum', 'apply', 'groupby', 'any'] ['random', 'seaborn', 'numpy', 'pandas', 'warnings', 'matplotlib.pyplot', 'glob', 'os', 'gc'] ['figure', 'Parallel', 'delayed']Dict:{'random': [], 'seaborn': [], 'numpy': ['mean', 'median', 'quantile', 'any', 'max', 'var', 'abs', 'sum', 'where', 'min', 'unique', 'dot', 'isin', 'diff', 'std'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'read_parquet', 'unique', 'merge'], 'warnings': [], 'matplotlib': [], 'glob': [], 'os': [], 'gc': [], 'joblib': []} axis_0: 1, axis_1: 0
house-price-ensemble-lightgbm-xgb-lasso-ridge.py : ['read_csv', 'read_csv', 'head', 'head', 'copy', 'hist', 'abs', 'reset_index', 'hist', 'copy', 'copy', 'head', 'info', 'describe', 'sum', 'isnull', 'sort_values', 'sum', 'isna', 'sum', 'duplicated', 'sum', 'isna', 'sum', 'isna', 'dropna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'corr', 'sort_values', 'corr', 'reset_index', 'sum', 'skew', 'skew', 'copy', 'copy', 'get_dummies', 'get_dummies', 'concat', 'tail', 'drop', 'head', 'head', 'head', 'drop', 'drop', 'fillna', 'abs', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 'xgboost'] ['stats', 'RobustScaler', 'OneHotEncoder', 'GridSearchCV', 'LGBMRegressor', 'OrdinalEncoder', 'train_test_split', 'RandomizedSearchCV', 'GridSearchCV', 'Lasso', 'LinearRegression', 'Ridge', 'ElasticNet', 'KernelRidge', 'mean_squared_error', 'mean_absolute_error', 'explained_variance_score', 'r2_score', 'XGBRegressor']Dict:{'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'get_dummies'], 'numpy': ['info', 'abs', 'sum', 'copy'], 'matplotlib': ['hist'], 'seaborn': [], 'warnings': [], 'scipy': ['describe', 'skew'], 'sklearn': [], 'lightgbm': [], 'xgboost': []} axis_0: 0, axis_1: 1
score-0-386-feature-engineering-random-forest.py : ['to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'read_csv', 'unique', 'count', 'filter', 'count', 'filter', 'filter', 'filter', 'filter', 'unique', 'abs', 'abs', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'unique', 'filter', 'std', 'filter', 'filter', 'filter', 'filter', 'to_numpy', 'unique', 'std', 'filter', 'std', 'filter', 'diff', 'filter', 'diff', 'mean', 'filter', 'rename', 'reset_index', 'sample', 'filter', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'polars', 'datetime', 'plotly.express', 'plotly.graph_objects', 'pickle'] ['tqdm', 'make_subplots', 'score', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'abs', 'unique', 'diff', 'std'], 'pandas': ['to_datetime', 'unique', 'read_csv'], 'matplotlib': [], 'polars': ['mean', 'count', 'std', 'read_csv'], 'datetime': [], '': [], 'tqdm': [], 'plotly': [], 'metric': [], 'sklearn': [], 'pickle': []} axis_0: 0, axis_1: 0
titanic-top-10-beginner-tutorial.py : ['read_csv', 'read_csv', 'head', 'sum', 'isna', 'fillna', 'median', 'sum', 'isna', 'value_counts', 'fillna', 'head', 'value_counts', 'fillna', 'corr', 'boxplot', 'hist', 'sum', 'sum', 'sum', 'apply', 'apply', 'drop', 'drop', 'head', 'sum', 'isna', 'fillna', 'median', 'get_dummies', 'get_dummies', 'drop', 'drop', 'drop', 'drop', 'drop', 'set_index', 'head', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot'] ['scatter_matrix', 'RandomForestClassifier', 'GridSearchCV']Dict:{'pandas': [], 'numpy': ['median', 'sum'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'sklearn': []} axis_0: 0, axis_1: 0
top-4-approach-with-randomforest.py : ['read_csv', 'read_csv', 'tail', 'head', 'info', 'info', 'unique', 'unique', 'describe', 'select_dtypes', 'describe', 'select_dtypes', 'drop', 'copy', 'any', 'isna', 'describe', 'equals', 'drop', 'select_dtypes', 'select_dtypes', 'boxplot', 'drop', 'drop', 'pivot_table', 'drop', 'select_dtypes', 'pivot_table', 'mode', 'pivot_table', 'pivot_table', 'pivot_table', 'corr', 'corr', 'drop', 'concat', 'drop', 'select_dtypes', 'pivot_table', 'pivot_table', 'sort_values', 'nunique', 'select_dtypes', 'concat', 'drop', 'concat', 'sum', 'isna', 'sum', 'isna', 'sort_values', 'copy', 'drop', 'copy', 'fillna', 'fillna', 'fillna', 'median', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'max', 'sum', 'isnull', 'max', 'sum', 'isnull', 'concat', 'drop', 'copy', 'drop', 'copy', 'apply', 'apply', 'concat', 'apply', 'apply', 'groupby', 'xs', 'value_counts', 'copy', 'xs', 'copy', 'xs', 'apply', 'groupby', 'fillna', 'mode', 'unique', 'fillna', 'mode', 'concat', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'replace', 'replace', 'join', 'apply', 'apply', 'concat', 'xs', 'pivot_table', 'pivot_table', 'mode', 'pivot_table', 'pivot_table', 'pivot_table', 'sort_values', 'pivot_table', 'sort_values', 'nunique', 'select_dtypes', 'drop', 'drop', 'corr', 'corr', 'copy', 'drop', 'get_dummies', 'xs', 'xs', 'mean', 'std', 'mean', 'sort_values', 'mean', 'std', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['cross_val_score', 'cross_validate', 'make_pipeline', 'StandardScaler', 'LogisticRegression', 'DecisionTreeClassifier', 'RandomForestClassifier', 'SVC', 'KNeighborsClassifier', 'GridSearchCV']Dict:{'numpy': ['mean', 'median', 'any', 'max', 'sum', 'unique', 'info', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'pivot_table', 'concat', 'value_counts', 'get_dummies', 'unique'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': []} axis_0: 0, axis_1: 0
time-series-analysis-forecasting.py : ['read_csv', 'read_csv', 'head', 'info', 'set_index', 'to_datetime', 'update', 'items', 'items', 'update', 'update', 'set_index', 'to_datetime', 'copy', 'mean', 'rolling', 'set_index', 'to_datetime', 'describe'] ['numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'warnings', 'os'] ['signal', 'seasonal_decompose', 'autocorrelation_plot', 'adfuller', 'kpss', 'acf', 'pacf', 'plot_acf', 'plot_pacf', 'lag_plot', 'lowess', 'ARIMA']Dict:{'numpy': ['mean', 'info', 'copy'], 'pandas': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'warnings': [], 'os': [], 'scipy': [], 'statsmodels': []} axis_0: 0, axis_1: 0
2019-data-science-bowl-some-interesting-features.py : ['read_csv', 'read_csv', 'sum', 'sum', 'sum', 'sum'] ['pandas'] []Dict:{'pandas': ['read_csv']} axis_0: 0, axis_1: 0
how-i-made-top-0-3-on-a-kaggle-competition.py : ['read_csv', 'read_csv', 'head', 'skew', 'kurt', 'corr', 'concat', 'boxplot', 'concat', 'boxplot', 'concat', 'concat', 'concat', 'drop', 'drop', 'drop', 'drop', 'reset_index', 'reset_index', 'drop', 'reset_index', 'concat', 'update', 'mean', 'isnull', 'items', 'mean', 'isnull', 'sort_values', 'apply', 'astype', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'transform', 'groupby', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'update', 'fillna', 'update', 'fillna', 'items', 'boxplot', 'sort_values', 'apply', 'head', 'boxplot', 'astype', 'astype', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'assign', 'assign', 'reset_index', 'get_dummies', 'head', 'duplicated', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'array', 'array', 'array', 'keys', 'read_csv', 'quantile', 'quantile', 'apply', 'apply', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'datetime', 'random', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'warnings', 'os'] ['Image', 'RandomForestRegressor', 'GradientBoostingRegressor', 'AdaBoostRegressor', 'BaggingRegressor', 'KernelRidge', 'Ridge', 'RidgeCV', 'ElasticNet', 'ElasticNetCV', 'SVR', 'StackingCVRegressor', 'LGBMRegressor', 'XGBRegressor', 'skew', 'norm', 'boxcox1p', 'boxcox_normmax', 'GridSearchCV', 'KFold', 'cross_val_score', 'mean_squared_error', 'OneHotEncoder', 'LabelEncoder', 'make_pipeline', 'scale', 'StandardScaler', 'RobustScaler', 'PCA']Dict:{'IPython': [], 'numpy': ['mean', 'median', 'quantile', 'array', 'std'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'array'], 'datetime': [], 'random': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'sklearn': ['transform'], 'mlxtend': [], 'lightgbm': [], 'xgboost': ['apply'], 'scipy': [], 'warnings': [], 'os': []} axis_0: 0, axis_1: 9
predicting-prices-eda-on-train-test-datasets.py : ['join', 'read_csv', 'head', 'info', 'memory_usage', 'head', 'sum', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'describe', 'sum', 'isnull', 'round', 'mean', 'isnull', 'copy', 'where', 'isnull', 'median', 'groupby', 'head', 'unique', 'median', 'groupby', 'copy', 'unique', 'head', 'copy', 'median', 'groupby', 'copy', 'hist', 'skew', 'copy', 'unique', 'describe', 'mean', 'min', 'max', 'copy', 'unique', 'boxplot', 'head', 'unique', 'copy', 'median', 'groupby', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'unique', 'unique', 'unique', 'unique', 'sum', 'isnull', 'round', 'mean', 'isnull', 'drop', 'head', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'head', 'head', 'head', 'skew', 'head', 'corr', 'head', 'drop', 'read_csv', 'head', 'info', 'memory_usage', 'head', 'sum', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'describe', 'sum', 'isnull', 'round', 'mean', 'isnull', 'head', 'unique', 'unique', 'head', 'copy', 'value_counts', 'copy', 'hist', 'skew', 'copy', 'unique', 'boxplot', 'head', 'unique', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'unique', 'unique', 'unique', 'unique', 'sum', 'isnull', 'round', 'mean', 'isnull', 'drop', 'head', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'head', 'head', 'head', 'head', 'corr', 'head', 'drop', 'concat', 'head', 'select_dtypes', 'get_dummies', 'concat', 'drop', 'head', 'duplicated', 'head', 'head', 'head', 'drop', 'drop', 'mean', 'read_csv', 'concat', 'head', 'to_csv'] ['numpy', 'pandas', 'warnings', 'os', 'missingno', 'numpy', 'seaborn', 'missingno', 'numpy', 'seaborn'] ['display', 'HTML', 'Javascript', 'pyplot', 'mplot3d', 'LinearRegression', 'RandomForestRegressor', 'DecisionTreeRegressor', 'cross_val_predict', 'cross_val_score', 'cross_validate', 'StandardScaler', 'PCA', 'Pipeline', 'AdaBoostRegressor', 'BaggingRegressor', 'ExtraTreesRegressor', 'GradientBoostingRegressor', 'KNeighborsRegressor', 'r2_score', 'mean_squared_error']Dict:{'IPython': [], 'numpy': ['mean', 'median', 'max', 'sum', 'where', 'round', 'min', 'unique', 'info', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique'], 'matplotlib': [], 'mpl_toolkits': [], 'warnings': [], 'os': [], 'missingno': [], 'seaborn': ['boxplot'], 'sklearn': []} axis_0: 1, axis_1: 11
feature-engineering-ensemblelearning-for-beginners.py : ['join', 'read_csv', 'read_csv', 'head', 'describe', 'info', 'info', 'concat', 'info', 'drop', 'sum', 'any', 'isna', 'sum', 'any', 'isna', 'dropna', 'sum', 'any', 'isna', 'get_dummies', 'get_dummies', 'concat', 'drop', 'concat', 'drop', 'head', 'astype', 'astype', 'corr', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'isnull', 'mean', 'fillna', 'items', 'dropna', 'get_dummies', 'get_dummies', 'concat', 'drop', 'concat', 'drop', 'astype', 'astype', 'corr', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'isnull', 'get_dummies', 'concat', 'drop', 'fillna', 'mean', 'mean', 'fillna', 'array', 'items', 'dropna', 'get_dummies', 'get_dummies', 'concat', 'drop', 'concat', 'drop', 'astype', 'astype', 'corr', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'isnull', 'get_dummies', 'concat', 'drop', 'mean', 'fillna', 'array', 'items', 'dropna', 'get_dummies', 'get_dummies', 'concat', 'drop', 'concat', 'drop', 'astype', 'astype', 'corr', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'isnull', 'get_dummies', 'concat', 'drop', 'mean', 'fillna', 'items', 'sum', 'isna', 'describe', 'fillna', 'mean', 'mean', 'fillna', 'get_dummies', 'get_dummies', 'concat', 'drop', 'concat', 'drop', 'astype', 'astype', 'info', 'info', 'concat', 'head', 'astype', 'info', 'corr', 'drop', 'mean', 'std', 'mean', 'std', 'replace', 'to_csv'] ['numpy', 'pandas', 'warnings', 'os', 'matplotlib.pyplot', 'seaborn'] ['RandomForestClassifier', 'cross_val_score', 'train_test_split', 'GridSearchCV', 'accuracy_score', 'f1_score', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'LogisticRegression', 'VotingClassifier']Dict:{'numpy': ['mean', 'any', 'sum', 'array', 'info', 'std'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'get_dummies', 'array'], 'warnings': [], '#Used': [], 'in': [], 'order': [], 'to': [], 'ignore': [], 'the': [], 'messages': [], 'showed': [], 'through': [], 'notebook': [], 'os': ['replace'], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 8
loan-prediction-case-study-dt-rf.py : ['read_csv', 'describe', 'info', 'head', 'hist', 'hist', 'hist', 'hist', 'info', 'get_dummies', 'info', 'drop'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['train_test_split', 'DecisionTreeClassifier', 'classification_report', 'confusion_matrix', 'RandomForestClassifier', 'classification_report', 'confusion_matrix']Dict:{'pandas': ['get_dummies', 'read_csv'], 'numpy': ['info'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 1
automated-feature-engineering-lightgbm-783.py : ['join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'mean', 'concat', 'replace', 'replace', 'replace', 'replace', 'replace', 'fillna', 'copy', 'notnull', 'copy', 'isnull', 'drop', 'pop', 'max', 'to_csv'] ['os', 'gc', 'pandas', 'numpy', 'lightgbm', 'featuretools', 'warnings'] ['LabelEncoder']Dict:{'os': ['replace'], 'gc': [], 'pandas': ['concat', 'notnull', 'read_csv', 'isnull'], 'numpy': ['mean', 'max', 'copy'], 'lightgbm': [], 'featuretools': [], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 1
tps-01-2022-catboost-seed-averaging.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'to_dict', 'unstack', 'map', 'set_index', 'get', 'map', 'set_index', 'get', 'merge', 'merge', 'fillna', 'fillna', 'copy', 'update', 'mean', 'abs', 'abs', 'abs', 'mean', 'std', 'array', 'mean', 'mean', 'mean', 'std', 'mean', 'to_csv', 'mean', 'to_csv', 'mean', 'to_csv'] ['numpy', 'pandas', 'optuna'] ['TimeSeriesSplit', 'OrdinalEncoder', 'CatBoostRegressor']Dict:{'numpy': ['mean', 'abs', 'array', 'std', 'copy'], 'pandas': ['array', 'merge', 'read_csv'], 'sklearn': [], 'catboost': [], 'optuna': []} axis_0: 0, axis_1: 4
nfl-feature-engineering-v2.py : ['read_csv', 'unique', 'mean', 'groupby', 'diff', 'mean', 'groupby', 'std', 'groupby', 'diff', 'std', 'groupby', 'agg', 'groupby', 'apply', 'agg', 'groupby', 'apply', 'agg', 'groupby', 'mean', 'groupby', 'merge', 'pow', 'sum', 'pow', 'array', 'idxmin', 'concat'] ['pandas', 'numpy'] ['tqdm']Dict:{'pandas': ['read_csv', 'concat', 'unique', 'array', 'merge'], 'tqdm': [], 'numpy': ['mean', 'std', 'sum', 'unique', 'diff', 'array']} axis_0: 0, axis_1: 0
transformer-vs-gmlp-with-without-self-attention.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'info', 'head', 'nunique', 'copy', 'drop', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'copy', 'astype', 'concat', 'drop', 'astype', 'to_numeric', 'astype', 'map', 'head', 'reset_index', 'query', 'reset_index', 'query', 'count', 'groupby', 'sum', 'astype', 'describe', 'describe', 'groupby', 'quantile', 'copy', 'quantile', 'where', 'describe', 'describe', 'groupby', 'corr', 'array', 'array', 'quantile', 'cut', 'copy', 'array', 'cut', 'map', 'fillna', 'mode', 'astype', 'info', 'cut', 'map', 'fillna', 'mode', 'astype', 'info', 'query', 'reset_index', 'query', 'reset_index', 'query', 'transform', 'transform', 'transform', '__getitem__', '__init__', '__init__', '__init__', '__init__', '__init__', '__init__', 'mul', '__init__', '__init__', 'mean', 'join', 'update', 'eval', 'eval', 'where', 'sum', 'eval', 'eval', 'squeeze', 'copy', 'where', 'to_csv', 'head'] ['numpy', 'pandas', 'scipy', 'matplotlib.pyplot', 'seaborn', 'matplotlib.ticker', 'plotly.express', 'plotly.graph_objects', 'os', 'sys', 'pathlib', 'gc', 're', 'math', 'random', 'time', 'datetime', 'sklearn', 'tensorflow', 'tensorflow_addons', 'torch', 'torch.nn', 'torch.optim', 'torch.nn.functional', 'warnings'] ['make_subplots', 'tqdm', 'Optional', 'Union', 'Tuple', 'OrderedDict', 'StratifiedKFold', 'StandardScaler', 'OrdinalEncoder', 'keras', 'layers']Dict:{'numpy': ['mean', 'squeeze', 'quantile', 'sum', 'where', 'info', 'array', 'copy'], 'pandas': ['read_csv', 'eval', 'cut', 'concat', 'to_numeric', 'array'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'plotly': ['__init__'], 'os,': [], 'sys,': [], 'pathlib,': [], 'gc': [], 're,': [], 'math,': [], 'random,': [], 'time': [], 'datetime': [], 'tqdm': ['update', '__init__'], 'typing': ['count', '__getitem__', '__init__'], 'collections': ['__getitem__', 'update', '__init__', 'copy'], 'sklearn': ['transform', '__init__'], 'tensorflow': [], 'tensorflow_addons': [], 'torch': [], '': [], 'warnings': []} axis_0: 0, axis_1: 3
rl-with-lux-2-rl-problem-solving.py : ['__init__', 'array', 'array', 'array', 'array', 'keys', 'all', 'keys', 'keys', 'array', 'array', 'array', '__init__', 'keys', 'keys', 'array', 'keys', 'array', 'array', 'mean', 'array', '__init__', 'array', 'where', 'where', 'diff', '__init__', 'keys', '__init__', 'join', 'join', 'join', 'join'] ['importlib', 'importlib_metadata', 'sys', 'numpy', 'numpy.typing', 'gym', 'numpy', 'numpy.typing', 'gym', 'numpy', 'numpy.typing', 'luxai_s2.env', 'matplotlib.pyplot', 'matplotlib.pyplot', 'copy', 'os.path'] ['Any', 'Dict', 'spaces', 'Any', 'Dict', 'spaces', 'Callable', 'Dict', 'spaces', 'LuxAI_S2', 'ObservationStateDict', 'ActionType', 'BidActionType', 'FactoryPlacementActionType', 'my_turn_to_place_factory', 'Controller', 'SubprocVecEnv', 'Monitor', 'TimeLimit', 'BaseCallback', 'EvalCallback', 'set_random_seed', 'PPO']Dict:{'importlib': [], 'importlib_metadata': [], 'sys': [], 'typing': ['keys', '__init__'], 'numpy': [], 'gym': [], 'luxai_s2': [], 'matplotlib': [], 'copy': [], 'stable_baselines3': [], 'os': ['join']} axis_0: 0, axis_1: 0
tf-multi-input.py : ['read_csv', 'head', 'read_csv', 'apply', 'transform', 'apply', 'drop', 'drop', 'join', 'drop', 'join', 'transform', 'drop', 'join', 'drop', 'join', 'drop', 'map', 'astype', 'drop', 'map', 'astype', 'drop', 'map', 'astype', 'drop', 'to_csv'] ['numpy', 'pandas', 'tensorflow', 'tensorflow.keras.layers', 'os', 'warnings'] ['keras', 'Dataset', 'train_test_split', 'KFold', 'PCA', 'MinMaxScaler', 'mean_squared_error', 'KMeans', 'Image']Dict:{'numpy': [], 'pandas': ['read_csv'], 'tensorflow': [], 'sklearn': [], 'PIL': [], 'os': [], 'warnings': []} axis_0: 0, axis_1: 13
top-x-football-prob-prediction-lgbm-v01.py : ['read_csv', 'read_csv', 'read_csv', 'dropna', 'head', 'filter', 'to_datetime', 'to_datetime', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'isna', 'where', 'where', 'where', 'isna', 'where', 'where', 'where', 'where', 'copy', 'drop', 'drop', 'filter', 'drop', 'filter', 'drop', 'filter', 'drop', 'drop', 'filter', 'drop', 'filter', 'drop', 'filter', 'fillna', 'get_dummies', 'fillna', 'get_dummies', 'head', 'head', 'wide_to_long', 'wide_to_long', 'reset_index', 'reset_index', 'fillna', 'get_dummies', 'fillna', 'get_dummies', 'head', 'reset_index', 'agg', 'groupby', 'join', 'copy', 'drop', 'merge', 'copy', 'drop', 'merge', 'head', 'map', 'head', 'squeeze', 'squeeze', 'squeeze', 'round', 'to_csv', 'head'] ['numpy', 'pandas', 'datetime', 'matplotlib.pyplot', 'lightgbm'] ['KFold', 'StratifiedKFold', 'RobustScaler', 'LabelEncoder', 'accuracy_score', 'log_loss', 'precision_score', 'roc_auc_score', 'confusion_matrix', 'ConfusionMatrixDisplay', 'classification_report']Dict:{'numpy': ['where', 'round', 'squeeze', 'copy'], 'pandas': ['isna', 'read_csv', 'wide_to_long', 'get_dummies', 'merge', 'to_datetime'], 'datetime': [], 'matplotlib': [], 'sklearn': [], 'lightgbm': []} axis_0: 2, axis_1: 12
top-8-score-rf-rank-prediction-0-894.py : ['read_csv', 'drop', 'read_csv', 'array', 'array', 'array', 'rank', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'category_encoders'] ['tqdm', 'Pipeline', 'roc_auc_score', 'DecisionTreeClassifier', 'RandomForestClassifier', 'train_test_split', 'cross_val_score', 'KFold']Dict:{'numpy': ['array'], 'pandas': ['array', 'read_csv'], 'tqdm': [], 'category_encoders': [], 'sklearn': []} axis_0: 0, axis_1: 13
tabular-playground-series-jan-2021-models.py : ['read_csv', 'read_csv', 'sum', 'memory_usage', 'sum', 'memory_usage', 'mean', 'median', 'std', 'min', 'quantile', 'quantile', 'quantile', 'max', 'skew', 'kurtosis', 'isnull', 'mean', 'median', 'mean', 'median', 'std', 'mean', 'median', 'std', 'min', 'max', 'min', 'max', 'skew', 'kurtosis', 'skew', 'kurtosis', 'isnull', 'isnull', 'copy', 'test', 'copy', 'drop', 'reset_index', 'astype', 'concat', 'test', 'transform', 'test', 'transform', 'test', 'test', 'astype', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'astype', 'round', 'test', 'concat', 'test', 'test', 'test', 'copy', 'copy', 'test', 'transform', 'sum', 'memory_usage', 'sum', 'memory_usage', 'unique', 'nunique', 'nunique', 'unique', 'nunique', 'nunique', 'unique', 'nunique', 'array', 'nunique', 'unique', 'astype', 'astype', 'astype', 'astype', 'nunique', 'sort_values', 'transform', 'sum', 'memory_usage', 'sum', 'memory_usage', 'copy', 'copy', 'copy', 'to_csv', 'to_csv', 'read_csv', 'read_csv', 'transform', 'sum', 'memory_usage', 'sum', 'memory_usage', 'copy', 'copy', 'copy', 'to_csv', 'to_csv', 'read_csv', 'read_csv', 'transform', 'sum', 'memory_usage', 'sum', 'memory_usage', 'copy', 'copy', 'copy', 'to_csv', 'to_csv', 'read_csv', 'read_csv', 'transform', 'sum', 'memory_usage', 'sum', 'memory_usage', 'copy', 'copy', 'copy', 'to_csv', 'to_csv', 'read_csv', 'read_csv', 'concat', 'astype', 'transform', 'unique', 'astype', 'transform', 'astype', 'transform', 'nunique', 'unique', 'nunique', 'transform', 'sum', 'memory_usage', 'sum', 'memory_usage', 'copy', 'copy', 'copy', 'to_csv', 'to_csv', 'read_csv', 'read_csv', 'transform', 'sum', 'memory_usage', 'sum', 'memory_usage', 'copy', 'copy', 'copy', 'to_csv', 'to_csv', 'read_csv', 'read_csv', 'mean', 'concat', 'astype', 'transform', 'concat', 'astype', 'transform', 'concat', 'unique', 'nunique', 'unique', 'nunique', 'items', 'transform', 'sum', 'memory_usage', 'sum', 'memory_usage', 'copy', 'copy', 'copy', 'to_csv', 'to_csv', 'read_csv', 'read_csv', 'transform', 'sum', 'memory_usage', 'sum', 'memory_usage', 'copy', 'copy', 'copy', 'to_csv', 'to_csv', 'read_csv', 'read_csv', 'corr', 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'read_csv', 'test', 'test', 'copy', 'copy', 'test', 'transform', 'to_csv', 'describe'] ['warnings', 'random', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'catboost', 'tensorflow', 'tensorflow_addons', 'tensorflow.keras.backend', 'cuml', 'cuml'] ['tqdm', 'probplot', 'kurtosis', 'skew', 'gmean', 'StandardScaler', 'KFold', 'mean_squared_error', 'Ridge', 'SVR', 'GaussianMixture', 'RandomTreesEmbedding', 'keras', 'Model', 'Input', 'Dense', 'Embedding', 'Reshape', 'Concatenate', 'Dropout', 'BatchNormalization', 'Activation', 'GaussianNoise', 'Adam', 'l1', 'l2', 'ModelCheckpoint', 'ReduceLROnPlateau', 'EarlyStopping']Dict:{'warnings': [], 'random': [], 'os': [], 'tqdm': [], 'numpy': ['mean', 'median', 'quantile', 'max', 'sum', 'array', 'round', 'test', 'min', 'unique', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'test', 'unique', 'array'], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'sklearn': ['transform'], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'tensorflow': [], 'tensorflow_addons': []} axis_0: 4, axis_1: 6
moa-pytorch-rankgauss-pca-nn-upgrade-3d-visual.py : ['to_numeric', 'reset_index', 'sort_values', 'sort_values', 'update', 'update', 'update', 'update', 'update', 'update', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'array', 'array', 'transform', 'transform', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'head', 'concat', 'concat', 'head', 'merge', 'reset_index', 'reset_index', 'drop', 'drop', 'head', 'drop', 'copy', 'astype', 'eval', 'eval', '__init__', 'sum', 'mean', 'get_dummies', '__init__', '__init__', 'mean', 'sum', 'reset_index', 'reset_index', 'fillna', 'merge', 'drop', 'fillna', 'merge', 'drop', 'to_csv'] ['sys', 'numpy', 'random', 'pandas', 'os', 'copy', 'gc', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'plotly.graph_objects', 'scipy.stats', 'torch', 'torch.nn', 'torch.nn.functional', 'torch.optim', 'warnings'] ['preprocessing', 'log_loss', 'StandardScaler', 'PCA', 'QuantileTransformer', 'VarianceThreshold', 'SelectKBest', 'MultilabelStratifiedKFold', 'kurtosis', '_WeightedLoss']Dict:{'sys': [], 'numpy': ['mean', 'array', 'sum', 'copy'], 'random': [], 'pandas': ['read_csv', 'eval', 'concat', 'get_dummies', 'to_numeric', 'array', 'merge'], 'os': [], 'copy': ['copy'], 'gc': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': [], 'iterstrat': [], 'scipy': ['__init__'], 'torch': ['eval', '__init__'], 'warnings': []} axis_0: 0, axis_1: 9
problem-i-titanic.py : ['read_csv', 'describe', 'info', 'head', 'sum', 'isna', 'value_counts', 'unstack', 'count', 'groupby', 'drop', 'drop', 'corr', 'drop'] ['pandas', 'matplotlib.pyplot', 'seaborn'] ['LabelEncoder', 'train_test_split', 'SVC', 'classification_report', 'RandomForestClassifier', 'classification_report']Dict:{'pandas': ['isna', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 0
parallel-data-processing-and-model-training.py : ['copy', 'astype', 'concat', 'to_datetime', 'copy', 'apply', 'reset_index', 'agg', 'groupby', 'reset_index', 'shift', 'groupby', 'agg', 'groupby', 'map', 'map', 'concat', 'copy', 'merge', 'join', 'merge', 'join', 'unique', 'isin', 'isin', 'drop', 'astype', 'astype', 'clip', 'sum', 'groupby', 'mean', 'std'] ['gc', 'glob', 'os', 'joblib', 'lightgbm', 'matplotlib.pyplot', 'numpy', 'pandas', 'time'] ['accuracy_score', 'train_test_split', 'contextmanager', 'ThreadPool', 'Pool', 'Parallel', 'delayed', 'twosigmanews']Dict:{'gc': [], 'glob': [], 'os': [], 'joblib': [], 'lightgbm': [], 'matplotlib': [], 'numpy': ['mean', 'sum', 'unique', 'clip', 'isin', 'std', 'copy'], 'pandas': ['to_datetime', 'merge', 'unique', 'concat'], 'sklearn': [], 'contextlib': [], 'multiprocessing': ['map', 'join', 'apply'], 'time': [], 'kaggle': []} axis_0: 0, axis_1: 2
tmdb-box-office-prediction-eda-ml.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'sum', 'isna', 'sum', 'isna', 'boxplot', 'to_string', 'fillna', 'fillna', 'apply', 'apply', 'boxplot', 'to_string', 'fillna', 'fillna', 'apply', 'apply', 'boxplot', 'to_string', 'fillna', 'fillna', 'apply', 'apply', 'boxplot', 'boxplot', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'apply', 'apply', 'sort_values', 'apply', 'apply', 'value_counts', 'apply', 'apply', 'value_counts', 'apply', 'apply', 'fillna', 'fillna', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'fillna', 'fillna', 'apply', 'apply', 'sort_values', 'head', 'apply', 'apply', 'value_counts', 'apply', 'apply', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'apply', 'fillna', 'apply', 'fillna', 'sort_values', 'head', 'apply', 'apply', 'boxplot', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'boxplot', 'fillna', 'mode', 'fillna', 'mode', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'sum', 'isna', 'replace', 'head', 'sort_values', 'replace', 'head', 'sort_values', 'apply', 'apply', 'sum', 'isna', 'replace', 'head', 'sort_values', 'replace', 'head', 'sort_values', 'apply', 'apply', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'sum', 'isna', 'replace', 'head', 'sort_values', 'replace', 'head', 'sort_values', 'apply', 'apply', 'sum', 'isna', 'replace', 'head', 'sort_values', 'replace', 'head', 'sort_values', 'apply', 'apply', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'count', 'count', 'fillna', 'fillna', 'boxplot', 'apply', 'apply', 'fillna', 'fillna', 'boxplot', 'apply', 'apply', 'fillna', 'fillna', 'boxplot', 'corr', 'bool', 'corr', 'bool', 'isnull', 'isnull', 'value_counts', 'boxplot', 'isnull', 'isnull', 'value_counts', 'boxplot', 'value_counts', 'boxplot', 'boxplot', 'median', 'head', 'sort_values', 'sort_values', 'head', 'sort_values', 'apply', 'apply', 'apply', 'apply', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'median', 'head', 'sort_values', 'head', 'sort_values', 'apply', 'apply', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'head', 'head', 'boxplot', 'median', 'head', 'sort_values', 'head', 'sort_values', 'apply', 'apply', 'head', 'sum', 'sum', 'isna', 'round', 'round', 'round', 'round', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'gc', 'warnings', 're', 're', 're', 're', 'scikitplot', 'time', 'random', 'xgboost', 'xgboost', 'xgboost', 'scikitplot', 'scikitplot', 'scikitplot', 'scikitplot', 'lightgbm', 'lightgbm', 'time', 'random', 'xgboost', 'xgboost', 'time', 'random', 'xgboost', 'lightgbm', 'lightgbm'] ['WordCloud', 'STOPWORDS', 'ImageColorGenerator', 'datetime', 'train_test_split', 'KFold', 'mean_squared_error', 'BayesSearchCV', 'train_test_split', 'KFold', 'mean_squared_error', 'ExtraTreesRegressor', 'train_test_split', 'KFold', 'mean_squared_error', 'BayesSearchCV', 'ExtraTreesRegressor', 'ExtraTreesRegressor', 'train_test_split', 'KFold', 'mean_squared_error', 'RandomForestRegressor', 'train_test_split', 'KFold', 'mean_squared_error', 'BayesSearchCV', 'RandomForestRegressor', 'RandomForestRegressor', 'train_test_split', 'KFold', 'mean_squared_error', 'train_test_split', 'KFold', 'mean_squared_error', 'BayesSearchCV', 'train_test_split', 'KFold', 'mean_squared_error', 'SelectFromModel', 'train_test_split', 'StratifiedKFold', 'KFold', 'mean_squared_error', 'train_test_split', 'KFold', 'mean_squared_error', 'SelectFromModel', 'train_test_split', 'KFold', 'mean_squared_error', 'train_test_split', 'KFold', 'mean_squared_error']Dict:{'numpy': ['round', 'sum', 'median'], 'pandas': ['isna', 'isnull', 'read_csv', 'value_counts'], 'os': ['replace'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'gc': [], 'wordcloud': [], 'warnings': [], 'datetime': ['replace'], 're': [], 'sklearn': [], 'scikitplot': [], 'time': [], 'random': [], 'xgboost': [], 'lightgbm': []} axis_0: 0, axis_1: 10
tps-dec-eda-modelling.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'head', 'sum', 'isna', 'describe', 'head', 'sum', 'isna', 'describe', 'head', 'sort_values', 'describe', 'concat', 'nunique', 'nunique', 'reset_index', 'value_counts', 'sort_values', 'drop', 'where', 'drop', 'mean', 'std', 'min', 'max', 'mean', 'std', 'min', 'max', 'to_numpy', 'transform', 'to_numpy', 'astype', 'to_numpy', 'astype', 'to_numpy', 'astype', 'to_numpy', 'mean', 'mean', 'mean', 'copy', 'astype', 'squeeze', 'to_csv', 'head', 'copy', 'astype', 'squeeze', 'to_csv', 'head', 'copy', 'astype', 'squeeze', 'to_csv', 'head', 'copy', 'astype', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'tensorflow', 'time', 'warnings'] ['StratifiedKFold', 'StandardScaler', 'LabelEncoder', 'accuracy_score', 'train_test_split', 'mode', 'XGBClassifier', 'CatBoostClassifier', 'LGBMClassifier', 'layers', 'callbacks', 'to_categorical', 'ticker']Dict:{'numpy': ['mean', 'squeeze', 'max', 'sum', 'where', 'min', 'std', 'copy'], 'pandas': ['concat', 'isna', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': [], 'scipy': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'tensorflow': [], 'time': [], 'warnings': []} axis_0: 1, axis_1: 9
house-price-some-of-regression-models.py : ['read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'corr', 'corr', 'info', 'boxplot', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'drop', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'drop', 'head', 'sort_values', 'sum', 'isnull', 'head', 'sort_values', 'sum', 'isnull', 'head', 'head', 'head', 'sort_values', 'sum', 'isnull', 'head', 'sort_values', 'sum', 'isnull', 'fillna', 'mean', 'fillna', 'mean', 'corr', 'nlargest', 'drop', 'head', 'sort_values', 'sum', 'isnull', 'head', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'drop', 'array', 'read_csv', 'head', 'concat', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'lightgbm'] ['stats', 'norm', 'skew', 'train_test_split', 'StandardScaler', 'LinearRegression', 'metrics', 'ensemble', 'shuffle', 'mean_squared_error', 'r2_score', 'DecisionTreeRegressor', 'SVR', 'RandomForestRegressor']Dict:{'numpy': ['mean', 'info', 'array', 'sum'], 'pandas': ['concat', 'array', 'read_csv', 'isnull'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': [], 'os': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 4
nfl-eda-on-train-test-fe-correlation-anova.py : ['read_csv', 'copy', 'concat', 'tz_localize', 'to_datetime', 'tz_localize', 'to_datetime', 'hist', 'hist', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop', 'unique', 'copy', 'sort_values', 'iterrows', 'apply', 'apply', 'apply', 'apply', 'apply', 'to_datetime', 'value_counts', 'value_counts', 'drop_duplicates', 'set_index', 'drop_duplicates', 'set_index', 'drop_duplicates', 'drop', 'join', 'mean', 'groupby', 'join', 'mean', 'groupby', 'rename', 'set_index', 'join', 'groupby', 'apply', 'mean', 'min', 'mean', 'join', 'sort_values', 'abs', 'corrwith', 'dropna', 'dropna', 'reset_index', 'sort_values', 'sort_values', 'mean', 'groupby', 'value_counts', 'value_counts', 'reset_index', 'join', 'isin', 'melt', 'sort_values'] ['pandas', 'numpy', 'gc', 'seaborn', 'matplotlib.pyplot', 'warnings', 'statsmodels.api'] ['nflrush', 'ols']Dict:{'kaggle': [], 'pandas': ['read_csv', 'melt', 'concat', 'value_counts', 'unique', 'to_datetime'], 'numpy': ['mean', 'abs', 'min', 'unique', 'isin', 'copy'], 'gc': [], 'seaborn': [], 'matplotlib': ['hist'], 'warnings': [], 'statsmodels': []} axis_0: 0, axis_1: 13
titanic-predictions.py : ['read_csv', 'read_csv', 'head', 'sum', 'isnull', 'isnull', 'mean', 'mean', 'mean', 'apply', 'replace', 'replace', 'replace', 'replace', 'map', 'map', 'map', 'drop', 'dropna', 'drop', 'head', 'drop', 'copy', 'head', 'sum', 'isnull', 'apply', 'replace', 'replace', 'replace', 'replace', 'fillna', 'median', 'map', 'map', 'map', 'drop', 'head', 'sum', 'isnull', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'seaborn'] ['train_test_split', 'LogisticRegression', 'classification_report', 'accuracy_score', 'confusion_matrix']Dict:{'pandas': ['read_csv', 'isnull'], 'numpy': ['mean', 'median', 'sum', 'copy'], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 5
predict-cuisine-type-from-recipe-ingredients.py : ['read_json', 'read_json', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'value_counts', 'apply', 'join', 'apply', 'join', 'replace', 'join', 'reset_index', 'join', 'reset_index', 'sort_values', 'sort_values', 'concat', 'set_index', 'read_json', 'set_index', 'read_json', 'copy', 'concat', 'drop', 'join', 'join', 'transform', 'astype', 'mean', 'std', 'boxplot', 'rename', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib', 'seaborn', 'itertools', 'graphviz', 'json', 'time', 'gc', 'plotly.graph_objs', 'networkx', 'warnings'] ['read_csv', 'init_notebook_mode', 'iplot', 'Counter', 'model_selection', 'Imputer', 'train_test_split', 'cross_val_score', 'KFold', 'learning_curve', 'StratifiedKFold', 'train_test_split', 'confusion_matrix', 'make_scorer', 'accuracy_score', 'RandomForestClassifier', 'LogisticRegression', 'SVC', 'LinearSVC', 'RandomForestClassifier', 'cross_val_score', 'TfidfVectorizer', 'LabelEncoder', 'CountVectorizer', 'WordCloud', 'STOPWORDS']Dict:{'numpy': ['mean', 'std', 'sum', 'copy'], 'pandas': [], 'matplotlib': [], 'seaborn': ['boxplot'], 'itertools': ['count'], 'graphviz': [], '': [], 'json': [], 'time': [], 'gc': [], 'plotly': [], 'collections': ['copy'], 'sklearn': [], 'wordcloud': [], 'networkx': [], 'warnings': []} axis_0: 1, axis_1: 1
take-care-of-emoji-character-when-nlp.py : ['read_csv', 'read_csv', 'concat', 'astype', 'fillna', 'add', 'astype', 'fillna', 'add', 'join', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'fillna', 'apply', 'astype', 'count', 'filter', 'isnull', 'head', 'bool', 'corr'] ['numpy', 'pandas', 'string', 'seaborn', 'matplotlib.pyplot', 'os'] []Dict:{'numpy': ['add'], 'pandas': ['concat', 'read_csv', 'isnull'], 'string': [], 'seaborn': [], 'matplotlib': [], 'os': []} axis_0: 1, axis_1: 0
titanic-eda-and-classification.py : ['join', 'read_csv', 'read_csv', 'head', 'describe', 'info', 'astype', 'sum', 'isna', 'value_counts', 'value_counts', 'value_counts', 'boxplot', 'boxplot', 'max', 'min', 'keys', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'concat', 'value_counts', 'corr', 'drop', 'copy'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'os'] ['KNeighborsClassifier', 'RandomForestClassifier', 'SGDClassifier', 'SVC', 'cross_val_predict', 'cross_val_score', 'RocCurveDisplay', 'PrecisionRecallDisplay', 'classification_report', 'BaseEstimator', 'TransformerMixin', 'SimpleImputer', 'Pipeline', 'OneHotEncoder', 'FeatureUnion', 'RandomizedSearchCV']Dict:{'numpy': ['max', 'sum', 'min', 'info', 'copy'], 'pandas': ['isna', 'concat', 'read_csv', 'value_counts'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'sklearn': [], 'os': []} axis_0: 0, axis_1: 1
nm-llm-ai-detect-vectorizer-model.py : ['map', 'map', 'read_csv', 'sample', 'join', 'join', 'join', 'replace', 'apply', 'read_csv', 'rename', 'concat', 'replace', 'copy', 'value_counts', 'drop', 'copy', 'read_csv', 'replace', 'apply', 'transform', 'array', 'to_csv', 'read_csv', 'read_csv'] ['numpy', 'pandas', 'random', 'os', 'sys', 're', 'joblib', 'xgboost', 'catboost', 'lightgbm', 'sys', 'gc', 'pandas', 'numpy', 'numpy', 'language_tool_python'] ['LogisticRegression', 'MultinomialNB', 'TfidfVectorizer', 'VotingClassifier', 'SGDClassifier', 'train_test_split', 'accuracy_score', 'roc_auc_score', 'GridSearchCV', 'make_scorer', 'accuracy_score', 'ProcessPoolExecutor', 'SGDOneClassSVM', 'OneClassSVM', 'IsolationForest', 'LocalOutlierFactor', 'EllipticEnvelope', 'StratifiedKFold', 'roc_auc_score', 'TfidfVectorizer', 'decoders', 'models', 'normalizers', 'pre_tokenizers', 'processors', 'trainers', 'Tokenizer', 'Dataset', 'tqdm', 'PreTrainedTokenizerFast', 'hstack', 'coo_matrix']Dict:{'numpy': ['array', 'copy'], 'pandas': ['concat', 'array', 'read_csv', 'value_counts'], 'sklearn': [], 'random,os,sys': [], 'concurrent': ['map'], 're': [], 'joblib': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'sys': [], 'gc': [], 'tokenizers': [], 'datasets': [], 'tqdm': [], 'transformers': [], 'language_tool_python': [], 'scipy': []} axis_0: 0, axis_1: 1
titanic-by-automl-autogluon-quick-start.py : ['concat', 'fillna', 'astype', 'drop', 'drop', 'read_csv', 'to_csv'] ['numpy', 'pandas'] ['TabularDataset', 'TabularPredictor', 'StandardScaler', 'LabelEncoder', 'SimpleImputer']Dict:{'numpy': [], 'pandas': ['concat', 'read_csv'], 'autogluon': [], 'sklearn': []} axis_0: 1, axis_1: 0
optiver-lgb-and-te-baseline-inference.py : ['info', 'read_csv', 'join', 'info', 'head', 'value_counts', 'value_counts', 'hist', 'read_csv', 'join', 'info', 'head', 'read_csv', 'join', 'info', 'head', 'join', 'info', 'info', 'read_parquet', 'join', 'astype', 'read_parquet', 'join', 'astype', 'info', 'head', 'tail', 'info', 'head', 'tail', 'merge', 'head', 'tail', 'join', 'diff', 'sum', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'join', 'merge', 'merge', 'sort_values', 'fillna', 'merge', 'sort_values', 'fillna', 'concat', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'merge', 'join', 'info', 'read_pickle', 'fillna', 'replace', 'merge', 'merge', 'astype', 'astype', 'head', 'info', 'sum', 'sum', 'copy', 'mean', 'dropna', 'hist', 'hist', 'info', 'unique', 'query', 'query', 'info', 'sort_values', 'to_csv', 'info', 'to_markdown', 'to_csv', 'info', 'head'] ['numpy', 'pandas', 'gc', 'pathlib', 'json', 'time', 'requests', 'glob', 'os', 'joblib', 'lightgbm', 'matplotlib.pyplot', 'matplotlib.style', 'seaborn', 'warnings'] ['tqdm', 'Pool', 'cpu_count', 'datetime', 'relativedelta', 'FR', 'model_selection', 'venn2', 'venn3', 'pyplot', 'ScalarFormatter', 'getLogger', 'INFO', 'FileHandler', 'Formatter', 'StreamHandler', 'r2_score']Dict:{'numpy': ['mean', 'diff', 'sum', 'unique', 'info', 'copy'], 'pandas': ['read_csv', 'concat', 'value_counts', 'read_parquet', 'read_pickle', 'unique', 'merge'], 'gc': [], 'pathlib': [], 'tqdm': [], 'json': [], 'multiprocessing': [], 'time': [], 'requests': ['head'], 'datetime': ['replace'], 'dateutil': [], 'glob': [], 'os': ['replace'], 'sklearn': [], 'joblib': [], 'lightgbm': [], 'matplotlib': [], 'matplotlib_venn': [], 'seaborn': [], 'warnings': []} axis_0: 0, axis_1: 0
amex-data-preprocesing-feature-engineering.py : ['read_parquet', 'read_csv', 'read_parquet', 'read_csv', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'drop', 'to_datetime', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'sort_values', 'fillna', 'transform', 'groupby', 'sort_values', 'transform', 'groupby', 'sort_values', 'transform', 'groupby', 'sort_values', 'transform', 'groupby', 'sort_values', 'max', 'min', 'agg', 'groupby', 'agg', 'groupby', 'merge', 'drop', 'fillna', 'mean', 'astype', 'to_datetime', 'sort_values', 'drop', 'astype', 'agg', 'groupby', 'astype', 'agg', 'groupby', 'merge', 'astype', 'astype', 'astype', 'diff', 'astype', 'agg', 'groupby', 'count', 'groupby', 'unstack', 'fillna', 'concat', 'fillna', 'transform', 'transform', 'transform', 'transform', 'read_pickle', 'fillna', 'concat', 'sort_values', 'median', 'boxplot', 'sort_values', 'median', 'transpose', 'transpose', 'sum', 'groupby', 'isin', 'boxplot', 'update', 'rename'] ['os', 'gc', 'glob', 'tqdm', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] ['StandardScaler', 'MinMaxScaler']Dict:{'os': ['rename'], 'gc': [], 'glob': [], 'tqdm': [], 'numpy': ['transpose', 'median', 'mean', 'max', 'sum', 'min', 'isin', 'diff'], 'pandas': ['read_csv', 'concat', 'read_parquet', 'read_pickle', 'merge', 'to_datetime'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'sklearn': ['transform']} axis_0: 3, axis_1: 5
mfcc-feature-extraction-from-audio.py : ['abs'] ['pandas', 'numpy', 'matplotlib.pyplot', 'librosa', 'librosa.display', 'warnings'] ['wavfile']Dict:{'pandas': [], 'numpy': ['abs'], 'matplotlib': [], 'scipy': [], 'librosa': [], 'warnings': []} axis_0: 0, axis_1: 0
tps-feb-2021-eda.py : ['read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'head', 'head', 'update', 'describe', 'update', 'describe', 'update', 'describe', 'update', 'value_counts', 'update', 'value_counts', 'corr', 'corr', 'corrwith', 'update', 'sort_index', 'value_counts', 'update', 'sort_index', 'value_counts', 'update', 'sort_index', 'value_counts', 'update', 'sort_index', 'value_counts', 'update', 'sort_index', 'value_counts', 'update', 'sort_index', 'value_counts', 'update', 'sort_index', 'value_counts', 'update', 'sort_index', 'value_counts', 'update', 'sort_index', 'value_counts', 'update', 'sort_index', 'value_counts', 'update', 'copy', 'update', 'copy', 'min', 'update', 'copy', 'max', 'update', 'copy', 'sum', 'update', 'copy', 'update', 'copy', 'sum', 'drop', 'update', 'update', 'update', 'reset_index', 'mean', 'groupby', 'update', 'reset_index', 'min', 'groupby', 'update', 'reset_index', 'max', 'groupby'] ['os', 'joblib', 'numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'seaborn'] []Dict:{'os': [], 'joblib': [], 'numpy': ['mean', 'max', 'sum', 'min', 'copy'], 'pandas': ['value_counts', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 5
xgboost-pyramid-cv-0-7968.py : ['read_parquet', 'sample', 'reset_index', 'head', '__init__', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'sum', 'hist', 'keys', 'copy', 'set_index', 'concat', 'drop_duplicates', 'read_parquet', 'set_index', 'merge', 'reset_index', 'sort_index', 'to_csv', 'head', 'hist', 'copy', 'merge', 'mean', 'sort_values', 'to_csv', 'read_parquet', 'copy', 'copy', 'copy', 'read_csv', 'astype', 'set_index', 'merge', 'reset_index', 'to_csv', 'head', 'hist'] ['pandas', 'numpy', 'matplotlib.pyplot', 'gc', 'os', 'cupy', 'cudf', 'xgboost', 'matplotlib.pyplot'] ['KFold']Dict:{'pandas': ['read_csv', 'concat', 'read_parquet', 'array', 'merge'], 'matplotlib': ['hist'], 'sklearn': ['__init__'], 'xgboost': [], '=': [], '[]': []} axis_0: 1, axis_1: 1
titanic-survival-eda-feature-engineering.py : ['read_csv', 'head', 'info', 'sum', 'isnull', 'fillna', 'mean', 'apply', 'head', 'hist', 'mean', 'value_counts', 'map', 'max', 'map', 'max', 'map', 'max', 'dropna', 'head', 'head', 'map', 'dropna', 'apply', 'head', 'apply', 'head'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'os'] ['Series', 'DataFrame']Dict:{'numpy': ['mean', 'info', 'sum', 'max'], 'pandas': [], 'seaborn': [], 'matplotlib': ['hist'], 'os': []} axis_0: 0, axis_1: 1
comprehensive-beginners-guide-to-top-6.py : ['join', 'read_csv', 'read_csv', 'copy', 'drop', 'info', 'fillna', 'copy', 'rename', 'count', 'groupby', 'reset_index', 'copy', 'copy', 'rename', 'reset_index', 'count', 'groupby', 'sum', 'rename', 'reset_index', 'count', 'groupby', 'fillna', 'transform', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'set_index', 'reset_index', 'sort_index', 'drop', 'fillna', 'mode', 'reset_index', 'copy', 'copy', 'test', 'astype', 'get_dummies', 'drop', 'concat', 'test', 'transform', 'transform', 'drop', 'drop', 'drop', 'replace', 'replace', 'get_dummies', 'drop', 'concat', 'get_dummies', 'max', 'min', 'test', 'nlargest', 'copy', 'copy', 'test', 'transform', 'copy', 'to_csv', 'read_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'os'] ['partial', 'TargetEncoder', 'PolynomialFeatures', 'StandardScaler', 'MinMaxScaler', 'RobustScaler', 'BaseEstimator', 'TransformerMixin', 'GridSearchCV', 'train_test_split', 'RepeatedStratifiedKFold', 'cross_val_score', 'StratifiedShuffleSplit', 'Pipeline', 'LogisticRegression', 'RidgeClassifier', 'KNeighborsClassifier', 'RandomForestClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'XGBClassifier', 'SVC', 'StackingClassifier', 'VotingClassifier', 'simplefilter', 'ConvergenceWarning']Dict:{'functools': [], 'pandas': ['concat', 'get_dummies', 'test', 'read_csv'], 'numpy': ['max', 'sum', 'test', 'min', 'info', 'copy'], 'matplotlib': [], 'seaborn': [], 'category_encoders': [], 'sklearn': [], 'xgboost': ['apply'], 'warnings': [], 'os': ['rename', 'replace']} axis_0: 0, axis_1: 7
ps3e26-liver-cirrhosis-eda-model.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'value_counts', 'value_counts', 'value_counts', 'isna', 'head', 'head', 'nunique', 'nunique', 'concat', 'dropna', 'reset_index', 'sample', 'info', 'head', 'where', 'where', 'where', 'where', 'hist', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'astype', 'cut', 'astype', 'cut', 'sum', 'sum', 'mean', 'mean', 'astype', 'astype', 'astype', 'astype', 'head', 'nunique', 'head', 'value_counts', 'unique', 'corr', 'drop', 'drop', 'head', 'transform', 'head', 'drop', 'drop', 'drop', 'drop', 'head', 'head', 'get_dummies', 'get_dummies', 'replace', 'replace', 'head', 'concat', 'concat', 'head', 'info', 'items', 'info', 'head', 'apply', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'random', 'plotly.graph_objects', 'seaborn', 'matplotlib.pyplot', 'xgboost', 'shap', 'lightgbm', 'matplotlib.pyplot', 'shap'] ['display', 'Markdown', 'PrettyTable', 'PrettyTable', 'PrettyTable', 'make_subplots', 'StandardScaler', 'TomekLinks', 'StratifiedKFold', 'LabelEncoder', 'XGBClassifier', 'log_loss', 'confusion_matrix', 'f1_score', 'train_test_split', 'log_loss', 'LGBMClassifier', 'CatBoostClassifier', 'VotingClassifier']Dict:{'IPython': [], 'numpy': ['mean', 'sum', 'where', 'unique', 'info'], 'pandas': ['isna', 'read_csv', 'cut', 'concat', 'value_counts', 'get_dummies', 'unique'], 'prettytable': [], 'matplotlib': ['hist'], 'plotly': [], 'random': ['sample'], 'seaborn': [], 'sklearn': ['transform'], 'imblearn': [], 'xgboost': ['apply'], 'shap': [], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 4
eda-feature-engineering-modeling.py : ['read_csv', 'head', 'sum', 'isnull', 'value_counts', 'count', 'groupby', 'mean', 'groupby', 'crosstab', 'value_counts', 'crosstab', 'max', 'min', 'mean', 'describe', 'head', 'head', 'crosstab', 'replace', 'mean', 'groupby', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'any', 'isnull', 'hist', 'hist', 'crosstab', 'value_counts', 'fillna', 'sum', 'isnull', 'crosstab', 'crosstab', 'crosstab', 'max', 'min', 'mean', 'corr', 'head', 'value_counts', 'qcut', 'mean', 'groupby', 'value_counts', 'replace', 'replace', 'replace', 'drop', 'corr', 'max', 'mean', 'std', 'boxplot', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'sort_values', 'sort_values', 'sort_values', 'sort_values'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'xgboost'] ['LogisticRegression', 'svm', 'RandomForestClassifier', 'KNeighborsClassifier', 'GaussianNB', 'DecisionTreeClassifier', 'train_test_split', 'metrics', 'confusion_matrix', 'KFold', 'cross_val_score', 'cross_val_predict', 'VotingClassifier', 'BaggingClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier']Dict:{'numpy': ['mean', 'any', 'max', 'sum', 'min', 'std'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'qcut', 'crosstab'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'warnings': [], '': [], 'sklearn': [], 'xgboost': []} axis_0: 1, axis_1: 1
covid-19-week-4.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'tail', 'merge', 'isin', 'unique', 'concat', 'astype', 'astype', 'isna', 'isna', 'cummax', 'groupby', 'cummax', 'groupby', 'merge', 'merge', 'to_datetime', 'sort_values', 'head', 'tail', 'min', 'isna', 'max', 'isna', 'min', 'isna', 'max', 'isna', 'unique', 'isna', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'merge', 'rename', 'reset_index', 'min', 'groupby', 'astype', 'astype', 'isna', 'dropna', 'drop', 'drop', 'sum', 'sum', 'sum', 'sum', 'isna', 'isna', 'unique', 'rename', 'merge', 'concat', 'merge', 'concat', 'isna', 'isna', 'isna', 'isna', 'isna', 'isna', 'isna', 'isna', 'sort_values', 'sort_values', 'sort_values', 'unique', 'unique', 'reset_index', 'isna', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'astype', 'to_csv', 'to_csv'] ['lightgbm', 'numpy', 'pandas', 'warnings'] ['mean_squared_error', 'LabelEncoder', 'output_notebook', 'show', 'column', 'Spectral3', 'figure', 'Panel', 'Tabs', 'output_notebook', 'show', 'figure', 'Panel', 'Tabs', 'output_notebook', 'show', 'figure']Dict:{'lightgbm': [], 'numpy': ['max', 'sum', 'min', 'unique', 'isin'], 'pandas': ['isna', 'read_csv', 'concat', 'unique', 'merge', 'to_datetime'], 'sklearn': [], 'warnings': [], 'bokeh': []} axis_0: 0, axis_1: 0
tps-aug-22-votingclassifier.py : ['read_csv', 'read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'pop', 'sum', 'isnull', 'isna', 'isna', 'isna', 'isna', 'unique', 'unique', 'concat', 'concat', 'concat', 'concat', 'sum', 'sum', 'isna', 'unique', 'unique', 'unique', 'unique', 'unique', 'mean', 'std', 'mean', 'std', 'mean', 'mean', 'set_index', 'set_index', 'reset_index', 'concat', 'drop', 'drop', 'transform', 'transform', 'assign', 'mean', 'std', 'to_csv'] [] ['LGBMImputer', 'WoEEncoder', 'RareLabelEncoder']Dict:{'kuma_utils': [], 'feature_engine': []} axis_0: 2, axis_1: 12
godaddy-tune-stacking.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'drop', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'shift', 'groupby', 'transform', 'groupby', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'read_csv', 'merge', 'fillna', 'clip', 'clip', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isnull', 'clip', 'clip', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'read_csv', 'read_csv', 'astype', 'astype', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'set_index', 'join', 'drop', 'copy', 'to_csv', 'read_csv', 'iterrows', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'os', 'lightgbm', 'xgboost', 'catboost', 'lightgbm', 'xgboost', 'catboost'] ['tqdm', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'os': [], 'tqdm': []} axis_0: 0, axis_1: 1
automl-mljar-fe-modelling-ensemble-tps-aug-21.py : ['read_csv', 'read_csv', 'head', 'read_csv', 'to_csv'] ['numpy', 'pandas'] ['AutoML']Dict:{'numpy': [], 'pandas': ['read_csv'], 'supervised': []} axis_0: 0, axis_1: 0
1st-and-future-player-contact-detection.py : ['join', 'astype', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'reset_index', 'sort_values', 'rename', 'drop', 'merge', 'drop', 'rename', 'merge', 'astype', 'astype', 'astype', 'notnull', 'reset_index', 'query', 'astype', 'set_index', 'unique', 'reset_index', 'unique', 'fillna', 'mode', 'mode', 'isin', 'mean', 'groupby', 'interpolate', 'sum', 'copy', 'transpose', 'array', '__init__', 'eval', 'squeeze', 'squeeze', 'squeeze', 'array', 'astype', 'read_csv', 'merge', 'drop', 'astype', 'fillna', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'os', 'sys', 'glob', 'random', 'math', 'gc', 'cv2', 'time', 'torch', 'timm', 'albumentations', 'matplotlib.pyplot'] ['tqdm', 'lru_cache', 'nn', 'functional', 'Dataset', 'DataLoader', 'autocast', 'GradScaler', 'ToTensorV2', 'matthews_corrcoef']Dict:{'numpy': ['transpose', 'mean', 'squeeze', 'sum', 'unique', 'isin', 'array', 'copy'], 'pandas': ['read_csv', 'eval', 'unique', 'notnull', 'array', 'merge'], 'os': ['rename'], 'sys': [], 'glob': [], 'random': [], 'math': [], 'gc': [], 'cv2': [], 'tqdm': ['__init__'], 'time': [], 'functools': ['__init__'], 'torch': ['__init__'], 'timm': [], 'albumentations': [], 'matplotlib': [], 'sklearn': ['__init__']} axis_0: 0, axis_1: 3
house-price-feature-engineering-using-only-xgboost.py : ['read_csv', 'read_csv', 'concat', 'sum', 'isnull', 'replace', 'replace', 'replace', 'where', 'rename', 'items', 'items', 'join', 'items', 'astype', 'keys', 'astype', 'sum', 'isnull', 'sum', 'isnull', 'transform', 'groupby', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'select_dtypes', 'fillna', 'select_dtypes', 'fillna', 'sum', 'isnull', 'unique', 'value_counts', 'head', 'head', 'tail', 'head', 'select_dtypes', 'mean', 'copy', 'pop', 'copy', 'select_dtypes', 'factorize', 'sort_values', 'sort_values', 'copy', 'pop', 'copy', 'pop', 'copy', 'copy', 'get_dummies', 'get_dummies', 'mul', 'sum', 'gt', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'copy', 'mean', 'std', 'copy', 'mean', 'std', 'mean', 'std', 'cumsum', 'transform', 'concat', 'transform', 'add', 'drop', 'copy', 'pop', 'copy', 'pop', 'concat', 'join', 'join', 'join', 'join', 'join', 'drop', 'join', 'join', 'transform', 'copy', 'concat', 'select_dtypes', 'drop', 'to_csv', 'head', 'keys', 'sort_values'] ['os', 'warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['Path', 'display', 'CategoricalDtype', 'MEstimateEncoder', 'KMeans', 'PCA', 'mutual_info_regression', 'KFold', 'cross_val_score', 'XGBRegressor', 'reduce']Dict:{'os': ['rename', 'replace'], 'pathlib': ['rename', 'replace'], 'warnings': [], 'numpy': ['mean', 'add', 'sum', 'where', 'unique', 'std', 'cumsum', 'copy'], 'pandas': [], 'matplotlib': [], 'seaborn': [], 'IPython': [], 'category_encoders': [], 'sklearn': [], 'xgboost': []} axis_0: 4, axis_1: 3
what-not-to-do-in-titanic-feature-engineering.py : ['read_csv', 'read_csv', 'reset_index', 'concat', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'value_counts', 'replace', 'astype', 'astype', 'mean', 'groupby', 'mean', 'apply', 'groupby', 'fillna', 'mean', 'isnull', 'fillna', 'isnull', 'mean', 'groupby', 'fillna', 'transform', 'groupby', 'value_counts', 'head', 'unique', 'head', 'head', 'head', 'factorize', 'factorize', 'factorize', 'replace', 'get_dummies', 'factorize', 'drop', 'copy', 'drop', 'astype', 'mean', 'std', 'boxplot', 'concat', 'isnull', 'isnull', 'concat', 'head', 'insert', 'drop'] ['numpy', 'pandas', 'warnings'] ['OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'train_test_split', 'KFold', 'cross_val_score', 'accuracy_score', 'Pipeline', 'LogisticRegression', 'LinearDiscriminantAnalysis', 'DecisionTreeClassifier', 'KNeighborsClassifier', 'GaussianNB', 'SVC', 'RandomForestClassifier', 'ExtraTreesClassifier', 'pyplot', 'Counter', 'mutual_info_classif']Dict:{'numpy': ['mean', 'sum', 'unique', 'std', 'insert', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'factorize', 'get_dummies', 'unique'], 'sklearn': [], 'matplotlib': ['boxplot'], 'collections': ['copy'], 'warnings': []} axis_0: 0, axis_1: 3
lgbm-optuna-rfe.py : ['read_csv', 'read_csv', 'read_csv', 'replace', 'get_dummies', 'merge', 'sum', 'groupby', 'astype', 'reset_index', 'sort_values', 'mean', 'agg', 'groupby', 'agg', 'groupby', 'cumsum', 'agg', 'groupby', 'agg', 'groupby', 'mean', 'merge', 'agg', 'groupby', 'agg', 'groupby', 'merge', 'merge', 'drop', 'tail', 'groupby', 'isin', 'agg', 'groupby', 'agg', 'groupby', 'tail', 'groupby', 'isin', 'agg', 'groupby', 'agg', 'groupby', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'fillna', 'fillna', 'mean', 'mask', 'mask', 'mask', 'merge', 'merge', 'drop', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'transform', 'transform', 'mask', 'merge', 'merge', 'merge', 'merge', 'merge', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'transform'] ['numpy', 'pandas', 'gc', 'riiideducation', 'optuna'] ['roc_auc_score', 'RFE', 'Pipeline', 'DecisionTreeClassifier', 'KFold', 'LGBMClassifier', 'XGBClassifier', 'LogisticRegression', 'LabelEncoder', 'TPESampler']Dict:{'numpy': ['mean', 'isin', 'sum', 'cumsum'], 'pandas': ['get_dummies', 'merge', 'read_csv'], 'gc': [], 'riiideducation': [], 'sklearn': ['transform'], 'lightgbm': [], 'xgboost': [], 'optuna': []} axis_0: 0, axis_1: 3
introduction-to-ensembling-stacking-in-python.py : ['read_csv', 'read_csv', 'head', 'apply', 'apply', 'apply', 'apply', 'fillna', 'fillna', 'median', 'qcut', 'mean', 'std', 'sum', 'isnull', 'astype', 'cut', 'apply', 'replace', 'replace', 'replace', 'replace', 'astype', 'map', 'map', 'fillna', 'astype', 'map', 'astype', 'drop', 'drop', 'drop', 'head', 'corr', 'astype', 'mean', 'drop', 'mean', 'head', 'head', 'corr', 'astype', 'to_csv'] ['pandas', 'numpy', 're', 'sklearn', 'xgboost', 'seaborn', 'matplotlib.pyplot', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'warnings'] ['RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'SVC', 'KFold']Dict:{'pandas': ['qcut', 'cut', 'read_csv', 'isnull'], 'numpy': ['mean', 'median', 'std', 'sum'], 're': [], 'sklearn': [], 'xgboost': [], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'warnings': []} axis_0: 1, axis_1: 3
feature-engineering-eda-data-cleaning-tutorial.py : ['read_csv', 'read_csv', 'head', 'describe', 'cut', 'mean', 'groupby', 'map', 'boxplot', 'astype', 'map', 'head', 'any', 'isnull', 'any', 'isnull', 'fillna', 'mean', 'fillna', 'mean', 'any', 'isnull', 'any', 'isnull', 'fillna', 'apply', 'unique', 'fillna', 'apply', 'unique', 'apply', 'get', 'head', 'apply', 'get', 'head', 'fillna', 'apply', 'unique', 'apply', 'get', 'head', 'apply', 'get', 'head', 'fillna', 'mean', 'fillna', 'mean', 'map', 'map', 'map', 'head', 'map', 'map', 'map', 'head', 'replace', 'head', 'unstack', 'groupby', 'replace', 'replace', 'unstack', 'groupby', 'apply', 'get', 'head', 'head', 'replace', 'head', 'unstack', 'groupby', 'replace', 'replace', 'unstack', 'groupby', 'apply', 'get', 'head', 'head', 'drop', 'drop', 'drop', 'copy', 'drop', 'head', 'head', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'time', 'os'] ['StandardScaler', 'LogisticRegression', 'SVC', 'LinearSVC', 'RandomForestClassifier', 'VotingClassifier', 'GradientBoostingClassifier', 'KNeighborsClassifier', 'GaussianNB', 'Perceptron', 'SGDClassifier', 'DecisionTreeClassifier', 'cross_val_score', 'GridSearchCV', 'train_test_split', 'accuracy_score', 'XGBRegressor']Dict:{'numpy': ['mean', 'unique', 'any', 'copy'], 'pandas': ['cut', 'unique', 'read_csv', 'isnull'], 'matplotlib': ['boxplot', 'get'], 'seaborn': ['boxplot'], 'time': [], 'sklearn': [], 'xgboost': ['apply'], 'os': ['replace']} axis_0: 0, axis_1: 4
understanding-pipeline-in-sklearn.py : ['read_csv', 'read_csv', 'drop', 'drop', 'drop', 'astype', 'to_csv'] ['numpy', 'matplotlib.pyplot', 'seaborn', 'pandas'] ['LinearRegression', 'Pipeline', 'FunctionTransformer', 'train_test_split', 'GridSearchCV', 'MinMaxScaler', 'load_breast_cancer', 'Pipeline', 'SVC', 'GridSearchCV', 'SimpleImputer', 'RobustScaler', 'OneHotEncoder', 'Pipeline', 'FunctionTransformer', 'ColumnTransformer', 'RandomForestClassifier', 'train_test_split', 'Pipeline', 'StandardScaler', 'PCA', 'LogisticRegression', 'load_iris', 'train_test_split']Dict:{'numpy': [], 'matplotlib': [], 'sklearn': [], 'seaborn': [], 'pandas': ['read_csv']} axis_0: 0, axis_1: 3
titanic-feature-engineering-logistic-regression.py : ['read_csv', 'read_csv', 'head', 'sum', 'isnull', 'mean', 'groupby', 'mean', 'groupby', 'unique', 'unique', 'mean', 'fillna', 'fillna', 'fillna', 'astype', 'isnull', 'astype', 'isnull', 'sum', 'isnull', 'fillna', 'mean', 'map', 'map', 'map', 'map', 'map', 'map', 'head', 'value_counts', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'value_counts', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'to_csv'] ['pandas', 'seaborn', 'numpy', 're'] ['pyplot', 'LogisticRegression', 'RepeatedKFold']Dict:{'pandas': ['value_counts', 'unique', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'numpy': ['mean', 'sum', 'unique'], 're': []} axis_0: 0, axis_1: 0
feature-engineering-and-cv.py : ['join', 'read_csv', 'to_datetime', 'read_csv', 'to_datetime', 'read_csv', 'drop', 'apply', 'apply', 'max', 'max', 'mean', 'groupby', 'map', 'mean', 'groupby', 'map', 'fillna', 'fillna', 'astype', 'astype', 'drop', 'drop', 'unique', 'drop', 'drop', 'mean', 'groupby', 'map', 'map', 'map', 'mean', 'groupby', 'map', 'map', 'map', 'drop', 'drop', 'array', 'mean', 'mean', 'array', 'to_csv'] ['numpy', 'pandas', 'os', 'pandas', 'numpy', 'datetime', 'matplotlib.pyplot', 'lightgbm', 'warnings'] ['LabelEncoder', 'mean_squared_error']Dict:{'numpy': ['mean', 'unique', 'max', 'array'], 'pandas': ['to_datetime', 'array', 'unique', 'read_csv'], 'os': [], 'datetime': [], 'matplotlib': [], 'sklearn': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 7
ashrae-datagenerator-lstm.py : ['read_csv', 'read_csv', 'read_csv', 'value_counts', 'keys', 'sort_index', 'keys', 'any', 'isnull', 'any', 'isnull', 'where', 'drop', 'get_dummies', 'keys', 'drop', 'keys', 'keys', 'sort_index', 'value_counts', 'value_counts', 'replace', 'mean', 'astype', 'mean', 'std', 'std', 'mean', 'astype', 'mean', 'std', 'std', 'merge', 'sort_values', 'merge_asof', 'copy', 'add', 'add', 'mean', 'read_csv', 'any', 'isnull', 'mean', 'astype', 'mean', 'std', 'std', 'drop', 'read_csv', 'where', 'keys', 'drop', 'keys', 'get_dummies', 'merge', 'sort_values', 'merge_asof', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'scipy.special', 'matplotlib.pyplot', 'os', 'random', 'keras.backend', 'warnings'] ['Sequence', 'Sequential', 'Dense', 'Dropout', 'Flatten', 'LSTM', 'Embedding', 'RMSprop', 'Adam', 'train_test_split', 'SimpleImputer', 'MinMaxScaler']Dict:{'numpy': ['mean', 'any', 'add', 'where', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'merge', 'merge_asof'], 'scipy': [], 'matplotlib': [], 'os': ['replace'], 'random': [], 'keras': ['mean', 'std', 'any'], 'sklearn': [], 'warnings': []} axis_0: 12, axis_1: 4
spaceship-titanic-a-complete-guide.py : ['read_csv', 'read_csv', 'head', 'sum', 'isna', 'sum', 'isna', 'sum', 'duplicated', 'round', 'sum', 'duplicated', 'sum', 'duplicated', 'round', 'sum', 'duplicated', 'nunique', 'value_counts', 'head', 'sum', 'astype', 'sum', 'astype', 'astype', 'apply', 'astype', 'apply', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'astype', 'astype', 'fillna', 'fillna', 'apply', 'astype', 'apply', 'apply', 'apply', 'astype', 'apply', 'apply', 'drop', 'drop', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'drop', 'fillna', 'fillna', 'map', 'value_counts', 'concat', 'map', 'value_counts', 'concat', 'drop', 'drop', 'astype', 'copy', 'copy', 'drop', 'reset_index', 'concat', 'any', 'isna', 'sum', 'isna', 'round', 'isna', 'sum', 'isna', 'drop', 'fillna', 'unstack', 'groupby', 'head', 'sum', 'sum', 'isna', 'isna', 'isin', 'isna', 'map', 'idxmax', 'sum', 'isna', 'fillna', 'unstack', 'groupby', 'sum', 'isna', 'isna', 'isin', 'isna', 'sum', 'isna', 'fillna', 'unstack', 'groupby', 'sum', 'sum', 'isna', 'isna', 'isin', 'isna', 'map', 'idxmax', 'sum', 'isna', 'isna', 'fillna', 'unstack', 'groupby', 'sum', 'isna', 'isna', 'isna', 'sum', 'isna', 'sum', 'isna', 'isna', 'sum', 'isna', 'fillna', 'unstack', 'groupby', 'sum', 'sum', 'isna', 'isna', 'isin', 'isna', 'map', 'idxmax', 'sum', 'isna', 'fillna', 'map', 'value_counts', 'fillna', 'unstack', 'groupby', 'fillna', 'unstack', 'groupby', 'fillna', 'unstack', 'groupby', 'sum', 'sum', 'sum', 'sum', 'isna', 'isna', 'isin', 'isna', 'map', 'idxmax', 'sum', 'isna', 'fillna', 'unstack', 'groupby', 'round', 'sum', 'isin', 'head', 'sum', 'isna', 'drop', 'isna', 'isin', 'isna', 'map', 'idxmax', 'drop', 'sum', 'isna', 'value_counts', 'sum', 'isna', 'isna', 'sum', 'isna', 'sum', 'isna', 'isna', 'isin', 'isna', 'map', 'idxmax', 'sum', 'isna', 'fillna', 'unstack', 'groupby', 'sum', 'isna', 'isna', 'isna', 'transform', 'groupby', 'fillna', 'mode', 'sum', 'isna', 'isna', 'sum', 'isna', 'isna', 'isna', 'isna', 'isna', 'astype', 'sum', 'isna', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'value_counts', 'sum', 'isna', 'isna', 'sum', 'isna', 'fillna', 'unstack', 'median', 'groupby', 'sum', 'sum', 'isna', 'isna', 'isna', 'transform', 'groupby', 'fillna', 'median', 'sum', 'isna', 'fillna', 'unstack', 'groupby', 'sum', 'isna', 'isna', 'isna', 'transform', 'groupby', 'fillna', 'mode', 'sum', 'isna', 'max', 'sum', 'sum', 'sum', 'isna', 'isna', 'sum', 'sum', 'isna', 'fillna', 'unstack', 'mean', 'groupby', 'sum', 'sum', 'isna', 'isna', 'isna', 'transform', 'groupby', 'fillna', 'mean', 'sum', 'sum', 'isna', 'sum', 'astype', 'sum', 'isna', 'copy', 'isin', 'copy', 'isin', 'drop', 'drop', 'transform', 'sum', 'cumsum', 'copy', 'keys', 'items', 'round', 'items', 'round', 'round', 'round', 'sum', 'round', 'astype', 'sum', 'abs', 'astype', 'read_csv', 'replace', 'value_counts', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'itertools', 'warnings', 'plotly.express', 'time', 'eli5'] ['SMOTE', 'train_test_split', 'GridSearchCV', 'RandomizedSearchCV', 'StratifiedKFold', 'accuracy_score', 'confusion_matrix', 'recall_score', 'precision_score', 'f1_score', 'roc_auc_score', 'plot_confusion_matrix', 'plot_roc_curve', 'roc_curve', 'StandardScaler', 'MinMaxScaler', 'OneHotEncoder', 'LabelEncoder', 'mutual_info_classif', 'PCA', 'ColumnTransformer', 'Pipeline', 'SimpleImputer', 'PermutationImportance', 'resample', 'LinearRegression', 'LogisticRegression', 'KNeighborsClassifier', 'SVC', 'DecisionTreeClassifier', 'RandomForestClassifier', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'GaussianNB']Dict:{'numpy': ['mean', 'median', 'any', 'max', 'abs', 'sum', 'round', 'isin', 'cumsum', 'copy'], 'pandas': ['concat', 'isna', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'imblearn': [], 'itertools': ['groupby'], 'warnings': [], 'plotly': [], 'time': [], 'sklearn': [], 'eli5': [], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': []} axis_0: 1, axis_1: 28
mercedes-benz-greener-manufacturing.py : ['read_csv', 'read_csv', 'any', 'isnull', 'any', 'isnull', 'nunique', 'concat', 'get_dummies', 'drop', 'drop', 'corr', 'iterrows', 'std', 'transform', 'round', 'cumsum', 'drop', 'mean', 'drop', 'transform', 'read_csv', 'to_csv', 'reset_index', 'mean', 'drop', 'transform', 'to_csv', 'reset_index'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'optuna', 'os'] ['RandomForestRegressor', 'LGBMRegressor', 'KFold', 'partial', 'PCA', 'train_test_split', 'r2_score']Dict:{'numpy': ['mean', 'any', 'round', 'std', 'cumsum'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'lightgbm': [], 'functools': [], 'optuna': []} axis_0: 1, axis_1: 2
ncaaw20-eda-and-nn-lgb-catb-starter.py : ['fillna', 'median', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'mode', 'concat', 'copy', 'transform', 'transform', 'transform', 'concat', 'reset_index', 'mean', 'groupby', 'merge', 'reset_index', 'sort_values', 'items', '__init__', '__init__', 'get', 'get', 'get', 'get', 'get', 'get', 'items', 'items', 'mean', 'mean', 'max', 'read_csv', 'read_csv', 'keys', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'apply', 'head', 'head', 'head', 'head', 'head', 'head', 'read_csv', 'head', 'drop', 'apply', 'apply', 'apply', 'head', 'head', 'merge', 'merge', 'head', 'merge', 'head', 'merge', 'drop', 'merge', 'drop', 'head', 'merge', 'drop_duplicates', 'drop', 'merge', 'drop_duplicates', 'drop', 'head', 'merge', 'drop_duplicates', 'head', 'merge', 'drop_duplicates', 'head', 'merge', 'drop_duplicates', 'drop', 'merge', 'drop_duplicates', 'drop', 'head', 'merge', 'drop_duplicates', 'drop', 'merge', 'drop_duplicates', 'drop', 'head', 'drop', 'head', 'head', 'reset_index', 'agg', 'groupby', 'join', 'reset_index', 'agg', 'groupby', 'join', 'head', 'head', 'merge', 'merge', 'merge', 'merge', 'drop', 'head', 'merge', 'merge', 'merge', 'merge', 'drop', 'head', 'copy', 'copy', 'head', 'head', 'reset_index', 'concat', 'head', 'fillna', 'transform', 'head', 'read_csv', 'hist', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'copy', 'datetime', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'xgboost', 'lightgbm', 'optuna', 'json', 'ast', 'time', 'keras', 'tensorflow', 'math', 'warnings', 'os', 'glob', 'gc'] ['StandardScaler', 'MinMaxScaler', 'OneHotEncoder', 'shuffle', 'stats', 'train_test_split', 'StratifiedKFold', 'KFold', 'cross_val_score', 'GridSearchCV', 'RepeatedStratifiedKFold', 'StandardScaler', 'LabelEncoder', 'CatBoostRegressor', 'CatBoostClassifier', 'plot_optimization_history', 'model_selection', 'mean_squared_error', 'mean_absolute_error', 'accuracy_score', 'roc_auc_score', 'log_loss', 'classification_report', 'confusion_matrix', 'linear_model', 'Dense', 'Sequential', 'Callback', 'EarlyStopping', 'ReduceLROnPlateau', 'LambdaCallback', 'Adam', 'SGD', 'Model', 'Input', 'Layer', 'Dense', 'Concatenate', 'Reshape', 'Dropout', 'merge', 'Add', 'BatchNormalization', 'GaussianNoise', 'Embedding', 'backend', 'Layer', '*', 'BaseEstimator', 'TransformerMixin', 'LabelEncoder', 'backend']Dict:{'numpy': ['mean', 'median', 'max', 'copy'], 'pandas': ['concat', 'merge', 'read_csv'], 'matplotlib': ['get', 'hist'], 'seaborn': [], 'sklearn': ['transform', '__init__'], 'copy': ['copy'], 'datetime': [], 'scipy': ['mode'], 'plotly': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'optuna': ['__init__'], 'json': [], 'ast': [], 'time': [], 'keras': [], 'tensorflow': ['concat'], 'math': [], 'warnings': [], 'os': [], 'glob': [], 'gc': []} axis_0: 0, axis_1: 12
skf-lightgbm-target-encoding.py : ['read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'count', 'isnull', 'nunique', 'notna', 'set_index', 'concat', 'reset_index', 'concat', 'sort_index', 'drop', 'drop', 'transform', 'sort_index', 'transform', 'max', 'product', 'round', 'round', 'round', 'round', 'round', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'to_csv'] ['category_encoders', 'pandas', 'numpy', 'itertools', 'warnings', 'seaborn', 'matplotlib.pyplot', 'lightgbm'] ['Counter', 'timedelta', 'datetime', 'interp', 'rcParams', 'precision_score', 'recall_score', 'confusion_matrix', 'roc_curve', 'precision_recall_curve', 'accuracy_score', 'roc_auc_score', 'f1_score', 'auc', 'StratifiedKFold']Dict:{'collections': [], 'category_encoders': [], 'datetime': ['max'], 'scipy': [], 'pandas': ['concat', 'notna', 'read_csv', 'isnull'], 'numpy': ['mean', 'product', 'max', 'sum', 'round', 'std'], 'itertools': ['count', 'product'], 'warnings': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'lightgbm': []} axis_0: 2, axis_1: 4
starter-eda-and-feature-selection-ashrae3.py : ['join', 'sample', 'min', 'max', 'min', 'max', 'hist', 'describe', 'nunique', 'groupby', 'hist', 'nunique', 'describe', 'count', 'count', 'mean', 'mean', 'fillna', 'transform', 'rename', 'astype', 'transform', 'sample', 'mean', 'transform', 'sample', 'apply', 'apply', 'mean', 'read_csv', 'clip', 'to_csv', 'head', 'hist', 'describe'] ['numpy', 'pandas', 'os', 'gc', 'random', 'datetime', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'lightgbm'] ['tqdm_notebook', 'register_matplotlib_converters', 'LabelEncoder', 'KFold', 'StratifiedKFold', 'preprocessing']Dict:{'numpy': ['mean', 'min', 'max', 'clip'], 'pandas': [], 'os,': [], 'gc': [], 'random': ['sample'], 'datetime': [], 'tqdm': [], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 'lightgbm': []} axis_0: 4, axis_1: 2
lgbmclassifier-feature-engineering.py : ['to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'read_csv', 'filter', 'unique', 'count', 'filter', 'count', 'filter', 'filter', 'filter', 'filter', 'sum', 'filter', 'filter', 'drop', 'join', 'unique', 'filter', 'unique', 'abs', 'abs', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'unique', 'filter', 'std', 'filter', 'filter', 'filter', 'filter', 'to_numpy', 'unique', 'std', 'filter', 'std', 'filter', 'diff', 'filter', 'diff', 'mean', 'filter', 'rename', 'reset_index', 'filter', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'polars', 'datetime', 'optuna', 'plotly.express', 'plotly.graph_objects', 'gc', 'lightgbm', 'lightgbm'] ['tqdm', 'RandomForestClassifier', 'train_test_split', 'f1_score', 'make_subplots', 'BaggingClassifier', 'StackingClassifier']Dict:{'numpy': ['mean', 'abs', 'sum', 'unique', 'diff', 'std'], 'pandas': ['to_datetime', 'unique', 'read_csv'], 'matplotlib': [], 'polars': ['mean', 'read_csv', 'sum', 'count', 'std'], 'datetime': [], '': [], 'tqdm': [], 'optuna': [], 'sklearn': [], 'plotly': [], 'gc': [], 'lightgbm': []} axis_0: 0, axis_1: 0
titanic-simple-data-processing-starter.py : ['join', 'read_csv', 'read_csv', 'head', 'head', 'hist', 'sum', 'sum', 'isnull', 'sum', 'isnull', 'keys', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'drop', 'drop_duplicates', 'drop_duplicates', 'info', 'info', 'apply', 'apply', 'unique', 'astype', 'transform', 'astype', 'head', 'sub', 'drop', 'drop', 'unique', 'head', 'sum', 'isnull', 'sum', 'isnull', 'mean', 'groupby', 'mean', 'groupby', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'sum', 'isnull', 'astype', 'transform', 'astype', 'drop', 'drop', 'corr', 'concat', 'drop', 'read_csv', 'to_csv', 'to_csv', 'sort_values', 'reset_index', 'sort_values', 'reset_index'] ['numpy', 'pandas', 'seaborn', 'xgboost', 'lightgbm', 'matplotlib.pyplot', 're', 'os', 'gc', 'warnings'] ['LabelEncoder', 'accuracy_score', 'RandomForestClassifier', 'plot_importance', 'plot_importance']Dict:{'numpy': ['mean', 'info', 'sum', 'unique'], 'pandas': ['concat', 'unique', 'read_csv', 'isnull'], 'seaborn': [], 'xgboost': [], 'lightgbm': [], 'matplotlib': ['hist'], 'sklearn': ['apply'], 're': ['sub'], 'os': [], 'gc': [], 'warnings': []} axis_0: 1, axis_1: 0
m5-forecasting-eda-feature-engineering.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'sample', 'set_index', 'set_index', 'rename', 'reset_index', 'merge', 'head', 'rename', 'reset_index', 'merge', 'set_index', 'head', 'to_dict', 'mean', 'set_index', 'fillna', 'map', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['ProfileReport', 'cycle']Dict:{'numpy': ['mean'], 'pandas': ['merge', 'read_csv'], 'os': ['rename'], 'pandas_profiling': [], 'matplotlib': [], 'seaborn': [], 'itertools': []} axis_0: 0, axis_1: 1
s3e9-feature-engineering.py : ['read_csv', 'read_csv', 'head', 'describe', 'any', 'any', 'isna', 'corr', 'mean', 'copy', 'pop', 'copy', 'sort_values', 'sort_values', 'copy', 'pop', 'transform', 'groupby', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'copy', 'pop', 'copy', 'concat', 'join', 'join', 'drop', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'optuna'] ['pyplot', 'XGBRegressor', 'cross_val_score', 'PCA', 'KMeans', 'mutual_info_regression']Dict:{'numpy': ['mean', 'std', 'any', 'copy'], 'pandas': ['isna', 'concat', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'xgboost': [], 'sklearn': [], 'optuna': []} axis_0: 3, axis_1: 0
tps202112-reasonable-xgboost-model.py : ['get', 'read_parquet', 'read_csv', 'to_dict', 'read_parquet', 'drop', 'reset_index', 'concat', 'assign', 'assign', 'assign', 'min', 'concat', 'astype', 'rename', 'sum', 'astype', 'rename', 'sum', 'rename', 'astype', 'rename', 'apply', 'rename', 'where', 'rename', 'rename', 'apply', 'astype', 'rename', 'rename', 'abs', 'abs', 'astype', 'rename', 'apply', 'rename', 'apply', 'add_suffix', 'clip', 'rename', 'sum', 'rename', 'rename', 'astype', 'rename', 'rename', 'astype', 'rename', 'rename', 'rename', 'abs', 'astype', 'rename', 'rename', 'abs', 'rename', 'abs', 'drop', 'astype', 'drop', 'astype', 'drop', 'info', 'to_numpy', 'astype', 'drop', 'drop', 'to_numpy', 'astype', 'drop', 'transform', 'to_numpy', 'astype', 'drop', 'sum', 'sum', 'to_parquet', 'to_parquet', 'assign', 'read_parquet', 'head', 'to_csv'] ['os', 'gc', 'random', 'pandas', 'numpy', 'seaborn', 'xgboost'] ['StratifiedKFold', 'LabelEncoder', 'classification_report', 'accuracy_score', 'confusion_matrix']Dict:{'os': ['rename'], 'gc': [], 'random': [], 'pandas': ['read_parquet', 'concat', 'read_csv'], 'numpy': ['abs', 'sum', 'where', 'min', 'clip', 'info'], 'seaborn': [], 'xgboost': [], 'sklearn': []} axis_0: 2, axis_1: 7
feature-engineering-gpu-based-xgboost-importance.py : ['read_csv', 'read_csv', 'read_csv', 'sample', 'head', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'abs', 'corr', 'nlargest', 'boxplot', 'drop', 'mean', 'isnull', 'abs', 'corr', 'where', 'astype', 'std', 'std', 'std', 'mean', 'std', 'mean', 'transform', 'transform', 'transform', 'transform', 'map', 'map', 'to_csv', 'round', 'mean', 'abs', 'transform', 'transform', 'map', 'to_csv', 'copy', 'array', 'copy', 'copy', 'sort_values', 'sort_values', 'to_csv', 'mean', 'std', 'array', 'map', 'to_csv', 'array', 'map', 'to_csv'] ['numpy', 'pandas', 'xgboost', 'seaborn', 'optuna', 'time', 'gc', 'shap', 'pickle'] ['ProfileReport', 'LGBMClassifier', 'LGBMRegressor', 'XGBClassifier', 'XGBRegressor', 'patch_sklearn', 'LogisticRegression', 'LinearRegression', 'Ridge', 'SGDClassifier', 'RidgeClassifier', 'PassiveAggressiveClassifier', 'GaussianNB', 'SVC', 'RandomForestClassifier', 'KNeighborsClassifier', 'MLPClassifier', 'DecisionTreeClassifier', 'KFold', 'mean_squared_error', 'classification_report', 'f1_score', 'roc_auc_score', 'accuracy_score', 'balanced_accuracy_score', 'log_loss', 'train_test_split', 'KFold', 'StratifiedKFold', 'LabelEncoder', 'RobustScaler', 'PowerTransformer', 'shuffle', 'metrics', 'pyplot', 'TPESampler', 'tqdm']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'array', 'where', 'round', 'min', 'std', 'copy'], 'pandas': ['array', 'read_csv', 'isnull'], 'pandas_profiling': [], 'lightgbm': [], 'xgboost': [], 'sklearnex': [], 'sklearn': [], 'seaborn': ['boxplot'], 'matplotlib': [], 'optuna': [], 'tqdm': [], 'time': [], 'gc': [], 'shap': [], 'pickle': []} axis_0: 1, axis_1: 0
titanic-complete-guide-to-top-3.py : ['read_csv', 'read_csv', 'sum', 'isna', 'sum', 'isna', 'corr', 'copy', 'fillna', 'copy', 'fillna', 'replace', 'transform', 'groupby', 'fillna', 'fillna', 'replace', 'drop', 'fillna', 'mode', 'copy', 'copy', 'hist', 'copy', 'qcut', 'copy', 'cut', 'qcut', 'copy', 'where', 'qcut', 'sub', 'copy', 'apply', 'value_counts', 'map', 'value_counts', 'qcut', 'copy', 'map', 'value_counts', 'qcut', 'qcut', 'copy', 'replace', 'copy', 'replace', 'copy', 'isin', 'copy', 'map', 'value_counts', 'map', 'median', 'groupby', 'map', 'median', 'groupby', 'qcut', 'qcut', 'cut', 'cut', 'isin', 'concat', 'map', 'value_counts', 'drop', 'apply', 'replace', 'replace', 'replace', 'replace', 'reset_index', 'concat', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'groupby', 'iterrows', 'max', 'drop', 'min', 'drop', 'set_index', 'drop', 'drop', 'drop', 'copy', 'copy', 'astype', 'head', 'round', 'concat', 'round', 'test', 'astype', 'get_dummies', 'concat', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'test', 'transform', 'drop', 'get_dummies', 'nunique', 'test', 'transform', 'iterrows', 'nlargest', 'copy', 'sum', 'isna', 'copy', 'test', 'transform', 'copy', 'to_csv', 'read_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 're', 'tensorflow'] ['TargetEncoder', 'LabelEncoder', 'PolynomialFeatures', 'StandardScaler', 'MinMaxScaler', 'RobustScaler', 'BaseEstimator', 'TransformerMixin', 'GridSearchCV', 'train_test_split', 'RepeatedStratifiedKFold', 'cross_val_score', 'StratifiedKFold', 'StratifiedShuffleSplit', 'Pipeline', 'accuracy_score', 'LogisticRegression', 'RidgeClassifier', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'XGBClassifier', 'SVC', 'StackingClassifier', 'VotingClassifier', 'keras', 'simplefilter', 'ConvergenceWarning']Dict:{'pandas': ['isna', 'read_csv', 'cut', 'concat', 'value_counts', 'test', 'get_dummies', 'qcut'], 'numpy': ['median', 'max', 'sum', 'where', 'round', 'test', 'min', 'isin', 'copy'], 'matplotlib': ['hist'], 'seaborn': [], 're': ['sub'], 'category_encoders': [], 'sklearn': [], 'xgboost': ['apply'], 'tensorflow': ['where', 'round', 'test', 'concat'], 'warnings': []} axis_0: 2, axis_1: 14
exploratory-data-analysis-lightgbm.py : ['read_csv', 'read_csv', 'value_counts', 'sum', 'isnull', 'sort_values', 'head', 'sum', 'isnull', 'sort_values', 'head', 'apply', 'apply', 'fillna', 'fillna', 'astype', 'replace', 'astype', 'replace', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'replace', 'replace', 'mean', 'groupby', 'mean', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'reset_index', 'reset_index', 'merge', 'merge', 'fillna', 'fillna', 'query', 'drop', 'drop', 'corr', 'sort_values', 'head', 'tail', 'drop', 'astype', 'round', 'mean', 'array', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm'] ['StratifiedKFold']Dict:{'numpy': ['mean', 'round', 'array', 'sum'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'array', 'merge'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'lightgbm': []} axis_0: 1, axis_1: 8
eda-feature-engineering-visualization.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'merge', 'merge', 'merge', 'merge', 'rename', 'merge', 'merge', 'merge', 'merge', 'rename', 'head', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'corr', 'to_datetime', 'head', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn'] ['train_test_split', 'make_regression', 'LinearRegression', 'pyplot']Dict:{'numpy': [], 'pandas': ['merge', 'to_datetime', 'read_csv', 'value_counts'], 'seaborn': [], 'sklearn': [], 'matplotlib': [], '=': [], 'model': []} axis_0: 0, axis_1: 0
meditation-on-the-cabin.py : ['read_csv', 'read_csv', 'reset_index', 'concat', 'head', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'mean', 'groupby', 'fillna', 'isnull', 'fillna', 'copy', 'isnull', 'isnull', 'sum', 'isnull', 'copy', 'isnull', 'isnull', 'sum', 'isnull', 'copy', 'isnull', 'isnull', 'sum', 'isnull', 'copy', 'isnull', 'isnull', 'sum', 'isnull', 'value_counts', 'head', 'head', 'head'] ['numpy', 'pandas', 're', 'seaborn', 'warnings'] ['distance']Dict:{'numpy': ['mean', 'sum', 'copy'], 'pandas': ['concat', 'value_counts', 'read_csv', 'isnull'], 'Levenshtein': [], 're': [], 'seaborn': [], 'warnings': []} axis_0: 0, axis_1: 0
simple-lgbm-groupkfold-cv.py : ['join', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_pickle', 'read_csv', 'fillna', 'groupby', 'transform', 'mean', 'rolling', 'shift', 'transform', 'std', 'rolling', 'shift', 'to_datetime', 'astype', 'concat', 'astype', 'where', 'where', 'astype', 'where', 'mean', 'reset_index', 'astype', 'astype', 'reset_index', 'pivot', 'isin', 'merge', 'concat', 'to_csv', 'to_datetime', 'min', 'max', 'min'] ['warnings', 'pandas', 'numpy', 'gc', 'lightgbm', 'os'] ['Union', 'tqdm_notebook', 'preprocessing', 'datetime', 'timedelta', 'GroupKFold', 'metrics']Dict:{'warnings': [], 'pandas': ['to_datetime', 'read_csv', 'concat', 'read_pickle', 'merge', 'pivot'], 'numpy': ['mean', 'max', 'sum', 'where', 'min', 'isin', 'std'], 'typing': [], 'tqdm': [], 'sklearn': [], 'gc': [], 'lightgbm': [], 'datetime': ['min', 'max'], 'os': []} axis_0: 0, axis_1: 0
multi-class-lgbm-cv-and-seed-diversification.py : ['to_csv', 'read_csv', 'sample', 'read_csv', 'sample', 'read_csv', 'sample', 'read_csv', 'sample', 'drop', 'concat', 'map', 'value_counts', 'head', 'map', 'apply', 'join', 'drop', 'sample', 'concat', 'concat', 'unique', 'drop', 'concat', 'value_counts', 'rename', 'reset_index', 'nunique', 'melt', 'concat', 'map', 'reset_index', 'drop_duplicates', 'sort_values', 'unstack', 'corr', 'melt', 'concat', 'astype', 'pivot_table', 'sum', 'to_csv', 'sort_values', 'sort_values', 'read_csv', 'to_csv', 'sort_values', 'sort_values', 'read_csv', 'idxmin', 'idxmin', 'idxmin', 'idxmin', 'rename', 'idxmax', 'to_csv', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'mean', 'std', 'mean', 'mean', 'mean', 'idxmax', 'rename', 'to_csv', 'to_csv', 'head'] ['time', 'numpy', 'pandas', 'os', 'gc', 'random', 're', 'lightgbm', 'seaborn', 'matplotlib.pyplot', 'matplotlib', 'os'] ['metrics', 'mean_squared_error', 'feature_selection', 'train_test_split', 'display', 'CountVectorizer', 'TfidfVectorizer', 'WordCloud', 'STOPWORDS', 'TSNEVisualizer', 'TfidfVectorizer']Dict:{'time': [], 'numpy': ['mean', 'sum', 'unique', 'isin', 'std'], 'pandas': ['read_csv', 'melt', 'pivot_table', 'concat', 'value_counts', 'unique'], 'os': ['rename'], 'gc': [], 'random': ['sample'], 're': [], 'sklearn': [], 'IPython': [], 'lightgbm': [], 'seaborn': [], 'matplotlib': [], 'wordcloud': [], 'yellowbrick': []} axis_0: 4, axis_1: 9
beginners-prediction-top3.py : ['read_csv', 'read_csv', 'copy', 'replace', 'info', 'head', 'skew', 'kurt', 'corr', 'boxplot', 'boxplot', 'median', 'drop', 'drop', 'concat', 'sum', 'isna', 'sort_values', 'where', 'apply', 'apply', 'apply', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'sum', 'isna', 'drop', 'select_dtypes', 'select_dtypes', 'any', 'isna', 'isna', 'dropna', 'isna', 'concat', 'update', 'fillna', 'sum', 'isna', 'apply', 'apply', 'apply', 'get_dummies', 'sort_values', 'apply', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'apply', 'apply', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'scipy.stats', 'statsmodels.api', 'matplotlib.pyplot', 'warnings', 'shap', 'xgboost'] ['norm', 'skew', 'norm', 'KNeighborsRegressor', 'stats', 'Pool', 'SVR', 'CatBoostRegressor', 'LGBMRegressor', 'GaussianNB', 'DecisionTreeRegressor', 'StackingRegressor', 'LinearRegression', 'BayesianRidge', 'RepeatedKFold', 'KFold', 'cross_val_score', 'train_test_split', 'GradientBoostingRegressor', 'RandomForestRegressor', 'GridSearchCV', 'RandomizedSearchCV', 'mean_squared_error', 'mean_absolute_error', 'mean_squared_log_error']Dict:{'numpy': ['mean', 'median', 'any', 'sum', 'where', 'info', 'std', 'copy'], 'pandas': ['concat', 'get_dummies', 'isna', 'read_csv'], 'seaborn': ['boxplot'], 'scipy': ['mode', 'skew'], 'statsmodels': [], 'matplotlib': ['boxplot'], 'sklearn': [], 'warnings': [], 'shap': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'mlxtend': []} axis_0: 1, axis_1: 1
foursquare-lightgbm-baseline.py : ['read_csv', 'read_csv', 'head', 'value_counts', 'astype', 'groupby', 'reset_index', 'reset_index', 'concat', 'concat', 'head', 'head', 'hist', 'unique', 'to_dict', 'apply', 'groupby', 'to_numpy', 'to_numpy', 'array', 'mean', 'astype', 'map', 'astype', 'max', 'groupby', 'concat', 'astype', 'reset_index', 'mean', 'array', 'mean', 'sort_values', 'map', 'map', 'join', 'read_csv', 'drop', 'merge', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'os', 'gc', 'random', 'warnings', 'seaborn', 'pickle', 'json', 're', 'time', 'sys', 'multiprocessing', 'joblib', 'Levenshtein', 'difflib', 'lightgbm'] ['tqdm', 'glob', 'GroupKFold', 'KFold', 'StratifiedKFold', 'get', 'KNeighborsRegressor']Dict:{'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'array', 'merge'], 'numpy': ['mean', 'array', 'unique', 'max'], 'matplotlib': ['hist'], 'tqdm': [], 'os': [], 'gc': [], 'random': [], 'glob': [], 'sklearn': [], 'warnings': [], 'seaborn': [], 'pickle': [], 'json': [], 're': [], 'time': [], 'sys': [], 'requests': [], 'multiprocessing': [], 'joblib': [], 'Levenshtein': [], 'difflib': [], 'lightgbm': []} axis_0: 1, axis_1: 1
spaceship-titanic-0-81-accuracy-xgboost.py : ['join', 'read_csv', 'join', 'head', 'read_csv', 'join', 'head', 'info', 'describe', 'any', 'isna', 'sort_values', 'sum', 'isna', 'count', 'isna', 'sort_values', 'sum', 'isna', 'concat', 'any', 'isna', 'sum', 'isna', 'melt', 'isna', 'any', 'isna', 'sum', 'isna', 'melt', 'isna', 'apply', 'astype', 'mode', 'to_numpy', 'isin', 'value_counts', 'value_counts', 'unique', 'apply', 'astype', 'mode', 'to_numpy', 'isin', 'value_counts', 'value_counts', 'unique', 'head', 'head', 'head', 'apply', 'all', 'notnull', 'apply', 'all', 'notnull', 'apply', 'all', 'notnull', 'apply', 'all', 'notnull', 'apply', 'all', 'notnull', 'apply', 'all', 'notnull', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'head', 'head', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'fillna', 'median', 'fillna', 'median', 'fillna', 'value_counts', 'fillna', 'value_counts', 'select_dtypes', 'unique', 'value_counts', 'corr', 'mean', 'groupby', 'head', 'head', 'transform', 'astype', 'astype', 'astype', 'transform', 'transform', 'head', 'head', 'head', 'corr', 'map', 'head', 'to_csv'] ['os', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly.express', 'warnings'] ['colored', 'LabelEncoder', 'MinMaxScaler', 'StandardScaler', 'LogisticRegression', 'train_test_split', 'GridSearchCV', 'accuracy_score', 'SVC', 'DecisionTreeClassifier', 'KNeighborsClassifier', 'CatBoostClassifier', 'RidgeClassifier', 'LogisticRegression', 'XGBClassifier', 'LGBMClassifier', 'ExtraTreesClassifier', 'GaussianNB', 'RandomForestClassifier', 'VotingClassifier', 'BaggingClassifier', 'GradientBoostingClassifier', 'StackingClassifier']Dict:{'os': [], 'numpy': ['mean', 'median', 'any', 'sum', 'all', 'unique', 'isin', 'info'], 'pandas': ['isna', 'read_csv', 'melt', 'concat', 'value_counts', 'unique', 'notnull'], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'termcolor': [], 'warnings': [], 'sklearn': ['transform'], 'catboost': [], 'xgboost': ['apply'], 'lightgbm': []} axis_0: 0, axis_1: 13
introduction-to-decision-trees-titanic-dataset.py : ['read_csv', 'read_csv', 'head', 'copy', 'apply', 'apply', 'fillna', 'fillna', 'median', 'mean', 'std', 'sum', 'isnull', 'astype', 'apply', 'replace', 'replace', 'replace', 'replace', 'astype', 'map', 'map', 'fillna', 'astype', 'map', 'astype', 'drop', 'drop', 'head', 'corr', 'astype', 'agg', 'groupby', 'agg', 'groupby', 'copy', 'apply', 'astype', 'map', 'agg', 'groupby', 'drop', 'drop', 'to_string', 'drop', 'to_csv', 'drop'] ['numpy', 'pandas', 're', 'xgboost', 'seaborn', 'matplotlib.pyplot', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools'] ['tree', 'accuracy_score', 'KFold', 'cross_val_score', 'Image', 'check_call', 'Image', 'ImageDraw', 'ImageFont']Dict:{'numpy': ['mean', 'median', 'sum', 'std', 'copy'], 'pandas': ['read_csv', 'isnull'], 're': [], 'xgboost': [], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'sklearn': [], 'IPython': [], 'subprocess': [], 'PIL': []} axis_0: 0, axis_1: 4
titanic-learning-from-disaster.py : ['join', 'read_csv', 'head', 'describe', 'value_counts', 'value_counts', 'groupby', 'reset_index', 'rename', 'dropna', 'astype', 'cut', 'value_counts', 'groupby', 'reset_index', 'rename', 'value_counts', 'groupby', 'reset_index', 'rename', 'hist', 'corr', 'head', 'apply', 'replace', 'replace', 'replace', 'value_counts', 'fillna', 'value_counts', 'cut', 'value_counts', 'mean', 'groupby', 'mean', 'groupby', 'corr', 'median', 'fillna', 'median', 'fillna', 'drop', 'sum', 'isna', 'transform', 'mean', 'std', 'std', 'transform', 'astype', 'mean', 'std', 'std', 'mean', 'items', 'update', 'read_csv', 'apply', 'replace', 'replace', 'replace', 'fillna', 'cut', 'drop', 'median', 'fillna', 'value_counts', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'tensorflow', 'xgboost', 'optuna', 'xgboost', 'shap'] ['train_test_split', 'LabelEncoder', 'LogisticRegression', 'confusion_matrix', 'classification_report', 'roc_auc_score', 'roc_curve', 'auc', 'plot_roc_curve', 'plot_precision_recall_curve', 'cross_val_score', 'StratifiedKFold', 'StandardScaler', 'confusion_matrix', 'classification_report', 'roc_auc_score', 'roc_curve', 'auc', 'plot_roc_curve', 'plot_precision_recall_curve', 'cross_val_score', 'StratifiedKFold', 'StandardScaler', 'cross_val_score', 'plot_optimization_history', 'plot_param_importances', 'BayesSearchCV', 'accuracy_score', 'tqdm']Dict:{'numpy': ['mean', 'median', 'std', 'sum'], 'pandas': ['isna', 'cut', 'read_csv', 'value_counts'], 'matplotlib': ['hist'], 'seaborn': [], 'os': ['rename', 'replace'], 'sklearn': [], '=': [], 'logreg': [], 'tensorflow': [], 'xgboost': [], 'optuna': [], 'skopt': [], 'tqdm': ['update'], 'shap': []} axis_0: 4, axis_1: 2
explained-transformer-tpu-inference.py : ['__init__', '__init__', 'multiply', 'divide', 'pow', 'concat', 'read_csv', 'head', 'to_numpy', 'astype', 'take', 'to_csv', 'head'] ['tensorflow', 'numpy', 'matplotlib.pyplot', 'pickle', 'shutil', 'math', 'pandas', 'gc', 'os'] []Dict:{'tensorflow': ['concat', 'divide', 'multiply', 'pow'], 'numpy': ['take', 'multiply', 'divide'], 'matplotlib': [], 'pickle': [], '': [], '#': [], 'Import': [], 'Pickle': [], 'for': [], 'saving': [], 'and': [], 'loading': [], 'data': [], 'shutil': [], 'file': [], 'operations': [], 'math': ['pow'], 'mathematical': [], 'pandas': ['concat', 'read_csv'], 'gc': [], 'garbage': [], 'collection': [], 'os': [], 'interacting': [], 'with': [], 'the': [], 'operating': [], 'system': []} axis_0: 0, axis_1: 0
house-prices-feature-engineering-stacking.py : ['read_csv', 'drop', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'join', 'drop', 'join', 'drop', 'transform', 'sum', 'isnull', 'sum', 'isnull', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'category_encoders'] ['KNNImputer', 'SimpleImputer', 'StackingTransformer', 'Pipeline', 'CatBoostRegressor', 'XGBRegressor', 'RandomForestRegressor', 'LinearRegression']Dict:{'numpy': ['sum'], 'pandas': ['read_csv', 'isnull'], 'category_encoders': [], 'sklearn': [], 'vecstack': [], 'catboost': [], 'xgboost': []} axis_0: 0, axis_1: 3
a-simple-keras-model.py : ['join', 'mean', 'mean'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn'] []Dict:{'numpy': ['mean'], 'pandas': [], 'os': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 0
lstm-with-simplified-feature-engineering.py : ['read_csv', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'reindex', 'set_index', 'fillna', 'reset_index', 'map', 'unique', 'reindex', 'set_index', 'fillna', 'reset_index', 'pivot_table', 'reset_index', 'add', 'add', 'add', 'add', 'unique', 'rename', 'transform'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'tensorflow', 'random', 'optiver2023'] ['Sequential', 'EarlyStopping', 'ModelCheckpoint', 'Input', 'Dense', 'LSTM', 'Dropout', 'mean_absolute_error', 'mean_squared_error', 'StandardScaler', 'regularizers']Dict:{'os': ['rename'], 'pandas': ['unique', 'pivot_table', 'read_csv'], 'numpy': ['add', 'max', 'sum', 'min', 'unique'], 'matplotlib': [], 'tensorflow': [], 'random': [], 'keras': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 0
basic-nlp-with-nltk.py : ['join', 'join', 'join', 'transform', 'items', 'transform', 'json_normalize', 'head', 'json_normalize', 'head', 'transform', 'transform', 'transform', 'read_csv', 'head', 'astype', 'head', 'to_csv'] ['json', 'pandas', 'json', 'pandas'] ['brown', 'webtext', 'sent_tokenize', 'word_tokenize', 'stopwords', 'punctuation', 'PorterStemmer', 'WordNetLemmatizer', 'pos_tag', 'WordNetLemmatizer', 'pos_tag', 'WordNetLemmatizer', 'Counter', 'StringIO', 'CountVectorizer', 'StringIO', 'CountVectorizer', 'StringIO', 'CountVectorizer', 'itemgetter', 'CountVectorizer', 'train_test_split', 'MultinomialNB', 'accuracy_score']Dict:{'nltk': [], 'string': ['join'], 'collections': ['items'], 'io': [], 'sklearn': [], 'operator': [], 'json': [], 'pandas': ['json_normalize', 'read_csv']} axis_0: 0, axis_1: 0
0-9738-eda-feature-engineering-ensemble-baseline.py : ['join', 'read_csv', 'head', 'describe', 'info', 'unique', 'unique', 'corr', 'unique', 'describe', 'replace', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'head', 'to_numeric', 'head', 'hist', 'transform', 'groupby', 'drop', 'transform', 'groupby', 'drop', 'transform', 'groupby', 'drop', 'mean', 'std', 'transform', 'groupby', 'drop', 'max', 'min', 'merge', 'merge', 'merge', 'merge', 'any', 'isna', 'fillna', 'pop', 'drop', '__init__', 'read_csv', 'transform', 'replace', 'to_numeric', 'transform', 'groupby', 'drop', 'transform', 'groupby', 'drop', 'transform', 'groupby', 'drop', 'mean', 'std', 'transform', 'groupby', 'drop', 'max', 'min', 'merge', 'merge', 'merge', 'merge', 'fillna', 'drop', 'array', 'array', 'head', 'describe', 'to_csv'] ['numpy', 'pandas', 'os', 'pandas', 'numpy', 'lightgbm'] ['OrdinalEncoder', 'train_test_split', 'roc_auc_score', 'RandomForestClassifier', 'LogisticRegression', 'GradientBoostingClassifier', 'XGBClassifier', 'VotingClassifier']Dict:{'numpy': ['mean', 'any', 'max', 'array', 'min', 'unique', 'info', 'std'], 'pandas': ['isna', 'read_csv', 'to_numeric', 'unique', 'array', 'merge'], 'os': ['replace'], 'sklearn': ['transform', '__init__'], 'xgboost': ['__init__'], 'lightgbm': []} axis_0: 0, axis_1: 10
playground-series-s3-e1-catboost-xgboost-lgbm.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'drop', 'concat', 'head', 'concat', 'transform', 'transform', 'transform', 'transform', 'apply', 'get_dummies', 'apply', 'apply', 'apply', 'apply', 'apply', 'min', 'apply', 'abs', 'abs', 'reset_index', 'drop', 'drop', 'drop', 'array', 'array', 'array', 'unique', 'apply', 'clip', 'to_csv'] ['numpy', 'pandas', 'os', 'reverse_geocoder', 'catboost', 'lightgbm'] ['train_test_split', 'fetch_california_housing', 'PCA', 'UMAP', 'LabelEncoder', 'haversine', 'LineString', 'Point', 'radians', 'cos', 'sin', 'asin', 'sqrt', 'KFold', 'mean_squared_error', 'XGBRegressor', 'LGBMRegressor']Dict:{'numpy': ['abs', 'min', 'unique', 'clip', 'array'], 'pandas': ['read_csv', 'concat', 'get_dummies', 'unique', 'array'], 'sklearn': [], 'os': [], 'umap': [], 'reverse_geocoder': [], 'haversine': [], 'shapely': [], 'math': [], 'catboost': [], 'xgboost': ['apply'], 'lightgbm': []} axis_0: 10, axis_1: 11
random-forest.py : ['read_csv', 'read_csv', 'read_csv', 'count', 'drop', 'sort_values', 'reset_index', 'unique', 'drop_duplicates', 'read_csv', 'isin', 'isin', 'concat', 'read_csv', 'isin', 'isin', 'concat', 'read_csv', 'copy', 'min', 'max', 'apply', 'idxmin', 'apply', 'idxmax', 'concat', 'read_csv', 'copy', 'min', 'max', 'apply', 'idxmin', 'apply', 'idxmax', 'concat', 'sort_values', 'shift', 'diff', 'diff', 'read_csv', 'concat', 'copy', 'merge', 'copy', 'read_csv', 'concat', 'copy', 'merge', 'copy', 'merge', 'merge', 'merge', 'merge', 'fillna', 'fillna', 'sum', 'head', 'sample', 'sample', 'concat', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'tqdm', 'gc', 'sys', 'warnings', 'gc'] ['train_test_split', 'RandomForestClassifier', 'recall_score', 'precision_score', 'plot_precision_recall_curve', 'confusion_matrix', 'classification_report', 'matthews_corrcoef']Dict:{'numpy': ['max', 'sum', 'min', 'unique', 'isin', 'diff', 'copy'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'tqdm': [], 'gc': [], 'sys': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 7
cat-in-dat-ohe-vs-thermometer-logit.py : ['join', 'read_csv', 'read_csv', 'drop', 'drop', 'map', 'map', 'map', 'map', 'drop', 'drop', 'drop', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'unique', 'unique', 'apply', 'apply', 'value_counts', 'keys', 'transform', 'transform', 'keys', 'value_counts', 'map', 'map', 'value_counts', 'head', 'copy', 'drop', 'copy', 'items', 'max', 'astype', 'join', 'unique', 'drop', 'concat', 'read_csv', 'to_csv', 'head'] ['numpy', 'pandas', 'warnings', 'os', 'string', 'scipy', 'scipy'] ['BaseEstimator', 'TransformerMixin', 'OneHotEncoder', 'LogisticRegression', 'GridSearchCV']Dict:{'numpy': ['unique', 'max', 'copy'], 'pandas': ['concat', 'unique', 'read_csv', 'value_counts'], 'warnings': [], 'os': [], 'string': [], 'sklearn': ['transform'], 'scipy': []} axis_0: 0, axis_1: 8
2n-instacart-data-exploration-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'count', 'groupby', 'head', 'head', 'head', 'max', 'groupby', 'head', 'count', 'groupby', 'head', 'max', 'max', 'filter', 'groupby', 'head', 'filter', 'groupby', 'count', 'head', 'mean', 'groupby', 'head', 'sort_values', 'head', 'hist', 'mean', 'groupby', 'head', 'hist', 'count', 'count', 'count'] ['pandas', 'matplotlib.pyplot', 'seaborn'] []Dict:{'pandas': ['read_csv'], 'matplotlib': ['hist'], 'seaborn': []} axis_0: 0, axis_1: 0
tps-may-2021-02-xgb-feature-engineering.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'sum', 'isnull', 'mul', 'mean', 'isnull', 'concat', 'rename', 'sort_values', 'reset_index', 'round', 'corr', 'reset_index', 'dropna', 'unstack', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'info', 'copy', 'copy', 'drop', 'drop', 'sum', 'duplicated', 'sum', 'duplicated', 'copy', 'copy', 'select_dtypes', 'select_dtypes', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'std', 'mean', 'sum', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'drop', 'astype', 'astype', 'astype', 'copy', 'join', 'to_csv', 'transform', 'transform', 'transform', 'transform', 'astype', 'astype', 'mean', 'mean', 'reset_index', 'copy', 'hist', 'hist', 'astype', 'quantile', 'quantile', 'value_counts', 'quantile', 'quantile', 'value_counts', 'boxplot', 'copy', 'copy', 'transform', 'transform', 'transform', 'head', 'filter', 'to_csv', 'replace', 'replace', 'copy', 'transform', 'transform', 'transform', 'transform', 'copy', 'astype', 'concat', 'astype', 'mean', 'std', 'mean', 'copy', 'drop', 'copy', 'drop', 'copy', 'drop', 'filter', 'filter', 'reset_index', 'sort_values', 'mean', 'info', 'to_csv'] ['warnings', 'random', 'os', 'gc', 'torch', 'math', 'sklearn.exceptions', 'datetime', 'shap', 'glob', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'joblib', 'xgboost', 'lightgbm', 'scikitplot'] ['drive', 'train_test_split', 'KFold', 'StratifiedKFold', 'StandardScaler', 'MinMaxScaler', 'RobustScaler', 'Normalizer', 'MaxAbsScaler', 'QuantileTransformer', 'LabelEncoder', 'SimpleImputer', 'metrics', 'datetime', 'KMeans', 'PCA', 'KElbowVisualizer', 'SilhouetteVisualizer', 'compute_sample_weight', 'stats', 'hierarchy', 'factorial', 'mode', 'Counter', 'KNeighborsClassifier', 'CalibrationDisplay', 'relativedelta']Dict:{'warnings': [], 'random': [], 'os': ['rename', 'replace'], 'gc': [], 'torch': ['mean', 'quantile', 'max', 'mul', 'sum', 'concat', 'round', 'min', 'std'], 'math': [], 'sklearn': [], 'datetime': ['min', 'max', 'replace'], 'shap': [], 'glob': [], 'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], '': [], 'numpy': ['mean', 'quantile', 'max', 'sum', 'round', 'min', 'info', 'std', 'copy'], 'matplotlib': ['boxplot', 'get', 'hist'], 'seaborn': ['boxplot'], 'joblib': [], 'xgboost': [], 'lightgbm': [], 'scikitplot': [], 'yellowbrick': [], 'scipy': [], 'collections': ['get', 'copy']} axis_0: 0, axis_1: 11
titanic-0-83253-comparison-20-popular-models.py : ['set_index', 'read_csv', 'set_index', 'read_csv', 'read_csv', 'concat', 'groupby', 'transform', 'count', 'fillna', 'mask', 'transform', 'sum', 'fillna', 'mask', 'fillna', 'replace', 'replace', 'replace', 'replace', 'replace', 'fillna', 'apply', 'notnull', 'median', 'groupby', 'fillna', 'apply', 'groupby', 'fillna', 'median', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'drop', 'head', 'head', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'info', 'info', 'astype', 'sort_values', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'mean', 'astype', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'mean', 'std', 'astype', 'astype', 'astype', 'drop', 'drop', 'info', 'astype', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv', 'mean', 'astype', 'to_csv', 'mean', 'astype', 'to_csv', 'mean', 'astype', 'to_csv', 'astype', 'to_csv', 'astype', 'to_csv', 'mean', 'astype', 'to_csv', 'add', 'add', 'add', 'add', 'add', 'add', 'to_csv', 'add', 'add', 'add', 'add', 'add', 'add', 'to_csv', 'mean', 'std', 'astype', 'to_csv', 'astype', 'to_csv', 'sort_values', 'sort_values', 'sort_values', 'sort_values'] ['numpy', 'pandas', 'matplotlib.pyplot', 'xgboost', 'lightgbm', 'keras'] ['LabelEncoder', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'LogisticRegression', 'Perceptron', 'RidgeClassifier', 'SGDClassifier', 'SVC', 'LinearSVC', 'RandomForestClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'BaggingClassifier', 'VotingClassifier', 'KNeighborsClassifier', 'GaussianNB', 'DecisionTreeClassifier', 'metrics', 'XGBClassifier', 'LGBMClassifier', 'Sequential', 'Dense', 'Dropout', 'optimizers', 'KerasClassifier', 'EarlyStopping', 'ModelCheckpoint', 'STATUS_OK', 'Trials', 'fmin', 'hp', 'tpe', 'space_eval', 'simplefilter']Dict:{'numpy': ['mean', 'median', 'add', 'sum', 'info', 'std'], 'pandas': ['concat', 'notnull', 'read_csv'], 'matplotlib': [], 'sklearn': [], 'xgboost': ['apply'], 'lightgbm': [], 'keras': [], 'hyperopt': [], 'warnings': []} axis_0: 3, axis_1: 4
eda-models-titanic-top-5.py : ['join', 'read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'describe', 'describe', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'isnull', 'sort_values', 'mean', 'groupby', 'groupby', 'sort_values', 'mean', 'groupby', 'groupby', 'boxplot', 'boxplot', 'hist', 'sort_values', 'mean', 'groupby', 'groupby', 'sort_values', 'mean', 'groupby', 'groupby', 'corr', 'head', 'get_dummies', 'concat', 'drop', 'fillna', 'map', 'groupby', 'replace', 'fillna', 'median', 'drop', 'notna', 'isnull', 'isnull', 'isnull', 'apply', 'apply', 'drop', 'head', 'head', 'drop', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'to_csv'] ['seaborn', 'matplotlib.pyplot', 'numpy', 'pandas', 're', 'os', 'warnings'] ['OneHotEncoder', 'GradientBoostingClassifier', 'LogisticRegression', 'XGBClassifier', 'RandomForestClassifier', 'SVC', 'GaussianNB', 'DecisionTreeClassifier', 'KNeighborsClassifier', 'cprint', 'StandardScaler']Dict:{'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'numpy': ['mean', 'median', 'info', 'sum'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'notna'], 'sklearn': [], 're': [], '': [], 'os': ['replace'], 'warnings': [], '#': [], 'For': [], 'hiding': [], 'termcolor': []} axis_0: 0, axis_1: 3
strategy-evaluation-what-helps-and-by-how-much.py : ['copy', 'to_numeric', 'astype', 'astype', 'all', 'round', 'to_numeric', 'to_numeric', 'read_csv', 'to_datetime', 'set_index', 'fillna', 'read_csv', 'read_csv', 'to_datetime', 'map', 'unique', 'reindex', 'set_index', 'isna', 'interpolate', 'fillna', 'median', 'reset_index', 'concat', 'any', 'isna', 'isna', 'set_index', 'fillna', 'join', 'join', 'drop', 'reindex', 'reindex', 'assign', 'reindex_like', 'reindex_like', 'sort_index', 'concat', 'unique', 'drop', 'reindex_like', 'unique', 'to_numpy', 'drop', 'pop', 'info', 'info', 'info', 'drop', 'clip', 'sample', 'reindex', 'rename', 'sort_values'] ['pandas', 'numpy', 'os', 'warnings'] ['LGBMRegressor', 'BaseEstimator', 'RegressorMixin', 'clone', 'mean_squared_log_error', 'HTML']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'to_numeric', 'unique', 'to_datetime'], 'numpy': ['median', 'any', 'all', 'round', 'unique', 'clip', 'info', 'copy'], 'os': ['rename'], 'warnings': [], 'lightgbm': [], 'sklearn': [], 'IPython': []} axis_0: 1, axis_1: 0
language-feedback-eda-feature-engineering.py : ['join', 'read_csv', 'head', 'read_csv', 'describe', 'info', 'drop', 'apply', 'mean', 'join', 'apply', 'apply', 'apply', 'astype', 'info', 'boxplot', 'boxplot'] ['os', 'seaborn', 'matplotlib.pyplot', 'nltk', 'numpy', 'pandas', 'os'] ['word_tokenize', 'WordCloud', 'CategoricalDtype']Dict:{'os': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'nltk': [], '#': [], 'Tool': [], 'for': [], 'text': [], 'analysis': [], 'wordcloud': [], 'pandas': ['read_csv'], 'numpy': ['mean', 'info']} axis_0: 0, axis_1: 0
advanced-eda-feature-engineering.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'drop', 'concat', 'head', 'concat', 'head', 'drop', 'drop', 'unique', 'value_counts', 'concat', 'concat', 'drop', 'drop', 'drop', 'drop', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'boxplot', 'concat', 'concat', 'value_counts', 'drop', 'drop', 'drop', 'drop', 'unique', 'sum', 'isnull', 'drop', 'drop', 'concat', 'concat', 'concat', 'concat', 'value_counts', 'drop', 'drop', 'concat', 'concat', 'concat', 'concat', 'drop', 'drop', 'astype', 'replace', 'astype', 'replace', 'drop', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'value_counts', 'value_counts', 'drop', 'drop', 'value_counts', 'value_counts', 'concat', 'concat', 'value_counts', 'value_counts', 'drop', 'drop', 'drop', 'drop', 'concat', 'concat', 'value_counts', 'drop', 'drop', 'concat', 'concat', 'drop', 'drop', 'drop', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'concat', 'replace', 'mean', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'mean', 'replace', 'mean', 'fillna', 'mean', 'sum', 'isnull', 'value_counts', 'fillna', 'mode', 'sum', 'isnull', 'fillna', 'round', 'mean', 'head'] ['numpy', 'pandas', 'os', 'warnings', 'math', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'lightgbm'] ['Counter', 'norm', 'skew', 'StandardScaler', 'LabelEncoder', 'mean_squared_log_error', 'accuracy_score']Dict:{'numpy': ['mean', 'round', 'sum', 'unique'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique'], 'os': ['replace'], 'warnings': [], 'collections': [], 'math': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': [], 'sklearn': [], 'xgboost': [], 'lightgbm': []} axis_0: 1, axis_1: 58
moa-tabnet-train-inference.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'copy', 'copy', 'transform', 'concat', 'transform', 'transform', 'concat', 'concat', 'concat', 'transform', 'transform', 'concat', 'concat', 'var', 'concat', 'concat', 'copy', 'copy', 'concat', 'get_dummies', 'get_dummies', 'copy', 'copy', 'concat', 'get_dummies', 'get_dummies', 'concat', 'concat', 'concat', 'get_dummies', 'get_dummies', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'concat', 'concat', 'merge', 'reset_index', 'reset_index', 'drop', 'drop', 'drop', 'get_dummies', 'get_dummies', '__init__', 'sum', 'mean', 'mean', 'min', 'stack', 'mean', 'mean', 'read_csv', 'reset_index', 'mean', 'merge', 'fillna', 'to_csv', 'head'] ['sys', 'os', 'copy', 'tqdm', 'pickle', 'random', 'warnings', 'numpy', 'pandas', 'torch', 'torch.optim'] ['MultilabelStratifiedKFold', 'stats', 'preprocessing', 'roc_auc_score', 'log_loss', 'StandardScaler', 'PCA', 'nn', 'functional', '_WeightedLoss', 'DataLoader', 'Dataset', 'ReduceLROnPlateau', 'Metric', 'TabNetRegressor', 'load', 'dump', 'Fore', 'QuantileTransformer', 'VarianceThreshold', 'KMeans', '_WeightedLoss']Dict:{'sys': [], 'iterstrat': [], 'os': [], 'copy': ['copy'], 'tqdm': ['std'], 'pickle': [], 'random': [], 'warnings': [], 'numpy': ['mean', 'stack', 'var', 'sum', 'min', 'std', 'copy'], 'pandas': ['concat', 'get_dummies', 'merge', 'read_csv'], 'scipy': ['kurtosis', 'skew'], 'sklearn': [], 'torch': ['__init__'], 'pytorch_tabnet': [], 'colorama': ['__init__']} axis_0: 1, axis_1: 13
detailed-full-solution-step-by-step-top-3.py : ['read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'drop', 'drop', 'describe', 'skew', 'kurt', 'corr', 'reset_index', 'concat', 'drop', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'drop', 'transform', 'groupby', 'fillna', 'median', 'head', 'apply', 'astype', 'astype', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'reset_index', 'concat', 'drop', 'sort_values', 'apply', 'dropna', 'head', 'reset_index', 'get_dummies', 'head', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'keys', 'read_csv', 'quantile', 'quantile', 'apply', 'apply', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'math', 'warnings', 'lightgbm', 'warnings'] ['norm', 'stats', 'stats', 'norm', 'skew', 'boxcox1p', 'DecisionTreeRegressor', 'RandomForestRegressor', 'GradientBoostingRegressor', 'AdaBoostRegressor', 'BaggingRegressor', 'KernelRidge', 'Ridge', 'RidgeCV', 'ElasticNet', 'ElasticNetCV', 'SGDRegressor', 'SVR', 'StackingCVRegressor', 'LGBMRegressor', 'XGBRegressor', 'GridSearchCV', 'learning_curve', 'KFold', 'cross_val_score', 'mean_squared_error', 'OneHotEncoder', 'LabelEncoder', 'scale', 'StandardScaler', 'RobustScaler', 'PCA', 'make_pipeline']Dict:{'numpy': ['mean', 'median', 'quantile', 'sum', 'info', 'std'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'math': [], '': [], 'warnings': [], 'sklearn': [], 'mlxtend': [], 'lightgbm': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 0
ubiquant-target-eda-pca-magic.py : ['head', 'info', 'sum', 'sum', 'isnull', 'sample', 'unique', 'unstack', 'set_index', 'query', 'apply', 'rolling', 'unstack', 'set_index', 'query', 'droplevel', 'unstack', 'set_index', 'filter', 'sample', 'unique', 'unstack', 'set_index', 'query', 'std', 'mean', 'sum', 'sum', 'isnull', 'max', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'isnull', 'sample', 'copy', 'transform', 'concat', 'min', 'max', 'head', 'info', 'reset_index', 'query', 'filter', 'nunique', 'clip', 'dropna', 'apply', 'pct_change', 'unstack', 'set_index', 'sum', 'isnull', 'apply', 'rolling', 'sample', 'sample', 'dropna', 'sample', 'sample', 'isin', 'droplevel', 'dropna', 'head', 'copy', 'sample', 'sum', 'sum', 'sum', 'diff', 'head', 'to_csv', 'sample', 'sample', 'isin', 'apply', 'rolling', 'isin', 'diff', 'copy', 'to_csv'] ['warnings', 'sys', 'gc', 'random', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'umap', 'hdbscan', 'missingno'] ['tqdm', 'LGBMImputer', 'PPCA', 'LedoitWolf', 'StandardScaler', 'zscore', 'distance', 'hierarchy']Dict:{'warnings': [], 'sys': [], 'gc,': [], 'random': ['sample'], 'tqdm': [], 'numpy': ['mean', 'max', 'diff', 'sum', 'min', 'unique', 'clip', 'isin', 'info', 'std', 'copy'], 'pandas': ['unique', 'concat', 'isnull'], 'matplotlib': [], 'seaborn': [], 'umap,': [], 'hdbscan': [], 'missingno': [], 'kuma_utils': [], 'ppca': [], 'sklearn': ['transform'], 'scipy': []} axis_0: 4, axis_1: 13
house-prices-simple-and-easy-3-steps-to-submit.py : ['read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'info', 'info', 'concat', 'drop', 'head', 'head', 'sort_values', 'rename', 'concat', 'apply', 'dropna', 'apply', 'dropna', 'head', 'get_dummies', 'head', 'concat', 'head', 'drop', 'drop', 'concat', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm'] ['skew', 'LabelEncoder']Dict:{'numpy': ['info'], 'pandas': ['concat', 'get_dummies', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 6
ventilator-pressure-prediction-eda-fe-and-models.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'head', 'describe', 'unique', 'unique', 'unique', 'unique', 'transform', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'fillna', 'astype', 'astype', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'drop', 'merge', 'get_dummies', 'drop', 'merge', 'get_dummies', 'drop', 'merge', 'get_dummies', 'cumsum', 'groupby', 'cumsum', 'groupby', 'transform', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'fillna', 'astype', 'astype', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'drop', 'merge', 'get_dummies', 'drop', 'merge', 'get_dummies', 'drop', 'merge', 'get_dummies', 'cumsum', 'groupby', 'cumsum', 'groupby', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'numpy', 'time', 'lightgbm'] ['GroupKFold', 'metrics']Dict:{'pandas': ['read_csv', 'concat', 'get_dummies', 'unique', 'merge'], 'matplotlib': [], 'seaborn': [], 'os': [], 'numpy': ['mean', 'unique', 'isin', 'std', 'cumsum'], 'time': [], 'lightgbm': [], 'sklearn': []} axis_0: 1, axis_1: 6
s03e05-eda-with-seaborn-and-feature-engineering.py : ['assign', 'read_csv', 'assign', 'read_csv', 'concat', 'drop', 'head', 'sum', 'isnull', 'query', 'divide', 'count', 'groupby', 'query', 'corr', 'drop', 'copy', 'query', 'query', 'filter', 'query', 'query', 'query', 'concat', 'copy', 'query', 'mean', 'reset_index', 'rename', 'mul', 'value_counts', 'groupby', 'melt', 'concat'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'optuna', 'warnings'] ['cohen_kappa_score', 'cross_val_score', 'StratifiedKFold', 'LogisticRegression', 'TPESampler']Dict:{'pandas': ['read_csv', 'isnull', 'melt', 'concat', 'value_counts'], 'numpy': ['mean', 'sum', 'divide', 'copy'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'xgboost': [], 'optuna': [], 'warnings': []} axis_0: 0, axis_1: 2
s3e5-complete-feature-engineering-guide.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'concat', 'drop_duplicates', 'rename', 'replace', 'rename', 'replace', 'head', 'head', 'head', 'head', 'corr', 'mean', 'mean', 'copy', 'squeeze', 'astype', 'to_csv', 'head'] ['pandas', 'numpy', 'math', 'seaborn', 'matplotlib', 'matplotlib.pyplot', 'time', 'optuna', 'xgboost', 'lightgbm', 'catboost', 'statsmodels.api'] ['SVC', 'StratifiedKFold', 'OrdinalEncoder', 'LabelEncoder', 'cohen_kappa_score', 'train_test_split', 'LassoCV', 'StandardScaler', 'TPESampler', 'XGBClassifier', 'CatBoostClassifier', 'LGBMClassifier', 'mode']Dict:{'pandas': ['concat', 'read_csv'], 'numpy': ['mean', 'squeeze', 'copy'], 'math': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'optuna': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'time': [], 'statsmodels': [], 'scipy': []} axis_0: 0, axis_1: 0
gb-vpp-pulp-fiction.py : ['read_csv', 'head', 'read_csv', 'head', 'cumsum', 'groupby', 'cumsum', 'groupby', 'cumsum', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'cumsum', 'groupby', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'diff', 'groupby', 'reset_index', 'mean', 'ewm', 'groupby', 'reset_index', 'agg', 'rolling', 'groupby', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'to_numpy', 'drop', 'drop', 'transform', 'astype', 'squeeze', 'min', 'max', 'unique', 'squeeze', 'squeeze', 'squeeze', 'squeeze', 'read_csv', 'to_csv', 'median', 'round', 'clip', 'to_csv'] ['gc', 'numpy', 'pandas', 'tensorflow'] ['KFold', 'RobustScaler', 'mean_absolute_error', 'plot_model', 'Model', 'load_model', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau', 'BatchNormalization', 'Dense', 'Dropout', 'Input', 'Concatenate', 'LSTM', 'GRU', 'Bidirectional', 'Multiply']Dict:{'gc': [], 'numpy': ['mean', 'median', 'squeeze', 'max', 'round', 'min', 'unique', 'clip', 'diff', 'cumsum'], 'pandas': ['get_dummies', 'unique', 'read_csv'], 'sklearn': [], 'tensorflow': []} axis_0: 1, axis_1: 2
0-and-1-distributions-in-each-features.py : ['read_csv', 'keys', 'hist', 'quantile', 'quantile', 'keys', 'where', 'where', 'hist', 'sum', 'min', 'max', 'mean', 'std', 'skew', 'kurtosis', 'median', 'hist'] ['pandas', 'numpy'] ['pyplot', 'pyplot', 'pyplot']Dict:{'pandas': ['read_csv'], 'numpy': ['mean', 'median', 'quantile', 'max', 'sum', 'where', 'min', 'std'], 'matplotlib': []} axis_0: 0, axis_1: 8
titanic-eda-comparing-all-ml-algorithms.py : ['read_csv', 'read_csv', 'copy', 'info', 'head', 'sample', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'describe', 'median', 'median', 'mode', 'mode', 'median', 'median', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'median', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'qcut', 'cut', 'astype', 'value_counts', 'apply', 'value_counts', 'sample', 'head', 'head', 'value_counts', 'value_counts', 'head', 'value_counts', 'count', 'get_dummies', 'head', 'sum', 'isnull', 'info', 'sum', 'isnull', 'info', 'describe', 'head', 'mean', 'groupby', 'mean', 'groupby', 'crosstab', 'boxplot', 'boxplot', 'boxplot', 'hist', 'hist', 'hist', 'boxplot', 'boxplot', 'boxplot', 'hist', 'hist', 'hist', 'hist', 'boxplot', 'boxplot', 'map', 'max', 'map', 'map', 'max', 'map', 'hist', 'map', 'hist', 'corr', 'mean', 'mean', 'mean', 'std', 'sort_values', 'to_csv', 'value_counts', 'sample', 'head'] ['sys', 'pandas', 'matplotlib', 'numpy', 'scipy', 'IPython', 'sklearn', 'random', 'time', 'warnings', 'matplotlib', 'matplotlib.pyplot', 'matplotlib.pylab', 'seaborn'] ['display', 'check_output', 'svm', 'tree', 'linear_model', 'neighbors', 'naive_bayes', 'ensemble', 'discriminant_analysis', 'gaussian_process', 'XGBClassifier', 'OneHotEncoder', 'LabelEncoder', 'feature_selection', 'model_selection', 'metrics']Dict:{'sys': [], '': [], 'pandas': ['read_csv', 'isnull', 'cut', 'value_counts', 'get_dummies', 'qcut', 'crosstab'], 'matplotlib': ['mean', 'median', 'boxplot', 'max', 'sum', 'sample', 'hist', 'info', 'std', 'copy'], '#': [], 'visualization': [], 'numpy': ['mean', 'median', 'max', 'sum', 'info', 'std', 'copy'], 'scipy': [], 'IPython': [], 'sklearn': [], '#collection': [], 'of': [], 'machine': [], 'learning': [], 'algorithms': [], 'random': ['sample'], 'time': [], 'warnings': [], 'subprocess': [], 'xgboost': ['apply'], 'seaborn': ['boxplot']} axis_0: 0, axis_1: 1
pspfgp-exploratory-data-analysis.py : ['update', 'value_counts', 'groupby', 'array', 'astype', 'max', 'min', 'pivot', 'get', 'get', 'get', 'mean', 'get', 'sum', 'isnull', 'astype', 'astype', 'astype', 'to_datetime', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'to_datetime', 'reset_index', 'rename', 'nunique', 'reset_index', 'rename', 'crosstab', 'sum', 'sum', 'array', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'duplicated', 'drop', 'drop', 'groupby', 'mean', 'agg', 'groupby', 'reset_index', 'sort_values', 'min', 'max', 'isna', 'array', 'min', 'min', 'max', 'max', 'min', 'min', 'max', 'max', 'iterrows', 'to_dict', 'to_dict', 'join', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'agg', 'groupby', 'reset_index', 'min', 'max'] ['pandas', 'numpy', 'datetime', 'warnings', 'copy', 'gc', 'os', 'seaborn', 'matplotlib', 'matplotlib.dates', 'plotly.express', 'plotly.graph_objects', 'statsmodels.api'] ['stats', 'cycler', 'pyplot', 'animation', 'display', 'HTML']Dict:{'scipy': [], 'pandas': ['isna', 'to_datetime', 'read_csv', 'isnull', 'value_counts', 'array', 'pivot', 'crosstab'], 'numpy': ['mean', 'max', 'sum', 'min', 'array'], 'datetime': [], 'warnings': [], 'copy': [], 'gc': [], 'os': ['rename'], 'seaborn': [], 'cycler': [], 'matplotlib': [], 'plotly': [], 'statsmodels': [], 'IPython': []} axis_0: 1, axis_1: 2
predicting-earthquake-number.py : ['read_csv', 'std', 'mean', 'max', 'min', 'std', 'abs', 'max', 'abs', 'mean', 'abs', 'diff', 'std', 'abs', 'diff', 'kurtosis', 'skew', 'quantile', 'quantile', 'dropna', 'mean', 'rolling', 'dropna', 'std', 'rolling', 'quantile', 'quantile', 'mean', 'quantile', 'diff', 'head', 'corr', 'head', 'sort_values', 'astype', 'value_counts'] ['time', 'random', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'warnings'] ['tqdm_notebook', 'hilbert', 'hann', 'convolve', 'stats']Dict:{'time': [], 'random': [], 'numpy': ['mean', 'quantile', 'max', 'abs', 'min', 'diff', 'std'], 'pandas': ['read_csv', 'value_counts'], 'tqdm': [], 'matplotlib': [], 'seaborn': [], 'scipy': ['kurtosis', 'skew'], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 0
ion-lofo-importance-on-gpu-via-rapids-xgboost.py : ['read_csv', 'sample', 'sort_values'] ['sys', 'numpy', 'pandas', 'lightgbm', 'cudf', 'xgboost'] ['*', 'cu_min_transform', 'cu_max_transform', 'cu_mean_transform', 'LOFOImportance', 'Dataset', 'plot_importance', 'KFold']Dict:{'sys': [], 'numpy': [], 'pandas': ['read_csv'], 'sklearn': [], 'lightgbm': [], 'cudf': [], 'cu_utils': [], 'lofo': [], 'xgboost': [], '=': [], 'lofo_imp': []} axis_0: 0, axis_1: 0
ps3e19-eda-ensemble-ml-pipeline-rnn-by-skorch.py : ['read_csv', 'join', 'read_csv', 'join', 'to_datetime', 'to_datetime', 'replace', 'replace', 'head', 'info', 'info', 'fillna', 'unique', 'reset_index', 'sum', 'groupby', 'unique', 'reset_index', 'sum', 'groupby', 'reset_index', 'rename', 'sum', 'groupby', 'reset_index', 'rename', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'unique', 'sum', 'groupby', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'sum', 'sum', 'groupby', 'sum', 'reset_index', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'reset_index', 'reset_index', 'sum', 'groupby', 'pivot', 'apply', 'sum', 'reset_index', 'rename', 'stack', 'unique', 'reset_index', 'sum', 'groupby', 'copy', 'astype', 'astype', 'unique', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'drop', 'unique', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'unique', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'drop', 'boxplot', 'reset_index', 'sum', 'groupby', 'reset_index', 'rename', 'sum', 'groupby', 'reset_index', 'rename', 'sum', 'groupby', 'unique', 'copy', 'reset_index', 'first', 'groupby', 'sort_index', 'copy', 'copy', 'copy', 'update', 'update', 'update', 'update', 'map', 'where', 'notnull', 'fillna', 'drop', 'concat', 'copy', 'apply', 'astype', 'astype', 'eq', 'astype', 'eq', 'astype', 'eq', 'apply', 'astype', 'astype', 'apply', 'apply', 'astype', 'eq', 'astype', 'sum', 'astype', 'eq', 'eq', 'astype', 'sum', 'merge', 'dropna', 'drop', 'reset_index', 'drop', 'reset_index', 'reset_index', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'head', 'keys', 'sample', 'sum', 'abs', 'abs', 'abs', 'apply', 'apply', 'mean', 'mean', 'sort_values', 'head', 'sort_values', 'head', 'map', 'map', 'mean', 'reset_index', 'reset_index', 'copy', 'reset_index', 'concat', 'copy', 'concat', 'copy', 'concat', 'concat', 'transform', '__init__', 'array', 'copy', 'mean', 'clip', 'clip', 'reset_index', 'reset_index', 'copy', 'reset_index', 'concat', '__init__', 'array', 'copy', 'mean', 'clip', 'clip', 'reset_index', 'reset_index', 'copy', 'reset_index', 'concat', '__init__', 'copy', 'concat', 'concat', 'transform', 'array', 'mean', 'array', 'array', 'melt', 'sort_values', 'items', 'mean', 'std', 'corr', 'astype', 'corr', 'astype', 'corr', 'abs', 'mean', 'std', 'mean', 'std', 'keys', 'min', 'max', 'min', 'keys', 'array', 'keys', 'min', 'max', 'min', 'max', 'mean', 'reset_index', 'reset_index', 'copy', 'reset_index', 'concat', 'mean', 'reset_index', 'reset_index', 'copy', 'reset_index', 'concat', 'copy', 'copy', 'fillna', 'copy', 'copy', 'copy', 'drop', 'reset_index', 'mean', 'concat', 'copy', 'merge', 'reset_index', 'concat', 'merge', 'copy', 'unique', 'head', 'tail', 'copy', 'sum', 'groupby', 'sum', 'unique', 'round', 'drop', 'read_csv', 'join', 'rename', 'to_csv', 'reset_index', 'reset_index', 'reset_index', 'drop', 'reset_index', 'reset_index', 'transform', 'sum', 'isnull', 'sum', 'isnull', 'head', 'mean', 'mean', 'read_csv', 'join', 'round', 'rename', 'to_csv', 'read_csv', 'read_csv', 'corr', 'concat', 'read_csv', 'read_csv', 'join', 'round', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'random', 'gc', 'time', 'math', 'datetime', 'holidays', 'dateutil.easter', 'seaborn', 'shap', 'optuna', 'xgboost', 'lightgbm', 'warnings', 'torch', 'torch.nn', 'torch.optim', 'torch.nn.functional', 'skorch'] ['deepcopy', 'partial', 'combinations', 'savgol_filter', 'BaseEstimator', 'TransformerMixin', 'train_test_split', 'StratifiedKFold', 'KFold', 'TimeSeriesSplit', 'GroupKFold', 'mean_absolute_error', 'mean_squared_error', 'StandardScaler', 'MinMaxScaler', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'OneHotEncoder', 'FunctionTransformer', 'LabelEncoder', 'ColumnTransformer', 'RandomUnderSampler', 'enable_iterative_imputer', 'SimpleImputer', 'KNNImputer', 'IterativeImputer', 'PCA', 'NMF', 'LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'SGDRegressor', 'LassoCV', 'PassiveAggressiveRegressor', 'ARDRegression', 'RidgeCV', 'ElasticNetCV', 'TheilSenRegressor', 'RANSACRegressor', 'HuberRegressor', 'MLPRegressor', 'SVR', 'LinearSVR', 'KNeighborsRegressor', 'GaussianProcessRegressor', 'DecisionTreeRegressor', 'enable_hist_gradient_boosting', 'RandomForestRegressor', 'AdaBoostRegressor', 'ExtraTreesRegressor', 'HistGradientBoostingRegressor', 'BaggingRegressor', 'GradientBoostingRegressor', 'VotingRegressor', 'StackingRegressor', 'PolynomialFeatures', 'Pipeline', 'make_pipeline', 'make_column_transformer', 'make_column_selector', 'PLSRegression', 'EarlyStopping', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool', 'LADRegression', 'RFE', 'RFECV', 'permutation_importance', 'Style', 'Fore', 'SplineTransformer', 'ReduceLROnPlateau', 'Dataset', 'DataLoader', 'NeuralNetClassifier', 'NeuralNetRegressor', 'NeuralNet', 'Callback', 'Checkpoint', 'EarlyStopping', 'LRScheduler', 'ValidSplit', 'predefined_split', 'hierarchy', 'dendrogram', 'linkage', 'squareform']Dict:{'numpy': ['mean', 'stack', 'max', 'abs', 'sum', 'array', 'where', 'round', 'min', 'unique', 'clip', 'info', 'std', 'copy'], 'pandas': ['to_datetime', 'read_csv', 'isnull', 'melt', 'concat', 'unique', 'notnull', 'array', 'merge', 'pivot'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'random': ['sample'], 'os': ['rename', 'replace'], 'copy': ['__init__'], 'functools': ['__init__'], 'itertools': ['__init__'], 'gc': [], 'time': [], 'math': [], 'datetime': [], '': [], 'holidays': [], 'dateutil': [], 'scipy': ['__init__'], 'sklearn': [], 'category_encoders': [], 'imblearn': [], 'shap': [], 'optuna': [], 'xgboost': ['__init__'], 'lightgbm': [], 'catboost': [], 'sklego': [], 'warnings': [], 'colorama': ['__init__'], 'torch': ['__init__'], 'skorch': []} axis_0: 3, axis_1: 20
newfeature-exp-weighted-rolling-ave-of-visitors.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'rename', 'read_csv', 'hist', 'hist', 'map', 'merge', 'head', 'to_datetime', 'to_datetime', 'apply', 'rename', 'sum', 'groupby', 'rename', 'mean', 'groupby', 'merge', 'head', 'to_datetime', 'map', 'map', 'join', 'to_datetime', 'unique', 'reset_index', 'concat', 'read_csv', 'mean', 'ewm', 'shift', 'sort_index', 'apply', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'apply', 'join', 'set_index', 'apply', 'join', 'set_index', 'apply', 'join', 'set_index', 'apply', 'join', 'set_index', 'fillna', 'fillna', 'sum', 'isnull', 'merge', 'rename', 'reset_index', 'agg', 'groupby', 'min', 'mean', 'median', 'max', 'head', 'merge', 'head', 'merge', 'head', 'map', 'replace', 'unique', 'unique', 'map', 'replace', 'unique', 'map', 'map', 'unique', 'head', 'to_datetime', 'drop', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'apply', 'join', 'head', 'astype', 'apply', 'astype', 'apply', 'max', 'max', 'max', 'max', 'transform', 'fillna', 'fillna', 'astype', 'astype', 'clip', 'copy', 'read_csv', 'items', 'apply', 'merge', 'drop', 'map', 'sum', 'sum', 'reset_index', 'apply', 'groupby', 'rename', 'map', 'join', 'map', 'drop', 'merge', 'merge', 'isnull', 'merge', 'isnull', 'merge', 'reset_index', 'mean', 'groupby', 'map', 'copy', 'merge', 'to_csv'] ['glob', 're', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'warnings'] ['*', 'XGBRegressor', 'datetime']Dict:{'glob,re,os': [], 'numpy': ['mean', 'median', 'max', 'sum', 'min', 'unique', 'clip', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'unique', 'merge', 'to_datetime'], 'sklearn': [], 'xgboost': ['apply'], 'datetime': ['min', 'max', 'replace'], 'matplotlib': ['hist'], 'warnings': []} axis_0: 1, axis_1: 10
titanic-advanced-feature-engineering-tutorial.py : ['reset_index', 'concat', 'drop', 'read_csv', 'read_csv', 'info', 'sample', 'info', 'sample', 'sum', 'isnull', 'reset_index', 'sort_values', 'unstack', 'abs', 'corr', 'rename', 'median', 'groupby', 'median', 'apply', 'groupby', 'fillna', 'median', 'isnull', 'fillna', 'isnull', 'median', 'groupby', 'fillna', 'apply', 'notnull', 'transpose', 'rename', 'drop', 'count', 'groupby', 'sum', 'transpose', 'transpose', 'rename', 'drop', 'count', 'groupby', 'sum', 'transpose', 'replace', 'replace', 'replace', 'value_counts', 'drop', 'value_counts', 'value_counts', 'reset_index', 'sort_values', 'unstack', 'abs', 'corr', 'drop', 'rename', 'drop', 'drop', 'reset_index', 'sort_values', 'unstack', 'abs', 'corr', 'drop', 'rename', 'drop', 'drop', 'corr', 'drop', 'corr', 'drop', 'qcut', 'qcut', 'map', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'transform', 'groupby', 'replace', 'replace', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'drop', 'replace', 'unique', 'unique', 'unique', 'unique', 'median', 'groupby', 'median', 'groupby', 'mean', 'nunique', 'concat', 'concat', 'drop', 'drop', 'drop', 'mean', 'sort_values', 'mean', 'std', 'std', 'sum', 'sum', 'drop', 'head', 'astype', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'string', 'warnings'] ['RandomForestClassifier', 'OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'roc_curve', 'auc', 'StratifiedKFold', 'PrettyPrinter']Dict:{'numpy': ['transpose', 'mean', 'median', 'abs', 'sum', 'unique', 'info', 'std'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'notnull', 'qcut'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'string': [], 'warnings': [], 'pprint': [], '=': [], 'pd': [], 'importances': [], 'inplace=True,': [], 'ascending=False)': []} axis_0: 2, axis_1: 12
amex-feature-engineering-and-selection.py : ['join', 'fillna', 'fillna', 'get_dummies', 'fillna', 'fillna', 'mean', 'min', 'fillna', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'sort_values', 'to_csv', 'head', 'sort_values', 'to_csv', 'head', 'sort_values', 'iterrows', 'isin', 'sort_values', 'iterrows', 'isin'] ['numpy', 'pandas', 'os', 'pandas', 'numpy', 'os', 'time', 'pyarrow.parquet', 'pyarrow', 'warnings'] ['Path', 'datetime', 'timedelta', 'relativedelta', 'StandardScaler', 'MinMaxScaler']Dict:{'numpy': ['mean', 'isin', 'min'], 'pandas': ['get_dummies'], 'os': [], '': [], 'pathlib': [], 'datetime': ['min'], 'time': [], 'dateutil': [], 'sklearn': [], 'pyarrow': [], 'warnings': []} axis_0: 0, axis_1: 0
writing-process-and-quality-feature-engineering.py : ['read_csv', 'astype', 'max', 'groupby', 'astype', 'read_csv', 'astype', 'read_csv', 'astype', 'concat', 'concat', 'quantile', 'quantile', 'mode', 'apply', 'groupby', 'unique', 'merge', 'rename', 'apply', 'explode', 'apply', 'agg', 'groupby', 'join', 'reset_index', 'ne', 'shift', 'cumsum', 'groupby', 'concat', 'shift', 'sort_values', 'diff', 'groupby', 'reset_index', 'agg', 'groupby', 'map', 'join', 'shift', 'groupby', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'reset_index', 'agg', 'groupby', 'map', 'join', 'reset_index', 'agg', 'groupby', 'map', 'join', 'reset_index', 'agg', 'groupby', 'map', 'join', 'reset_index', 'agg', 'groupby', 'map', 'join', 'reset_index', 'agg', 'groupby', 'map', 'join', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'where', 'where', 'where', 'where', 'where', 'where', 'astype', 'astype', 'merge', 'isna', 'isna', 'select_dtypes', 'corr', 'replace', 'replace', 'fillna', 'replace', 'replace', 'fillna', 'fillna', 'to_csv'] ['numpy', 'pandas', 'polars', 're', 'math', 'matplotlib.pyplot', 'pandas', 'lightgbm', 'lightgbm', 'optuna', 'optuna', 'warnings'] ['train_test_split', 'mean_squared_error', 'KFold', 'cross_val_score', 'StratifiedKFold', 'RandomForestRegressor', 'CatBoostRegressor', 'XGBRegressor', 'StandardScaler', 'MinMaxScaler', 'RandomForestRegressor', 'RandomForestClassifier', 'CatBoostRegressor', 'cross_validate', 'ShuffleSplit', 'CatBoostRegressor']Dict:{'numpy': ['max', 'quantile', 'where', 'unique', 'diff', 'cumsum'], 'pandas': ['isna', 'read_csv', 'concat', 'unique', 'merge'], 'polars': ['map', 'quantile', 'read_csv', 'max', 'concat', 'apply', 'corr', 'cumsum'], 're': [], 'sklearn': [], 'math': [], 'matplotlib': [], 'lightgbm': [], 'catboost': [], '': [], 'optuna': [], 'warnings': []} axis_0: 2, axis_1: 1
0-81669-misaelcribeiro-solution-modularity-fe.py : ['join', 'read_csv', 'read_csv', 'drop', 'drop', 'replace', 'replace', 'drop', 'drop', 'sum', 'sum', 'sort_values', 'sum', 'isnull', 'astype', 'astype', 'concat', 'astype', 'drop', 'copy', 'pop', 'head', 'replace', 'replace', 'to_csv'] ['numpy', 'pandas', 'os'] ['Pool', 'CatBoostClassifier', 'OrdinalEncoder', 'SimpleImputer', 'ColumnTransformer', 'headjackai_hub']Dict:{'numpy': ['sum', 'copy'], 'pandas': ['concat', 'read_csv', 'isnull'], 'catboost': [], 'os': ['replace'], 'sklearn': [], 'headjackai': []} axis_0: 0, axis_1: 7
extensive-eda-and-modeling-xgb-hyperopt.py : ['read_csv', 'read_csv', 'reset_index', 'sum', 'isnull', 'nunique', 'value_counts', 'value_counts', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'std', 'astype', 'sum', 'sum', 'groupby', 'sum', 'groupby', 'reset_index', 'astype', 'quantile', 'concat', 'reset_index', 'quantile', 'reset_index', 'quantile', 'crosstab', 'reset_index', 'rename', 'quantile', 'isin', 'value_counts', 'value_counts', 'isin', 'value_counts', 'value_counts', 'crosstab', 'reset_index', 'rename', 'crosstab', 'reset_index', 'rename', 'dropna', 'dropna', 'crosstab', 'reset_index', 'rename', 'crosstab', 'reset_index', 'rename', 'fillna', 'crosstab', 'reset_index', 'rename', 'unstack', 'sum', 'groupby', 'reset_index', 'rename', 'boxplot', 'quantile', 'isin', 'value_counts', 'value_counts', 'isin', 'value_counts', 'value_counts', 'crosstab', 'reset_index', 'rename', 'max', 'unstack', 'sum', 'groupby', 'sum', 'groupby', 'reset_index', 'rename', 'reset_index', 'sum', 'groupby', 'fillna', 'max', 'isin', 'isin', 'isin', 'isin', 'value_counts', 'value_counts', 'fillna', 'isin', 'isin', 'isin', 'isin', 'value_counts', 'value_counts', 'fillna', 'describe', 'isin', 'value_counts', 'value_counts', 'isin', 'value_counts', 'value_counts', 'apply', 'reset_index', 'count', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'count', 'groupby', 'reset_index', 'count', 'groupby', 'describe', 'merge', 'crosstab', 'reset_index', 'rename', 'fillna', 'fillna', 'fillna', 'isin', 'value_counts', 'value_counts', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'map', 'map', 'map', 'map', 'map', 'map', 'drop', 'transform', 'transform', 'mean', 'std', 'mean', 'std', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'concat', 'reset_index', 'drop', 'drop', 'rename', 'concat', 'fillna', 'min', 'drop', 'drop', 'sort_values', 'astype', 'sort_values', 'drop', 'sort_values', 'keys', 'sort_values', 'head', 'to_csv'] ['numpy', 'pandas', 'scipy', 'matplotlib.pyplot', 'seaborn', 'plotly.graph_objs', 'plotly.tools', 'plotly.figure_factory', 'xgboost', 'os', 'gc', 'datetime', 'time'] ['stats', 'iplot', 'init_notebook_mode', 'preprocessing', 'confusion_matrix', 'roc_auc_score', 'StratifiedKFold', 'cross_val_score', 'KFold', 'XGBClassifier', 'fmin', 'hp', 'tpe', 'Trials', 'space_eval', 'STATUS_OK', 'STATUS_RUNNING', 'partial', 'minmax_scale', 'PCA', 'KFold', 'TimeSeriesSplit', 'roc_auc_score', 'plot_importance', 'make_scorer']Dict:{'numpy': ['mean', 'quantile', 'max', 'sum', 'min', 'isin', 'std'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'merge', 'crosstab'], 'scipy': ['describe'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'plotly': [], 'sklearn': [], 'xgboost': [], 'hyperopt': [], 'functools': [], 'os': ['rename'], 'gc': [], 'datetime': [], 'time': []} axis_0: 1, axis_1: 8
easy-and-effective-approach-to-predict-house-price.py : ['join', 'read_csv', 'read_csv', 'head', 'head', 'describe', 'skew', 'kurt', 'concat', 'concat', 'head', 'concat', 'boxplot', 'concat', 'boxplot', 'corr', 'nlargest', 'concat', 'drop', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'drop', 'max', 'sum', 'isnull', 'info', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'fillna', 'fillna', 'fillna', 'mode', 'drop', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'sort_values', 'apply', 'dropna', 'head', 'head', 'get_dummies', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'xgboost', 'lightgbm'] ['norm', 'skew', 'StandardScaler', 'stats', 'boxcox1p', 'RandomForestRegressor', 'GradientBoostingRegressor', 'KernelRidge', 'make_pipeline', 'RobustScaler', 'LabelEncoder', 'KFold', 'cross_val_score', 'train_test_split', 'mean_squared_error', 'make_scorer', 'KFold']Dict:{'numpy': ['info', 'sum', 'max'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'os': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': [], 'sklearn': [], 'warnings': [], 'xgboost': [], 'lightgbm': []} axis_0: 1, axis_1: 10
titanic-let-s-compare-all-model-eda-ft.py : ['read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'isnull', 'sum', 'isnull', 'isnull', 'sum', 'isnull', 'value_counts', 'value_counts', 'head', 'value_counts', 'value_counts', 'map', 'head', 'head', 'drop', 'drop', 'head', 'head', 'map', 'isnull', 'mode', 'dropna', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'head', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'map', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'head', 'drop', 'head', 'head', 'notnull', 'isnull', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'map', 'qcut', 'qcut', 'cut', 'cut', 'head', 'get_dummies', 'rename', 'concat', 'get_dummies', 'rename', 'concat', 'get_dummies', 'rename', 'concat', 'get_dummies', 'rename', 'concat', 'get_dummies', 'rename', 'concat', 'get_dummies', 'rename', 'concat', 'head', 'head', 'drop', 'drop', 'drop', 'drop', 'head', 'drop', 'mean', 'to_csv', 'read_csv', 'mean', 'to_csv', 'read_csv', 'mean', 'to_csv', 'read_csv', 'mean', 'to_csv', 'read_csv', 'mean', 'to_csv', 'read_csv', 'mean', 'to_csv', 'read_csv', 'add', 'add', 'add', 'add'] ['pandas', 'numpy', 'pandas_profiling', 'seaborn', 'matplotlib.pyplot', 'seaborn', 'numpy'] ['RandomForestRegressor', 'TargetEncoder', 'LabelEncoder', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'GaussianNB', 'SVC', 'KFold', 'cross_val_score', 'LogisticRegression', 'Sequential', 'Dense']Dict:{'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'get_dummies', 'notnull', 'qcut'], 'numpy': ['mean', 'info', 'sum', 'add'], 'pandas_profiling': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'category_encoders': [], 'keras': []} axis_0: 0, axis_1: 13
votingregressor-boosters.py : ['read_csv', 'dropna', 'reset_index', 'isna', 'fillna', 'isna', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'info', 'sum', 'memory_usage', 'info', 'info', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'diff', 'groupby', 'diff', 'groupby', 'agg', 'agg', 'shift', 'groupby', 'pct_change', 'groupby', 'diff', 'groupby', 'replace', 'items', 'map', 'to_dict', 'drop', 'concat', 'reset_index', 'sort_values', 'tail', 'groupby', 'mean', 'clip', 'mean', 'mean', 'round'] ['pandas', 'numpy', 'gc', 'os', 'time', 'warnings', 'optiver2023'] ['VotingRegressor', 'XGBRegressor', 'CatBoostRegressor', 'LGBMRegressor', 'train_test_split', 'mean_squared_error', 'combinations', 'simplefilter', 'njit', 'prange']Dict:{'pandas': ['concat', 'eval', 'isna', 'read_csv'], 'numpy': ['mean', 'median', 'max', 'diff', 'sum', 'round', 'min', 'clip', 'info', 'std'], 'sklearn': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'gc': [], '': [], 'os': ['replace'], 'time': [], 'warnings': [], 'itertools': [], 'numba': [], 'optiver2023': []} axis_0: 1, axis_1: 3
simple-exploration-notebook-map-plots-v2.py : ['read_csv', 'read_csv', 'head', 'head', 'to_datetime', 'to_datetime', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'head', 'min', 'max', 'head', 'head', 'head', 'head', 'mean', 'std', 'head'] ['numpy', 'pandas', 'warnings', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'plotly', 'plotly.plotly', 'plotly.offline', 'plotly.graph_objs', 'cufflinks'] ['boxcox', 'download_plotlyjs', 'init_notebook_mode', 'plot', 'iplot', 'Scatter', 'Figure', 'Layout']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'std'], 'pandas': ['to_datetime', 'read_csv', 'isnull'], 'warnings': [], 'scipy': [], 'seaborn': [], 'matplotlib': [], 'plotly': [], 'cufflinks': []} axis_0: 0, axis_1: 0
light-gbm-with-complete-eda.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'astype', 'sum', 'sum', 'groupby', 'sum', 'groupby', 'reset_index', 'crosstab', 'reset_index', 'rename', 'isin', 'value_counts', 'value_counts', 'isin', 'value_counts', 'value_counts', 'crosstab', 'reset_index', 'rename', 'crosstab', 'reset_index', 'rename', 'dropna', 'dropna', 'crosstab', 'reset_index', 'rename', 'crosstab', 'reset_index', 'rename', 'fillna', 'crosstab', 'reset_index', 'rename', 'unstack', 'sum', 'groupby', 'reset_index', 'rename', 'boxplot', 'isin', 'value_counts', 'value_counts', 'isin', 'value_counts', 'value_counts', 'crosstab', 'reset_index', 'rename', 'max', 'unstack', 'sum', 'groupby', 'sum', 'groupby', 'reset_index', 'rename', 'reset_index', 'sum', 'groupby', 'fillna', 'max', 'isin', 'isin', 'isin', 'isin', 'value_counts', 'value_counts', 'fillna', 'isin', 'value_counts', 'value_counts', 'isin', 'value_counts', 'value_counts', 'apply', 'apply', 'reset_index', 'count', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'reset_index', 'count', 'groupby', 'reset_index', 'count', 'groupby', 'min', 'max', 'min', 'read_pickle', 'apply', 'reset_index', 'max', 'reset_index', 'max', 'read_pickle', 'reset_index', 'isin', 'reset_index', 'isin', 'read_pickle', 'read_pickle', 'read_pickle', 'apply', 'where', 'isna', 'concat', 'value_counts', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'where', 'isin', 'astype', 'sum', 'astype', 'sum', 'isna', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'where', 'isin', 'where', 'isin', 'concat', 'rename', 'reset_index', 'agg', 'groupby', 'to_dict', 'map', 'map', 'fillna', 'fillna', 'where', 'apply', 'apply', 'fillna', 'apply', 'join', 'apply', 'join', 'fillna', 'apply', 'join', 'apply', 'join', 'fillna', 'apply', 'join', 'merge', 'concat', 'merge', 'concat', 'concat', 'to_dict', 'value_counts', 'map', 'map', 'concat', 'to_dict', 'value_counts', 'map', 'map', 'concat', 'astype', 'astype', 'to_dict', 'value_counts', 'map', 'astype', 'astype', 'map', 'astype', 'astype', 'rename', 'reset_index', 'agg', 'groupby', 'to_dict', 'map', 'map', 'fillna', 'fillna', 'astype', 'astype', 'transform', 'transform', 'astype', 'astype', 'sort_values', 'to_csv'] ['pandas', 'numpy', 'multiprocessing', 'warnings', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'gc', 'datetime', 'datetime', 'plotly.graph_objs', 'plotly.tools', 'plotly.figure_factory', 'lightgbm', 'os', 'sys', 'gc', 'warnings', 'random', 'datetime'] ['metrics', 'time', 'tqdm_notebook', 'LabelEncoder', 'KFold', 'GroupKFold', 'roc_auc_score', 'iplot', 'init_notebook_mode', 'train_test_split', 'StratifiedKFold', 'GroupKFold', 'ks_2samp']Dict:{'pandas': ['isna', 'concat', 'value_counts', 'read_pickle', 'merge', 'crosstab'], 'numpy': ['max', 'sum', 'where', 'min', 'isin'], 'multiprocessing': [], 'warnings': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'lightgbm': [], 'sklearn': [], 'gc': [], 'time': [], 'datetime': [], 'tqdm': [], 'plotly': [], 'os,': [], 'sys,': [], 'gc,': [], 'warnings,': [], 'random,': [], 'scipy': []} axis_0: 0, axis_1: 4
ieee-cis-fraud-detection-eda-model.py : ['join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'head', 'head', 'head', 'head', 'sum', 'isnull', 'sum', 'isnull', 'count', 'isnull', 'concat', 'transpose', 'nunique', 'nunique', 'test', 'astype', 'transpose', 'nunique', 'nunique', 'test', 'astype', 'transpose', 'value_counts', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'drop', 'merge', 'merge', 'pop', 'pop', 'reset_index', 'fillna', 'sum', 'isnull', 'drop', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'sub', 'apply', 'sub', 'transform', 'groupby', 'transform', 'groupby', 'value_counts', 'map', 'astype', 'fillna', 'factorize', 'notnull', 'drop', 'isnull', 'pop', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 're', 'lightgbm', 'os'] ['metrics', 'preprocessing', 'StratifiedKFold', 'PCA']Dict:{'numpy': ['transpose', 'max', 'sum', 'test', 'min'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'test', 'factorize', 'notnull', 'merge'], 'seaborn': [], 'matplotlib': [], 're': ['sub'], 'sklearn': ['transform'], 'lightgbm': [], 'os': []} axis_0: 0, axis_1: 5
feature-engineering-eda-optuna-lightgbm.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'copy', 'merge', 'sub', 'replace', 'join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'set_index', 'read_csv', 'head', 'head', 'head', 'head', 'head', 'head', 'nunique', 'to_datetime', 'head', 'info', 'nunique', 'groupby', 'reset_index', 'sum', 'groupby', 'value_counts', 'unique', 'sort_values', 'boxplot', 'min', 'max', 'boxplot', 'median', 'array', 'unique', 'unique', 'astype', 'astype', 'astype', 'sort_values', 'head', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'clip', 'fillna', 'head', 'astype', 'astype', 'astype', 'head', 'concat', 'head', 'head', 'head', 'map', 'map', 'map', 'replace', 'replace', 'fillna', 'apply', 'apply', 'apply', 'apply', 'replace', 'agg', 'groupby', 'reset_index', 'unique', 'apply', 'drop', 'drop', 'merge', 'merge', 'merge', 'head', 'astype', 'map', 'tail', 'tail', 'agg', 'groupby', 'reset_index', 'merge', 'drop', 'tail', 'agg', 'groupby', 'reset_index', 'merge', 'drop', 'tail', 'agg', 'groupby', 'reset_index', 'merge', 'drop', 'tail', 'agg', 'groupby', 'reset_index', 'merge', 'drop', 'tail', 'agg', 'groupby', 'reset_index', 'merge', 'drop', 'tail', 'agg', 'groupby', 'reset_index', 'merge', 'agg', 'groupby', 'reset_index', 'merge', 'tail', 'apply', 'astype', 'fillna', 'drop', 'tail', 'astype', 'iterrows', 'astype', 'iterrows', 'transform', 'groupby', 'transform', 'groupby', 'tail', 'info', 'head', 'to_pickle', 'to_pickle', 'drop', 'mean', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_pickle', 'read_pickle', 'items', 'items', 'drop', 'drop', 'clip', 'sort_values', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'math', 'gc', 're', 'os', 'numpy', 'pandas', 'warnings', 'lightgbm', 'optuna'] ['LabelEncoder', 'product', 'mean_squared_error']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'min', 'unique', 'clip', 'info', 'array', 'copy'], 'pandas': ['to_pickle', 'read_csv', 'concat', 'value_counts', 'read_pickle', 'unique', 'array', 'merge', 'to_datetime'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'math': [], 'gc': [], 're': ['sub'], 'sklearn': [], 'itertools': [], 'os': ['replace'], 'warnings': [], 'lightgbm': [], 'optuna': []} axis_0: 0, axis_1: 2
ps-s3e14-2023-first-place-winning-solution.py : ['array', 'drop', 'drop', 'read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'concat', 'reset_index', 'drop', 'drop', 'drop', 'to_csv', 'join', 'read_csv', 'to_csv', 'join', 'read_csv', 'read_csv', 'read_csv', 'unique', 'read_csv', 'read_csv', 'round', 'read_csv', 'query', 'query', 'query', 'query', 'query', 'value_counts', 'query', 'head', 'sort_values', 'query', 'query', 'head', 'sort_values', 'query', 'query', 'query', 'query', 'query', 'query', 'copy', 'read_csv', 'sort_values', 'last', 'groupby', 'query', 'query', 'query', 'eq', 'eq', 'eq', 'eq', 'read_csv', 'to_csv', 'sum', 'isna', 'sum', 'isna'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'os', 'lightgbm', 'warnings', 'pandas'] ['HTML', 'tqdm', 'log_evaluation', 'early_stopping', 'record_evaluation', 'metrics', 'model_selection', 'utils', 'LADRegression', 'Style', 'Fore', 'Parallel', 'delayed', 'pdist', 'squareform']Dict:{'IPython': [], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'array'], 'numpy': ['sum', 'round', 'unique', 'array', 'copy'], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'os': [], 'lightgbm': [], 'sklearn': [], 'sklego': [], 'warnings': [], 'colorama': [], 'joblib': [], 'scipy': []} axis_0: 0, axis_1: 0
ch7-eda.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'reset_index', 'rename', 'sum', 'isnull', 'nunique', 'unique', 'unique', 'unique', 'unique', 'unique', 'crosstab', 'crosstab', 'reset_index', 'crosstab', 'reset_index', 'min', 'max', 'astype', 'astype'] ['pandas', 'seaborn', 'matplotlib', 'matplotlib.pyplot', 'matplotlib.gridspec'] ['CategoricalDtype']Dict:{'pandas': [], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 0
pse17-feature-engineering-tuning-optuna.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'drop', 'sum', 'isna', 'sum', 'duplicated', 'sum', 'duplicated', 'drop', 'drop_duplicates', 'concat', 'value_counts', 'head', 'value_counts', 'isin', 'unstack', 'value_counts', 'groupby', 'value_counts', 'reset_index', 'mean', 'groupby', 'boxplot', 'boxplot', 'boxplot', 'cut', 'boxplot', 'boxplot', 'round', 'corr', 'sub', 'to_csv', 'drop', 'astype', 'replace', 'replace', 'replace', 'copy', 'copy', 'std', 'max', 'where', 'where', 'sum', 'drop', 'drop', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'reset_index', 'quantile', 'quantile', 'clip', 'clip', 'apply', 'get_dummies', 'drop', 'describe', 'dropna', 'drop'] ['numpy', 'pandas', 'random', 'math', 'warnings', 'seaborn', 'matplotlib.pyplot', 'plotly.express', 're', 'optuna'] ['CatBoostClassifier', 'roc_auc_score', 'confusion_matrix', 'Style', 'Fore', 'train_test_split', 'StandardScaler', 'train_test_split', 'XGBClassifier', 'CatBoostClassifier', 'LGBMClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'LogisticRegression', 'BalancedRandomForestClassifier', 'KNeighborsClassifier', 'MLPClassifier', 'SVC', 'BaggingClassifier', 'AdaBoostClassifier', 'GaussianNB', 'MultinomialNB', 'BernoulliNB', 'StratifiedKFold', 'cross_val_score', 'cross_val_score', 'cross_val_predict', 'VotingClassifier', 'StackingClassifier']Dict:{'numpy': ['mean', 'quantile', 'max', 'sum', 'where', 'round', 'clip', 'isin', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'cut', 'concat', 'value_counts', 'get_dummies'], 'catboost': [], 'sklearn': [], 'random': [], 'math': [], 'warnings': [], 'colorama': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'plotly': [], 're': ['sub'], 'xgboost': ['apply'], 'lightgbm': [], 'imblearn': [], 'optuna': []} axis_0: 0, axis_1: 2
ieee-cis-blend.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'os'] []Dict:{'numpy': [], 'pandas': ['read_csv'], 'os': []} axis_0: 0, axis_1: 0
s3-e22-feature-engineering-simplest-solution.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'select_dtypes', 'value_counts', 'value_counts', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'replace', 'drop', 'select_dtypes', 'mode', 'fillna', 'select_dtypes', 'sum', 'isnull', 'get_dummies', 'drop', 'map', 'sort_values', 'items', 'mean', 'get_dummies', 'drop', 'map', 'mean', 'std', 'mean', 'std', 'mean', 'mean', 'get_dummies', 'read_csv', 'map', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'copy', 'warnings'] ['KNNImputer', 'OrdinalEncoder', 'LabelEncoder', 'train_test_split', 'StratifiedKFold', 'f1_score', 'accuracy_score', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier']Dict:{'numpy': ['mean', 'std', 'sum'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': [], 'seaborn': [], 'os': ['replace'], 'copy': [], 'sklearn': [], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': [], 'warnings': []} axis_0: 0, axis_1: 3
object-based-solution-for-dstl.py : ['read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'describe', 'unique', 'transpose', 'transpose', 'transpose', 'to_csv', 'array', 'array', 'max', 'stack', 'astype', 'round', 'array', 'astype', 'round', 'array', 'max', 'stack', 'unique', 'transpose', 'transpose', 'transpose', 'astype', 'astype', 'astype', 'max', 'unique', 'unique', 'to_csv', 'concat', 'read_csv', 'read_csv', 'get', 'unique', 'apply', 'apply', 'apply', 'merge', 'to_csv'] ['numpy', 'pandas', 'pandas', 'time', 'tifffile', 'numpy', 'warnings', 'shapely.wkt', 'shapely.affinity', 'cv2', 'rasterio.features', 'xgboost'] ['check_output', 'segutils', 'stats', 'MultiPolygon', 'Polygon', 'Counter', 'train_test_split', 'pyplot', 'colors']Dict:{'numpy': ['transpose', 'stack', 'max', 'round', 'unique', 'array'], 'pandas': ['read_csv', 'concat', 'unique', 'array', 'merge'], 'subprocess': [], 'rsgislib': [], 'time': [], 'tifffile': [], 'warnings': [], 'scipy': [], 'shapely': [], 'cv2': [], 'collections': ['get'], 'rasterio': [], 'sklearn': [], 'xgboost': [], 'matplotlib': []} axis_0: 4, axis_1: 0
how-to-use-chatgpt-in-a-competition-eda-part-1.py : ['read_csv', 'corr', 'drop', 'boxplot', 'boxplot', 'boxplot', 'corr', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'sum', 'isnull', 'sum', 'duplicated', 'where', 'boxplot', 'boxplot', 'boxplot', 'where', 'boxplot', 'boxplot', 'boxplot', 'select_dtypes', 'where', 'boxplot', 'boxplot', 'boxplot'] ['pandas', 'seaborn', 'matplotlib.pyplot', 'numpy'] ['stats']Dict:{'pandas': ['read_csv', 'isnull'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'scipy': [], 'numpy': ['where', 'sum']} axis_0: 0, axis_1: 0
feature-engineering-3-rv-aggregation.py : ['diff', 'sum', 'read_parquet', 'read_parquet', 'read_parquet', 'unique', 'isin', 'isin', 'isnull', 'merge', 'reset_index', 'agg', 'groupby', 'read_csv', 'head', 'merge', 'diff', 'sum', 'sum', 'abs', 'sum', 'abs', 'abs', 'shift', 'sum', 'abs', 'abs', 'shift', 'shift', 'abs', 'max', 'sum', 'sum', 'sum', 'sum', 'sum', 'apply', 'rolling', 'product', 'sum', 'sum', 'sum', 'sum', 'apply', 'rolling', 'product', 'sum'] ['matplotlib.pyplot', 'time', 'seaborn', 'numpy', 'pandas', 'stumpy', 'glob', 'os', 'gc', 'random'] ['range', 'defaultdict', 'display', 'HTML', 'Parallel', 'delayed', 'stats', 'gamma']Dict:{'builtins': [], 'collections': [], 'matplotlib': [], 'time': [], 'seaborn': [], 'numpy': ['product', 'max', 'abs', 'sum', 'unique', 'isin', 'diff'], 'pandas': ['read_csv', 'isnull', 'read_parquet', 'unique', 'merge'], 'stumpy': [], 'IPython': [], 'glob': [], 'os': [], 'gc': [], 'joblib': [], 'scipy': [], 'random': []} axis_0: 0, axis_1: 0
pubg-eda-and-feature-engineering-and-lightgbm.py : ['read_csv', 'sum', 'memory_usage', 'to_numeric', 'to_numeric', 'sum', 'memory_usage', 'drop', 'describe', 'sum', 'isna', 'dropna', 'drop', 'value_counts', 'apply', 'value_counts', 'copy', 'value_counts', 'quantile', 'max', 'min', 'corr', 'copy', 'agg', 'groupby', 'round', 'sum', 'memory_usage', 'round', 'sum', 'memory_usage', 'corr', 'corr', 'sample', 'sample', 'quantile', 'quantile', 'quantile', 'copy', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'corr', 'corr', 'reset_index', 'to_numeric', 'to_numeric', 'copy', 'insert', 'fillna', 'replace', 'insert', 'fillna', 'replace', 'insert', 'insert', 'fillna', 'replace', 'insert', 'fillna', 'replace', 'insert', 'fillna', 'replace', 'insert', 'insert', 'corr', 'read_csv', 'to_numeric', 'to_numeric', 'apply', 'value_counts', 'agg', 'groupby', 'reset_index', 'copy', 'insert', 'fillna', 'replace', 'insert', 'fillna', 'replace', 'insert', 'insert', 'fillna', 'replace', 'insert', 'fillna', 'replace', 'insert', 'fillna', 'replace', 'insert', 'insert', 'drop', 'drop', 'agg', 'groupby', 'explode', 'reset_index', 'round', 'where', 'where', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 'lightgbm', 'pickle'] ['preprocessing', 'StandardScaler', 'mean_squared_error', 'LabelEncoder', 'LGBMRegressor', 'LabelEncoder']Dict:{'pandas': ['isna', 'to_numeric', 'read_csv', 'value_counts'], 'numpy': ['quantile', 'max', 'sum', 'where', 'round', 'min', 'insert', 'copy'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': [], 'lightgbm': [], 'pickle': []} axis_0: 7, axis_1: 3
amex-features-the-best-of-both-worlds.py : ['groupby', 'astype', 'diff', 'read_parquet', 'drop', 'agg', 'groupby', 'join', 'reset_index', 'replace', 'replace', 'replace', 'agg', 'groupby', 'join', 'reset_index', 'read_csv', 'astype', 'astype', 'merge', 'merge', 'merge', 'read_parquet', 'agg', 'groupby', 'join', 'reset_index', 'replace', 'replace', 'replace', 'agg', 'groupby', 'join', 'reset_index', 'astype', 'astype', 'merge', 'merge', 'to_parquet', 'to_parquet', 'read_parquet', 'read_parquet', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'cumsum', 'sum', 'sum', 'sum', 'cumsum', 'sum', 'sum', 'sum', 'transform', 'round', 'round', 'astype', 'astype', 'to_csv', 'to_csv', 'read_csv', 'to_csv'] ['gc', 'os', 'joblib', 'random', 'warnings', 'itertools', 'scipy', 'numpy', 'pandas', 'lightgbm', 'warnings', 'os', 'pandas'] ['tqdm', 'combinations', 'LabelEncoder', 'StratifiedKFold', 'train_test_split']Dict:{'gc': [], 'os': ['replace'], 'joblib': [], 'random': [], 'warnings': [], 'itertools': [], 'scipy': [], 'numpy': ['transpose', 'sum', 'where', 'round', 'diff', 'array', 'cumsum'], 'pandas': ['read_parquet', 'array', 'merge', 'read_csv'], 'tqdm': [], 'lightgbm': [], 'sklearn': [], 'warnings;': []} axis_0: 0, axis_1: 0
the-fine-art-of-hyperparameter-tuning.py : ['groupby', 'astype', 'diff', 'read_parquet', 'drop', 'agg', 'groupby', 'join', 'reset_index', 'agg', 'groupby', 'join', 'reset_index', 'read_csv', 'astype', 'astype', 'merge', 'merge', 'merge', 'read_parquet', 'agg', 'groupby', 'join', 'reset_index', 'agg', 'groupby', 'join', 'reset_index', 'astype', 'astype', 'merge', 'merge', 'to_parquet', 'to_parquet', 'read_parquet', 'read_parquet', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'array', 'update', 'transform', 'round', 'round', 'astype', 'astype', 'update', 'to_csv', 'to_csv', 'update', 'transform', 'round', 'round', 'astype', 'astype', 'update', 'to_csv', 'to_csv', 'update', 'transform', 'round', 'round', 'astype', 'astype', 'to_csv', 'to_csv', 'read_csv', 'to_csv'] ['gc', 'itertools', 'scipy', 'numpy', 'pandas', 'warnings', 'os', 'gc', 'random', 'joblib', 'itertools', 'scipy', 'numpy', 'pandas', 'lightgbm', 'warnings'] ['tqdm', 'tqdm', 'combinations', 'LabelEncoder', 'STATUS_OK', 'Trials', 'fmin', 'hp', 'tpe', 'StratifiedKFold', 'train_test_split']Dict:{'gc': [], 'itertools': [], 'scipy': [], 'numpy': ['transpose', 'sum', 'where', 'round', 'diff', 'array', 'cumsum'], 'pandas': ['read_parquet', 'array', 'merge', 'read_csv'], 'tqdm': ['update'], 'warnings;': [], 'warnings': [], 'os': [], 'random': [], 'joblib': [], 'lightgbm': [], 'sklearn': [], 'hyperopt': []} axis_0: 0, axis_1: 0
tps-2022-01-starter.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'to_datetime', 'to_datetime', 'to_datetime', 'head', 'head', 'unique', 'value_counts', 'unique', 'value_counts', 'value_counts', 'apply', 'apply', 'unique', 'unique', 'apply', 'apply', 'unique', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'rename', 'merge', 'merge', 'apply', 'apply', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'sum', 'abs', 'abs', 'abs', 'to_csv'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot'] ['seasonal_decompose', 'train_test_split', 'GridSearchCV', 'LabelEncoder', 'XGBRegressor', 'LinearRegression', 'mean_squared_error', 'make_scorer']Dict:{'os': ['rename'], 'pandas': ['read_csv', 'value_counts', 'get_dummies', 'unique', 'merge', 'to_datetime'], 'numpy': ['abs', 'sum', 'unique'], 'matplotlib': [], 'statsmodels': [], 'sklearn': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 1
11th-place-solution-code.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'drop', 'head', 'count', 'nunique', 'sum', 'isnull', 'concat', 'drop', 'describe', 'count', 'nunique', 'sum', 'isnull', 'concat', 'drop', 'describe', 'count', 'nunique', 'sum', 'isnull', 'concat', 'drop', 'describe', 'drop', 'sub', 'sub', 'sub', 'concat', 'copy', 'pop', 'copy', 'pop', 'concat', 'drop', 'concat', 'mean', 'std', 'mean', 'std', 'copy', 'mean', 'mean', 'mean', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 're', 'optuna'] ['OneHotEncoder', 'MEstimateEncoder', 'GLMMEncoder', 'OrdinalEncoder', 'CatBoostEncoder', 'RepeatedStratifiedKFold', 'StratifiedKFold', 'KFold', 'ExtraTreesClassifier', 'RandomForestClassifier', 'GradientBoostingClassifier', 'HistGradientBoostingClassifier', 'VotingClassifier', 'StackingClassifier', 'AdaBoostClassifier', 'SVC', 'LinearSVC', 'BernoulliNB', 'GaussianNB', 'KNeighborsClassifier', 'LogisticRegression', 'RidgeClassifier', 'PLSRegression', 'MLPClassifier', 'mean_absolute_error', 'roc_auc_score', 'roc_curve', 'euclidean_distances', 'Pipeline', 'make_pipeline', 'BaseEstimator', 'TransformerMixin', 'ClassifierMixin', 'FunctionTransformer', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'ColumnTransformer', 'CalibratedClassifierCV', 'compute_class_weight', 'dendrogram', 'linkage', 'squareform', 'MultilabelStratifiedKFold', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier']Dict:{'numpy': ['mean', 'std', 'sum', 'copy'], 'pandas': ['concat', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 're': ['sub'], 'optuna': [], 'category_encoders': [], 'sklearn': [], 'scipy': [], 'iterstrat': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 0
automation-of-feature-engineering.py : ['read_csv', 'read_csv', 'head', 'sort_values', 'head', 'groupby', 'reset_index', 'mean'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] []Dict:{'numpy': ['mean'], 'pandas': ['read_csv'], 'seaborn': [], 'matplotlib': []} axis_0: 0, axis_1: 0
pss3e11-zoo-of-models.py : ['read_csv', 'read_csv', 'read_csv', 'tail', 'unique', 'sort_values', 'agg', 'groupby', 'tail', 'hist', 'concat', 'sort_values', 'agg', 'groupby', 'hist', 'reset_index', 'agg', 'groupby', 'concat', 'astype', 'astype', 'transform', 'astype', 'transform', 'drop_duplicates', 'sort_values', 'reset_index', 'set_index', 'mean', 'round', 'astype', 'astype', 'round', 'mean', 'drop_duplicates', 'sort_values', 'reset_index', 'map'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'os', 'gc', 'pickle', 'datetime', 'lightgbm', 'math', 'catboost', 'xgboost', 'warnings', 'tensorflow', 'tensorflow.keras.backend', 'keras_tuner'] ['MaxNLocator', 'dendrogram', 'TargetEncoder', 'Fore', 'Back', 'Style', 'Model', 'ReduceLROnPlateau', 'LearningRateScheduler', 'EarlyStopping', 'Dense', 'Input', 'Concatenate', 'plot_model', 'BaseEstimator', 'TransformerMixin', 'ClassifierMixin', 'clone', 'RepeatedKFold', 'KFold', 'make_pipeline', 'Pipeline', 'ColumnTransformer', 'PCA', 'DecisionTreeRegressor', 'StandardScaler', 'OneHotEncoder', 'OrdinalEncoder', 'PolynomialFeatures', 'FunctionTransformer', 'RandomForestRegressor', 'ExtraTreesRegressor', 'Ridge', 'RidgeCV', 'LinearRegression', 'LassoCV', 'LogisticRegression', 'SGDClassifier', 'GradientBoostingRegressor', 'HistGradientBoostingRegressor', 'VotingRegressor', 'mean_squared_log_error', 'mean_squared_error', 'euclidean_distances', 'cosine_distances', 'PartialDependenceDisplay', 'AgglomerativeClustering']Dict:{'pandas': ['concat', 'unique', 'read_csv'], 'numpy': ['mean', 'round', 'unique'], 'matplotlib': [], 'seaborn': [], 'os,': [], 'gc,': [], 'pickle,': [], 'datetime,': [], 'lightgbm,': [], 'math,': [], 'catboost,': [], 'xgboost,': [], 'warnings': [], 'scipy': [], 'category_encoders': [], 'colorama': [], 'tensorflow': [], 'keras_tuner': [], 'sklearn': []} axis_0: 4, axis_1: 1
survival-predict-eda-feature-selection-optuna-lgbm.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'info', 'info', 'head', 'sum', 'isnull', 'drop', 'drop', 'hist', 'head', 'fillna', 'mean', 'fillna', 'mean', 'sum', 'isnull', 'fillna', 'replace', 'fillna', 'mean', 'groupby', 'value_counts', 'head', 'sum', 'isnull', 'head', 'apply', 'head', 'drop', 'map', 'map', 'map', 'head', 'drop', 'sum', 'isnull', 'corr', 'drop', 'corr', 'drop', 'transform', 'transform', 'head', 'concat', 'head', 'sort_values', 'head', 'drop', 'read_csv', 'head'] ['numpy', 'pandas', 'os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'matplotlib.pyplot', 'optuna', 'lightgbm', 'lightgbm'] ['LabelEncoder', 'StandardScaler', 'LabelEncoder', 'train_test_split', 'SelectKBest', 'f_regression', 'mutual_info_regression', 'classification_report', 'roc_auc_score', 'make_scorer', 'accuracy_score', 'roc_curve', 'sqrt']Dict:{'numpy': ['mean', 'info', 'sum'], 'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'os': ['replace'], 'sklearn': [], 'matplotlib': ['hist'], 'seaborn': [], 'optuna': [], 'math': [], 'lightgbm': []} axis_0: 0, axis_1: 8
basic-feature-engineering-and-modeling.py : ['read_csv', 'read_csv', 'min', 'concat', 'join', 'set_index', 'read_csv', 'sum', 'fillna', 'ffill', 'mean', 'std', 'min', 'max', 'quantile', 'median', 'abs', 'mean', 'abs', 'sum', 'isna', 'replace', 'sum', 'isna', 'replace', 'var', 'var', 'drop', 'drop', 'hist', 'hist', 'sort_values', 'abs', 'corrwith', 'sort_values', 'abs', 'corrwith', 'mean', 'std', 'mean', 'std', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'random', 'os'] ['stats', 'signal', 'fft', 'Lasso', 'LinearSVR', 'cross_val_score', 'RepeatedKFold', 'TransformedTargetRegressor', 'Pipeline', 'StandardScaler', 'Pool', 'biweight_location', 'biweight_scale']Dict:{'numpy': ['mean', 'median', 'quantile', 'max', 'var', 'abs', 'sum', 'min', 'std'], 'pandas': ['concat', 'isna', 'read_csv'], 'matplotlib': ['hist'], 'scipy': [], 'sklearn': [], 'multiprocessing': [], 'astropy': [], 'random': [], 'os': ['replace'], '=': [], 'X': [], '!=': [], '0]': []} axis_0: 1, axis_1: 2
ensembling-for-regression-top-6-on-lb.py : ['join', 'read_csv', 'read_csv', 'head', 'describe', 'drop', 'drop', 'drop', 'skew', 'skew', 'corr', 'concat', 'concat', 'concat', 'concat', 'concat', 'boxplot', 'concat', 'boxplot', 'concat', 'concat', 'reset_index', 'concat', 'drop', 'sort_values', 'sum', 'isnull', 'drop', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'drop', 'astype', 'fillna', 'apply', 'astype', 'astype', 'transform', 'sort_values', 'apply', 'dropna', 'head', 'get_dummies', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'to_csv'] ['numpy', 'pandas', 'os', 'warnings', 'seaborn', 'matplotlib.pyplot', 'xgboost', 'lightgbm'] ['StandardScaler', 'stats', 'norm', 'LabelEncoder', 'norm', 'skew', 'boxcox1p', 'KFold', 'cross_val_score', 'train_test_split', 'GradientBoostingRegressor', 'Ridge', 'ElasticNet', 'Lasso', 'cross_val_score', 'make_pipeline', 'RobustScaler', 'KernelRidge', 'mean_squared_error']Dict:{'numpy': ['mean', 'median', 'std', 'sum'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'os': [], 'sklearn': [], 'scipy': [], 'warnings': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'xgboost': [], 'lightgbm': []} axis_0: 0, axis_1: 10
3250feats-532-feats-using-shap-lb-0-436.py : ['read_csv', 'read_csv', 'head', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'max', 'max', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'value_counts', 'value_counts', 'value_counts', 'fillna', 'fillna', 'value_counts', 'fillna', 'fillna', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'max', 'max', 'apply', 'apply', 'apply', 'apply', 'value_counts', 'value_counts', 'drop', 'drop', 'sum', 'replace', 'fillna', 'replace', 'fillna', 'replace', 'fillna', 'replace', 'fillna', 'replace', 'fillna', 'replace', 'fillna', 'replace', 'fillna', 'replace', 'fillna', 'replace', 'fillna', 'replace', 'fillna', 'replace', 'fillna', 'replace', 'fillna', 'value_counts', 'value_counts', 'drop', 'drop', 'array', 'array', 'sum', 'max', 'min', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'reset_index', 'reset_index', 'merge', 'merge', 'fillna', 'fillna', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'merge', 'merge', 'reset_index', 'sum', 'groupby', 'reset_index', 'sum', 'groupby', 'merge', 'merge', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'query', 'replace', 'replace', 'drop', 'drop', 'corr', 'sort_values', 'head', 'tail', 'value_counts', 'unique', 'drop', 'unique', 'mean', 'mean', 'array', 'concat', 'reset_index', 'sort_values', 'mean', 'groupby', 'concat', 'reset_index', 'sort_values', 'mean', 'groupby', 'reset_index', 'sort_values', 'mean', 'groupby', 'unique', 'copy', 'copy', 'unique', 'mean', 'mean', 'array', 'concat', 'reset_index', 'sort_values', 'mean', 'groupby', 'reset_index', 'sort_values', 'mean', 'groupby', 'astype', 'round', 'mean', 'array', 'to_csv', 'unique', 'astype', 'round', 'mean', 'array', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'itertools', 'lightgbm', 'xgboost', 'shap', 'featuretools', 'warnings', 'time'] ['LabelEncoder', 'MinMaxScaler', 'StandardScaler', 'OneHotEncoder', 'StratifiedKFold', 'train_test_split', 'ShuffleSplit', 'f1_score', 'XGBClassifier', 'tqdm']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'array', 'merge'], 'numpy': ['mean', 'max', 'sum', 'round', 'min', 'unique', 'array', 'copy'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'itertools': ['count', 'groupby'], 'lightgbm': [], 'xgboost': ['apply'], 'shap': [], 'tqdm': [], 'featuretools': [], 'warnings': [], '': [], 'time': []} axis_0: 3, axis_1: 15
jiggsaw-toxic-comments-eda-twitch-stream.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'value_counts', 'head', 'value_counts', 'reset_index', 'concat', 'rename', 'astype', 'fillna', 'merge', 'value_counts', 'value_counts', 'value_counts', 'head', 'rename', 'value_counts', 'tail', 'rename', 'value_counts', 'value_counts', 'value_counts', 'apply', 'join', 'sort_index', 'value_counts', 'value_counts', 'mean', 'isin', 'to_dict', 'value_counts', 'map', 'map', 'value_counts', 'tail', 'value_counts', 'query', 'tail', 'value_counts', 'query', 'rename', 'merge', 'value_counts', 'value_counts', 'query', 'rename', 'merge', 'value_counts', 'value_counts', 'query', 'head', 'value_counts', 'join', 'head', 'value_counts', 'join', 'read_csv', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'sub', 'join', 'transform', 'transform', 'transform', 'transform', 'copy', 'rank', 'to_csv', 'copy', 'rank', 'to_csv', 'copy', 'mean', 'rank', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pylab', 're'] ['cycle', 'WordCloud', 'STOPWORDS', 'ImageColorGenerator', 'BeautifulSoup', 'tqdm', 'TfidfVectorizer', 'CountVectorizer', 'LinearRegression', 'LogisticRegression', 'svm', 'hstack']Dict:{'pandas': ['concat', 'merge', 'read_csv', 'value_counts'], 'numpy': ['mean', 'isin', 'copy'], 'matplotlib': ['mean', 'isin', 'copy'], 'itertools': [], 'wordcloud': [], 're': ['sub'], 'bs4': [], 'tqdm': [], 'sklearn': [], 'scipy': []} axis_0: 0, axis_1: 2
xgboost-optuna-hyperparameter-tunning.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'drop', 'reset_index', 'concat', 'drop', 'select_dtypes', 'sort_values', 'apply', 'skew', 'boxplot', 'info', 'skew', 'abs', 'corr', 'bool', 'mean', 'head', 'drop', 'concat', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'plotly.express', 'plotly.graph_objects', 'plotly.figure_factory', 'matplotlib.pyplot', 'seaborn', 'optuna', 'seaborn', 'matplotlib.pyplot', 'matplotlib.gridspec', 'matplotlib.style'] ['make_subplots', 'ProfileReport', 'metrics', 'stats', 'deepcopy', 'RandomForestRegressor', 'XGBRegressor', 'GridSearchCV', 'KFold', 'cross_val_score', 'Trial', 'visualization', 'train_test_split', 'f1_score', 'confusion_matrix', 'accuracy_score', 'mean_squared_error', 'boxcox1p', 'boxcox_normmax', 'stats']Dict:{'numpy': ['mean', 'info', 'abs'], 'pandas': ['concat', 'read_csv'], 'os': [], 'plotly': [], 'matplotlib': ['boxplot'], 'pandas_profiling': [], 'seaborn': ['boxplot'], 'sklearn': [], 'scipy': ['skew'], 'copy': [], 'xgboost': ['apply'], 'optuna': []} axis_0: 1, axis_1: 4
feature-engineering-with-gaussian-process.py : ['min', 'max', 'mean', 'read_csv', 'read_csv', 'read_csv', 'astype', 'unique', 'unique', 'sample', 'concat', 'mean', 'std', 'min', 'max', 'concat', 'mean', 'std', 'max', 'min', 'min', 'max', 'mean', 'skew', 'max', 'min', 'mean', 'rolling', 'diff', 'max', 'min', 'mean', 'head', 'merge', 'dropna', 'replace', 'replace', 'where', 'abs', 'where', 'abs'] ['pandas', 'pandas.io.sql', 'numpy', 'numpy.random', 'gc', 'multiprocessing', 'os', 'sys', 'pickle', 'math', 'scipy.stats', 're', 'matplotlib', 'matplotlib.pyplot', 'matplotlib.cm', 'multiprocessing', 'seaborn', 'celerite', 'numpy.random', 'pickle'] ['defaultdict', 'glob', 'datetime', 'Path', 'pearsonr', 'combinations', 'font_manager', 'rc', 'animation', 'Image', 'Parallel', 'delayed', 'display', 'minimize', 'terms', 'Model']Dict:{'pandas': [], 'numpy': ['sample'], 'gc': [], 'multiprocessing': [], 'os': ['replace'], 'sys': [], 'pickle': [], 'collections': [], 'glob': [], 'math': [], 'datetime': [], 'pathlib': ['replace'], 'scipy': [], 're': [], 'itertools': [], 'matplotlib': [], 'IPython': [], 'joblib': [], 'seaborn': [], 'celerite': []} axis_0: 0, axis_1: 0
lgb-fe-groupkfold-cv-xgb.py : ['read_csv', 'read_csv', 'array', 'unique', 'isin', 'isin', 'fillna', 'to_datetime', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'astype', 'map', 'factorize', 'concat', 'mean', 'groupby', 'map', 'sort_values', 'mean', 'groupby', 'mean', 'median', 'sum', 'sum', 'fillna', 'sum', 'isnull', 'to_csv', 'concat', 'mean', 'groupby', 'mean', 'median', 'sum', 'sum', 'fillna', 'sum', 'isnull', 'to_csv', 'concat', 'sum', 'groupby', 'reset_index', 'concat', 'mean', 'groupby', 'map', 'sort_values', 'to_csv'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'time', 'warnings', 'lightgbm', 'warnings'] ['mean_squared_error', 'SettingWithCopyWarning', 'GroupKFold', 'GridSearchCV', 'XGBRegressor']Dict:{'os': [], 'pandas': [], 'numpy': ['mean', 'median', 'sum', 'unique', 'isin', 'array'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'gc': [], 'time': [], 'warnings': [], 'lightgbm': [], '=': [], 'pd': [], 'np': [], "importances['feature']": [], 'xgboost': []} axis_0: 2, axis_1: 12
ncaa-starter-the-simpler-the-better.py : ['read_csv', 'head', 'read_csv', 'drop', 'head', 'count', 'groupby', 'rename', 'reset_index', 'count', 'groupby', 'rename', 'reset_index', 'reset_index', 'mean', 'groupby', 'rename', 'reset_index', 'mean', 'groupby', 'rename', 'rename', 'reset_index', 'count', 'groupby', 'rename', 'reset_index', 'count', 'groupby', 'reset_index', 'sort_values', 'drop_duplicates', 'concat', 'merge', 'merge', 'merge', 'merge', 'fillna', 'drop', 'read_csv', 'drop', 'apply', 'head', 'copy', 'reset_index', 'head', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'sub', 'apply', 'apply', 'head', 'drop', 'rename', 'merge', 'drop', 'rename', 'merge', 'head', 'reset_index', 'mean', 'groupby', 'head', 'copy', 'copy', 'rename', 'rename', 'concat', 'head', 'read_csv', 'apply', 'apply', 'apply', 'head', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'apply', 'apply', 'drop', 'rename', 'merge', 'drop', 'rename', 'merge', 'head', 'astype', 'min', 'max', 'unique', 'copy', 'reset_index', 'copy', 'reset_index', 'copy', 'min', 'max', 'min', 'min', 'max', 'min', 'mean', 'mean', 'copy', 'to_csv', 'head'] ['os', 're', 'sklearn', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] ['Counter', '*', '*', '*']Dict:{'os': ['rename'], 're': ['sub'], 'sklearn': [], 'numpy': ['mean', 'max', 'min', 'unique', 'copy'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'collections': ['copy']} axis_0: 0, axis_1: 16
housepriceprediction.py : ['join', 'read_csv', 'read_csv', 'info', 'corr', 'drop', 'corr', 'corr', 'corr', 'head', 'sum', 'isna', 'sum', 'isna', 'get_dummies', 'join', 'transform', 'head', 'get_dummies', 'reindex', 'transform', 'sum', 'isna', 'fillna', 'median', 'fillna', 'mode', 'to_csv'] ['numpy', 'pandas', 'os', 'seaborn', 'matplotlib.pyplot'] ['preprocessing', 'train_test_split', 'r2_score', 'r2_score', 'mean_absolute_error', 'mean_squared_error', 'LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'RandomForestRegressor', 'SVR', 'XGBRegressor', 'PolynomialFeatures', 'mean_squared_log_error', 'SVR', 'XGBRegressor']Dict:{'numpy': ['median', 'info', 'sum'], 'pandas': ['isna', 'get_dummies', 'read_csv'], 'os': [], 'seaborn': [], 'matplotlib': [], '=': [], 'list(corr_matrix[\'SalePrice\'][(corr_matrix["SalePrice"]': [], '>': [], '0': [], '|': [], '(corr_matrix["SalePrice"]': [], '<': [], '-0': [], 'sklearn': [], 'xgboost': [], 'math': [], 'tensorflow': []} axis_0: 0, axis_1: 1
pandas-tips-tricks-and-more.py : ['read_csv', 'head', 'read_csv', 'tail', 'any', 'isnull', 'nunique', 'nunique', 'get_dummies', 'head', 'select_dtypes', 'select_dtypes', 'head', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'concat', 'median', 'fillna', 'head', 'sum', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'drop', 'dropna', 'head', 'astype', 'describe', 'sum', 'sum', 'isnull', 'drop'] ['numpy', 'pandas', 'os', 'warnings', 'matplotlib.pyplot', 'seaborn'] ['pprint', 'make_regression']Dict:{'numpy': ['median', 'sum', 'any'], 'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'os': [], 'pprint': [], 'warnings': [], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 1, axis_1: 2
your-1st-data-science-project-simple-explanation.py : ['read_csv', 'read_csv', 'value_counts', 'head', 'head', 'info', 'sum', 'isna', 'isna', 'mean', 'isna', 'isna', 'value_counts', 'isna', 'sum', 'isna', 'boxplot', 'boxplot', 'corr', 'select_dtypes', 'select_dtypes', 'value_counts', 'value_counts', 'isna', 'mean', 'isna', 'isna', 'isna', 'astype', 'where', 'astype', 'map', 'astype', 'map', 'apply', 'astype', 'fillna', 'drop', 'read_csv', 'read_csv', 'info', 'select_dtypes', 'drop', 'select_dtypes', 'mean', 'std', 'head', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'xgboost'] ['Image', 'LabelEncoder', 'model_selection']Dict:{'IPython': [], 'pandas': ['isna', 'read_csv', 'value_counts'], 'numpy': ['mean', 'sum', 'where', 'info', 'std'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 2
kaggle-tabular-feb-challenge-feature-engineering.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'drop', 'select_dtypes', 'transform', 'drop', 'select_dtypes', 'mean', 'sort_values', 'concat', 'join', 'join', 'cumsum', 'join', 'value_counts', 'sample', 'drop', 'drop', 'transform'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'optuna'] ['XGBRegressor', 'train_test_split', 'cross_val_score', 'mutual_info_regression', 'LabelEncoder', 'PCA', 'MEstimateEncoder']Dict:{'numpy': ['mean', 'cumsum'], 'pandas': ['concat', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'os': [], 'xgboost': [], 'sklearn': ['transform'], 'category_encoders': [], 'optuna': []} axis_0: 0, axis_1: 3
feature-engineering-lgb-model.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'concat', 'astype', 'astype', 'head', 'sort_values', 'groupby', 'reset_index', 'drop_duplicates', 'items', 'reset_index', 'agg', 'rename', 'merge', 'groupby', 'join', 'shift', 'groupby', 'join', 'mean', 'rolling', 'shift', 'groupby', 'join', 'median', 'rolling', 'shift', 'groupby', 'join', 'mean', 'ewm', 'shift', 'get_dummies', 'sample', 'isin', 'isin', 'isin', 'abs', 'abs', 'abs', 'sum', 'sample', 'sort_values', 'sum', 'head', 'astype', 'to_csv', 'head', 'head', 'min', 'max'] ['os', 'gc', 'time', 'numpy', 'pandas', 'lightgbm'] ['train_test_split']Dict:{'os': ['rename'], 'gc': [], 'time': [], 'numpy': ['mean', 'median', 'max', 'abs', 'sum', 'min', 'isin'], 'pandas': ['concat', 'get_dummies', 'merge', 'read_csv'], 'sklearn': [], 'lightgbm': []} axis_0: 2, axis_1: 0
micro-challenge-vectorizers.py : ['concat', 'drop', 'read_csv', 'read_csv', 'mean', 'copy', 'to_csv', 'fillna'] ['pandas', 'numpy', 'scipy'] ['Parallel', 'delayed', 'LinearSVC', 'LogisticRegression', 'RidgeClassifier', 'StratifiedKFold', 'cross_val_score', 'f1_score', 'CountVectorizer']Dict:{'pandas': ['concat', 'read_csv'], 'numpy': ['mean', 'copy'], 'joblib': [], 'sklearn': [], 'scipy': []} axis_0: 1, axis_1: 1
extensive-eda-of-deal-probability.py : ['read_csv', 'info', 'sum', 'isnull', 'sort_values', 'unique', 'apply', 'apply', 'apply', 'head', 'cut', 'value_counts', 'boxplot', 'dropna', 'value_counts', 'boxplot', 'boxplot', 'crosstab', 'boxplot', 'boxplot', 'crosstab', 'boxplot', 'boxplot', 'crosstab', 'isin', 'isin', 'value_counts', 'isin', 'boxplot', 'isin', 'boxplot', 'isin', 'boxplot', 'crosstab', 'head', 'value_counts', 'head', 'isin', 'apply', 'boxplot', 'boxplot', 'crosstab', 'value_counts', 'crosstab', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'mean', 'apply', 'mean', 'map', 'map', 'map', 'map', 'join', 'astype', 'join', 'astype', 'join', 'astype', 'value_counts', 'value_counts', 'boxplot', 'isin', 'boxplot', 'isin', 'crosstab', 'isin', 'isin', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'sum', 'groupby'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'string', 're', 'nltk', 'spacy', 'squarify'] ['pos_tag', 'WordNetLemmatizer', 'word_tokenize', 'TweetTokenizer', 'stopwords', 'WordCloud', 'STOPWORDS']Dict:{'numpy': ['mean', 'sum', 'unique', 'isin', 'info'], 'pandas': ['read_csv', 'isnull', 'cut', 'value_counts', 'unique', 'crosstab'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'string': [], 're': [], '': [], '#for': [], 'any': [], 'necessary': [], 'regex': [], 'nltk': [], 'spacy': [], 'wordcloud': [], 'squarify': []} axis_0: 0, axis_1: 0
simple-eda-and-baseline-in-2mintues.py : ['read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'select_dtypes', 'corr', 'drop', 'drop', 'set_index', 'mean', 'sort_values', 'apply', 'mean'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'math', 'warnings'] ['HTML', 'tqdm', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'LGBMRegressor', 'XGBRegressor', 'CatBoostRegressor', 'Style', 'Fore', 'mean_absolute_error']Dict:{'IPython': [], 'pandas': ['read_csv', 'isnull'], 'numpy': ['transpose', 'sum', 'mean'], 'matplotlib': [], 'seaborn': [], 'gc': [], 'tqdm': [], 'math': [], 'sklearn': [], 'warnings': [], 'lightgbm': [], 'xgboost': ['apply'], 'catboost': [], 'colorama': [], '=': [], 'list()': []} axis_0: 0, axis_1: 2
updated-mix-model-with-mxtend-gp.py : ['array', 'abs', 'mean', 'mean', 'std', 'max', 'min', 'quantile', 'quantile', 'quantile', 'quantile', 'max', 'abs', 'mean', 'abs', 'std', 'abs', 'head', 'read_csv', 'read_csv', 'mean', 'std', 'max', 'min', 'quantile', 'quantile', 'quantile', 'quantile', 'max', 'abs', 'mean', 'abs', 'std', 'abs', 'transpose', 'transform', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'gc', 'os', 'matplotlib.pyplot'] ['stacking_regression', 'tqdm', 'StandardScaler', 'NuSVR', 'LinearSVR', 'SVR', 'mean_absolute_error', 'r2_score', 'make_scorer', 'GridSearchCV', 'ensemble', 'KernelRidge', 'LinearRegression', 'BayesianRidge', 'CatBoostRegressor', 'LGBMRegressor', 'accuracy_score', 'StackingRegressor']Dict:{'numpy': ['mean', 'transpose', 'quantile', 'max', 'abs', 'array', 'min', 'std'], 'pandas': ['array', 'read_csv'], 'seaborn': [], 'gc': [], 'os': [], 'mlxtend': [], 'matplotlib': [], 'tqdm': [], 'sklearn': [], 'catboost': [], 'lightgbm': []} axis_0: 0, axis_1: 0
gb-vpp-why-so-serious.py : ['read_csv', 'head', 'read_csv', 'head', 'cumsum', 'groupby', 'cumsum', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'cumsum', 'groupby', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'shift', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'to_numpy', 'drop', 'drop', 'transform', 'squeeze', 'squeeze', 'squeeze', 'squeeze', 'read_csv', 'to_csv'] ['gc', 'numpy', 'pandas', 'tensorflow'] ['KFold', 'RobustScaler', 'mean_absolute_error', 'plot_model', 'Model', 'load_model', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau', 'Bidirectional', 'LSTM', 'Dense', 'Dropout', 'Input', 'Concatenate', 'Add', 'GRU']Dict:{'gc': [], 'numpy': ['squeeze', 'cumsum'], 'pandas': ['get_dummies', 'read_csv'], 'sklearn': [], 'tensorflow': []} axis_0: 0, axis_1: 2
wids-2023-xgboost-catboost-sc-1-18.py : ['join', 'read_csv', 'read_csv', 'copy', 'head', 'head', 'info', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'mean', 'sort_values', 'sum', 'isnull', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'describe', 'drop', 'sort_values', 'abs', 'head', 'sort_values', 'to_csv', 'abs', 'head', 'sort_values', 'copy', 'to_csv', 'copy', 'to_csv'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost'] ['train_test_split', 'mean_squared_error', 'CatBoostRegressor', 'mean_squared_error']Dict:{'numpy': ['mean', 'abs', 'sum', 'info', 'copy'], 'pandas': ['read_csv', 'isnull'], 'os': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'xgboost': [], 'catboost': []} axis_0: 0, axis_1: 7
predict-sales-prices-and-practice-feature-engineer.py : ['read_csv', 'read_csv', 'concat', 'head', 'sum', 'any', 'isnull', 'value_counts', 'value_counts', 'value_counts', 'median', 'groupby', 'value_counts', 'copy', 'hist', 'describe', 'corr', 'value_counts', 'any', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'median', 'groupby', 'copy', 'any', 'value_counts', 'value_counts', 'where', 'isin', 'drop', 'get_dummies', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'concat', 'round', 'apply', 'fillna', 'median', 'quantile', 'quantile', 'any', 'boxplot', 'value_counts', 'head', 'describe', 'median', 'quantile', 'quantile', 'quantile', 'quantile', 'head', 'describe', 'apply', 'apply', 'head', 'notnull', 'isnull', 'drop', 'mean', 'drop', 'drop', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'warnings'] ['LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'mean_squared_error', 'r2_score', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'ConvergenceWarning', 'CatBoostRegressor']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'notnull'], 'numpy': ['mean', 'median', 'quantile', 'any', 'sum', 'where', 'round', 'isin', 'copy'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'sklearn': [], 'warnings': [], 'catboost': []} axis_0: 1, axis_1: 5
blending-nn-and-lgbm-rf.py : ['join', 'read_csv', 'read_csv', 'drop_duplicates', 'head', 'isna', 'clip', 'apply', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'apply', 'isna', 'replace', 'apply', 'isna', 'apply', 'isna', 'apply', 'apply', 'isna', 'apply', 'isna', 'replace', 'replace', 'replace', 'apply', 'isna', 'replace', 'apply', 'isna', 'replace', 'replace', 'apply', 'astype', 'rename', 'merge', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'map', 'apply', 'merge', 'apply', 'merge', 'reset_index', 'sort_values', 'sort_values', 'sort_values', 'apply', 'apply', 'apply', 'apply', 'drop', 'merge', 'apply', 'apply', 'rename', 'merge', 'apply', 'reset_index', 'agg', 'groupby', 'merge', 'apply', 'reset_index', 'agg', 'groupby', 'abs', 'abs', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'isna', 'replace', 'apply', 'isna', 'apply', 'isna', 'apply', 'apply', 'isna', 'apply', 'isna', 'replace', 'replace', 'replace', 'apply', 'isna', 'replace', 'apply', 'isna', 'replace', 'replace', 'apply', 'astype', 'apply', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'drop_duplicates', 'fillna', 'merge', 'merge', 'merge', 'merge', 'copy', 'drop', 'corr', 'nunique', '__init__', 'clip', 'cumsum', 'clip', 'cumsum', 'sum', 'sum', 'round', 'clip', 'cumsum', 'clip', 'cumsum', 'sum', 'sum', 'round', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'head', 'sort_values', 'concat', 'rename', 'sort_values', 'mean', 'mean', 'mean'] ['os', 'numpy', 'pandas', 'sklearn.metrics', 'matplotlib.pyplot', 'time', 'lightgbm', 'keras.backend', 're', 'codecs', 'datetime', 'warnings', 'matplotlib.pyplot', 'seaborn', 'os'] ['RandomForestRegressor', 'StandardScaler', 'train_test_split', 'KFold', 'Dense', 'Input', 'Flatten', 'concatenate', 'Dropout', 'Lambda', 'BatchNormalization', 'LeakyReLU', 'PReLU', 'ELU', 'ThresholdedReLU', 'Concatenate', 'Model', 'EarlyStopping', 'ModelCheckpoint', 'Adam', 'binary_crossentropy', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau', 'Callback', 'to_categorical', 'f1_score']Dict:{'os': ['rename', 'replace'], 'numpy': ['mean', 'abs', 'sum', 'round', 'clip', 'cumsum', 'copy'], 'pandas': ['concat', 'merge', 'isna', 'read_csv'], 'sklearn': ['__init__'], 'matplotlib': [], 'time': [], 'lightgbm': [], 'keras': ['__init__'], '': [], 're': [], 'codecs': [], 'datetime': [], 'warnings': [], 'seaborn': []} axis_0: 4, axis_1: 20
text-representations.py : ['read_csv', 'head', 'info', 'drop', 'head', 'sub', 'join', 'map', 'head', 'array', 'head', 'transform', 'transform', 'astype', 'transform', 'transform', 'transform', 'transform', 'array', 'array'] ['pandas', 'numpy', 'nltk', 're', 'os', 'random', 'matplotlib.pyplot', 'seaborn', 'matplotlib.pyplot', 'matplotlib.cm'] ['CountVectorizer', 'stopwords', 'SnowballStemmer', 'RegexpTokenizer', 'CountVectorizer', 'CountVectorizer', 'CountVectorizer', 'CountVectorizer', 'TfidfVectorizer', 'Word2Vec', 'KeyedVectors', 'common_texts', 'Word2Vec', 'glove2word2vec', 'KeyedVectors', 'load_facebook_model', 'FastText', 'KeyedVectors', 'FastText', 'common_texts', 'TSNE']Dict:{'pandas': ['array', 'read_csv'], 'numpy': ['info', 'array'], 'nltk': [], 're': ['sub'], '': [], 'os': [], 'random': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'gensim': []} axis_0: 0, axis_1: 0
1-solution-lstm-cnn-transformer-1-fold.py : ['cumsum', 'groupby', 'diff', 'fillna', 'mask', 'cumsum', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'read_csv', 'read_csv', 'array', 'to_numpy', 'drop', 'drop', 'array', 'transform', '__init__', 'astype', 'astype', 'astype', '__init__', 'astype', '__init__', '__init__', 'squeeze', 'mean', 'eval', 'mean', 'sum', 'abs', 'sum', 'read_csv', 'round', 'clip', 'to_csv'] ['pandas', 'numpy', 'time', 'numpy', 'random', 'torch'] ['tqdm', 'RobustScaler', 'normalize', 'KFold', 'Dataset', 'DataLoader', 'nn', 'functional', 'Ranger']Dict:{'pandas': ['get_dummies', 'array', 'eval', 'read_csv'], 'numpy': ['mean', 'squeeze', 'abs', 'sum', 'round', 'clip', 'diff', 'array', 'cumsum'], 'tqdm': ['__init__'], 'time': [], 'sklearn': ['__init__'], 'torch': [], 'random': [], 'pytorch_ranger': []} axis_0: 0, axis_1: 2
jane-tf-keras-lstm.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'info', 'sample', 'sum', 'sum', 'isnull', 'sum', 'sum', 'sum', 'isnull', 'value_counts', 'value_counts', 'array', 'min', 'max', 'value_counts', 'sum', 'apply', 'groupby', 'sum', 'isnull', 'query', 'query', 'query', 'any', 'isnull', 'describe', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'max', 'min', 'min', 'astype', 'info', 'sum', 'sum', 'isnull', 'astype', 'mean', 'mean', 'std', 'info', 'squeeze'] ['numpy', 'pandas', 'seaborn', 'tensorflow', 'datatable', 'missingno', 'gc', 'warnings', 'janestreet'] ['pyplot', 'tqdm']Dict:{'numpy': ['mean', 'squeeze', 'any', 'max', 'sum', 'array', 'min', 'info', 'std'], 'pandas': ['isnull', 'array', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': ['boxplot'], 'tensorflow': ['squeeze'], 'datatable': [], 'missingno': [], 'gc': [], 'warnings': [], 'tqdm': [], 'janestreet': []} axis_0: 2, axis_1: 3
writing-processes-to-quality-0-584.py : ['read_csv', 'read_csv', 'read_csv', 'copy', 'value_counts', 'unique', 'merge', 'transform', 'sum', 'sum', 'sum', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'merge', 'merge', 'quantile', 'quantile', 'kurt', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', '__len__', '__len__', 'any', 'isna', 'mode', 'fillna', 'any', 'isna', 'mode', 'fillna', 'any', 'isna', 'any', 'isna', 'mean', 'sort_values', 'mean', 'head', 'mean', 'to_csv'] ['numpy', 'pandas', 'gc', 'os', 'itertools', 'pickle', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'warnings', 'os', 'gc', 're', 'random', 'pprint', 'time', 'copy', 'seaborn', 'lightgbm', 'xgboost', 'catboost', 'optuna'] ['train_test_split', 'TfidfVectorizer', 'LinearRegression', 'mean_absolute_error', 'mean_squared_error', 'CountVectorizer', 'MultinomialNB', 'accuracy_score', 'choice', 'choices', 'reduce', 'tqdm', 'cycle', 'Counter', 'reduce', 'cycle', 'stats', 'skew', 'kurtosis', 'metrics', 'model_selection', 'preprocessing', 'linear_model', 'ensemble', 'decomposition', 'tree', 'BertTokenizer', 'Counter', 'defaultdict', 'tqdm', 'LabelEncoder', 'PowerTransformer', 'RobustScaler', 'FunctionTransformer', 'KFold', 'StratifiedKFold', 'GroupKFold', 'train_test_split', 'TfidfVectorizer', 'TruncatedSVD', 'PCA', 'GradientBoostingRegressor', 'HistGradientBoostingRegressor', 'RandomForestRegressor', 'ExtraTreesRegressor', 'AdaBoostRegressor', 'SVR', 'Pipeline', 'KMeans', 'Lasso', 'Ridge', 'ElasticNet', 'KNeighborsRegressor', 'mean_squared_error', 'SimpleImputer', 'defaultdict', 'LabelEncoder']Dict:{'numpy': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'min', 'unique', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'sklearn': ['transform'], 'gc': [], 'os': ['rename', 'replace'], 'itertools': [], 'pickle': [], 'random': [], 'functools': [], 'tqdm': ['__len__'], 'seaborn': [], 'matplotlib': [], 'collections': ['items', 'keys', '__len__', 'copy'], 'scipy': [], 'transformers': [], 'warnings': [], 're': [], 'pprint': [], 'time': [], 'copy': ['copy'], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'optuna': []} axis_0: 2, axis_1: 9
features-previous-application-data-open-solution.py : ['read_csv', 'read_csv', 'head', 'groupby', 'join', 'merge', 'rename', 'reset_index', 'agg', 'head', 'corr', 'sort_values', 'unique', 'sort_values', 'reset_index', 'nunique', 'groupby', 'rename', 'merge', 'astype', 'reset_index', 'last', 'groupby', 'merge', 'astype', 'reset_index', 'last', 'groupby', 'merge', 'tail', 'groupby', 'reset_index', 'mean', 'groupby', 'rename', 'merge', 'reset_index', 'mean', 'groupby', 'rename', 'merge', 'reset_index', 'mean', 'groupby', 'rename', 'merge', 'head', 'merge', 'corr', 'sort_values'] ['os', 'pandas', 'seaborn'] ['joblib', 'tqdm_notebook']Dict:{'os': ['rename'], 'pandas': ['merge', 'unique', 'read_csv'], 'seaborn': [], 'sklearn': [], 'tqdm': []} axis_0: 0, axis_1: 0
housing-prices2-xgboost-gridsearch.py : ['update', 'join', 'read_csv', 'read_csv', 'dropna', 'drop', 'nunique', 'sum', 'isnull', 'value_counts', 'describe', 'corr', 'corr', 'sum', 'isnull', 'sum', 'isnull', 'rename', 'sort_values', 'sum', 'sum', 'isnull', 'drop', 'drop', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'select_dtypes', 'value_counts', 'value_counts', 'value_counts', 'drop', 'drop', 'concat', 'concat', 'sample', 'corrwith', 'notnull', 'notnull', 'notnull', 'notnull', 'replace', 'sample', 'select_dtypes', 'sort_values', 'nunique', 'fillna', 'unique', 'replace', 'replace', 'fillna', 'replace', 'replace', 'replace', 'fillna', 'replace', 'value_counts', 'fillna', 'sum', 'sample', 'sum', 'gt', 'sample', 'transform', 'groupby', 'sample', 'get_dummies', 'mul', 'select_dtypes', 'nunique', 'drop', 'select_dtypes', 'sum', 'nunique', 'value_counts', 'mask', 'map', 'value_counts', 'sum', 'nunique', 'value_counts', 'value_counts', 'astype', 'select_dtypes', 'value_counts', 'drop', 'concat', 'sample', 'transform', 'copy', 'sample', 'nunique', 'boxplot', 'copy', 'select_dtypes', 'round', 'select_dtypes', 'round', 'corrwith', 'concat', 'sort_values', 'value_counts', 'select_dtypes', 'nunique', 'sum', 'isnull', 'sort_values', 'sort_values', 'sort_values', 'round', 'to_csv', 'sample'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['CategoricalDtype', 'ColumnTransformer', 'Pipeline', 'SimpleImputer', 'OrdinalEncoder', 'XGBRegressor', 'plot_importance', 'GridSearchCV', 'mean_squared_error', 'r2_score', 'mutual_info_regression', 'stats', 'ceil']Dict:{'numpy': ['round', 'sum', 'unique', 'copy'], 'pandas': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': [], 'scipy': ['describe'], 'math': [], 'os': ['rename', 'replace']} axis_0: 2, axis_1: 11
amex-prediction-starter.py : ['astype', 'fillna', 'drop', 'rename', 'rename', 'astype', 'astype', 'astype', 'agg', 'groupby', 'last', 'agg', 'agg', 'groupby', 'last', 'agg', 'agg', 'groupby', 'last', 'agg', 'agg', 'groupby', 'last', 'agg', 'drop', 'drop', 'drop', 'join', 'join', 'astype', 'replace', 'drop', 'drop', 'rename', 'sort_values', 'concat', 'apply', 'sum', 'cumsum', 'sum', 'sum', 'sort_values', 'concat', 'apply', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'rename', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'join', 'join', 'drop', 'pop', 'merge', 'drop', 'rename', 'to_csv'] ['vaex', 'vaex.ml', 'pandas', 'numpy', 'os', 'gc', 'psutil', 'glob', 'lightgbm'] ['log_evaluation', 'train_test_split']Dict:{'vaex': [], 'pandas': ['array', 'merge', 'concat'], 'numpy': ['transpose', 'sum', 'where', 'array', 'cumsum'], '': [], 'os': ['rename', 'replace'], 'gc': [], 'psutil': [], 'glob': [], 'lightgbm': [], 'sklearn': []} axis_0: 0, axis_1: 0
simple-tutorial-for-beginners.py : ['read_csv', 'value_counts', 'value_counts', 'sum', 'sum', 'sum', 'value_counts', 'value_counts', 'sum', 'sum', 'value_counts', 'value_counts', 'sum', 'sum', 'sum', 'drop', 'drop', 'head', 'isnull', 'isnull', 'get_dummies', 'drop', 'concat', 'drop', 'head', 'isnull', 'mean', 'groupby', 'mean', 'groupby', 'drop', 'head', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std'] ['numpy', 'matplotlib.pyplot', 'pandas', 'warnings', 'seaborn'] ['display', 'display', 'display', 'LabelEncoder', 'LogisticRegression', 'cross_val_score', 'KNeighborsClassifier', 'cross_val_score', 'SVC', 'cross_val_score', 'GaussianNB', 'cross_val_score', 'RandomForestClassifier', 'cross_val_score']Dict:{'numpy': ['mean', 'std', 'sum'], 'matplotlib': [], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'warnings': [], 'seaborn': [], 'IPython': [], 'sklearn': []} axis_0: 0, axis_1: 6
youtube-video-writing-quality-lgbm.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'describe', 'hist', 'value_counts', 'count', 'groupby', 'boxplot', 'describe', 'reset_index', 'max', 'groupby', 'merge', 'value_counts', 'head', 'merge', 'head', 'reset_index', 'mean', 'groupby', 'boxplot', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'head', 'head', 'merge', 'merge', 'merge', 'head', '__len__', '__len__', 'mean', 'head', 'mean', 'head', 'to_csv', 'mean', 'sort_values', 'head', 'mean', 'to_csv'] ['gc', 'os', 'itertools', 'pickle', 're', 'time', 'warnings', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'optuna', 'random'] ['choice', 'choices', 'reduce', 'tqdm', 'cycle', 'venn2', 'Counter', 'reduce', 'tqdm', 'cycle', 'stats', 'skew', 'kurtosis', 'metrics', 'model_selection', 'preprocessing', 'linear_model', 'ensemble', 'decomposition', 'tree']Dict:{'gc': [], 'os': ['rename'], 'itertools': [], 'pickle': [], 're': [], 'time': [], 'warnings': [], 'random': [], 'functools': [], 'tqdm': ['__len__'], 'numpy': ['mean', 'max', 'abs', 'unique', 'std'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'matplotlib_venn': [], 'collections': ['items', '__len__'], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'optuna': []} axis_0: 4, axis_1: 6
tps-08-22-logistic-regression.py : ['join', 'read_csv', 'sum', 'head', 'read_csv', 'head', 'corr', 'drop', 'unique', 'get_dummies', 'get_dummies', 'drop', 'drop', 'all', 'transform', 'transform', 'sum', 'sum', 'value_counts', 'value_counts', 'count', 'value_counts', 'value_counts', 'value_counts', 'count', 'value_counts', 'read_csv', 'to_csv'] ['os', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings', 'missingno'] ['GridSearchCV', 'LogisticRegression', 'train_test_split', 'classification_report', 'preprocessing', 'SimpleImputer', 'SMOTE', 'Counter', 'enable_iterative_imputer', 'IterativeImputer', 'LinearDiscriminantAnalysis', 'QuadraticDiscriminantAnalysis']Dict:{'os': [], 'pandas': ['get_dummies', 'unique', 'read_csv', 'value_counts'], 'numpy': ['sum', 'unique', 'all'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'imblearn': [], 'collections': [], 'warnings;': [], 'warnings': [], 'missingno': []} axis_0: 0, axis_1: 1
quick-eda-and-simple-baseline-with-xgb.py : ['read_csv', 'read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'select_dtypes', 'corr', 'drop', 'concat', 'drop', 'set_index', 'mean', 'sort_values', 'apply', 'mean'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'math', 'warnings'] ['HTML', 'tqdm', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'LGBMRegressor', 'XGBRegressor', 'CatBoostRegressor', 'Style', 'Fore', 'mean_squared_log_error']Dict:{'IPython': [], 'pandas': ['concat', 'read_csv', 'isnull'], 'numpy': ['transpose', 'sum', 'mean'], 'matplotlib': [], 'seaborn': [], 'gc': [], 'tqdm': [], 'math': [], 'sklearn': [], 'warnings': [], 'lightgbm': [], 'xgboost': ['apply'], 'catboost': [], 'colorama': [], '=': [], 'list()': []} axis_0: 0, axis_1: 2
how-to-get-atomic-coordinates.py : ['read_csv', 'read_csv', 'concat', 'head', 'tail', 'array', 'array', 'array', 'clip', 'dot', 'transpose', 'array', 'hist', 'array', 'hist', 'hist', 'hist', 'array', 'array', 'sum', 'abs', 'hist', 'hist', 'dot', 'dot', 'hist'] ['numpy', 'pandas', 'matplotlib.pyplot', 'warnings', 'seaborn', 'networkx', 'seaborn'] ['inv']Dict:{'numpy': [], 'pandas': ['concat', 'array', 'read_csv'], 'matplotlib': ['hist'], 'warnings': [], 'seaborn': [], 'networkx': []} axis_0: 0, axis_1: 0
associations-and-correlations-useful-for-fe.py : ['set_index', 'read_feather', 'copy', 'copy', 'read_csv', 'stack', 'sort_values', 'to_csv', 'concat', 'tail', 'groupby', 'tail', 'groupby', 'head', 'sort_values', 'stack', 'to_csv', 'fillna', 'median', 'stack', 'sort_values', 'to_csv', 'sort_values', 'stack', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'warnings'] ['associations']Dict:{'numpy': ['median', 'stack', 'copy'], 'pandas': ['concat', 'read_feather', 'read_csv'], 'matplotlib': [], 'dython': [], 'warnings': []} axis_0: 0, axis_1: 1
titanic-eda-lightgbm-gridsearchcv.py : ['read_csv', 'read_csv', 'head', 'describe', 'info', 'sum', 'isna', 'fillna', 'sum', 'isna', 'value_counts', 'replace', 'value_counts', 'drop', 'sum', 'isna', 'fillna', 'mean', 'value_counts', 'fillna', 'sum', 'isna', 'drop', 'astype', 'replace', 'drop', 'get_dummies', 'drop', 'sort_values', 'sum', 'isna', 'fillna', 'median', 'fillna', 'median', 'fillna', 'value_counts', 'replace', 'drop', 'sum', 'isna', 'drop', 'astype', 'get_dummies', 'drop', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'lightgbm'] ['train_test_split', 'GridSearchCV', 'accuracy_score']Dict:{'pandas': ['isna', 'get_dummies', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'numpy': ['mean', 'median', 'info', 'sum'], 'lightgbm': [], 'sklearn': []} axis_0: 0, axis_1: 7
tps-feb-a-complete-study.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'drop', 'select_dtypes', 'select_dtypes', 'reset_index', 'concat', 'drop', 'info', 'skew', 'boxplot', 'skew', 'abs', 'corr', 'bool', 'apply', 'apply', 'apply', 'apply', 'apply', 'copy', 'copy', 'transform', 'transform', 'transform', 'transform', 'drop', 'to_csv', 'head', 'to_csv', 'head', 'to_csv', 'head', 'head', 'to_csv', 'head', 'to_csv', 'head', 'to_csv', 'head', 'head', 'apply', 'head', 'to_csv', 'head', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['plotly.express', 'plotly.graph_objects', 'plotly.figure_factory', 'matplotlib.pyplot', 'seaborn', 'math', 'lightgbm', 'optuna', 'numpy', 'pandas', 'os', 'h2o'] ['make_subplots', 'Fore', 'ProfileReport', 'metrics', 'stats', 'tqdm', 'deepcopy', 'RandomForestRegressor', 'XGBRegressor', 'LGBMRegressor', 'LabelEncoder', 'GridSearchCV', 'KFold', 'cross_val_score', 'Trial', 'visualization', 'train_test_split', 'f1_score', 'confusion_matrix', 'accuracy_score', 'mean_squared_error', 'H2OAutoML']Dict:{'plotly': [], 'matplotlib': ['boxplot'], 'colorama': [], 'pandas_profiling': [], 'seaborn': ['boxplot'], 'sklearn': [], 'scipy': ['skew'], 'math': [], 'tqdm': [], 'copy': [], 'xgboost': ['apply'], 'lightgbm': [], 'optuna': [], 'numpy': ['info', 'abs', 'copy'], 'pandas': ['concat', 'read_csv'], 'os': [], 'h2o': []} axis_0: 1, axis_1: 3
fe-pipeline-with-histgradientboostingregressor.py : ['info', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'agg', 'groupby', 'astype', 'astype', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'array', 'mean', 'mean', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'abs', 'array', 'diff', 'mean', 'fillna', 'shift', 'fillna', 'shift', 'isin', 'isin', 'pct_change', 'fillna', 'shift', 'fillna', 'shift', 'isin', 'isin', 'array', 'mean', 'max', 'min', 'std', 'mean', 'abs', 'diff', 'max', 'abs', 'min', 'abs', 'dropna', 'std', 'rolling', 'dropna', 'std', 'rolling', 'dropna', 'std', 'rolling', 'dropna', 'std', 'rolling', 'dropna', 'mean', 'rolling', 'dropna', 'mean', 'rolling', 'dropna', 'mean', 'rolling', 'dropna', 'mean', 'rolling', 'sort_values', 'unique', 'merge', 'sum', 'isna', 'drop', 'replace', 'fillna', 'sort_values', 'apply', 'fillna', 'abs', 'head', 'sort_values', 'head', 'sort_values', 'head', 'sort_values', 'tail', 'sort_values', 'drop', 'array', 'astype', 'round', 'clip', 'array', 'astype', 'round', 'clip', 'info', 'astype', 'round', 'clip', 'info', 'astype', 'round', 'clip', 'to_csv', 'head', 'info', 'info', 'info', 'info', 'info', 'to_csv', 'info'] ['matplotlib.pyplot', 'scipy.stats', 'lightgbm', 'xgboost', 'seaborn', 'random', 'pandas', 'numpy', 'scipy', 'itertools', 'warnings', 'librosa', 'time', 'pywt', 'os', 'gc'] ['List', 'NoReturn', 'Union', 'Tuple', 'Optional', 'Text', 'Generic', 'Callable', 'Dict', 'f1_score', 'cohen_kappa_score', 'mean_squared_error', 'getLogger', 'Formatter', 'StreamHandler', 'FileHandler', 'INFO', 'butter', 'lfilter', 'filtfilt', 'savgol_filter', 'enable_hist_gradient_boosting', 'HistGradientBoostingRegressor', 'KFold', 'train_test_split', 'feature_calculators', 'pearsonr', 'spearmanr', 'kendalltau', 'LinearRegression', 'ProfileReport', 'tqdm_notebook', 'contextmanager', 'Parallel', 'delayed', 'display']Dict:{'typing': [], 'sklearn': [], 'logging': [], 'scipy': [], 'tsfresh': [], 'pandas_profiling': [], 'tqdm': [], 'contextlib': [], 'joblib': [], 'IPython': [], 'matplotlib': [], 'lightgbm': [], 'xgboost': [], 'seaborn': [], 'random': [], 'pandas': ['isna', 'read_csv', 'unique', 'array', 'merge'], 'numpy': ['mean', 'max', 'diff', 'abs', 'sum', 'array', 'round', 'min', 'unique', 'clip', 'isin', 'info', 'std'], 'itertools': ['groupby'], 'warnings': [], 'librosa': [], 'time': [], 'pywt': [], 'os': ['replace'], 'gc': []} axis_0: 0, axis_1: 2
19th-place-best-single-model-resbilstm.py : ['join', 'info', 'join', '_repr_html_', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'concat', 'sum', 'memory_usage', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'astype', 'astype', 'reset_index', 'isin', 'unique', 'reset_index', 'isin', 'unique', 'reset_index', 'isin', 'reset_index', 'groupby', 'reset_index', 'groupby', 'unique', 'copy', 'set_index', 'unique', 'unique', 'rename', 'concat', 'unique', 'unique', 'sample', 'sample', 'agg', 'groupby', 'reset_index', 'concat', 'merge', 'drop', 'copy', 'astype', 'cumsum', 'groupby', 'fillna', 'shift', 'groupby', 'concat', 'fillna', 'copy', 'diff', 'groupby', 'concat', 'drop', 'fillna', 'groupby', 'groupby', 'shift', 'shift', 'shift', 'diff', 'shift', 'diff', 'quantile', 'quantile', 'clip', 'fillna', 'reset_index', 'concat', 'transform', 'concat', 'copy', 'reset_index', 'bool', 'bool', 'bool', 'bool', 'bool', 'bool', 'copy', 'groupby', 'reset_index', 'query', 'pivot_table', 'copy', 'groupby', 'reset_index', 'query', 'pivot_table', 'pad', 'join', 'reset_index', 'reset_index', 'join', 'join', 'array', 'array', 'array', 'info', 'array', 'array', 'info', 'join', 'info', 'median', 'to_csv', 'join', 'min', 'max', 'array', 'unique', 'round', 'clip', 'to_csv', 'join', 'median', 'isin', 'info', 'info', 'to_csv', 'join', 'median', 'astype', 'astype', 'join', 'reset_index', 'astype', 'apply', 'groupby', 'sort_values', 'join', 'sort_values', 'join', 'copy', 'unique', 'reset_index', 'astype', 'astype', 'unique', 'reset_index', 'reset_index', 'sort_values', 'join', 'merge', 'head', 'groupby', 'astype', 'astype', 'unique', 'reset_index', 'sort_values', 'join', 'join', 'to_csv', 'info', 'join'] ['os', 'sys', 'joblib', 'logging', 'warnings', 'datetime', 'json', 'shutil', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'tensorflow', 'category_encoders', 'tensorflow_addons'] ['get', 'model_selection', 'RobustScaler', 'mean_absolute_error', 'backend', 'Bidirectional', 'LSTM', 'drive', 'files', 'KaggleApi']Dict:{'os': ['rename'], 'sys': [], 'joblib': [], 'logging': ['info'], 'warnings': [], 'datetime': [], 'json': [], 'shutil': ['copy'], 'pandas': ['read_csv', 'pivot_table', 'concat', 'unique', 'array', 'merge'], 'numpy': ['median', 'quantile', 'max', 'diff', 'sum', 'round', 'pad', 'min', 'unique', 'clip', 'isin', 'info', 'array', 'cumsum', 'copy'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'requests': [], 'sklearn': [], 'tensorflow': [], 'category_encoders': [], 'tensorflow_addons': []} axis_0: 1, axis_1: 9
ps-s03e02-eda-baseline.py : ['update', 'sum', 'isnull', 'crosstab', 'sum', 'sum', 'array', 'join', 'join', 'join', 'read_csv', 'pop', 'read_csv', 'pop', 'read_csv', 'astype', 'astype', 'array', 'array', 'mean', 'median', 'std', 'corr', 'duplicated', 'array', 'array', 'array', 'join', 'join', 'drop', 'drop', 'join', 'join', 'concat', 'array', 'round', 'mean', 'std', 'array', 'mean', 'join', 'to_csv'] ['pandas', 'numpy', 'warnings', 'gc', 'os', 'seaborn', 'matplotlib', 'numpy', 'random', 'json', 'os'] ['stats', 'pyplot', 'display', 'HTML', 'roc_auc_score', 'StratifiedKFold', 'CatBoostClassifier']Dict:{'scipy': [], 'pandas': ['read_csv', 'isnull', 'concat', 'array', 'crosstab'], 'numpy': ['mean', 'median', 'sum', 'array', 'round', 'std'], 'warnings': [], 'gc': [], 'os': [], 'seaborn': [], 'matplotlib': [], 'IPython': [], 'sklearn': [], 'random': [], 'json': [], 'catboost': []} axis_0: 2, axis_1: 2
ms-melware-with-h2o-automl.py : ['head', 'head', 'read_csv', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'h2o'] ['H2OAutoML']Dict:{'numpy': [], 'pandas': ['read_csv'], 'os': [], 'h2o': []} axis_0: 0, axis_1: 0
amex-feature-engineering-base.py : ['read_csv', 'read_csv', 'head', 'to_datetime', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'astype', 'agg', 'groupby', 'agg', 'groupby', 'read_parquet', 'unique', 'isin', 'astype', 'concat', 'to_pickle', 'astype', 'concat'] ['numpy', 'pandas', 'gc'] []Dict:{'numpy': ['isin', 'unique'], 'pandas': ['to_pickle', 'read_csv', 'concat', 'read_parquet', 'unique', 'to_datetime'], 'gc': []} axis_0: 1, axis_1: 1
tps-dec-step-by-step.py : ['read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'describe', 'value_counts', 'corr', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'drop', 'transform', 'mean', 'read_csv', 'mode', 'to_csv'] ['numpy', 'pandas', 'random', 'math', 'gc', 'seaborn', 'matplotlib.pyplot'] ['RobustScaler', 'StandardScaler', 'MinMaxScaler', 'StratifiedKFold', 'metrics', 'LGBMClassifier', 'LogisticRegression', 'accuracy_score', 'stats', 'make_subplots', 'lightgbm']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'info'], 'pandas': ['value_counts', 'read_csv', 'isnull'], 'random': [], 'math': [], 'gc': [], 'sklearn': [], 'lightgbm': [], 'scipy': ['mode', 'describe'], 'plotly': [], 'seaborn': [], 'matplotlib': [], 'optuna': []} axis_0: 0, axis_1: 0
detailed-feature-engineering-eda.py : ['read_csv', 'read_csv', 'corr', 'hist', 'hist', 'apply', 'apply', 'transform', 'transform', 'skew', 'kurt', 'skew', 'kurt', 'sum', 'sum', 'sum', 'isna', 'sum', 'isna', 'fillna', 'fillna', 'apply', 'apply', 'sum', 'sum'] ['matplotlib.pylab', 'seaborn', 'pandas', 'numpy', 'warnings', 'os'] ['LabelEncoder', 'norm', 'skew', 'boxcox1p', 'Image']Dict:{'sklearn': ['transform'], 'scipy': [], 'matplotlib': ['sum', 'hist'], 'seaborn': [], 'pandas': ['isna', 'read_csv'], 'numpy': ['sum'], 'warnings': [], 'os': [], 'IPython': []} axis_0: 0, axis_1: 0
forest-cover-feature-engineering-and-reduction.py : ['read_csv', 'read_csv', 'info', 'info', 'map', 'map', 'multiply', 'sum', 'multiply', 'sum', 'head', 'astype', 'round', 'head', 'astype', 'astype', 'head', 'head', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'time', 'warnings', 'seaborn', 'matplotlib.pyplot', 'lightgbm'] ['ExtraTreesClassifier']Dict:{'numpy': ['round', 'info', 'sum', 'multiply'], 'pandas': ['read_csv'], 'time': [], 'warnings': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 5
score-1-0851.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'hist', 'clip', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'hist', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'last', 'groupby', 'mean', 'groupby', 'join', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'tail', 'to_dict', 'set_index', 'copy', 'map', 'tail', 'to_csv', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'lightgbm', 'xgboost', 'catboost'] ['tqdm', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'unique', 'clip', 'isin', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'tqdm': []} axis_0: 0, axis_1: 0
crypto-forecasting-lgbm-feval-feature-importance.py : ['sum', 'sum', 'sum', 'sum', 'read_parquet', 'read_parquet', 'unique', 'unique', 'unique', 'unique', 'isin', 'isin', 'array', 'sort_values', 'median', 'boxplot', 'array'] ['gresearch_crypto', 'pandas', 'numpy', 'os', 'gc', 'pickle', 'time', 'matplotlib.pyplot', 'seaborn', 'lightgbm'] ['datetime']Dict:{'gresearch_crypto': [], 'pandas': ['read_parquet', 'array', 'unique'], 'numpy': ['median', 'sum', 'unique', 'isin', 'array'], 'os': [], 'gc': [], 'pickle': [], 'time': [], 'datetime': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'lightgbm': [], '=': [], '[]': []} axis_0: 1, axis_1: 0
recursive-feature-selection-using-sklearn-on-elo.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'info', 'agg', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'read_csv', 'map', 'map', 'to_datetime', 'astype', 'fillna', 'fillna', 'fillna', 'map', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'merge', 'merge', 'head', 'to_datetime', 'to_datetime', 'astype', 'to_datetime', 'to_datetime', 'astype', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'concat', 'value_counts', 'drop', 'drop', 'head', 'mean', 'groupby', 'map', 'map', 'reset_index'] ['numpy', 'pandas', 'os', 'time', 'warnings', 'gc', 'os', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'datetime'] ['urllib', 'norm', 'skew', 'StandardScaler', 'shuffle', 'Pipeline', 'FeatureUnion', 'RandomForestRegressor', 'Lasso', 'mean_squared_log_error', 'mean_squared_error', 'r2_score', 'mean_absolute_error', 'train_test_split', 'metrics', 'confusion_matrix', 'reciprocal', 'uniform', 'StratifiedKFold', 'RepeatedKFold', 'KFold', 'cross_val_score', 'cross_val_predict', 'cross_validate', 'GridSearchCV', 'RandomizedSearchCV', 'OneHotEncoder', 'LabelEncoder', 'feature_selection', 'model_selection', 'metrics', 'BaseEstimator', 'TransformerMixin', 'check_array', 'sparse', 'RFECV', 'LGBMRegressor']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'merge', 'to_datetime'], 'os': [], 'time': [], 'warnings': [], 'gc': [], 'six': [], 'matplotlib': [], 'seaborn': [], 'datetime': [], 'scipy': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 1
lstm-and-feature-engineering-top8.py : ['filter', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'where', 'where', 'where', 'where', 'apply', 'apply', 'value_counts', 'map', 'mask', 'value_counts', 'map', 'mask', 'where', 'astype', 'value_counts', 'map', 'mask', 'astype', 'value_counts', 'map', 'mask', 'astype', 'value_counts', 'map', 'mask', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'min', 'max', 'max', 'min', 'min', 'max', 'max', 'min', 'mask', 'copy', 'fillna', 'rename', 'reset_index', 'stack', 'set_index', 'items', 'map', 'copy', 'reset_index', 'reset_index', 'join', 'filter', 'concat', 'get_dummies', 'concat', 'transform', 'concat', 'get_dummies', 'concat', 'align', 'transform', 'concat', 'get_dummies', 'concat', 'align', 'concat', 'concat', 'concat', 'unique', 'mask', 'where', 'where', 'where', 'hist', 'to_csv'] ['datetime', 'os', 'random', 'pandas', 'numpy', 'matplotlib.pylab', 'tensorflow', 'datetime', 'tensorflow'] ['Path', 'metrics', 'impute', 'preprocessing', 'class_weight', 'keras', 'layers']Dict:{'pathlib': ['rename'], 'datetime': [], 'os': ['rename'], 'random': [], 'pandas': ['concat', 'value_counts', 'get_dummies', 'unique', 'to_datetime'], 'numpy': ['stack', 'max', 'where', 'min', 'unique', 'copy'], 'matplotlib': ['stack', 'max', 'where', 'min', 'unique', 'hist', 'copy'], 'sklearn': [], 'tensorflow': ['where', 'stack', 'unique', 'concat']} axis_0: 0, axis_1: 24
tpsmay22-keras-quickstart.py : ['array', 'array', 'array', 'read_csv', 'read_csv', 'apply', 'get', 'apply', 'head', 'hist'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'datetime', 'scipy.stats', 'math', 'random', 'tensorflow'] ['MaxNLocator', 'cycler', 'display', 'KFold', 'roc_auc_score', 'roc_curve', 'CalibrationDisplay', 'StandardScaler', 'Model', 'ReduceLROnPlateau', 'LearningRateScheduler', 'EarlyStopping', 'Dense', 'Input', 'InputLayer', 'Add', 'plot_model']Dict:{'numpy': ['array'], 'pandas': ['array', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'cycler': [], 'IPython': [], 'datetime': [], 'scipy': [], 'math': [], 'random': [], 'sklearn': [], 'tensorflow': []} axis_0: 1, axis_1: 0
lb-0-428-feature-engineering-rf-prediction.py : ['to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'read_csv', 'unique', 'count', 'filter', 'count', 'filter', 'filter', 'filter', 'filter', 'unique', 'abs', 'abs', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'unique', 'filter', 'std', 'filter', 'filter', 'filter', 'filter', 'to_numpy', 'unique', 'std', 'filter', 'std', 'filter', 'diff', 'filter', 'diff', 'mean', 'filter', 'rename', 'reset_index', 'filter', 'filter', 'filter', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'polars', 'datetime', 'plotly.express', 'plotly.graph_objects', 'pickle'] ['tqdm', 'make_subplots', 'score', 'train_test_split', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'abs', 'unique', 'diff', 'std'], 'pandas': ['to_datetime', 'unique', 'read_csv'], 'matplotlib': [], 'polars': ['mean', 'count', 'std', 'read_csv'], 'datetime': [], '': [], 'tqdm': [], 'plotly': [], 'metric': [], 'sklearn': [], 'pickle': []} axis_0: 0, axis_1: 0
houseprices-simple-ml-workflow-top-11.py : ['join', 'read_csv', 'read_csv', 'drop', 'drop', 'reset_index', 'concat', 'sort_values', 'sum', 'isna', 'sort_values', 'sum', 'isna', 'sort_values', 'sum', 'isna', 'sort_values', 'sum', 'isna', 'concat', 'skew', 'skew', 'boxplot', 'skew', 'boxplot', 'skew', 'describe', 'corr', 'copy', 'items', 'select_dtypes', 'reset_index', 'drop', 'reset_index', 'drop', 'reset_index', 'concat', 'fillna', 'fillna', 'mode', 'copy', 'select_dtypes', 'sum', 'isna', 'isna', 'isna', 'isna', 'isna', 'select_dtypes', 'any', 'isnull', 'select_dtypes', 'copy', 'transform', 'head', 'select_dtypes', 'select_dtypes', 'copy', 'max', 'copy', 'reset_index', 'max', 'items', 'items', 'items', 'mean', 'std', 'keys', 'sort_values', 'concat', 'to_csv'] ['numpy', 'pandas', 'scipy', 'warnings', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'os'] ['Counter', 'loguniform', 'BaseEstimator', 'TransformerMixin', 'Pipeline', 'ColumnTransformer', 'StandardScaler', 'OneHotEncoder', 'make_pipeline', 'KNeighborsRegressor', 'GradientBoostingRegressor', 'LinearRegression', 'XGBRegressor', 'LGBMRegressor', 'RandomForestRegressor', 'mean_squared_error', 'r2_score', 'mean_squared_error', 'train_test_split', 'KFold', 'cross_val_score', 'RandomizedSearchCV', 'cross_val_score', 'KFold', 'cross_validate']Dict:{'numpy': ['mean', 'any', 'max', 'sum', 'std', 'copy'], 'pandas': ['concat', 'isna', 'read_csv', 'isnull'], 'collections': ['items', 'keys', 'copy'], 'scipy': [], 'warnings': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'os': []} axis_0: 2, axis_1: 4
optiver-realized-ensamble-tabnet-and-lgbm.py : ['read_pickle', 'fillna', 'mean', 'drop', 'transform', 'reset_index', 'sample', 'cut', 'drop', 'any', 'mean', 'diff', 'sum', 'unique', 'read_csv', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'read_parquet', 'apply', 'groupby', 'apply', 'groupby', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'apply', 'drop', 'read_parquet', 'apply', 'groupby', 'sum', 'mean', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'merge', 'drop', 'add_prefix', 'apply', 'drop', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'reset_index', 'agg', 'groupby', 'join', 'add_suffix', 'merge', 'merge', 'drop', 'merge', 'concat', 'mean', 'drop', 'drop', 'astype', 'astype', 'join', 'unique', 'merge', 'drop', 'fillna', 'mean', 'drop', 'transform', 'transform', 'squeeze', 'mean', 'join', 'unique', 'merge', 'drop', 'astype', 'mean', 'to_csv'] ['os', 'glob', 'pandas', 'numpy', 'scipy', 'lightgbm', 'warnings', 'pickle', 'matplotlib.pyplot', 'seaborn', 'torch', 'torch.nn', 'torch.optim', 'torch.nn.functional', 'random', 'pickle', 'pickle', 'torch', 'pandas', 'numpy', 'os'] ['Parallel', 'delayed', 'KFold', 'ReduceLROnPlateau', 'StandardScaler', 'LabelEncoder', 'datasets', 'model_selection', 'TabNetPretrainer', 'TabNetRegressor', 'Metric', 'LabelEncoder', 'mean_squared_error', 'Path']Dict:{'os': [], 'glob': [], 'joblib': [], 'pandas': ['read_csv', 'cut', 'concat', 'read_parquet', 'read_pickle', 'unique', 'merge'], 'numpy': ['mean', 'squeeze', 'any', 'sum', 'unique', 'diff', 'std'], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'warnings': [], 'pickle': [], 'matplotlib': [], 'seaborn': [], 'torch': ['mean', 'squeeze', 'any', 'sum', 'concat', 'unique', 'diff', 'std'], 'random': ['sample'], 'pytorch_tabnet': [], 'pathlib': []} axis_0: 4, axis_1: 2
titanic-eda-and-classification-top-5.py : ['join', 'read_csv', 'read_csv', 'head', 'info', 'describe', 'items', 'reset_index', 'drop', 'reset_index', 'concat', 'describe', 'mean', 'groupby', 'map', 'map', 'replace', 'replace', 'corr', 'any', 'isnull', 'sum', 'isnull', 'isnull', 'fillna', 'mean', 'isnull', 'isnull', 'fillna', 'isnull', 'isnull', 'isnull', 'median', 'replace', 'head', 'replace', 'replace', 'cut', 'mean', 'groupby', 'qcut', 'mean', 'groupby', 'corr', 'astype', 'drop', 'head', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'head', 'drop', 'drop', 'insert', 'astype', 'concat', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'os'] ['Counter', 'OneHotEncoder', 'LabelEncoder', 'train_test_split', 'LogisticRegression', 'RandomForestClassifier', 'VotingClassifier', 'KNeighborsClassifier', 'SVC']Dict:{'numpy': ['mean', 'median', 'any', 'sum', 'info', 'insert'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'get_dummies', 'qcut'], 'matplotlib': [], 'seaborn': [], 'collections': ['items'], 'warnings': [], 'sklearn': [], 'os': ['replace']} axis_0: 2, axis_1: 3
avito-eda-fe-time-series-dt-visualization.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'head', 'info', 'describe', 'describe', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'dropna', 'apply', 'value_counts', 'sum', 'read_csv', 'merge', 'value_counts', 'sum', 'head', 'value_counts', 'head', 'head', 'value_counts', 'head', 'head', 'value_counts', 'head', 'read_csv', 'merge', 'head', 'value_counts', 'head', 'read_csv', 'merge', 'value_counts', 'sum', 'value_counts', 'sum', 'to_datetime', 'unstack', 'mean', 'groupby', 'fillna', 'boxplot', 'isnull', 'join', 'fillna', 'apply', 'head', 'value_counts', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'to_datetime', 'to_datetime', 'sum', 'resample', 'to_datetime', 'min', 'to_datetime', 'max', 'set_index', 'read_csv', 'to_datetime', 'head', 'apply', 'resample', 'mean', 'apply', 'resample', 'mean', 'apply', 'resample', 'mean', 'apply', 'resample', 'mean', 'head', 'head', 'to_datetime', 'sum', 'resample', 'to_datetime', 'min', 'to_datetime', 'max', 'value_counts', 'value_counts', 'sum', 'sum', 'to_datetime', 'to_datetime', 'apply', 'apply', 'apply', 'join', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'join', 'apply', 'apply', 'apply', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'drop', 'corr', 'fillna'] ['pandas', 'numpy', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'plotly.offline', 'plotly.tools', 'squarify', 'warnings', 'datetime', 'warnings', 'string', 'time', 're'] ['init_notebook_mode', 'iplot', 'Basemap', 'array', 'cm', 'preprocessing', 'stopwords', 'TextBlob', 'tree', 'Image', 'check_call', 'Image', 'ImageDraw', 'ImageFont', 'venn2', 'StringIO', 'WordCloud', 'STOPWORDS', 'GradientBoostingRegressor']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'merge', 'to_datetime'], 'numpy': [], 'matplotlib': [], 'seaborn': ['boxplot'], 'plotly': [], 'squarify': [], 'mpl_toolkits': [], 'sklearn': ['apply'], 'warnings': [], 'nltk': [], 'textblob': [], 'datetime': [], 'string': [], 'time': [], 'IPython': [], 'subprocess': [], 'PIL': [], 're': [], 'matplotlib_venn': [], 'io': [], 'wordcloud': []} axis_0: 0, axis_1: 3
gb-vpp-to-infinity-and-beyond.py : ['read_csv', 'head', 'read_csv', 'head', 'cumsum', 'groupby', 'cumsum', 'groupby', 'cumsum', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'cumsum', 'groupby', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'shift', 'fillna', 'diff', 'groupby', 'reset_index', 'mean', 'ewm', 'groupby', 'reset_index', 'agg', 'rolling', 'groupby', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'to_numpy', 'drop', 'drop', 'transform', 'squeeze', 'squeeze', 'squeeze', 'squeeze', 'read_csv', 'to_csv'] ['gc', 'numpy', 'pandas', 'tensorflow'] ['KFold', 'RobustScaler', 'mean_absolute_error', 'plot_model', 'Model', 'load_model', 'EarlyStopping', 'ModelCheckpoint', 'ReduceLROnPlateau', 'Bidirectional', 'LSTM', 'Dense', 'Dropout', 'Input', 'Concatenate', 'Add', 'GRU']Dict:{'gc': [], 'numpy': ['mean', 'diff', 'squeeze', 'cumsum'], 'pandas': ['get_dummies', 'read_csv'], 'sklearn': [], 'tensorflow': []} axis_0: 0, axis_1: 2
cat-in-dat-2-embeddings-target-keras.py : ['join', 'read_csv', 'read_csv', 'head', 'reset_index', 'sum', 'isnull', 'nunique', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'fillna', 'drop', 'drop', 'copy', 'drop', 'copy', 'transform', 'transform', 'transform', 'transform', 'astype', 'astype', 'transform', 'unique', 'mean', 'add', 'read_csv', 'to_csv', 'head'] ['numpy', 'pandas', 'warnings', 'os', 'scipy', 'tensorflow', 'tensorflow.keras.backend', 'matplotlib.pyplot'] ['StandardScaler', 'OneHotEncoder', 'OrdinalEncoder', 'TargetEncoder', 'StratifiedKFold', 'LogisticRegression', 'roc_auc_score', 'KFold']Dict:{'numpy': ['mean', 'add', 'sum', 'unique', 'copy'], 'pandas': ['unique', 'read_csv', 'isnull'], 'warnings': [], 'os': [], 'sklearn': [], 'category_encoders': [], 'scipy': [], 'tensorflow': ['mean', 'sum'], 'matplotlib': []} axis_0: 0, axis_1: 7
micro-business-forecasting.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'reset_index', 'sort_values', 'concat', 'merge', 'drop', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'transform', 'groupby', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'read_csv', 'merge', 'head', 'fillna', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isnull', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'to_dict', 'set_index', 'copy', 'map', 'read_csv', 'concat', 'fillna', 'drop', 'fillna', 'read_csv', 'astype', 'read_csv', 'astype', 'apply', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'map', 'map', 'drop', 'to_csv'] ['gc', 'numpy', 'pandas', 'os', 'catboost'] ['HTML', 'tqdm']Dict:{'IPython': [], 'gc': [], 'numpy': ['mean', 'abs', 'sum', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'os': [], 'tqdm': []} axis_0: 0, axis_1: 3
tabular-playground-rf-xgb-feature-engineering.py : ['read_csv', 'read_csv', 'concat', 'agg', 'isna', 'hist', 'fillna', 'value_counts', 'agg', 'groupby', 'mean', 'reset_index', 'sort_values', 'fillna', 'hist', 'to_numeric', 'value_counts', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'median', 'groupby', 'reset_index', 'drop', 'median', 'dropna', 'fillna', 'merge', 'fillna', 'agg', 'isna', 'fillna', 'agg', 'isna', 'agg', 'isna', 'fillna', 'mean', 'agg', 'isna', 'hist', 'get_dummies', 'drop', 'head', 'drop', 'drop', 'drop', 'array', 'sort_values', 'array', 'sort_values', 'agg', 'isnull', 'fillna', 'mean', 'agg', 'isnull', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm'] ['train_test_split', 'OneHotEncoder', 'GridSearchCV', 'roc_auc_score', 'classification_report', 'confusion_matrix', 'VotingClassifier', 'SelectFromModel', 'accuracy_score', 'RandomForestClassifier', 'GradientBoostingClassifier', 'XGBClassifier', 'cross_val_score']Dict:{'numpy': ['mean', 'median', 'array'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'to_numeric', 'array', 'merge'], 'sklearn': [], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'xgboost': [], 'lightgbm': []} axis_0: 1, axis_1: 4
a-deep-dive-into-sklearn-pipelines.py : ['read_csv', 'dropna', 'set_index', 'head', 'apply', 'sub', 'apply', 'apply', 'apply', 'apply', 'mean', 'apply', 'count', 'head', 'head', 'mean', 'keys', 'mean', 'read_csv', 'concat', 'set_index', 'head'] ['numpy', 'pandas', 're'] ['stopwords', 'train_test_split', 'BaseEstimator', 'TransformerMixin', 'Pipeline', 'TfidfVectorizer', 'StandardScaler', 'FeatureUnion', 'RandomForestClassifier', 'GridSearchCV']Dict:{'numpy': ['mean'], 'pandas': ['concat', 'read_csv'], 're': ['sub'], 'nltk': [], 'sklearn': []} axis_0: 1, axis_1: 1
digits-recognizer-simple-xgb-classifier.py : ['join', 'read_csv', 'read_csv', 'unique', 'describe', 'sum', 'sum', 'sum', 'mean', 'groupby', 'drop', 'transform', 'transform', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'os'] ['accuracy_score', 'XGBClassifier', 'train_test_split', 'LabelEncoder', 'StandardScaler', 'PCA', 'pyplot', 'plot_importance']Dict:{'numpy': ['mean', 'sum', 'unique'], 'pandas': ['unique', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'xgboost': [], 'os': []} axis_0: 0, axis_1: 4
feature-engineering-eda-and-lightgbm.py : ['read_csv', 'read_csv', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'astype', 'sum', 'duplicated', 'sum', 'duplicated', 'iterrows', 'iterrows', 'drop', 'drop', 'to_numeric', 'to_numeric', 'iterrows', 'get_dummies', 'iterrows', 'get_dummies', 'iterrows', 'concat', 'copy', 'copy', 'transform', 'groupby', 'drop', 'drop', 'astype', 'get_dummies', 'get_dummies', 'copy', 'transform', 'astype', 'iterrows', 'unique', 'transform', 'astype', 'nunique', 'nunique', 'iterrows', 'fillna', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'drop', 'drop', 'iterrows', 'replace', 'fillna', 'concat', 'copy', 'copy', 'drop', 'head', 'drop', 'concat', 'copy', 'copy', 'drop', 'transform', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'unique', 'copy', 'reset_index', 'sample', 'copy', 'drop', 'pivot_table', 'copy', 'corr', 'corr', 'copy', 'corr', 'pop', 'copy', 'copy', 'melt', 'copy', 'drop', 'transform', 'transform', 'sum', 'transform', 'sum', 'drop', 'drop', 'copy', 'drop', 'unique', 'astype', 'drop', 'drop', 'copy', 'head', 'astype', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'sklearn.preprocessing', 'numpy', 'pandas', 'gender_guesser.detector', 'gender_guesser.detector', 'itertools', 'pycaret.anomaly', 'graphviz'] ['PCA', 'PCA', 'MinMaxScaler', 'preprocessing', 'PCA', 'PCA', 'DecisionTreeClassifier', 'tree', '*', 'preprocessing']Dict:{'numpy': ['max', 'sum', 'min', 'unique', 'copy'], 'pandas': ['read_csv', 'isnull', 'melt', 'pivot_table', 'concat', 'get_dummies', 'to_numeric', 'unique'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'gender_guesser': [], 'itertools': ['groupby'], 'pycaret': [], 'yellowbrick': [], 'graphviz': []} axis_0: 0, axis_1: 4
eda-feature-engineering-xgboost.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'info', 'concat', 'nunique', 'nunique', 'drop', 'sort_index', 'value_counts', 'drop', 'value_counts', 'mean', 'std', 'min', 'max', 'mean', 'std', 'min', 'max', 'drop', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn'] ['train_test_split', 'XGBClassifier', 'accuracy_score']Dict:{'numpy': ['mean', 'max', 'min', 'info', 'std'], 'pandas': ['concat', 'read_csv', 'value_counts'], 'os': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 0
optiver-feature-engineering-rapids-joblib.py : ['agg', 'groupby', 'join', 'set_index', 'reindex', 'reset_index', 'groupby', 'reset_index', 'agg', 'groupby', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'min', 'max', 'reset_index', 'agg', 'groupby', 'read_parquet', 'merge', 'concat'] ['sys', 'cupy', 'cudf', 'cuml', 'glob', 'cu_utils.transform', 'gc'] ['tqdm', 'Parallel', 'delayed']Dict:{'sys': [], 'cupy': [], 'cudf': [], 'cuml': [], 'glob': [], 'tqdm': [], 'cu_utils': [], 'gc': [], 'joblib': []} axis_0: 0, axis_1: 0
1-43-plb-feature-engineering-best-model-combined.py : ['mode', 'read_csv', 'merge', 'drop', 'astype', 'apply', 'to_datetime', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'nunique', 'drop', 'drop', 'drop', 'astype', 'fillna', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'sort_values', 'drop', 'drop', 'nunique', 'nunique', 'unique', 'unique', 'corr', 'sort_values', 'array', 'nunique', 'copy', 'apply', 'fillna', 'reset_index', 'sum', 'groupby', 'to_csv', 'copy', 'apply', 'fillna', 'reset_index', 'sum', 'groupby', 'to_csv', 'sort_values', 'sort_values', 'set_index', 'copy', 'apply', 'fillna', 'reset_index', 'sum', 'groupby', 'to_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'to_csv'] ['os', 'json', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'lightgbm', 'xgboost', 'xgboost'] ['json_normalize', 'tools', 'model_selection', 'preprocessing', 'metrics', 'LabelEncoder', 'KFold', 'CatBoostRegressor', 'StratifiedKFold', 'train_test_split', 'StratifiedKFold', 'train_test_split', 'mean_squared_error']Dict:{'os': [], 'json': [], 'numpy': ['array', 'sum', 'unique', 'copy'], 'pandas': [], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'catboost': []} axis_0: 0, axis_1: 6
automl-mljar-fe-modelling-blending-tps-sep21.py : ['read_csv', 'read_csv', 'head', 'read_csv', 'to_csv'] ['numpy', 'pandas'] ['AutoML']Dict:{'numpy': [], 'pandas': ['read_csv'], 'supervised': []} axis_0: 0, axis_1: 0
feature-engineering-with-randomized-search.py : ['read_csv', 'head', 'head', 'astype', 'drop', 'head', 'nunique', 'drop', 'head', 'sort_values', 'reset_index'] ['pandas', 'numpy', 'matplotlib.pyplot'] ['stats', 'train_test_split', 'RandomizedSearchCV', 'LogisticRegression', 'roc_auc_score', 'Pipeline', 'StandardScaler', 'MinMaxScaler', 'RobustScaler', 'imputation', 'encoding', 'discretisation', 'transformation']Dict:{'pandas': ['read_csv'], 'numpy': [], 'matplotlib': [], 'scipy': [], 'sklearn': [], 'feature_engine': []} axis_0: 0, axis_1: 2
top-8-randomforest-mice-predict-titanic-survival.py : ['join', 'read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'drop', 'transform', 'transform', 'transform', 'drop', 'drop', 'to_csv'] ['os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['stats', 'enable_iterative_imputer', 'IterativeImputer', 'MinMaxScaler', 'LabelEncoder', 'OneHotEncoder', 'StratifiedKFold', 'GridSearchCV', 'RFECV', 'RandomForestClassifier']Dict:{'os': [], 'numpy': ['sum'], 'pandas': ['read_csv', 'isnull'], 'scipy': [], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 4
ps3e16-eda-feature-engineering-ml-model.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'info', 'describe', 'info', 'head', 'describe', 'info', 'describe', 'describe', 'boxplot', 'hist', 'boxplot', 'boxplot', 'drop', 'boxplot', 'transform', 'get_dummies', 'get_dummies', 'describe', 'describe', 'transform', 'corr', 'round', 'round', 'round', 'round', 'add', 'add', 'add', 'add', 'add', 'round', 'mean', 'transform', 'mean', 'round', 'sum', 'isnull', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'tensorflow'] ['train_test_split', 'StandardScaler', 'GridSearchCV', 'Pipeline', 'KNNImputer', 'mean_absolute_error', 'r2_score', 'LinearRegression', 'DecisionTreeRegressor', 'RandomForestRegressor', 'XGBRFRegressor']Dict:{'pandas': ['get_dummies', 'read_csv', 'isnull'], 'numpy': ['mean', 'add', 'sum', 'round', 'info'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'sklearn': [], 'tensorflow': ['round', 'add'], '=': [], 'best_regressor': [], 'xgboost': []} axis_0: 3, axis_1: 0
moa-keras-newbaseline-initializers-featureseng.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'transform', 'transform', 'concat', 'transform', 'transform', 'concat', 'transform', 'transform', 'transform', 'transform', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'transform', 'transform', 'concat', 'concat', 'copy', 'copy', 'copy', 'reset_index', 'drop', 'reset_index', 'drop', 'drop', 'copy', 'map', 'get_dummies', 'describe', 'mean', 'std', 'min', 'max', 'clip', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'astype', 'mean', 'copy', 'items', 'items', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'to_csv', 'to_csv'] ['sys', 'warnings', 'numpy', 'pandas', 'tensorflow', 'tensorflow.keras.layers', 'tensorflow.keras.models', 'tensorflow.keras.backend', 'tensorflow_addons', 'math', 'random', 'os', 'torch', 'seaborn', 'matplotlib.pyplot', 'seaborn', 'matplotlib.pyplot', 'matplotlib.pyplot'] ['MultilabelStratifiedKFold', 'ReduceLROnPlateau', 'ModelCheckpoint', 'EarlyStopping', 'LearningRateScheduler', 'BinaryCrossentropy', 'VarianceThreshold', 'QuantileTransformer', 'KFold', 'log_loss', 'preprocessing', 'PCA', 'TruncatedSVD', 'tqdm']Dict:{'sys': [], 'iterstrat': [], 'warnings': [], 'numpy': ['mean', 'add', 'max', 'min', 'clip', 'std', 'copy'], 'pandas': ['concat', 'get_dummies', 'read_csv'], 'tensorflow': [], 'tensorflow_addons': [], 'sklearn': ['transform'], 'tqdm': [], 'math': [], 'random,': [], 'os,': [], 'torch': ['mean', 'add', 'max', 'concat', 'min', 'clip', 'std'], 'seaborn': [], 'matplotlib': []} axis_0: 6, axis_1: 13
light-gbm-on-stratified-k-folds-malwares.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'astype', 'read_csv', 'astype', 'astype', 'astype', 'unique', 'unique', 'unique', 'transform', 'transform', 'rename', 'reset_index', 'aggregate', 'groupby', 'rename', 'reset_index', 'aggregate', 'groupby', 'replace', 'merge', 'reset_index', 'astype', 'astype', 'replace', 'merge', 'astype', 'astype', 'replace', 'merge', 'array', 'transform', 'transform', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'lightgbm', 'gc'] ['vstack', 'csr_matrix', 'save_npz', 'load_npz', 'StratifiedKFold', 'KFold', 'OneHotEncoder', 'LabelEncoder', 'feature_selection', 'model_selection', 'metrics', 'BaseEstimator', 'TransformerMixin', 'check_array', 'sparse', 'StandardScaler', 'shuffle', 'Pipeline', 'FeatureUnion']Dict:{'pandas': ['array', 'merge', 'unique', 'read_csv'], 'numpy': ['max', 'sum', 'min', 'unique', 'array'], 'lightgbm': [], 'scipy': [], 'sklearn': [], 'gc': []} axis_0: 0, axis_1: 2
mohs-hardness-prediction-with-ensemble.py : ['sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'read_csv', 'mean', 'median', 'mean', 'median', 'boxplot', 'drop', 'corr', 'min', 'max', 'min', 'max'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'math', 'warnings', 'matplotlib.pyplot'] ['HTML', 'tqdm', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'train_test_split', 'StandardScaler', 'RandomForestRegressor', 'mean_absolute_error', 'Style', 'Fore', 'train_test_split', 'median_absolute_error', 'CatBoostRegressor', 'XGBRegressor', 'LGBMRegressor', 'median_absolute_error']Dict:{'IPython': [], 'pandas': ['read_csv', 'isnull'], 'numpy': ['transpose', 'median', 'mean', 'max', 'sum', 'min'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'gc': [], 'tqdm': [], 'math': [], 'sklearn': [], 'colorama': [], 'warnings': [], 'catboost': [], 'xgboost': [], 'lightgbm': []} axis_0: 0, axis_1: 0
eda-en-text-normalization.py : ['read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'unique', 'unique', 'count', 'groupby', 'describe', 'count', 'groupby', 'describe', 'max', 'join', 'min', 'join', 'median', 'join', 'unique', 'unique', 'count', 'groupby', 'head', 'sort_values', 'count', 'groupby', 'head', 'sort_values', 'count', 'groupby', 'unique', 'head', 'sort_values', 'count', 'groupby', 'unique', 'head', 'sort_values', 'count', 'groupby', 'value_counts', 'head', 'sort_values', 'count', 'groupby', 'unique', 'unique', 'unique', 'unique', 'sum', 'groupby', 'head', 'describe', 'join', 'join', 'apply', 'head', 'unstack', 'value_counts', 'groupby', 'describe', 'fillna', 'applymap', 'isin', 'join', 'join'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] ['check_output']Dict:{'numpy': ['median', 'max', 'sum', 'min', 'unique', 'isin'], 'pandas': ['unique', 'read_csv', 'value_counts'], 'seaborn': [], 'matplotlib': [], 'subprocess': []} axis_0: 0, axis_1: 0
oemc-baseline-tf-feature-engineering-eda.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'sum', 'isna', 'info', 'corr', 'corr', 'corr', 'drop'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'tensorflow'] []Dict:{'numpy': ['info', 'sum'], 'pandas': ['isna', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'tensorflow': []} axis_0: 0, axis_1: 1
jpx-feature-engineering.py : ['select_dtypes', 'memory_usage', 'to_numeric', 'memory_usage', 'select_dtypes', 'memory_usage', 'to_numeric', 'memory_usage', 'read_csv', 'to_datetime', 'nunique', 'nunique', 'nunique', 'info', 'info', 'dropna', 'to_datetime', 'apply', 'drop', 'apply', 'get_dummies', 'drop', 'join', 'drop', 'map', 'map', 'map', 'shift', 'shift', 'shift', 'shift', 'shift', 'shift', 'shift', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'ewm', 'mean', 'ewm', 'mean', 'ewm', 'mean', 'ewm', 'mean', 'ewm', 'shift', 'drop', 'set_index', 'unique', 'isin', 'isin', 'isin', 'nunique', 'isin', 'nunique', 'isin', 'nunique', 'nunique', 'isin', 'nunique', 'nunique', 'isin', 'to_csv', 'to_csv', 'to_csv'] ['os', 'warnings', 'matplotlib.pyplot', 'numpy', 'pandas', 'time', 'pandas_profiling', 'seaborn', 'gc'] ['Path', 'pyplot', 'init_notebook_mode', 'iplot', 'display', 'HTML', 'monthcalendar']Dict:{'os': [], 'warnings': [], 'pathlib': [], 'matplotlib': [], 'numpy': ['mean', 'isin', 'info', 'unique'], 'pandas': ['read_csv', 'get_dummies', 'to_numeric', 'unique', 'to_datetime'], 'time': [], 'pandas_profiling': [], 'seaborn': [], 'plotly': [], 'IPython': [], 'gc': [], '': [], 'calendar': []} axis_0: 0, axis_1: 3
feature-engineering-lightgbm-exploring-performance.py : ['read_csv', 'head', 'read_csv', 'sample', 'read_csv', 'replace', 'replace', 'replace', 'replace', 'join', 'set_index', 'sample', 'duplicated', 'isin', 'unique', 'agg', 'groupby', 'read_csv', 'replace', 'query', 'isin', 'unique', 'to_datetime', 'astype', 'transform', 'groupby', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'date_range', 'join', 'set_index', 'reset_index', 'agg', 'groupby', 'head', 'query', 'rename', 'reset_index', 'agg', 'groupby', 'sample', 'unique', 'unique', 'unique', 'array', 'head', 'fillna', 'concat', 'reset_index', 'fillna', 'merge', 'merge', 'merge', 'drop', 'read_csv', 'array', 'unique', 'unique', 'reset_index', 'agg', 'groupby', 'rename', 'agg', 'groupby', 'join', 'merge', 'fillna', 'pivot', 'astype', 'join', 'dropna', 'replace', 'isin', 'isin', 'isin', 'head', 'merge', 'drop', 'head', 'astype', 'transform', 'groupby', 'head', 'clip', 'astype', 'astype', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'astype', 'transform', 'groupby', 'reset_index', 'agg', 'groupby', 'query', 'merge', 'fillna', 'reset_index', 'agg', 'groupby', 'merge', 'rename', 'reset_index', 'mean', 'groupby', 'query', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'astype', 'fillna', 'items', 'isna', 'isna', 'isna', 'reset_index', 'agg', 'groupby', 'query', 'concat', 'merge', 'fillna', 'fillna', 'rename', 'reset_index', 'agg', 'groupby', 'query', 'concat', 'merge', 'astype', 'astype', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'apply', 'update', 'items', 'query', 'astype', 'drop', 'join', 'concat', 'astype', 'to_pickle', 'read_pickle', 'isin', 'drop', 'reset_index', 'read_csv', 'clip', 'to_csv', 'read_csv', 'read_csv', 'replace', 'replace', 'join', 'set_index', 'read_csv', 'replace', 'isin', 'clip', 'clip', 'clip', 'reset_index', 'agg', 'groupby', 'agg', 'groupby', 'query', 'agg', 'groupby', 'query', 'mean', 'mean', 'mean', 'mean', 'query', 'mean', 'query', 'mean', 'astype', 'date_range', 'sample', 'drop', 'reset_index', 'agg', 'groupby', 'read_pickle', 'head', 'sort_values', 'join', 'join', 'agg', 'groupby', 'query', 'isin', 'unique', 'rename', 'agg', 'groupby', 'head', 'sort_values', 'join', 'join', 'agg', 'groupby', 'isin', 'unique', 'agg', 'groupby', 'rename', 'head', 'sort_values', 'join', 'join', 'agg', 'groupby', 'isin', 'unique', 'agg', 'groupby', 'rename', 'head', 'rename', 'sort_values', 'query', 'join', 'join', 'isin', 'unique', 'isin', 'unique', 'agg', 'groupby', 'rename', 'rename', 'agg', 'groupby', 'head', 'rename', 'sort_values', 'query', 'join', 'isin', 'unique', 'rename', 'agg', 'groupby'] ['pandas', 'numpy', 'category_encoders', 'warnings', 'gc', 'pandas', 'numpy', 'lightgbm', 'shap', 'plotly.graph_objects', 'warnings'] ['product', 'Counter', 'KMeans', 'LabelEncoder', 'make_subplots']Dict:{'pandas': ['to_pickle', 'isna', 'to_datetime', 'read_csv', 'date_range', 'concat', 'read_pickle', 'unique', 'array', 'merge', 'pivot'], 'numpy': ['mean', 'unique', 'clip', 'isin', 'array'], 'itertools': [], 'collections': ['items', 'update'], 'sklearn': ['transform'], 'category_encoders': [], 'warnings': [], 'gc': [], 'lightgbm': [], 'shap': [], 'plotly': []} axis_0: 0, axis_1: 1
predictive-analysis-with-different-approaches.py : ['read_csv', 'melt', 'astype', 'astype', 'median', 'groupby', 'mean', 'groupby', 'join', 'join', 'set_index', 'reset_index', 'apply', 'head', 'mean', 'groupby', 'median', 'groupby', 'std', 'groupby', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'reset_index', 'mean', 'groupby', 'pivot', 'sort_index', 'reset_index', 'mean', 'groupby', 'pivot', 'sort_index', 'dropna', 'reset_index', 'apply', 'apply', 'drop', 'head', 'reset_index', 'copy', 'max', 'head', 'array', 'reset_index', 'concat', 'tail', 'tail', 'tail', 'tail', 'tail', 'tail', 'tail', 'tail', 'apply', 'reset_index', 'concat', 'join', 'join', 'reset_index', 'drop', 'mean', 'groupby', 'reset_index', 'merge', 'concat', 'array', 'sort_values', 'sort_values', 'set_index', 'items', 'set_index', 'copy', 'reset_index', 'array', 'array', 'add', 'add', 'array'] ['pandas', 'numpy', 'warnings', 'scipy', 'statsmodels.api', 'matplotlib.pyplot', 'seaborn'] ['timedelta', 'rcParams', 'adfuller', 'lagmat', 'LinearRegression', 'RidgeCV', 'RandomForestRegressor', 'r2_score', 'ExtraTreesRegressor', 'GradientBoostingRegressor', 'BaggingRegressor', 'AdaBoostRegressor', 'mean_absolute_error', 'r2_score', 'Prophet', 'Sequential', 'Dense']Dict:{'pandas': ['read_csv', 'melt', 'concat', 'array', 'merge', 'pivot'], 'numpy': ['mean', 'median', 'max', 'add', 'array', 'std', 'copy'], 'warnings': [], 'scipy': [], 'datetime': ['max'], 'pylab': ['items', 'copy'], 'statsmodels': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'fbprophet': [], 'keras': []} axis_0: 0, axis_1: 1
feature-engineering-and-model-890-features.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'value_counts', 'value_counts', 'map', 'map', 'map', 'map', 'map', 'astype', 'to_datetime', 'to_datetime', 'groupby', 'query', 'sum', 'sum', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'mean', 'update', 'keys', 'groupby', 'groupby', 'value_counts', 'to_csv', 'value_counts', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'sum', 'transform', 'groupby', 'sum', 'sum', 'head'] ['numpy', 'pandas', 'os', 'lightgbm', 'gc', 'json'] ['time', 'tqdm_notebook', 'Counter', 'stats', 'cohen_kappa_score', 'KFold', 'StratifiedKFold']Dict:{'numpy': ['mean', 'sum', 'unique', 'copy'], 'pandas': ['to_datetime', 'unique', 'read_csv', 'value_counts'], 'os': [], 'time': [], 'tqdm': ['update'], 'collections': ['keys', 'update', 'copy'], 'scipy': [], 'lightgbm': [], 'sklearn': [], 'gc': [], 'json': []} axis_0: 1, axis_1: 0
commonlit-multioutputregressor-regressorchain.py : ['read_csv', 'head', 'info', 'read_csv', 'head', 'info', 'value_counts', 'value_counts', 'merge', 'head', 'to_string', 'mean', 'mean', 'array', 'array', 'hist', 'hist', 'mean', 'std', 'skew', 'kurt', 'mean', 'std', 'skew', 'kurt', 'corr', 'hist', 'hist', 'mean', 'std', 'skew', 'kurt', 'mean', 'std', 'skew', 'kurt', 'corr', 'hist', 'mean', 'std', 'skew', 'kurt', 'corr', 'corr', 'map', 'apply', 'join', 'map', 'apply', 'read_json', 'keys', 'apply', 'apply', 'map', 'mean', 'head', 'map', 'apply', 'apply', 'map', 'apply', 'head', 'drop', 'drop', 'copy', 'copy', 'head', 'copy', 'copy', 'nunique', 'min', 'max', 'copy', 'copy', 'nunique', 'mean', 'std', 'head', 'corr', 'transform', 'transform', 'head', 'corr', 'keys', 'mean', 'std', 'keys', 'mean', 'std', 'keys', 'mean', 'std', 'to_string'] ['os', 'random', 'time', 'psutil', 'math', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'nltk'] ['absolute', 'mean', 'std', 'train_test_split', 'PCA', 'stopwords', 'RegexpTokenizer', 'LinearRegression', 'SGDRegressor', 'Ridge', 'KNeighborsRegressor', 'DecisionTreeRegressor', 'LinearSVR', 'RandomForestRegressor', 'AdaBoostRegressor', 'ExtraTreesRegressor', 'XGBRegressor', 'mean_squared_error', 'cross_val_score', 'RepeatedKFold', 'MultiOutputRegressor', 'RegressorChain']Dict:{'os,': [], 'random,': [], 'time,': [], 'psutil,': [], 'math': [], 'numpy': [], 'pandas': ['read_csv', 'read_json', 'value_counts', 'array', 'merge'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 'nltk': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 0
credit-card-balance-feature-engineering.py : ['read_csv', 'rename', 'reset_index', 'nunique', 'groupby', 'merge', 'rename', 'reset_index', 'nunique', 'groupby', 'merge', 'rename', 'reset_index', 'max', 'groupby', 'rename', 'reset_index', 'sum', 'groupby', 'merge', 'astype', 'max', 'max', 'rename', 'reset_index', 'apply', 'groupby', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'rename', 'reset_index', 'apply', 'groupby', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'rename', 'reset_index', 'apply', 'groupby', 'merge', 'rename', 'reset_index', 'sum', 'groupby', 'merge', 'rename', 'reset_index', 'sum', 'groupby', 'merge', 'rename', 'reset_index', 'mean', 'groupby', 'merge', 'rename', 'reset_index', 'sum', 'groupby', 'merge', 'rename', 'reset_index', 'sum', 'groupby', 'merge', 'rename', 'reset_index', 'mean', 'groupby', 'merge'] ['numpy', 'pandas', 'sys', 'warnings', 'gc'] []Dict:{'numpy': ['mean', 'sum', 'max'], 'pandas': ['merge', 'read_csv'], 'sys': [], 'warnings': [], 'gc': []} axis_0: 0, axis_1: 0
titanic-eda-visualization-prediction.py : ['join', 'read_csv', 'read_csv', 'head', 'describe', 'info', 'value_counts', 'value_counts', 'hist', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'items', 'reset_index', 'drop', 'reset_index', 'concat', 'head', 'any', 'isnull', 'sum', 'isnull', 'isnull', 'boxplot', 'fillna', 'isnull', 'isnull', 'mean', 'fillna', 'mean', 'isnull', 'corr', 'map', 'map', 'hist', 'map', 'map', 'isnull', 'corr', 'isnull', 'median', 'median', 'isnull', 'head', 'head', 'replace', 'head', 'drop', 'head', 'get_dummies', 'head', 'head', 'head', 'head', 'get_dummies', 'head', 'head', 'get_dummies', 'head', 'head', 'replace', 'replace', 'replace', 'replace', 'head', 'head', 'get_dummies', 'head', 'astype', 'get_dummies', 'head', 'astype', 'get_dummies', 'head', 'drop', 'drop', 'head', 'drop', 'astype', 'concat', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'os'] ['Counter', 'train_test_split', 'StratifiedKFold', 'GridSearchCV', 'LogisticRegression', 'SVC', 'RandomForestClassifier', 'VotingClassifier', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'accuracy_score']Dict:{'numpy': ['mean', 'median', 'any', 'sum', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'collections': ['items'], 'warnings': [], '#': [], "don't": [], 'show': [], 'os': ['replace'], 'sklearn': []} axis_0: 0, axis_1: 0
eda-and-models.py : ['to_json', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'max', 'apply', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'groupby', 'abs', 'mean', 'map', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'rank', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'head', 'head', 'sum', 'any', 'isnull', 'nunique', 'nunique', 'hist', 'head', 'value_counts', 'head', 'value_counts', 'hist', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'value_counts', 'hist', 'hist', 'rename', 'reset_index', 'value_counts', 'rename', 'reset_index', 'value_counts', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'sum', 'isnull', 'sum', 'isnull', 'value_counts', 'value_counts', 'drop', 'drop', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'drop', 'sort_values', 'sort_values', 'drop', 'replace', 'to_csv', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'eli5', 'shap', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'altair'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit', 'metrics', 'linear_model', 'HTML', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'product', 'v5', 'HTML']Dict:{'numpy': ['mean', 'any', 'max', 'abs', 'sum', 'min', 'isin', 'std'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'merge'], 'os': ['rename', 'replace'], 'matplotlib': ['hist'], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'catboost': [], 'gc': [], 'seaborn': [], 'warnings': [], 'eli5': [], 'shap': [], 'IPython': [], 'json': [], 'altair': [], 'networkx': [], 'numba': [], 'itertools': []} axis_0: 2, axis_1: 5
knn-impute-voting-xgb-lgbm-cat.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'head', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'tail', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'hist', 'clip', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'head', 'hist', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'last', 'groupby', 'mean', 'groupby', 'join', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'tail', 'to_dict', 'set_index', 'copy', 'map', 'tail', 'to_csv', 'read_csv', 'iterrows', 'to_csv', 'head', 'tail'] ['gc', 'numpy', 'pandas', 'lightgbm', 'xgboost', 'catboost'] ['tqdm', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'unique', 'clip', 'isin', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'tqdm': []} axis_0: 0, axis_1: 0
classif-titanic-classification-survival-preds.py : ['join', 'read_csv', 'head', 'info', 'count', 'groupby', 'count', 'groupby', 'count', 'groupby', 'drop', 'head', 'sum', 'isnull', 'fillna', 'mean', 'fillna', 'sum', 'isnull', 'drop', 'factorize', 'read_csv', 'info', 'drop', 'sum', 'isnull', 'fillna', 'mean', 'fillna', 'mean', 'factorize', 'to_csv', 'to_csv', 'copy', 'map', 'mean', 'std', 'map', 'mean', 'std', 'astype', 'head', 'array', 'array', 'read_csv', 'head', 'drop', 'mean', 'groupby', 'mean', 'groupby', 'isnull', 'fillna', 'mean', 'info', 'fillna', 'mean', 'info', 'pivot_table', 'where', 'isnull', 'sum', 'isnull', 'drop', 'array', 'map', 'fillna', 'drop', 'head', 'head', 'drop'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['train_test_split', 'mutual_info_classif', 'RandomForestClassifier', 'accuracy_score', 'confusion_matrix', 'precision_score', 'roc_auc_score', 'roc_curve', 'GradientBoostingClassifier', 'KMeans', 'cross_val_score']Dict:{'numpy': ['mean', 'sum', 'array', 'where', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'pivot_table', 'factorize', 'array'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'os': []} axis_0: 0, axis_1: 7
predict-future-sales.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'set_index', 'read_csv', 'head', 'nunique', 'nunique', 'nunique', 'nunique', 'sum', 'isnull', 'sum', 'groupby', 'sum', 'groupby', 'hist', 'clip', 'boxplot', 'min', 'max', 'boxplot', 'median', 'map', 'map', 'map', 'drop', 'array', 'unique', 'unique', 'astype', 'astype', 'astype', 'sort_values', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'clip', 'fillna', 'astype', 'astype', 'astype', 'concat', 'fillna', 'merge', 'merge', 'merge', 'astype', 'astype', 'astype', 'astype', 'copy', 'merge', 'reset_index', 'sum', 'groupby', 'max', 'copy', 'rename', 'merge', 'fillna', 'sum', 'sum', 'apply', 'replace', 'mean', 'mean', 'merge', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'apply', 'astype', 'fillna', 'drop', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'agg', 'groupby', 'reset_index', 'merge', 'astype', 'astype', 'drop', 'astype', 'max', 'groupby', 'astype', 'merge', 'max', 'groupby', 'astype', 'merge', 'transform', 'groupby', 'transform', 'groupby', 'to_pickle', 'read_pickle', 'head', 'drop', 'drop', 'drop', 'clip', 'clip', 'to_csv', 'to_csv', 'read_pickle', 'fillna', 'fillna', 'fillna', 'clip', 'clip', 'to_csv', 'to_csv', 'clip', 'clip', 'to_csv', 'to_csv', 'read_pickle', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'time', 'sys', 'gc', 'pickle', 'numpy', 'pandas', 'time', 'sys', 'gc', 'pickle', 'numpy', 'pandas', 'tensorflow', 'numpy', 'pandas', 'time', 'sys', 'gc', 'pickle', 'numpy', 'pandas', 'gc'] ['product', 'LabelEncoder', 'LGBMRegressor', 'mean_squared_error', 'Model', 'Input', 'Dense', 'Dropout', 'l2', 'l1', 'RMSprop', 'Adam', 'XGBRegressor', 'mean_squared_error', 'Ridge', 'LinearRegression']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'min', 'unique', 'clip', 'array', 'copy'], 'pandas': ['to_pickle', 'read_csv', 'isnull', 'concat', 'read_pickle', 'unique', 'array', 'merge'], 'itertools': [], 'sklearn': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'time': [], 'sys': [], 'gc': [], 'pickle': [], 'lightgbm': [], 'keras': [], 'tensorflow': ['unique', 'concat'], 'xgboost': ['apply']} axis_0: 0, axis_1: 12
spaceship-titanic-beginner-friendly-tutorial.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'describe', 'mean', 'isna', 'value_counts', 'value_counts', 'fillna', 'astype', 'mean', 'isna', 'value_counts', 'value_counts', 'value_counts', 'mean', 'crosstab', 'crosstab', 'sum', 'sum', 'value_counts', 'to_csv'] ['os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['LabelEncoder', 'StandardScaler', 'KNNImputer', 'Pipeline', 'train_test_split', 'accuracy_score', 'precision_score', 'recall_score', 'f1_score', 'roc_auc_score', 'XGBClassifier', 'CatBoostClassifier', 'SVC', 'VotingClassifier']Dict:{'os': [], 'numpy': ['mean', 'sum'], 'pandas': ['isna', 'crosstab', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'xgboost': [], 'catboost': []} axis_0: 0, axis_1: 2
feature-engineering-training-with-ta.py : ['to_datetime', 'sort_values', 'cumprod', 'map', 'sort_values', 'ffill', 'sort_values', 'reset_index', 'apply', 'groupby', 'set_index', 'read_csv', 'info', 'head', 'copy', 'copy', 'copy', 'fillna', 'replace', 'drop', 'unique', 'concat', 'tail', 'copy', 'dropna', 'dropna', 'isin', 'isin', 'all', 'concat', 'concat', 'concat', 'concat', 'copy', 'sort_values', 'sort_values', 'apply', 'groupby', 'tail', 'min', 'max', 'sum', 'sort_values', 'mean', 'sum', 'sort_values', 'mean', 'apply', 'groupby', 'mean', 'std', 'min', 'max', 'sum', 'sort_values', 'mean', 'sum', 'sort_values', 'mean', 'apply', 'groupby', 'cumsum'] ['os', 'numpy', 'pandas', 'ta', 'matplotlib.pyplot', 'matplotlib'] ['ROUND_HALF_UP', 'Decimal', 'LGBMRegressor', 'tqdm', 'add_all_ta_features', 'dropna']Dict:{'os': ['replace'], 'decimal': ['min', 'max'], 'numpy': ['mean', 'cumprod', 'max', 'sum', 'all', 'min', 'unique', 'isin', 'info', 'std', 'cumsum', 'copy'], 'pandas': ['concat', 'to_datetime', 'unique', 'read_csv'], 'lightgbm': [], 'tqdm': [], 'ta': [], 'matplotlib': []} axis_0: 0, axis_1: 1
exploration-of-data-step-by-step.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'drop', 'info', 'sort_index', 'value_counts', 'apply', 'sort_index', 'value_counts', 'unique', 'sort_index', 'value_counts', 'items', 'join', 'fillna', 'join', 'fillna', 'value_counts', 'sort_index', 'value_counts', 'fillna', 'fillna', 'fillna', 'sum', 'sum', 'crosstab', 'tail', 'value_counts', 'apply', 'unique', 'apply', 'head', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sum', 'sum', 'apply', 'join', 'apply', 'join', 'apply', 'join', 'apply', 'join', 'apply', 'join', 'apply', 'join', 'join', 'fillna', 'join', 'fillna', 'join', 'fillna', 'join', 'fillna', 'head', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'replace', 'replace', 'replace', 'isin', 'value_counts', 'unique', 'unique', 'value_counts', 'join', 'unique', 'unique', 'value_counts', 'isin', 'join', 'fillna', 'join', 'fillna', 'join', 'fillna', 'join', 'fillna', 'iterrows', 'sample', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'isin', 'value_counts', 'head', 'head', 'value_counts', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'head', 'sort_values', 'hist', 'apply', 'join', 'apply', 'join', 'apply', 'join', 'head', 'value_counts', 'isin', 'value_counts', 'head', 'value_counts', 'isin', 'value_counts', 'value_counts', 'max', 'head', 'value_counts', 'isin', 'value_counts', 'hist', 'join', 'fillna', 'fillna', 'transform', 'fillna', 'fillna', 'fillna', 'fillna', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'astype', 'astype', 'drop', 'rank', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'json', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'random', 'warnings', 'os', 'scipy', 'langdetect', 'eli5'] ['Image', 'WordCloud', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'mean_squared_error', 'roc_auc_score', 'LogisticRegression', 'LogisticRegressionCV', 'CatBoostClassifier', 'tqdm_notebook', 'partial', 'sqrt', 'Counter', 'confusion_matrix', 'TfidfVectorizer', 'TweetTokenizer', 'RandomForestClassifier', 'display', 'cohen_kappa_score']Dict:{'numpy': ['mean', 'max', 'sum', 'unique', 'isin', 'info', 'std'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'crosstab'], 'os': ['replace'], 'json': [], 'seaborn': [], 'matplotlib': ['hist'], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'PIL': [], 'wordcloud': [], 'sklearn': [], 'gc': [], 'catboost': [], 'tqdm': [], 'plotly': [], 'random': ['sample'], 'warnings': [], 'functools': [], 'scipy': [], 'math': [], 'collections': ['items'], 'nltk': [], 'langdetect': [], 'eli5': [], 'IPython': []} axis_0: 1, axis_1: 2
keras-resnet-tta.py : ['read_csv', 'join', 'read_csv', 'join', 'nunique', 'value_counts', 'iterrows', 'join', 'head', 'head', 'head', 'head', 'head', 'sample', 'iterrows', 'join', 'unique', 'iterrows', 'sample', 'iterrows', 'join', 'head', 'any', 'any', 'any', 'any', 'any', 'any', 'any', 'any', 'any', 'any', 'stack', 'astype', 'mean', 'mean', 'stack', 'unique', 'iterrows', 'sample', 'apply', 'apply', 'astype', 'astype', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'keys', 'max', 'min', 'mean', 'apply', 'to_csv', 'value_counts'] ['numpy', 'pandas', 'os', 'cv2', 'PIL', 'gc', 'psutil', 'matplotlib.pyplot', 'math', 'sys', 'gc', 'keras'] ['train_test_split', 'set_random_seed', 'tqdm', 'ceil', 'ImageDataGenerator', 'load_img', 'array_to_img', 'img_to_array', 'ResNet50', 'preprocess_input', 'Model', 'Sequential', 'Conv2D', 'MaxPooling2D', 'GlobalAveragePooling2D', 'Input', 'Dropout', 'Flatten', 'Dense', 'ModelCheckpoint', 'ReduceLROnPlateau', 'EarlyStopping', 'softmax', 'elu', 'relu', 'Adam', 'RMSprop', 'SGD', 'BatchNormalization', 'tqdm']Dict:{'numpy': ['mean', 'stack', 'add', 'any', 'max', 'min', 'unique'], 'pandas': ['unique', 'read_csv', 'value_counts'], 'os': [], 'cv2': [], 'PIL': [], 'gc': [], 'psutil': [], 'matplotlib': [], 'sklearn': [], 'tensorflow': [], 'tqdm': [], 'math': [], 'sys': [], 'keras': []} axis_0: 2, axis_1: 4
amex-bruteforce-feature-engineering.py : ['groupby', 'astype', 'diff', 'read_parquet', 'drop', 'agg', 'groupby', 'join', 'reset_index', 'replace', 'replace', 'replace', 'agg', 'groupby', 'join', 'reset_index', 'read_csv', 'astype', 'astype', 'merge', 'merge', 'merge', 'read_parquet', 'agg', 'groupby', 'join', 'reset_index', 'replace', 'replace', 'replace', 'agg', 'groupby', 'join', 'reset_index', 'astype', 'astype', 'merge', 'merge', 'to_parquet', 'to_parquet', 'read_parquet', 'read_parquet', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'cumsum', 'sum', 'sum', 'sum', 'cumsum', 'sum', 'sum', 'sum', 'transform', 'round', 'round', 'astype', 'astype', 'to_csv', 'to_csv', 'read_csv', 'to_csv'] ['gc', 'os', 'joblib', 'random', 'warnings', 'itertools', 'scipy', 'numpy', 'pandas', 'lightgbm', 'warnings', 'os', 'pandas'] ['tqdm', 'combinations', 'LabelEncoder', 'StratifiedKFold', 'train_test_split']Dict:{'gc': [], 'os': ['replace'], 'joblib': [], 'random': [], 'warnings': [], 'itertools': [], 'scipy': [], 'numpy': ['transpose', 'sum', 'where', 'round', 'diff', 'array', 'cumsum'], 'pandas': ['read_parquet', 'array', 'merge', 'read_csv'], 'tqdm': [], 'lightgbm': [], 'sklearn': [], 'warnings;': []} axis_0: 0, axis_1: 0
tensorflow-deep-learning-to-solve-titanic.py : ['read_csv', 'read_csv', 'drop', 'head', 'head', 'concat', 'get_dummies', 'drop', 'head', 'transform', 'head', 'head', 'drop', 'bool', 'round', 'astype', 'copy', 'to_csv'] ['tensorflow', 'numpy', 'pandas', 'matplotlib.pyplot'] ['Imputer', 'LabelEncoder', 'MinMaxScaler', 'LabelBinarizer', 'train_test_split', 'namedtuple', 'Binarizer']Dict:{'tensorflow': ['round', 'bool', 'concat'], 'numpy': ['round', 'copy'], 'pandas': ['concat', 'get_dummies', 'read_csv'], 'matplotlib': [], 'sklearn': ['transform'], 'collections': []} axis_0: 0, axis_1: 4
data-exploration-with-python.py : ['read_csv', 'describe', 'skew', 'kurt', 'concat', 'concat', 'concat', 'boxplot', 'concat', 'boxplot', 'corr', 'nlargest', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'drop', 'drop', 'isnull', 'max', 'sum', 'isnull', 'concat', 'sort_values', 'drop', 'drop', 'concat', 'get_dummies'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'warnings'] ['norm', 'StandardScaler', 'stats']Dict:{'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'numpy': ['sum', 'max'], 'scipy': ['describe', 'skew'], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 7
lgb-featureengineering-lb-0-940.py : ['read_csv', 'reset_index', 'dropna', 'to_csv', 'read_csv', 'read_csv', 'read_csv', 'mean', 'std', 'astype', 'round', 'clip', 'reset_index', 'reset_index', 'drop', 'drop', 'astype', 'round', 'clip', 'astype', 'round', 'clip', 'sort_values', 'astype', 'round', 'clip', 'read_csv', 'astype', 'round', 'clip', 'array', 'round', 'astype', 'round', 'clip', 'array', 'round', 'to_csv', 'head', 'read_csv', 'array', 'round', 'to_csv', 'head'] ['numpy', 'pandas', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'time', 'xgboost', 'datetime', 'gc', 'pandas', 'joblib'] ['*', 'f1_score', 'Pool', 'CatBoostRegressor', 'KFold', 'model_selection']Dict:{'numpy': ['mean', 'std', 'round', 'clip', 'array'], 'pandas': ['array', 'read_csv'], 'sklearn': [], 'lightgbm': [], 'matplotlib': [], 'seaborn': [], 'time': [], 'xgboost': [], 'catboost': [], 'datetime': [], 'gc': [], 'joblib': []} axis_0: 2, axis_1: 2
house-pricing-feature-engineering.py : ['read_csv', 'head', 'info', 'hist', 'drop', 'hist', 'drop', 'drop', 'drop', 'drop', 'drop', 'sum', 'isna', 'drop', 'drop', 'drop', 'drop', 'hist', 'median', 'isnull', 'head', 'median', 'median', 'median', 'fillna', 'median', 'sum', 'isna', 'value_counts', 'sum', 'isnull', 'mean', 'isnull', 'drop', 'mode', 'mode', 'mode', 'mode', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'mode', 'mode', 'mode', 'mode', 'median', 'median', 'mode', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'hist', 'hist', 'value_counts', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'median', 'fillna', 'median', 'fillna', 'sum', 'isna', 'mode', 'fillna', 'fillna', 'median', 'mode', 'fillna', 'sum', 'isna', 'drop', 'read_csv', 'head', 'sum', 'isna', 'drop', 'drop', 'drop', 'drop', 'drop', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'hist', 'median', 'fillna', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'hist', 'hist', 'value_counts', 'hist', 'hist', 'hist', 'hist', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'median', 'fillna', 'median', 'fillna', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'fillna', 'mean', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'sum', 'isna', 'drop', 'to_csv', 'to_csv'] ['pandas', 'numpy', 'missingno', 'seaborn', 'matplotlib.pyplot'] ['mutual_info_regression']Dict:{'pandas': ['isna', 'value_counts', 'read_csv', 'isnull'], 'numpy': ['mean', 'median', 'info', 'sum'], 'missingno': [], 'seaborn': [], 'matplotlib': ['hist'], 'sklearn': []} axis_0: 0, axis_1: 12
earthquakes-fe-more-features-and-samples.py : ['array', 'abs', 'cumsum', 'copy', 'mean', 'std', 'max', 'min', 'sum', 'sum', 'abs', 'diff', 'mean', 'mean', 'std', 'max', 'min', 'mean', 'diff', 'max', 'abs', 'min', 'abs', 'std', 'std', 'std', 'std', 'mean', 'mean', 'mean', 'mean', 'min', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'max', 'abs', 'min', 'max', 'abs', 'min', 'abs', 'sum', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'abs', 'quantile', 'abs', 'quantile', 'abs', 'quantile', 'abs', 'mean', 'abs', 'std', 'abs', 'kurtosis', 'skew', 'median', 'mean', 'abs', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'rolling', 'ewm', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'mean', 'mean', 'std', 'rolling', 'drop', 'subtract', 'quantile', 'quantile', 'dropna', 'std', 'rolling', 'dropna', 'mean', 'rolling', 'mean', 'std', 'max', 'min', 'quantile', 'quantile', 'quantile', 'quantile', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'mean', 'std', 'max', 'min', 'quantile', 'quantile', 'quantile', 'quantile', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'head', 'sort_values', 'abs', 'corrwith', 'head', 'sort_values', 'abs', 'corrwith', 'any', 'isnull', 'mean', 'fillna', 'transform', 'read_csv', 'read_csv', 'mean', 'std', 'max', 'min', 'mean', 'diff', 'max', 'abs', 'min', 'abs', 'std', 'std', 'std', 'std', 'mean', 'mean', 'mean', 'mean', 'min', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'max', 'abs', 'min', 'max', 'abs', 'min', 'abs', 'sum', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'abs', 'quantile', 'abs', 'quantile', 'abs', 'quantile', 'abs', 'mean', 'abs', 'std', 'abs', 'kurtosis', 'skew', 'median', 'mean', 'abs', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'rolling', 'ewm', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'mean', 'mean', 'std', 'rolling', 'mean', 'mean', 'mean', 'std', 'rolling', 'drop', 'subtract', 'quantile', 'quantile', 'dropna', 'std', 'rolling', 'dropna', 'mean', 'rolling', 'mean', 'std', 'max', 'min', 'quantile', 'quantile', 'quantile', 'quantile', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'mean', 'std', 'max', 'min', 'quantile', 'quantile', 'quantile', 'quantile', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'any', 'isnull', 'fillna', 'transform', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'sort_values', 'mean', 'groupby', 'transpose', 'transpose', 'head', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'mean_absolute_error', 'LinearRegression', 'hilbert', 'hann', 'convolve', 'stats', 'KernelRidge']Dict:{'numpy': ['transpose', 'mean', 'median', 'any', 'quantile', 'max', 'abs', 'sum', 'subtract', 'array', 'min', 'isin', 'diff', 'std', 'cumsum', 'copy'], 'pandas': ['concat', 'array', 'read_csv', 'isnull'], 'os': [], 'matplotlib': [], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'catboost': [], 'gc': [], 'seaborn': [], 'warnings': [], 'scipy': ['kurtosis', 'skew']} axis_0: 1, axis_1: 2
titanic-simple-decision-tree-model-score-top-3.py : ['read_csv', 'read_csv', 'set_index', 'set_index', 'concat', 'info', 'sum', 'isna', 'map', 'map', 'corr', 'median', 'groupby', 'fillna', 'transform', 'groupby', 'cut', 'crosstab', 'fillna', 'transform', 'groupby', 'cut', 'crosstab', 'median', 'fillna', 'median', 'sum', 'isna', 'drop', 'value_counts', 'replace', 'replace', 'replace', 'replace', 'unique', 'crosstab', 'drop', 'apply', 'astype', 'groupby', 'transform', 'count', 'fillna', 'mask', 'transform', 'sum', 'fillna', 'mask', 'fillna', 'replace', 'sum', 'isna', 'fillna', 'fillna', 'fillna', 'get_dummies', 'drop', 'drop', 'drop', 'corr', 'sort_values', 'astype', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] ['LabelEncoder', 'OneHotEncoder', 'DecisionTreeClassifier', 'StandardScaler', 'seed']Dict:{'numpy': [], 'pandas': ['isna', 'read_csv', 'cut', 'concat', 'value_counts', 'get_dummies', 'unique', 'crosstab'], 'seaborn': [], 'matplotlib': [], 'sklearn': ['transform'], '=': [], 'pd': [], 'index': [], 'train_names)': [], '0,': [], 'inplace=True,': [], 'ascending': [], 'False)': [], 'importances': [], '': []} axis_0: 3, axis_1: 0
gray-theme-eda-feature-engineering-modeling.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'describe', 'sum', 'isnull', 'value_counts', 'transpose', 'drop', 'drop', 'head', 'head', 'update', 'hist', 'hist', 'corr', 'head', 'sum', 'isnull', 'fillna', 'sum', 'isnull', 'isnull', 'median', 'median', 'sum', 'isnull', 'head', 'transform', 'head', 'concat', 'drop', 'head', 'get_dummies', 'head', 'map', 'map', 'map', 'map', 'head', 'drop', 'mean', 'std', 'mean'] ['numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['StandardScaler', 'OneHotEncoder', 'train_test_split', 'LogisticRegression', 'SVC', 'RandomForestClassifier', 'XGBClassifier', 'LGBMClassifier', 'KNeighborsClassifier', 'f1_score', 'KFold', 'cross_val_score', 'cross_val_predict', 'AdaBoostClassifier']Dict:{'numpy': ['transpose', 'median', 'mean', 'sum', 'std'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': ['hist'], 'seaborn': [], 'warnings': [], '': [], 'sklearn': [], 'xgboost': [], 'lightgbm': []} axis_0: 0, axis_1: 4
tfkeras-dnn-with-multiclass-focal-loss.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'apply', 'nunique', 'groupby', 'drop', 'drop', 'drop', 'map', 'astype', 'astype', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'concat', 'astype', 'set_index', 'drop', 'astype', 'set_index', 'unique', 'transform', 'max', 'max', 'max', 'transform', 'mean', 'std', 'to_csv', 'insert', 'to_csv'] ['os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'tensorflow', 'tensorflow_addons', 'gc'] ['keras', 'plot_model', 'filterwarnings', 'accuracy_score', 'StandardScaler', 'RobustScaler', 'MinMaxScaler', 'QuantileTransformer', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'SparseCategoricalFocalLoss', 'Sequential', 'Model', 'Dense', 'BatchNormalization', 'Flatten', 'Input', 'Concatenate', 'Dropout', 'to_categorical', 'EarlyStopping', 'ReduceLROnPlateau']Dict:{'os': [], 'numpy': ['mean', 'std', 'max', 'sum', 'min', 'unique', 'insert'], 'pandas': ['concat', 'unique', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'tensorflow': [], 'warnings': [], 'sklearn': [], 'focal_loss': [], 'tensorflow_addons': [], 'gc': []} axis_0: 1, axis_1: 12
automated-feature-engineering-basics.py : ['reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'head', 'head', 'head', 'head', 'head', 'head', 'read_csv', 'head', 'sort_values', 'head', 'tail', 'dropna', 'read_csv', 'head', 'reset_index', 'head', 'sort_values', 'read_csv', 'sort_values', 'head', 'get_dummies', 'reset_index', 'sort_values', 'sum', 'head', 'head', 'get_dummies', 'get_dummies', 'align', 'drop'] ['pandas', 'numpy', 'featuretools', 'matplotlib.pyplot', 'seaborn', 'warnings', 'matplotlib.pyplot'] ['selection']Dict:{'pandas': ['get_dummies', 'read_csv'], 'numpy': ['sum'], 'featuretools': [], 'matplotlib': [], 'seaborn': [], 'warnings': []} axis_0: 0, axis_1: 0
tpsjan22-06-lightgbm-quickstart.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'abs', 'abs', 'apply', 'transform', 'apply', 'clip', 'isin', 'map', 'clip', 'map', 'clip', 'astype', 'update', 'mean', 'mean', 'date_range', 'set_index', 'apply', 'array', 'array', 'array', 'copy', 'to_csv', 'hist', 'hist', 'copy', 'round', 'to_csv'] ['numpy', 'pandas', 'lightgbm', 'pickle', 'dateutil.easter', 'optuna'] ['datetime', 'pyplot', 'LabelEncoder', 'GroupKFold']Dict:{'numpy': ['mean', 'abs', 'round', 'clip', 'isin', 'array', 'copy'], 'pandas': ['date_range', 'array', 'read_csv'], 'lightgbm': [], 'pickle': [], 'datetime': [], 'matplotlib': [], 'sklearn': [], 'dateutil': []} axis_0: 0, axis_1: 2
pytorch-model-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'describe', 'info', 'fillna', 'min', 'max', 'std', 'mean', 'std', 'concat', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'fillna', 'fillna', 'apply', 'apply', 'apply', 'drop', 'concat', 'get_dummies', 'drop', 'drop', '__init__', 'mean', 'eval', 'mean', 'drop', 'eval', 'where', 'squeeze', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'tqdm', 'warnings', 'torch', 'torch.nn', 'torch.nn.functional'] ['chain', 'combinations', 'train_test_split', 'OneHotEncoder', 'DataLoader', 'CatBoostEncoder']Dict:{'numpy': ['mean', 'squeeze', 'max', 'where', 'min', 'info', 'std'], 'pandas': ['concat', 'get_dummies', 'eval', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'os,': [], 'tqdm,': [], 'warnings': [], 'itertools': ['__init__'], 'sklearn': ['__init__'], 'torch': ['__init__'], 'category_encoders': []} axis_0: 1, axis_1: 4
lstm-with-bn-nb-svm-lr-on-conv-ai-lb-0-041.py : ['read_csv', 'read_csv', 'copy', 'to_csv'] ['numpy', 'pandas'] []Dict:{'numpy': ['copy']} axis_0: 0, axis_1: 0
xgboost-feature-engineering-tps07.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'info', 'describe', 'copy', 'astype', 'astype', 'astype', 'astype', 'head', 'copy', 'drop', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['stats', 'XGBRegressor']Dict:{'pandas': ['read_csv'], 'numpy': ['info', 'copy'], 'matplotlib': [], 'seaborn': [], 'scipy': ['describe'], 'xgboost': []} axis_0: 0, axis_1: 1
rapids-complete-gpu-pipeline-for-beginners.py : ['read_csv', 'drop', 'fillna', 'astype', 'astype', 'unique', 'unique', 'isin', 'value_counts', 'value_counts', 'isin', 'isin', 'read_csv', 'isin', 'reset_index', 'concat', 'fillna', 'fillna', 'median', 'astype', 'sum', 'sum', 'isna', 'round', 'get_dummies', 'mean', 'std', 'sum', 'isna', 'reset_index', 'reset_index', 'isin', 'mean', 'mean', 'mean', 'mean', 'to_csv'] ['os', 'gc', 'sys', 'random', 'seaborn', 'xgboost', 'matplotlib.pyplot', 'pandas', 'numpy', 'cudf', 'warnings'] ['*', 'LogisticRegression', 'SVC', 'SVR', 'KNeighborsClassifier', 'NearestNeighbors', 'roc_auc_score', 'LabelEncoder', 'MinMaxScaler', 'MBSGDClassifier', 'MultinomialNB', 'StratifiedKFold']Dict:{'os': [], 'gc': [], 'sys': [], 'random': [], 'tqdm': [], 'seaborn': [], 'xgboost': [], 'matplotlib': [], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'get_dummies', 'unique'], 'cudf': [], 'cuml': [], 'sklearn': [], 'warnings': []} axis_0: 6, axis_1: 1
complete-guide-eda-feat-model.py : ['read_csv', 'read_csv', 'sort_values', 'sum', 'isna', 'head', 'dropna', 'describe', 'drop', 'drop', 'notnull', 'apply', 'notnull', 'notnull', 'apply', 'notnull', 'notnull', 'apply', 'notnull', 'notnull', 'apply', 'notnull', 'notnull', 'apply', 'notnull', 'notnull', 'apply', 'notnull', 'apply', 'notnull', 'apply', 'notnull', 'apply', 'notnull', 'head', 'describe', 'isna', 'isna', 'isna', 'isna', 'dropna', 'apply', 'apply', 'head', 'apply', 'apply', 'apply', 'apply', 'value_counts', 'value_counts', 'concat', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'head', 'keys', 'sort_index', 'value_counts', 'apply', 'sort_index', 'value_counts', 'apply', 'apply', 'concat', 'head', 'concat', 'drop', 'concat', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'concat', 'apply', 'apply', 'head', 'apply', 'apply', 'concat', 'head', 'isna', 'to_datetime', 'to_datetime', 'rename', 'get_dummies', 'rename', 'get_dummies', 'concat', 'concat', 'rename', 'get_dummies', 'rename', 'get_dummies', 'concat', 'concat', 'apply', 'apply', 'describe', 'sum', 'groupby', 'where', 'isna', 'where', 'isna', 'where', 'isna', 'where', 'isna', 'where', 'isna', 'where', 'isna', 'where', 'where', 'where', 'where', 'corr', 'drop', 'apply', 'sort_values', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'head'] ['pandas', 'numpy', 'os', 'seaborn', 'matplotlib.pyplot', 'xgboost', 'catboost', 'operator', 'time', 'ast', 'itertools', 'warnings'] ['stats', 'norm', 'skew', 'Counter', 'train_test_split', 'TruncatedSVD', 'Normalizer', 'make_pipeline', 'LabelEncoder', 'OneHotEncoder']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'get_dummies', 'notnull', 'to_datetime'], 'numpy': ['where', 'sum'], 'os': ['rename'], 'seaborn': [], 'scipy': [], 'matplotlib': [], 'xgboost': [], 'catboost': [], 'operator': ['concat'], 'time': [], 'ast': [], 'collections': ['keys'], 'itertools': ['groupby'], 'sklearn': [], 'warnings': []} axis_0: 4, axis_1: 9
getting-started-santander.py : ['read_csv', 'read_csv', 'value_counts', 'count', 'groupby', 'sum', 'groupby', 'map', 'map', 'map', 'replace', 'replace', 'sum', 'last', 'groupby', 'qcut', 'array', 'array', 'mean', 'to_csv', 'read_csv', 'head', 'rank', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'lightgbm', 'keras'] ['Path', 'LogisticRegression', 'StratifiedKFold', 'cross_val_predict', 'roc_auc_score', 'StandardScaler', 'gmean', 'Flatten', 'Conv1D', 'Conv2D', 'Input', 'Dense', 'Dropout', 'BatchNormalization', 'concatenate', 'GaussianNoise', 'Reshape', 'TimeDistributed', 'LeakyReLU', 'PReLU', 'Embedding', 'Model', 'load_model', 'save_model', 'SGD', 'Adam', 'BaseEstimator', 'ClassifierMixin', 'Path', 'Callback']Dict:{'pandas': ['qcut', 'array', 'read_csv', 'value_counts'], 'numpy': ['mean', 'array', 'sum'], 'matplotlib': [], 'seaborn': [], 'pathlib': ['replace'], 'sklearn': [], 'lightgbm': [], 'scipy': [], 'keras': []} axis_0: 0, axis_1: 0
lightgbm-baseline.py : ['mean', 'rolling', 'std', 'rolling', 'mean', 'rolling', 'apply', 'rolling', 'shift', 'sum', 'sum', 'min', 'rolling', 'max', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'apply', 'rolling', 'shift', 'mean', 'apply', 'rolling', 'max', 'min', 'apply', 'rolling', 'max', 'min', 'shift', 'shift', 'apply', 'rolling', 'max', 'min', 'shift', 'shift', 'read_csv', 'copy', 'reset_index', 'apply', 'groupby', 'fillna', 'shift', 'cumprod', 'shift', 'groupby', 'shift', 'groupby', 'describe', 'shift', 'shift', 'rename', 'rename', 'where', 'fillna', 'shift', 'where', 'fillna', 'shift', 'concat', 'copy', 'join', 'apply', 'groupby', 'reset_index', 'mean', 'rolling', 'groupby', 'reset_index', 'apply', 'groupby', 'fillna', 'shift', 'cumprod', 'apply', 'groupby', 'mean', 'shift', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'apply', 'groupby', 'join', 'apply', 'groupby', 'copy', 'to_datetime', 'reset_index', 'sort_values', 'drop_duplicates', 'to_datetime', 'merge', 'groupby', 'sort_values', 'sort_values'] ['numpy', 'pandas', 'jpx_tokyo_market_prediction', 'optuna.integration.lightgbm', 'seaborn', 'matplotlib.pyplot', 'datetime', 'jpx_tokyo_market_prediction', 'warnings'] ['LGBMRegressor']Dict:{'numpy': ['mean', 'max', 'sum', 'where', 'min', 'std', 'cumprod', 'copy'], 'pandas': ['concat', 'merge', 'to_datetime', 'read_csv'], 'jpx_tokyo_market_prediction': [], 'lightgbm': [], 'optuna': [], 'seaborn': [], 'matplotlib': [], 'datetime': [], 'warnings': []} axis_0: 0, axis_1: 4
house-price-feature-engineering-randomforest.py : ['read_csv', 'read_csv', 'head', 'info', 'info', 'corr', 'astype', 'astype', 'select_dtypes', 'select_dtypes', 'unique', 'value_counts', 'clip', 'clip', 'info', 'select_dtypes', 'select_dtypes', 'get_dummies', 'get_dummies', 'describe', 'head', 'head', 'mean', 'rename', 'to_csv', 'get_dummies', 'get_dummies', 'head', 'mean', 'rename', 'mean', 'mean', 'mean', 'rename'] ['pandas', 'seaborn', 'numpy', 'matplotlib.pyplot', 'plotly.express', 'sklearn', 'math'] ['simplefilter', 'mean_absolute_error', 'mean_squared_error', 'train_test_split', 'cross_val_score', 'XGBRegressor', 'RandomForestRegressor', 'GradientBoostingRegressor', 'LGBMRegressor', 'DecisionTreeRegressor', 'train_test_split', 'GridSearchCV', 'StratifiedKFold']Dict:{'pandas': ['get_dummies', 'unique', 'read_csv', 'value_counts'], 'seaborn': [], 'numpy': ['mean', 'info', 'unique', 'clip'], 'matplotlib': [], 'plotly': [], 'sklearn': [], 'warnings': [], 'math': [], 'xgboost': [], 'lightgbm': [], '=': [], 'rd_model': []} axis_0: 0, axis_1: 0
s-g-research-strict-lgbm-example-lb-0-017.py : ['read_csv', 'to_datetime', 'sort_values', 'read_csv', 'copy', 'mean', 'mean', 'to_datetime', 'dropna', 'replace', 'drop', 'iterrows'] ['pandas', 'numpy', 'gresearch_crypto'] ['LGBMRegressor', 'LinearRegression']Dict:{'pandas': ['to_datetime', 'read_csv'], 'numpy': ['mean', 'copy'], 'lightgbm': [], 'sklearn': [], 'gresearch_crypto': []} axis_0: 0, axis_1: 2
titanic-solution-a-beginner-s-guide.py : ['read_csv', 'read_csv', 'head', 'describe', 'describe', 'info', 'sum', 'isnull', 'head', 'info', 'sum', 'isnull', 'value_counts', 'value_counts', 'groupby', 'mean', 'groupby', 'value_counts', 'value_counts', 'groupby', 'mean', 'groupby', 'crosstab', 'div', 'astype', 'sum', 'value_counts', 'value_counts', 'groupby', 'mean', 'groupby', 'value_counts', 'value_counts', 'groupby', 'mean', 'groupby', 'value_counts', 'value_counts', 'groupby', 'mean', 'groupby', 'dropna', 'dropna', 'dropna', 'dropna', 'dropna', 'dropna', 'corr', 'drop', 'head', 'crosstab', 'replace', 'replace', 'replace', 'replace', 'mean', 'groupby', 'map', 'fillna', 'head', 'astype', 'map', 'head', 'unique', 'value_counts', 'fillna', 'head', 'astype', 'map', 'head', 'mean', 'std', 'sum', 'isnull', 'astype', 'cut', 'mean', 'groupby', 'head', 'head', 'fillna', 'median', 'qcut', 'mean', 'groupby', 'head', 'astype', 'head', 'mean', 'groupby', 'mean', 'groupby', 'head', 'head', 'drop', 'drop', 'drop', 'head', 'head', 'drop', 'copy', 'drop', 'astype', 'sum', 'sort_values', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'itertools'] ['LogisticRegression', 'SVC', 'LinearSVC', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'GaussianNB', 'Perceptron', 'SGDClassifier', 'confusion_matrix']Dict:{'pandas': ['read_csv', 'isnull', 'cut', 'value_counts', 'unique', 'qcut', 'crosstab'], 'numpy': ['mean', 'median', 'sum', 'unique', 'info', 'std', 'copy'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'itertools': ['groupby']} axis_0: 1, axis_1: 7
78th-place-solution-private-lb-0-55282-top-2.py : ['read_csv', 'read_csv', 'head', 'select_dtypes', 'select_dtypes', 'nunique', 'unique', 'sum', 'sum', 'isnull', 'head', 'boxplot', 'unique', 'boxplot', 'unique', 'crosstab', 'var', 'var', 'drop', 'drop', 'drop', 'select_dtypes', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'corr', 'keys', 'corr', 'corr', 'drop', 'drop', 'drop', 'transform', 'transform', 'corr', 'array', 'drop', 'mean', 'std', 'apply', 'apply', 'corr', 'apply', 'apply', 'corr', 'apply', 'apply', 'corr', 'apply', 'apply', 'corr', 'corr', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'std', 'mean', 'mean', 'to_csv', 'head'] ['matplotlib.pyplot', 'cv2', 'numpy', 'pandas', 'os', 'warnings', 'seaborn', 'matplotlib.pyplot', 'xgboost', 'xgboost'] ['rcParams', 'stats', 'preprocessing', 'RandomForestRegressor', 'r2_score', 'train_test_split']Dict:{'matplotlib': ['boxplot'], 'cv2': [], 'pylab': ['keys'], 'numpy': ['mean', 'std', 'var', 'sum', 'unique', 'array'], 'pandas': ['read_csv', 'isnull', 'unique', 'array', 'crosstab'], 'os': [], 'warnings': [], 'seaborn': ['boxplot'], 'scipy': [], 'sklearn': [], 'xgboost': [], '=': [], 'model': []} axis_0: 4, axis_1: 29
top-5-house-price-prediction.py : ['read_csv', 'read_csv', 'concat', 'head', 'info', 'value_counts', 'head', 'sort_values', 'sum', 'isnull', 'head', 'value_counts', 'info', 'head', 'sort_values', 'sum', 'isnull', 'drop', 'compare', 'head', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'sort_values', 'compare', 'unique', 'items', 'median', 'groupby', 'boxplot', 'sum', 'isnull', 'median', 'groupby', 'copy', 'corr', 'drop', 'head', 'fillna', 'sum', 'isnull', 'fillna', 'fillna', 'mode', 'astype', 'sort_values', 'apply', 'dropna', 'head', 'items', 'isin', 'reset_index', 'get_dummies', 'drop', 'drop', 'transform', 'mean', 'mean', 'mean', 'mean', 'mean', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'missingno', 'warnings', 'lazypredict', 'optuna', 'xgboost', 'lightgbm', 'joblib', 'lightgbm'] ['stats', 'norm', 'skew', 'RobustScaler', 'PowerTransformer', 'LabelEncoder', 'make_pipeline', 'train_test_split', 'LazyRegressor', 'KFold', 'cross_val_score', 'Ridge', 'Lasso', 'ElasticNet', 'LassoCV', 'RidgeCV', 'StackingRegressor', 'RandomForestRegressor', 'GradientBoostingRegressor', 'SVR']Dict:{'numpy': ['mean', 'median', 'sum', 'unique', 'isin', 'info', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'missingno': [], 'scipy': [], 'warnings': [], '#': [], 'to': [], 'ignore': [], 'warning': [], 'sklearn': [], 'lazypredict': [], 'optuna': [], 'xgboost': [], 'lightgbm': [], 'joblib': []} axis_0: 1, axis_1: 2
model-ensemble-tuning.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'hist', 'clip', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'hist', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'last', 'groupby', 'mean', 'groupby', 'join', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'tail', 'to_dict', 'set_index', 'copy', 'map', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'lightgbm', 'xgboost', 'catboost'] ['tqdm', 'VotingRegressor', 'Pipeline', 'KNeighborsRegressor', 'KNNImputer']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'unique', 'clip', 'isin', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'tqdm': []} axis_0: 0, axis_1: 0
multi-label-classification-with-complete-eda.py : ['read_csv', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'sum', 'corr', 'drop', 'array', 'array', 'astype', 'ge', 'keys', 'keys', 'keys', 'keys', 'keys', 'items', 'mean', 'applymap', 'mean', 'items'] ['pandas', 'numpy', 'matplotlib.pyplot', 'gc', 're', 'seaborn', 'math', 'warnings', 'time'] ['HTML', 'Counter', 'roc_auc_score', 'StandardScaler', 'XGBClassifier', 'tqdm', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'StandardScaler', 'MinMaxScaler', 'LabelEncoder', 'roc_auc_score', 'accuracy_score', 'confusion_matrix', 'ConfusionMatrixDisplay', 'RocCurveDisplay', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'Style', 'Fore', 'ConfusionMatrixDisplay', 'RocCurveDisplay', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier']Dict:{'IPython': [], 'pandas': ['array', 'read_csv', 'isnull'], 'numpy': ['transpose', 'array', 'sum', 'mean'], 'matplotlib': [], 'gc': [], 're': [], 'collections': ['items', 'keys'], 'sklearn': [], 'xgboost': [], 'seaborn': [], 'tqdm': [], 'math': [], 'warnings': [], 'time': [], 'lightgbm': [], 'catboost': [], 'colorama': []} axis_0: 0, axis_1: 1
tps-may-22-lightautoml-here-again.py : ['read_csv', 'head', 'read_csv', 'head', 'read_csv', 'head', 'items', 'reset_index', 'concat', 'map', 'get', 'map', 'map', 'value_counts', 'drop', 'head', 'concat', 'concat', 'reset_index', 'head', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'transform', 'transform', 'to_csv', 'to_csv', 'head', 'sample', 'sample', 'sample', 'sample', 'sample', 'to_csv'] ['os', 'time', 'numpy', 'pandas', 'torch'] ['display', 'HTML', 'Javascript', 'roc_auc_score', 'train_test_split', 'StratifiedKFold', 'TfidfVectorizer', 'TabularAutoML', 'Task', 'Model', 'ReduceLROnPlateau', 'EarlyStopping', 'Dense', 'Input', 'Dropout', 'Adam', 'BinaryCrossentropy', 'StandardScaler']Dict:{'IPython': [], 'os': [], 'time': [], 'numpy': [], 'pandas': ['concat', 'read_csv', 'value_counts'], 'sklearn': ['transform'], 'torch': ['concat'], 'lightautoml': [], 'tensorflow': []} axis_0: 0, axis_1: 0
house-prices-eda-to-ml-beginner.py : ['corr', 'abs', 'nlargest', 'corr', 'abs', 'nlargest', 'read_csv', 'read_csv', 'info', 'info', 'head', 'describe', 'head', 'describe', 'skew', 'kurt', 'skew', 'kurt', 'drop', 'head', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'fillna', 'fillna', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'fillna', 'mean', 'fillna', 'mean', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'skew', 'kurt', 'skew', 'kurt', 'skew', 'kurt', 'drop', 'drop', 'skew', 'kurt', 'skew', 'kurt', 'drop', 'drop', 'corr', 'abs', 'nlargest', 'value_counts', 'boxplot', 'drop', 'copy', 'mean', 'groupby', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'corr', 'abs', 'nlargest', 'drop', 'drop', 'corr', 'abs', 'nlargest', 'head', 'head', 'corr', 'abs', 'nlargest', 'nlargest', 'copy', 'copy', 'copy', 'transform', 'head', 'copy', 'copy', 'copy', 'copy', 'info', 'info', 'head', 'head', 'head', 'mean', 'to_csv', 'head', 'to_csv', 'head', 'to_csv', 'corr', 'corr', 'round', 'astype', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['stats', 'check_output', 'StandardScaler', 'GridSearchCV', 'LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'SGDRegressor', 'DecisionTreeRegressor', 'RandomForestRegressor', 'KNeighborsRegressor', 'GaussianProcessRegressor', 'DotProduct', 'ConstantKernel']Dict:{'numpy': ['mean', 'abs', 'sum', 'round', 'isin', 'info', 'copy'], 'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': ['describe', 'skew'], 'warnings': [], 'subprocess': [], 'sklearn': []} axis_0: 0, axis_1: 3
eda-feature-engineering-imputation-for-beginners.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'copy', 'copy', 'value_counts', 'head', 'drop', 'drop', 'value_counts', 'head', 'value_counts', 'groupby', 'value_counts', 'value_counts', 'value_counts', 'unique', 'value_counts', 'sum', 'isnull', 'fillna', 'mode', 'sample', 'dropna', 'sum', 'isnull', 'isnull', 'isnull', 'head', 'nunique', 'head', 'fillna', 'median', 'crosstab', 'crosstab', 'head', 'mean', 'groupby', 'mean', 'groupby', 'cut', 'mean', 'groupby', 'mean', 'groupby', 'where', 'fillna', 'fillna', 'fillna', 'where', 'fillna', 'fillna', 'where', 'isnull', 'mean', 'groupby', 'copy', 'head', 'join', 'join', 'drop', 'drop', 'select_dtypes', 'sum', 'isnull', 'head', 'sort_values', 'drop', 'fillna', 'mean', 'sum', 'sum', 'isna', 'head', 'sum', 'isnull', 'head', 'sort_values', 'drop', 'fillna', 'mean', 'sum', 'sum', 'isnull', 'drop', 'drop', 'concat', 'head', 'sum', 'sum', 'isna', 'head', 'map', 'value_counts', 'map', 'head', 'drop', 'drop', 'sample', 'dropna', 'sum', 'isnull', 'isnull', 'isnull', 'fillna', 'fillna', 'median', 'fillna', 'mean', 'fillna', 'copy', 'join', 'drop', 'drop', 'drop', 'fillna', 'mean', 'drop', 'fillna', 'mean', 'drop', 'concat', 'map', 'value_counts', 'map', 'drop', 'to_csv', 'head'] ['os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.express', 'warnings', 'missingno'] ['train_test_split', 'LogisticRegression', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'accuracy_score', 'XGBClassifier']Dict:{'os': [], 'numpy': ['mean', 'median', 'sum', 'where', 'unique', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'unique', 'crosstab'], 'matplotlib': [], 'seaborn': [], 'plotly': [], 'warnings': [], 'missingno': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 18
jax-autoencoder-quickstart.py : ['read_parquet', 'read_csv', 'read_csv', 'get_dummies', 'drop_duplicates', 'join', 'join', 'get_dummies', 'merge', 'join', 'get_dummies', 'isin', 'head', 'transform', 'apply', 'apply', 'mean', 'array', 'unique', 'unique', 'sort_values', 'isin', 'sort_values', 'isin', 'transform', 'array', 'transform', 'read_csv', 'keys', 'unique', 'unique', 'sort_values', 'isin', 'sort_values', 'isin', 'transform', 'array', 'unique', 'unique', 'sort_values', 'isin', 'sort_values', 'isin', 'transform', 'array', 'keys', 'add', 'add', 'concat', 'copy', 'to_csv', 'read_csv', 'corrwith', 'mean', 'std', 'hist', 'to_csv', 'sum', 'sum', 'apply', 'mean', 'mean', 'apply', 'array'] ['jax', 'flax', 'pandas', 'optax', 'numpy', 'pprint', 'functools'] ['Path', 'numpy', 'random', 'linen', 'train_state', 'StandardScaler', 'cycle', 'Ridge', 'MultiOutputRegressor', 'RandomForestRegressor', 'train_test_split', 'TruncatedSVD', 'mean_squared_error', 'combinations', 'reduce', 'cycle']Dict:{'jax': [], 'flax': [], 'pandas': ['read_csv', 'concat', 'read_parquet', 'get_dummies', 'unique', 'array', 'merge'], 'pathlib': [], 'optax': [], 'sklearn': [], 'itertools': [], 'numpy': ['mean', 'add', 'sum', 'array', 'unique', 'isin', 'std', 'copy'], 'pprint': [], 'functools': []} axis_0: 3, axis_1: 0
understanding-na-values-in-amex-competition.py : ['read_parquet', 'reset_index', 'sum', 'isna', 'transform', 'groupby', 'apply', 'groupby', 'sort_values', 'isnull', 'isnull', 'isnull', 'head', 'isin', 'sum', 'isna', 'head', 'groupby', 'isin', 'sum', 'isna', 'count', 'groupby', 'tail', 'groupby', 'transform', 'groupby', 'reset_index', 'count', 'groupby', 'tail', 'groupby', 'isnull', 'reset_index', 'count', 'groupby', 'tail', 'groupby', 'fillna', 'head', 'isin', 'sum', 'isna', 'head', 'groupby', 'isin', 'sum', 'isna', 'head', 'isin', 'isnull', 'rank', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'merge'] ['numpy', 'pandas'] []Dict:{'numpy': ['isin', 'sum'], 'pandas': ['isna', 'read_parquet', 'merge', 'isnull']} axis_0: 5, axis_1: 0
ieee-cis-fraud-detection-lightgbm.py : ['read_csv', 'read_csv', 'copy', 'drop', 'sum', 'memory_usage', 'sum', 'memory_usage', 'drop', 'astype', 'sum', 'sort_values', 'read_csv', 'to_csv', 'head'] ['gc', 'warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm'] ['LabelEncoder', 'KFold', 'roc_auc_score']Dict:{'gc': [], 'warnings': [], 'numpy': ['sum', 'copy'], 'pandas': ['read_csv'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'lightgbm': [], '=': [], 'importance': [], '/': [], 'N': [], 'inplace=True,': [], 'ascending=False)': []} axis_0: 0, axis_1: 1
features-installments-data-open-solution.py : ['rename', 'reset_index', 'agg', 'merge', 'sum', 'mean', 'max', 'min', 'std', 'count', 'median', 'map', 'copy', 'copy', 'read_csv', 'read_csv', 'head', 'groupby', 'join', 'merge', 'rename', 'reset_index', 'agg', 'head', 'corr', 'sort_values', 'value_counts', 'isin', 'head', 'head', 'sort_values', 'sample', 'astype', 'astype', 'unique', 'groupby', 'head', 'head', 'copy', 'sort_values', 'reset_index', 'merge', 'head', 'copy', 'sort_values', 'reset_index', 'merge', 'head'] ['os', 'sys', 'multiprocessing', 'numpy', 'pandas', 'seaborn', 'warnings'] ['partial', 'skew', 'kurtosis', 'iqr', 'joblib', 'tqdm_notebook', 'LinearRegression']Dict:{'os': ['rename'], 'sys': [], 'multiprocessing': [], 'numpy': ['mean', 'median', 'max', 'sum', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': ['merge', 'unique', 'read_csv', 'value_counts'], 'seaborn': [], 'warnings': [], 'functools': [], 'scipy': [], 'sklearn': [], 'tqdm': []} axis_0: 0, axis_1: 0
balanced-weights-longer-training-higher-score.py : ['read_csv', 'read_csv', 'rename', 'map', 'sample', 'join', 'join', 'join', 'concat', 'apply', 'replace', 'read_csv', 'replace', 'apply', 'concat', 'transform', 'apply', 'to_csv'] ['numpy', 'pandas', 'regex', 'xgboost', 'language_tool_python', 'random'] ['LogisticRegression', 'SGDClassifier', 'TfidfVectorizer', 'VotingClassifier', 'make_scorer', 'accuracy_score', 'XGBClassifier', 'KNeighborsClassifier', 'ProcessPoolExecutor', 'MultinomialNB']Dict:{'numpy': [], 'pandas': ['concat', 'read_csv'], 'regex': [], 'sklearn': [], 'xgboost': ['apply'], 'language_tool_python': [], 'concurrent': ['map']} axis_0: 1, axis_1: 0
top-5-football-prob-prediction-lstm-v02-gpu.py : ['read_csv', 'read_csv', 'read_csv', 'dropna', 'transform', 'groupby', 'head', 'filter', 'to_datetime', 'to_datetime', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'isna', 'where', 'where', 'where', 'isna', 'where', 'where', 'where', 'where', 'copy', 'drop', 'drop', 'filter', 'drop', 'filter', 'drop', 'filter', 'drop', 'drop', 'filter', 'drop', 'filter', 'drop', 'filter', 'head', 'wide_to_long', 'wide_to_long', 'reset_index', 'reset_index', 'fillna', 'get_dummies', 'fillna', 'get_dummies', 'head', 'head', 'cumsum', 'groupby', 'cumsum', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'sort_values', 'drop', 'merge', 'sort_values', 'drop', 'merge', 'copy', 'copy', 'where', 'where', 'transform', 'transform', 'count', 'squeeze', 'squeeze', 'squeeze', 'round', 'to_csv', 'head'] ['numpy', 'pandas', 'datetime', 'tensorflow', 'os'] ['KFold', 'RobustScaler', 'LabelEncoder', 'accuracy_score', 'log_loss', 'plot_model', 'to_categorical', 'Model', 'load_model', 'EarlyStopping', 'ReduceLROnPlateau', 'LearningRateScheduler', 'ExponentialDecay', 'layers']Dict:{'numpy': ['squeeze', 'where', 'round', 'cumsum', 'copy'], 'pandas': ['isna', 'read_csv', 'wide_to_long', 'get_dummies', 'merge', 'to_datetime'], 'datetime': [], 'sklearn': [], 'tensorflow': [], 'os': []} axis_0: 2, axis_1: 11
fastai-tutorial-detailed.py : ['mode', 'read_csv', 'read_csv', 'sort_values', 'sum', 'isnull', 'sort_values', 'nunique', 'read_csv', 'read_csv', 'sort_values', 'sum', 'isnull', 'sort_values', 'nunique', 'select_dtypes', 'head', 'head', 'sort_values', 'sum', 'isnull', 'head', 'mean', 'items', 'items', 'nunique', 'median', 'fillna', 'astype', 'to_csv', 'head'] ['fastai', 'pandas', 'numpy', 'seaborn'] ['*', '*', 'pyplot', 'Markdown', 'display']Dict:{'fastai': [], 'pandas': ['read_csv', 'isnull'], 'numpy': ['mean', 'median', 'sum'], 'seaborn': [], 'matplotlib': [], 'IPython': []} axis_0: 0, axis_1: 0
titanic-machine-learning-from-disaster-0-842.py : ['read_csv', 'head', 'read_csv', 'head', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'isnull', 'groupby', 'transform', 'fillna', 'mean', 'where', 'where', 'apply', 'apply', 'where', 'isin', 'where', 'isin', 'apply', 'apply', 'apply', 'replace', 'apply', 'isnull', 'qcut', 'concat', 'get_dummies', 'concat', 'get_dummies', 'fillna', 'fillna', 'mean', 'apply', 'apply', 'unique', 'unique', 'concat', 'get_dummies', 'concat', 'get_dummies', 'apply', 'apply', 'get_dummies', 'get_dummies', 'fillna', 'mean', 'drop', 'drop', 'sort_values', 'concat', 'read_csv', 'set_index', 'apply', 'to_csv'] ['pandas', 'numpy', 'warnings', 'matplotlib.pyplot', 'seaborn'] ['preprocessing', 'GridSearchCV', 'RandomForestClassifier', 'LinearDiscriminantAnalysis', 'QuadraticDiscriminantAnalysis', 'cross_validation', 'RandomForestClassifier']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'unique', 'qcut'], 'numpy': ['where', 'isin', 'unique', 'mean'], 'warnings': [], 'matplotlib': [], 'seaborn': [], 'sklearn': ['apply']} axis_0: 0, axis_1: 2
feature-engineering-hacks-get-top-10.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'drop', 'concat', 'drop', 'drop', 'drop', 'fillna', 'mean', 'drop', 'select_dtypes', 'select_dtypes', 'fillna', 'mode', 'fillna', 'mean'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'scipy', 'os'] ['StandardScaler']Dict:{'numpy': ['mean'], 'pandas': ['concat', 'read_csv'], 'seaborn': [], 'matplotlib': [], 'scipy': [], 'sklearn': [], 'os': []} axis_0: 0, axis_1: 0
automl-tables-tutorial-notebook.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'fillna', 'median', 'fillna', 'median', 'to_csv', 'to_csv', 'join', 'replace', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os'] ['storage', 'automl_v1beta1']Dict:{'numpy': ['median'], 'pandas': ['read_csv'], 'os': ['replace'], 'google': []} axis_0: 0, axis_1: 0
dota-2-win-prediction-random-forest-starter.py : ['read_csv', 'join', 'read_csv', 'join', 'head', 'head', 'read_csv', 'join', 'head', 'to_csv', 'mean', 'mean', 'join', 'get', 'join', 'copy', 'join', 'head', 'mean', 'mean', 'to_csv', 'to_csv', 'set_index', 'set_index', 'head'] ['os', 'pandas', 'datetime', 'json', 'os', 'ujson', 'json', 'collections'] ['train_test_split', 'roc_auc_score', 'accuracy_score', 'ShuffleSplit', 'KFold', 'cross_val_score', 'pyplot', 'tqdm_notebook']Dict:{'os': [], 'pandas': ['read_csv'], 'sklearn': [], 'datetime': [], 'json': [], 'matplotlib': [], 'collections': []} axis_0: 0, axis_1: 0
shap-lgbm-looking-for-best-features.py : ['read_csv', 'read_csv', 'duplicated', 'drop', 'drop', 'describe', 'describe'] ['shap', 'pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'warnings'] ['tqdm', 'LGBMClassifier', 'cross_val_score', 'StratifiedKFold', 'LabelEncoder', 'mean_squared_error']Dict:{'shap': [], 'pandas': ['read_csv'], 'numpy': [], 'seaborn': [], 'tqdm': [], 'matplotlib': [], 'lightgbm': [], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 0
for-beginners-tackling-toxic-using-keras.py : ['read_csv', 'read_csv', 'head', 'any', 'isnull', 'any', 'isnull', 'hist'] ['sys', 'os', 're', 'csv', 'codecs', 'numpy', 'pandas', 'matplotlib.pyplot'] ['Tokenizer', 'pad_sequences', 'Dense', 'Input', 'LSTM', 'Embedding', 'Dropout', 'Activation', 'Bidirectional', 'GlobalMaxPool1D', 'Model', 'initializers', 'regularizers', 'constraints', 'optimizers', 'layers', 'backend']Dict:{'sys,': [], 'os,': [], 're,': [], 'csv,': [], 'codecs,': [], 'numpy': ['any'], 'matplotlib': ['hist'], 'keras': []} axis_0: 0, axis_1: 0
using-advanced-feature-engineering-with-featurewiz.py : ['read_csv', 'map', 'drop', 'transform', 'concat', 'copy', 'fillna', 'isna', 'drop', 'isna', 'drop', 'isna', 'read_csv', 'map', 'drop', 'drop', 'concat', 'fillna', 'fillna', 'median', 'copy', 'drop', 'drop', 'concat', 'astype', 'drop', 'sum', 'sum', 'clip', 'sum', 'sum', 'sum', 'sum', 'clip', 'sum', 'sum', 'drop', 'mean', 'mean', 'sort_values', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['XGBRegressor', 'GridSearchCV', 'KFold', 'SimpleImputer', 'PolynomialFeatures', 'featurewiz', 'make_scorer', 'LGBMClassifier', 'cross_validate', 'power_transform']Dict:{'pandas': ['isna', 'concat', 'read_csv'], 'numpy': ['mean', 'median', 'sum', 'clip', 'copy'], 'matplotlib': [], 'seaborn': [], 'xgboost': [], 'sklearn': [], 'warnings': [], 'featurewiz': [], 'lightgbm': []} axis_0: 0, axis_1: 14
0-58624-poisson-regressor-eda-explanation.py : ['read_csv', 'read_csv', 'astype', 'sum', 'isna', 'drop', 'drop', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['display', 'HTML', 'KNNImputer', 'LabelEncoder', 'StandardScaler', 'PoissonRegressor', 'GridSearchCV', 'confusion_matrix', 'accuracy_score', 'precision_recall_fscore_support']Dict:{'numpy': ['sum'], 'pandas': ['isna', 'read_csv'], 'IPython': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 2
enzyme-stability-prediction.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'head', 'info', 'drop', 'sum', 'isnull', 'sort_values', 'reset_index', 'drop', 'head', 'count', 'count', 'head', 'info', 'drop', 'round', 'sort_values', 'value_counts', 'value_counts'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost'] ['train_test_split', 'mean_absolute_error', 'mean_absolute_percentage_error', 'spearmanr']Dict:{'numpy': ['round', 'info', 'sum'], 'pandas': ['value_counts', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'xgboost': [], 'sklearn': [], 'scipy': []} axis_0: 0, axis_1: 0
titanic-data-exploration-starter.py : ['read_csv', 'head', 'sum', 'isnull', 'map', 'round', 'corr', 'dropna', 'dropna', 'dropna', 'boxplot', 'boxplot'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] []Dict:{'pandas': ['read_csv', 'isnull'], 'numpy': ['round', 'sum'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot']} axis_0: 0, axis_1: 0
exponential-averages-amex-feature-engineering.py : ['astype', 'astype', 'apply', 'to_numeric', 'to_numeric', 'astype', 'sub', 'add', 'mul', 'read_parquet', 'read_parquet', 'isin', 'sort_index', 'drop_duplicates', 'read_csv', 'astype', 'astype', 'apply', 'set_index', 'astype', 'reset_index', 'reset_index', 'concat', 'concat', 'sort_index', 'reset_index', 'drop', 'fillna', 'fillna', 'mul', 'sum', 'sum', 'groupby', 'sum', 'last', 'groupby', 'groupby', 'agg', 'join', 'last', 'agg', 'join', 'drop', 'last', 'max', 'all', 'fillna', 'groupby', 'concat', 'fillna', 'fillna', 'unique', 'astype', 'notna', 'astype', 'notna', 'astype', 'notna', 'astype', 'notna', 'astype', 'notna', 'astype', 'notna', 'astype', 'notna', 'astype', 'notna', 'astype', 'notna', 'astype', 'notna', 'astype', 'notna', 'astype', 'notna', 'astype', 'notna', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'head', 'to_parquet', 'head', 'to_parquet'] ['pandas', 'numpy', 'gc', 'os', 'cupy', 'cudf'] []Dict:{'pandas': ['read_csv', 'concat', 'read_parquet', 'notna', 'to_numeric', 'unique'], 'gc,': [], 'os': []} axis_0: 1, axis_1: 6
singlelgb-lb0-16-with-analysis.py : ['join', 'sum', 'sum', 'clip', 'sum', 'sum', 'sum', 'sum', 'clip', 'sum', 'sum', 'sort_values', 'mean', 'groupby', 'boxplot', 'hist', 'hist', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'map', 'map', 'copy', 'copy', 'concat', 'concat', 'mean', 'std', 'mean', 'std', 'hist', 'mean', 'mean', 'median', 'median', 'std', 'hist', 'mean', 'mean', 'median', 'median', 'std', 'copy', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'math', 'seaborn', 'matplotlib.pyplot', 'pandas', 'random', 'warnings', 'os'] ['tqdm', 'log_loss', 'make_scorer', 'MinMaxScaler', 'StandardScaler', 'KFold', 'StratifiedKFold', 'StratifiedGroupKFold', 'LGBMClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'clip', 'std', 'copy'], 'pandas': ['concat', 'read_csv'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'tqdm': [], 'math': [], 'random': [], 'sklearn': [], 'lightgbm': [], 'warnings': [], 'os': []} axis_0: 2, axis_1: 2
titanic-model-with-90-accuracy.py : ['read_csv', 'read_csv', 'head', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'mean', 'fillna', 'mode', 'fillna', 'median', 'drop', 'drop', 'fillna', 'median', 'fillna', 'median', 'sum', 'isnull', 'sum', 'isnull', 'apply', 'replace', 'replace', 'replace', 'replace', 'cut', 'cut', 'drop', 'drop', 'head', 'get_dummies', 'get_dummies', 'head', 'corr', 'drop', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'sort_values', 'drop', 'copy', 'drop', 'sort_values'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 're', 'xgboost'] ['train_test_split', 'accuracy_score', 'KFold', 'cross_val_score', 'cross_val_predict', 'confusion_matrix', 'LogisticRegression', 'RandomForestClassifier', 'SVC', 'LinearSVC', 'KNeighborsClassifier', 'GaussianNB', 'DecisionTreeClassifier', 'AdaBoostClassifier', 'LinearDiscriminantAnalysis', 'GradientBoostingClassifier', 'GridSearchCV', 'GradientBoostingClassifier', 'LinearDiscriminantAnalysis', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'get_dummies'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 're': [], 'sklearn': ['apply'], 'xgboost': []} axis_0: 0, axis_1: 8
silver-bullet-single-model-165-features.py : ['unique', 'agg', 'sum', 'join', 'join', 'join', 'join', 'filter', 'agg', 'concat', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'apply', 'median', 'apply', 'drop', 'join', 'agg', 'sum', 'mean', 'std', 'median', 'min', 'max', 'quantile', 'join', 'agg', 'join', 'shift', 'filter', 'agg', 'max', 'median', 'mean', 'std', 'sum', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'join', 'shift', 'filter', 'count', 'agg', 'mean', 'std', 'count', 'median', 'max', 'first', 'last', 'join', 'filter', 'count', 'agg', 'mean', 'std', 'median', 'max', 'first', 'last', 'join', 'astype', 'mean', 'quantile', 'quantile', 'apply', 'groupby', 'unique', 'merge', 'rename', 'apply', 'explode', 'apply', 'agg', 'groupby', 'join', 'reset_index', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'rename', 'reset_index', 'agg', 'groupby', 'isin', 'merge', 'reset_index', 'agg', 'groupby', 'isin', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'read_csv', 'merge', 'drop', 'merge', 'merge', 'merge', 'merge', 'merge', 'drop', 'copy', 'copy', 'copy', 'to_csv'] ['polars', 'pandas', 'numpy', 're', 'warnings'] ['LGBMRegressor', 'StratifiedKFold', 'skew', 'kurtosis']Dict:{'polars': ['mean', 'median', 'quantile', 'read_csv', 'first', 'max', 'sum', 'last', 'concat', 'apply', 'min', 'count', 'std'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'numpy': ['mean', 'median', 'quantile', 'max', 'sum', 'min', 'unique', 'isin', 'std', 'copy'], 're': [], 'lightgbm': [], 'sklearn': [], 'scipy': [], 'warnings': []} axis_0: 0, axis_1: 5
jquants-end-to-end-starter.py : ['join', 'info', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'max', 'apply', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'min', 'max', 'sum', 'sort_values', 'mean', 'sum', 'sort_values', 'mean', 'apply', 'groupby', 'mean', 'std', 'min', 'max', 'sum', 'sort_values', 'mean', 'sum', 'sort_values', 'mean', 'pipe', 'read_csv', 'join', 'head', 'pipe', 'read_csv', 'join', 'head', 'pipe', 'read_csv', 'join', 'head', 'pipe', 'read_csv', 'join', 'head', 'pipe', 'read_csv', 'join', 'head', 'pipe', 'read_csv', 'join', 'head', 'query', 'query', 'query', 'query', 'query', 'tail', 'query', 'isin', 'query', 'isin', 'query', 'to_datetime', 'sort_values', 'cumprod', 'map', 'sort_values', 'ffill', 'sort_values', 'reset_index', 'apply', 'groupby', 'set_index', 'diff', 'copy', 'copy', 'mean', 'ewm', 'mean', 'ewm', 'abs', 'copy', 'pct_change', 'std', 'rolling', 'diff', 'mean', 'rolling', 'fillna', 'replace', 'unique', 'concat', 'head', 'copy', 'dropna', 'dropna', 'isin', 'isin', 'all', 'concat', 'concat', 'concat', 'concat', 'unique', 'info', 'info', 'join', 'copy', 'sort_values', 'sort_values', 'apply', 'groupby', 'sort_values', 'info', 'apply', 'groupby', 'cumsum', 'reset_index', 'sort_values', 'reset_index', 'tail', 'concat', 'unique', 'concat', 'drop_duplicates', 'sort_values', 'to_dict', 'set_index', 'map', 'all', 'notna', 'min', 'max'] ['numpy', 'pandas', 'os', 'sys', 'requests', 'json', 'gc', 'math', 'random', 'pathlib', 'glob', 'joblib', 'time', 'datetime', 'pytz', 'xgboost', 'lightgbm', 'matplotlib.pyplot', 'matplotlib.style', 'seaborn', 'plotly.graph_objects', 'plotly.express', 'plotly.offline', 'warnings', 'jpx_tokyo_market_prediction'] ['defaultdict', 'tqdm', 'ROUND_HALF_UP', 'Decimal', 'QuantileTransformer', 'MinMaxScaler', 'StandardScaler', 'Pool', 'cpu_count', 'relativedelta', 'FR', 'CatBoostRegressor', 'CatBoostClassifier', 'venn2', 'venn3', 'pyplot', 'ScalarFormatter', 'virtual_memory', 'getLogger', 'INFO', 'FileHandler', 'Formatter', 'StreamHandler']Dict:{'numpy': ['mean', 'cumprod', 'max', 'diff', 'abs', 'sum', 'all', 'min', 'unique', 'isin', 'info', 'std', 'cumsum', 'copy'], 'pandas': ['read_csv', 'concat', 'notna', 'unique', 'to_datetime'], 'os': ['pipe', 'replace'], 'sys': [], 'requests': ['head'], 'json': [], 'gc': [], 'math': [], 'random': [], 'pathlib': [], 'glob': [], 'joblib': [], 'time': [], 'datetime': [], 'pytz': [], 'collections': ['copy'], 'tqdm': [], 'decimal': ['min', 'max'], 'sklearn': [], 'multiprocessing': [], 'dateutil': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'matplotlib': [], 'matplotlib_venn': [], 'seaborn': [], 'plotly': [], 'warnings': [], 'psutil': [], 'jpx_tokyo_market_prediction': []} axis_0: 0, axis_1: 1
elo-eda-and-models.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_excel', 'astype', 'astype', 'astype', 'head', 'info', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'astype', 'astype', 'astype', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'isna', 'min', 'hist', 'max', 'astype', 'read_csv', 'read_excel', 'head', 'apply', 'mean', 'value_counts', 'sort_values', 'mean', 'groupby', 'head', 'tail', 'value_counts', 'mean', 'groupby', 'astype', 'to_datetime', 'apply', 'agg', 'groupby', 'agg', 'groupby', 'apply', 'agg', 'groupby', 'nunique', 'astype', 'astype', 'get_dummies', 'agg', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'groupby', 'astype', 'agg', 'join', 'reset_index', 'agg', 'groupby', 'join', 'reset_index', 'merge', 'merge', 'read_csv', 'read_excel', 'head', 'apply', 'mean', 'value_counts', 'sort_values', 'sum', 'groupby', 'head', 'tail', 'value_counts', 'sum', 'groupby', 'astype', 'apply', 'agg', 'groupby', 'agg', 'groupby', 'apply', 'agg', 'groupby', 'nunique', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'agg', 'groupby', 'join', 'reset_index', 'reset_index', 'groupby', 'merge', 'merge', 'merge', 'read_csv', 'read_excel', 'head', 'apply', 'isnull', 'apply', 'nunique', 'nunique', 'hist', 'hist', 'min', 'hist', 'hist', 'min', 'sum', 'value_counts', 'sort_index', 'value_counts', 'mean', 'groupby', 'sort_index', 'value_counts', 'mean', 'groupby', 'hist', 'fillna', 'hist', 'fillna', 'hist', 'fillna', 'max', 'min', 'hist', 'fillna', 'hist', 'fillna', 'hist', 'fillna', 'nlargest', 'hist', 'fillna', 'hist', 'fillna', 'hist', 'fillna', 'hist', 'fillna', 'hist', 'fillna', 'hist', 'fillna', 'head', 'any', 'isna', 'fillna', 'any', 'isna', 'fillna', 'drop', 'drop', 'astype', 'astype', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'head', 'mean', 'mean', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv', 'to_csv', 'to_csv', 'to_csv', 'transpose', 'transpose', 'read_csv', 'to_csv', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'warnings'] ['LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'mean_squared_error', 'Ridge', 'RidgeCV', 'CatBoostRegressor']Dict:{'numpy': ['transpose', 'mean', 'any', 'max', 'sum', 'min', 'isin', 'info', 'std'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'read_excel', 'merge', 'to_datetime'], 'os': [], 'seaborn': [], 'matplotlib': ['hist'], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'sklearn': [], 'gc': [], 'catboost': [], 'plotly': [], 'warnings': []} axis_0: 1, axis_1: 2
even-more-features.py : ['array', 'abs', 'cumsum', 'copy', 'diff', 'mean', 'read_csv', 'read_csv', 'read_csv', 'items', 'items', 'mean', 'std', 'max', 'min', 'mean', 'diff', 'max', 'abs', 'mean', 'abs', 'std', 'abs', 'abs', 'abs', 'agg', 'agg', 'max', 'abs', 'min', 'max', 'abs', 'min', 'abs', 'sum', 'abs', 'kurtosis', 'skew', 'median', 'mean', 'abs', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'ewm', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'std', 'std', 'subtract', 'subtract', 'sum', 'abs', 'sum', 'abs', 'dropna', 'std', 'rolling', 'dropna', 'mean', 'rolling', 'mean', 'std', 'max', 'min', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'mean', 'std', 'max', 'min', 'mean', 'diff', 'mean', 'diff', 'max', 'abs', 'drop', 'drop', 'head', 'sort_values', 'abs', 'corrwith', 'any', 'isnull', 'mean', 'fillna', 'any', 'isnull', 'fillna', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'read_csv', 'head', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'mean_absolute_error', 'LinearRegression', 'hilbert', 'hann', 'convolve', 'stats', 'KernelRidge', 'product', 'feature_calculators', 'Parallel', 'delayed']Dict:{'numpy': ['mean', 'median', 'any', 'max', 'abs', 'sum', 'subtract', 'array', 'min', 'isin', 'diff', 'std', 'cumsum', 'copy'], 'pandas': ['concat', 'array', 'read_csv', 'isnull'], 'os': [], 'matplotlib': [], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'catboost': [], 'gc': [], 'seaborn': [], 'warnings': [], 'scipy': ['kurtosis', 'skew'], 'itertools': [], 'tsfresh': [], 'joblib': []} axis_0: 1, axis_1: 2
denoising-algorithms.py : ['read_parquet', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'std', 'apply', 'apply'] ['pandas', 'matplotlib.pyplot', 'numpy'] ['signal', 'KNeighborsRegressor']Dict:{'pandas': ['read_parquet'], 'matplotlib': [], 'numpy': ['mean', 'std'], 'scipy': [], 'sklearn': []} axis_0: 0, axis_1: 0
super-lightgbm-w-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'apply', 'apply', 'join', 'astype', 'apply', 'describe', 'sum', 'mean', 'std', 'min', 'max', 'median', 'max', 'min', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'kurt', 'skew', 'drop', 'drop', 'items', 'sort_values', 'drop', 'drop', 'drop', 'mean', 'mean', 'array', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'matplotlib.lines', 'optuna', 'lightgbm'] ['Counter', 'train_test_split', 'KFold', 'roc_auc_score', 'calibration_curve', 'CalibratedClassifierCV']Dict:{'pandas': ['array', 'read_csv'], 'numpy': ['mean', 'median', 'quantile', 'max', 'sum', 'array', 'min', 'std'], 'seaborn': [], 'matplotlib': [], 'collections': ['items'], 'optuna': [], '': [], 'lightgbm': [], 'sklearn': []} axis_0: 0, axis_1: 0
ps3e11-simple-eda-fe-and-model-for-beginners.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'head', 'head', 'head', 'head', 'describe', 'describe', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'value_counts', 'duplicated', 'count', 'value_counts', 'duplicated', 'count', 'value_counts', 'duplicated', 'count', 'value_counts', 'duplicated', 'count', 'drop_duplicates', 'corr', 'concat', 'drop', 'drop', 'eval', 'replace', 'fillna', 'eval', 'replace', 'fillna', 'eval', 'eval', 'eval', 'eval', 'copy', 'pop', 'mean', 'mean', 'copy', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost'] ['mean_squared_log_error', 'KFold']Dict:{'numpy': ['mean', 'sum', 'copy'], 'pandas': ['isna', 'read_csv', 'eval', 'concat', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'xgboost': [], 'sklearn': []} axis_0: 0, axis_1: 0
frufs-unsupervised-selection.py : ['sample', 'head', 'pop', 'pop', 'transform', 'transform', 'sample', 'items', 'sample', 'transform', 'transform', 'items', 'keys'] ['warnings', 'multiprocessing', 'numpy', 'pandas', 'matplotlib.pyplot', 'optuna', 'joblib', 'gc', 'lightgbm', 'seaborn'] ['Path', 'make_regression', 'pearsonr', 'trange', 'tqdm', 'FRUFS', 'train_test_split', 'mean_squared_error']Dict:{'warnings': [], 'multiprocessing': [], 'pathlib': [], 'numpy': [], 'pandas': [], 'matplotlib': [], 'optuna': [], 'joblib,': [], 'gc': [], 'lightgbm': [], 'seaborn': [], 'sklearn': [], 'scipy': [], 'tqdm': [], 'FRUFS': []} axis_0: 0, axis_1: 0
october-tps-eda-models.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'info', 'info', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'describe', 'sample', 'sample', 'concat', 'corr', 'sample', 'bool', 'concat', 'corr', 'sample', 'bool', 'sample', 'sample', 'sum', 'sum', 'read_csv', 'read_csv', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'std', 'sort_values', 'assign', 'mean', 'std', 'to_csv', 'assign', 'mean', 'std', 'to_csv', 'read_csv'] ['plotly.figure_factory', 'numpy', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.figure_factory', 'plotly.graph_objects', 'warnings', 'plotly.express', 'pandas', 'numpy', 'warnings'] ['FormatStrFormatter', 'PCA', 'Path', 'XGBClassifier', 'LGBMClassifier', 'cross_validate']Dict:{'plotly': [], 'numpy': ['mean', 'max', 'sum', 'min', 'info', 'std'], 'os': [], 'pandas': ['isna', 'concat', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': [], 'pathlib': [], 'xgboost': [], 'lightgbm': [], '': []} axis_0: 0, axis_1: 14
pubg-simple-lightgbm.py : ['read_csv', 'read_csv', 'head', 'describe', 'describe', 'sum', 'isna', 'sum', 'isna', 'dropna', 'corr', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'concat', 'agg', 'groupby', 'min', 'groupby', 'merge', 'max', 'groupby', 'merge', 'sum', 'groupby', 'merge', 'median', 'groupby', 'merge', 'mean', 'groupby', 'merge', 'mean', 'groupby', 'rank', 'groupby', 'merge', 'concat', 'head', 'notnull', 'isnull', 'concat', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'gc', 'os', 'seaborn', 'matplotlib.pyplot', 'warnings', 'lightgbm'] ['KFold', 'StratifiedKFold', 'train_test_split', 'mean_absolute_error']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'min', 'isin'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'notnull', 'merge'], 'gc': [], 'os': [], 'seaborn': [], 'matplotlib': [], 'warnings': [], 'sklearn': [], 'lightgbm': []} axis_0: 2, axis_1: 0
random-forest-tuning-layer-based.py : ['read_csv', 'read_csv', 'reset_index', 'concat', 'isnull', 'mean', 'groupby', 'fillna', 'isnull', 'fillna', 'astype', 'astype', 'median', 'groupby', 'mean', 'apply', 'groupby', 'fillna', 'median', 'copy', 'isnull', 'isnull', 'copy', 'isnull', 'isnull', 'copy', 'isnull', 'isnull', 'copy', 'isnull', 'isnull', 'sum', 'isnull', 'replace', 'drop', 'factorize', 'factorize', 'factorize', 'factorize', 'drop', 'insert', 'drop', 'head', 'tail', 'drop', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'mean', 'std', 'mean', 'std', 'to_csv'] ['numpy', 'pandas', 'warnings', 're'] ['distance', 'StandardScaler', 'RandomForestClassifier', 'GridSearchCV', 'StratifiedKFold', 'cross_val_score', 'LabelEncoder', 'mutual_info_classif']Dict:{'numpy': ['mean', 'median', 'std', 'sum', 'insert', 'copy'], 'pandas': ['concat', 'factorize', 'read_csv', 'isnull'], 'Levenshtein': [], 'sklearn': [], 'warnings': [], 're': []} axis_0: 0, axis_1: 4
gstore-part-2-visuals-eda-feature-engineering.py : ['read_csv', 'reset_index', 'apply', 'apply', 'isnull', 'apply', 'apply', 'isnull', 'json_normalize', 'merge', 'drop', 'reset_index', 'concat', 'fillna', 'astype', 'head', 'value_counts', 'isin', 'copy', 'astype', 'value_counts', 'value_counts', 'where', 'update', 'agg', 'groupby', 'update', 'astype', 'agg', 'groupby', 'update', 'astype', 'apply', 'agg', 'groupby', 'sort_index', 'update', 'apply', 'groupby', 'astype', 'astype', 'astype', 'mean', 'groupby', 'sum', 'groupby', 'value_counts', 'value_counts', 'reset_index', 'agg', 'groupby', 'reset_index', 'agg', 'groupby', 'unique', 'nunique', 'nunique', 'apply', 'to_datetime', 'drop', 'head', 'nunique', 'nunique', 'nunique', 'nunique', 'unique', 'unique', 'nunique', 'astype', 'fillna', 'astype', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'nunique', 'nunique', 'describe', 'boxplot', 'nunique', 'nunique', 'nunique', 'astype', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'astype', 'nunique', 'astype', 'nunique', 'astype', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'astype', 'unique', 'sum', 'isnull', 'mode', 'fillna', 'mode', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'astype', 'nunique', 'nunique', 'astype', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'describe', 'astype', 'reset_index', 'sum', 'groupby', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'nunique', 'astype', 'nunique', 'nunique', 'to_datetime', 'drop'] ['numpy', 'pandas', 'statistics', 'matplotlib', 'matplotlib.pyplot', 'warnings', 'datetime', 'plotly', 'plotly.offline', 'plotly.graph_objs', 'seaborn', 'json', 'pandas.io.json', 'ast', 'gc', 'os'] []Dict:{'numpy': ['mean', 'sum', 'where', 'unique', 'isin', 'copy'], 'pandas': [], 'statistics': ['mean', 'mode', 'groupby'], 'matplotlib': ['boxplot'], 'warnings': [], 'datetime': [], 'plotly': [], 'seaborn': ['boxplot'], 'json': [], 'ast': [], 'gc': [], 'os': []} axis_0: 0, axis_1: 4
microsoft-malware-detection-log-loss-of-0-0070.py : ['read_csv', 'head', 'boxplot', 'join', 'read_csv', 'head', 'head', 'merge', 'to_csv', 'head', 'copy', 'max', 'min', 'head', 'head', 'drop', 'drop', 'drop', 'value_counts', 'value_counts', 'value_counts', 'round', 'round', 'round', 'sum', 'sum', 'sum', 'sum', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'join', 'join', 'join', 'join', 'join', 'read_csv', 'merge', 'head', 'head', 'boxplot', 'merge', 'drop', 'head', 'head', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'fillna', 'drop', 'drop', 'drop', 'all', 'isnull', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'concat', 'nlargest', 'head', 'concat', 'to_csv', 'head', 'read_csv', 'merge', 'head', 'head', 'merge', 'drop', 'to_csv', 'head', 'join', 'join', 'join', 'replace', 'transform', 'join', 'read_csv', 'head', 'drop', 'concat', 'nlargest', 'head', 'concat', 'duplicated', 'to_csv', 'head', 'join', 'replace', 'transform', 'join', 'read_csv', 'head', 'read_csv', 'to_csv'] [] ['drive', 'RandomForestClassifier', 'drive']Dict:{'google': [], 'sklearn': []} axis_0: 5, axis_1: 23
regression-end-to-end-project-xgb-rf-ridge-kmeans.py : ['join', 'read_csv', 'head', 'info', 'sum', 'sum', 'isnull', 'dropna', 'nunique', 'nunique', 'nunique', 'head', 'drop', 'sort_values', 'head', 'sum', 'isnull', 'drop', 'fillna', 'nunique', 'nunique', 'select_dtypes', 'factorize', 'sort_values', 'corr', 'sum', 'gt', 'where', 'map', 'transform', 'groupby', 'array', 'array', 'copy', 'mean', 'std', 'array', 'copy', 'mean', 'std', 'join', 'astype'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'os'] ['mutual_info_regression', 'KMeans', 'train_test_split', 'GridSearchCV', 'MLPRegressor', 'SGDRegressor', 'LinearRegression', 'Ridge', 'RandomForestRegressor', 'SVR', 'XGBRegressor', 'r2_score', 'mean_absolute_error', 'mean_squared_error']Dict:{'numpy': ['mean', 'sum', 'array', 'where', 'info', 'std', 'copy'], 'pandas': ['factorize', 'array', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': [], 'xgboost': [], 'os': []} axis_0: 2, axis_1: 5
moa-transfer-learning-feature-selection-gaussrank.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'transform', 'transform', 'mean', 'drop', 'drop', 'drop', 'concat', 'get_dummies', 'drop', 'map', 'copy', 'copy', 'concat', 'get_dummies', 'get_dummies', 'concat', 'concat', 'copy', 'copy', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'sum', 'mean', 'std', 'kurtosis', 'skew', 'concat', 'concat', 'transform', 'transform', 'transform', 'transform', 'concat', 'reset_index', 'concat', 'transform', 'transform', 'transform', 'transform', 'concat', 'reset_index', 'concat', 'read_csv', 'drop', 'read_csv', 'mean', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'random', 'tensorflow', 'tensorflow_addons', 'tensorflow.keras.layers', 'tensorflow.keras.backend', 'os', 'sys'] ['PCA', 'VarianceThreshold', 'QuantileTransformer', 'log_loss', 'MultilabelStratifiedKFold', 'train_test_split', 'ReduceLROnPlateau', 'ModelCheckpoint', 'EarlyStopping', 'KMeans']Dict:{'numpy': ['mean', 'std', 'sum', 'copy'], 'pandas': ['concat', 'get_dummies', 'read_csv'], 'os': [], 'matplotlib': [], 'seaborn': [], 'random': [], 'sklearn': [], 'tensorflow': [], 'tensorflow_addons': [], 'sys': [], 'iterstrat': []} axis_0: 0, axis_1: 13
eda-and-feature-selection.py : ['read_csv', 'read_csv', 'copy', 'head', 'info', 'corr', 'describe', 'map', 'astype', 'astype', 'crosstab', 'count', 'reset_index', 'drop', 'multiply', 'sum', 'multiply', 'sum', 'head', 'head', 'drop', 'info', 'join', 'all', 'drop', 'transform', 'transform'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'scipy.stats', 'itertools', 'seaborn'] ['cycle', 'train_test_split', 'GridSearchCV', 'PCA', 'defaultdict', 'label_binarize', 'StandardScaler', 'OneVsRestClassifier', 'svm', 'roc_curve', 'auc', 'classification_report', 'accuracy_score', 'scale', 'stats', 'chi2_contingency', 'combinations', 'PolynomialFeatures', 'OneHotEncoder', 'train_test_split', 'GridSearchCV', 'PCA', 'classification_report', 'accuracy_score', 'stats', 'StandardScaler']Dict:{'pandas': ['crosstab', 'read_csv'], 'numpy': ['sum', 'all', 'info', 'multiply', 'copy'], 'seaborn': [], 'itertools': [], 'matplotlib': [], 'sklearn': ['transform'], 'collections': ['copy'], 'scipy': ['describe']} axis_0: 0, axis_1: 7
titanic-comprehensive-notebook-eda-ml.py : ['read_csv', 'head', 'info', 'describe', 'value_counts', 'value_counts', 'describe', 'value_counts', 'sum', 'duplicated', 'apply', 'value_counts', 'apply', 'drop', 'head', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'mean', 'groupby', 'apply', 'sum', 'isnull', 'dropna', 'head', 'boxplot', 'drop', 'boxplot', 'boxplot', 'boxplot', 'mean', 'groupby', 'corr', 'nlargest', 'corr', 'nlargest', 'drop', 'apply', 'value_counts', 'apply', 'get_dummies', 'get_dummies', 'get_dummies', 'get_dummies', 'join', 'join', 'join', 'join', 'drop', 'drop', 'transform', 'transform', 'keys'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'math'] ['train_test_split', 'StandardScaler', 'LogisticRegression', 'accuracy_score', 'confusion_matrix', 'classification_report', 'plot_confusion_matrix', 'KNeighborsClassifier', 'classification_report', 'confusion_matrix', 'accuracy_score', 'Pipeline', 'GridSearchCV']Dict:{'numpy': ['mean', 'info', 'sum'], 'pandas': ['get_dummies', 'isnull', 'read_csv', 'value_counts'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'warnings': [], 'math': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 1
tps-mar22-eda-fe-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'sum', 'isna', 'sum', 'isna', 'sum', 'duplicated', 'sum', 'duplicated', 'nunique', 'nunique', 'mean', 'std', 'agg', 'groupby', 'mean', 'agg', 'groupby', 'boxplot', 'boxplot', 'unique', 'unique', 'agg', 'groupby', 'unique', 'astype', 'astype', 'keys', 'unique', 'unique', 'unique', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'astype', 'isin', 'keys', 'head', 'agg', 'groupby', 'concat', 'concat', 'reset_index', 'head', 'apply', 'apply', 'apply', 'apply', 'dropna', 'to_pickle', 'to_pickle', 'agg', 'groupby', 'min', 'max', 'min', 'corrwith', 'applymap', 'astype', 'astype', 'select_dtypes', 'drop', 'drop', 'drop', 'drop', 'round', 'head', 'to_csv', 'array', 'array', 'sort_values'] ['pandas', 'numpy', 'warnings', 'matplotlib.pyplot', 'seaborn', 'matplotlib.colors', 'matplotlib.cm', 'holidays', 'math', 'shap'] ['stats', 'periodogram', 'CalendarFourier', 'DeterministicProcess', 'CatBoostRegressor']Dict:{'pandas': ['to_pickle', 'isna', 'read_csv', 'concat', 'unique', 'array', 'to_datetime'], 'numpy': ['mean', 'max', 'sum', 'array', 'round', 'min', 'unique', 'isin', 'std'], 'warnings': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': [], 'holidays': [], 'catboost': [], 'shap': []} axis_0: 0, axis_1: 1
fast-ai-lesson-3.py : ['read_csv', 'read_csv', 'head', 'merge', 'isnull', 'isnull', 'isnull', 'isnull', 'isnull', 'merge', 'merge', 'isnull', 'isnull', 'isnull', 'isnull', 'drop', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'to_datetime', 'subtract', 'unique', 'to_datetime', 'astype', 'apply', 'subtract', 'unique', 'to_feather', 'to_feather', 'astype', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'set_index', 'astype', 'fillna', 'sum', 'rolling', 'groupby', 'sort_index', 'sum', 'rolling', 'groupby', 'sort_index', 'drop', 'reset_index', 'drop', 'reset_index', 'reset_index', 'merge', 'merge', 'drop', 'head', 'to_feather', 'read_feather', 'to_datetime', 'reset_index', 'reset_index', 'to_feather', 'to_feather', 'read_feather', 'read_feather', 'head', 'head', 'copy', 'copy', 'astype', 'astype', 'fillna', 'astype', 'fillna', 'set_index', 'set_index', 'head', 'set_index', 'head', 'mean', 'max', 'astype', 'to_csv'] [] ['*', '*', 'HTML', 'display', 'RandomForestRegressor']Dict:{'fastai': [], 'IPython': [], 'sklearn': ['apply']} axis_0: 0, axis_1: 2
feature-engineering-try-to-params-2-3-4.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'apply', 'dropna', 'copy', 'copy', 'copy', 'concat', 'reset_index', 'head', 'round', 'count', 'round', 'count', 'round', 'count', 'value_counts', 'nunique', 'nunique', 'max', 'max', 'min', 'min', 'concat', 'get_dummies', 'value_counts', 'idxmin', 'drop', 'concat', 'duplicated', 'reset_index', 'drop', 'array', 'array', 'isnull', 'copy', 'drop', 'concat', 'reset_index', 'sum', 'isna', 'fillna', 'mean', 'copy', 'copy', 'drop', 'drop', 'drop', 'items', 'array', 'array', 'nunique', 'nunique', 'copy', 'copy', 'drop', 'concat', 'transform', 'min', 'transform', 'min', 'transform', 'transform', 'reset_index', 'concat', 'concat', 'mean', 'mean', 'mean', 'mean', 'copy', 'copy', 'to_dict', 'value_counts', 'items', 'keys', 'replace', 'replace', 'nunique', 'drop', 'drop', 'copy', 'copy', 'copy', 'to_dict', 'value_counts', 'map', 'map', 'to_dict', 'value_counts', 'keys', 'astype', 'replace', 'astype', 'replace', 'drop', 'drop', 'nunique', 'astype', 'astype', 'drop', 'drop', 'astype', 'mean', 'mean', 'mean', 'corr', 'drop', 'drop', 'transform', 'array', 'array', 'astype', 'mean', 'mean', 'mean', 'astype', 'astype', 'mean', 'corrwith', 'drop', 'max', 'abs', 'max', 'abs', 'max', 'abs', 'drop', 'drop', 'nunique', 'abs', 'corr', 'transform', 'transform', 'concat', 'concat', 'array', 'array', 'astype', 'mean', 'copy', 'copy', 'transform', 'copy', 'copy', 'drop', 'drop', 'to_csv', 'to_csv', 'drop', 'astype', 'copy', 'mean', 'mean', 'reset_index', 'reset_index', 'reset_index', 'unique', 'array', 'add', 'add', 'add', 'add', 'add', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'array', 'array', 'items', 'array', 'array', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'sort_values', 'head', 'concat', 'sort_values', 'items', 'read_csv', 'to_csv', 'head', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'min', 'max', 'min', 'copy', 'to_csv'] ['sklearn', 'numpy', 'os', 'datetime', 'pandas', 'matplotlib.pyplot', 'missingno', 'seaborn', 'concurrent.futures', 'random', 'gc', 'xgboost', 'statsmodels.api', 'math', 'optuna', 'xgboost', 'lightgbm', 're', 'warnings', 'tensorflow', 'keras'] ['PrettyTable', 'tqdm', 'tqdm', 'deepcopy', 'partial', 'combinations', 'randint', 'uniform', 'f_classif', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'PowerTransformer', 'FunctionTransformer', 'metrics', 'GridSearchCV', 'RandomizedSearchCV', 'combinations', 'SimpleImputer', 'train_test_split', 'cross_val_score', 'mean_squared_error', 'mean_squared_log_error', 'roc_auc_score', 'accuracy_score', 'f1_score', 'precision_recall_curve', 'log_loss', 'KMeans', 'KElbowVisualizer', 'OptimalK', 'stats', 'ttest_ind', 'boxcox', 'variance_inflation_factor', 'BaseEstimator', 'TransformerMixin', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StratifiedKFold', 'KFold', 'RandomForestClassifier', 'HistGradientBoostingClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'AdaBoostClassifier', 'BalancedRandomForestClassifier', 'make_classification', 'GaussianNB', 'enable_hist_gradient_boosting', 'DecisionTreeClassifier', 'LogisticRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'NuSVC', 'SVC', 'KNeighborsClassifier', 'KNNImputer', 'LogisticRegression', 'MLPClassifier', 'Pool', 'TfidfVectorizer', 'PCA', 'TruncatedSVD', 'Sequential', 'Dense', 'Activation', 'LeakyReLU', 'PReLU', 'ELU', 'Dropout']Dict:{'sklearn': ['transform'], 'numpy': ['mean', 'max', 'add', 'abs', 'sum', 'array', 'round', 'min', 'unique', 'std', 'copy'], 'os': ['replace'], 'datetime': [], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'array'], 'matplotlib': [], 'missingno': [], 'prettytable': ['copy'], 'seaborn': [], 'tqdm': [], 'concurrent': [], 'copy': [], 'functools': [], 'itertools': [], 'random': [], 'gc': [], 'xgboost': [], 'yellowbrick': [], 'gap_statistic': [], 'scipy': [], 'statsmodels': [], 'math': [], 'optuna': [], 'lightgbm': [], 'category_encoders': [], 'imblearn': [], 'catboost': [], 're': [], 'warnings': [], 'tensorflow': ['add', 'abs', 'concat', 'round', 'unique'], 'keras': []} axis_0: 7, axis_1: 5
featuretools-feature-engineering-is-it-worth-it.py : ['read_csv', 'reset_index'] ['pandas', 'numpy', 'featuretools', 'time', 'matplotlib.pyplot', 'seaborn'] []Dict:{'pandas': ['read_csv'], 'numpy': [], 'featuretools': [], 'time': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 0
fastai-feature-engineering-part1-6160-features.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'corr', 'pivot_table', 'head', 'head', 'head', 'reset_index', 'tail', 'groupby', 'query', 'sort_values', 'drop', 'pivot_table', 'pivot_table', 'describe', 'query', 'reset_index', 'isin', 'unique', 'merge', 'head', 'sort_index', 'value_counts', 'merge', 'sort_index', 'value_counts', 'sort_values', 'agg', 'groupby', 'query', 'mean', 'median', 'max', 'min', 'sum', 'agg', 'groupby', 'to_csv', 'isna', 'query', 'reset_index', 'sort_values', 'unique', 'unique', 'unique', 'unique', 'unique', 'max', 'min', 'max', 'max', 'groupby', 'value_counts', 'agg', 'agg', 'groupby', 'reset_index', 'agg', 'agg', 'groupby', 'reset_index', 'tail', 'groupby', 'query', 'sort_values', 'concat', 'concat'] ['types'] ['*', 'add_datepart', '*']Dict:{'fastai': [], 'types': []} axis_0: 0, axis_1: 0
titanic-disaster-beginner-python-documentation.py : ['join', 'read_csv', 'read_csv', 'head', 'info', 'mean', 'mean', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'apply', 'apply', 'sum', 'isnull', 'sum', 'isnull', 'drop', 'drop', 'drop', 'drop', 'median', 'groupby', 'median', 'groupby', 'median', 'groupby', 'isnull', 'median', 'groupby', 'median', 'groupby', 'median', 'groupby', 'isnull', 'apply', 'apply', 'median', 'groupby', 'median', 'groupby', 'median', 'groupby', 'isnull', 'apply', 'fillna', 'mode', 'get_dummies', 'get_dummies', 'cut', 'sort_values', 'mean', 'groupby', 'qcut', 'sort_values', 'mean', 'groupby', 'drop', 'head', 'head', 'drop', 'drop', 'copy', 'copy', 'read_csv', 'drop', 'to_csv'] ['warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['train_test_split', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'accuracy_score', 'confusion_matrix', 'RandomForestClassifier', 'AdaBoostClassifier', 'LogisticRegression', 'RandomizedSearchCV', 'uniform', 'truncnorm', 'randint', 'pprint']Dict:{'warnings': [], 'numpy': ['mean', 'median', 'sum', 'info', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'get_dummies', 'qcut'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'os': [], 'sklearn': [], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': [], 'scipy': ['mean', 'median'], 'pprint': []} axis_0: 0, axis_1: 7
lightautoml-classifier-regressor-mix.py : ['read_csv', 'head', 'read_csv', 'head', 'read_csv', 'read_csv', 'head', 'value_counts', 'drop', 'drop', 'set_index', 'map', 'map', 'max', 'min', 'head', 'head', 'set_index', 'set_index', 'drop', 'set_index', 'to_csv'] ['os', 'time', 'numpy', 'pandas', 'torch', 'matplotlib.pyplot', 'seaborn'] ['mean_squared_error', 'roc_auc_score', 'train_test_split', 'rankdata', 'TabularAutoML', 'TabularUtilizedAutoML', 'Task', 'ReportDeco']Dict:{'os': [], 'time': [], 'numpy': ['min', 'max'], 'pandas': ['read_csv', 'value_counts'], 'sklearn': [], 'scipy': [], 'torch': ['min', 'max'], 'lightautoml': [], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 1
eda-feature-engineering-catboost.py : ['join', 'read_csv', 'read_csv', 'head', 'describe', '__contains__', '__contains__', '__contains__', '__contains__', '__contains__', 'value_counts', 'sample', 'sum', 'sum', 'copy', 'copy', 'clip', 'clip', 'clip', 'clip', 'abs', 'abs', 'abs', 'abs', 'astype', 'astype', 'astype', 'astype', 'abs', 'abs', 'abs', 'abs', 'astype', 'astype', 'astype', 'astype', 'sum', 'sum', 'sum', 'sum', 'mean', 'mean', 'drop', 'drop', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'drop', 'transform', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['patch_sklearn', 'StandardScaler', 'LabelEncoder', 'RobustScaler', 'SVC', 'AdaBoostClassifier', 'VotingClassifier', 'RandomForestClassifier', 'train_test_split', 'accuracy_score', 'LGBMClassifier', 'XGBClassifier', 'CatBoostClassifier']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'min', 'clip', 'copy'], 'pandas': ['read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'os': [], 'sklearnex': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'catboost': []} axis_0: 2, axis_1: 7
quite-a-few-features-1-51.py : ['read_csv', 'read_csv', 'read_csv', 'mean', 'max', 'min', 'std', 'var', 'skew', 'kurtosis', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'os', 'gc', 'xgboost', 'scipy'] ['tqdm_notebook', 'Parallel', 'delayed', 'KFold', 'metrics', 'feature_calculators']Dict:{'numpy': ['mean', 'max', 'var', 'min', 'std'], 'pandas': ['read_csv'], 'tqdm': [], 'joblib': [], 'os': [], 'gc': [], 'xgboost': [], 'sklearn': [], 'scipy': [], 'tsfresh': []} axis_0: 0, axis_1: 2
titanic-using-pipelined-xgboost-gridsearch.py : ['read_csv', 'read_csv', 'dropna', 'copy', 'pop', 'head', 'value_counts', 'value_counts', 'nunique', 'nunique', 'sum', 'isnull', 'sum', 'isnull', 'head', 'describe', 'sum', 'isnull', 'sum', 'isnull', 'sort_values', 'sum', 'sum', 'isnull', 'drop', 'drop', 'join', 'corr', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'value_counts', 'apply', 'apply', 'value_counts', 'value_counts', 'isnull', 'isnull', 'sum', 'sum', 'round', 'mean', 'groupby', 'isnull', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'head', 'replace', 'replace', 'drop', 'drop', 'cut', 'value_counts', 'value_counts', 'describe', 'qcut', 'value_counts', 'value_counts', 'drop', 'drop', 'value_counts', 'cut', 'value_counts', 'value_counts', 'head', 'head', 'copy', 'copy', 'update', 'nunique', 'head', 'sort_values', 'concat', 'head', 'transform', 'head', 'sort_values', 'sum', 'round', 'round', 'round', 'round', 'concat', 'head', 'to_csv', 'read_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['stats', 'ceil', 'Pipeline', 'ColumnTransformer', 'SimpleImputer', 'OneHotEncoder', 'XGBClassifier', 'GridSearchCV', 'ParameterGrid', 'confusion_matrix', 'classification_report', 'accuracy_score', 'recall_score', 'precision_score', 'f1_score', 'set_config']Dict:{'numpy': ['mean', 'round', 'sum', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'qcut'], 'matplotlib': [], 'seaborn': [], 'scipy': ['describe'], 'math': [], 'sklearn': [], 'xgboost': ['apply']} axis_0: 1, axis_1: 8
loan-default-prediction.py : ['mode', 'read_csv', 'head', 'info', 'head', 'select_dtypes', 'describe', 'sum', 'isnull', 'sum', 'isnull', 'concat', 'rename', 'round', 'sort_values', 'head', 'fillna', 'mean', 'head', 'dropna', 'select_dtypes', 'drop', 'hist', 'sort_values', 'corr', 'head', 'tail', 'drop', 'sort_values', 'corr', 'head', 'tail', 'drop', 'corr', 'drop', 'drop', 'transform', 'array', 'array', 'mean'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['figsize', 'train_test_split', 'StandardScaler', 'cross_val_score', 'GaussianNB', 'RandomForestClassifier', 'XGBClassifier']Dict:{'pandas': ['concat', 'array', 'read_csv', 'isnull'], 'numpy': ['mean', 'sum', 'round', 'info', 'array'], 'matplotlib': ['hist'], 'IPython': [], 'seaborn': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 3
feature-engineering-automl-with-autogluon.py : ['join', 'read_csv', 'tail', 'astype', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'resample', 'std', 'resample', 'drop', 'read_csv', 'astype', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'os'] ['ProfileReport', 'MinMaxScaler', 'TabularDataset', 'TabularPredictor']Dict:{'numpy': ['mean', 'std'], 'pandas': ['read_csv'], 'pandas_profiling': [], 'matplotlib': [], 'os': [], 'sklearn': [], 'autogluon': []} axis_0: 0, axis_1: 0
data-science-workflow-top-2-with-tuning.py : ['join', 'read_csv', 'read_csv', 'head', 'concat', 'drop', 'info', 'copy', 'drop', 'select_dtypes', 'copy', 'select_dtypes', 'dropna', 'boxplot', 'dropna', 'dropna', 'dropna', 'corr', 'select_dtypes', 'corr', 'sort_values', 'dropna', 'drop', 'reset_index', 'head', 'sort_values', 'sum', 'isnull', 'drop', 'tail', 'sort_values', 'drop', 'select_dtypes', 'value_counts', 'drop', 'drop', 'select_dtypes', 'value_counts', 'drop', 'boxplot', 'drop', 'drop', 'drop', 'drop', 'drop', 'head', 'sort_values', 'sum', 'isnull', 'fillna', 'transform', 'groupby', 'fillna', 'mode', 'mean', 'mean', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'transform', 'groupby', 'fillna', 'mean', 'transform', 'groupby', 'fillna', 'mean', 'transform', 'groupby', 'fillna', 'mode', 'fillna', 'mean', 'apply', 'map', 'map', 'map', 'map', 'apply', 'get_dummies', 'select_dtypes', 'transform', 'transform', 'mean', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'os'] ['variance_inflation_factor', 'SimpleImputer', 'RobustScaler', 'train_test_split', 'mean_squared_error', 'mean_absolute_error', 'XGBRegressor', 'ensemble', 'LGBMRegressor', 'cross_val_score', 'CatBoostRegressor', 'RandomizedSearchCV']Dict:{'numpy': ['mean', 'info', 'sum', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'statsmodels': [], 'sklearn': ['transform'], 'os': [], 'xgboost': ['apply'], 'lightgbm': [], 'catboost': []} axis_0: 1, axis_1: 7
tps07-21-eda-time-ft-xgboost-w-ft-eng.py : ['read_csv', 'read_csv', 'read_csv', 'copy', 'info', 'describe', 'info', 'describe', 'head', 'head', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'head', 'head', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'round', 'corr', 'sort_values', 'corr', 'sort_values', 'corr', 'sort_values', 'corr', 'drop', 'copy', 'copy', 'copy', 'copy', 'value_counts', 'replace', 'value_counts', 'drop', 'drop', 'to_csv'] ['pandas', 'matplotlib', 'matplotlib.pyplot', 'numpy', 'seaborn'] ['KFold', 'LeaveOneGroupOut', 'mean_squared_log_error', 'XGBRegressor']Dict:{'pandas': ['read_csv', 'value_counts'], 'matplotlib': ['boxplot'], 'numpy': ['mean', 'round', 'info', 'copy'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 0
feature-engineering-using-vectorization-cupy.py : ['read_csv', 'read_csv', 'head', 'unique', 'head', 'describe', 'concat', 'describe', 'array', 'array', 'mean', 'var', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'mean', 'std', 'sum', 'sum', 'sum', 'sum', 'max', 'array', 'array', 'abs', 'stack', 'stack', 'stack', 'copy', 'copy', 'concat', 'head', 'sample', 'transform', 'transform', 'sum', 'sum', 'mean', 'head', 'to_csv'] ['numpy', 'pandas', 'glob', 'os', 'gc', 'time', 'lightgbm', 'xgboost', 'IPython.display', 'soundfile', 'seaborn', 'librosa', 'librosa.display', 'IPython.display', 'matplotlib.pyplot', 'cuml', 'cupy', 'pickle', 'random'] ['interp1d', 'Parallel', 'delayed', 'tqdm', 'rankdata', 'LogisticRegression', 'GroupKFold', 'roc_auc_score', 'label_ranking_average_precision_score', 'StandardScaler']Dict:{'numpy': ['mean', 'stack', 'max', 'var', 'sum', 'abs', 'array', 'unique', 'std', 'copy'], 'pandas': ['concat', 'array', 'unique', 'read_csv'], 'glob': [], 'os': [], 'gc': [], 'time': [], 'scipy': [], 'lightgbm': [], 'xgboost': [], 'joblib': [], 'tqdm': [], 'IPython': [], 'sklearn': ['transform'], 'soundfile': [], 'seaborn': [], 'librosa': [], 'matplotlib': [], 'cuml': [], 'cupy': [], 'pickle': [], 'random': ['sample']} axis_0: 0, axis_1: 14
predicting-houses-prices-using-anns.py : ['read_csv', 'head', 'sum', 'isnull', 'transpose', 'describe', 'boxplot', 'head', 'sort_values', 'sort_values', 'boxplot', 'head', 'info', 'drop', 'to_datetime', 'apply', 'apply', 'boxplot', 'boxplot', 'mean', 'groupby', 'mean', 'groupby', 'drop', 'value_counts', 'drop', 'value_counts', 'value_counts', 'drop', 'transform', 'add', 'add', 'add', 'add', 'add', 'add', 'mean'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['train_test_split', 'MinMaxScaler', 'metrics', 'Sequential', 'Input', 'Dense', 'Activation', 'Dropout', 'Adam', 'LinearRegression']Dict:{'pandas': ['value_counts', 'to_datetime', 'read_csv', 'isnull'], 'numpy': ['transpose', 'mean', 'add', 'sum', 'info'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'tensorflow': []} axis_0: 0, axis_1: 4
santander-genetic-feature-engineering.py : ['read_csv', 'read_csv', 'transform', 'transform'] ['numpy', 'pandas', 'os', 'sklearn', 'gplearn'] ['MinMaxScaler', 'SymbolicTransformer', 'make_function']Dict:{'numpy': [], 'pandas': ['read_csv'], 'os': [], 'sklearn': ['transform'], 'gplearn': []} axis_0: 1, axis_1: 0
eda-feature-engineering-automl-manual-model.py : ['read_csv', 'copy', 'read_csv', 'read_csv', 'info', 'assign', 'astype', 'astype', 'drop', 'assign', 'drop', 'sort_values', 'mean', 'isna', 'astype', 'isna', 'sort_values', 'nunique', 'select_dtypes', 'sort_values', 'nunique', 'select_dtypes', 'drop', 'round', 'value_counts', 'nunique', 'select_dtypes', 'nunique', 'select_dtypes', 'sort_values', 'value_counts', 'hist', 'select_dtypes', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'quantile', 'select_dtypes', 'rename', 'reset_index', 'round', 'value_counts', 'merge', 'reset_index', 'groupby', 'reset_index', 'groupby', 'merge', 'pivot', 'select_dtypes', 'select_dtypes', 'select_dtypes', 'round', 'corr', 'select_dtypes', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'astype', 'assign', 'astype', 'astype', 'assign', 'drop', 'sort_values', 'mean', 'isna', 'drop', 'astype', 'to_csv', 'head', 'drop', 'astype', 'to_csv', 'head', 'drop', 'astype', 'to_csv', 'head', 'copy', 'drop', 'concat', 'drop', 'drop', 'reset_index', 'concat', 'rename', 'copy', 'copy', 'transform', 'items', 'rename', 'reset_index', 'concat', 'mean', 'std', 'mean', 'head', 'concat', 'copy', 'transform', 'astype', 'to_csv', 'head', 'astype', 'to_csv', 'head', 'items', 'head', 'concat', 'copy', 'transform', 'astype', 'to_csv', 'head', 'astype', 'to_csv', 'head', 'astype', 'to_csv', 'head', 'items', 'rename', 'reset_index', 'concat', 'mean', 'std', 'mean', 'concat', 'items', 'copy', 'astype', 'to_csv', 'head', 'sort_values'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'os', 'math', 'plotly', 'plotly.express', 'plotly.graph_objects'] ['clear_output', 'make_subplots', 'LabelEncoder', 'train_test_split', 'StandardScaler', 'LogisticRegression', 'RidgeClassifier', 'SGDClassifier', 'LinearSVC', 'SVC', 'LinearDiscriminantAnalysis', 'RandomForestClassifier', 'AdaBoostClassifier', 'BaggingClassifier', 'GradientBoostingClassifier', 'DecisionTreeClassifier', 'ExtraTreeClassifier', 'StratifiedKFold', 'cross_val_score', 'GridSearchCV', 'RandomizedSearchCV', 'metrics', 'LazyClassifier', 'LGBMClassifier', 'LGBMClassifier', 'LGBMClassifier']Dict:{'IPython': [], 'numpy': ['mean', 'median', 'quantile', 'round', 'info', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'merge', 'pivot'], 'matplotlib': ['hist'], 'seaborn': [], 'warnings': [], 'os': ['rename'], 'math': [], 'plotly': [], 'sklearn': [], 'lazypredict': [], 'lightgbm': []} axis_0: 0, axis_1: 5
enter-ing-the-timeseries-space-sec-3-new-aggs.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'describe', 'hist', 'value_counts', 'count', 'groupby', 'boxplot', 'describe', 'reset_index', 'max', 'groupby', 'merge', 'value_counts', 'head', 'merge', 'head', 'reset_index', 'mean', 'groupby', 'boxplot', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'any', 'isna', 'drop', 'drop', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'head', 'head', 'merge', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'head', 'merge', 'merge', 'head', 'any', 'isna', 'merge', 'head', '__len__', '__len__', 'mean', 'sort_values', 'mean', 'head', 'mean', 'to_csv'] ['gc', 'os', 'itertools', 'pickle', 're', 'time', 'warnings', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'optuna', 'random'] ['choice', 'choices', 'reduce', 'tqdm', 'cycle', 'venn2', 'Counter', 'reduce', 'tqdm', 'cycle', 'stats', 'skew', 'kurtosis', 'metrics', 'model_selection', 'preprocessing', 'linear_model', 'ensemble', 'decomposition', 'tree', 'defaultdict', 'LabelEncoder']Dict:{'gc': [], 'os': ['rename'], 'itertools': [], 'pickle': [], 're': [], 'time': [], 'warnings': [], 'random': [], 'functools': [], 'tqdm': ['__len__'], 'numpy': ['mean', 'median', 'any', 'max', 'abs', 'sum', 'min', 'unique', 'std'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'matplotlib_venn': [], 'collections': ['items', 'keys', '__len__'], 'scipy': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'optuna': []} axis_0: 2, axis_1: 6
automl-flaml-for-time-series-forecasting.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'head', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'astype', 'astype', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'min', 'factorize', 'tail', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'hist', 'clip', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'merge', 'hist', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'last', 'groupby', 'mean', 'groupby', 'reset_index', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'to_dict', 'set_index', 'copy', 'map', 'read_csv', 'concat', 'fillna', 'drop', 'fillna', 'read_csv', 'astype', 'head', 'read_csv', 'astype', 'head', 'apply', 'head', 'apply', 'to_dict', 'set_index', 'apply', 'to_dict', 'set_index', 'map', 'map', 'head', 'drop', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'random', 'matplotlib.pyplot', 'seaborn', 'warnings', 'warnings'] ['tqdm', 'AutoML', 'ConvergenceWarning', 'ConvergenceWarning']Dict:{'gc': [], 'numpy': ['mean', 'abs', 'sum', 'min', 'unique', 'clip', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'merge', 'to_datetime'], 'tqdm': [], 'random': [], 'flaml': [], 'matplotlib': ['hist'], 'seaborn': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 3
eda-feature-engineering-classification.py : ['read_csv', 'read_csv', 'info', 'min', 'describe', 'boxplot', 'describe', 'describe', 'skew', 'skew', 'describe', 'boxplot', 'boxplot', 'describe', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'head', 'sum', 'describe', 'boxplot', 'boxplot', 'skew', 'skew', 'info', 'info', 'transform', 'transform', 'drop', 'drop', 'corr', 'sort_values', 'abs', 'drop', 'info', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['StandardScaler', 'accuracy_score', 'train_test_split', 'accuracy_score', 'LogisticRegression', 'KNeighborsClassifier', 'SVC', 'RandomForestClassifier', 'XGBClassifier', 'GaussianNB', 'KNeighborsClassifier', 'SVC']Dict:{'pandas': ['read_csv'], 'numpy': ['info', 'abs', 'sum', 'min'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 3
7-se7en-prompts.py : ['read_csv', 'to_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'drop_duplicates', 'reset_index', 'mean', 'update', 'astype', 'where', 'transform', 'to_csv'] ['sys', 'gc', 'pandas', 'numpy', 'numpy', 'os', 'pandas', 'torch', 'numpy', 'numpy', 'numpy'] ['Image', 'HTML', 'StratifiedKFold', 'roc_auc_score', 'LGBMClassifier', 'CatBoostClassifier', 'TfidfVectorizer', 'decoders', 'models', 'normalizers', 'pre_tokenizers', 'processors', 'trainers', 'Tokenizer', 'SentencePieceBPETokenizer', 'Dataset', 'tqdm', 'PreTrainedTokenizerFast', 'SGDClassifier', 'MultinomialNB', 'VotingClassifier', 'AutoTokenizer', 'AutoModel', 'tqdm', 'tqdm', 'cosine_similarity', 'normalize', 'csr_matrix', 'hstack', 'csr_matrix']Dict:{'IPython': [], 'sys': [], 'gc': [], 'pandas': ['concat', 'read_csv'], 'sklearn': [], 'numpy': ['mean', 'where'], 'lightgbm': [], 'catboost': [], 'tokenizers': [], 'datasets': [], 'tqdm': ['update'], 'transformers': [], 'os': [], 'torch': ['mean', 'where', 'concat'], 'scipy': ['mean', 'astype']} axis_0: 0, axis_1: 1
explained-platypus2-70b-wikipedia-rag.py : ['read_csv', 'transform', 'join', 'apply', 'join', 'items', 'sum', 'min', 'apply', 'map', 'join', 'sum', 'sum', 'to_csv'] ['gc', 'logging', 'ctypes', 'torch', 'numpy', 'pandas', 'faiss', 'torch.nn.functional'] ['time', 'Path', 'ThreadPoolExecutor', 'partial', 'tqdm', 'DataLoader', 'load_from_disk', 'Dataset', 'AutoConfig', 'AutoModelForCausalLM', 'AutoTokenizer', 'AutoModel', 'init_empty_weights', 'set_module_tensor_to_device', 'load_file']Dict:{'gc': [], 'logging': [], 'time': [], 'pathlib': [], 'concurrent': ['map'], 'ctypes': [], 'functools': [], 'torch': [], 'numpy': ['sum', 'min'], 'pandas': ['read_csv'], 'tqdm': [], 'faiss': [], 'datasets': [], 'transformers': [], 'accelerate': [], 'safetensors': []} axis_0: 1, axis_1: 3
0-80-hyperparameter-tuning-with-pipelines.py : ['read_csv', 'read_csv', 'head', 'info', 'describe', 'describe', 'nunique', 'head', 'drop', 'to_numeric', 'drop', 'select_dtypes', 'select_dtypes', 'astype', 'head', 'to_csv', 'read_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['train_test_split', 'accuracy_score', 'GradientBoostingClassifier', 'train_test_split', 'StandardScaler', 'LabelEncoder', 'OneHotEncoder', 'Pipeline', 'confusion_matrix', 'SimpleImputer', 'ColumnTransformer', 'accuracy_score', 'set_config', 'GridSearchCV']Dict:{'numpy': ['info'], 'pandas': ['to_numeric', 'read_csv'], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 2
better-xgb-baseline.py : ['abs', 'abs', 'abs', 'mean', 'abs', 'abs', 'abs', 'read_csv', 'head', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'sort_values', 'concat', 'to_datetime', 'ffill', 'groupby', 'ffill', 'groupby', 'groupby', 'factorize', 'factorize', 'tail', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'unique', 'reset_index', 'copy', 'copy', 'mean', 'unique', 'bfill', 'shift', 'groupby', 'clip', 'fillna', 'abs', 'sum', 'groupby', 'shift', 'groupby', 'hist', 'clip', 'transform', 'groupby', 'agg', 'groupby', 'map', 'hist', 'clip', 'shift', 'groupby', 'diff', 'groupby', 'transform', 'groupby', 'sum', 'rolling', 'head', 'hist', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'last', 'groupby', 'mean', 'groupby', 'join', 'mean', 'median', 'median', 'clip', 'clip', 'to_dict', 'set_index', 'to_dict', 'set_index', 'reset_index', 'map', 'map', 'isin', 'isin', 'isin', 'isin', 'tail', 'to_dict', 'set_index', 'copy', 'map', 'to_csv', 'head'] ['gc', 'numpy', 'pandas', 'xgboost'] ['tqdm']Dict:{'gc': [], 'numpy': ['mean', 'median', 'abs', 'sum', 'unique', 'clip', 'isin', 'diff', 'copy'], 'pandas': ['read_csv', 'concat', 'factorize', 'unique', 'to_datetime'], 'xgboost': [], 'tqdm': []} axis_0: 0, axis_1: 0
rapids-cudf-feature-engineering-xgb.py : ['join', 'round', 'to_datetime', 'factorize', 'sort_values', 'drop', 'agg', 'groupby', 'reset_index', 'read_parquet', 'read_parquet', 'read_parquet', 'read_csv', 'merge', 'drop_duplicates', 'merge', 'drop', 'agg', 'groupby', 'reset_index', 'factorize', 'sort_values', 'cumsum', 'merge', 'sort_values', 'cumsum', 'sum', 'sum', 'sum', 'cumsum', 'sum', 'sum', 'sum', 'sort_values', 'concat', 'apply', 'sum', 'cumsum', 'sum', 'sum', 'sort_values', 'concat', 'apply', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'rename', 'to_csv'] ['os', 'cudf', 'cupy', 'xgboost', 'numpy', 'pandas'] ['tqdm']Dict:{'os': ['rename'], 'cudf': [], 'cupy': [], 'xgboost': [], 'numpy': ['round', 'sum', 'cumsum'], 'tqdm': [], 'pandas': ['read_csv', 'concat', 'read_parquet', 'factorize', 'merge', 'to_datetime']} axis_0: 0, axis_1: 4
xgboost-feature-selection-dsbowl.py : ['value_counts', 'unique', 'unique', 'isin', 'where', 'dropna', 'astype', 'to_datetime', 'drop', 'agg', 'groupby', 'get_dummies', 'agg', 'groupby', 'drop', 'join', 'first', 'groupby', 'applymap', 'agg', 'groupby', 'mode', 'join', 'join', 'join', 'drop', 'drop', 'astype', 'astype', 'agg', 'groupby', 'drop', 'agg', 'groupby', 'drop', 'last', 'groupby', 'applymap', 'agg', 'groupby', 'mode', 'drop', 'merge', 'drop', 'join', 'join', 'join', 'agg', 'groupby', 'drop', 'agg', 'groupby', 'drop', 'last', 'groupby', 'applymap', 'agg', 'groupby', 'mode', 'drop', 'join', 'join', 'join', 'concat', 'transform', 'drop', 'drop', 'mean', 'to_csv', 'transform', 'transform'] ['pandas', 'os', 'numpy', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'shap'] ['LabelEncoder', 'StratifiedKFold', 'cohen_kappa_score', 'mode', 'SelectFromModel', 'train_test_split', 'XGBClassifier', 'plot_importance', 'pyplot']Dict:{'pandas': ['concat', 'value_counts', 'get_dummies', 'unique', 'merge', 'to_datetime'], 'os': [], 'numpy': ['where', 'isin', 'unique', 'mean'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'scipy': [], 'xgboost': [], 'shap': []} axis_0: 0, axis_1: 14
tps-feb-2022-fast-start-eda-pytorch-model.py : ['sum', 'any', 'isna', 'sum', 'any', 'isna', 'sum', 'memory_usage', 'max', 'max', 'max', 'astype', 'sum', 'memory_usage', 'drop', 'drop', 'head', 'value_counts', 'astype', 'sample', 'sample', 'keys', 'head', 'sort_values', 'describe', 'concat', 'sort_values', 'describe', 'concat', 'abs', 'corr', 'unstack', 'sort_values', 'head', 'unstack', 'head', 'mean', 'mean', 'head', 'drop', 'drop', 'head', '__init__', 'eq', 'sum', 'join', 'items', 'update', 'update', 'eval', 'update', 'update', 'apply', 'transform', 'transform', 'eval', 'max', 'to_csv'] ['numpy', 'pandas', 'datatable', 'seaborn', 'matplotlib.pyplot', 'torch', 'torch.nn', 'torch.optim', 'random', 'warnings'] ['Dataset', 'DataLoader', 'ReduceLROnPlateau', 'StandardScaler', 'StratifiedKFold', 'LabelEncoder', 'tqdm_notebook', 'defaultdict', 'deepcopy', 'summary', 'summary']Dict:{'numpy': ['mean', 'any', 'max', 'abs', 'sum'], 'pandas': ['isna', 'eval', 'concat', 'value_counts'], 'datatable': [], 'seaborn': [], 'matplotlib': [], 'torch': ['__init__'], 'sklearn': ['transform', '__init__'], 'random': ['sample'], 'tqdm': ['update', '__init__'], 'collections': ['items', 'keys', 'update', '__init__'], 'copy': ['__init__'], 'warnings': []} axis_0: 0, axis_1: 4
subinium-tutorial-house-prices-advanced.py : ['read_csv', 'read_csv', 'head', 'drop', 'drop', 'drop', 'reset_index', 'concat', 'drop', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'corr', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'drop', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'apply', 'apply', 'astype', 'astype', 'transform', 'sort_values', 'apply', 'dropna', 'head', 'get_dummies', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'numpy', 'warnings', 'xgboost', 'lightgbm'] ['StandardScaler', 'stats', 'norm', 'skew', 'check_output', 'LabelEncoder', 'boxcox1p', 'ElasticNet', 'Lasso', 'BayesianRidge', 'LassoLarsIC', 'RandomForestRegressor', 'GradientBoostingRegressor', 'KernelRidge', 'make_pipeline', 'RobustScaler', 'BaseEstimator', 'TransformerMixin', 'RegressorMixin', 'clone', 'KFold', 'cross_val_score', 'train_test_split', 'mean_squared_error']Dict:{'pandas': ['concat', 'get_dummies', 'read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'numpy': ['mean', 'median', 'std', 'sum'], 'sklearn': [], 'scipy': [], 'warnings': [], 'subprocess': [], 'xgboost': [], 'lightgbm': []} axis_0: 0, axis_1: 6
ps-s3-e14-eda-model-en-es.py : ['join', 'join', 'join', 'corr', 'nunique', 'sum', 'isna', 'copy', 'pop', 'mean', 'std', 'mean', 'std', 'query', 'drop', 'corr', 'corr', 'cut', 'mean', 'groupby', 'round', 'sort_index', 'value_counts', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'drop', 'drop', 'concat', 'assign', 'assign', 'assign', 'reset_index', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'concat', 'drop', 'unique', 'array', 'assign', '__init__', 'filter', 'filter', 'filter', 'filter', 'sample', 'sample', 'filter', 'sort_values', 'concat', 'sort_values', 'agg', 'groupby', 'assign', 'merge', 'filter', 'mean', 'head', 'filter', 'transform', 'transform', 'read_csv', 'read_csv', 'read_csv', 'isin', 'value_counts', 'value_counts', 'read_csv', 'read_csv', 'read_csv', 'isin', 'value_counts', 'value_counts', 'copy', 'transform', 'transform', 'concat', 'concat', 'transform', 'transform', 'mean', 'mean', 'mean', 'concat', 'concat', 'round', 'round', 'mean', 'to_csv', 'read_csv', 'hist', 'head'] ['os', 'sys', 'math', 'time', 'warnings', 'numpy', 'pandas', 'seaborn', 'lightgbm', 'plotly.express', 'matplotlib.pyplot', 'plotly.graph_objects', 'matplotlib.colors', 'lightgbm'] ['LGBMRegressor', 'hierarchy', 'PCA', 'Pipeline', 'CatBoostRegressor', 'SVR', 'LinearSVR', 'LADRegression', 'ColumnTransformer', 'squareform', 'mean_absolute_error', 'XGBRegressor', 'XGBClassifier', 'StandardScaler', 'KNeighborsRegressor', 'make_pipeline', 'Pipeline', 'PLSRegression', 'linkage', 'dendrogram', 'TransformerMixin', 'BaseEstimator', 'BaseEstimator', 'TransformerMixin', 'train_test_split', 'KFold', 'StandardScaler', 'MinMaxScaler', 'LinearRegression', 'Ridge', 'Lasso', 'dendrogram', 'ward', 'set_link_color_palette', 'HistGradientBoostingRegressor', 'VotingRegressor', 'StackingRegressor', 'ExtraTreesRegressor', 'RandomForestRegressor', 'GradientBoostingRegressor', 'Fore', 'Style', 'LGBMEstimator']Dict:{'os': [], '': [], 'sys': [], 'math': [], 'time': [], 'warnings': [], 'numpy': ['mean', 'sum', 'array', 'round', 'unique', 'isin', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'cut', 'concat', 'value_counts', 'unique', 'array', 'merge'], 'seaborn': [], 'lightgbm': [], 'plotly': [], 'matplotlib': [], 'scipy': ['__init__'], 'sklearn': ['__init__'], 'catboost': [], 'sklego': [], 'xgboost': ['__init__'], 'colorama': ['__init__'], 'flaml': []} axis_0: 2, axis_1: 5
image-feature-engineering.py : ['join', 'join', 'join', 'mean', 'std', 'head'] ['os', 'zipfile', 'os', 'numpy', 'pandas', 'keras.applications.resnet50', 'keras.applications.xception', 'keras.applications.inception_v3', 'cv2', 'pandas', 'numpy', 'matplotlib.pyplot'] ['image', 'Image', 'Counter', 'pprint']Dict:{'os': [], 'zipfile': [], 'numpy': ['mean', 'std'], 'pandas': [], 'keras': [], 'PIL': [], 'cv2': [], 'collections': [], 'pprint': [], 'matplotlib': []} axis_0: 1, axis_1: 0
kagglers-first-choices-lightgbm-catboost.py : ['read_parquet', 'nunique', 'drop', 'unique', 'groupby', 'to_datetime', 'sort_values', 'apply', 'sum', 'mean', 'sum', 'isnull', 'to_feather', 'reset_index', 'nunique', 'agg', 'groupby', 'join', 'agg', 'groupby', 'mode', 'join', 'apply', 'concat', 'to_feather', 'reset_index', 'groupby', 'astype', 'diff', 'to_feather', 'reset_index', 'nunique', 'nunique', 'read_feather', 'merge', 'reset_index', 'to_feather', 'reset_index', 'concat', 'read_feather', 'read_csv', 'nunique', 'set_index', 'set_index', 'to_feather', 'reset_index', 'read_parquet', 'nunique', 'read_feather', 'merge', 'reset_index', 'to_feather', 'reset_index', 'nunique', 'concat', 'read_feather', 'to_feather', 'reset_index', 'set_index', 'read_feather', 'astype', 'astype', 'sum', 'isnull', 'sum', 'isnull', 'concat', 'rename', 'round', 'sort_values', 'drop', 'corrwith', 'sort_values', 'notna', 'abs', 'sort_values', 'sort_values', 'apply', 'drop', 'sort_values', 'concat', 'apply', 'sum', 'cumsum', 'sum', 'sum', 'sort_values', 'concat', 'apply', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'rename', 'reset_index', 'concat', 'groupby', 'astype', 'sort_values', 'sort_values', 'astype', 'astype', 'unique', 'unique', 'transform', 'astype', 'astype', 'replace', 'corrwith', 'sort_values', 'notna', 'abs', 'apply', 'drop', 'set_index', 'read_feather', 'join', 'apply', 'astype', 'map', 'transform', 'astype', 'astype', 'replace', 'concat', 'concat', 'to_csv', 'concat', 'concat', 'to_csv', 'to_csv', 'astype', 'value_counts', 'rename'] ['numpy', 'pandas', 'os', 'gc', 'sys', 'pickle', 'glob', 'pandas', 'random', 'sys', 'warnings', 'catboost', 'lightgbm', 'joblib', 'pickle', 'uuid', 'logging', 'seaborn', 'matplotlib.pyplot', 'matplotlib.colors', 'plotly.express', 'plotly.graph_objects'] ['LabelEncoder', 'tqdm_notebook', 'partial', 'reduce', 'StratifiedKFold', 'roc_auc_score', 'roc_curve', 'auc', 'Pool', 'CatBoostClassifier', 'tqdm_notebook', 'make_subplots', 'init_notebook_mode', 'partial', 'reduce']Dict:{'numpy': ['mean', 'abs', 'sum', 'round', 'unique', 'diff', 'cumsum'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'read_parquet', 'notna', 'read_feather', 'unique', 'merge', 'to_datetime'], 'os': ['rename', 'replace'], 'gc': [], 'sys': [], 'pickle': [], 'glob': [], 'sklearn': [], 'random': [], 'tqdm': [], 'functools': [], 'warnings': [], 'catboost': [], 'lightgbm': [], 'joblib': [], 'uuid': [], 'logging': [], 'seaborn': [], 'matplotlib': [], 'plotly': []} axis_0: 2, axis_1: 8
mlb-pytorch-dnn-loop-feature-engineering.py : ['read_csv', 'read_csv', 'mode', 'mode', 'array', 'mode', '__init__', 'squeeze', 'concat', 'concat', 'eval', '__init__', 'merge', 'merge', 'clip', 'eval', 'copy', 'apply', 'apply', 'apply', 'merge', 'clip'] ['pandas', 'numpy', 'os', 'torch', 'torch.nn', 'torch.optim', 'torch.nn.functional', 'warnings', 'mlb'] ['tqdm', 'StratifiedKFold', 'TimeSeriesSplit', 'DataLoader', 'Dataset']Dict:{'pandas': ['read_csv', 'eval', 'concat', 'array', 'merge'], 'numpy': ['copy', 'array', 'squeeze', 'clip'], 'tqdm': ['__init__'], 'os': [], 'sklearn': ['__init__'], 'torch': [], 'warnings': [], 'mlb': []} axis_0: 0, axis_1: 2
xfeat-catboost-cpu-only.py : ['to_feather', 'reset_index', 'concat', 'read_csv', 'read_csv', 'to_feather', 'reset_index', 'read_feather', 'to_feather', 'reset_index', 'read_feather', 'to_feather', 'reset_index', 'read_feather', 'to_feather', 'reset_index', 'read_feather', 'reset_index', 'read_feather', 'to_feather', 'to_feather', 'reset_index', 'read_feather', 'to_feather', 'reset_index', 'read_feather', 'to_feather', 'reset_index', 'read_feather', 'concat', 'read_feather', 'read_feather', 'dropna', 'drop', 'concat', 'read_feather', 'read_feather', 'read_feather', 'read_feather', 'read_feather', 'concat', 'read_csv', 'to_csv'] ['pandas', 'catboost'] ['SelectNumerical', 'SelectCategorical', 'LabelEncoder', 'Pipeline', 'SelectCategorical', 'ConcatCombination', 'SelectNumerical', 'LambdaEncoder', 'ArithmeticCombinations']Dict:{'pandas': ['concat', 'read_feather', 'read_csv'], 'xfeat': [], 'catboost': []} axis_0: 0, axis_1: 4
eda-feature-eng-and-model-blending-top-20.py : ['read_csv', 'read_csv', 'copy', 'copy', 'drop', 'copy', 'head', 'select_dtypes', 'select_dtypes', 'groupby', 'any', 'isna', 'any', 'isna', 'describe', 'hist', 'fillna', 'apply', 'any', 'corr', 'sort_values', 'corr', 'abs', 'head', 'copy', 'sum', 'isnull', 'skew', 'min', 'max', 'mean', 'median', 'std', 'boxplot', 'quantile', 'quantile', 'sum', 'skew', 'boxplot', 'quantile', 'quantile', 'sum', 'sum', 'isnull', 'sort_values', 'head', 'copy', 'drop', 'select_dtypes', 'select_dtypes', 'astype', 'apply', 'fillna', 'fillna', 'apply', 'fillna', 'median', 'apply', 'fillna', 'mean', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'astype', 'select_dtypes', 'select_dtypes', 'sort_values', 'apply', 'get_dummies', 'value_counts', 'drop', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'skew', 'copy', 'filter', 'hist', 'copy', 'copy', 'concat', 'reset_index', 'copy', 'drop', 'drop', 'reset_index', 'copy', 'drop', 'drop', 'reset_index', 'mean', 'std', 'reset_index', 'sort_values', 'boxplot', 'sort_values', 'reset_index', 'head', 'mean', 'std', 'reset_index', 'sort_values', 'boxplot', 'array', 'array', 'array', 'to_csv'] ['os', 'sys', 'pandas', 'plotly_express', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'numpy', 'scipy', 'IPython', 'datetime', 'sklearn', 'xgboost', 'warnings', 'xgboost'] ['ExcelWriter', 'ExcelFile', 'stats', 'norm', 'skew', 'boxcox1p', 'boxcox_normmax', 'display', 'display', 'datetime', 'parse', 'time', 'OneHotEncoder', 'LabelEncoder', 'train_test_split', 'GridSearchCV', 'RandomizedSearchCV', 'ShuffleSplit', 'KFold', 'cross_val_score', 'svm', 'tree', 'linear_model', 'neighbors', 'naive_bayes', 'ensemble', 'discriminant_analysis', 'gaussian_process', 'LogisticRegression', 'LinearRegression', 'Ridge', 'RidgeCV', 'ElasticNet', 'ElasticNetCV', 'DecisionTreeClassifier', 'DecisionTreeRegressor', 'KNeighborsClassifier', 'LinearDiscriminantAnalysis', 'GaussianNB', 'SVC', 'SVR', 'KNeighborsClassifier', 'RandomForestClassifier', 'RandomForestRegressor', 'AdaBoostClassifier', 'GradientBoostingRegressor', 'Lasso', 'feature_selection', 'model_selection', 'metrics', 'SimpleImputer', 'StandardScaler', 'OneHotEncoder', 'MinMaxScaler', 'RobustScaler', 'confusion_matrix', 'classification_report', 'precision_recall_curve', 'auc', 'roc_auc_score', 'roc_curve', 'recall_score', 'log_loss', 'f1_score', 'accuracy_score', 'roc_auc_score', 'make_scorer', 'average_precision_score', 'r2_score', 'make_scorer', 'mean_squared_error', 'LGBMRegressor', 'StackingCVRegressor', 'StackingRegressor']Dict:{'os': [], 'sys': [], '#access': [], 'to': [], 'system': [], 'parameters': [], 'https://docs': [], 'pandas': [], 'plotly_express': [], 'matplotlib': ['boxplot', 'hist'], '#collection': [], 'of': [], 'functions': [], 'for': [], 'scientific': [], 'and': [], 'publication-ready': [], 'visualization': [], 'seaborn': ['boxplot'], 'numpy': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'array', 'min', 'std', 'copy'], 'scipy': [], 'IPython': [], 'datetime': ['min', 'max'], 'dateutil': [], 'time': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'mlxtend': [], 'warnings': [], '=': [], 'rf_imp': []} axis_0: 3, axis_1: 8
titanic-eda-and-feature-engineering.py : ['join', 'read_csv', 'unique', 'nunique', 'describe', 'describe', 'sum', 'isna', 'round', 'transpose', 'isna', 'duplicated', 'value_counts', 'corr', 'crosstab', 'get_dummies', 'drop', 'copy', 'cut', 'cut', 'value_counts', 'apply', 'apply', 'head', 'apply', 'value_counts', 'copy', 'sort_values', 'drop_duplicates', 'copy', 'transform', 'groupby', 'sort_values', 'drop_duplicates', 'drop', 'isna', 'sort_values', 'apply', 'apply', 'sort_values', 'apply', 'head', 'cut', 'head', 'head', 'head', 'to_csv'] ['os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['chi2_contingency']Dict:{'os': [], 'numpy': ['transpose', 'sum', 'round', 'unique', 'copy'], 'pandas': ['isna', 'read_csv', 'cut', 'value_counts', 'get_dummies', 'unique', 'crosstab'], 'matplotlib': [], 'seaborn': [], 'scipy': []} axis_0: 0, axis_1: 2
goto-conversion-optiver-baseline-models.py : [] [] []Dict:{} axis_0: 0, axis_1: 2
housing-price-prediction-regression.py : ['read_csv', 'read_csv', 'head', 'head', 'drop', 'drop', 'drop', 'corr', 'reset_index', 'concat', 'drop', 'sum', 'isnull', 'sort_values', 'head', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'value_counts', 'fillna', 'value_counts', 'drop', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'sum', 'isnull', 'sort_values', 'head', 'astype', 'astype', 'astype', 'astype', 'transform', 'sort_values', 'apply', 'dropna', 'head', 'get_dummies', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'lightgbm', 'warnings'] ['stats', 'norm', 'skew', 'boxcox1p', 'LabelEncoder', 'OrdinalEncoder', 'RobustScaler', 'ElasticNet', 'Lasso', 'BayesianRidge', 'LassoLarsIC', 'RandomForestRegressor', 'GradientBoostingRegressor', 'KernelRidge', 'make_pipeline', 'BaseEstimator', 'TransformerMixin', 'RegressorMixin', 'clone', 'KFold', 'cross_val_score', 'train_test_split', 'mean_squared_error']Dict:{'numpy': ['mean', 'median', 'std', 'sum'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'sklearn': [], 'xgboost': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 4
ieee-cis-fraud-detection-eda.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'value_counts', 'mean', 'groupby', 'mean', 'groupby', 'apply', 'astype', 'astype', 'astype', 'astype', 'astype', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'agg', 'groupby', 'sort_values', 'sort_values', 'astype', 'astype', 'mean', 'groupby', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'head', 'sort_values', 'mean', 'groupby', 'head', 'sort_values', 'qcut', 'mean', 'groupby', 'sort_values', 'merge', 'hist', 'value_counts', 'isin', 'value_counts', 'value_counts', 'value_counts', 'sort_values', 'sum', 'isna', 'corr', 'head', 'head', 'nunique', 'nunique', 'apply', 'apply', 'hist', 'hist', 'value_counts', 'isin', 'value_counts', 'value_counts', 'value_counts', 'sort_values', 'apply', 'apply', 'min', 'max', 'min', 'max', 'hist', 'hist', 'assign', 'shift', 'groupby', 'concat', 'describe', 'describe', 'concat', 'describe', 'describe', 'assign', 'shift', 'groupby', 'apply', 'head', 'isna', 'crosstab', 'crosstab', 'crosstab', 'concat', 'get_dummies', 'head', 'corr', 'transform', 'groupby', 'sort_values', 'drop_duplicates', 'sum', 'isnull', 'nunique', 'head', 'hist', 'hist', 'hist', 'hist', 'astype', 'astype', 'astype', 'astype', 'nunique', 'nunique', 'nunique', 'nunique', 'astype', 'astype', 'astype', 'astype', 'nunique', 'value_counts', 'sort_values', 'mean', 'groupby', 'nunique', 'nunique', 'value_counts', 'nunique', 'value_counts', 'where', 'isna', 'where', 'isna', 'fillna', 'fillna', 'unique', 'mean', 'head', 'sort_values', 'apply', 'fillna', 'crosstab', 'apply', 'crosstab', 'sort_values', 'describe', 'corr', 'head', 'head', 'head', 'describe', 'corr', 'hist', 'sum', 'isnull', 'hist', 'sum', 'isnull', 'head', 'head', 'head', 'sum', 'sum', 'describe', 'sum', 'sum', 'sum', 'isnull', 'head', 'isnull', 'head', 'isnull', 'hist', 'sum', 'isnull', 'hist', 'sum', 'isnull', 'describe', 'fillna', 'add', 'fillna', 'reset_index', 'sort_values', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'merge', 'merge', 'pop', 'pop', 'reset_index', 'fillna', 'sum', 'isnull', 'drop', 'apply', 'astype', 'astype', 'value_counts', 'mean', 'map', 'to_dict', 'drop', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'sub', 'apply', 'sub', 'head', 'transform', 'groupby', 'transform', 'groupby', 'value_counts', 'map', 'astype', 'fillna', 'factorize', 'notnull', 'drop', 'isnull', 'pop', 'max', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'gc', 'os', 'sys', 're', 'warnings', 'datetime', 'datetime'] ['metrics', 'preprocessing', 'StratifiedKFold', 'PCA', 'KernelPCA', 'LinearDiscriminantAnalysis', 'KMeans', 'tqdm']Dict:{'numpy': ['mean', 'max', 'add', 'sum', 'where', 'min', 'unique', 'isin'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'factorize', 'unique', 'notnull', 'qcut', 'merge', 'crosstab'], 'matplotlib': ['hist'], 'seaborn': [], 'gc,os,sys': [], 're': ['sub'], 'sklearn': [], 'tqdm': [], 'warnings': [], 'datetime': []} axis_0: 0, axis_1: 18
wallmart-sales-top-3-eda-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'reset_index', 'sort_values', 'merge', 'reset_index', 'sort_values', 'merge', 'merge', 'to_datetime', 'to_datetime', 'to_datetime', 'reset_index', 'sort_values', 'merge', 'reset_index', 'sort_values', 'merge', 'describe', 'sum', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'agg', 'groupby', 'to_dict', 'to_dict', 'to_dict', 'sort_index', 'apply', 'apply', 'sample', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'mean', 'groupby', 'concat', 'concat', 'dropna', 'sort_values', 'mean', 'groupby', 'corr', 'round', 'mask', 'to_numpy', 'corr', 'sort_values', 'copy', 'copy', 'astype', 'to_datetime', 'astype', 'to_datetime', 'astype', 'to_datetime', 'astype', 'to_datetime', 'astype', 'to_datetime', 'astype', 'to_datetime', 'astype', 'to_datetime', 'astype', 'to_datetime', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'sort_values', 'sum', 'isna', 'sum', 'isna', 'sort_values', 'sum', 'isna', 'sum', 'isna', 'fillna', 'fillna', 'mean', 'fillna', 'mean', 'fillna', 'apply', 'apply', 'apply', 'apply', 'copy', 'copy', 'sample', 'copy', 'copy', 'copy', 'sort_values', 'read_html', 'apply', 'round', 'sum', 'sum', 'mean', 'mean', 'items', 'copy', 'copy', 'to_csv', 'to_csv'] ['pandas', 'numpy', 'plotly.express', 'plotly.graph_objs', 'plotly.figure_factory', 'eli5', 'xgboost', 'catboost', 'lightgbm', 'warnings'] ['model_selection', 'metrics', 'PermutationImportance', 'linear_model', 'ensemble', 'enable_hist_gradient_boosting', 'HistGradientBoostingRegressor']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'read_html', 'merge', 'to_datetime'], 'numpy': ['mean', 'round', 'sum', 'copy'], 'plotly': [], 'sklearn': [], 'eli5': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'warnings': []} axis_0: 0, axis_1: 2
inverse-square-law.py : ['to_json', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'groupby', 'abs', 'mean', 'map', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'head', 'head', 'head', 'concat', 'items', 'head', 'where', 'where', 'where', 'where', 'mean', 'std', 'join', 'head', 'merge', 'rename', 'apply', 'apply', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'merge', 'drop', 'copy', 'copy', 'rename', 'concat', 'transform', 'groupby', 'drop', 'rename', 'rename', 'drop', 'drop', 'describe', 'concat', 'describe', 'drop', 'copy', 'copy', 'copy', 'unique', 'copy', 'copy', 'unique', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'metrics', 'linear_model', 'HTML', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'product', 'tqdm_notebook']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'where', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'os': ['rename'], 'matplotlib': [], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'catboost': [], 'gc': [], 'seaborn': [], 'warnings': [], 'IPython': [], 'json': [], 'altair': [], 'networkx': [], 'numba': [], 'itertools': []} axis_0: 9, axis_1: 12
do-you-desire-sun-power.py : ['unique', 'reset_index', 'rename', 'rename', 'drop', 'join', 'rename', 'drop', 'join', 'drop', 'mean', 'mean', 'filter', 'drop', 'mean', 'mean', 'filter', 'drop', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'rename', 'rename', 'rename', 'rename', 'rename', 'rename', 'rename', 'concat', 'set_index', 'astype', 'mean', 'std', 'drop', 'mean', 'read_csv', 'pivot_table', 'to_datetime', 'copy', 'min', 'max', 'min', 'mean', 'resample', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'drop', 'notnull', 'gt', 'drop', 'drop', 'rename', 'unique', 'concat', 'unique', 'concat', 'unique', 'concat', 'clip', 'clip'] ['os', 'gc', 'pickle', 'numpy', 'pandas', 'polars', 'matplotlib.pyplot', 'lightgbm', 'optuna', 'enefit'] ['cross_val_score', 'cross_validate', 'mean_absolute_error', 'TransformedTargetRegressor', 'VotingRegressor']Dict:{'os': ['rename'], 'gc': [], 'pickle': [], 'numpy': ['mean', 'max', 'min', 'unique', 'clip', 'std', 'copy'], 'pandas': ['read_csv', 'pivot_table', 'concat', 'unique', 'notnull', 'to_datetime'], 'polars': ['mean', 'max', 'read_csv', 'concat', 'min', 'std'], 'matplotlib': [], 'sklearn': [], 'lightgbm': [], 'optuna': [], 'enefit': []} axis_0: 0, axis_1: 1
values-to-numpy-vs-itertuples-vs-iterrows.py : ['concat', 'to_numpy', 'concat', 'itertuples', 'concat', 'iterrows', 'concat', 'read_pickle', 'reset_index', 'describe', 'describe', 'describe', 'sample', 'describe'] ['gc', 'pandas', 'numpy'] ['defaultdict', 'roc_auc_score', 'tqdm']Dict:{'gc': [], 'collections': [], 'pandas': ['read_pickle', 'concat'], 'numpy': [], 'sklearn': [], 'tqdm': []} axis_0: 0, axis_1: 4
xgboost-feature-engineering-spaceship-titanic.py : ['read_csv', 'join', 'read_csv', 'join', 'join', 'head', 'drop', 'drop', 'value_counts', 'transform', 'to_csv'] ['numpy', 'pandas', 'os'] ['preprocessing', 'StandardScaler', 'XGBClassifier', 'RandomizedSearchCV', 'StratifiedKFold', 'Path']Dict:{'numpy': [], 'pandas': ['read_csv', 'value_counts'], 'os': [], 'sklearn': [], 'xgboost': [], 'pathlib': []} axis_0: 0, axis_1: 2
top-5-on-leaderboard.py : ['read_csv', 'read_csv', 'head', 'drop', 'reset_index', 'round', 'sort_values', 'corr', 'drop', 'head', 'head', 'copy', 'copy', 'reset_index', 'concat', 'drop', 'drop', 'sort_values', 'sum', 'isnull', 'drop', 'fillna', 'unique', 'fillna', 'unique', 'fillna', 'unique', 'fillna', 'unique', 'fillna', 'unique', 'fillna', 'mean', 'dropna', 'fillna', 'unique', 'fillna', 'unique', 'fillna', 'unique', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'sort_values', 'dropna', 'fillna', 'sort_values', 'dropna', 'fillna', 'fillna', 'sort_values', 'dropna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'sort_values', 'dropna', 'fillna', 'sort_values', 'dropna', 'fillna', 'sort_values', 'dropna', 'sort_values', 'sum', 'isnull', 'drop', 'drop', 'get_dummies', 'get_dummies', 'head', 'get_dummies', 'head', 'get_dummies', 'get_dummies', 'drop', 'get_dummies', 'get_dummies', 'drop', 'get_dummies', 'transform', 'transform'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] ['StandardScaler', 'LinearRegression', 'LogisticRegression', 'XGBRegressor', 'DecisionTreeRegressor', 'svm', 'GaussianNB', 'MultinomialNB', 'RandomForestRegressor']Dict:{'numpy': ['mean', 'sum', 'round', 'unique', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'unique'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 1
data-preprocessing-feature-engineering-tutorial.py : ['read_csv', 'head', 'describe', 'describe', 'sum', 'isnull', 'read_csv', 'drop', 'read_csv', 'fillna', 'fillna', 'mean', 'fillna', 'median', 'fillna', 'min', 'fillna', 'max', 'read_csv', 'fillna', 'transform', 'groupby', 'fillna', 'transform', 'groupby', 'read_csv', 'fillna', 'fillna', 'read_csv', 'interpolate', 'interpolate', 'interpolate', 'interpolate', 'transform', 'read_csv', 'drop', 'read_csv', 'info', 'read_csv', 'astype', 'astype', 'info', 'read_csv', 'head', 'head', 'read_csv', 'head', 'get_dummies', 'concat', 'drop', 'head', 'read_csv', 'head', 'head', 'value_counts', 'map', 'add_suffix', 'add_suffix', 'add_suffix', 'astype', 'read_csv', 'head', 'read_csv', 'read_csv', 'read_csv', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'read_csv', 'head', 'head', 'head', 'read_csv', 'quantile', 'describe', 'read_csv', 'transform', 'info', 'apply', 'to_datetime', 'info', 'assign', 'head', 'apply', 'apply', 'apply', 'apply', 'apply', 'read_csv', 'head', 'info', 'apply', 'to_datetime', 'info', 'head', 'apply', 'to_datetime', 'assign', 'head', 'assign', 'head', 'merge', 'head', 'read_csv', 'head', 'head', 'max', 'groupby', 'min', 'groupby', 'mean', 'groupby', 'count', 'groupby', 'groupby', 'max', 'transform', 'groupby', 'max', 'head', 'agg', 'groupby', 'merge', 'head', 'read_csv', 'head', 'head', 'head', 'read_csv', 'head', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'tail', 'shift', 'head', 'hist'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'category_encoders'] ['tqdm_notebook', 'preprocessing', 'SimpleImputer', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'Normalizer', 'RobustScaler']Dict:{'numpy': ['mean', 'median', 'quantile', 'max', 'sum', 'min', 'info'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'merge', 'to_datetime'], 'matplotlib': ['hist'], 'seaborn': [], 'warnings': [], 'tqdm': [], 'sklearn': ['transform'], 'category_encoders': []} axis_0: 1, axis_1: 3
ensemble-learning-techniques-tutorial.py : ['groupby', 'read_csv', 'read_csv', 'drop', 'concat', 'drop', 'sum', 'isnull', 'sort_values', 'agg', 'groupby', 'qcut', 'agg', 'groupby', 'transform', 'groupby', 'fillna', 'median', 'transform', 'groupby', 'fillna', 'median', 'sum', 'isnull', 'sort_values', 'fillna', 'fillna', 'fillna', 'mode', 'sum', 'isnull', 'sum', 'isnull', 'select_dtypes', 'astype', 'agg', 'groupby', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'map', 'drop', 'drop', 'head', 'skew', 'select_dtypes', 'apply', 'skew', 'get_dummies', 'copy', 'transform', 'transform', 'transform', 'transform', 'mean', 'std', 'array', 'sum', 'mean', 'mean', 'mod', 'mod', 'mod', 'mod', 'mean', 'mod', 'mod', 'mod', 'mean', 'mean', 'concat', 'concat', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std'] ['xgboost', 'pandas', 'numpy', 'matplotlib.pyplot', 'matplotlib', 'seaborn', 'warnings'] ['VotingClassifier', 'BaggingClassifier', 'ExtraTreesClassifier', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'accuracy_score', 'mean', 'std', 'make_classification', 'cross_val_score', 'RepeatedStratifiedKFold', 'train_test_split', 'LogisticRegression', 'RidgeClassifier', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'SVC', 'GaussianNB', 'pyplot', 'load_wine', 'load_iris', 'figure', 'SelectKBest', 'f_regression', 'LinearRegression', 'BayesianRidge', 'ElasticNet', 'Lasso', 'SGDRegressor', 'Ridge', 'KernelRidge', 'LabelEncoder', 'OneHotEncoder', 'RobustScaler', 'StandardScaler', 'make_pipeline', 'Pipeline', 'mean_squared_error', 'PCA', 'KernelPCA', 'ExtraTreesRegressor', 'GradientBoostingRegressor', 'RandomForestRegressor', 'VotingClassifier', 'cross_val_score', 'KFold', 'GridSearchCV', 'RandomizedSearchCV', 'StratifiedKFold', 'train_test_split', 'BaseEstimator', 'clone', 'TransformerMixin', 'RegressorMixin', 'LinearSVR', 'SVR', 'XGBRegressor', 'skew', 'pearsonr', 'make_blobs', 'pyplot', 'DataFrame', 'SimpleImputer', 'load_wine', 'load_wine', 'VotingClassifier', 'load_wine']Dict:{'sklearn': [], 'numpy': ['mean', 'median', 'sum', 'array', 'mod', 'std', 'copy'], 'matplotlib': [], 'xgboost': ['apply'], 'pandas': ['transform', 'drop', 'copy', 'map', 'head', 'apply', 'mod', 'sort_values', 'std', 'isnull', 'skew', 'fillna', 'groupby', 'mean', 'median', 'agg', 'sum', 'mode', 'select_dtypes', 'astype'], 'seaborn': [], 'warnings': [], 'scipy': []} axis_0: 0, axis_1: 6
language-initial-eda-and-feature-engineering.py : ['join', 'read_csv', 'head', 'read_csv', 'describe', 'info', 'drop', 'apply', 'mean', 'join', 'apply', 'apply', 'apply', 'astype', 'info', 'boxplot', 'boxplot'] ['numpy', 'pandas', 'os', 'seaborn', 'matplotlib.pyplot', 'nltk'] ['word_tokenize', 'WordCloud', 'CategoricalDtype']Dict:{'numpy': ['mean', 'info'], 'pandas': [], 'os': [], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'nltk': [], '#': [], 'Tool': [], 'for': [], 'text': [], 'analysis': [], 'wordcloud': []} axis_0: 0, axis_1: 0
data-analysis-and-feature-extraction-with-python.py : ['sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'read_csv', 'copy', 'head', 'describe', 'drop', 'head', 'fillna', 'max', 'drop', 'isnull', 'isnull', 'drop', 'head', 'head', 'drop', 'drop', 'head', 'drop', 'drop', 'head', 'get_dummies', 'head', 'head', 'head', 'mean', 'std', 'copy', 'head', 'head', 'drop', 'drop', 'head', 'drop', 'head', 'unique', 'head', 'unique', 'mean', 'groupby', 'head', 'to_dict', 'map', 'head', 'head', 'count', 'groupby', 'map', 'head', 'unique', 'unique', 'cut', 'head', 'boxplot', 'mean', 'groupby', 'count', 'groupby', 'count', 'groupby', 'head', 'drop', 'get_dummies', 'head', 'copy', 'copy', 'transform', 'transform', 'transform', 'mean', 'std', 'mean', 'transform', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'transform', 'mean', 'std', 'read_csv', 'copy', 'drop', 'drop', 'drop', 'mean', 'groupby', 'to_dict', 'map', 'map', 'cut', 'drop', 'get_dummies', 'fillna', 'mean', 'copy', 'transform', 'transform', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot'] ['train_test_split', 'learning_curve', 'validation_curve', 'cross_val_score', 'LogisticRegression', 'train_test_split', 'boxcox', 'MinMaxScaler', 'PolynomialFeatures', 'SelectKBest', 'chi2']Dict:{'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'get_dummies', 'unique'], 'numpy': ['mean', 'max', 'sum', 'unique', 'std', 'copy'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'sklearn': [], 'scipy': []} axis_0: 0, axis_1: 23
covid19-feature-engineering-xgboost.py : ['join', 'read_json', 'read_json', 'read_csv', 'head', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'sum', 'unique', 'get_dummies', 'get_dummies', 'transform', 'transform', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'catboost', 'optuna', 'imblearn', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'pandas', 'nltk', 'operator', 're', 'sys', 'nltk', 'statsmodels.api', 'time', 'optuna', 'xgboost', 'sklearn', 'optuna', 'xgboost', 'sklearn', 'optuna', 'xgboost', 'sklearn'] ['CatBoostRegressor', 'RandomUnderSampler', '*', 'Pool', 'datetime', 'mean', 'make_classification', 'cross_val_score', 'RepeatedStratifiedKFold', 'XGBClassifier', 'train_test_split', 'cross_val_score', 'LinearRegression', 'RidgeCV', 'train_test_split', 'DecisionTreeClassifier', 'RandomForestClassifier', 'preprocessing', 'SVC', 'LogisticRegression', 'StandardScaler', 'classification_report', 'accuracy_score', 'roc_auc_score', 'norm', 'skew', 'stats', 'mean_squared_error', 'make_scorer', 'StandardScaler', 'GridSearchCV', 'tqdm', 'stats', 'stopwords', 'stopwords', 'PorterStemmer', 'TfidfVectorizer', 'ols']Dict:{'numpy': [], 'pandas': ['get_dummies', 'unique', 'read_json', 'read_csv'], 'os': [], 'catboost': [], 'optuna': [], 'imblearn': [], 'matplotlib': [], 'seaborn': [], 'datetime': [], 'sklearn': [], 'xgboost': [], 'scipy': [], 'tqdm': [], 'nltk': [], 'operator': [], 're': [], 'sys': [], 'statsmodels': [], 'time': []} axis_0: 0, axis_1: 0
simple-lgbm-multi-class-classification-baseline.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'join', 'read_csv', 'concat', 'read_csv', 'merge', 'drop', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'join', 'read_csv', 'concat', 'read_csv', 'merge', 'drop', 'value_counts', 'drop', 'read_csv', 'astype', 'astype', 'set_index', 'where', 'where', 'where', 'head', 'read_csv', 'astype', 'astype', 'set_index', 'where', 'where', 'where', 'reset_index', 'head', 'concat', 'head', 'read_csv', 'head'] ['os', 'random', 'cv2', 'pandas', 'numpy', 'gc', 'gc', 'warnings', 'lightgbm'] ['KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'LabelEncoder', 'precision_score']Dict:{'os': [], 'random': [], 'cv2': [], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'merge'], 'numpy': ['transpose', 'max', 'sum', 'where', 'min'], 'gc': [], 'sklearn': [], 'warnings': [], 'lightgbm': []} axis_0: 2, axis_1: 1
riiid-aied-part-iii-feature-engineering.py : ['memory_usage', 'drop', 'info', 'read_csv', 'join', 'set_index', 'head', 'info', 'astype', 'agg', 'groupby', 'head', 'astype', 'agg', 'groupby', 'astype', 'head', 'info', 'concat', 'reset_index', 'reset_index', 'reindex', 'reset_index', 'reindex', 'reset_index', 'reindex', 'fillna', 'concat', 'agg', 'groupby', 'join', 'head', 'read_pickle', 'join', 'read_pickle', 'join', 'astype', 'fillna', 'fillna', 'astype', 'fillna', 'fillna'] ['os', 'pandas', 'numpy', 'pickle', 'gc', 'warnings', 'lightgbm'] []Dict:{'os': [], 'pandas': ['concat', 'read_pickle', 'read_csv'], 'numpy': ['info'], 'pickle': [], 'gc': [], 'warnings': [], 'lightgbm': []} axis_0: 0, axis_1: 2
flm-xlmroberta-inference-baseline.py : ['read_csv', 'concat', 'drop_duplicates', 'reset_index', 'astype', 'abs', 'abs', 'astype', 'astype', 'map', 'astype', 'map', 'astype', 'max', 'astype', 'concat', 'fillna', 'array', 'astype', 'copy', 'concat', 'where', 'reset_index', 'apply', 'groupby', 'unique', 'apply', 'join', 'isin', 'concat', 'to_csv', 'drop'] ['os', 'gc', 're', 'joblib', 'numpy', 'pandas', 'warnings', 'random', 'math', 'tensorflow', 'Levenshtein', 'difflib'] ['tqdm', 'NearestNeighbors', 'StandardScaler', 'backend', 'mixed_precision', 'AutoTokenizer', 'TFAutoModel', 'AutoConfig']Dict:{'os': [], 'gc': [], 're': [], 'joblib': [], 'numpy': ['max', 'abs', 'where', 'unique', 'isin', 'array', 'copy'], 'pandas': ['concat', 'array', 'unique', 'read_csv'], 'warnings': [], 'random': [], 'math': [], 'tqdm': [], 'sklearn': [], 'tensorflow': [], 'transformers': [], 'Levenshtein': [], 'difflib': []} axis_0: 0, axis_1: 0
votingclassifier-ensemble-with-just-5-feature.py : ['read_csv', 'read_csv', 'reset_index', 'concat', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'astype', 'astype', 'median', 'groupby', 'mean', 'apply', 'groupby', 'fillna', 'median', 'isnull', 'fillna', 'isnull', 'mean', 'groupby', 'fillna', 'transform', 'groupby', 'value_counts', 'head', 'unique', 'head', 'head', 'head', 'replace', 'factorize', 'factorize', 'factorize', 'factorize', 'head', 'drop', 'corr', 'head', 'corr', 'head', 'insert', 'drop', 'head', 'drop', 'head', 'get_dummies', 'head', 'insert', 'drop', 'head', 'head', 'astype', 'mean', 'std', 'boxplot', 'mean', 'std', 'tail', 'drop', 'head', 'to_csv'] ['numpy', 'pandas', 'warnings'] ['OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'MinMaxScaler', 'train_test_split', 'KFold', 'cross_val_score', 'accuracy_score', 'Pipeline', 'LogisticRegression', 'LinearDiscriminantAnalysis', 'DecisionTreeClassifier', 'KNeighborsClassifier', 'GaussianNB', 'SVC', 'RandomForestClassifier', 'ExtraTreesClassifier', 'pyplot', 'Counter', 'VotingClassifier', 'XGBClassifier', 'StratifiedKFold', 'mutual_info_classif']Dict:{'numpy': ['mean', 'median', 'std', 'sum', 'unique', 'insert'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'factorize', 'get_dummies', 'unique'], 'sklearn': [], 'matplotlib': ['boxplot'], 'collections': [], 'xgboost': ['apply'], 'warnings': []} axis_0: 0, axis_1: 5
icr-xgboot-and-lgb-voting-stacking.py : ['join', 'sum', 'sum', 'clip', 'sum', 'sum', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'mean', 'isna', 'mean', 'isna', 'merge', 'head', 'describe', 'value_counts', 'value_counts', 'head', 'abs', 'corr', 'sort_values', 'unstack', 'mean', 'head', 'head', 'to_csv'] ['warnings', 'os', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'xgboost', 'lightgbm', 'catboost'] ['log_loss', 'confusion_matrix', 'roc_curve', 'roc_auc_score', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'KNNImputer', 'MinMaxScaler', 'OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'Pipeline', 'StackingClassifier', 'VotingClassifier', 'CatBoostClassifier', 'XGBClassifier']Dict:{'warnings': [], 'os': [], 'numpy': ['mean', 'abs', 'sum', 'clip'], 'pandas': ['isna', 'merge', 'read_csv', 'value_counts'], 'seaborn': [], 'matplotlib': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'sklearn': []} axis_0: 0, axis_1: 1
titanic-data-cleaning-model-fitting.py : ['join', 'read_csv', 'info', 'head', 'read_csv', 'info', 'head', 'concat', 'boxplot', 'replace', 'replace', 'sum', 'isna', 'sum', 'isna', 'mean', 'mean', 'replace', 'replace', 'drop', 'drop', 'replace', 'replace', 'sum', 'isna', 'sum', 'isna', 'apply', 'value_counts', 'apply', 'value_counts', 'map', 'map', 'value_counts', 'value_counts', 'drop', 'drop', 'value_counts', 'info', 'info', 'head', 'head', 'transform', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'missingno', 'seaborn', 'missingno', 'lightgbm'] ['pyplot', 'LabelEncoder', 'OneHotEncoder', 'RandomForestClassifier', 'train_test_split', 'LogisticRegression', 'XGBClassifier', 'train_test_split', 'GridSearchCV', 'StratifiedKFold', 'cross_val_score', 'KNeighborsClassifier', 'SVC', 'LinearSVC', 'GridSearchCV', 'Pipeline', 'accuracy_score', 'r2_score', 'MinMaxScaler']Dict:{'numpy': ['mean', 'info', 'sum'], 'pandas': ['isna', 'concat', 'read_csv', 'value_counts'], 'os': ['replace'], 'matplotlib': ['boxplot'], 'missingno': [], 'seaborn': ['boxplot'], 'sklearn': ['transform'], 'xgboost': ['apply'], 'lightgbm': [], '=': [], 'model': []} axis_0: 0, axis_1: 5
riiid-eda-feature-engineering-and-models.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'max', 'apply', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'sort_values', 'read_csv', 'read_csv', 'head', 'value_counts', 'head', 'head', 'hist', 'head', 'sort_values', 'max', 'groupby', 'value_counts', 'value_counts', 'nunique', 'value_counts', 'value_counts', 'reset_index', 'drop', 'astype', 'fillna', 'copy', 'agg', 'groupby', 'copy', 'agg', 'groupby', 'merge', 'merge', 'fillna', 'head', 'sort_values', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'merge', 'merge', 'astype', 'fillna', 'reset_index', 'fillna'] ['riiideducation', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'numpy', 'pandas', 'math', 'time', 'random', 'lightgbm', 'gc', 'os'] ['List', 'Dict', 'Optional', 'RepeatedKFold', 'train_test_split', 'LabelEncoder', 'jit', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit', 'metrics']Dict:{'riiideducation': [], 'pandas': ['concat', 'merge', 'read_csv', 'value_counts'], 'matplotlib': ['hist'], 'seaborn': [], 'os': [], 'typing': [], 'numpy': ['mean', 'max', 'sum', 'min', 'isin', 'std', 'copy'], 'sklearn': [], 'math': [], 'time': [], 'random': [], 'lightgbm': [], 'gc': [], 'numba': []} axis_0: 1, axis_1: 1
starter-code-with-baseline.py : ['read_csv', 'head', 'drop', 'head', 'read_csv', 'drop', 'head', 'info', 'value_counts', 'apply', 'select_dtypes', 'nunique', 'sum', 'isnull', 'sum', 'isnull', 'concat', 'rename', 'round', 'sort_values', 'value_counts', 'hist', 'astype', 'copy', 'copy', 'concat', 'drop', 'value_counts', 'isin', 'drop', 'select_dtypes', 'select_dtypes', 'astype', 'info', 'head', 'fillna', 'sum', 'isnull', 'drop', 'drop', 'drop', 'to_csv', 'head', 'to_csv', 'reset_index', 'sort_values', 'sum', 'head', 'head', 'isin', 'mean', 'mean', 'mean'] ['numpy', 'pandas', 'gc', 'lightgbm', 'os', 'klib', 'warnings', 'matplotlib.pyplot', 'seaborn'] ['confusion_matrix', 'roc_auc_score', 'roc_curve', 'auc', 'LabelEncoder', 'train_test_split', 'LogisticRegression', 'RandomForestClassifier', 'cross_val_score', 'StratifiedKFold', 'classification_report']Dict:{'numpy': ['mean', 'sum', 'round', 'isin', 'info', 'copy'], 'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'gc': [], 'sklearn': [], 'lightgbm': [], 'os': ['rename'], 'klib': [], 'warnings': [], 'matplotlib': ['hist'], 'seaborn': []} axis_0: 1, axis_1: 6
titanic-81-1-leader-board-score-guaranteed.py : ['read_csv', 'read_csv', 'reset_index', 'concat', 'drop', 'sample', 'info', 'sample', 'info', 'sample', 'describe', 'value_counts', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'count', 'isnull', 'sort_values', 'concat', 'head', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'count', 'isnull', 'sort_values', 'concat', 'head', 'reset_index', 'sort_values', 'unstack', 'abs', 'corr', 'rename', 'median', 'groupby', 'astype', 'apply', 'groupby', 'fillna', 'median', 'isnull', 'fillna', 'map', 'isnull', 'median', 'groupby', 'fillna', 'map', 'hist', 'copy', 'sort_values', 'value_counts', 'apply', 'notnull', 'rename', 'drop', 'count', 'groupby', 'transpose', 'sum', 'transpose', 'transpose', 'rename', 'drop', 'count', 'groupby', 'sum', 'transpose', 'replace', 'replace', 'replace', 'value_counts', 'drop', 'sum', 'isnull', 'head', 'corr', 'qcut', 'qcut', 'value_counts', 'value_counts', 'map', 'value_counts', 'value_counts', 'transform', 'groupby', 'value_counts', 'value_counts', 'replace', 'replace', 'value_counts', 'value_counts', 'sample', 'replace', 'unique', 'unique', 'unique', 'unique', 'median', 'groupby', 'median', 'groupby', 'mean', 'nunique', 'concat', 'concat', 'drop', 'head', 'drop', 'drop', 'sort_values', 'set_index', 'head', 'mean', 'std', 'round', 'set_index', 'sort_values', 'head', 'astype', 'mean', 'std', 'to_csv', 'read_csv', 'head'] ['numpy', 'pandas', 'seaborn', 'string', 'warnings'] ['pyplot', 'style', 'OneHotEncoder', 'LabelEncoder', 'StandardScaler', 'roc_curve', 'auc', 'linear_model', 'LogisticRegression', 'RandomForestClassifier', 'Perceptron', 'SGDClassifier', 'DecisionTreeClassifier', 'KNeighborsClassifier', 'SVC', 'LinearSVC', 'GaussianNB', 'cross_val_score', 'StratifiedKFold', 'cross_val_score', 'cross_val_predict', 'confusion_matrix', 'precision_score', 'recall_score', 'f1_score', 'roc_curve', 'roc_auc_score']Dict:{'numpy': ['transpose', 'mean', 'median', 'abs', 'sum', 'round', 'unique', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'notnull', 'qcut'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'string': [], 'warnings': [], '=': [], 'pd': [], 'importances': []} axis_0: 0, axis_1: 6
openvaccine-gru-lstm.py : ['read_json', 'read_json', 'read_csv', 'any', 'isnull', 'head', 'any', 'isnull', 'head', 'any', 'isnull', 'head', 'sum', 'max', 'sum', 'head', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'read_csv', 'head', 'copy', 'isin', 'merge', 'map', 'to_dict', 'set_index', 'unique', 'unique', 'transpose', 'array', 'applymap', 'array', 'array', 'copy', 'query', 'copy', 'query', 'transpose', 'array', 'transpose', 'array', 'reset_index', 'mean', 'groupby', 'concat', 'concat', 'read_json', 'unique', 'merge', 'mean', 'mean', 'mean', 'mean', 'merge', 'head', 'to_csv'] ['warnings', 'pandas', 'numpy', 'seaborn', 'math', 'json', 'os', 'random', 'tensorflow', 'tensorflow_addons', 'keras.backend'] ['pyplot', 'tqdm', 'KFold', 'StratifiedKFold', 'GroupKFold', 'KMeans']Dict:{'warnings': [], 'pandas': ['read_csv', 'isnull', 'read_json', 'concat', 'unique', 'array', 'merge'], 'math,': [], 'json,': [], 'os,': [], 'random': [], 'matplotlib': [], 'tqdm': [], 'tensorflow': ['transpose', 'unique', 'concat'], 'tensorflow_addons': [], 'keras': ['transpose', 'mean', 'any', 'max', 'sum'], 'sklearn': []} axis_0: 1, axis_1: 2
training-while-reading-vowpal-wabbit-starter.py : ['replace', 'replace', 'join', 'join', 'read_csv', 'to_csv'] ['math', 'pandas'] ['datetime', 'pyvw']Dict:{'math': [], 'pandas': ['read_csv'], 'datetime': ['replace'], 'vowpalwabbit': []} axis_0: 0, axis_1: 0
bayesian-optimization-seed-blending.py : ['cut', 'cut', 'unique', 'where', 'where', 'keys', 'keys', 'transform', 'transform', 'transform', 'transform', 'copy', 'copy', 'copy', 'copy', 'concat', 'astype', 'hist', 'hist', 'items', 'transform', 'transform', 'transform', 'drop', 'drop', 'drop', 'items', 'items', 'items', 'mean', 'transform', 'copy', 'items', 'transform', 'drop', 'rank', 'isin', 'astype', 'mean', 'groupby', 'sort_values', 'keys', 'rename', 'reset_index', 'rename', 'melt', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'value_counts', 'value_counts', 'map', 'map', 'map', 'map', 'map', 'astype', 'to_datetime', 'to_datetime', 'groupby', 'query', 'sum', 'sum', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'mean', 'update', 'keys', 'groupby', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'sum', 'transform', 'groupby', 'sum', 'sum', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'where', 'where', 'astype', 'to_csv', 'value_counts'] ['numpy', 'pandas', 'random', 'os', 'copy', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'catboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'eli5', 'shap', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'scipy', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 're'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'defaultdict', 'Counter', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit', 'RepeatedStratifiedKFold', 'metrics', 'classification_report', 'confusion_matrix', 'linear_model', 'BayesianOptimization', 'HTML', 'OrdinalEncoder', 'List', 'jit', 'partial', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'Any', 'product', 'tqdm', 'Parallel', 'delayed', 'BaseEstimator', 'TransformerMixin']Dict:{'numpy': ['mean', 'max', 'sum', 'where', 'unique', 'isin', 'copy'], 'pandas': ['read_csv', 'melt', 'cut', 'concat', 'value_counts', 'unique', 'to_datetime'], 'random': [], 'os': ['rename'], 'copy': ['copy'], 'matplotlib': ['hist'], 'tqdm': ['update'], 'sklearn': [], 'collections': ['items', 'keys', 'update', 'copy'], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'time': [], 'datetime': [], 'gc': [], 'seaborn': [], 'warnings': [], 'bayes_opt': [], 'eli5': [], 'shap': [], 'IPython': [], 'json': [], 'altair': [], 'category_encoders': [], 'networkx': [], 'typing': [], 'numba': [], 'functools': [], 'scipy': [], 'itertools': [], 're': [], 'joblib': []} axis_0: 4, axis_1: 6
lgb-fine-tuned-explained.py : ['read_csv', 'dropna', 'reset_index', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'info', 'sum', 'memory_usage', 'info', 'info', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'diff', 'groupby', 'diff', 'groupby', 'agg', 'agg', 'shift', 'groupby', 'pct_change', 'groupby', 'diff', 'groupby', 'replace', 'items', 'map', 'to_dict', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'join', 'mean', 'copy', 'join', 'mean', 'sum', 'sum', 'concat', 'reset_index', 'sort_values', 'tail', 'groupby', 'clip', 'mean', 'mean', 'round'] ['gc', 'os', 'time', 'warnings', 'joblib', 'lightgbm', 'numpy', 'pandas', 'numpy', 'lightgbm', 'gc', 'optiver2023'] ['combinations', 'simplefilter', 'mean_absolute_error', 'KFold', 'TimeSeriesSplit', 'njit', 'prange', 'mean_absolute_error']Dict:{'gc': [], '': [], '#': [], 'Garbage': [], 'collection': [], 'for': [], 'memory': [], 'management': [], 'os': ['replace'], 'Operating': [], 'system-related': [], 'functions': [], 'time': [], 'Time-related': [], 'warnings': [], 'Handling': [], 'itertools': [], 'joblib': [], 'For': [], 'saving': [], 'and': [], 'loading': [], 'models': [], 'lightgbm': [], 'numpy': ['mean', 'median', 'max', 'diff', 'sum', 'round', 'min', 'clip', 'info', 'std', 'copy'], 'pandas': ['concat', 'eval', 'read_csv'], 'sklearn': [], 'numba': []} axis_0: 1, axis_1: 2
kapturov-s-solution-of-ps-s3e25.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'reset_index', 'concat', 'drop', 'drop', 'replace', 'max', 'fillna', 'median', 'replace', 'max', 'fillna', 'median', 'replace', 'max', 'fillna', 'median', 'replace', 'max', 'fillna', 'median', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'round', 'describe', 'sum', 'isna', 'sum', 'isna', 'info', 'duplicated', 'drop_duplicates', 'duplicated', 'hist', 'value_counts', 'value_counts', 'drop', 'apply', 'min', 'max', 'min', 'apply', 'min', 'max', 'min', 'hist', 'value_counts', 'corr', 'drop', 'drop', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'torch'] ['OrderedDict', 'GridSearchCV', 'RandomizedSearchCV', 'train_test_split', 'cross_val_score', 'cross_val_predict', 'StandardScaler', 'RandomForestRegressor', 'ExtraTreesRegressor', 'AdaBoostRegressor', 'BaggingRegressor', 'HistGradientBoostingRegressor', 'GradientBoostingRegressor', 'StackingRegressor', 'XGBRegressor', 'CatBoostRegressor', 'LGBMRegressor', 'median_absolute_error']Dict:{'numpy': ['median', 'max', 'sum', 'round', 'min', 'info'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts'], 'os': ['replace'], 'matplotlib': ['hist'], 'seaborn': [], 'torch': ['median', 'max', 'sum', 'concat', 'round', 'min'], 'collections': [], 'sklearn': [], 'xgboost': ['apply'], 'catboost': [], 'lightgbm': []} axis_0: 0, axis_1: 5
s3e19-course-eda-fe-lightgbm.py : ['read_csv', 'describe', 'describe', 'to_datetime', 'sum', 'resample', 'sum', 'resample', 'mean', 'rolling', 'mean', 'rolling', 'reset_index', 'sum', 'resample', 'unique', 'reset_index', 'sum', 'groupby', 'to_period', 'to_timestamp', 'reset_index', 'sum', 'groupby', 'to_period', 'to_timestamp', 'reset_index', 'sum', 'groupby', 'to_period', 'to_timestamp', 'unique', 'map', 'min', 'unique', 'unique', 'keys', 'unique', 'map', 'reset_index', 'sum', 'groupby', 'to_period', 'to_timestamp', 'map', 'min', 'unique', 'keys', 'sum', 'resample', 'mean', 'rolling', 'mean', 'rolling', 'read_csv', 'read_csv', 'to_datetime', 'to_datetime', 'copy', 'reset_index', 'sum', 'groupby', 'drop', 'reset_index', 'first', 'groupby', 'copy', 'update', 'update', 'update', 'update', 'map', 'where', 'notnull', 'fillna', 'transform', 'transform', 'copy', 'apply', 'apply', 'apply', 'apply', 'eq', 'drop', 'get_dummies', 'get_dummies', 'drop', 'transform', 'transform', 'mean', 'mean', 'reset_index', 'sum', 'groupby', 'pivot', 'apply', 'sum', 'reset_index', 'rename', 'stack', 'reset_index', 'concat', 'unique', 'copy', 'drop', 'reset_index', 'copy', 'merge', 'merge', 'copy', 'sum', 'sum', 'groupby', 'unique', 'round', 'drop', 'sum', 'groupby', 'sum', 'sum', 'groupby', 'sum', 'read_csv', 'head'] ['warnings', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'matplotlib.dates', 'warnings', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'holidays', 'dateutil.easter'] ['Axes3D', 'StandardScaler', 'OrdinalEncoder', 'Lasso', 'GroupKFold', 'LGBMRegressor']Dict:{'warnings': [], 'pandas': ['to_datetime', 'read_csv', 'concat', 'get_dummies', 'unique', 'notnull', 'merge', 'pivot'], 'numpy': ['mean', 'stack', 'sum', 'where', 'round', 'min', 'unique', 'copy'], 'matplotlib': [], 'seaborn': [], 'mpl_toolkits': ['update'], 'sklearn': [], 'lightgbm': [], 'holidays': [], 'dateutil': []} axis_0: 0, axis_1: 3
my-2cents-to-2sigma.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'get', 'get', 'get', 'get', 'join', 'sort_values', 'sort_values', 'astype', 'map', 'apply', 'reset_index', 'groupby', 'merge', 'copy', 'select_dtypes', 'agg', 'groupby', 'join', 'reset_index', 'copy', 'tail', 'groupby', 'concat', 'merge', 'merge', 'factorize', 'copy', 'max', 'max', 'rolling', 'shift', 'rolling', 'shift', 'median', 'max', 'min', 'drop', 'shift', 'drop', 'drop', 'copy', 'set_index', 'groupby', 'merge', 'reset_index', 'concat', 'copy', 'set_index', 'groupby', 'merge', 'reset_index', 'concat', 'reset_index', 'mean', 'rolling', 'groupby', 'set_index', 'rename', 'merge', 'factorize', 'sum', 'groupby', 'mean', 'std', 'idxmax', 'max', 'concat', 'min', 'max', 'clip', 'rename', 'fillna', 'drop', 'merge', 'max', 'max'] ['pandas', 'numpy', 'lightgbm', 'numpy', 'matplotlib.pyplot', 'gc', 'sys', 'pytz', 'warnings', 'time', 'inspect', 'datetime'] ['parallel', 'delayed', 'chain', 'date', 'timedelta', 'twosigmanews']Dict:{'pandas': ['factorize', 'merge', 'concat'], 'numpy': ['mean', 'median', 'max', 'sum', 'min', 'clip', 'std', 'copy'], 'lightgbm': [], 'matplotlib': ['get'], 'joblib': [], 'gc': [], 'sys': [], 'pytz': [], 'warnings': [], 'time': [], 'inspect': [], 'datetime': ['min', 'max'], 'itertools': [], 'kaggle': []} axis_0: 0, axis_1: 4
covid-19-w3-lgb-mad.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'isin', 'unique', 'concat', 'astype', 'astype', 'isna', 'isna', 'cummax', 'groupby', 'cummax', 'groupby', 'merge', 'merge', 'to_datetime', 'sort_values', 'min', 'isna', 'max', 'isna', 'min', 'isna', 'max', 'isna', 'unique', 'isna', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'merge', 'rename', 'reset_index', 'min', 'groupby', 'astype', 'astype', 'isna', 'dropna', 'drop', 'drop', 'sum', 'sum', 'sum', 'sum', 'isna', 'isna', 'unique', 'rename', 'merge', 'concat', 'merge', 'concat', 'isna', 'isna', 'isna', 'isna', 'isna', 'isna', 'isna', 'isna', 'sort_values', 'sort_values', 'sort_values', 'unique', 'unique', 'reset_index', 'isna', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'astype', 'to_csv', 'to_csv'] ['lightgbm', 'numpy', 'pandas', 'warnings'] ['mean_squared_error', 'LabelEncoder', 'output_notebook', 'show', 'column', 'Spectral3', 'figure', 'Panel', 'Tabs', 'output_notebook', 'show', 'figure', 'Panel', 'Tabs', 'output_notebook', 'show', 'figure']Dict:{'lightgbm': [], 'numpy': ['max', 'sum', 'min', 'unique', 'isin'], 'pandas': ['isna', 'read_csv', 'concat', 'unique', 'merge', 'to_datetime'], 'sklearn': [], 'warnings': [], 'bokeh': []} axis_0: 0, axis_1: 0
icr-bestpublicscore-metriccorrected.py : [] [] []Dict:{} axis_0: 1, axis_1: 4
novo-esp-eli5-performant-approaches-lb-0-451.py : ['mode', 'isna', 'iterrows', 'isna', 'isna', 'isna', 'join', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'join', 'items', 'items', 'items', 'items', 'items', 'unique', 'items', 'items', 'apply', 'apply', 'apply', 'count', 'apply', 'count', 'map', 'map', 'max', 'drop', 'read_table', 'fillna', 'fillna', 'drop', 'drop', 'astype', 'describe', 'to_dict', 'first', 'groupby', 'map', 'fillna', 'astype', 'head', 'describe', 'merge', 'describe', 'update', 'items', 'keys', 'apply', 'get', 'astype', 'describe', 'apply', 'describe', 'describe', 'apply', 'prod', 'hist', 'hist', 'describe', 'any', 'isna', 'to_dict', 'first', 'groupby', 'apply', 'to_csv', 'describe', 'read_csv', 'iterrows', 'apply', 'get', 'astype', 'abs', 'apply', 'prod', 'hist', 'hist', 'abs', 'to_dict', 'first', 'groupby', 'apply', 'to_csv', 'describe', 'describe', 'abs', 'mean', 'to_csv', 'rename', 'update', 'items', 'keys', 'apply', 'get', 'astype', 'describe', 'mean', 'to_csv'] ['Bio', 'biopandas', 'tensorflow', 'pandas', 'numpy', 'sklearn', 'Levenshtein', 'warnings', 'requests', 'hashlib', 'imageio', 'IPython', 'sklearn', 'urllib', 'zipfile', 'pickle', 'random', 'shutil', 'string', 'json', 'math', 'time', 'gzip', 'ast', 'sys', 'io', 'os', 'gc', 're', 'matplotlib.patches', 'plotly.graph_objects', 'matplotlib.pyplot', 'plotly.express', 'tifffile', 'seaborn', 'matplotlib', 'plotly', 'PIL', 'cv2', 'plotly.io'] ['SeqIO', 'StringIO', 'PandasPdb', 'KaggleDatasets', 'Counter', 'datetime', 'ZipFile', 'glob', 'ListedColormap', 'Rectangle', 'tqdm', 'Image', 'ImageEnhance', 'animation', 'rc', 'MatrixInfo', 'stats', 'MatrixInfo']Dict:{'Bio;': [], 'print(f"\\t\\t–': [], 'BioPython': [], 'VERSION:': [], '{Bio': [], 'Bio': [], 'io': [], 'biopandas;': [], 'from': [], 'biopandas': [], 'import': [], 'PandasPdb;': [], 'BioPandas': [], '{biopandas': [], 'pdb': [], '=': [], 'PandasPdb();': [], 'tensorflow': ['abs', 'unique'], 'pandas': ['isna', 'read_table', 'read_csv', 'unique', 'merge'], 'numpy': ['mean', 'any', 'max', 'abs', 'unique', 'prod'], 'sklearn;': [], 'SKLEARN': [], '{sklearn': [], 'kaggle_datasets': [], 'collections': ['items', 'keys', 'update', 'get'], 'datetime': ['max'], 'zipfile': [], 'glob': [], 'Levenshtein': [], 'warnings': [], 'requests': ['head', 'get'], 'hashlib': [], 'imageio': [], 'IPython': [], 'sklearn': [], 'urllib': [], 'pickle': [], 'random': [], 'shutil': [], 'string': [], 'json': [], 'math': ['prod'], 'time': [], 'gzip': [], 'ast': [], 'sys': [], 'os': ['rename'], 'gc': [], 're': [], 'matplotlib': [], 'plotly': [], 'tqdm': [], 'tifffile': [], 'seaborn': [], 'PIL': [], 'matplotlib;': [], 'MATPLOTLIB': [], '{matplotlib': [], 'cv2': [], 'scipy': ['mode', 'describe']} axis_0: 0, axis_1: 10
house-price-regression.py : ['read_csv', 'head', 'info', 'describe', 'describe', 'drop', 'rename', 'drop_duplicates', 'head', 'sum', 'sum', 'isnull', 'transpose', 'isna', 'any', 'isnull', 'sum', 'isnull', 'mean', 'median', 'unique', 'mean', 'median', 'dropna', 'transform', 'groupby', 'fillna', 'median', 'items', 'fillna', 'fillna', 'sum', 'sum', 'isna', 'head', 'abs', 'where', 'value_counts', 'value_counts', 'value_counts', 'sum', 'groupby', 'sort_values', 'sum', 'value_counts', 'value_counts', 'apply', 'astype', 'cut', 'fillna', 'head', 'astype', 'head', 'head', 'corr', 'round', 'unstack', 'corr', 'filter', 'round', 'unstack', 'drop', 'mean', 'std', 'drop', 'read_csv', 'head', 'apply', 'fillna', 'astype', 'cut', 'head', 'head', 'head', 'drop', 'to_csv'] ['warnings', 'random', 'time', 're', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'category_encoders', 'sklearn.metrics'] ['sqrt', 'stats', 'Counter', 'SimpleImputer', 'ColumnTransformer', 'MinMaxScaler', 'train_test_split', 'cross_validate', 'PCA', 'TruncatedSVD', 'DecisionTreeRegressor', 'SGDRegressor', 'SVR', 'RandomForestRegressor', 'BaggingRegressor', 'GradientBoostingRegressor', 'XGBRegressor', 'GridSearchCV', 'RandomizedSearchCV']Dict:{'warnings': [], 'random': [], 'time': [], 're': [], 'math': [], 'scipy': ['describe'], 'pandas': ['isna', 'read_csv', 'isnull', 'cut', 'value_counts', 'unique'], 'numpy': ['transpose', 'mean', 'median', 'any', 'abs', 'sum', 'where', 'round', 'unique', 'info', 'std'], 'collections': ['items'], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'category_encoders': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 5
rnn-detailed-explanation-0-2246.py : ['mean', 'astype', 'fillna', 'fillna', 'fillna', 'fillna', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'fillna', 'astype', 'astype', 'astype', 'read_csv', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'astype', 'concat', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'astype', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'transform', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'read_csv', 'read_csv', 'merge', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'array', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'max', 'items', 'sum', 'array', 'any', 'isnull', 'any', 'isnull', 'read_csv', 'array', 'array', 'read_csv', 'merge', 'astype', 'fillna', 'astype', 'fillna', 'astype', 'fillna', 'clip', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'read_csv', 'to_csv', 'to_csv'] ['pandas', 'numpy', 'time', 'gc', 'warnings', 'os', 'threading', 'multiprocessing', 'time', 'time'] ['train_test_split', 'roc_auc_score', 'StratifiedKFold', 'Model', 'Input', 'Dropout', 'Dense', 'Embedding', 'SpatialDropout1D', 'concatenate', 'GRU', 'Bidirectional', 'GlobalAveragePooling1D', 'GlobalMaxPooling1D', 'BatchNormalization', 'Conv1D', 'MaxPooling1D', 'Flatten', 'pad_sequences', 'text', 'sequence', 'Callback', 'backend', 'Model', 'optimizers', 'LabelBinarizer', 'LabelEncoder', 'MinMaxScaler', 'StandardScaler', 'Pool', 'cpu_count', 'closing', 'backend', 'RMSprop', 'Adam', 'ModelCheckpoint', 'EarlyStopping', 'train_test_split', 'KFold']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'array', 'merge'], 'numpy': ['mean', 'any', 'max', 'sum', 'clip', 'array'], 'time': [], '': [], 'gc': [], 'sklearn': [], 'keras': [], 'warnings': [], 'os': [], 'threading': [], 'multiprocessing': [], 'contextlib': []} axis_0: 0, axis_1: 0
auto-feature-generation-featuretools-example.py : ['read_csv', 'read_csv', 'concat', 'sum', 'memory_usage', 'select_dtypes', 'select_dtypes', 'astype', 'astype', 'sum', 'memory_usage', 'value_counts', 'head', 'read_csv', 'sum', 'memory_usage', 'select_dtypes', 'select_dtypes', 'astype', 'astype', 'sum', 'memory_usage', 'value_counts', 'head', 'replace', 'drop', 'to_datetime', 'to_timedelta', 'drop_duplicates', 'value_counts', 'select_dtypes', 'factorize', 'value_counts', 'isnull', 'isnull', 'isin', 'isin', 'isin', 'to_csv', 'isin'] ['numpy', 'pandas', 'os', 'featuretools', 'gc', 'warnings', 'lightgbm'] ['join', 'cpu_count', 'StratifiedKFold', 'LGBMClassifier', 'roc_auc_score']Dict:{'numpy': ['isin', 'sum'], 'pandas': ['read_csv', 'isnull', 'to_timedelta', 'concat', 'value_counts', 'factorize', 'to_datetime'], 'os': [], 'featuretools': [], 'gc': [], 'warnings': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 1
feature-engineering-v-1-0.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'map', 'map', 'map', 'map', 'map', 'astype', 'to_datetime', 'to_datetime', 'groupby', 'query', 'sum', 'sum', 'copy', 'update', 'copy', 'mean', 'update', 'keys', 'groupby', 'groupby', 'value_counts', 'to_csv', 'value_counts', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'sum', 'transform', 'groupby', 'sum', 'sum'] ['numpy', 'pandas', 'os', 'lightgbm', 'gc', 'json'] ['time', 'tqdm_notebook', 'Counter', 'stats', 'cohen_kappa_score', 'KFold', 'StratifiedKFold']Dict:{'numpy': ['mean', 'sum', 'unique', 'copy'], 'pandas': ['to_datetime', 'unique', 'read_csv', 'value_counts'], 'os': [], 'time': [], 'tqdm': ['update'], 'collections': ['keys', 'update', 'copy'], 'scipy': [], 'lightgbm': [], 'sklearn': [], 'gc': [], 'json': []} axis_0: 1, axis_1: 0
session-start-time-eda.py : ['read_csv', 'drop', 'read_csv', 'unique', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'set_index', 'merge', 'head', 'isin', 'isin', 'value_counts', 'sum', 'drop', 'sum', 'drop', 'concat', 'reset_index', 'max', 'groupby', 'median', 'groupby', 'reindex', 'apply', 'to_datetime', 'astype', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'mean', 'rolling', 'mean', 'groupby'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'pandas', 'matplotlib.pyplot'] []Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'unique', 'isin'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'merge', 'to_datetime'], 'matplotlib': [], 'seaborn': []} axis_0: 0, axis_1: 3
playgrounds3e1-eda-model-pipeline.py : ['read_csv', 'apply', 'to_dict', 'set_index', 'isin', 'nunique', 'nunique', 'nunique', 'info', 'info', 'info', 'drop', 'transpose', 'describe', 'drop', 'insert', 'set_index', 'reset_index', 'drop', 'transpose', 'describe', 'drop', 'insert', 'set_index', 'reset_index', 'drop', 'transpose', 'describe', 'drop', 'insert', 'set_index', 'reset_index', 'sort_index', 'concat', 'where', 'applymap', 'hist', 'hist', 'describe', 'groupby', 'groupby', 'copy', 'apply', 'concat', 'add_prefix', 'keys', 'copy', 'apply', 'apply', 'keys', 'mean', 'concat', 'corr', 'keys', 'keys', 'keys', 'head', 'isin', 'isin', 'isin', 'isin', 'items', 'mean', 'concat', 'describe', 'describe', 'to_csv', 'head', 'to_csv', 'to_csv'] ['numpy', 'pandas', 're', 'matplotlib.pyplot', 'seaborn'] ['mode', 'iqr', 'anderson', 'shapiro', 'normaltest', 'geodesic', 'haversine', 'LinearSegmentedColormap', 'filterwarnings', 'tqdm', 'colored', 'collect', 'clear_output', 'datasets', 'mean_squared_error', 'mutual_info_regression', 'Pipeline', 'BaseEstimator', 'TransformerMixin', 'FunctionTransformer', 'DataFrameMapper', 'gen_features', 'KFold', 'LGBMRegressor', 'XGBRegressor', 'CatBoostRegressor']Dict:{'numpy': ['transpose', 'mean', 'where', 'isin', 'info', 'insert', 'copy'], 'pandas': ['concat', 'read_csv'], 're;': [], 'scipy': [], 'geopy': [], 'haversine': [], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'tqdm': [], 'termcolor': [], 'gc': [], 'IPython': [], 'sklearn': [], 'sklearn_pandas': [], 'lightgbm': [], 'xgboost': [], 'catboost': []} axis_0: 4, axis_1: 14
a-very-extensive-freesound-exploratory-analysis.py : ['read_csv', 'read_csv', 'max', 'head', 'head', 'apply', 'apply', 'head', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'value_counts', 'sum', 'boxplot', 'value_counts', 'unique', 'head', 'value_counts', 'sort_values', 'head', 'join', 'astype', 'min', 'max', 'min', 'max', 'mean', 'std'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'IPython.display', 'wave', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'plotly.offline', 'plotly.tools', 'numpy', 'librosa', 'os'] ['tqdm_notebook', 'wavfile', 'fft', 'signal', 'wavfile', 'WordCloud']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'std'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'IPython': [], 'tqdm': [], 'wave': [], 'scipy': [], 'plotly': [], 'librosa': [], 'os': [], 'wordcloud': []} axis_0: 2, axis_1: 1
covid-19-adv-eda-lstm.py : ['read_csv', 'read_csv', 'read_csv', 'tail', 'max', 'unique', 'sort_values', 'sum', 'groupby', 'unique', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'fillna', 'fillna', 'pop', 'pop', 'drop', 'drop', 'concat', 'concat', 'dropna', 'transform', 'drop', 'drop', 'drop_duplicates', 'drop_duplicates', 'mean', 'join', 'copy', 'max', 'min', 'date_range', 'max', 'max', 'drop_duplicates', 'to_numpy', 'to_numpy', 'to_csv'] ['plotly.graph_objects', 'numpy', 'pandas', 'matplotlib.pyplot', 'time', 'keras.backend'] ['tqdm', 'datetime', 'Path', 'preprocessing', 'Sequential', 'Dense', 'LSTM', 'RNN', 'Dropout', 'EarlyStopping', 'ModelCheckpoint', 'optimizers', 'StandardScaler', 'MinMaxScaler', 'LabelEncoder', 'train_test_split']Dict:{'plotly': [], 'numpy': ['mean', 'max', 'sum', 'min', 'unique', 'copy'], 'pandas': ['date_range', 'concat', 'unique', 'read_csv'], 'matplotlib': [], 'tqdm': [], 'time': [], 'datetime': ['min', 'max'], 'pathlib': [], 'sklearn': [], 'keras': []} axis_0: 0, axis_1: 4
widsdatathon2021-catboost-starter.py : ['read_csv', 'read_csv', 'nunique', 'fillna', 'fillna', 'sum', 'isna', 'drop', 'to_csv'] ['numpy', 'pandas', 'dabl', 'gc', 'matplotlib.pyplot', 'seaborn', 're'] ['ProfileReport', 'Pool', 'cv', 'CatBoostClassifier', 'CatBoostRegressor', 'mean_squared_error', 'classification_report', 'LabelEncoder', 'train_test_split', 'metrics']Dict:{'numpy': ['sum'], 'pandas': ['isna', 'read_csv'], 'dabl': [], 'pandas_profiling': [], 'catboost': [], 'sklearn': [], 'gc': [], 'matplotlib': [], 'seaborn': [], 're': []} axis_0: 0, axis_1: 1
ps-s3-e7-ensemble-model.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'info', 'any', 'isna', 'hist', 'concat', 'concat', 'drop', 'to_datetime', 'astype', 'astype', 'drop', 'astype', 'astype', 'astype', 'to_datetime', 'drop', 'drop', 'reset_index', 'drop', 'astype', 'array', 'unique', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'clip', 'array', 'clip', 'array', 'clip', 'array', 'clip', 'array', 'hist', 'read_csv', 'read_csv', 'drop', 'merge', 'drop', 'max', 'min', 'isin', 'map', 'isin', 'to_csv', 'head', 'isin', 'hist'] ['numpy', 'pandas', 'optuna', 'warnings', 'os', 'catboost', 'matplotlib.pyplot', 'lightgbm', 'lightgbm'] ['USFederalHolidayCalendar', 'StandardScaler', 'train_test_split', 'KFold', 'StratifiedKFold', 'RepeatedStratifiedKFold', 'compute_sample_weight', 'XGBClassifier', 'XGBRegressor', 'XGBClassifier', 'XGBRegressor', 'LassoCV', 'Lasso', 'roc_auc_score', 'precision_score', 'cohen_kappa_score']Dict:{'numpy': ['any', 'max', 'min', 'unique', 'clip', 'isin', 'info', 'array'], 'pandas': [], 'optuna': [], 'warnings': [], 'os': [], 'sklearn': [], 'catboost': [], 'matplotlib': ['hist'], 'xgboost': [], 'lightgbm': []} axis_0: 19, axis_1: 6
quality-of-writing-attempt-to-conformal-prediction.py : ['read_csv', 'read_csv', 'head', 'head', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'merge', 'describe', 'fillna', 'replace', 'drop', 'drop', 'median', 'abs', 'median', 'hist', 'quantile', 'mean', 'array', 'mean', 'apply', 'apply', 'drop', 'sample', 'read_csv', 'drop', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'lightgbm', 're'] ['Counter', 'skew', 'kurtosis', 'tqdm', 'LGBMRegressor', 'CatBoostRegressor', 'XGBRegressor', 'VotingRegressor', 'train_test_split', 'mean_squared_error', 'PredictionError']Dict:{'pandas': ['read_csv', 'concat', 'unique', 'array', 'merge'], 'numpy': ['mean', 'median', 'quantile', 'std', 'max', 'abs', 'unique', 'array'], 'matplotlib': ['hist'], 'seaborn': [], 'gc': [], 'lightgbm': [], 'collections': ['items'], 're': [], 'scipy': [], 'tqdm': [], 'catboost': [], 'xgboost': ['apply'], 'sklearn': [], 'yellowbrick': []} axis_0: 0, axis_1: 10
ensembling-and-stacking-with-heamy.py : ['map', 'map', 'read_csv', 'read_csv', 'unique', 'drop', 'drop', 'drop', 'drop', 'stack', 'astype', 'round', 'read_csv', 'to_csv', 'astype', 'round', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'math', 'xgboost', 'logging'] ['ExtraTreesClassifier', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'BaggingClassifier', 'KNeighborsClassifier', 'LogisticRegression', 'SVC', 'LinearSVC', 'KFold', 'GaussianNB', 'MultinomialNB', 'BernoulliNB', 'accuracy_score', 'log_loss', 'jaccard_similarity_score', 'normalize', 'XGBClassifier', 'LGBMClassifier', 'Dataset', 'Classifier', 'ModelsPipeline']Dict:{'numpy': ['round', 'stack', 'unique'], 'pandas': ['unique', 'read_csv'], 'sklearn': [], 'math': [], 'xgboost': [], 'lightgbm': [], 'logging': [], 'heamy': []} axis_0: 0, axis_1: 6
data-exploration-porto-seguro-s-safe-driver.py : ['read_csv', 'head', 'sum', 'isnull', 'sum', 'map', 'round', 'corr', 'boxplot'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] []Dict:{'pandas': ['read_csv', 'isnull'], 'numpy': ['round', 'sum'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot']} axis_0: 0, axis_1: 0
tps-sep-voting-classifier.py : ['read_csv', 'set_index', 'head', 'read_csv', 'set_index', 'head', 'sum', 'isna', 'astype', 'std', 'isna', 'median', 'std', 'min', 'abs', 'max', 'abs', 'sem', 'sum', 'isna', 'astype', 'std', 'isna', 'median', 'std', 'min', 'abs', 'max', 'abs', 'sem', 'head', 'mean', 'groupby', 'to_dict', 'map', 'map', 'fillna', 'skew', 'median', 'fillna', 'fillna', 'mean', 'fillna', 'fillna', 'transform', 'transform', 'copy', 'copy', 'concat', 'copy', 'copy', 'copy', 'read_csv', 'to_csv', 'head'] ['gc', 'numpy', 'pandas'] ['tqdm', 'skew', 'KMeans', 'roc_auc_score', 'QuantileTransformer', 'XGBClassifier', 'LGBMClassifier', 'VotingClassifier']Dict:{'gc': [], 'numpy': ['mean', 'median', 'max', 'abs', 'sum', 'min', 'std', 'copy'], 'pandas': ['concat', 'isna', 'read_csv'], 'tqdm': [], 'scipy': [], 'sklearn': ['transform'], 'xgboost': [], 'lightgbm': []} axis_0: 1, axis_1: 14
eachtype.py : ['to_json', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'groupby', 'abs', 'mean', 'map', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'head', 'head', 'head', 'concat', 'items', 'head', 'where', 'where', 'where', 'where', 'mean', 'std', 'join', 'head', 'merge', 'rename', 'apply', 'apply', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'merge', 'drop', 'copy', 'copy', 'rename', 'concat', 'transform', 'groupby', 'drop', 'rename', 'rename', 'drop', 'drop', 'describe', 'concat', 'describe', 'drop', 'copy', 'copy', 'copy', 'unique', 'copy', 'copy', 'unique', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'altair'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'metrics', 'linear_model', 'HTML', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'product', 'v3', 'HTML', 'tqdm_notebook']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'where', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'os': ['rename'], 'matplotlib': [], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'catboost': [], 'gc': [], 'seaborn': [], 'warnings': [], 'IPython': [], 'json': [], 'altair': [], 'networkx': [], 'numba': [], 'itertools': []} axis_0: 9, axis_1: 12
s3e18-eda-cluster-ensemble-ada-cat-gb.py : ['read_csv', 'head', 'drop', 'duplicated', 'unique', 'sum', 'isnull', 'transpose', 'describe', 'drop', 'copy', 'boxplot', 'drop', 'drop', 'mean', 'mean', 'corr', 'corr', 'drop', 'drop', 'sort_values', 'sort_values', 'drop', 'read_csv', 'drop', 'drop', 'drop', 'drop', 'mean', 'mean', 'mean', 'mean', 'min', 'max', 'min', 'max', 'min', 'max', 'min', 'max', 'min', 'max', 'min', 'max', 'min', 'max', 'min', 'max', 'read_csv', 'drop', 'transform', 'head'] ['warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'matplotlib.pyplot', 'seaborn', 'numpy', 'pandas', 'shap'] ['parallel_coordinates', 'PCA', 'KMeans', 'StandardScaler', 'train_test_split', 'cross_val_score', 'GridSearchCV', 'learning_curve', 'LabelEncoder', 'RFE', 'RandomForestClassifier', 'train_test_split', 'GridSearchCV', 'cross_val_score', 'learning_curve', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'VotingClassifier', 'QuadraticDiscriminantAnalysis', 'StandardScaler', 'accuracy_score', 'classification_report', 'confusion_matrix', 'roc_curve', 'precision_recall_curve', 'auc', 'PCA', 'resample', 'CatBoostClassifier', 'ListedColormap']Dict:{'warnings': [], 'numpy': ['transpose', 'mean', 'max', 'sum', 'min', 'unique', 'copy'], 'pandas': ['unique', 'read_csv', 'isnull'], 'matplotlib': ['copy'], 'seaborn': ['boxplot'], 'sklearn': [], 'catboost': [], 'shap': [], '=': [], 'ensemble_EC1': [], 'ensemble_EC2': []} axis_0: 0, axis_1: 11
feature-engineering-with-ensemble-learning.py : ['read_csv', 'read_csv', 'head', 'describe', 'head', 'describe', 'sum', 'isnull', 'drop', 'drop', 'head', 'get_dummies', 'get_dummies', 'drop', 'drop', 'head', 'astype', 'mean', 'fillna', 'astype', 'mean', 'fillna', 'sum', 'isnull', 'corr', 'fillna', 'fillna', 'sum', 'isnull', 'drop', 'drop', 'round', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'seaborn', 'matplotlib.pyplot'] ['KMeans', 'train_test_split', 'MLPRegressor', 'ExtraTreesRegressor', 'StackingCVRegressor', 'SVR', 'Lasso', 'RandomForestRegressor', 'GradientBoostingRegressor', 'XGBRegressor', 'LinearRegression', 'KNeighborsRegressor', 'mean_squared_error', 'ExtraTreesRegressor']Dict:{'numpy': ['mean', 'round', 'sum'], 'pandas': ['get_dummies', 'read_csv', 'isnull'], 'os': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'mlxtend': [], 'xgboost': []} axis_0: 0, axis_1: 0
how-to-use-pycaret-with-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'replace', 'replace', 'replace', 'map', 'map', 'map', 'map', 'map', 'map', 'apply', 'map', 'to_dict', 'median', 'groupby', 'dropna', 'isnull', 'map', 'isnull', 'fillna', 'drop', 'drop', 'transform', 'head', 'head', 'to_csv'] ['numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot'] ['*', 'CatBoostEncoder']Dict:{'numpy': ['median'], 'pandas': ['read_csv', 'isnull'], 'matplotlib': [], 'pycaret': [], 'category_encoders': []} axis_0: 0, axis_1: 2
quick-and-dirty-regression-other-pred-coeffs.py : ['sub', 'drop', 'unique', 'where', 'where', 'keys', 'keys', 'items', 'keys', 'items', 'items', 'items', 'items', 'transform', 'transform', 'transform', 'transform', 'copy', 'copy', 'copy', 'copy', 'concat', 'astype', 'hist', 'hist', 'items', 'transform', 'transform', 'transform', 'drop', 'drop', 'drop', 'items', 'items', 'items', 'mean', 'std', 'mean', 'transform', 'copy', 'items', 'transform', 'drop', 'rank', 'isin', 'astype', 'mean', 'groupby', 'sort_values', 'keys', 'rename', 'reset_index', 'rename', 'melt', 'array', 'transform', 'drop', 'transform', 'transform', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'value_counts', 'value_counts', 'map', 'map', 'map', 'map', 'map', 'astype', 'to_datetime', 'to_datetime', 'groupby', 'query', 'sum', 'sum', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'update', 'copy', 'mean', 'update', 'keys', 'groupby', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'sum', 'transform', 'groupby', 'sum', 'sum', 'cut', 'cut', 'where', 'where', 'astype', 'to_csv', 'value_counts'] ['numpy', 'pandas', 'os', 'copy', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'catboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'eli5', 'shap', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 're', 'scipy'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'defaultdict', 'Counter', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'GroupKFold', 'GridSearchCV', 'train_test_split', 'TimeSeriesSplit', 'RepeatedStratifiedKFold', 'metrics', 'classification_report', 'confusion_matrix', 'linear_model', 'BayesianOptimization', 'HTML', 'OrdinalEncoder', 'List', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'Any', 'product', 'tqdm', 'Parallel', 'delayed', 'BaseEstimator', 'TransformerMixin', 'partial']Dict:{'numpy': ['mean', 'sum', 'array', 'where', 'unique', 'isin', 'std', 'copy'], 'pandas': ['read_csv', 'melt', 'cut', 'concat', 'value_counts', 'unique', 'array', 'to_datetime'], 'os': ['rename'], 'copy': ['copy'], 'matplotlib': ['hist'], 'tqdm': ['update'], 'sklearn': [], 'collections': ['items', 'keys', 'update', 'copy'], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'time': [], 'datetime': [], 'gc': [], 'seaborn': [], 'warnings': [], 'bayes_opt': [], 'eli5': [], 'shap': [], 'IPython': [], 'json': [], 'altair': [], 'category_encoders': [], 'networkx': [], 'typing': [], 'numba': [], 'itertools': [], 're': ['sub'], 'joblib': [], 'functools': [], 'scipy': []} axis_0: 3, axis_1: 8
in-depth-eda-feature-engineering-and-selection.py : ['read_csv', 'read_csv', 'sum', 'isna', 'rename', 'reset_index', 'sort_values', 'drop', 'where', 'isna', 'transform', 'groupby', 'fillna', 'where', 'isna', 'where', 'isna', 'where', 'isna', 'transform', 'groupby', 'fillna', 'mean', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'copy', 'copy', 'round', 'corr', 'boxplot', 'nunique', 'boxplot', 'nunique', 'astype', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'copy', 'copy', 'boxplot', 'nunique', 'quantile', 'value_counts', 'value_counts', 'mean', 'groupby', 'copy', 'replace', 'boxplot', 'nunique', 'concat', 'corr', 'copy', 'sum', 'corr', 'copy', 'sum', 'corr', 'test', 'transform', 'test', 'concat', 'corr', 'sum', 'sum', 'drop', 'concat', 'corr', 'copy', 'copy', 'concat', 'corr', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'drop', 'copy', 'copy', 'test', 'drop', 'drop', 'get_dummies', 'drop', 'nunique', 'test', 'drop', 'nlargest'] ['pandas', 'matplotlib.pyplot', 'numpy', 'seaborn', 'warnings'] ['probplot', 'skew', 'boxcox1p', 'PolynomialFeatures', 'MinMaxScaler', 'StandardScaler', 'BaseEstimator', 'TransformerMixin', 'Pipeline', 'Ridge', 'GridSearchCV', 'train_test_split', 'mean_squared_error']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'test', 'get_dummies'], 'matplotlib': ['boxplot'], 'numpy': ['mean', 'quantile', 'sum', 'where', 'round', 'test', 'copy'], 'seaborn': ['boxplot'], 'scipy': [], 'sklearn': [], 'warnings': []} axis_0: 2, axis_1: 15
birdclef-2022-audio-feature-engineering-eda.py : ['read_csv', 'head', 'abs', 'abs', 'astype'] ['pandas', 'numpy', 'scipy.stats', 'json', 'glob', 'soundfile', 'librosa', 'librosa.display', 'matplotlib.pyplot', 'IPython.display'] ['Path', 'SoundFile', 'Parallel', 'delayed', 'tqdm']Dict:{'pandas': ['read_csv'], 'numpy': ['abs'], 'scipy': [], 'json': [], 'glob': [], 'soundfile': [], 'librosa': [], 'matplotlib': [], 'pathlib': [], 'IPython': [], 'joblib': [], 'tqdm': []} axis_0: 0, axis_1: 0
fork-of-no-leakage-dnn-prediction-feature-engin.py : ['read_csv', 'tail', 'fillna', 'map', 'to_datetime', 'info', 'read_csv', 'replace', 'where', 'drop_duplicates', 'std', 'skew', 'kurtosis', 'to_datetime', 'where', 'where', 'where', 'where', 'where', 'merge', 'mean', 'groupby', 'reset_index', 'std', 'groupby', 'reset_index', 'merge', 'merge', 'drop', 'fillna', 'fillna', 'head', 'head', 'unique', 'map', 'mean', 'map', 'fillna', 'map', 'merge', 'fillna', 'rank', 'apply', 'drop', 'merge', 'fillna', 'unique', 'copy', 'head'] ['numpy', 'pandas', 'tensorflow', 'jpx_tokyo_market_prediction'] ['layers', 'keras', 'BatchNormalization', 'Sequential', 'Model', 'Input', 'Embedding', 'Dense', 'Flatten', 'Concatenate', 'Reshape', 'backend', 'regularizers', 'Adam', 'EarlyStopping', 'ModelCheckpoint', 'l2', 'Loss', 'StandardScaler', 'GroupKFold']Dict:{'numpy': ['mean', 'where', 'unique', 'info', 'std', 'copy'], 'pandas': ['to_datetime', 'merge', 'unique', 'read_csv'], 'tensorflow': [], 'keras': [], 'sklearn': [], 'jpx_tokyo_market_prediction': []} axis_0: 1, axis_1: 6
feature-engineering-img-cropimgpca.py : ['read_csv', 'reset_index', 'drop', 'iterrows', 'sample', 'transform', 'transform', 'merge', 'merge', 'to_csv'] ['numpy', 'pandas', 'shutil', 'os', 'pickle', 'matplotlib.pyplot', 'seaborn', 'torch', 'cv2'] ['glob', 'GroupKFold', 'IncrementalPCA', 'tqdm', 'Dataset', 'DataLoader']Dict:{'numpy': [], 'glob': [], 'shutil,': [], 'os': [], 'pickle': [], 'matplotlib': [], 'sklearn': ['transform'], 'tqdm': [], 'seaborn': [], 'torch': [], 'cv2': []} axis_0: 2, axis_1: 1
volatility-matters-buckets-bid-prices.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'tail', 'head', 'head', 'unique', 'unique', 'isin', 'isin', 'reset_index', 'agg', 'groupby', 'hist', 'describe', 'sort_values', 'reset_index', 'groupby', 'iterrows', 'copy', 'diff', 'concat', 'read_csv', 'mean', 'median', 'std', 'min', 'quantile', 'quantile', 'quantile', 'max', 'skew', 'kurtosis', 'isnull', 'mean', 'median', 'mean', 'groupby', 'std', 'groupby', 'concat', 'sort_values'] ['numpy', 'pandas', 'seaborn', 'warnings', 'os'] ['pyplot', 'tqdm', 'sample', 'probplot']Dict:{'numpy': ['mean', 'median', 'quantile', 'max', 'min', 'unique', 'isin', 'diff', 'std', 'copy'], 'pandas': ['concat', 'unique', 'read_csv', 'isnull'], 'matplotlib': [], 'tqdm': [], 'seaborn': [], 'warnings': [], 'os': [], 'random': [], 'scipy': []} axis_0: 0, axis_1: 1
simple-lgbm-baseline-optuna.py : ['read_csv', 'read_csv', 'reset_index', 'concat', 'read_csv', 'read_csv', 'head', 'info', 'value_counts', 'mean', 'reset_index', 'concat', 'nunique', 'nunique', 'mean', 'mean', 'array', 'to_csv', 'head'] ['numpy', 'pandas', 'lightgbm', 'optuna', 'seaborn'] ['StratifiedKFold', 'roc_auc_score', 'TPESampler', 'pyplot']Dict:{'numpy': ['mean', 'info', 'array'], 'pandas': ['concat', 'array', 'read_csv', 'value_counts'], 'sklearn': [], 'lightgbm': [], 'optuna': [], 'seaborn': [], 'matplotlib': []} axis_0: 1, axis_1: 0
aggregated-features-lightgbm.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'reset_index', 'concat', 'drop_duplicates', 'concat', 'head', 'groupby', 'sum', 'count', 'reset_index', 'rename', 'head', 'drop_duplicates', 'merge', 'head', 'merge', 'head', 'rename', 'reset_index', 'mean', 'groupby', 'head', 'rename', 'reset_index', 'count', 'groupby', 'merge', 'head', 'to_csv', 'read_csv', 'read_csv', 'merge', 'merge', 'head', 'sum', 'any', 'isna', 'sum', 'any', 'isna', 'fillna', 'fillna', 'to_datetime', 'apply', 'apply', 'apply', 'fillna', 'astype', 'transform', 'astype', 'transform', 'astype', 'read_csv', 'clip', 'to_csv'] ['pandas', 'numpy', 'gc', 'matplotlib.pyplot', 'seaborn', 'string', 'nltk', 'scipy', 'lightgbm'] ['tqdm', 'venn2', 'venn2_circles', 'train_test_split', 'mean_squared_error', 'LabelEncoder', 'CountVectorizer', 'TfidfVectorizer', 'stopwords']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'merge', 'to_datetime'], 'numpy': ['mean', 'sum', 'any', 'clip'], 'gc': [], 'tqdm': [], 'matplotlib': [], 'seaborn': [], 'matplotlib_venn': [], 'string': [], 'sklearn': [], 'nltk': [], 'scipy': [], 'lightgbm': []} axis_0: 0, axis_1: 2
titanic-advanced-feature-engineering-eda.py : ['join', 'read_csv', 'read_csv', 'info', 'value_counts', 'value_counts', 'hist', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'sort_values', 'mean', 'groupby', 'items', 'reset_index', 'drop', 'reset_index', 'concat', 'any', 'isnull', 'isnull', 'boxplot', 'fillna', 'isnull', 'fillna', 'mean', 'corr', 'map', 'map', 'map', 'map', 'isnull', 'corr', 'isnull', 'median', 'median', 'isnull', 'head', 'head', 'replace', 'drop', 'get_dummies', 'head', 'head', 'get_dummies', 'head', 'head', 'get_dummies', 'head', 'head', 'replace', 'replace', 'get_dummies', 'head', 'get_dummies', 'head', 'astype', 'get_dummies', 'head', 'drop', 'head', 'drop', 'head', 'drop', 'astype', 'concat', 'to_csv'] ['numpy', 'pandas', 'pandas_profiling', 'matplotlib.pyplot', 'seaborn', 'warnings', 'os'] ['Counter', 'train_test_split', 'StratifiedKFold', 'GridSearchCV', 'LogisticRegression', 'SVC', 'RandomForestClassifier', 'VotingClassifier', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'accuracy_score']Dict:{'numpy': ['mean', 'median', 'info', 'any'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'pandas_profiling': [], '': [], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'collections': ['items'], 'warnings': [], 'os': ['replace'], 'sklearn': []} axis_0: 0, axis_1: 0
bond-calculaltion-lb-0-82.py : ['to_json', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'groupby', 'abs', 'mean', 'map', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'head', 'head', 'head', 'concat', 'items', 'head', 'where', 'where', 'where', 'where', 'mean', 'join', 'head', 'merge', 'rename', 'apply', 'apply', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'merge', 'drop', 'copy', 'copy', 'rename', 'concat', 'transform', 'groupby', 'drop', 'rename', 'rename', 'drop', 'drop', 'describe', 'concat', 'describe', 'drop', 'copy', 'copy', 'copy', 'copy', 'copy', 'concat', 'unique', 'to_csv', 'head'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'altair'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'metrics', 'linear_model', 'HTML', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'product', 'v3', 'HTML', 'tqdm_notebook']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'where', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'os': ['rename'], 'matplotlib': [], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'catboost': [], 'gc': [], 'seaborn': [], 'warnings': [], 'IPython': [], 'json': [], 'altair': [], 'networkx': [], 'numba': [], 'itertools': []} axis_0: 10, axis_1: 12
extensive-exploratory-data-analysis.py : ['read_csv', 'read_csv', 'read_csv', 'boxplot', 'skew', 'kurt', 'describe', 'boxplot', 'drop', 'boxplot', 'boxplot', 'select_dtypes', 'corr', 'select_dtypes', 'sort_values', 'nlargest', 'corr', 'corr', 'skew', 'kurt', 'skew', 'kurt', 'value_counts', 'drop', 'drop', 'drop', 'reset_index', 'concat', 'drop', 'sort_values', 'sum', 'isnull', 'map', 'sum', 'isnull', 'mode', 'fillna', 'mode', 'fillna', 'isnull', 'mode', 'fillna', 'isnull', 'mode', 'fillna', 'isnull', 'mode', 'fillna', 'isnull', 'mode', 'fillna', 'transform', 'groupby', 'fillna', 'mode', 'transform', 'groupby', 'fillna', 'median', 'fillna', 'select_dtypes', 'fillna', 'select_dtypes', 'fillna', 'where', 'drop', 'sum', 'isnull', 'drop', 'apply', 'astype', 'astype', 'select_dtypes', 'sort_values', 'apply', 'head', 'astype', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'replace', 'replace', 'replace', 'replace', 'reset_index', 'get_dummies', 'drop', 'drop', 'drop', 'drop', 'mean', 'mean', 'mean', 'mean', 'mean', 'std', 'mean', 'mean', 'mean', 'mean', 'mean', 'array', 'array', 'array', 'sort_values', 'read_csv', 'to_csv'] ['scipy.stats', 'seaborn', 'matplotlib.pyplot', 'pandas', 'numpy', 'sklearn.linear_model', 'warnings'] ['stats', 'skew', 'norm', 'boxcox1p', 'boxcox_normmax', 'make_pipeline', 'RobustScaler', 'KFold', 'cross_val_score', 'mean_squared_error', 'LabelEncoder', 'ElasticNetCV', 'LassoCV', 'RidgeCV', 'SVR', 'LGBMRegressor', 'GradientBoostingRegressor', 'XGBRegressor', 'StackingCVRegressor']Dict:{'scipy': ['mode', 'describe', 'skew'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'array'], 'numpy': ['mean', 'median', 'sum', 'array', 'where', 'std'], 'sklearn': ['apply'], 'lightgbm': [], 'xgboost': ['apply'], 'mlxtend': [], 'warnings': []} axis_0: 1, axis_1: 8
neural-network-with-mae-objective-0-01381.py : ['read_csv', 'head', 'isna', 'clip', 'apply', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'astype', 'apply', 'isna', 'replace', 'apply', 'isna', 'apply', 'isna', 'apply', 'apply', 'isna', 'apply', 'isna', 'replace', 'replace', 'replace', 'apply', 'isna', 'replace', 'apply', 'isna', 'replace', 'replace', 'apply', 'astype', 'rename', 'merge', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'astype', 'apply', 'apply', 'apply', 'apply', 'apply', 'astype', 'map', 'apply', 'merge', 'apply', 'merge', 'reset_index', 'sort_values', 'sort_values', 'sort_values', 'value_counts', 'where', 'isin', 'value_counts', 'where', 'isin', 'to_pickle', 'drop', 'unique', 'unique', 'fillna', 'astype', 'value_counts', 'unique', 'transform', 'fillna', 'std', 'std', 'std', 'std', 'reset_index', 'reset_index', 'transpose', 'stack', 'reset_index', 'reset_index', 'transpose', 'stack', 'reset_index', 'apply', 'mean', 'cumsum', 'mean', 'mean', 'fillna', 'astype', 'isin', 'sum', 'transform', 'fillna', 'transform', 'reset_index', 'transpose', 'stack', 'reset_index', 'reset_index', 'transpose', 'stack', 'reset_index', 'cumsum', 'clip', 'mean', 'diff', 'mean', 'mean'] ['numpy', 'pandas', 'matplotlib.pyplot', 'matplotlib', 'seaborn', 'datetime', 'tqdm', 'keras', 'warnings', 'keras', 'tensorflow'] ['nflrush', 'RandomForestRegressor', 'StandardScaler', 'LabelEncoder', 'tqdm_notebook', 'mnist', 'Sequential', 'Dense', 'Dropout', 'Flatten', 'Conv2D', 'MaxPooling2D', 'backend', 'regularizers', 'train_test_split', 'KFold', 'plot_model']Dict:{'numpy': ['transpose', 'mean', 'stack', 'sum', 'where', 'unique', 'clip', 'isin', 'diff', 'std', 'cumsum'], 'pandas': ['to_pickle', 'isna', 'read_csv', 'value_counts', 'unique', 'merge'], 'matplotlib': [], 'seaborn': [], 'datetime': [], 'kaggle': [], 'tqdm': [], 'sklearn': [], 'keras': [], 'warnings': [], 'tensorflow': ['transpose', 'stack', 'where', 'unique', 'cumsum']} axis_0: 0, axis_1: 2
ubiquant-tf-training-baseline-with-tpu.py : ['mean', '__init__', 'astype', 'array', 'corr', 'mean', 'apply', 'groupby', 'read_pickle', 'reset_index', 'corr', 'reset_index', 'corr', 'reset_index', 'corr', 'concat', 'sort_values', 'to_dict', 'mean', 'groupby', 'map', 'astype', 'array', 'array', 'astype', 'astype', 'to_csv'] ['pandas', 'numpy', 'os', 'tensorflow', 'tensorflow_addons', 'random', 'warnings', 'gc'] ['pearsonr', 'GroupKFold', 'mixed_precision', 'backend', 'tqdm']Dict:{'pandas': ['array', 'read_pickle', 'concat'], 'numpy': ['mean', 'array'], 'os': [], 'scipy': ['__init__'], 'sklearn': ['__init__'], 'tensorflow': [], 'tensorflow_addons': [], 'tqdm': ['__init__'], 'random': [], 'warnings': [], 'gc': []} axis_0: 0, axis_1: 0
titanic-passenger-survival.py : ['read_csv', 'read_csv', 'concat', 'info', 'info', 'value_counts', 'value_counts', 'fillna', 'fillna', 'median', 'replace', 'head', 'value_counts', 'unique', 'unique', 'median', 'notnull', 'isin', 'notnull', 'isin', 'value_counts', 'notnull', 'notnull', 'value_counts', 'unique', 'apply', 'unique', 'iterrows', 'apply', 'mean', 'std', 'head', 'value_counts', 'items', 'value_counts', 'get_dummies', 'get_dummies', 'mean', 'to_csv', 'sum', 'to_csv', 'sum', 'to_csv', 'astype', 'to_csv', 'drop', 'to_csv', 'to_csv'] ['numpy', 'pandas'] ['KNeighborsClassifier', 'cross_val_score', 'GridSearchCV', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'unique', 'isin', 'info', 'std'], 'pandas': ['read_csv', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull'], 'sklearn': ['apply']} axis_0: 0, axis_1: 1
drugs-moa-classification-eda.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'concat', 'merge', 'isin', 'isin', 'isin', 'isin', 'hist', 'hist', 'hist', 'hist', 'hist', 'corr', 'corr', 'unstack', 'sort_values', 'reset_index', 'rename', 'reset_index', 'drop', 'drop', 'head', 'mean', 'isin', 'nunique', 'rename', 'drop', 'isin', 'mean', 'rename', 'reset_index', 'rename', 'reset_index', 'sort_values', 'value_counts', 'unique', 'sort_values', 'head', 'corr', 'corr', 'corr', 'unstack', 'sort_values', 'reset_index', 'rename', 'reset_index', 'sort_values', 'drop', 'round', 'drop', 'head', 'head', 'apply', 'reset_index', 'sort_values', 'sort_values', 'corr', 'unstack', 'sort_values', 'reset_index', 'rename', 'reset_index', 'drop', 'round', 'drop', 'head', 'head', 'sort_values', 'nunique', 'rename', 'drop', 'mean', 'rename', 'reset_index', 'rename', 'corr', 'unstack', 'sort_values', 'reset_index', 'rename', 'reset_index', 'drop', 'head', 'head', 'head', 'value_counts', 'sort_values', 'value_counts', 'rename', 'reset_index', 'value_counts', 'rename', 'isin', 'corr', 'corr', 'corr', 'unstack', 'sort_values', 'reset_index', 'rename', 'reset_index', 'drop', 'round', 'drop', 'head', 'head', 'corr', 'corr'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] []Dict:{'numpy': ['mean', 'round', 'unique', 'isin'], 'pandas': ['read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'matplotlib': ['hist'], 'seaborn': []} axis_0: 2, axis_1: 5
feature-engineering-and-average-word2vec.py : ['join', 'read_csv', 'head', 'sample', 'sample', 'sum', 'isnull', 'reset_index', 'dropna', 'sum', 'isnull', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'sub', 'sub', 'sub', 'join', 'replace', 'replace', 'replace', 'replace', 'sub', 'apply', 'apply', 'join', 'apply', 'apply', 'drop', 'concat', 'sample', 'apply', 'apply', 'sample', 'apply', 'head', 'apply', 'head', 'head', 'min', 'max', 'mean', 'copy', 'drop', 'head', 'concat', 'head', 'iterrows', 'array', 'array', 'concat', 'concat', 'head'] ['numpy', 'pandas', 'os', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'shutil', 'gensim', 're', 'spacy', 'nltk'] ['time', 'CountVectorizer', 'TfidfVectorizer', 'BeautifulSoup', 'Word2Vec', 'WordNetLemmatizer', 'CountVectorizer', 'train_test_split', 'train_test_split', 'RandomForestClassifier', 'accuracy_score', 'train_test_split', 'XGBClassifier']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'array', 'copy'], 'pandas': ['concat', 'array', 'read_csv', 'isnull'], 'os': ['replace'], 'time': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'bs4': [], 'shutil': ['copy'], 'gensim': [], 're': ['sub'], 'spacy': [], 'nltk': [], 'xgboost': ['apply']} axis_0: 0, axis_1: 8
end-to-end-project-with-python.py : ['read_csv', 'read_csv', 'info', 'describe', 'head', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'count', 'isnull', 'sort_values', 'concat', 'head', 'dropna', 'dropna', 'dropna', 'dropna', 'map', 'map', 'hist', 'astype', 'value_counts', 'drop', 'fillna', 'map', 'map', 'fillna', 'astype', 'drop', 'drop', 'mean', 'std', 'sum', 'isnull', 'copy', 'astype', 'sum', 'isnull', 'describe', 'fillna', 'info', 'fillna', 'astype', 'replace', 'replace', 'replace', 'replace', 'map', 'fillna', 'drop', 'drop', 'map', 'describe', 'drop', 'drop', 'map', 'astype', 'value_counts', 'head', 'astype', 'astype', 'head', 'drop', 'copy', 'drop', 'sort_values', 'set_index', 'head', 'mean', 'std', 'round', 'set_index', 'sort_values', 'head', 'drop', 'drop', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'seaborn', 're'] ['pyplot', 'style', 'linear_model', 'LogisticRegression', 'RandomForestClassifier', 'Perceptron', 'SGDClassifier', 'DecisionTreeClassifier', 'KNeighborsClassifier', 'SVC', 'LinearSVC', 'GaussianNB', 'cross_val_score', 'cross_val_predict', 'confusion_matrix', 'precision_score', 'recall_score', 'f1_score', 'precision_recall_curve', 'roc_curve', 'roc_auc_score']Dict:{'numpy': ['mean', 'sum', 'round', 'info', 'std', 'copy'], 'pandas': ['concat', 'isnull', 'read_csv', 'value_counts'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 're': [], '=': [], 'pd': [], 'importances': []} axis_0: 0, axis_1: 14
explained-hoarders-ensemble.py : ['read_csv', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'dropna', 'map', 'to_dict', 'map', 'to_dict', 'where', 'astype', 'eval', 'max', 'min', 'sum', 'drop', 'drop', 'min', 'max', 'sum', 'sum', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'max', 'groupby', 'min', 'groupby', 'min', 'groupby', 'mean', 'groupby', 'mean', 'groupby', 'first', 'groupby', 'first', 'groupby', 'last', 'groupby', 'last', 'groupby', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'map', 'to_dict', 'where', 'astype', 'eval', 'max', 'min', 'sum', 'get_dummies', 'rename', 'concat', 'mean', 'min', 'max'] [] []Dict:{} axis_0: 0, axis_1: 9
no-memory-reduction-workflow-for-each-type-lb-1-28.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'groupby', 'abs', 'mean', 'map', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'concat', 'drop', 'merge', 'drop', 'copy', 'copy', 'rename', 'concat', 'transform', 'groupby', 'transform', 'groupby', 'copy', 'drop', 'rename', 'drop_duplicates', 'rename', 'copy', 'drop', 'rename', 'drop_duplicates', 'rename', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'get_dummies', 'concat', 'read_pickle', 'drop', 'merge', 'rename', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'transform', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'time', 'datetime', 'gc', 'warnings'] ['tqdm_notebook', 'StandardScaler', 'mean_absolute_error', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'metrics', 'linear_model']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'min', 'isin', 'std', 'copy'], 'pandas': ['read_csv', 'concat', 'get_dummies', 'read_pickle', 'merge'], 'os': ['rename'], 'matplotlib': [], 'seaborn': [], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'time': [], 'datetime': [], 'gc': [], 'warnings': []} axis_0: 2, axis_1: 8
my-homework-at-ambrosm-school-cat-lgb-xgb.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'abs', 'abs', 'apply', 'transform', 'apply', 'clip', 'map', 'map', 'clip', 'map', 'clip', 'astype', 'round', 'mean', 'round', 'mean', 'round', 'mean', 'round', 'round', 'round', 'round', 'round', 'read_csv', 'copy', 'astype', 'concat', 'reset_index', 'read_csv', 'to_csv', 'head', 'read_csv', 'to_csv', 'head', 'read_csv'] ['numpy', 'pandas', 'lightgbm', 'xgboost', 'pickle', 'dateutil.easter', 'warnings'] ['CatBoostRegressor', 'datetime', 'pyplot', 'LabelEncoder', 'GroupKFold', 'KFold']Dict:{'numpy': ['mean', 'abs', 'round', 'clip', 'copy'], 'pandas': ['concat', 'read_csv'], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'pickle': [], 'datetime': [], 'matplotlib': [], 'sklearn': [], 'dateutil': [], 'warnings': []} axis_0: 1, axis_1: 2
xgb-using-mfcc-opanichev-s-features-lb-0-811.py : ['read_csv', 'join', 'read_csv', 'read_csv', 'mean', 'std', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'std', 'max', 'min', 'mean', 'std', 'max', 'head', 'mean', 'join', 'abs', 'diff', 'mean', 'std', 'min', 'max', 'reset_index', 'rename', 'join', 'join', 'merge', 'merge', 'head', 'drop', 'unique', 'array', 'join', 'drop', 'to_csv'] ['numpy', 'pandas', 'os', 'librosa', 'scipy'] ['train_test_split', 'XGBClassifier', 'accuracy_score', 'skew', 'tqdm', 'tqdm_pandas']Dict:{'numpy': ['mean', 'max', 'std', 'abs', 'min', 'unique', 'diff', 'array'], 'pandas': ['array', 'merge', 'unique', 'read_csv'], 'os': ['rename'], 'librosa': [], 'sklearn': [], 'xgboost': [], 'scipy': [], 'tqdm': []} axis_0: 0, axis_1: 2
dynamic-time-warping-performance-applications.py : ['read_csv', 'read_csv', 'read_csv', 'unique', 'pivot', 'pivot', 'fillna', 'shift', 'fillna', 'shift', 'shift', 'fillna', 'shift', 'fillna', 'shift', 'shift', 'sample', 'array', 'transpose', 'array', 'copy', 'transform', 'transpose'] ['optuna', 'tensorflow', 'pickle', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'warnings', 'random'] ['keras', 'EarlyStopping', 'ModelCheckpoint', 'LearningRateScheduler', 'ReduceLROnPlateau', 'ExponentialDecay', 'mean_absolute_error', 'RobustScaler', 'normalize', 'train_test_split', 'GroupKFold', 'KFold', 'display', 'Parallel', 'delayed', 'classification_report', 'KMeans']Dict:{'optuna': [], 'tensorflow': [], 'sklearn': [], 'IPython': [], 'pickle': [], 'numpy': ['transpose', 'array', 'unique', 'copy'], 'pandas': ['pivot', 'array', 'unique', 'read_csv'], 'joblib': [], 'matplotlib': [], 'seaborn': [], 'warnings': [], 'random': ['sample']} axis_0: 0, axis_1: 0
leak-fe-ml-from-scratch-baseline.py : ['read_csv', 'read_csv', 'apply', 'copy', 'apply', 'mean', 'drop', 'set_index', 'set_index', 'copy', 'copy', 'copy', 'rename', 'apply', 'apply', 'rename', 'apply', 'apply', 'duplicated', 'duplicated', 'merge', 'merge', 'fillna', 'apply', 'rename', 'apply', 'apply', 'rename', 'apply', 'apply', 'duplicated', 'duplicated', 'merge', 'merge', 'fillna', 'apply', 'join', 'read_csv', 'apply', 'rename', 'apply', 'apply', 'rename', 'apply', 'apply', 'duplicated', 'duplicated', 'merge', 'merge', 'fillna', 'sum', 'sum', 'sum', 'sum', 'copy', 'sum', 'sum', 'copy', 'apply', 'mean', 'copy', 'sum', 'sum', 'copy', 'apply', 'mean', 'to_csv', 'read_csv', 'to_csv', 'drop', 'mean', 'replace', 'bfill', 'replace', 'bfill', 'replace', 'read_csv', 'concat', 'concat', 'array', 'read_csv', 'copy', 'to_csv', 'to_csv', 'to_csv', 'sum'] ['numpy', 'pandas', 'os', 'datetime', 'gc', 'math', 'lightgbm'] ['mean_squared_error', 'KFold', 'sqrt', 'tqdm_notebook']Dict:{'numpy': ['mean', 'array', 'sum', 'copy'], 'pandas': ['concat', 'array', 'merge', 'read_csv'], 'os': ['rename', 'replace'], 'datetime': [], 'gc': [], 'sklearn': [], 'math': [], 'lightgbm': [], 'tqdm': []} axis_0: 0, axis_1: 22
2020-kaggle-data-science-machine-learning-survey.py : ['join', 'read_csv', 'head', 'value_counts', 'count', 'dropna', 'reset_index', 'value_counts', 'sum', 'rename', 'items', 'items', 'update', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'sort_index', 'to_numeric', 'median', 'to_numeric', 'to_csv'] ['os', 'numpy', 'pandas', 'seaborn', 'plotly.express', 'plotly_express'] ['init_notebook_mode']Dict:{'os': ['rename'], 'numpy': ['median', 'sum'], 'pandas': ['to_numeric', 'read_csv', 'value_counts'], 'seaborn': [], 'plotly': [], 'plotly_express': []} axis_0: 0, axis_1: 0
steganalysis-complete-understanding-and-model.py : ['reset_index', 'sort_values', 'reset_index', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'read_csv', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'where', 'unique', 'astype', 'array', 'astype', 'array', 'where', 'unique'] ['os', 'skimage.io', 'matplotlib.pyplot', 'numpy', 'pandas', 'jpegio'] ['lsb', 'spatial', 'tqdm', 'Image', 'shuffle']Dict:{'os': [], 'stegano': [], 'skimage': [], 'matplotlib': [], 'scipy': [], 'tqdm': [], 'PIL': [], 'random': [], 'numpy': ['where', 'array', 'unique'], 'pandas': ['array', 'unique', 'read_csv'], 'jpegio': []} axis_0: 0, axis_1: 0
lgbm-x2-nn.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'drop', 'head', 'value_counts', 'unique', 'quantile', 'quantile', 'kurt', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'any', 'isna', 'drop', 'drop', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'merge', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'read_csv', 'read_csv', 'read_csv', 'copy', 'value_counts', 'unique', 'merge', 'transform', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'kurt', 'kurt', 'kurt', 'kurt', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'merge', 'merge', 'quantile', 'quantile', 'kurt', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', '__len__', '__len__', 'any', 'isna', 'mode', 'fillna', 'any', 'isna', 'mode', 'fillna', 'any', 'isna', 'any', 'isna', 'mean', 'sort_values', 'mean', 'head', 'mean', 'rename', 'rename', 'merge', 'to_csv'] ['gc', 'os', 'itertools', 'pickle', 're', 'time', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'torch', 'joblib', 'warnings', 'gc', 'ctypes', 'numpy', 'pandas', 'gc', 'os', 'itertools', 'pickle', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'warnings', 'os', 'gc', 're', 'random', 'pprint', 'time', 'copy', 'seaborn', 'lightgbm', 'xgboost', 'catboost', 'optuna'] ['choice', 'choices', 'reduce', 'tqdm', 'cycle', 'Counter', 'reduce', 'cycle', 'stats', 'skew', 'kurtosis', 'metrics', 'model_selection', 'preprocessing', 'linear_model', 'ensemble', 'decomposition', 'tree', 'defaultdict', 'TabularAutoML', 'Task', 'train_test_split', 'TfidfVectorizer', 'LinearRegression', 'mean_absolute_error', 'mean_squared_error', 'CountVectorizer', 'MultinomialNB', 'accuracy_score', 'choice', 'choices', 'reduce', 'tqdm', 'cycle', 'Counter', 'reduce', 'cycle', 'stats', 'skew', 'kurtosis', 'metrics', 'model_selection', 'preprocessing', 'linear_model', 'ensemble', 'decomposition', 'tree', 'BertTokenizer', 'Counter', 'defaultdict', 'tqdm', 'LabelEncoder', 'PowerTransformer', 'RobustScaler', 'FunctionTransformer', 'KFold', 'StratifiedKFold', 'GroupKFold', 'train_test_split', 'TfidfVectorizer', 'TruncatedSVD', 'PCA', 'GradientBoostingRegressor', 'HistGradientBoostingRegressor', 'RandomForestRegressor', 'ExtraTreesRegressor', 'AdaBoostRegressor', 'SVR', 'Pipeline', 'KMeans', 'Lasso', 'Ridge', 'ElasticNet', 'KNeighborsRegressor', 'mean_squared_error', 'SimpleImputer', 'defaultdict', 'LabelEncoder']Dict:{'gc': [], 'os': ['rename', 'replace'], 'itertools': [], 'pickle': [], 're': [], 'time': [], 'random': [], 'functools': [], 'tqdm': ['__len__'], 'numpy': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'min', 'unique', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique', 'merge'], 'seaborn': [], 'matplotlib': [], 'collections': ['items', 'keys', '__len__', 'copy'], 'scipy': [], 'sklearn': ['transform'], 'lightgbm': [], 'torch': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'concat', 'mode', 'min', 'unique', 'std'], 'lightautoml': [], 'joblib': [], 'warnings': [], 'ctypes': [], 'transformers': [], 'pprint': [], 'copy': ['copy'], 'xgboost': [], 'catboost': [], 'optuna': []} axis_0: 2, axis_1: 16
tpsapr22-eda-which-makes-sense.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'min', 'max', 'min', 'max', 'min', 'max', 'min', 'max', 'min', 'max', 'min', 'max', 'unique', 'sort_values', 'value_counts', 'rename', 'sort_values', 'min', 'groupby', 'merge', 'rename', 'agg', 'groupby', 'rename', 'hist', 'std', 'sum', 'hist', 'hist', 'quantile', 'quantile', 'hist', 'quantile', 'quantile', 'unique', 'min', 'max', 'apply', 'groupby', 'sum', 'mean', 'pivot', 'sort_values', 'duplicated', 'duplicated', 'all', 'apply', 'cumsum', 'clip', 'quantile', 'quantile', 'pop'] ['numpy', 'pandas', 'matplotlib.pyplot', 'datetime'] ['MaxNLocator', 'cycler', 'display', 'PCA']Dict:{'numpy': ['mean', 'quantile', 'max', 'sum', 'all', 'min', 'unique', 'clip', 'std', 'cumsum'], 'pandas': ['read_csv', 'value_counts', 'unique', 'merge', 'pivot'], 'matplotlib': [], 'cycler': [], 'IPython': [], 'datetime': [], 'sklearn': []} axis_0: 2, axis_1: 1
detailed-eda-benchmarking-classifiers-tps-apr-21.py : ['join', 'join', 'join', 'read_csv', 'read_csv', 'read_csv', 'sample', 'describe', 'describe', 'nunique', 'nunique', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sort_values', 'apply', 'sum', 'isnull', 'sort_values', 'apply', 'apply', 'isnull', 'apply', 'isnull', 'fillna', 'fillna', 'apply', 'isnull', 'apply', 'isnull', 'fillna', 'fillna', 'apply', 'isnull', 'apply', 'isnull', 'fillna', 'mean', 'fillna', 'mean', 'apply', 'isnull', 'apply', 'isnull', 'fillna', 'mode', 'fillna', 'mode', 'apply', 'isnull', 'apply', 'isnull', 'transform', 'groupby', 'fillna', 'mean', 'transform', 'groupby', 'fillna', 'mean', 'sum', 'isnull', 'sum', 'isnull', 'unstack', 'value_counts', 'groupby', 'reset_index', 'mean', 'sort_values', 'unstack', 'value_counts', 'groupby', 'reset_index', 'sort_values', 'reset_index', 'sample', 'head', 'nunique', 'apply', 'apply', 'astype', 'astype', 'cut', 'cut', 'cut', 'cut', 'cut', 'cut', 'cut', 'cut', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'replace', 'apply', 'replace', 'apply', 'map', 'map', 'astype', 'map', 'astype', 'map', 'map', 'map', 'map', 'map', 'apply', 'mask', 'map', 'value_counts', 'unique', 'apply', 'drop', 'head', 'concat', 'transform', 'transform', 'transform', 'drop', 'drop', 'concat', 'concat', 'join', 'add_suffix', 'transform', 'join', 'add_suffix', 'transform', 'drop', 'drop', 'join', 'add_suffix', 'transform', 'join', 'add_suffix', 'transform', 'drop', 'drop', 'join', 'add_suffix', 'transform', 'join', 'add_suffix', 'transform', 'drop', 'drop', 'join', 'add_suffix', 'transform', 'join', 'add_suffix', 'transform', 'drop', 'drop', 'join', 'add_suffix', 'transform', 'join', 'add_suffix', 'transform', 'drop', 'drop', 'join', 'add_suffix', 'transform', 'join', 'add_suffix', 'transform', 'drop', 'drop', 'join', 'add_suffix', 'transform', 'join', 'add_suffix', 'transform', 'drop', 'drop', 'nunique', 'transform', 'boxplot', 'head', 'to_csv', 'to_csv', 'to_csv', 'to_csv'] ['warnings', 'sklearn.exceptions', 'pandas', 'numpy', 'os', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'category_encoders', 'xgboost'] ['fmin', 'StratifiedKFold', 'RepeatedStratifiedKFold', 'cross_validate', 'cross_val_score', 'train_test_split', 'KFold', 'preprocessing', 'chi2', 'f_classif', 'f_regression', 'mutual_info_classif', 'mutual_info_regression', 'SelectKBest', 'SelectPercentile', 'VarianceThreshold', 'GaussianNB', 'LogisticRegression', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'RandomForestClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'StackingClassifier', 'VotingClassifier']Dict:{'warnings': [], 'sklearn': ['transform'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'unique'], 'numpy': ['mean', 'sum', 'unique'], 'os': ['replace'], 'scipy': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'category_encoders': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 1, axis_1: 19
knowledge-graph-nlp-tutorial-bert-spacy-nltk.py : ['read_csv', 'sample', 'add', 'value_counts', 'read_csv', 'sample', 'sum', 'eval', 'read_csv', 'eval', 'read_csv', 'head', 'info', 'value_counts', 'join', 'join'] ['re', 'pandas', 'bs4', 'requests', 'spacy', 'networkx', 'matplotlib.pyplot', 'tensorflow', 'torch', 'pandas', 'io', 'numpy', 'matplotlib.pyplot', 'spacy', 'spacy', 'spacy', 'spacy', 'spacy', 'spacy', 'spacy', 'spacy', 'spacy', 'spacy', 'spacy', 'spacy', 'spacy', 'pandas', 'string', 'nltk', 'nltk'] ['displacy', 'Matcher', 'Span', 'tqdm', 'TensorDataset', 'DataLoader', 'RandomSampler', 'SequentialSampler', 'pad_sequences', 'train_test_split', 'BertTokenizer', 'BertConfig', 'BertAdam', 'BertForSequenceClassification', 'tqdm', 'trange', 'matthews_corrcoef', 'displacy', 'displacy', 'CountVectorizer', 'TfidfVectorizer', 'TransformerMixin', 'Pipeline', 'STOP_WORDS', 'English', 'train_test_split', 'LogisticRegression', 'metrics', 'sent_tokenize', 'word_tokenize', 'stopwords', 'PorterStemmer', 'WordNetLemmatizer', 'PunktSentenceTokenizer', 'PunktSentenceTokenizer', 'PunktSentenceTokenizer', 'PunktSentenceTokenizer', 'sent_tokenize', 'gutenberg']Dict:{'re': [], 'pandas': ['eval', 'read_csv', 'value_counts'], 'bs4': [], 'requests': ['head'], 'spacy': [], 'networkx': [], 'matplotlib': [], 'tqdm': [], 'tensorflow': ['add'], 'torch': [], 'keras': [], 'sklearn': [], 'pytorch_pretrained_bert': [], 'io': [], 'numpy': ['info', 'sum', 'add'], '': [], 'string': [], 'nltk': []} axis_0: 0, axis_1: 2
covid-19-w2-lgb-mad.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'merge', 'isin', 'unique', 'concat', 'astype', 'astype', 'isna', 'isna', 'cummax', 'groupby', 'cummax', 'groupby', 'merge', 'merge', 'to_datetime', 'sort_values', 'min', 'isna', 'max', 'isna', 'min', 'isna', 'max', 'isna', 'unique', 'isna', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'merge', 'rename', 'reset_index', 'min', 'groupby', 'astype', 'astype', 'isna', 'dropna', 'drop', 'drop', 'sum', 'sum', 'sum', 'sum', 'isna', 'isna', 'unique', 'rename', 'merge', 'concat', 'merge', 'concat', 'isna', 'isna', 'isna', 'isna', 'isna', 'isna', 'isna', 'isna', 'sort_values', 'sort_values', 'sort_values', 'unique', 'unique', 'reset_index', 'isna', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'astype', 'to_csv', 'to_csv'] ['lightgbm', 'numpy', 'pandas', 'warnings'] ['mean_squared_error', 'LabelEncoder', 'output_notebook', 'show', 'column', 'Spectral3', 'figure', 'Panel', 'Tabs', 'output_notebook', 'show', 'figure', 'Panel', 'Tabs', 'output_notebook', 'show', 'figure']Dict:{'lightgbm': [], 'numpy': ['max', 'sum', 'min', 'unique', 'isin'], 'pandas': ['isna', 'read_csv', 'concat', 'unique', 'merge', 'to_datetime'], 'sklearn': [], 'warnings': [], 'bokeh': []} axis_0: 0, axis_1: 0
predicting-stock-movement.py : ['reset_index', 'reset_index', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'head', 'sum', 'isna', 'nunique', 'sum', 'groupby', 'sort_values', 'describe', 'groupby', 'reset_index', 'head', 'unique', 'reset_index', 'quantile', 'groupby', 'reset_index', 'agg', 'groupby', 'mean', 'sort_values', 'astype', 'sort_values', 'abs', 'sum', 'sum', 'sum', 'sum', 'transform', 'groupby', 'transform', 'groupby', 'iterrows', 'abs', 'abs', 'iterrows', 'abs', 'abs', 'reset_index', 'agg', 'groupby', 'sort_values', 'astype', 'round', 'describe', 'sample', 'reset_index', 'mean', 'groupby', 'sum', 'isna', 'sum', 'isna', 'sum', 'isna', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'ewm', 'mean', 'mean', 'mean', 'mean', 'rolling', 'std', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'insert', 'abs', 'head', 'head', 'transform', 'mean', 'join', 'astype', 'head', 'fillna', 'merge', 'copy', 'copy', 'set_index', 'join', 'dropna', 'apply', 'keys', 'merge', 'reset_index', 'groupby', 'reset_index', 'apply', 'agg', 'join', 'transform', 'concat', 'rename', 'set_index', 'join', 'head', 'replace', 'to_datetime', 'apply', 'to_numeric', 'to_datetime', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'gc', 'datetime', 'lightgbm', 'time', 'fancyimpute', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools'] ['stats', 'hstack', 'csr_matrix', 'train_test_split', 'WordCloud', 'Counter', 'stopwords', 'ngrams', 'TfidfVectorizer', 'StandardScaler', 'datetime', 'timedelta', 'chain', 'twosigmanews', 'IterativeImputer', 'CountVectorizer', 'TfidfTransformer', 'stopwords', 'WordCloud', 'STOPWORDS']Dict:{'numpy': ['mean', 'quantile', 'std', 'max', 'abs', 'sum', 'round', 'min', 'unique', 'insert', 'copy'], 'pandas': ['isna', 'concat', 'to_numeric', 'unique', 'merge', 'to_datetime'], 'matplotlib': [], 'seaborn': [], 'gc': [], 'datetime': ['min', 'max'], 'lightgbm': [], 'scipy': ['mean', 'max', 'sum', 'min', 'astype', 'copy'], 'sklearn': [], 'wordcloud': [], 'collections': ['keys', 'copy'], 'nltk': [], 'time': [], 'fancyimpute': [], 'itertools': [], 'plotly': [], 'kaggle': []} axis_0: 0, axis_1: 2
moa-post-process-lb-1777.py : ['read_csv', 'to_csv', 'head', 'round', 'read_csv', 'head', 'reset_index', 'sort_values', 'reset_index', 'sort_values', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'mean', 'rolling', 'read_csv', 'read_csv', 'read_csv', 'hist', 'hist', 'copy', 'where', 'read_csv', 'mean', 'isin', 'mean', 'isin', 'isin', 'isin', 'isin', 'isin', 'sum', 'mean', 'to_csv', 'head'] ['pandas', 'numpy', 'matplotlib.pyplot'] ['log_loss']Dict:{'pandas': ['read_csv'], 'matplotlib': ['hist'], 'sklearn': []} axis_0: 0, axis_1: 0
object-oriented-programming-for-data-science.py : ['sum', 'isnull', 'sort_values', 'drop', 'drop', 'fillna', 'fillna', 'mode', 'fillna', 'mean', 'fillna', 'median', 'fillna', 'apply', 'groupby', 'fillna', 'median', 'transform', 'fillna', 'mode', 'astype', 'astype', 'apply', 'astype', 'astype', 'get_dummies', 'concat', 'drop', 'apply', 'drop', 'fillna', 'get_dummies', 'test', 'keys', 'keys', 'keys', 'items', 'keys', 'keys', 'keys', 'items', 'items', 'mean', 'std', 'mean', 'std', 'keys', 'max', 'keys', 'keys', 'min', 'keys', 'keys', 'keys', 'max', 'keys', 'keys', 'min', 'keys', 'keys', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'sort_values', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'keys', 'array', 'items', 'array', 'items', 'test', 'to_csv', 'test', 'drop', 'reset_index', 'apply', 'drop', 'test', 'test', 'copy', 'reset_index', 'concat', 'set_index', 'set_index', 'test', 'read_csv', 'read_csv'] ['os', 'numpy', 'pandas', 'warnings', 'plotly', 'plotly.graph_objs', 'plotly.io', 'plotly.express', 'cufflinks', 'xgboost'] ['iplot', 'init_notebook_mode', 'SVR', 'make_pipeline', 'cross_validate', 'train_test_split', 'KFold', 'cross_val_score', 'StandardScaler', 'LabelEncoder', 'RobustScaler', 'RandomForestRegressor', 'XGBRegressor', 'ElasticNet', 'Lasso', 'BayesianRidge', 'LassoLarsIC', 'KernelRidge', 'GradientBoostingRegressor', 'mean_squared_error', 'mean_absolute_error', 'r2_score']Dict:{'os': [], 'numpy': ['mean', 'median', 'max', 'sum', 'array', 'test', 'min', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'get_dummies', 'test', 'array'], 'warnings': [], 'plotly': [], '': [], 'cufflinks': [], 'sklearn': [], 'xgboost': []} axis_0: 0, axis_1: 4
applying-lightgbm-to-titanic-dataset.py : ['read_csv', 'read_csv', 'info', 'pop', 'drop', 'fillna', 'fillna', 'transform', 'astype', 'drop', 'pop', 'sort_values', 'round', 'astype', 'round'] ['pandas', 'numpy', 'matplotlib.pyplot', 'lightgbm'] ['train_test_split', 'LabelEncoder', 'accuracy_score', 'recall_score', 'precision_score', 'f1_score']Dict:{'pandas': ['read_csv'], 'numpy': ['round', 'info'], 'matplotlib': [], 'lightgbm': [], 'sklearn': [], '=': [], 'pd': [], 'clf': [], '': []} axis_0: 0, axis_1: 2
single-bi-lstm-model-pressure-predict-gpu-infer.py : ['join', 'join', 'join', 'read_csv', 'read_csv', 'read_csv', 'head', 'unique', 'cumsum', 'groupby', 'cumsum', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'shift', 'groupby', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'astype', 'astype', 'astype', 'get_dummies', 'head', 'drop', 'drop', 'transform', 'squeeze', 'squeeze', 'head', 'to_csv', 'median', 'head', 'to_csv', 'round', 'clip', 'head', 'to_csv'] ['warnings', 'sklearn.exceptions', 'pandas', 'numpy', 'os', 'glob', 'random', 'gc', 'tensorflow'] ['display', 'tqdm', 'preprocessing', 'keras', 'mean_absolute_error']Dict:{'warnings': [], 'sklearn': [], 'IPython': [], 'tqdm': [], 'pandas': ['get_dummies', 'unique', 'read_csv'], 'numpy': ['median', 'squeeze', 'round', 'unique', 'clip', 'cumsum'], 'os': [], 'glob': [], 'random': [], 'gc': [], 'tensorflow': []} axis_0: 1, axis_1: 2
xgboost-late-sub.py : ['copy', 'copy', 'sample', 'concat', 'sum', 'sum', 'array', 'sum', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'to_datetime', 'replace', 'astype', 'eq', 'astype', 'eq', 'merge', 'max', 'concat', 'transform', 'transform', 'fillna', 'fillna', 'to_dict', 'count', 'groupby', 'concat', 'map', 'map', 'round', 'to_csv'] ['numpy', 'pandas', 'xgboost'] ['BaggingClassifier', 'StandardScaler']Dict:{'numpy': ['max', 'sum', 'round', 'array', 'copy'], 'pandas': ['read_csv', 'concat', 'array', 'merge', 'to_datetime'], 'xgboost': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 1
playgrounds3e12-extensiveeda-baseline.py : [] [] []Dict:{} axis_0: 4, axis_1: 2
baseline-with-tf-and-feature-engineering.py : ['read_csv', 'read_csv', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'nunique', 'value_counts', 'drop', 'drop', 'idxmax', 'idxmax', 'to_dict', 'value_counts', 'map', 'map', 'drop', 'drop', 'head', 'idxmax', 'idxmax', 'to_dict', 'value_counts', 'map', 'map', 'drop', 'drop', 'head', 'clip', 'clip', 'apply', 'apply', 'describe', 'transform', 'transform', 'mean', 'std', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'tensorflow'] ['train_test_split', 'KFold', 'StratifiedKFold', 'LabelEncoder', 'StandardScaler', 'accuracy_score']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'clip', 'std'], 'pandas': ['read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'tensorflow': []} axis_0: 0, axis_1: 12
a-guide-missingvalues-feature-engineering-eda.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'select_dtypes', 'select_dtypes', 'info', 'info', 'describe', 'sum', 'isnull', 'sum', 'isnull', 'dropna', 'dropna', 'dropna', 'where', 'where', 'where', 'head', 'head', 'corr', 'select_dtypes'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'scipy.stats', 'missingno', 'warnings'] []Dict:{'numpy': ['where', 'info', 'sum'], 'pandas': ['read_csv', 'isnull'], 'matplotlib': [], 'seaborn': [], 'scipy': ['describe'], 'missingno': [], 'warnings': []} axis_0: 0, axis_1: 0
titanic-feature-engineering-for-top-3-0-80382.py : ['read_csv', 'read_csv', 'head', 'head', 'mean', 'isnull', 'mean', 'isnull', 'set_index', 'set_index', 'head', 'value_counts', 'astype', 'astype', 'apply', 'apply', 'value_counts', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'value_counts', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'value_counts', 'drop', 'drop', 'head', 'value_counts', 'mean', 'groupby', 'mean', 'groupby', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'isnull', 'mean', 'sum', 'isnull', 'value_counts', 'sort_index', 'value_counts', 'value_counts', 'value_counts', 'drop', 'drop', 'head', 'hist', 'value_counts', 'value_counts', 'notnull', 'notnull', 'value_counts', 'fillna', 'mode', 'fillna', 'mode', 'value_counts', 'head', 'drop', 'get_dummies', 'get_dummies', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['RandomForestClassifier', 'RandomizedSearchCV', 'randint']Dict:{'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'notnull'], 'numpy': ['mean', 'sum'], 'matplotlib': ['hist'], 'seaborn': [], 'sklearn': [], 'scipy': ['mean']} axis_0: 0, axis_1: 5
ultimate-feature-engineering-xgb-lgb-nn.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'isnull', 'isnull', 'fillna', 'apply', 'join', 'apply', 'join', 'drop', 'rename', 'agg', 'groupby', 'join', 'fillna', 'rename', 'agg', 'groupby', 'join', 'rename', 'agg', 'groupby', 'join', 'astype', 'join', 'apply', 'rename', 'agg', 'groupby', 'sum', 'join', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'min', 'to_datetime', 'mean', 'rename', 'agg', 'groupby', 'sum', 'join', 'fillna', 'fillna', 'squeeze', 'squeeze', 'array', 'array', 'mean', 'array', 'to_csv'] ['pylab', 'pandas', 're', 'gc', 'xgboost', 'lightgbm', 'seaborn'] ['LabelEncoder', 'OneHotEncoder', 'CountVectorizer', 'TfidfVectorizer', 'roc_auc_score', 'StratifiedKFold', 'defaultdict', 'Counter', 'pos_tag', 'stopwords', 'PorterStemmer', 'TextBlob', 'pearsonr', 'hstack', 'Pool', 'StandardScaler', 'Input', 'Dense', 'Flatten', 'concatenate', 'Dropout', 'Embedding', 'SpatialDropout1D', 'EarlyStopping', 'ReduceLROnPlateau', 'ModelCheckpoint', 'Model', 'optimizers', 'train_test_split', 'LinearRegression', 'MinMaxScaler']Dict:{'pylab': ['mean', 'squeeze', 'sum', 'min', 'array'], 'pandas': ['read_csv', 'isnull', 'concat', 'array', 'to_datetime'], 're': [], 'gc': [], 'xgboost': [], 'lightgbm': [], 'seaborn': [], 'sklearn': [], 'collections': [], 'nltk': [], 'textblob': [], 'scipy': [], 'multiprocessing': [], 'keras': []} axis_0: 0, axis_1: 4
lb-0-350-feature-engineering-lightgbm.py : ['min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'apply', 'to_datetime', 'tz_localize', 'sort_values', 'astype', 'map', 'astype', 'map', 'astype', 'diff', 'astype', 'astype', 'astype', 'set_index', 'agg', 'rolling', 'astype', 'agg', 'rolling', 'astype', 'diff', 'astype', 'agg', 'rolling', 'astype', 'median', 'rolling', 'abs', 'astype', 'max', 'rolling', 'drop', 'drop', 'reset_index', 'bfill', 'ffill', 'dropna', 'read_parquet', 'astype', 'read_parquet', 'unique', 'value_counts', 'drop', 'sort_values', 'read_parquet', 'drop', 'fillna', 'fillna', 'mean', 'rolling', 'fillna', 'fillna', 'mean', 'rolling', 'round', 'isnull', 'read_parquet', 'unique', 'concat', 'reset_index', 'reset_index', 'copy', 'to_csv'] ['numpy', 'pandas', 'lightgbm', 'matplotlib.pyplot', 'plotly.express', 'gc', 'warnings'] ['groupby', 'train_test_split', 'is_datetime64_ns_dtype', 'RandomUnderSampler', 'Parallel', 'delayed']Dict:{'numpy': ['mean', 'median', 'max', 'abs', 'round', 'min', 'unique', 'diff', 'copy'], 'pandas': [], 'itertools': [], 'sklearn': [], 'imblearn': [], 'lightgbm': [], 'matplotlib': [], 'plotly': [], 'joblib': [], 'gc': [], 'warnings': []} axis_0: 0, axis_1: 0
feature-engineering-and-random-forest-prediction.py : ['to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'to_datetime', 'read_csv', 'filter', 'agg', 'sum', 'sum', 'to_numpy', 'filter', 'unique', 'filter', 'abs', 'abs', 'abs', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'abs', 'abs', 'diff', 'unique', 'filter', 'std', 'filter', 'filter', 'filter', 'filter', 'to_numpy', 'unique', 'std', 'filter', 'std', 'filter', 'diff', 'filter', 'diff', 'mean', 'filter', 'rename', 'reset_index', 'filter', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'polars', 'datetime', 'plotly.express', 'plotly.graph_objects', 'pickle'] ['tqdm', 'make_subplots', 'score', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'abs', 'sum', 'unique', 'diff', 'std'], 'pandas': ['to_datetime', 'unique', 'read_csv'], 'matplotlib': [], 'polars': ['mean', 'std', 'sum', 'read_csv'], 'datetime': [], '': [], 'tqdm': [], 'plotly': [], 'metric': [], 'sklearn': [], 'pickle': []} axis_0: 0, axis_1: 0
simple-blending.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'nunique', 'nunique', 'read_csv', 'head', 'groupby', 'reset_index', 'quantile', 'quantile', 'apply', 'explode', 'apply', 'agg', 'groupby', 'join', 'count', 'groupby', 'fillna', 'reset_index', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'count', 'groupby', 'fillna', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'boxplot', 'boxplot', 'boxplot', 'transform', 'transform', 'transform', 'transform', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'count', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'count', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'concat', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'sum', 'keys', 'sum', 'reset_index', 'agg', 'groupby', 'items', 'reset_index', 'reset_index', 'agg', 'groupby', 'apply', 'join', 'apply', 'apply', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'drop', 'unique', 'shift', 'groupby', 'drop', 'shift', 'groupby', 'abs', 'drop', 'shift', 'groupby', 'abs', 'drop', 'rename', 'reset_index', 'agg', 'groupby', 'merge', 'concat', 'concat', 'concat', 'concat', 'concat', 'merge', 'merge', 'any', 'isna', 'drop', 'drop', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'agg', 'groupby', 'join', 'add_prefix', 'reset_index', 'merge', 'merge', 'fillna', 'shift', 'groupby', 'groupby', 'max', 'min', 'median', 'first', 'groupby', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'apply', 'sum', 'reset_index', 'unique', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'head', 'merge', 'merge', 'merge', 'head', 'merge', 'apply', 'replace', 'copy', 'copy', 'copy', 'transform', 'copy', 'transform', 'items', 'round', 'mean', 'round', 'std', 'copy', 'copy', 'drop', 'replace', 'items', 'copy', 'transform', 'transform', 'mean', 'items', 'to_csv', 'head'] ['re', 'copy', 'warnings', 'string', 'sklearn', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'catboost'] ['tqdm', 'kurtosis', 'Counter', 'Path', 'defaultdict', 'KNeighborsRegressor', 'KFold', 'TfidfVectorizer', 'CountVectorizer', 'MinMaxScaler', 'SimpleImputer']Dict:{'re': [], 'copy': ['copy'], 'warnings': [], 'string': [], 'sklearn': [], 'numpy': ['mean', 'median', 'quantile', 'any', 'max', 'abs', 'sum', 'round', 'min', 'unique', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'unique', 'merge'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'lightgbm': [], 'catboost': [], 'tqdm': [], 'scipy': [], 'collections': ['items', 'keys', 'copy'], 'pathlib': ['rename', 'replace']} axis_0: 1, axis_1: 9
feature-engineering-idea-generator-numeric.py : ['read_csv', 'head', 'reset_index', 'rename', 'groupby', 'merge', 'max', 'astype', 'rename', 'reset_index', 'nunique', 'groupby', 'merge', 'max', 'astype', 'groupby', 'max', 'astype', 'astype', 'to_datetime', 'astype', 'to_datetime', 'astype', 'to_datetime', 'head', 'boxplot', 'boxplot', 'boxplot', 'boxplot', 'astype', 'astype', 'astype', 'shift', 'groupby', 'astype', 'fillna', 'boxplot'] ['numpy', 'pandas', 'datetime', 'os', 'gc', 'time', 'matplotlib.pyplot', 'seaborn'] []Dict:{'numpy': ['max'], 'pandas': ['merge', 'to_datetime', 'read_csv'], 'datetime': [], 'os': ['rename'], 'gc': [], 'time': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot']} axis_0: 0, axis_1: 0
train-feats-st-list-feats-valid-score-0-6.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'read_csv', 'to_datetime', 'sort_values', 'cumprod', 'map', 'sort_values', 'ffill', 'sort_values', 'reset_index', 'apply', 'groupby', 'set_index', 'read_csv', 'read_csv', 'replace', 'drop', 'astype', 'copy', 'select_dtypes', 'get_dummies', 'reset_index', 'copy', 'rename', 'merge', 'set_index', 'copy', 'copy', 'fillna', 'replace', 'drop', 'unique', 'concat', 'copy', 'dropna', 'dropna', 'isin', 'isin', 'all', 'concat', 'concat', 'concat', 'concat', 'sort_values', 'copy', 'sort_values', 'sort_values', 'apply', 'groupby', 'tail', 'min', 'max', 'sum', 'sort_values', 'mean', 'sum', 'sort_values', 'mean', 'apply', 'groupby', 'mean', 'std', 'sort_values', 'min', 'max', 'sum', 'sort_values', 'mean', 'sum', 'sort_values', 'mean', 'apply', 'groupby', 'cumsum'] ['os', 'numpy', 'pandas', 'ta', 'matplotlib.pyplot', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'warnings'] ['ROUND_HALF_UP', 'Decimal', 'LGBMRegressor', 'tqdm', 'add_all_ta_features', 'dropna']Dict:{'os': ['rename', 'replace'], 'decimal': ['min', 'max'], 'numpy': ['mean', 'cumprod', 'max', 'sum', 'all', 'min', 'unique', 'isin', 'std', 'cumsum', 'copy'], 'pandas': ['read_csv', 'concat', 'get_dummies', 'unique', 'merge', 'to_datetime'], 'lightgbm': [], 'tqdm': [], 'ta': [], 'matplotlib': [], 'seaborn': [], 'warnings': []} axis_0: 0, axis_1: 1
pss3e9-eda-and-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'info', 'info', 'info', 'drop', 'concat', 'drop_duplicates', 'info', 'boxplot', 'where', 'where', 'copy', 'boxplot', 'corr', 'drop', 'copy', 'transform', 'mean', 'mean'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'math', 'warnings', 'xgboost'] ['HTML', 'tqdm', 'Style', 'Fore', 'probplot', 'KFold', 'mean_squared_error', 'RobustScaler', 'XGBRegressor', 'LGBMRegressor']Dict:{'IPython': [], 'pandas': ['concat', 'read_csv'], 'numpy': ['mean', 'info', 'where', 'copy'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'tqdm': [], 'math': [], 'warnings': [], 'colorama': [], 'scipy': [], 'sklearn': ['transform'], 'xgboost': [], 'lightgbm': []} axis_0: 1, axis_1: 2
shap-feature-importance-with-feature-engineering.py : ['unique', 'rolling', 'shift', 'mean', 'max', 'min', 'std', 'fillna', 'unique', 'groupby', 'map', 'concat', 'drop', 'fillna', 'fillna', 'mean', 'unique', 'map', 'dropna', 'merge', 'min', 'max', 'astype', 'astype', 'value_counts', 'hist', 'mean', 'abs', 'sort_values'] ['gc', 'glob', 'os', 'random', 'time', 'joblib', 'lightgbm', 'matplotlib.pyplot', 'numpy', 'pandas', 'shap'] ['date', 'datetime', 'model_selection', 'accuracy_score', 'mean_squared_error', 'train_test_split', 'LabelEncoder', 'Pool', 'twosigmanews']Dict:{'gc': [], 'glob': [], 'os': [], 'random': [], 'time': [], 'datetime': ['min', 'max'], 'joblib': [], 'lightgbm': [], 'matplotlib': ['hist'], 'numpy': ['mean', 'max', 'abs', 'min', 'unique', 'std'], 'pandas': ['merge', 'unique', 'concat', 'value_counts'], 'shap': [], 'sklearn': [], 'multiprocessing': [], 'kaggle': [], '=': [], 'pd': [], 'shap_sum': [], "['column_name',": [], "'shap_importance']": [], 'importance_df': [], 'ascending=False)': []} axis_0: 4, axis_1: 1
feature-engineering-tuned-xgboost-lgbm.py : ['read_csv', 'head', 'unique', 'read_csv', 'head', 'groupby', 'unique', 'groupby', 'read_parquet', 'read_parquet', 'diff', 'sum', 'mean', 'read_parquet', 'apply', 'groupby', 'apply', 'groupby', 'isnull', 'reset_index', 'agg', 'groupby', 'apply', 'reset_index', 'agg', 'groupby', 'sort_values', 'min', 'max', 'pct_change', 'pct_change', 'pct_change', 'pct_change', 'fillna', 'reset_index', 'apply', 'groupby', 'fillna', 'reset_index', 'apply', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'mean', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'merge', 'reset_index', 'agg', 'groupby', 'concat', 'mean', 'head', 'head', 'merge', 'head', 'info', 'merge', 'fillna', 'to_pickle', 'to_pickle', 'drop', 'mean', 'mean', 'drop', 'drop', 'assign', 'to_csv'] ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot', 'os', 'glob', 'gc', 'optuna'] ['r2_score', 'tqdm', 'Parallel', 'delayed', 'train_test_split', 'KFold', 'LGBMRegressor', 'XGBRegressor', 'TPESampler', 'StackingRegressor']Dict:{'pandas': ['to_pickle', 'read_csv', 'isnull', 'concat', 'read_parquet', 'unique', 'merge'], 'numpy': ['mean', 'max', 'diff', 'sum', 'min', 'unique', 'info'], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'os': [], 'glob': [], 'tqdm': [], 'joblib': [], 'gc': [], 'lightgbm': [], 'xgboost': ['apply'], 'optuna': []} axis_0: 0, axis_1: 0
stratified-sampling-for-regression-lb-1-4627.py : ['read_csv', 'merge', 'drop', 'astype', 'apply', 'to_datetime', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'astype', 'fillna', 'fillna', 'fillna', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'nunique', 'drop', 'drop', 'drop', 'astype', 'fillna', 'concat', 'get_dummies', 'astype', 'astype', 'transform', 'astype', 'transform', 'astype', 'sort_values', 'drop', 'drop', 'cut', 'concat', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'to_csv', 'copy', 'reset_index', 'sum', 'groupby', 'to_csv'] ['os', 'json', 'numpy', 'pandas', 'time', 'gc', 'psutil', 'matplotlib.pyplot', 'seaborn', 'lightgbm'] ['json_normalize', 'datetime', 'LabelEncoder', 'mean_squared_error', 'KFold', 'StratifiedKFold', 'model_selection', 'preprocessing', 'metrics', 'StratifiedKFold']Dict:{'os': [], 'json': [], 'numpy': ['mean', 'isin', 'sum', 'copy'], 'pandas': [], 'time': [], 'datetime': [], 'gc': [], 'psutil': [], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'lightgbm': []} axis_0: 1, axis_1: 6
private-lb-top-2-google-s-tft.py : ['join', 'read_csv', 'read_csv', 'head', 'sum', 'isnull', 'sum', 'isnull', 'count', 'isnull', 'concat', 'transpose', 'drop', 'merge', 'describe', 'describe', 'value_counts', 'astype', 'astype', 'astype', 'astype', 'transform', 'reset_index', 'astype', 'median', 'groupby', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'min', 'groupby', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'max', 'groupby', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'median', 'groupby', 'rename', 'merge', 'merge', 'to_datetime', 'astype', 'drop', 'astype', 'astype', 'astype', 'astype', 'drop', 'drop', 'reset_index', 'astype', 'median', 'groupby', 'rename', 'merge', 'merge', 'reset_index', 'astype', 'median', 'groupby', 'rename', 'merge', 'merge', 'copy', 'copy', 'pop', 'transform', 'concat', 'concat', 'to_datetime', 'astype', 'nunique', 'head', 'head', 'describe', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'max', 'mean', 'abs', 'max', 'copy', 'drop', 'describe', 'head', 'head', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'concat', 'describe', 'head', 'unique', 'tail', 'melt', 'rename', 'head', 'merge', 'read_csv', 'head', 'astype', 'round', 'all', 'all', 'head', 'read_csv', 'rename', 'merge', 'head', 'astype', 'round', 'fillna', 'head', 'rename', 'drop', 'head', 'read_csv', 'copy', 'quantile', 'groupby', 'quantile', 'groupby', 'copy', 'clip', 'sum', 'sum', 'astype', 'round', 'to_csv'] ['numpy', 'pandas', 'os', 'plotly.graph_objects', 'seaborn', 'plotly.express', 'matplotlib.pyplot', 'plotly.express', 'tensorflow', 'tensorboard', 'pytorch_lightning', 'torch', 'pytorch_forecasting', 'pytorch_lightning', 'pickle'] ['venn2_unweighted', 'make_subplots', 'LabelEncoder', 'HTML', 'FunctionTransformer', 'PCA', 'EarlyStopping', 'LearningRateMonitor', 'TensorBoardLogger', 'Baseline', 'TemporalFusionTransformer', 'TimeSeriesDataSet', 'GroupNormalizer', 'SMAPE', 'PoissonLoss', 'QuantileLoss', 'optimize_hyperparameters', 'QuantileLoss', 'optimize_hyperparameters', 'EarlyStopping', 'LearningRateMonitor', 'mean_absolute_error']Dict:{'numpy': ['transpose', 'mean', 'median', 'quantile', 'max', 'abs', 'sum', 'all', 'round', 'min', 'unique', 'clip', 'copy'], 'pandas': ['read_csv', 'isnull', 'melt', 'concat', 'value_counts', 'unique', 'merge', 'to_datetime'], 'os': ['rename'], 'matplotlib_venn': [], 'plotly': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'IPython': [], '=': [], "['moment',": [], "'median',": [], "'min',": [], "'max',": [], "'morning_avg']": [], 'tensorflow': ['transpose', 'abs', 'concat', 'round', 'unique'], 'tensorboard': [], 'pytorch_lightning': [], 'torch': ['transpose', 'mean', 'median', 'quantile', 'max', 'abs', 'sum', 'concat', 'all', 'round', 'min', 'unique', 'clip'], 'pytorch_forecasting': [], 'pickle': []} axis_0: 0, axis_1: 10
titanic-eda-feature-engineering-xgboost.py : ['join', 'read_csv', 'head', 'info', 'describe', 'drop', 'head', 'value_counts', 'rename', 'reset_index', 'mean', 'groupby', 'rename', 'reset_index', 'mean', 'groupby', 'rename', 'reset_index', 'median', 'groupby', 'nunique', 'head', 'head', 'drop', 'rename', 'reset_index', 'value_counts', 'mean', 'apply', 'drop', 'head', 'median', 'rename', 'reset_index', 'value_counts', 'mean', 'groupby', 'rename', 'reset_index', 'value_counts', 'mean', 'groupby', 'apply', 'drop', 'head', 'drop', 'boxplot', 'quantile', 'quantile', 'quantile', 'quantile', 'apply', 'boxplot', 'head', 'sum', 'isna', 'unique', 'apply', 'head', 'mean', 'groupby', 'value_counts', 'apply', 'drop', 'head', 'value_counts', 'median', 'groupby', 'fillna', 'info', 'drop', 'drop', 'head', 'drop', 'get_dummies', 'head', 'transform', 'value_counts', 'read_csv', 'head', 'apply', 'apply', 'drop', 'drop', 'drop', 'fillna', 'apply', 'drop', 'drop', 'fillna', 'fillna', 'median', 'info', 'apply', 'get_dummies', 'transform', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'seaborn', 'xgboost'] ['train_test_split', 'StandardScaler', 'GridSearchCV', 'roc_curve', 'roc_auc_score']Dict:{'numpy': ['mean', 'median', 'quantile', 'sum', 'unique', 'info'], 'pandas': ['isna', 'read_csv', 'value_counts', 'get_dummies', 'unique'], 'os': ['rename'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': [], 'xgboost': []} axis_0: 2, axis_1: 12
jpx-network-models-and-feature-generation.py : ['join', 'read_csv', 'drop_duplicates', 'dropna', 'pivot', 'head', 'reset_index', 'unstack', 'rename', 'unique', 'astype', 'boxplot', 'sum', 'sum', 'items', 'reset_index', 'sort_values', 'array', 'items', 'merge', 'rename', 'merge', 'rename', 'head', 'quantile', 'isin', 'items', 'head', 'items', 'reset_index', 'sort_values', 'array', 'items', 'cumsum', 'items', 'to_csv', 'items', 'read_csv', 'drop_duplicates', 'read_csv', 'merge', 'apply', 'groupby', 'ffill', 'apply', 'groupby', 'bfill', 'drop', 'merge', 'max', 'reset_index', 'apply', 'groupby', 'ffill', 'apply', 'groupby', 'bfill', 'transform', 'astype', 'rank', 'all', 'notna', 'min', 'max'] ['numpy', 'pandas', 'networkx', 'matplotlib.pyplot', 'matplotlib.ticker', 'seaborn', 'altair', 'itertools', 'time', 'copy', 'gc', 'jpx_tokyo_market_prediction', 'os'] ['community', 'RandomForestRegressor', 'preprocessing']Dict:{'numpy': ['quantile', 'max', 'sum', 'all', 'min', 'unique', 'isin', 'array', 'cumsum'], 'pandas': ['read_csv', 'notna', 'unique', 'array', 'merge', 'pivot'], 'networkx': [], 'matplotlib': [], 'seaborn': ['boxplot'], 'altair': [], 'itertools': ['groupby'], 'time': [], 'copy': [], 'gc': [], 'jpx_tokyo_market_prediction': [], 'os': ['rename'], 'sklearn': []} axis_0: 1, axis_1: 0
ai-or-not-ai-delving-into-essays-with-eda.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'tail', 'tail', 'tail', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'value_counts', 'value_counts', 'apply', 'boxplot', 'apply', 'drop', 'mean', 'groupby', 'join', 'apply', 'merge', 'value_counts', 'mean', 'groupby', 'transform', 'sum', 'items', 'transform', 'sum', 'items', 'mean', 'copy', 'apply', 'apply', 'sum', 'sum', 'sum', 'sum', 'sub', 'sub', 'join', 'apply', 'transform', 'read_csv', 'tail', 'to_csv'] ['numpy', 'pandas', 'os', 'pandas', 'matplotlib.pyplot', 'seaborn', 'itertools', 'seaborn', 're', 'pandas', 'numpy', 're', 'string', 'matplotlib.pyplot'] ['Counter', 'display', 'Markdown', 'CountVectorizer', 'TruncatedSVD', 'cosine_similarity', 'TfidfVectorizer', 'Normalizer', 'TfidfVectorizer', 'KMeans', 'silhouette_score', 'stopwords', 'PorterStemmer', 'word_tokenize', 'PCA', 'KMeans', 'TfidfVectorizer']Dict:{'numpy': ['mean', 'sum', 'copy'], 'pandas': ['value_counts', 'merge', 'read_csv', 'isnull'], 'os': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'collections': ['items', 'copy'], 'itertools': ['groupby'], 'IPython': [], 'sklearn': [], 're': ['sub'], 'nltk': [], 'string': []} axis_0: 2, axis_1: 1
a-different-validation-technique.py : ['read_csv', 'read_csv', 'head', 'astype', 'mean', 'std', 'max', 'min', 'sum', 'median', 'mean', 'std', 'max', 'min', 'sum', 'median', 'count', 'count', 'count', 'keys', 'sample', 'mean', 'mean', 'mean', 'unique', 'var', 'transform', 'to_csv'] ['lightgbm', 'xgboost', 'pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'psutil'] ['accuracy_score', 'roc_auc_score', 'KFold', 'BaseCrossValidator', 'TruncatedSVD', 'FastICA', 'FactorAnalysis', 'SparseRandomProjection', 'VarianceThreshold', 'FeatureUnion', 'Ridge', 'scale', 'skew', 'kurtosis', 'gmean', 'ks_2samp', 'tqdm_notebook']Dict:{'lightgbm': [], 'xgboost': [], 'pandas': ['unique', 'read_csv'], 'numpy': ['mean', 'median', 'max', 'var', 'sum', 'min', 'unique', 'std'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'scipy': [], 'gc': [], 'psutil': [], 'tqdm': []} axis_0: 1, axis_1: 3
tps-jan22-eda-fe-simple-catboost.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'info', 'value_counts', 'to_datetime', 'to_datetime', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'nunique', 'select_dtypes', 'value_counts', 'astype', 'isin', 'astype', 'isin', 'astype', 'isin', 'astype', 'drop', 'apply', 'apply', 'clip', 'map', 'map', 'clip', 'map', 'clip', 'get_dummies', 'get_dummies', 'where', 'where', 'drop', 'drop', 'array', 'astype', 'join', 'abs', 'abs', 'abs', 'mean', 'mean', 'array', 'read_csv', 'to_csv'] ['os', 'warnings', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'math', 'dateutil.easter'] ['Path', 'Patch', 'TimeSeriesSplit', 'CatBoostRegressor']Dict:{'os': [], 'warnings': [], 'numpy': ['mean', 'abs', 'sum', 'where', 'clip', 'isin', 'info', 'array'], 'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'array', 'to_datetime'], 'seaborn': [], 'matplotlib': [], 'math': [], 'pathlib': [], 'dateutil': [], 'sklearn': [], 'catboost': []} axis_0: 0, axis_1: 4
house-regression-beginner-catboost-top-2.py : ['join', 'read_csv', 'read_csv', 'replace', 'drop', 'describe', 'drop', 'concat', 'select_dtypes', 'select_dtypes', 'corr', 'hist', 'boxplot', 'boxplot', 'apply', 'apply', 'apply', 'fillna', 'fillna', 'fillna', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'mode', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'fillna', 'drop', 'sum', 'isnull', 'any', 'isnull', 'select_dtypes', 'select_dtypes', 'any', 'isna', 'isna', 'dropna', 'isna', 'concat', 'update', 'fillna', 'sum', 'isna', 'to_numeric', 'to_numeric', 'to_numeric', 'to_numeric', 'get_dummies', 'sort_values', 'apply', 'drop', 'drop', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'seaborn', 'matplotlib.pyplot', 'scipy.stats', 'statsmodels.api', 'xgboost', 'missingno'] ['skew', 'norm', 'train_test_split', 'mean_squared_error', 'KNeighborsRegressor', 'Pool', 'CatBoostRegressor']Dict:{'numpy': ['sum', 'any'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'get_dummies', 'to_numeric'], 'os': ['replace'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'scipy': ['mode', 'describe'], 'statsmodels': [], 'sklearn': [], 'xgboost': [], 'catboost': [], 'missingno': []} axis_0: 1, axis_1: 5
tps-oct-22-rocket-league-eda.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'isna', 'any', 'isnull', 'sum', 'isna', 'any', 'isnull', 'round', 'sum', 'isna', 'any', 'isnull', 'round', 'head', 'mean', 'mean', 'corr', 'astype', 'isna', 'min', 'min', 'min', 'min', 'max', 'max', 'max', 'max', 'mean', 'mean', 'mean', 'mean'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'math', 'statistics', 'time', 'matplotlib.dates', 'plotly.express', 'warnings', 'sklearn', 'umap', 'umap.plot'] ['combinations', 'stats', 'pearsonr', 'shapiro', 'chi2', 'poisson', 'datetime', 'colored', 'PCA', 'TSNE', 'LinearDiscriminantAnalysis', 'KMeans', 'train_test_split', 'StratifiedKFold', 'GridSearchCV', 'TimeSeriesSplit', 'GroupKFold', 'cross_validate', 'StandardScaler', 'RobustScaler', 'PowerTransformer', 'OneHotEncoder', 'LabelEncoder', 'SimpleImputer', 'KNNImputer', 'enable_iterative_imputer', 'IterativeImputer', 'make_pipeline', 'make_column_transformer', 'confusion_matrix', 'ConfusionMatrixDisplay', 'accuracy_score', 'roc_auc_score', 'RandomForestClassifier', 'LinearRegression', 'Ridge', 'GaussianMixture', 'BayesianGaussianMixture', 'LinearRegression', 'LogisticRegression', 'KNeighborsClassifier', 'SVC', 'DecisionTreeClassifier', 'RandomForestClassifier', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier', 'GaussianNB']Dict:{'numpy': ['mean', 'any', 'max', 'sum', 'round', 'min'], 'pandas': ['isna', 'read_csv', 'isnull'], 'seaborn': [], 'matplotlib': [], 'itertools': [], 'math': [], 'statistics': ['mean'], 'scipy': ['mean'], 'time': [], 'datetime': ['min', 'max'], 'plotly': [], 'termcolor': [], 'warnings': [], 'sklearn': [], 'umap': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 0, axis_1: 12
titanic-eda-wrangling-imputation.py : ['read_csv', 'read_csv', 'concat', 'head', 'describe', 'value_counts', 'head', 'value_counts', 'replace', 'value_counts', 'median', 'groupby', 'apply', 'fillna', 'median', 'median', 'groupby', 'apply', 'fillna', 'fillna', 'describe', 'notnull', 'isnull', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'os'] ['rcParams', 'train_test_split', 'GridSearchCV', 'cross_val_score', 'RandomForestClassifier', 'accuracy_score', 'f1_score', 'precision_score', 'recall_score']Dict:{'numpy': ['median'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'notnull'], 'seaborn': [], 'matplotlib': [], 'os': ['replace'], 'sklearn': []} axis_0: 1, axis_1: 0
lightgbm-is-powerful.py : ['join', 'drop', 'drop', 'head', 'astype', 'astype', 'to_csv', 'head'] ['lightgbm', 'matplotlib.pyplot', 'seaborn', 'numpy', 'pandas', 'os', 'gc'] ['train_test_split']Dict:{'lightgbm': [], 'matplotlib': [], 'sklearn': [], 'seaborn': [], 'numpy': [], 'pandas': [], 'os,': [], 'gc': []} axis_0: 0, axis_1: 2
ashrae-training-lgbm-by-meter-type.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'astype', 'sum', 'memory_usage', 'sum', 'groupby', 'reset_index', 'query', 'groupby', 'astype', 'mean', 'astype', 'median', 'astype', 'min', 'astype', 'max', 'astype', 'std', 'map', 'map', 'map', 'map', 'map', 'head', 'head', 'sum', 'isna', 'apply', 'groupby', 'sum', 'isna', 'apply', 'groupby', 'interpolate', 'apply', 'groupby', 'sum', 'isna', 'groupby', 'rolling', 'astype', 'reset_index', 'mean', 'astype', 'reset_index', 'max', 'astype', 'reset_index', 'min', 'astype', 'reset_index', 'std', 'head', 'unique', 'map', 'head', 'merge', 'merge', 'update', 'sort_values', 'read_feather', 'read_feather', 'map', 'map', 'map', 'map', 'map', 'apply', 'groupby', 'interpolate', 'apply', 'groupby', 'sum', 'isna', 'read_feather', 'join', 'merge', 'merge', 'to_csv', 'head', 'hist'] ['gc', 'os', 'random', 'sys', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'plotly.offline', 'plotly.graph_objs', 'plotly.express', 'plotly.figure_factory', 'lightgbm', 'xgboost', 'catboost'] ['Path', 'tqdm_notebook', 'display', 'HTML', 'tools', 'subplots', 'preprocessing', 'KFold', 'is_datetime64_any_dtype', 'is_categorical_dtype']Dict:{'gc': [], 'os': [], 'pathlib': [], 'random': [], 'sys': [], 'tqdm': ['update'], 'numpy': ['mean', 'median', 'max', 'sum', 'min', 'unique', 'std'], 'pandas': [], 'matplotlib': ['hist'], 'seaborn': [], 'IPython': [], 'plotly': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'catboost': []} axis_0: 0, axis_1: 0
lightgbm-customer-transaction-prediction.py : ['read_csv', 'read_csv', 'head', 'head', 'value_counts', 'to_csv'] ['pandas', 'numpy', 'lightgbm', 'gc'] ['StratifiedKFold', 'metrics']Dict:{'pandas': ['read_csv', 'value_counts'], 'numpy': [], 'sklearn': [], 'lightgbm': [], 'gc': []} axis_0: 0, axis_1: 0
spaceship-titanic-higher-score-endeavor.py : ['get_dummies', 'concat', 'drop', 'head'] [] []Dict:{} axis_0: 0, axis_1: 0
top-20-house-prices-regression-techniques.py : ['read_csv', 'read_csv', 'set_index', 'sum', 'isnull', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'isnull', 'isnull', 'drop', 'sum', 'isnull', 'get_dummies', 'notnull', 'notnull', 'drop', 'sum', 'isnull', 'get_dummies', 'notnull', 'notnull', 'astype', 'astype', 'astype', 'value_counts', 'drop', 'sum', 'isnull', 'describe', 'isnull', 'drop', 'value_counts', 'where', 'where', 'drop', 'drop', 'where', 'where', 'where', 'where', 'where', 'where', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'drop', 'get_dummies', 'drop', 'isnull', 'isnull', 'astype', 'sort_values', 'drop', 'drop', 'isnull', 'isnull', 'drop', 'isnull', 'reset_index', 'to_csv'] ['warnings', 'pandas', 'numpy', 'datetime', 'matplotlib.pyplot', 'matplotlib', 'seaborn', 'math', 'statsmodels', 'matplotlib.pyplot', 'statsmodels.api'] ['confusion_matrix', 'LinearRegression', 'RandomForestRegressor', 'skew', 'stats', 'DecisionTreeRegressor', 'RandomForestRegressor', 'RandomForestClassifier', 'XGBClassifier', 'XGBRegressor', 'rmsle', 'norm', 'train_test_split', 'XGBRegressor', 'DecisionTreeRegressor', 'RandomForestRegressor', 'Lasso', 'Ridge', 'Lasso']Dict:{'warnings': [], 'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'notnull'], 'numpy': ['where', 'sum'], 'datetime': [], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'math': [], '': [], 'scipy': [], 'xgboost': [], 'statsmodels': [], 'ml_metrics': []} axis_0: 0, axis_1: 15
horse-health-a-beginner-friendly-guide.py : ['read_csv', 'read_csv', 'read_csv', 'drop_duplicates', 'concat', 'head', 'info', 'sort_values', 'sum', 'isna', 'select_dtypes', 'concat', 'assign', 'assign', 'boxplot', 'boxplot', 'select_dtypes', 'drop', 'concat', 'assign', 'assign', 'value_counts', 'value_counts', 'value_counts', 'corr', 'select_dtypes', 'crosstab', 'drop', 'drop', 'head', 'describe', 'sum', 'sort_values', 'drop', 'transform', 'array', 'mode', 'read_csv', 'to_csv'] ['pandas', 'numpy', 'scipy.stats', 'seaborn', 'optuna'] ['StandardScaler', 'QuantileTransformer', 'OrdinalEncoder', 'make_column_transformer', 'make_column_selector', 'train_test_split', 'cross_val_score', 'StackingClassifier', 'make_pipeline', 'SimpleImputer', 'f1_score', 'pyplot', 'XGBClassifier', 'LGBMClassifier', 'CatBoostClassifier']Dict:{'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'array', 'crosstab'], 'numpy': ['info', 'array', 'sum'], 'sklearn': [], 'scipy': ['mode', 'describe'], 'matplotlib': [], 'seaborn': ['boxplot'], 'optuna': [], '#': [], 'used': [], 'for': [], 'finding': [], 'good': [], 'hyperparameters': [], 'a': [], 'model': [], 'xgboost': [], 'lightgbm': [], 'catboost': []} axis_0: 2, axis_1: 2
simple-eda-and-baseline-with-lgbm-auc-0-94.py : ['read_csv', 'read_csv', 'head', 'value_counts', 'read_csv', 'sum', 'isnull', 'sum', 'isnull', 'nunique', 'transpose', 'describe', 'value_counts', 'select_dtypes', 'mean', 'head', 'copy', 'where', 'head', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc', 'math', 'warnings', 'time'] ['HTML', 'tqdm', 'KFold', 'StratifiedKFold', 'train_test_split', 'GridSearchCV', 'XGBClassifier', 'CatBoostClassifier', 'LGBMClassifier', 'roc_auc_score', 'Style', 'Fore']Dict:{'IPython': [], 'pandas': ['value_counts', 'read_csv', 'isnull'], 'numpy': ['transpose', 'mean', 'sum', 'where', 'copy'], 'matplotlib': [], 'seaborn': [], 'gc': [], 'tqdm': [], 'math': [], 'sklearn': [], 'warnings': [], 'xgboost': [], 'catboost': [], 'lightgbm': [], 'colorama': [], 'time': []} axis_0: 0, axis_1: 0
complete-eda-voting-lightgbm.py : ['copy', 'copy', 'describe', 'describe', 'sort_values', 'reset_index', 'mean', 'groupby', 'reset_index', 'count', 'groupby', 'reset_index', 'nunique', 'groupby', 'mean', 'ewm', 'to_datetime', 'to_datetime', 'hist', 'join', 'count', 'groupby', 'sum', 'sort_values', 'count', 'groupby', 'sort_values', 'count', 'groupby', 'sort_values', 'sub', 'sub', 'keys', 'sample', 'sort_values', 'sample', 'sort_values', 'hist', 'count', 'groupby', 'sort_values', 'hist', 'mean', 'groupby', 'head', 'hist', 'mean', 'groupby', 'reset_index', 'count', 'groupby', 'mean', 'groupby', 'hist', 'sample', 'count', 'groupby', 'nunique', 'sort_values', 'head', 'value_counts', 'quantile', 'clip', 'corr', 'astype', 'sum', 'isna', 'sort_values', 'fillna', 'reset_index', 'quantile', 'groupby', 'reset_index', 'quantile', 'groupby', 'reset_index', 'quantile', 'groupby', 'reset_index', 'quantile', 'groupby', 'reset_index', 'quantile', 'groupby', 'reset_index', 'quantile', 'groupby', 'replace', 'replace', 'describe', 'sort_values', 'sum', 'groupby', 'sort_values', 'value_counts', 'sort_values', 'sum', 'groupby', 'sort_values', 'reset_index', 'nunique', 'groupby', 'reset_index', 'count', 'groupby', 'head', 'corr', 'astype', 'sort_values', 'reset_index', 'count', 'groupby', 'mean', 'ewm', 'reset_index', 'mean', 'groupby', 'mean', 'ewm', 'reset_index', 'mean', 'groupby', 'mean', 'ewm', 'reset_index', 'mean', 'groupby', 'mean', 'ewm', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'count', 'groupby', 'merge', 'corr', 'astype', 'sort_values', 'sort_values', 'copy', 'copy', 'abs', 'sum', 'sum', 'drop', 'fillna', 'abs', 'isin', 'abs', 'quantile', 'clip', 'unique', 'drop', 'map', 'map', 'transform', 'groupby', 'map', 'mean', 'groupby', 'merge', 'map', 'fillna', 'drop', 'head', 'reset_index', 'drop', 'map', 'reset_index', 'sort_values', 'hist', 'hist', 'clip', 'sum', 'groupby', 'mean', 'std', 'sum', 'transform', 'hist', 'hist', 'hist', 'clip', 'sum', 'groupby', 'mean', 'std', 'abs', 'fillna', 'isin', 'isin', 'keys', 'transform', 'rename', 'fillna', 'drop', 'merge', 'hist'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'datetime', 'matplotlib.pyplot', 'matplotlib', 're', 'random', 'time', 'xgboost', 'lightgbm', 'lightgbm', 'pickle', 'warnings'] ['stats', 'train_test_split', 'GridSearchCV', 'RandomizedSearchCV', 'get_scorer', 'f1_score', 'LabelEncoder', 'accuracy_score', 'VotingClassifier', 'Parallel', 'delayed', 'clone', 'twosigmanews', 'StandardScaler', 'MinMaxScaler', 'train_test_split', 'randint', 'uniform']Dict:{'numpy': ['mean', 'quantile', 'abs', 'sum', 'unique', 'clip', 'isin', 'std', 'copy'], 'pandas': ['isna', 'value_counts', 'unique', 'merge', 'to_datetime'], 'matplotlib': [], 'seaborn': [], 'datetime': [], 're': ['sub'], 'scipy': [], 'random': ['sample'], 'time': [], 'xgboost': [], 'lightgbm': [], 'sklearn': [], 'pickle': [], 'warnings': [], 'kaggle': []} axis_0: 0, axis_1: 2
amex-eda-revealing-time-patterns-of-features.py : ['join', 'mean', 'groupby', 'assign', 'read_parquet', 'to_datetime', 'max', 'to_datetime', 'mean', 'groupby', 'assign', 'read_parquet', 'to_datetime', 'concat', 'concat', 'max', 'abs'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'gc'] ['acf', 'pacf', 'plot_acf', 'plot_pacf']Dict:{'numpy': ['mean', 'abs', 'max'], 'pandas': ['read_parquet', 'to_datetime', 'concat'], 'os': [], 'matplotlib': [], 'statsmodels': [], 'gc': []} axis_0: 0, axis_1: 1
statement-dates-to-use-or-not-to-use.py : ['read_parquet', 'read_parquet', 'astype', 'to_datetime', 'isin', 'sum', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'sort_values', 'concat', 'apply', 'sum', 'cumsum', 'sum', 'sum', 'sort_values', 'concat', 'apply', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'rename', 'read_parquet', 'to_datetime', 'reset_index', 'agg', 'groupby', 'read_csv', 'merge', 'count', 'groupby', 'mean', 'groupby', 'count', 'std', 'reset_index', 'drop', 'drop', 'diff', 'groupby', 'fillna', 'concat', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'agg', 'groupby', 'join', 'rename', 'isnull', 'isnull', 'drop', 'concat', 'read_csv', 'astype', 'set_index', 'merge', 'astype', 'reset_index', 'sort_index', 'copy', 'merge', 'mean', 'sort_values', 'sort_index', 'drop_duplicates', 'reset_index', 'set_index', 'concat', 'read_csv', 'astype', 'set_index', 'merge', 'reset_index', 'to_csv'] ['pandas', 'numpy', 'sklearn', 'matplotlib.pyplot', 'gc', 'os', 'seaborn', 'cupy', 'cudf', 'pandas', 'matplotlib.pyplot'] ['FeaturesEnricher', 'SearchKey', 'Dataset']Dict:{'pandas': ['read_csv', 'isnull', 'concat', 'read_parquet', 'merge', 'to_datetime'], 'sklearn': [], 'matplotlib': [], 'seaborn': [], 'cupy,': [], 'cudf': [], 'upgini': []} axis_0: 2, axis_1: 5
explained-singel-model-optiver.py : ['read_csv', 'dropna', 'reset_index', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'info', 'sum', 'memory_usage', 'info', 'info', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'eval', 'diff', 'groupby', 'diff', 'groupby', 'shift', 'groupby', 'pct_change', 'groupby', 'diff', 'groupby', 'replace', 'agg', 'agg', 'items', 'map', 'to_dict', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'median', 'groupby', 'median', 'groupby', 'std', 'groupby', 'std', 'groupby', 'max', 'groupby', 'min', 'groupby', 'join', 'mean', 'copy', 'join', 'mean', 'sum', 'sum', 'concat', 'reset_index', 'sort_values', 'tail', 'groupby', 'clip', 'mean', 'mean', 'round'] ['gc', 'os', 'time', 'warnings', 'joblib', 'lightgbm', 'numpy', 'pandas', 'cudf', 'numpy', 'lightgbm', 'gc', 'os', 'optiver2023'] ['combinations', 'simplefilter', 'mean_absolute_error', 'KFold', 'TimeSeriesSplit', 'njit', 'prange', 'mean_absolute_error']Dict:{'gc': [], '': [], '#': [], 'Garbage': [], 'collection': [], 'for': [], 'memory': [], 'management': [], 'os': ['replace'], 'Operating': [], 'system-related': [], 'functions': [], 'time': [], 'Time-related': [], 'warnings': [], 'Handling': [], 'itertools': [], 'joblib': [], 'For': [], 'saving': [], 'and': [], 'loading': [], 'models': [], 'lightgbm': [], 'numpy': ['mean', 'median', 'max', 'diff', 'sum', 'round', 'min', 'clip', 'info', 'std', 'copy'], 'pandas': ['concat', 'eval', 'read_csv'], 'sklearn': [], 'numba': []} axis_0: 1, axis_1: 2
amex-pytorch-gru-training.py : ['read_csv', 'astype', 'read_csv', 'read_parquet', 'read_csv', 'astype', 'apply', 'sort_index', 'drop_duplicates', 'isin', 'astype', 'to_datetime', 'astype', 'astype', 'astype', 'astype', 'fillna', 'map', 'astype', 'fillna', 'map', 'astype', 'fillna', 'astype', 'astype', 'agg', 'groupby', 'array', 'fillna', 'copy', 'astype', 'concat', 'merge', 'astype', 'fillna', 'reset_index', 'sort_values', 'drop', 'sum', 'read_csv', 'nunique', 'sort_index', 'drop_duplicates', 'to_parquet', 'astype', '__init__', 'squeeze', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'sum', 'transpose', 'array', 'where', 'cumsum', 'sum', 'sum', 'cumsum', 'sum', 'count', 'count', 'count', 'count', 'count', 'array', 'array', 'read_parquet', 'concat', 'read_parquet', 'concat', 'array', 'array', 'sum', 'mean', 'eval', 'sum', 'eval', 'sum', 'read_csv', 'read_parquet', 'read_csv', 'astype', 'apply', 'sort_index', 'drop_duplicates', 'array', 'sum', 'read_csv', 'sort_index', 'drop_duplicates', 'nunique', 'astype', 'read_csv', 'astype', 'apply', 'reset_index', 'set_index', 'array', 'to_csv', 'head', 'hist'] ['os', 'copy', 'gc', 'numpy', 'pandas', 'torch', 'torch.nn', 'torch.optim', 'matplotlib.pyplot', 'cupy', 'cudf', 'numpy', 'pandas', 'matplotlib.pyplot', 'gc'] ['MultiStepLR', 'roc_auc_score', 'average_precision_score']Dict:{'os,': [], 'copy,': [], 'gc': [], 'numpy': ['transpose', 'mean', 'squeeze', 'sum', 'where', 'isin', 'array', 'cumsum', 'copy'], 'pandas': ['read_csv', 'eval', 'concat', 'read_parquet', 'array', 'merge', 'to_datetime'], 'torch': ['__init__'], 'sklearn': ['__init__'], 'matplotlib': ['hist'], 'cupy,': [], 'cudf': [], '#': [], 'GPU': [], 'LIBRARIES': []} axis_0: 3, axis_1: 1
extensive-eda-fe-models-on-nfl-big-data-bowl.py : ['join', 'read_csv', 'head', 'sum', 'isnull', 'head', 'map', 'drop_duplicates', 'value_counts', 'value_counts', 'astype', 'drop_duplicates', 'reset_index', 'agg', 'groupby', 'drop_duplicates', 'value_counts', 'value_counts', 'sort_values', 'map', 'value_counts', 'value_counts', 'unique', 'map', 'agg', 'groupby', 'unstack', 'drop_duplicates', 'reset_index', 'agg', 'groupby', 'drop_duplicates', 'reset_index', 'agg', 'groupby', 'drop_duplicates', 'dropna', 'drop_duplicates', 'dropna', 'drop_duplicates', 'value_counts', 'value_counts', 'replace', 'join', 'map', 'map', 'map', 'map', 'map', 'transform', 'groupby', 'fillna', 'mode', 'transform', 'groupby', 'fillna', 'mode', 'transform', 'groupby', 'fillna', 'mode', '_get_numeric_data', 'unique'] ['numpy', 'pandas', 'matplotlib.pyplot', 'plotly.graph_objects', 'plotly.express', 'plotly.offline', 'plotly.figure_factory', 'matplotlib.pyplot', 'matplotlib.patches', 'os', 'plotly.offline', 'plotly.figure_factory', 'numpy', 'matplotlib.pyplot', 'plotly.offline'] ['iplot', 'tools', 'LabelEncoder', 'nflrush', 'add', 'WordCloud', 'STOPWORDS']Dict:{'numpy': ['sum', 'unique'], 'pandas': ['isnull', 'unique', 'read_csv', 'value_counts'], 'matplotlib': [], 'plotly': [], 'sklearn': ['transform'], 'os': ['replace'], 'kaggle': [], 'operator': [], 'wordcloud': []} axis_0: 0, axis_1: 0
ps-s3-e2-keras-nn.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'copy', 'select_dtypes', 'sum', 'isna', 'isna', 'isna', 'isna', 'isna', 'sum', 'isnull', 'concat', 'concat', 'get_dummies', 'drop', 'drop', 'reset_index', 'drop', 'round', 'round', 'array', 'array', 'clip', 'to_csv', 'hist'] ['numpy', 'pandas', 'os', 'tensorflow_addons', 'keras_tuner'] ['KNeighborsRegressor', 'StandardScaler', 'keras', 'layers', 'Model', 'Dense', 'Dropout', 'Input', 'Lambda', 'Concatenate', 'Add', 'BatchNormalization', 'LeakyReLU', 'KFold', 'StratifiedKFold', 'RepeatedStratifiedKFold', 'classification_report']Dict:{'numpy': ['sum', 'round', 'clip', 'array', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'get_dummies', 'array'], 'os': [], 'sklearn': [], 'tensorflow': [], 'tensorflow_addons': [], 'keras_tuner': []} axis_0: 4, axis_1: 4
predict-diabetes-with-python-starter-kernel.py : ['max', 'product', 'head', 'sum', 'transform', 'sum', 'corr', 'corr', 'drop', 'corr', 'corr', 'sort_values', 'concat', 'mean', 'std', 'drop', 'astype', 'to_csv', 'head'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'itertools', 'graphviz'] ['Imputer', 'train_test_split', 'cross_val_score', 'KFold', 'confusion_matrix', 'tree', 'DecisionTreeClassifier', 'SimpleImputer', 'read_csv']Dict:{'numpy': ['mean', 'product', 'max', 'sum', 'std'], 'pandas': [], 'matplotlib': [], 'seaborn': [], 'itertools': ['product'], 'graphviz': [], '': [], 'sklearn': []} axis_0: 0, axis_1: 2
super-simple-eda-and-feature-engineering.py : ['read_csv', 'read_csv', 'head', 'describe', 'info', 'corr', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'drop', 'max', 'sum', 'isnull', 'select_dtypes', 'select_dtypes', 'transform', 'corr', 'nlargest', 'drop', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn', 'gc'] ['LabelEncoder', 'train_test_split', 'mean_absolute_error', 'XGBRegressor']Dict:{'pandas': ['concat', 'read_csv', 'isnull'], 'numpy': ['info', 'sum', 'max'], 'matplotlib': [], 'seaborn': [], 'sklearn': [], 'xgboost': [], 'gc': []} axis_0: 0, axis_1: 1
pawpularity-eda-feature-engineering-baseline.py : ['read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'head', 'info', 'head', 'head', 'mean', 'corr', 'sort_values', 'drop', 'iterrows', 'sample', 'sample', 'sample', 'sample', 'apply', 'rename', 'concat', 'drop', 'head', 'apply', 'rename', 'concat', 'drop', 'head', 'head', 'head', 'drop', 'drop', 'transform', 'transform', 'sort_values', 'apply', 'head', 'array', 'array', 'squeeze', 'concat', 'head', 'drop', 'transform', 'array', 'squeeze', 'concat', 'head', 'drop', 'transform', 'hist', 'head', 'to_csv'] ['numpy', 'pandas', 'os', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'colorsys', 'cv2', 'tensorflow', 'warnings'] ['tqdm', 'qqplot', 'kstest', 'variance_inflation_factor', 'RandomForestRegressor', 'StandardScaler', 'MinMaxScaler', 'train_test_split', 'GridSearchCV', 'resize', 'KMeans', 'Counter', 'keras', 'Model', 'Sequential', 'BatchNormalization', 'AveragePooling2D', 'GlobalAveragePooling2D', 'MaxPooling2D', 'Conv2D', 'Activation', 'Dropout', 'Flatten', 'Input', 'Dense']Dict:{'numpy': ['mean', 'info', 'array', 'squeeze'], 'pandas': ['concat', 'array', 'read_csv'], 'os': ['rename'], 'tqdm': [], 'matplotlib': ['hist'], 'seaborn': [], 'statsmodels': [], 'scipy': [], 'sklearn': [], 'skimage': [], 'colorsys': [], 'collections': [], 'cv2': [], 'tensorflow': [], 'warnings': [], '=': [], 'best_rfr': []} axis_0: 1, axis_1: 11
ps3-e9-feature-engineering.py : ['read_csv', 'read_csv', 'read_csv', 'reset_index', 'drop', 'rename', 'head', 'select_dtypes', 'corr', 'concat', 'to_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'seaborn'] ['ensemble']Dict:{'pandas': ['concat', 'read_csv'], 'numpy': [], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 0
predict-ncaa-basketball-2018.py : ['read_csv', 'read_csv', 'read_csv', 'concat', 'head', 'pow', 'items', 'pop', 'iterrows', 'mean', 'array', 'array', 'iterrows', 'to_csv', 'read_csv', 'iterrows', 'to_csv'] ['pandas', 'numpy', 'math', 'csv', 'random'] ['cross_validation', 'linear_model', 'model_selection', 'make_scorer', 'accuracy_score', 'train_test_split', 'GridSearchCV']Dict:{'pandas': ['concat', 'array', 'read_csv'], 'numpy': ['mean', 'array'], 'math': ['pow'], 'csv': [], 'random': [], 'sklearn': []} axis_0: 0, axis_1: 0
analyzing-titanic-dataset.py : ['read_csv', 'fillna', 'median', 'describe', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'hist', 'hist', 'read_csv', 'read_csv', 'drop', 'reset_index', 'drop', 'map', 'map', 'transform', 'groupby', 'fillna', 'median', 'drop', 'get_dummies', 'concat', 'drop', 'fillna', 'mean', 'fillna', 'get_dummies', 'concat', 'drop', 'fillna', 'map', 'get_dummies', 'concat', 'drop', 'map', 'get_dummies', 'concat', 'drop', 'replace', 'replace', 'map', 'get_dummies', 'concat', 'drop', 'map', 'map', 'map', 'read_csv', 'astype', 'sum', 'max', 'product', 'to_csv', 'transform', 'transform', 'astype', 'to_csv'] ['pandas', 'numpy', 'matplotlib', 'itertools'] ['pyplot', 'linear_model', 'metrics', 'roc_curve', 'auc', 'confusion_matrix', 'classification_report', 'ExtraTreesClassifier', 'SelectFromModel', 'make_pipeline', 'RandomForestClassifier', 'SelectKBest', 'StratifiedKFold', 'GridSearchCV']Dict:{'pandas': ['concat', 'get_dummies', 'read_csv', 'value_counts'], 'numpy': ['mean', 'median', 'product', 'max', 'sum'], 'matplotlib': [], 'sklearn': []} axis_0: 0, axis_1: 13
spring-2021-cx-kaggle-final-project.py : ['read_csv', 'read_csv', 'read_csv', 'read_csv', 'reset_index', 'concat', 'sum', 'isna', 'to_numpy', 'to_numpy', 'to_csv'] ['numpy', 'pandas'] ['PCA', 'mean_absolute_error', 'RandomForestClassifier']Dict:{'numpy': ['sum'], 'pandas': ['isna', 'concat', 'read_csv'], 'sklearn': []} axis_0: 0, axis_1: 0
intro-to-automl.py : ['read_csv', 'to_csv', 'read_csv', 'head'] ['pandas'] ['AutoMLTablesWrapper']Dict:{'pandas': ['read_csv'], 'automl_tables_wrapper': []} axis_0: 0, axis_1: 0
linear-models-from-zero-to-hero-price-prediction.py : ['read_csv', 'read_csv', 'head', 'boxplot', 'skew', 'select_dtypes', 'select_dtypes', 'drop', 'drop', 'corr', 'sort_values', 'corr', 'drop', 'drop', 'select_dtypes', 'drop', 'drop', 'drop', 'drop', 'astype', 'astype', 'head', 'any', 'isna', 'isnull', 'value_counts', 'value_counts', 'select_dtypes', 'drop', 'drop', 'describe', 'drop', 'drop', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'apply', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'concat', 'concat', 'sort_values', 'apply', 'skew', 'copy', 'transform', 'transform', 'transform', 'transform', 'mode', 'fillna', 'fillna', 'fillna', 'get_dummies', 'get_dummies', 'get_dummies', 'align', 'align', 'fillna', 'fillna', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'reset_index', 'concat', 'concat', 'concat', 'copy', 'copy', 'copy', 'sort_values', 'concat', 'head', 'tail', 'sort_values', 'concat', 'head', 'tail'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'scipy', 'matplotlib.gridspec', 'warnings', 'matplotlib.style'] ['r2_score', 'stats', 'StandardScaler', 'RobustScaler', 'mean_squared_error', 'mean_absolute_error', 'SimpleImputer', 'train_test_split', 'KFold', 'cross_val_score', 'cross_validate', 'LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'OneHotEncoder', 'LabelEncoder', 'GridSearchCV', 'boxcox1p', 'boxcox_normmax']Dict:{'numpy': ['any', 'copy'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies'], 'matplotlib': [], 'sklearn': ['transform'], 'seaborn': ['boxplot'], 'scipy': [], 'warnings': []} axis_0: 0, axis_1: 7
eda-fe-tabnet-weights-and-biases.py : ['update', 'read_csv', 'read_csv', 'read_csv', 'isna', 'describe', 'to_numpy', 'to_numpy', 'boxplot', 'corr', 'cumsum', 'groupby', 'cumsum', 'groupby', 'shift', 'fillna', 'shift', 'fillna', 'cumsum', 'groupby', 'cumsum', 'groupby', 'to_numpy', 'to_numpy', 'to_numpy'] ['os', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'wandb', 'warnings'] ['stats', 'TabNetRegressor', 'KFold', 'UserSecretsClient']Dict:{'os': [], 'gc': [], 'numpy': ['cumsum'], '': [], 'pandas': ['isna', 'read_csv'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'scipy': ['describe'], 'wandb': [], 'pytorch_tabnet': [], 'sklearn': [], 'warnings': []} axis_0: 0, axis_1: 0
hyperparameter-tuning-with-optuna-and-gridsearch.py : ['read_csv', 'read_csv', 'drop', 'drop', 'drop', 'fillna', 'transform', 'groupby', 'replace', 'replace', 'replace', 'where', 'where', 'where', 'where', 'replace', 'where', 'where', 'replace', 'where', 'where', 'replace', 'value_counts', 'fillna', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'replace', 'value_counts', 'test', 'drop', 'drop', 'test', 'corr', 'concat', 'sort_values', 'nunique', 'where', 'where', 'test', 'corr', 'concat', 'to_dict', 'sort_values', 'items', 'drop', 'drop', 'replace', 'concat', 'test', 'concat', 'isin', 'get_dummies', 'get_dummies', 'test', 'value_counts', 'drop', 'test', 'drop', 'drop', 'test', 'dropna', 'test', 'corr', 'concat', 'to_dict', 'sort_values', 'items', 'drop', 'drop', 'copy', 'copy', 'copy', 'copy', 'transform', 'copy', 'test', 'transform', 'copy', 'test', 'corr', 'concat', 'sort_values', 'nlargest', 'round', 'round', 'round', 'mean', 'round', 'mean', 'round', 'round', 'mean', 'mean', 'mean', 'abs', 'items', 'boxplot', 'insert', 'to_csv', 'read_csv'] ['pandas', 'numpy', 'matplotlib.pyplot', 'optuna'] ['PowerTransformer', 'MinMaxScaler', 'Pipeline', 'ColumnTransformer', 'mean_squared_error', 'GridSearchCV', 'train_test_split', 'RepeatedKFold', 'train_test_split', 'KFold', 'cross_val_score', 'RandomizedSearchCV', 'RandomForestRegressor', 'GradientBoostingRegressor', 'ExtraTreesRegressor', 'StackingRegressor', 'LinearRegression', 'Lasso', 'Ridge', 'ElasticNet', 'SVR', 'XGBRegressor', 'BaseEstimator', 'TransformerMixin', 'mean_squared_error', 'simplefilter', 'ConvergenceWarning', 'partial']Dict:{'pandas': ['read_csv', 'concat', 'value_counts', 'get_dummies', 'test'], 'numpy': ['mean', 'abs', 'where', 'round', 'test', 'isin', 'insert', 'copy'], 'matplotlib': ['boxplot'], 'sklearn': [], 'xgboost': [], 'warnings': [], 'optuna': [], 'functools': []} axis_0: 0, axis_1: 17
simple-feature-engineering-xd.py : ['sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'to_datetime', 'sub', 'drop', 'items', 'items', 'read_csv', 'map', 'apply', 'drop', 'items', 'nunique', 'replace', 'items', 'nunique', 'sum', 'isnull', 'value_counts', 'head', 'sort_values', 'value_counts', 'keys', 'map', 'map', 'map', 'map', 'map', 'map', 'apply', 'apply', 'map', 'map', 'apply', 'apply', 'map', 'map', 'head', 'replace', 'astype', 'replace', 'astype', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'replace', 'astype', 'apply', 'apply', 'astype', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'replace', 'astype', 'apply', 'apply', 'astype', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'astype', 'apply', 'isin', 'isin', 'isin', 'isin', 'astype', 'apply', 'astype', 'apply', 'astype', 'astype', 'apply', 'apply', 'astype', 'astype', 'cumsum', 'value_counts', 'isin', 'isin', 'isin', 'isin', 'isin', 'isin', 'reset_index', 'value_counts', 'reset_index', 'set_index', 'max', 'fillna', 'to_dict', 'astype', 'map', 'get', 'astype', 'map', 'get', 'drop', 'drop', 'astype', 'astype', 'cumsum', 'value_counts', 'isin', 'isin', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'apply', 'apply', 'astype', 'astype', 'apply', 'apply', 'astype', 'astype', 'astype', 'astype', 'apply', 'apply', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'head', 'nunique', 'nunique', 'drop', 'drop', 'drop', 'drop', 'pop', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'rename', 'head', 'sort_values', 'to_csv', 'read_csv', 'to_csv', 'to_csv', 'to_csv'] ['numpy', 'pandas', 'os', 'seaborn', 'matplotlib.pyplot', 'lightgbm', 'time', 'datetime', 'gc', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'warnings', 'os', 're', 'numpy', 'joblib'] ['LabelEncoder', 'StratifiedKFold', 'KFold', 'TimeSeriesSplit', 'mean_squared_error', 'roc_auc_score', 'log_loss', 'LogisticRegression', 'LogisticRegressionCV', 'CatBoostRegressor', 'tqdm', 'OrderedDict', 'jit', 'tqdm_notebook']Dict:{'numpy': ['mean', 'max', 'sum', 'min', 'isin', 'std', 'cumsum'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'to_datetime'], 'os': ['rename', 'replace'], 'seaborn': [], 'matplotlib': ['get'], 'lightgbm': [], 'time': [], 'datetime': [], 'sklearn': [], 'gc': [], 'catboost': [], 'tqdm': [], 'plotly': [], 'warnings': [], 'collections': ['items', 'keys', 'pop', 'get'], 'numba': [], 'joblib': []} axis_0: 1, axis_1: 8
rsna-2023-atd-in-depth-analysis-and-eda.py : ['read_csv', 'head', 'info', 'nunique', 'sum', 'duplicated', 'sum', 'isnull', 'read_csv', 'head', 'info', 'nunique', 'sum', 'duplicated', 'sum', 'isnull', 'idxmax', 'idxmax', 'idxmax', 'idxmax', 'idxmax', 'head', 'drop', 'head', 'replace', 'replace', 'replace', 'replace', 'replace', 'head', 'read_csv', 'head', 'info', 'nunique', 'sum', 'duplicated', 'sum', 'isnull', 'read_parquet', 'head', 'info', 'nunique', 'sum', 'duplicated', 'sum', 'isnull', 'map', 'map', 'map', 'abs', 'map', 'corr', 'unique', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get', 'get'] ['warnings', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os', 'pydicom', 'plotly.express', 'nibabel'] ['get_testdata_files', 'pprint', 'interact']Dict:{'warnings': [], 'numpy': ['info', 'abs', 'sum', 'unique'], 'pandas': ['read_parquet', 'unique', 'read_csv', 'isnull'], 'matplotlib': ['get'], 'seaborn': [], 'os': ['replace'], 'pydicom': [], 'plotly': [], 'pprint': [], 'nibabel': [], 'ipywidgets': []} axis_0: 0, axis_1: 0
tps-dec-eda-resnet.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'head', 'describe', 'reset_index', 'var', 'sort_values', 'corr', 'reset_index', 'corrwith', 'sort_values', 'sort_index', 'value_counts', 'head', 'describe', 'mean', 'mean', 'mean', 'mean', 'std', 'std', 'std', 'std', 'drop', 'drop', 'copy', 'drop', 'copy', 'reset_index', 'value_counts', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'skew', 'sum', 'transform', 'mean', 'to_csv', 'sort_index', 'value_counts'] ['numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'gc', 'tensorflow', 'tensorflow_addons', 'tensorflow.keras.backend', 'warnings'] ['Pipeline', 'StratifiedKFold', 'accuracy_score', 'LabelEncoder', 'RobustScaler', 'MinMaxScaler', 'StandardScaler', 'keras', 'layers', 'to_categorical', 'plot_model', 'callbacks', 'Dense', 'Dropout', 'Input', 'InputLayer', 'Flatten', 'set_seed']Dict:{'numpy': ['mean', 'max', 'var', 'sum', 'min', 'std', 'copy'], 'pandas': ['read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'random': [], 'os': [], 'gc': [], 'sklearn': [], 'tensorflow': [], 'tensorflow_addons': [], 'warnings': []} axis_0: 4, axis_1: 14
tps-oct-22-continue-training-method-lightgbm.py : ['drop', 'drop', 'read_feather', 'read_csv', 'read_csv', 'head', 'sum', 'sum', 'isna', 'sum', 'sum', 'isna', 'sum', 'isnull', 'sum', 'isnull', 'isna', 'sort_values', 'mean', 'isna', 'sum', 'duplicated', 'drop', 'sum', 'duplicated', 'sort_values', 'nunique', 'select_dtypes', 'hist', 'mode', 'eq', 'sort_values', 'mean', 'head', 'corr', 'drop', 'where', 'abs', 'where', 'abs', 'where', 'abs', 'read_feather', 'astype', 'astype', 'read_csv', 'read_csv', 'to_csv', 'head'] ['pandas', 'numpy', 'gc', 'lightgbm', 'matplotlib.pyplot', 'seaborn', 'warnings', 'shap'] ['LGBMClassifier', 'early_stopping', 'log_evaluation', 'train_test_split']Dict:{'pandas': ['isna', 'read_feather', 'read_csv', 'isnull'], 'numpy': ['where', 'abs', 'sum', 'mean'], 'gc': [], 'lightgbm': [], 'sklearn': [], 'matplotlib': ['hist'], 'seaborn': [], 'warnings': [], 'shap': []} axis_0: 0, axis_1: 4
titanic-modeling-with-logistic-regression.py : ['read_csv', 'read_csv', 'head', 'head', 'copy', 'copy', 'drop', 'drop', 'head', 'head', 'sum', 'isna', 'sum', 'isna', 'value_counts', 'copy', 'copy', 'fillna', 'fillna', 'median', 'fillna', 'median', 'fillna', 'mean', 'sum', 'isna', 'sum', 'isna', 'sum', 'duplicated', 'drop_duplicates', 'sum', 'duplicated', 'head', 'boxplot', 'corr', 'concat', 'astype', 'get_dummies', 'head', 'head', 'head', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'mean', 'std', 'var', 'var', 'drop', 'mean', 'mean', 'read_csv', 'head', 'astype', 'head', 'to_csv'] ['warnings', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot'] ['train_test_split', 'LogisticRegression', 'cross_val_score']Dict:{'warnings': [], 'numpy': ['mean', 'median', 'var', 'sum', 'std', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'get_dummies'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot'], 'sklearn': []} axis_0: 1, axis_1: 0
covax-gru-lstm.py : ['transpose', 'array', 'applymap', 'array', 'array', 'array', 'read_json', 'read_json', 'copy', 'copy', 'copy', 'copy', 'copy', 'pop', 'concat', 'head', 'head', 'sum', 'max', 'max', 'sum', 'read_csv', 'head', 'copy', 'isin', 'merge', 'map', 'to_dict', 'set_index', 'array', 'copy', 'query', 'copy', 'query', 'transpose', 'array', 'transpose', 'array', 'reset_index', 'mean', 'groupby', 'concat', 'reset_index', 'mean', 'groupby', 'concat', 'to_csv', 'read_json', 'unique', 'merge', 'mean', 'mean', 'mean', 'mean'] ['pandas', 'numpy', 'json', 'tensorflow.keras.layers', 'keras.backend', 'tensorflow', 'plotly.express', 'os'] ['StratifiedKFold', 'KFold', 'GroupKFold', 'KMeans', 'Counter', 'Counter']Dict:{'pandas': ['read_csv', 'read_json', 'concat', 'unique', 'array', 'merge'], 'numpy': ['transpose', 'mean', 'max', 'sum', 'unique', 'isin', 'array', 'copy'], 'json': [], 'tensorflow': ['transpose', 'unique', 'concat'], 'keras': ['transpose', 'sum', 'max', 'mean'], 'plotly': [], 'sklearn': [], 'os': [], 'collections': []} axis_0: 1, axis_1: 5
tps-nov-2021-nn-2.py : ['read_csv', 'read_csv', 'drop', 'drop', 'sort_values', 'sort_values', 'copy', 'skew', 'skew', 'median', 'median', 'var', 'var', 'mean', 'mean', 'std', 'std', 'median', 'median', 'skew', 'skew', 'max', 'max', 'var', 'var', 'copy', 'copy', 'skew', 'skew', 'copy', 'transform', 'transform', 'concat', 'update', 'mean', 'std', 'nunique', 'min', 'read_csv', 'mean', 'to_csv', 'head'] ['os', 'random', 'numpy', 'pandas', 'matplotlib.pyplot', 'tensorflow'] ['roc_auc_score', 'make_pipeline', 'make_column_transformer', 'StratifiedKFold', 'mutual_info_classif', 'StandardScaler', 'MinMaxScaler', 'keras', 'layers', 'callbacks']Dict:{'os': [], 'random': [], 'numpy': ['mean', 'median', 'max', 'var', 'min', 'std', 'copy'], 'pandas': ['concat', 'read_csv'], 'matplotlib': [], 'sklearn': ['transform'], 'tensorflow': []} axis_0: 0, axis_1: 16
how-to-start-with-kaggle-kaggle-meetup-warsaw.py : ['head', 'head', 'head', 'head', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'dropna', 'unique', 'unique', 'unique', 'unique', 'factorize', 'factorize', 'agg', 'groupby', 'agg', 'groupby', 'head', 'join', 'set_index', 'join', 'agg', 'groupby', 'agg', 'groupby', 'join', 'set_index', 'join', 'join', 'set_index', 'join', 'drop', 'copy', 'drop', 'drop', 'all', 'sum', 'isnull', 'sum', 'isnull', 'mean', 'to_csv', 'head'] ['gc', 'glob', 'os', 'time', 'matplotlib.pyplot', 'numpy', 'pandas', 'lightgbm'] ['mean_squared_error', 'KFold', 'StratifiedKFold']Dict:{'gc': [], 'glob': [], 'os': [], 'time': [], 'matplotlib': [], 'numpy': ['mean', 'sum', 'all', 'unique', 'copy'], 'pandas': ['factorize', 'unique', 'isnull'], 'lightgbm': [], 'sklearn': []} axis_0: 1, axis_1: 3
tps-apr-data-visualization-and-highlights.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'drop', 'drop', 'select_dtypes', 'select_dtypes', 'info', 'sort_values', 'sum', 'isna', 'abs', 'corr', 'bool', 'corrwith', 'sort_values', 'count', 'groupby', 'sort_values', 'count', 'groupby', 'drop', 'copy', 'abs', 'corr', 'bool', 'mask', 'round', 'to_numpy', 'unique', 'value_counts', 'query', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'concat', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'concat', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'concat', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'concat', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'concat', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'concat', 'concat', 'update', 'update', 'fillna', 'fillna', 'reset_index', 'value_counts', 'reset_index', 'value_counts', 'concat', 'query', 'query', 'head', 'fillna', 'to_dict', 'mean', 'groupby', 'dropna', 'mask', 'isna', 'map', 'sum', 'isna', 'to_dict', 'mean', 'groupby', 'dropna', 'mask', 'isna', 'map', 'sum', 'isna', 'map', 'apply', 'reset_index', 'concat', 'astype', 'astype', 'astype', 'to_csv'] ['numpy', 'pandas', 'os', 'plotly.express', 'plotly.graph_objects', 'plotly.figure_factory', 'matplotlib.pyplot', 'seaborn', 'math', 'numpy', 'pandas', 'torch'] ['make_subplots', 'Fore', 'ProfileReport', 'metrics', 'stats', 'tqdm', 'deepcopy', 'accuracy_score', 'f1_score', 'train_test_split', 'LabelEncoder', 'TabularAutoML', 'TabularUtilizedAutoML', 'DatetimeRole', 'Task', 'Profiler']Dict:{'numpy': ['mean', 'abs', 'sum', 'round', 'unique', 'info', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'value_counts', 'unique'], 'os': [], 'plotly': [], 'matplotlib': [], 'colorama': [], 'pandas_profiling': [], 'seaborn': [], 'sklearn': [], 'scipy': [], 'math': [], 'tqdm': ['update'], 'copy': [], 'torch': ['mean', 'abs', 'sum', 'concat', 'round', 'unique', 'bool'], 'lightautoml': []} axis_0: 8, axis_1: 1
data-science-for-beginners.py : ['read_csv', 'copy', 'read_csv', 'sample', 'sample', 'sum', 'isnull', 'sum', 'isnull', 'fillna', 'median', 'fillna', 'mode', 'fillna', 'median', 'drop', 'sum', 'isnull', 'qcut', 'cut', 'astype', 'value_counts', 'apply', 'value_counts', 'describe', 'get_dummies', 'head', 'sum', 'isnull', 'info', 'sum', 'isnull', 'info', 'mean', 'groupby', 'crosstab', 'boxplot', 'boxplot', 'boxplot', 'hist', 'hist', 'hist', 'boxplot', 'boxplot', 'map', 'map', 'max', 'map', 'hist', 'corr', 'mean', 'mean', 'mean', 'std', 'sort_values', 'iterrows', 'mean', 'mean', 'groupby', 'mean', 'groupby', 'iterrows', 'astype', 'sum', 'max', 'product', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'mean', 'mean', 'std', 'info', 'astype', 'to_csv', 'value_counts', 'sample'] ['sys', 'pandas', 'matplotlib', 'numpy', 'scipy', 'IPython', 'sklearn', 'random', 'time', 'warnings', 'matplotlib', 'matplotlib.pyplot', 'matplotlib.pylab', 'seaborn', 'itertools', 'graphviz'] ['display', 'svm', 'tree', 'linear_model', 'neighbors', 'naive_bayes', 'ensemble', 'discriminant_analysis', 'gaussian_process', 'XGBClassifier', 'OneHotEncoder', 'LabelEncoder', 'feature_selection', 'model_selection', 'metrics', 'check_output']Dict:{'sys': [], '': [], '#access': [], 'to': [], 'system': [], 'parameters': [], 'https://docs': [], 'pandas': ['read_csv', 'isnull', 'cut', 'value_counts', 'get_dummies', 'qcut', 'crosstab'], 'matplotlib': ['mean', 'median', 'boxplot', 'product', 'max', 'sum', 'sample', 'hist', 'info', 'std', 'copy'], '#collection': [], 'of': [], 'functions': [], 'for': [], 'scientific': [], 'and': [], 'publication-ready': [], 'visualization': [], 'numpy': ['mean', 'median', 'product', 'max', 'sum', 'info', 'std', 'copy'], 'scipy': [], 'IPython': [], 'sklearn': [], 'machine': [], 'learning': [], 'algorithms': [], 'random': ['sample'], '#generate': [], 'values': [], 'time': [], '#To': [], 'handle': [], 'warnings': [], '#ignore': [], 'xgboost': ['apply'], 'seaborn': ['boxplot'], 'subprocess': [], 'itertools': ['product', 'groupby'], 'graphviz': []} axis_0: 0, axis_1: 0
eda-feature-engineering-and-everything.py : ['head', 'unique', 'reset_index', 'quantile', 'groupby', 'reset_index', 'agg', 'groupby', 'mean', 'sort_values', 'astype', 'sort_values', 'abs', 'sum', 'sum', 'sum', 'sum', 'transform', 'groupby', 'transform', 'groupby', 'iterrows', 'abs', 'abs', 'iterrows', 'abs', 'abs', 'reset_index', 'agg', 'groupby', 'sort_values', 'astype', 'round', 'reset_index', 'quantile', 'groupby', 'reset_index', 'mean', 'groupby', 'reset_index', 'mean', 'groupby', 'head', 'join', 'value_counts', 'boxplot', 'head', 'value_counts', 'value_counts', 'head', 'value_counts', 'mean', 'map', 'map', 'apply', 'apply', 'transform', 'groupby', 'transform', 'groupby', 'unique', 'map', 'mean', 'groupby', 'merge', 'unique', 'map', 'dropna', 'drop', 'min', 'max', 'sort_values', 'isin', 'rename', 'fillna', 'drop', 'merge'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'datetime', 'lightgbm', 'plotly.offline', 'plotly.graph_objs', 'plotly.tools', 'lightgbm', 'time'] ['stats', 'hstack', 'csr_matrix', 'train_test_split', 'WordCloud', 'Counter', 'stopwords', 'ngrams', 'TfidfVectorizer', 'StandardScaler', 'XGBClassifier', 'model_selection', 'accuracy_score', 'twosigmanews']Dict:{'numpy': ['mean', 'quantile', 'max', 'abs', 'sum', 'round', 'min', 'unique', 'isin'], 'pandas': ['merge', 'unique', 'value_counts'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'datetime': [], 'lightgbm': [], 'scipy': ['mean', 'max', 'sum', 'min', 'astype'], 'sklearn': [], 'wordcloud': [], 'collections': [], 'nltk': [], 'plotly': [], 'xgboost': ['apply'], 'kaggle': [], 'time': []} axis_0: 3, axis_1: 2
hierarchical-clustering-for-uncovering-structure.py : ['read_csv', 'read_csv', 'corr', 'drop', 'transpose', 'corr', 'sort_index', 'sort_index', 'drop', 'sort_index', 'sort_index'] ['numpy', 'pandas', 'matplotlib.pyplot', 'scipy.cluster.hierarchy'] ['pyplot', 'linkage', 'dendrogram', 'fcluster', 'squareform']Dict:{'numpy': ['transpose'], 'pandas': ['read_csv'], 'matplotlib': [], 'scipy': []} axis_0: 0, axis_1: 1
predict-future-sales-with-4-models.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'describe', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'sum', 'sum', 'isnull', 'nunique', 'nunique', 'nunique', 'boxplot', 'boxplot', 'reset_index', 'sum', 'groupby', 'apply', 'reset_index', 'pivot_table', 'merge', 'fillna', 'head', 'drop', 'drop', 'head', 'head', 'clip', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'os'] ['WordCloud', 'STOPWORDS', 'WordCloud', 'STOPWORDS', 'WordCloud', 'STOPWORDS', 'train_test_split', 'LinearRegression', 'Lasso', 'Ridge', 'r2_score', 'LGBMRegressor']Dict:{'numpy': ['sum', 'clip'], 'pandas': ['merge', 'pivot_table', 'read_csv', 'isnull'], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'os': [], 'wordcloud': [], 'sklearn': [], 'lightgbm': []} axis_0: 0, axis_1: 0
tps-sep-22-eda-and-linear-regression-baseline.py : ['read_csv', 'copy', 'read_csv', 'head', 'head', 'set_index', 'rename', 'reset_index', 'value_counts', 'value_counts', 'reset_index', 'sort_values', 'set_index', 'count', 'groupby', 'min', 'max', 'min', 'max', 'reset_index', 'rename', 'sum', 'groupby', 'reset_index', 'rename', 'sum', 'groupby', 'unique', 'sum', 'groupby', 'sum', 'reset_index', 'sum', 'groupby', 'sum', 'groupby', 'copy', 'sum', 'groupby', 'sum', 'reset_index', 'sum', 'groupby', 'sum', 'groupby', 'copy', 'copy', 'reset_index', 'sum', 'groupby', 'pivot', 'apply', 'sum', 'reset_index', 'rename', 'stack', 'head', 'reset_index', 'sum', 'groupby', 'reset_index', 'rename', 'sum', 'groupby', 'reset_index', 'rename', 'sum', 'groupby', 'copy', 'apply', 'drop', 'reset_index', 'first', 'groupby', 'copy', 'apply', 'apply', 'apply', 'drop', 'get_dummies', 'head', 'head', 'drop', 'reset_index', 'concat', 'copy', 'drop', 'copy', 'merge', 'head', 'reset_index', 'concat', 'merge', 'head', 'copy', 'sum', 'groupby', 'sum', 'unique', 'round', 'drop', 'reset_index', 'concat', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['Ridge']Dict:{'numpy': ['stack', 'max', 'sum', 'round', 'min', 'unique', 'copy'], 'pandas': ['read_csv', 'concat', 'value_counts', 'get_dummies', 'unique', 'merge', 'pivot'], 'matplotlib': [], 'seaborn': [], 'sklearn': []} axis_0: 0, axis_1: 3
xgb-fraud-with-magic-0-9600.py : ['concat', 'to_dict', 'value_counts', 'map', 'astype', 'map', 'astype', 'concat', 'factorize', 'max', 'astype', 'astype', 'astype', 'astype', 'concat', 'rename', 'reset_index', 'agg', 'groupby', 'to_dict', 'astype', 'map', 'astype', 'map', 'fillna', 'fillna', 'astype', 'astype', 'astype', 'astype', 'concat', 'to_dict', 'agg', 'groupby', 'astype', 'map', 'astype', 'map', 'array', 'sort_values', 'apply', 'apply', 'hist', 'reset_index', 'to_csv', 'set_index', 'read_csv', 'to_csv', 'hist', 'astype', 'astype', 'astype', 'astype', 'array', 'sort_values', 'hist', 'reset_index', 'to_csv', 'set_index', 'read_csv', 'to_csv', 'hist', 'concat', 'rename', 'read_csv', 'merge', 'agg', 'groupby', 'map', 'rename', 'read_csv', 'merge', 'agg', 'groupby', 'map', 'to_csv'] ['numpy', 'pandas', 'os', 'gc', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'datetime'] ['GroupKFold', 'roc_auc_score']Dict:{'numpy': ['array', 'max'], 'sklearn': [], 'matplotlib': ['hist'], 'seaborn': [], 'xgboost': [], 'datetime': []} axis_0: 4, axis_1: 2
a-simple-tutorial-on-exploratory-data-analysis.py : ['read_csv', 'read_csv', 'describe', 'head', 'tail', 'select_dtypes', 'select_dtypes', 'sample', 'sample', 'skew', 'kurt', 'skew', 'kurt', 'hist', 'skew', 'hist', 'corr', 'sort_values', 'nlargest', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'concat', 'pivot_table', 'median', 'concat', 'boxplot', 'concat', 'boxplot', 'astype', 'any', 'isnull', 'fillna', 'boxplot', 'melt', 'map', 'concat', 'boxplot', 'concat', 'boxplot', 'median', 'map', 'boxplot', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'reset_index', 'sum', 'isnull', 'sort_values', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'count', 'isnull', 'concat', 'head', 'reset_index', 'sum', 'isnull', 'sort_values', 'fillna', 'mode', 'unique', 'fillna', 'mode', 'unique'] ['pandas', 'numpy', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'scipy.stats', 'missingno'] ['ensemble', 'tree', 'linear_model']Dict:{'pandas': ['read_csv', 'isnull', 'melt', 'pivot_table', 'concat', 'unique'], 'numpy': ['median', 'unique', 'sum', 'any'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'scipy': ['mode', 'describe', 'skew'], 'sklearn': [], 'missingno': []} axis_0: 2, axis_1: 6
brute-force-feature-engineering.py : ['to_json', 'sum', 'memory_usage', 'min', 'max', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'min', 'max', 'astype', 'max', 'apply', 'min', 'max', 'astype', 'min', 'max', 'astype', 'astype', 'sum', 'memory_usage', 'mean', 'groupby', 'abs', 'mean', 'map', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'concat', 'mean', 'std', 'sort_values', 'mean', 'groupby', 'isin', 'sort_values', 'join', 'read_csv', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'nunique', 'nunique', 'nunique', 'nunique', 'merge', 'drop', 'rename', 'apply', 'apply', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'transform', 'groupby', 'head', 'unique', 'unique', 'unique', 'hist', 'hist', 'transform', 'transform', 'copy', 'copy', 'to_csv', 'head', 'hist', 'unique', 'to_csv', 'head', 'hist'] ['numpy', 'pandas', 'os', 'matplotlib.pyplot', 'lightgbm', 'xgboost', 'time', 'datetime', 'gc', 'seaborn', 'warnings', 'json', 'altair', 'networkx', 'matplotlib.pyplot', 'os', 'time', 'datetime', 'json', 'gc', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'lightgbm', 'xgboost', 'altair'] ['tqdm_notebook', 'StandardScaler', 'NuSVR', 'SVR', 'mean_absolute_error', 'CatBoostRegressor', 'LabelEncoder', 'StratifiedKFold', 'KFold', 'RepeatedKFold', 'metrics', 'linear_model', 'HTML', 'jit', 'tqdm_notebook', 'CatBoostRegressor', 'CatBoostClassifier', 'metrics', 'product', 'v5', 'HTML']Dict:{'numpy': ['mean', 'max', 'abs', 'sum', 'min', 'unique', 'isin', 'std', 'copy'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'os': ['rename'], 'matplotlib': ['hist'], 'tqdm': [], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'time': [], 'datetime': [], 'catboost': [], 'gc': [], 'seaborn': [], 'warnings': [], 'IPython': [], 'json': [], 'altair': [], 'networkx': [], 'numba': [], 'itertools': []} axis_0: 2, axis_1: 3
titanic-simple-eda-for-beginners.py : ['join', 'read_csv', 'read_csv', 'head', 'info', 'describe', 'value_counts', 'dropna', 'head', 'drop', 'drop', 'head', 'unique', 'value_counts', 'replace', 'replace', 'replace', 'replace', 'value_counts', 'sort_values', 'mean', 'groupby', 'fillna', 'map', 'head', 'drop', 'head', 'map', 'head', 'sum', 'isnull', 'fillna', 'median', 'median', 'head', 'sum', 'isnull', 'head', 'head', 'drop', 'drop', 'head', 'value_counts', 'fillna', 'astype', 'map', 'head', 'corr', 'drop', 'read_csv', 'to_csv'] ['os', 'pandas', 'numpy', 'random', 'seaborn', 'matplotlib.pyplot', 'warnings'] ['LogisticRegression', 'train_test_split', 'accuracy_score', 'DecisionTreeClassifier', 'RandomForestClassifier']Dict:{'os': ['replace'], 'pandas': ['isnull', 'unique', 'read_csv', 'value_counts'], 'numpy': ['mean', 'median', 'sum', 'unique', 'info'], 'random': [], 'seaborn': [], 'matplotlib': [], 'warnings': [], 'sklearn': []} axis_0: 0, axis_1: 2
581-3-models-optimized-weights-165-features.py : ['unique', 'agg', 'sum', 'join', 'join', 'join', 'join', 'filter', 'agg', 'concat', 'apply', 'mean', 'apply', 'max', 'apply', 'std', 'apply', 'median', 'apply', 'drop', 'join', 'agg', 'sum', 'mean', 'std', 'median', 'min', 'max', 'quantile', 'join', 'agg', 'join', 'shift', 'filter', 'agg', 'max', 'median', 'mean', 'std', 'sum', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'count', 'filter', 'join', 'shift', 'filter', 'count', 'agg', 'mean', 'std', 'count', 'median', 'max', 'first', 'last', 'join', 'filter', 'count', 'agg', 'mean', 'std', 'median', 'max', 'first', 'last', 'join', 'quantile', 'quantile', 'apply', 'groupby', 'unique', 'merge', 'rename', 'apply', 'explode', 'apply', 'agg', 'groupby', 'join', 'reset_index', 'apply', 'explode', 'apply', 'replace', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'apply', 'explode', 'apply', 'apply', 'reset_index', 'concat', 'agg', 'groupby', 'agg', 'groupby', 'join', 'reset_index', 'drop', 'rename', 'rename', 'reset_index', 'agg', 'groupby', 'isin', 'merge', 'reset_index', 'agg', 'groupby', 'isin', 'reset_index', 'agg', 'groupby', 'merge', 'merge', 'merge', 'merge', 'merge', 'merge', 'read_csv', 'merge', 'drop', 'merge', 'merge', 'merge', 'merge', 'merge', 'drop', 'astype', 'reset_index', 'reset_index', 'drop', 'drop', 'rename', 'concat', 'concat', 'concat', 'sum', 'sum', 'sum', 'to_csv', 'mean', 'to_csv'] ['polars', 'pandas', 'numpy', 're', 'xgboost', 'warnings', 'numpy'] ['LGBMRegressor', 'CatBoostRegressor', 'StratifiedKFold', 'skew', 'kurtosis', 'mean_squared_error', 'defaultdict', 'mean_squared_error', 'minimize']Dict:{'polars': ['mean', 'median', 'quantile', 'read_csv', 'first', 'max', 'sum', 'last', 'concat', 'apply', 'min', 'count', 'std'], 'pandas': ['concat', 'merge', 'unique', 'read_csv'], 'numpy': ['mean', 'median', 'quantile', 'max', 'sum', 'min', 'unique', 'isin', 'std'], 're': [], 'lightgbm': [], 'catboost': [], 'xgboost': [], 'sklearn': [], 'scipy': [], 'warnings': [], 'collections': []} axis_0: 1, axis_1: 7
cb-lgbm-xgb-lazy-stack-approach.py : ['read_csv', 'read_csv', 'info', 'sum', 'isnull', 'drop', 'drop', 'sort_values', 'drop', 'drop', 'drop', 'drop', 'concat', 'drop', 'mean', 'to_csv', 'sort_values', 'drop', 'drop', 'drop', 'drop', 'concat', 'drop', 'mean', 'to_csv', 'sort_values', 'drop', 'drop', 'drop', 'drop', 'concat', 'drop', 'mean', 'to_csv', 'clip', 'to_csv', 'mean', 'to_csv'] ['pandas', 'numpy', 'optuna', 'matplotlib.pyplot', 'seaborn', 'eli5'] ['train_test_split', 'KFold', 'StratifiedKFold', 'log_loss', 'train_test_split', 'LabelEncoder', 'plot', 'plot_correlation', 'create_report', 'plot_missing', 'train_test_split', 'CatBoostClassifier', 'Pool', 'PermutationImportance', 'LGBMClassifier', 'XGBClassifier']Dict:{'pandas': ['concat', 'read_csv', 'isnull'], 'numpy': ['mean', 'info', 'sum', 'clip'], 'sklearn': [], 'optuna': [], 'matplotlib': [], 'seaborn': [], 'dataprep': [], 'catboost': [], 'eli5': [], 'lightgbm': [], 'xgboost': []} axis_0: 0, axis_1: 17
ncaa-march-madness-sabermetric-spin.py : ['read_csv', 'read_csv', 'head', 'read_csv', 'drop', 'apply', 'isin', 'unique', 'drop', 'drop', 'read_csv', 'head', 'mean', 'groupby', 'head', 'mean', 'groupby', 'rename', 'reset_index', 'count', 'groupby', 'rename', 'reset_index', 'count', 'groupby', 'count', 'groupby', 'fillna', 'rename', 'reset_index', 'sum', 'isna', 'count', 'groupby', 'fillna', 'rename', 'reset_index', 'reset_index', 'mean', 'groupby', 'fillna', 'rename', 'reset_index', 'mean', 'groupby', 'fillna', 'rename', 'rename', 'reset_index', 'count', 'groupby', 'rename', 'reset_index', 'count', 'groupby', 'reset_index', 'sort_values', 'drop_duplicates', 'concat', 'merge', 'merge', 'merge', 'merge', 'fillna', 'fillna', 'fillna', 'fillna', 'drop', 'read_csv', 'drop', 'read_csv', 'reset_index', 'drop', 'read_csv', 'unique', 'copy', 'iterrows', 'reset_index', 'unstack', 'copy', 'reset_index', 'head', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'sub', 'apply', 'apply', 'drop', 'rename', 'merge', 'drop', 'rename', 'merge', 'reset_index', 'mean', 'groupby', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'read_csv', 'read_csv', 'reset_index', 'mean', 'groupby', 'agg', 'groupby', 'merge', 'mean', 'head', 'mean', 'groupby', 'mean', 'groupby', 'drop', 'set_index', 'merge', 'reset_index', 'drop', 'set_index', 'merge', 'reset_index', 'multiply', 'multiply', 'merge', 'reset_index', 'reset_index', 'set_index', 'mul', 'mul', 'reset_index', 'fillna', 'fillna', 'set_index', 'fillna', 'concat', 'merge', 'merge', 'head', 'astype', 'astype', 'astype', 'merge', 'merge', 'head', 'copy', 'copy', 'rename', 'rename', 'concat', 'read_csv', 'read_csv', 'head', 'merge', 'read_csv', 'apply', 'apply', 'apply', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'apply', 'apply', 'drop', 'rename', 'merge', 'drop', 'rename', 'merge', 'rename', 'drop', 'merge', 'rename', 'drop', 'merge', 'head', 'head', 'merge', 'merge', 'head', 'astype', 'astype', 'astype', 'merge', 'merge', 'head', 'rename', 'head', 'astype', 'astype', 'head', 'astype', 'transform', 'transform', 'copy', 'astype', 'copy', 'astype', 'copy', 'astype', 'describe', 'describe', 'corr', 'copy', 'select_dtypes', 'factorize', 'sort_values', 'sort_values', 'unique', 'copy', 'copy', 'copy', 'mean', 'mean', 'copy', 'to_csv', 'mean', 'copy', 'apply', 'apply', 'apply', 'read_csv', 'merge', 'merge', 'to_csv'] ['os', 're', 'sklearn', 'numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'xgboost', 'optuna'] ['Counter', 'LGBMClassifier', 'plot_slice', 'CalibratedClassifierCV', '*', '*', '*', 'classification_report', 'log_loss', '*', 'KNeighborsClassifier', 'MinMaxScaler', 'skew', 'kurtosis', 'CategoricalDtype', 'mutual_info_classif']Dict:{'os': ['rename'], 're': ['sub'], 'sklearn': [], 'numpy': ['mean', 'sum', 'unique', 'isin', 'multiply', 'copy'], 'pandas': [], 'seaborn': [], 'matplotlib': [], 'xgboost': [], 'optuna': [], 'collections': ['copy'], 'lightgbm': [], 'scipy': []} axis_0: 4, axis_1: 22
enefit-generic-notebook.py : ['unique', 'reset_index', 'rename', 'rename', 'drop', 'join', 'rename', 'drop', 'join', 'drop', 'mean', 'mean', 'filter', 'drop', 'mean', 'mean', 'filter', 'drop', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'join', 'rename', 'rename', 'rename', 'rename', 'rename', 'rename', 'rename', 'concat', 'set_index', 'astype', 'mean', 'std', 'drop', 'mean', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'read_csv', 'join', 'drop', 'notnull', 'gt', 'info', 'drop', 'rename', 'unique', 'concat', 'unique', 'concat', 'unique', 'concat', 'clip'] ['os', 'gc', 'pickle', 'numpy', 'pandas', 'polars', 'lightgbm', 'optuna', 'enefit'] ['cross_val_score', 'cross_validate', 'mean_absolute_error', 'TransformedTargetRegressor', 'VotingRegressor']Dict:{'os': ['rename'], 'gc': [], 'pickle': [], 'numpy': ['mean', 'unique', 'clip', 'info', 'std'], 'pandas': ['notnull', 'concat', 'unique', 'read_csv'], 'polars': ['mean', 'concat', 'std', 'read_csv'], 'sklearn': [], 'lightgbm': [], 'optuna': [], 'enefit': []} axis_0: 0, axis_1: 1
regression-with-house-prices.py : ['read_csv', 'read_csv', 'head', 'info', 'nunique', 'describe', 'sum', 'isna', 'hist', 'corr', 'nlargest', 'boxplot', 'boxplot', 'boxplot', 'sort_values', 'drop', 'drop', 'corr', 'sort_values', 'corr', 'sort_values', 'gt', 'lt', 'hist', 'drop', 'sort_values', 'sum', 'isnull', 'sort_values', 'mean', 'isnull', 'concat', 'head', 'transform', 'transform', 'sum', 'isnull', 'sort_values', 'drop', 'head', 'fillna', 'fillna', 'transform', 'transform', 'transform', 'concat', 'head', 'to_csv'] ['pandas', 'matplotlib.pyplot', 'numpy', 'seaborn', 'lightgbm', 'warnings', 'xgboost', 'lightgbm'] ['stats', 'norm', 'train_test_split', 'RandomForestRegressor', 'GradientBoostingRegressor', 'AdaBoostRegressor', 'BaggingRegressor', 'KernelRidge', 'Ridge', 'RidgeCV', 'SVR', 'StackingCVRegressor', 'LGBMRegressor', 'XGBRegressor', 'KFold', 'cross_val_score', 'mean_squared_error', 'r2_score', 'train_test_split', 'GridSearchCV', 'GradientBoostingClassifier', 'roc_auc_score', 'Pipeline', 'StandardScaler', 'imputation', 'discretisation', 'encoding', 'SimpleImputer', 'OneHotEncoder', 'DecisionTreeRegressor', 'GradientBoostingRegressor', 'SVR', 'RandomForestRegressor', 'Lasso', 'make_pipeline', 'RobustScaler', 'accuracy_score', 'metrics']Dict:{'pandas': ['concat', 'isna', 'read_csv', 'isnull'], 'matplotlib': ['boxplot', 'hist'], 'numpy': ['mean', 'info', 'sum'], 'seaborn': ['boxplot'], 'scipy': ['mean'], 'sklearn': [], 'mlxtend': [], 'lightgbm': [], 'xgboost': [], 'feature_engine': [], 'warnings': []} axis_0: 0, axis_1: 3
10-step-eda-house-prices.py : ['read_csv', 'head', 'info', 'describe', 'select_dtypes', 'select_dtypes', 'unique', 'sum', 'isnull', 'fillna', 'mean', 'fillna', 'fillna', 'median', 'drop', 'select_dtypes', 'any', 'isnull', 'select_dtypes', 'mode', 'fillna', 'mean', 'isnull', 'drop', 'sum', 'isnull', 'dropna', 'duplicated', 'sum', 'drop_duplicates', 'hist', 'boxplot', 'boxplot', 'value_counts', 'value_counts', 'boxplot', 'corr', 'crosstab', 'corr', 'apply', 'select_dtypes', 'get_dummies', 'crosstab', 'boxplot', 'boxplot'] ['pandas', 'matplotlib.pyplot', 'seaborn', 'scipy.stats'] ['mstats', 'ttest_ind', 'MinMaxScaler', 'Axes3D', 'mstats']Dict:{'pandas': ['read_csv', 'isnull', 'value_counts', 'get_dummies', 'unique', 'crosstab'], 'matplotlib': ['boxplot', 'hist'], 'seaborn': ['boxplot'], 'scipy': ['mode', 'describe'], 'sklearn': [], 'mpl_toolkits': ['boxplot', 'hist']} axis_0: 0, axis_1: 2
boosting-creativity-towards-feature-engineering.py : ['read_csv', 'head', 'cumsum', 'insert', 'copy', 'quantile', 'quantile', 'max', 'min', 'astype', 'cut', 'sort_index', 'value_counts', 'sort_index', 'value_counts', 'array', 'abs', 'array', 'abs', 'abs', 'round', 'abs', 'round', 'round', 'sort_values', 'array', 'round', 'round', 'hist', 'round', 'sort_values'] ['numpy', 'pandas', 'lightgbm', 'os', 'sys', 'matplotlib.pyplot', 'seaborn', 'numpy', 'seaborn', 'matplotlib.pyplot'] ['MinMaxScaler', 'roc_auc_score', 'StratifiedKFold', 'norm', 'skewnorm', 'defaultdict', 'starmap', 'mlab', 'truncnorm', 'GaussianMixture']Dict:{'numpy': ['quantile', 'max', 'abs', 'round', 'min', 'array', 'insert', 'cumsum', 'copy'], 'pandas': ['array', 'cut', 'read_csv', 'value_counts'], 'lightgbm': [], 'sklearn': [], 'os': [], 'sys': [], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'collections': ['copy'], 'itertools': []} axis_0: 0, axis_1: 0
last-minute-forecasting.py : ['read_csv', 'head', 'info', 'sum', 'isnull', 'quantile', 'quantile', 'quantile', 'value_counts', 'unique', 'unique', 'sum', 'groupby', 'unstack', 'sum', 'groupby', 'copy', 'sum', 'groupby', 'sum', 'groupby', 'unique', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'sum', 'groupby', 'mean', 'groupby', 'isin', 'mean', 'groupby', 'map', 'sum', 'groupby', 'astype', 'isin', 'astype', 'eq', 'apply', 'apply', 'apply', 'apply', 'apply', 'fillna', 'astype', 'astype', 'astype', 'astype', 'astype', 'astype', 'array', 'astype', 'array', 'map', 'map', 'fillna', 'drop', 'info', 'drop', 'astype', 'sample', 'describe', 'sum', 'abs', 'abs', 'abs', 'round', 'round', 'round', 'read_csv', 'astype', 'isin', 'astype', 'eq', 'apply', 'apply', 'apply', 'apply', 'apply', 'fillna', 'astype', 'astype', 'astype', 'astype', 'astype', 'map', 'map', 'fillna', 'drop', 'transform', 'round', 'head', 'mean', 'groupby', 'sum', 'apply', 'head', 'read_csv', 'to_csv', 'head', 'read_csv', 'concat', 'sum', 'groupby', 'read_csv', 'concat', 'unstack', 'sum', 'groupby'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'optuna', 'shap', 'calendar', 'holidays'] ['OneHotEncoder', 'StandardScaler', 'make_column_transformer', 'make_column_selector', 'SimpleImputer', 'train_test_split', 'cross_val_score', 'make_pipeline', 'PCA', 'CatBoostRegressor', 'datetime']Dict:{'numpy': ['mean', 'quantile', 'abs', 'sum', 'round', 'unique', 'isin', 'info', 'array', 'copy'], 'pandas': ['read_csv', 'isnull', 'concat', 'value_counts', 'unique', 'array'], 'sklearn': ['transform'], 'matplotlib': [], 'seaborn': [], 'optuna': [], 'catboost': [], 'shap': [], 'datetime': [], 'calendar': [], 'holidays': []} axis_0: 0, axis_1: 1
feature-engineering-pipeline-optimized-lightgbm.py : ['mode', 'sum', 'diff', 'groupby', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'mean', 'agg', 'groupby', 'join', 'concat', 'head', 'diff', 'groupby', 'sum', 'mean', 'agg', 'groupby', 'join', 'concat', 'head', 'read_parquet', 'read_parquet', 'join', 'map', 'reset_index', 'concat', 'head', 'read_csv', 'unique', 'astype', 'astype', 'merge', 'astype', 'apply', 'drop', 'mean', 'mean', 'sum', 'mean', 'sort_values', 'read_csv', 'unique', 'astype', 'astype', 'merge', 'astype', 'apply', 'drop', 'assign', 'head', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'optuna', 'time', 'os', 'glob'] ['chi2_contingency', 'expected_freq', 'preprocessing', 'train_test_split', 'KFold', 'GridSearchCV', 'permutation_importance', 'mutual_info_classif', 'BorutaPy', 'LGBMRegressor', 'TPESampler', 'plot_contour', 'plot_optimization_history', 'plot_param_importances', 'plot_slice', 'display', 'Markdown', 'Parallel', 'delayed', 'tqdm']Dict:{'numpy': ['mean', 'diff', 'sum', 'unique'], 'pandas': ['read_csv', 'concat', 'read_parquet', 'unique', 'merge'], 'scipy': [], 'seaborn': [], 'matplotlib': [], 'sklearn': [], 'boruta': [], 'lightgbm': [], 'optuna': [], 'IPython': [], 'joblib': [], 'tqdm': [], 'time': [], 'os': [], 'glob': []} axis_0: 1, axis_1: 3
titanic-a-complete-beginner-s-guide.py : ['read_csv', 'read_csv', 'concat', 'tail', 'info', 'info', 'count', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'value_counts', 'isnull', 'notnull', 'corr', 'sum', 'mean', 'mean', 'mean', 'notnull', 'notnull', 'map', 'hist', 'map', 'hist', 'isnull', 'notnull', 'value_counts', 'mean', 'value_counts', 'mean', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'median', 'groupby', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'isnull', 'fillna', 'sum', 'isnull', 'sum', 'isnull', 'notnull', 'notnull', 'copy', 'isna', 'median', 'groupby', 'median', 'apply', 'groupby', 'fillna', 'median', 'fillna', 'info', 'notnull', 'notnull', 'notnull', 'notnull', 'copy', 'fillna', 'median', 'notnull', 'notnull', 'notnull', 'notnull', 'median', 'groupby', 'apply', 'groupby', 'fillna', 'median', 'info', 'items', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'unique', 'drop', 'drop', 'groupby', 'drop', 'drop', 'head', 'replace', 'replace', 'replace', 'head', 'value_counts', 'replace', 'replace', 'replace', 'replace', 'value_counts', 'value_counts', 'groupby', 'value_counts', 'replace', 'replace', 'replace', 'value_counts', 'sum', 'isnull', 'sum', 'isnull', 'value_counts', 'isnull', 'apply', 'astype', 'fillna', 'value_counts', 'apply', 'astype', 'fillna', 'value_counts', 'add_prefix', 'get_dummies', 'join', 'add_prefix', 'get_dummies', 'join', 'drop', 'drop', 'drop', 'transform', 'transform', 'div', 'sum', 'mean', 'std', 'mean', 'mean', 'std', 'std', 'mean', 'read_csv', 'astype', 'astype', 'to_csv', 'head'] ['numpy', 'scipy', 'matplotlib', 'matplotlib.cm', 'matplotlib.pyplot', 'pandas', 'seaborn', 'warnings', 'string', 'math', 'sys', 'sklearn', 'statsmodels.formula.api', 'scikitplot'] ['LabelEncoder', 'OneHotEncoder', 'InteractiveShell', 'Counter', 'make_pipeline', 'RandomForestClassifier', 'SelectKBest', 'StratifiedKFold', 'learning_curve', 'GridSearchCV', 'GradientBoostingClassifier', 'cross_val_score', 'LogisticRegression', 'LinearRegression', 'train_test_split', 'SVC', 'LinearSVC', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'GaussianNB', 'Perceptron', 'SGDClassifier', 'SelectFromModel', 'KFold', 'cross_val_score', 'confusion_matrix', 'LinearDiscriminantAnalysis', 'QuadraticDiscriminantAnalysis', 'roc_curve', 'auc', 'accuracy_score', 'mean_absolute_error', 'accuracy_score', 'StandardScaler', 'roc_curve', 'auc', 'precision_recall_curve', 'DecisionTreeClassifier', 'GridSearchCV', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'unique', 'info', 'std', 'copy'], 'scipy': [], 'matplotlib': ['hist'], 'pandas': ['isna', 'read_csv', 'isnull', 'concat', 'value_counts', 'get_dummies', 'unique', 'notnull'], 'seaborn': [], 'warnings': [], 'string': [], 'math': [], 'sys': [], 'sklearn': ['apply'], 'IPython': [], 'collections': ['items', 'copy'], 'statsmodels': [], 'scikitplot': []} axis_0: 3, axis_1: 9
lightgbm-2sigma.py : ['astype', 'astype', 'map', 'drop', 'drop', 'reset_index', 'aggregate', 'groupby', 'mean', 'merge', 'unique', 'astype', 'fillna', 'isin', 'fillna', 'isin', 'fillna', 'isin', 'fillna', 'isin', 'fillna', 'isin'] ['numpy', 'pandas', 'lightgbm', 'lightgbm'] ['twosigmanews']Dict:{'numpy': ['mean', 'isin', 'unique'], 'pandas': ['merge', 'unique'], 'lightgbm': [], 'kaggle': []} axis_0: 0, axis_1: 2
awesome-ml-frameworks-and-mnist-classification.py : ['add', 'add', 'add', 'add', 'add', 'add', 'add', 'add', 'astype', 'pad'] ['tensorflow', 'numpy', 'os', 'sys', 'matplotlib.pyplot', 'pandas', 'seaborn', 'cv2', 'IPython'] ['keras', 'Conv2D', 'MaxPooling2D', 'Dropout', 'Flatten', 'Dense', 'urllib']Dict:{'tensorflow': [], 'numpy': ['pad', 'add'], 'os': [], 'sys': [], 'matplotlib': [], 'pandas': [], 'seaborn': [], 'cv2': [], 'IPython': [], 'six': []} axis_0: 1, axis_1: 0
learn-ml-from-titanic-disaster.py : ['read_csv', 'read_csv', 'head', 'tail', 'head', 'tail', 'hist', 'hist', 'info', 'info', 'sum', 'isnull', 'isnull', 'boxplot', 'drop', 'drop', 'fillna', 'mean', 'groupby', 'get_dummies', 'drop', 'get_dummies', 'drop', 'join', 'join', 'drop', 'drop', 'head', 'head', 'fillna', 'median', 'astype', 'astype', 'mean', 'mean', 'std', 'std', 'mean', 'std', 'sum', 'isnull', 'mean', 'std', 'sum', 'isnull', 'hist', 'astype', 'dropna', 'astype', 'astype', 'hist', 'map', 'max', 'mean', 'groupby', 'drop', 'drop', 'mean', 'groupby', 'apply', 'apply', 'drop', 'drop', 'get_dummies', 'drop', 'get_dummies', 'drop', 'join', 'join', 'mean', 'groupby', 'drop', 'drop', 'get_dummies', 'drop', 'get_dummies', 'drop', 'join', 'join', 'drop', 'drop', 'head', 'head', 'describe', 'describe', 'drop', 'copy', 'drop', 'sort_values', 'to_csv'] ['numpy', 'pandas', 'seaborn', 'matplotlib.pyplot', 'os'] ['LogisticRegression', 'SVC', 'LinearSVC', 'RandomForestClassifier']Dict:{'numpy': ['mean', 'median', 'max', 'sum', 'info', 'std', 'copy'], 'pandas': ['get_dummies', 'read_csv', 'isnull'], 'seaborn': ['boxplot'], 'matplotlib': ['boxplot', 'hist'], 'sklearn': ['apply'], 'os': []} axis_0: 0, axis_1: 22
eda-feature-engineering-ensemble-titanic.py : ['join', 'read_csv', 'read_csv', 'read_csv', 'head', 'head', 'head', 'info', 'info', 'describe', 'describe', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'sum', 'isnull', 'sum', 'isnull', 'reset_index', 'concat', 'head', 'info', 'describe', 'sort_values', 'sum', 'isnull', 'sort_values', 'sum', 'isnull', 'apply', 'crosstab', 'sum', 'apply', 'crosstab', 'sum', 'apply', 'crosstab', 'sum', 'items', 'boxplot', 'map', 'sum', 'isnull', 'apply', 'crosstab', 'sum', 'apply', 'crosstab', 'sum', 'boxplot', 'skew', 'corr', 'get_dummies', 'head', 'head', 'nunique', 'unique', 'value_counts', 'replace', 'replace', 'replace', 'apply', 'crosstab', 'sum', 'get_dummies', 'head', 'get_dummies', 'head', 'fillna', 'mean', 'tail', 'sum', 'isnull', 'cut', 'value_counts', 'head', 'astype', 'head', 'get_dummies', 'head', 'head', 'value_counts', 'apply', 'crosstab', 'sum', 'map', 'apply', 'crosstab', 'sum', 'get_dummies', 'head', 'transform', 'groupby', 'value_counts', 'skew', 'map', 'head', 'skew', 'sum', 'isnull', 'sum', 'isnull', 'value_counts', 'copy', 'apply', 'isnull', 'astype', 'boxplot', 'mean', 'median', 'unique', 'drop', 'fillna', 'fillna', 'median', 'head', 'info', 'get_dummies', 'head', 'sum', 'isnull', 'mode', 'dropna', 'fillna', 'sum', 'isnull', 'get_dummies', 'head', 'head', 'rename', 'rename', 'rename', 'rename', 'rename', 'rename', 'rename', 'concat', 'head', 'info', 'drop', 'astype', 'head', 'drop', 'head', 'mean', 'std', 'sort_values', 'sort_values', 'mean', 'std', 'mean', 'std', 'head', 'concat', 'corr', 'concat', 'to_csv'] ['numpy', 'pandas', 'os', 'pandas', 'numpy', 'missingno', 'warnings', 'matplotlib.pyplot', 'seaborn'] ['Counter', 'process_time', 'confusion_matrix', 'LogisticRegression', 'KNeighborsClassifier', 'DecisionTreeClassifier', 'SVC', 'LinearDiscriminantAnalysis', 'MLPClassifier', 'StratifiedKFold', 'cross_val_score', 'GridSearchCV', 'learning_curve', 'RandomForestClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier', 'ExtraTreesClassifier', 'VotingClassifier']Dict:{'numpy': ['mean', 'median', 'sum', 'unique', 'info', 'std', 'copy'], 'pandas': ['read_csv', 'isnull', 'cut', 'concat', 'value_counts', 'get_dummies', 'unique', 'crosstab'], 'os': ['rename', 'replace'], 'missingno': [], 'collections': ['items', 'copy'], 'warnings': [], 'time': [], 'matplotlib': ['boxplot'], 'seaborn': ['boxplot'], 'sklearn': ['transform']} axis_0: 2, axis_1: 18
optiver-realized-volatility-prediction-eda.py : ['read_csv', 'read_csv', 'sum', 'memory_usage', 'sum', 'memory_usage', 'mean', 'mean', 'transform', 'groupby', 'transform', 'groupby', 'mean', 'median', 'std', 'min', 'quantile', 'quantile', 'quantile', 'max', 'skew', 'kurtosis', 'isnull', 'mean', 'median', 'mean', 'groupby', 'std', 'groupby', 'concat', 'sort_values', 'astype', 'astype', 'tail', 'sort_values', 'tail', 'sort_values', 'drop', 'astype', 'astype', 'head', 'sort_values', 'head', 'sort_values', 'drop', 'read_parquet', 'items', 'astype', 'sort_values', 'set_index', 'reindex', 'reset_index', 'unique', 'shift', 'groupby', 'transform', 'groupby', 'drop', 'to_dict', 'first', 'groupby', 'map', 'set_index', 'read_parquet', 'reset_index', 'isin', 'merge', 'sort_values', 'set_index', 'reindex', 'fillna', 'reset_index', 'items', 'astype', 'unique', 'shift', 'groupby', 'transform', 'groupby', 'drop', 'to_dict', 'first', 'groupby', 'map', 'set_index', 'diff', 'sum', 'unique', 'agg', 'groupby', 'map', 'agg', 'groupby', 'map', 'mean', 'median', 'std', 'min', 'max', 'skew', 'kurtosis', 'corr', 'transform', 'groupby', 'reset_index', 'first', 'groupby', 'drop', 'transform', 'groupby', 'reset_index', 'first', 'groupby', 'drop'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn'] ['tqdm', 'probplot', 'KMeans', 'PCA']Dict:{'tqdm': [], 'numpy': ['mean', 'median', 'quantile', 'max', 'sum', 'min', 'unique', 'isin', 'diff', 'std'], 'pandas': ['read_csv', 'isnull', 'concat', 'read_parquet', 'unique', 'merge'], 'matplotlib': [], 'seaborn': [], 'scipy': [], 'sklearn': ['transform']} axis_0: 0, axis_1: 1
tps-jan-2021-eda-models.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'head', 'sum', 'isnull', 'sum', 'isnull', 'describe', 'describe', 'update', 'update', 'concat', 'update', 'corr', 'corr', 'corr', 'corr', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'update', 'mean', 'mean', 'where'] ['os', 'joblib', 'numpy', 'pandas', 'matplotlib', 'matplotlib.pyplot', 'seaborn', 'tensorflow', 'optuna'] ['LinearRegression', 'Ridge', 'DecisionTreeRegressor', 'RandomForestRegressor', 'AdaBoostRegressor', 'StandardScaler', 'MinMaxScaler', 'mean_squared_error', 'cross_val_score', 'cross_val_predict', 'RandomizedSearchCV', 'KFold', 'LGBMRegressor', 'XGBRegressor', 'CatBoostRegressor', 'keras', 'layers', 'preprocessing']Dict:{'os': [], 'joblib': [], 'numpy': ['mean', 'where', 'sum'], 'pandas': ['concat', 'read_csv', 'isnull'], 'sklearn': [], 'lightgbm': [], 'xgboost': [], 'catboost': [], 'matplotlib': [], 'seaborn': [], 'tensorflow': [], 'optuna': []} axis_0: 1, axis_1: 0
kor-automated-feature-engineering-basics.py : ['reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'reset_index', 'sort_values', 'read_csv', 'sample', 'head', 'head', 'head', 'head', 'head', 'head', 'read_csv', 'head', 'sort_values', 'head', 'tail', 'dropna', 'read_csv', 'head', 'reset_index', 'head', 'sort_values', 'read_csv', 'sort_values', 'head', 'get_dummies', 'reset_index', 'sort_values', 'sum', 'head', 'head', 'get_dummies', 'get_dummies', 'align', 'drop', 'drop', 'drop', 'get_dummies', 'get_dummies', 'align', 'array', 'astype', 'transform', 'array', 'astype', 'array', 'array', 'mean'] ['pandas', 'numpy', 'featuretools', 'matplotlib.pyplot', 'seaborn', 'warnings', 'matplotlib.pyplot'] ['selection']Dict:{'pandas': ['get_dummies', 'array', 'read_csv'], 'numpy': ['mean', 'array', 'sum'], 'featuretools': [], 'matplotlib': [], 'seaborn': [], 'warnings': []} axis_0: 0, axis_1: 2
ps-s3e14-simple-eda-ensemble.py : ['drop', 'read_csv', 'drop', 'read_csv', 'drop', 'read_csv', 'any', 'any', 'isna', 'any', 'any', 'isna', 'any', 'any', 'isna', 'reset_index', 'concat', 'head', 'corr', 'corr', 'copy', 'concat', 'reset_index', 'drop', 'reset_index', 'reset_index', 'transform', 'head', 'mean', 'mean', 'mean', 'keys', 'copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'array', 'array', 'array', 'array', 'unique', 'items', 'keys', 'mean', 'std', 'mean', 'std', 'keys', 'read_csv', 'to_csv'] ['numpy', 'pandas', 'plotly.express', 'matplotlib.pyplot', 'seaborn', 'random', 'os', 'random', 'gc', 'seaborn', 'optuna', 'xgboost', 'lightgbm', 'xgboost', 'lightgbm', 'warnings'] ['deepcopy', 'partial', 'combinations', 'BaseEstimator', 'TransformerMixin', 'train_test_split', 'StratifiedKFold', 'KFold', 'roc_auc_score', 'accuracy_score', 'log_loss', 'StandardScaler', 'OneHotEncoder', 'OrdinalEncoder', 'CountEncoder', 'CatBoostEncoder', 'RandomUnderSampler', 'StandardScaler', 'MinMaxScaler', 'PCA', 'NMF', 'UMAP', 'TSNE', 'mean_absolute_error', 'defaultdict', 'cross_validate', 'StackingRegressor', 'List', 'LinearRegression', 'Ridge', 'Lasso', 'ElasticNet', 'SGDRegressor', 'LassoCV', 'PassiveAggressiveRegressor', 'ARDRegression', 'RidgeCV', 'ElasticNetCV', 'TheilSenRegressor', 'RANSACRegressor', 'HuberRegressor', 'MLPRegressor', 'SVR', 'LinearSVR', 'KNeighborsRegressor', 'GaussianProcessRegressor', 'DecisionTreeRegressor', 'enable_hist_gradient_boosting', 'RandomForestRegressor', 'AdaBoostRegressor', 'ExtraTreesRegressor', 'HistGradientBoostingRegressor', 'BaggingRegressor', 'GradientBoostingRegressor', 'VotingRegressor', 'StackingRegressor', 'PolynomialFeatures', 'Pipeline', 'PLSRegression', 'CatBoost', 'CatBoostRegressor', 'CatBoostClassifier', 'Pool']Dict:{'numpy': ['mean', 'std', 'any', 'unique', 'array', 'copy'], 'pandas': ['isna', 'read_csv', 'concat', 'unique', 'array'], 'plotly': [], 'matplotlib': [], 'seaborn': [], 'random': [], 'os': [], 'copy': [], 'functools': [], 'itertools': [], 'gc': [], 'sklearn': [], 'category_encoders': [], 'imblearn': [], 'umap': [], 'collections': ['items', 'keys', 'copy'], 'typing': ['copy'], 'optuna': [], 'xgboost': [], 'lightgbm': [], 'catboost': [], 'warnings': []} axis_0: 3, axis_1: 3
ps3e12-simple-eda-fe-and-model-for-beginners.py : ['read_csv', 'read_csv', 'read_csv', 'drop', 'drop', 'head', 'head', 'head', 'describe', 'nunique', 'sum', 'isna', 'describe', 'nunique', 'sum', 'isna', 'describe', 'nunique', 'sum', 'isna', 'value_counts', 'duplicated', 'count', 'value_counts', 'duplicated', 'count', 'value_counts', 'duplicated', 'count', 'value_counts', 'value_counts', 'corr', 'drop', 'concat', 'value_counts', 'duplicated', 'count', 'drop_duplicates', 'copy', 'pop', 'mean', 'mean', 'copy', 'drop', 'drop', 'to_csv'] ['numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'xgboost', 'statsmodels.api'] ['RepeatedStratifiedKFold', 'roc_auc_score', 'LogisticRegression', 'StackingClassifier', 'ExtraTreesClassifier', 'XGBClassifier']Dict:{'numpy': ['mean', 'sum', 'copy'], 'pandas': ['isna', 'concat', 'read_csv', 'value_counts'], 'matplotlib': [], 'seaborn': [], 'xgboost': [], 'statsmodels': [], 'sklearn': []} axis_0: 0, axis_1: 0
usppm-complete-eda-pytorch-baseline.py : ['read_csv', 'read_csv', 'read_csv', 'head', 'info', 'keys', 'map', 'map', 'apply', 'mean', 'array', 'get', 'join', 'map', 'map', 'apply', 'mean', 'array', 'get', 'join', 'astype', 'astype', 'keys', 'read_csv', 'head', 'map', 'set_index', 'array', 'get', 'join', '__init__', 'drop', 'drop', 'reset_index', 'reset_index', 'round', 'array', 'array', 'eval', 'array', 'array'] ['os', 'gc', 'random', 'requests', 'numpy', 'pandas', 'matplotlib.pyplot', 'seaborn', 'torch', 'torch.nn', 'warnings'] ['Image', 'tqdm', 'stats', 'Counter', 'WordCloud', 'STOPWORDS', 'StratifiedKFold', 'LabelEncoder', 'Dataset', 'DataLoader', 'AdamW', 'AutoTokenizer', 'AutoConfig', 'AutoModel', 'get_linear_schedule_with_warmup']Dict:{'os': [], 'gc': [], 'random': [], 'requests': ['head', 'get'], 'numpy': ['mean', 'round', 'info', 'array'], 'pandas': ['array', 'eval', 'read_csv'], 'matplotlib': ['get'], 'seaborn': [], 'PIL': ['eval'], 'tqdm': ['__init__'], 'scipy': [], 'collections': ['keys', 'get', '__init__'], 'wordcloud': [], 'sklearn': ['__init__'], 'torch': ['__init__'], 'transformers': [], 'warnings': []} axis_0: 0, axis_1: 0
